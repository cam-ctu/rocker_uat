
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:03:03.284] plan(): Setting new future strategy stack:
[17:03:03.284] List of future strategies:
[17:03:03.284] 1. sequential:
[17:03:03.284]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.284]    - tweaked: FALSE
[17:03:03.284]    - call: future::plan("sequential")
[17:03:03.295] plan(): nbrOfWorkers() = 1
> library("listenv")
> plan(multicore)
[17:03:03.312] plan(): Setting new future strategy stack:
[17:03:03.312] List of future strategies:
[17:03:03.312] 1. multicore:
[17:03:03.312]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.312]    - tweaked: FALSE
[17:03:03.312]    - call: plan(multicore)
[17:03:03.327] plan(): nbrOfWorkers() = 2
> 
> message("*** multicore() ...")
*** multicore() ...
> 
> for (cores in 1:min(2L, availableCores("multicore"))) {
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   if (!supportsMulticore()) {
+     message(sprintf("Multicore futures are not supporting on '%s'. Falling back to use synchronous sequential futures", .Platform$OS.type))
+   }
+ 
+   nworkers <- nbrOfWorkers()
+   message("Number of workers: ", nworkers)
+   stopifnot(nworkers == cores)
+   
+   for (globals in c(FALSE, TRUE)) {
+ 
+     message(sprintf("*** multicore(..., globals = %s) without globals", globals))
+   
+     f <- multicore({
+       42L
+     }, globals = globals)
+     stopifnot(inherits(f, "MulticoreFuture") || ((cores ==1 || !supportsMulticore()) && inherits(f, "SequentialFuture")))
+   
+     print(resolved(f))
+     y <- value(f)
+     print(y)
+     stopifnot(y == 42L)
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) with globals", globals))
+     ## A global variable
+     a <- 0
+     f <- multicore({
+       b <- 3
+       c <- 2
+       a * b * c
+     }, globals = globals)
+     print(f)
+   
+   
+     ## A multicore future is evaluated in a separated
+     ## forked process.  Changing the value of a global
+     ## variable should not affect the result of the
+     ## future.
+     a <- 7  ## Make sure globals are frozen
+     v <- value(f)
+     print(v)
+     stopifnot(v == 0)
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) with globals and blocking", globals))
+     x <- listenv()
+     for (ii in 1:4) {
+       message(sprintf(" - Creating multicore future #%d ...", ii))
+       x[[ii]] <- multicore({ ii }, globals = globals)
+     }
+     message(sprintf(" - Resolving %d multicore futures", length(x)))
+     v <- sapply(x, FUN = value)
+     stopifnot(all(v == 1:4))
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) and errors", globals))
+     f <- multicore({
+       stop("Whoops!")
+       1
+     }, globals = globals)
+     print(f)
+     v <- value(f, signal = FALSE)
+     print(v)
+     stopifnot(inherits(v, "simpleError"))
+   
+     res <- try(value(f), silent = TRUE)
+     print(res)
+     stopifnot(inherits(res, "try-error"))
+   
+     ## Error is repeated
+     res <- try(value(f), silent = TRUE)
+     print(res)
+     stopifnot(inherits(res, "try-error"))
+ 
+     ## Custom error class
+     f <- multicore({
+       stop(structure(list(message = "boom"),
+                      class = c("MyError", "error", "condition")))
+     })
+     print(f)
+     v <- value(f, signal = FALSE)
+     print(v)
+     stopifnot(inherits(v, "error"), inherits(v, "MyError"))
+   
+     ## Make sure error is signaled
+     res <- tryCatch(value(f), error = identity)
+     stopifnot(inherits(res, "error"))
+   
+     ## Issue #200: Custom condition class attributes are lost 
+     stopifnot(inherits(res, "MyError"))    
+   } # for (globals ...)
+ 
+ 
+   message("*** multicore(..., workers = 1L) ...")
+ 
+   a <- 2
+   b <- 3
+   yTruth <- a * b
+ 
+   f <- multicore({ a * b }, globals = TRUE, workers = 1L)
+   rm(list = c("a", "b"))
+ 
+   v <- value(f)
+   print(v)
+   stopifnot(v == yTruth)
+ 
+   message("*** multicore(..., workers = 1L) ... DONE")
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
Number of workers: 1
*** multicore(..., globals = FALSE) without globals
[17:03:03.384] getGlobalsAndPackages() ...
[17:03:03.384] Not searching for globals
[17:03:03.384] - globals: [0] <none>
[17:03:03.385] getGlobalsAndPackages() ... DONE
[17:03:03.385] Packages needed by the future expression (n = 0): <none>
[17:03:03.386] Packages needed by future strategies (n = 0): <none>
[17:03:03.386] {
[17:03:03.386]     {
[17:03:03.386]         {
[17:03:03.386]             ...future.startTime <- base::Sys.time()
[17:03:03.386]             {
[17:03:03.386]                 {
[17:03:03.386]                   {
[17:03:03.386]                     base::local({
[17:03:03.386]                       has_future <- base::requireNamespace("future", 
[17:03:03.386]                         quietly = TRUE)
[17:03:03.386]                       if (has_future) {
[17:03:03.386]                         ns <- base::getNamespace("future")
[17:03:03.386]                         version <- ns[[".package"]][["version"]]
[17:03:03.386]                         if (is.null(version)) 
[17:03:03.386]                           version <- utils::packageVersion("future")
[17:03:03.386]                       }
[17:03:03.386]                       else {
[17:03:03.386]                         version <- NULL
[17:03:03.386]                       }
[17:03:03.386]                       if (!has_future || version < "1.8.0") {
[17:03:03.386]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.386]                           "", base::R.version$version.string), 
[17:03:03.386]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:03.386]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.386]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.386]                             "release", "version")], collapse = " "), 
[17:03:03.386]                           hostname = base::Sys.info()[["nodename"]])
[17:03:03.386]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.386]                           info)
[17:03:03.386]                         info <- base::paste(info, collapse = "; ")
[17:03:03.386]                         if (!has_future) {
[17:03:03.386]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.386]                             info)
[17:03:03.386]                         }
[17:03:03.386]                         else {
[17:03:03.386]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.386]                             info, version)
[17:03:03.386]                         }
[17:03:03.386]                         base::stop(msg)
[17:03:03.386]                       }
[17:03:03.386]                     })
[17:03:03.386]                   }
[17:03:03.386]                   ...future.strategy.old <- future::plan("list")
[17:03:03.386]                   options(future.plan = NULL)
[17:03:03.386]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.386]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.386]                 }
[17:03:03.386]                 ...future.workdir <- getwd()
[17:03:03.386]             }
[17:03:03.386]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.386]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.386]         }
[17:03:03.386]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.386]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.386]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.386]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.386]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.386]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.386]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.386]             base::names(...future.oldOptions))
[17:03:03.386]     }
[17:03:03.386]     if (FALSE) {
[17:03:03.386]     }
[17:03:03.386]     else {
[17:03:03.386]         if (TRUE) {
[17:03:03.386]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.386]                 open = "w")
[17:03:03.386]         }
[17:03:03.386]         else {
[17:03:03.386]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.386]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.386]         }
[17:03:03.386]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.386]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.386]             base::sink(type = "output", split = FALSE)
[17:03:03.386]             base::close(...future.stdout)
[17:03:03.386]         }, add = TRUE)
[17:03:03.386]     }
[17:03:03.386]     ...future.frame <- base::sys.nframe()
[17:03:03.386]     ...future.conditions <- base::list()
[17:03:03.386]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.386]     if (FALSE) {
[17:03:03.386]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.386]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.386]     }
[17:03:03.386]     ...future.result <- base::tryCatch({
[17:03:03.386]         base::withCallingHandlers({
[17:03:03.386]             ...future.value <- base::withVisible(base::local({
[17:03:03.386]                 42L
[17:03:03.386]             }))
[17:03:03.386]             future::FutureResult(value = ...future.value$value, 
[17:03:03.386]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.386]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.386]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.386]                     ...future.globalenv.names))
[17:03:03.386]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.386]         }, condition = base::local({
[17:03:03.386]             c <- base::c
[17:03:03.386]             inherits <- base::inherits
[17:03:03.386]             invokeRestart <- base::invokeRestart
[17:03:03.386]             length <- base::length
[17:03:03.386]             list <- base::list
[17:03:03.386]             seq.int <- base::seq.int
[17:03:03.386]             signalCondition <- base::signalCondition
[17:03:03.386]             sys.calls <- base::sys.calls
[17:03:03.386]             `[[` <- base::`[[`
[17:03:03.386]             `+` <- base::`+`
[17:03:03.386]             `<<-` <- base::`<<-`
[17:03:03.386]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.386]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.386]                   3L)]
[17:03:03.386]             }
[17:03:03.386]             function(cond) {
[17:03:03.386]                 is_error <- inherits(cond, "error")
[17:03:03.386]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.386]                   NULL)
[17:03:03.386]                 if (is_error) {
[17:03:03.386]                   sessionInformation <- function() {
[17:03:03.386]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.386]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.386]                       search = base::search(), system = base::Sys.info())
[17:03:03.386]                   }
[17:03:03.386]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.386]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.386]                     cond$call), session = sessionInformation(), 
[17:03:03.386]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.386]                   signalCondition(cond)
[17:03:03.386]                 }
[17:03:03.386]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.386]                 "immediateCondition"))) {
[17:03:03.386]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.386]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.386]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.386]                   if (TRUE && !signal) {
[17:03:03.386]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.386]                     {
[17:03:03.386]                       inherits <- base::inherits
[17:03:03.386]                       invokeRestart <- base::invokeRestart
[17:03:03.386]                       is.null <- base::is.null
[17:03:03.386]                       muffled <- FALSE
[17:03:03.386]                       if (inherits(cond, "message")) {
[17:03:03.386]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.386]                         if (muffled) 
[17:03:03.386]                           invokeRestart("muffleMessage")
[17:03:03.386]                       }
[17:03:03.386]                       else if (inherits(cond, "warning")) {
[17:03:03.386]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.386]                         if (muffled) 
[17:03:03.386]                           invokeRestart("muffleWarning")
[17:03:03.386]                       }
[17:03:03.386]                       else if (inherits(cond, "condition")) {
[17:03:03.386]                         if (!is.null(pattern)) {
[17:03:03.386]                           computeRestarts <- base::computeRestarts
[17:03:03.386]                           grepl <- base::grepl
[17:03:03.386]                           restarts <- computeRestarts(cond)
[17:03:03.386]                           for (restart in restarts) {
[17:03:03.386]                             name <- restart$name
[17:03:03.386]                             if (is.null(name)) 
[17:03:03.386]                               next
[17:03:03.386]                             if (!grepl(pattern, name)) 
[17:03:03.386]                               next
[17:03:03.386]                             invokeRestart(restart)
[17:03:03.386]                             muffled <- TRUE
[17:03:03.386]                             break
[17:03:03.386]                           }
[17:03:03.386]                         }
[17:03:03.386]                       }
[17:03:03.386]                       invisible(muffled)
[17:03:03.386]                     }
[17:03:03.386]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.386]                   }
[17:03:03.386]                 }
[17:03:03.386]                 else {
[17:03:03.386]                   if (TRUE) {
[17:03:03.386]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.386]                     {
[17:03:03.386]                       inherits <- base::inherits
[17:03:03.386]                       invokeRestart <- base::invokeRestart
[17:03:03.386]                       is.null <- base::is.null
[17:03:03.386]                       muffled <- FALSE
[17:03:03.386]                       if (inherits(cond, "message")) {
[17:03:03.386]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.386]                         if (muffled) 
[17:03:03.386]                           invokeRestart("muffleMessage")
[17:03:03.386]                       }
[17:03:03.386]                       else if (inherits(cond, "warning")) {
[17:03:03.386]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.386]                         if (muffled) 
[17:03:03.386]                           invokeRestart("muffleWarning")
[17:03:03.386]                       }
[17:03:03.386]                       else if (inherits(cond, "condition")) {
[17:03:03.386]                         if (!is.null(pattern)) {
[17:03:03.386]                           computeRestarts <- base::computeRestarts
[17:03:03.386]                           grepl <- base::grepl
[17:03:03.386]                           restarts <- computeRestarts(cond)
[17:03:03.386]                           for (restart in restarts) {
[17:03:03.386]                             name <- restart$name
[17:03:03.386]                             if (is.null(name)) 
[17:03:03.386]                               next
[17:03:03.386]                             if (!grepl(pattern, name)) 
[17:03:03.386]                               next
[17:03:03.386]                             invokeRestart(restart)
[17:03:03.386]                             muffled <- TRUE
[17:03:03.386]                             break
[17:03:03.386]                           }
[17:03:03.386]                         }
[17:03:03.386]                       }
[17:03:03.386]                       invisible(muffled)
[17:03:03.386]                     }
[17:03:03.386]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.386]                   }
[17:03:03.386]                 }
[17:03:03.386]             }
[17:03:03.386]         }))
[17:03:03.386]     }, error = function(ex) {
[17:03:03.386]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.386]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.386]                 ...future.rng), started = ...future.startTime, 
[17:03:03.386]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.386]             version = "1.8"), class = "FutureResult")
[17:03:03.386]     }, finally = {
[17:03:03.386]         if (!identical(...future.workdir, getwd())) 
[17:03:03.386]             setwd(...future.workdir)
[17:03:03.386]         {
[17:03:03.386]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.386]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.386]             }
[17:03:03.386]             base::options(...future.oldOptions)
[17:03:03.386]             if (.Platform$OS.type == "windows") {
[17:03:03.386]                 old_names <- names(...future.oldEnvVars)
[17:03:03.386]                 envs <- base::Sys.getenv()
[17:03:03.386]                 names <- names(envs)
[17:03:03.386]                 common <- intersect(names, old_names)
[17:03:03.386]                 added <- setdiff(names, old_names)
[17:03:03.386]                 removed <- setdiff(old_names, names)
[17:03:03.386]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.386]                   envs[common]]
[17:03:03.386]                 NAMES <- toupper(changed)
[17:03:03.386]                 args <- list()
[17:03:03.386]                 for (kk in seq_along(NAMES)) {
[17:03:03.386]                   name <- changed[[kk]]
[17:03:03.386]                   NAME <- NAMES[[kk]]
[17:03:03.386]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.386]                     next
[17:03:03.386]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.386]                 }
[17:03:03.386]                 NAMES <- toupper(added)
[17:03:03.386]                 for (kk in seq_along(NAMES)) {
[17:03:03.386]                   name <- added[[kk]]
[17:03:03.386]                   NAME <- NAMES[[kk]]
[17:03:03.386]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.386]                     next
[17:03:03.386]                   args[[name]] <- ""
[17:03:03.386]                 }
[17:03:03.386]                 NAMES <- toupper(removed)
[17:03:03.386]                 for (kk in seq_along(NAMES)) {
[17:03:03.386]                   name <- removed[[kk]]
[17:03:03.386]                   NAME <- NAMES[[kk]]
[17:03:03.386]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.386]                     next
[17:03:03.386]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.386]                 }
[17:03:03.386]                 if (length(args) > 0) 
[17:03:03.386]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.386]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.386]             }
[17:03:03.386]             else {
[17:03:03.386]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.386]             }
[17:03:03.386]             {
[17:03:03.386]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.386]                   0L) {
[17:03:03.386]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.386]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.386]                   base::options(opts)
[17:03:03.386]                 }
[17:03:03.386]                 {
[17:03:03.386]                   {
[17:03:03.386]                     NULL
[17:03:03.386]                     RNGkind("Mersenne-Twister")
[17:03:03.386]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:03.386]                       inherits = FALSE)
[17:03:03.386]                   }
[17:03:03.386]                   options(future.plan = NULL)
[17:03:03.386]                   if (is.na(NA_character_)) 
[17:03:03.386]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.386]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.386]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.386]                     .init = FALSE)
[17:03:03.386]                 }
[17:03:03.386]             }
[17:03:03.386]         }
[17:03:03.386]     })
[17:03:03.386]     if (TRUE) {
[17:03:03.386]         base::sink(type = "output", split = FALSE)
[17:03:03.386]         if (TRUE) {
[17:03:03.386]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.386]         }
[17:03:03.386]         else {
[17:03:03.386]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.386]         }
[17:03:03.386]         base::close(...future.stdout)
[17:03:03.386]         ...future.stdout <- NULL
[17:03:03.386]     }
[17:03:03.386]     ...future.result$conditions <- ...future.conditions
[17:03:03.386]     ...future.result$finished <- base::Sys.time()
[17:03:03.386]     ...future.result
[17:03:03.386] }
[17:03:03.388] plan(): Setting new future strategy stack:
[17:03:03.388] List of future strategies:
[17:03:03.388] 1. sequential:
[17:03:03.388]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.388]    - tweaked: FALSE
[17:03:03.388]    - call: NULL
[17:03:03.389] plan(): nbrOfWorkers() = 1
[17:03:03.390] plan(): Setting new future strategy stack:
[17:03:03.390] List of future strategies:
[17:03:03.390] 1. multicore:
[17:03:03.390]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.390]    - tweaked: FALSE
[17:03:03.390]    - call: plan(multicore)
[17:03:03.393] plan(): nbrOfWorkers() = 1
[17:03:03.394] SequentialFuture started (and completed)
[17:03:03.394] resolved() for ‘SequentialFuture’ ...
[17:03:03.394] - state: ‘finished’
[17:03:03.394] - run: TRUE
[17:03:03.395] - result: ‘FutureResult’
[17:03:03.395] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
*** multicore(..., globals = FALSE) with globals
[17:03:03.398] getGlobalsAndPackages() ...
[17:03:03.398] Not searching for globals
[17:03:03.399] - globals: [0] <none>
[17:03:03.399] getGlobalsAndPackages() ... DONE
[17:03:03.399] Packages needed by the future expression (n = 0): <none>
[17:03:03.399] Packages needed by future strategies (n = 0): <none>
[17:03:03.400] {
[17:03:03.400]     {
[17:03:03.400]         {
[17:03:03.400]             ...future.startTime <- base::Sys.time()
[17:03:03.400]             {
[17:03:03.400]                 {
[17:03:03.400]                   {
[17:03:03.400]                     base::local({
[17:03:03.400]                       has_future <- base::requireNamespace("future", 
[17:03:03.400]                         quietly = TRUE)
[17:03:03.400]                       if (has_future) {
[17:03:03.400]                         ns <- base::getNamespace("future")
[17:03:03.400]                         version <- ns[[".package"]][["version"]]
[17:03:03.400]                         if (is.null(version)) 
[17:03:03.400]                           version <- utils::packageVersion("future")
[17:03:03.400]                       }
[17:03:03.400]                       else {
[17:03:03.400]                         version <- NULL
[17:03:03.400]                       }
[17:03:03.400]                       if (!has_future || version < "1.8.0") {
[17:03:03.400]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.400]                           "", base::R.version$version.string), 
[17:03:03.400]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:03.400]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.400]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.400]                             "release", "version")], collapse = " "), 
[17:03:03.400]                           hostname = base::Sys.info()[["nodename"]])
[17:03:03.400]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.400]                           info)
[17:03:03.400]                         info <- base::paste(info, collapse = "; ")
[17:03:03.400]                         if (!has_future) {
[17:03:03.400]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.400]                             info)
[17:03:03.400]                         }
[17:03:03.400]                         else {
[17:03:03.400]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.400]                             info, version)
[17:03:03.400]                         }
[17:03:03.400]                         base::stop(msg)
[17:03:03.400]                       }
[17:03:03.400]                     })
[17:03:03.400]                   }
[17:03:03.400]                   ...future.strategy.old <- future::plan("list")
[17:03:03.400]                   options(future.plan = NULL)
[17:03:03.400]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.400]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.400]                 }
[17:03:03.400]                 ...future.workdir <- getwd()
[17:03:03.400]             }
[17:03:03.400]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.400]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.400]         }
[17:03:03.400]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.400]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.400]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.400]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.400]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.400]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.400]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.400]             base::names(...future.oldOptions))
[17:03:03.400]     }
[17:03:03.400]     if (FALSE) {
[17:03:03.400]     }
[17:03:03.400]     else {
[17:03:03.400]         if (TRUE) {
[17:03:03.400]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.400]                 open = "w")
[17:03:03.400]         }
[17:03:03.400]         else {
[17:03:03.400]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.400]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.400]         }
[17:03:03.400]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.400]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.400]             base::sink(type = "output", split = FALSE)
[17:03:03.400]             base::close(...future.stdout)
[17:03:03.400]         }, add = TRUE)
[17:03:03.400]     }
[17:03:03.400]     ...future.frame <- base::sys.nframe()
[17:03:03.400]     ...future.conditions <- base::list()
[17:03:03.400]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.400]     if (FALSE) {
[17:03:03.400]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.400]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.400]     }
[17:03:03.400]     ...future.result <- base::tryCatch({
[17:03:03.400]         base::withCallingHandlers({
[17:03:03.400]             ...future.value <- base::withVisible(base::local({
[17:03:03.400]                 b <- 3
[17:03:03.400]                 c <- 2
[17:03:03.400]                 a * b * c
[17:03:03.400]             }))
[17:03:03.400]             future::FutureResult(value = ...future.value$value, 
[17:03:03.400]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.400]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.400]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.400]                     ...future.globalenv.names))
[17:03:03.400]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.400]         }, condition = base::local({
[17:03:03.400]             c <- base::c
[17:03:03.400]             inherits <- base::inherits
[17:03:03.400]             invokeRestart <- base::invokeRestart
[17:03:03.400]             length <- base::length
[17:03:03.400]             list <- base::list
[17:03:03.400]             seq.int <- base::seq.int
[17:03:03.400]             signalCondition <- base::signalCondition
[17:03:03.400]             sys.calls <- base::sys.calls
[17:03:03.400]             `[[` <- base::`[[`
[17:03:03.400]             `+` <- base::`+`
[17:03:03.400]             `<<-` <- base::`<<-`
[17:03:03.400]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.400]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.400]                   3L)]
[17:03:03.400]             }
[17:03:03.400]             function(cond) {
[17:03:03.400]                 is_error <- inherits(cond, "error")
[17:03:03.400]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.400]                   NULL)
[17:03:03.400]                 if (is_error) {
[17:03:03.400]                   sessionInformation <- function() {
[17:03:03.400]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.400]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.400]                       search = base::search(), system = base::Sys.info())
[17:03:03.400]                   }
[17:03:03.400]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.400]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.400]                     cond$call), session = sessionInformation(), 
[17:03:03.400]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.400]                   signalCondition(cond)
[17:03:03.400]                 }
[17:03:03.400]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.400]                 "immediateCondition"))) {
[17:03:03.400]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.400]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.400]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.400]                   if (TRUE && !signal) {
[17:03:03.400]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.400]                     {
[17:03:03.400]                       inherits <- base::inherits
[17:03:03.400]                       invokeRestart <- base::invokeRestart
[17:03:03.400]                       is.null <- base::is.null
[17:03:03.400]                       muffled <- FALSE
[17:03:03.400]                       if (inherits(cond, "message")) {
[17:03:03.400]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.400]                         if (muffled) 
[17:03:03.400]                           invokeRestart("muffleMessage")
[17:03:03.400]                       }
[17:03:03.400]                       else if (inherits(cond, "warning")) {
[17:03:03.400]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.400]                         if (muffled) 
[17:03:03.400]                           invokeRestart("muffleWarning")
[17:03:03.400]                       }
[17:03:03.400]                       else if (inherits(cond, "condition")) {
[17:03:03.400]                         if (!is.null(pattern)) {
[17:03:03.400]                           computeRestarts <- base::computeRestarts
[17:03:03.400]                           grepl <- base::grepl
[17:03:03.400]                           restarts <- computeRestarts(cond)
[17:03:03.400]                           for (restart in restarts) {
[17:03:03.400]                             name <- restart$name
[17:03:03.400]                             if (is.null(name)) 
[17:03:03.400]                               next
[17:03:03.400]                             if (!grepl(pattern, name)) 
[17:03:03.400]                               next
[17:03:03.400]                             invokeRestart(restart)
[17:03:03.400]                             muffled <- TRUE
[17:03:03.400]                             break
[17:03:03.400]                           }
[17:03:03.400]                         }
[17:03:03.400]                       }
[17:03:03.400]                       invisible(muffled)
[17:03:03.400]                     }
[17:03:03.400]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.400]                   }
[17:03:03.400]                 }
[17:03:03.400]                 else {
[17:03:03.400]                   if (TRUE) {
[17:03:03.400]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.400]                     {
[17:03:03.400]                       inherits <- base::inherits
[17:03:03.400]                       invokeRestart <- base::invokeRestart
[17:03:03.400]                       is.null <- base::is.null
[17:03:03.400]                       muffled <- FALSE
[17:03:03.400]                       if (inherits(cond, "message")) {
[17:03:03.400]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.400]                         if (muffled) 
[17:03:03.400]                           invokeRestart("muffleMessage")
[17:03:03.400]                       }
[17:03:03.400]                       else if (inherits(cond, "warning")) {
[17:03:03.400]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.400]                         if (muffled) 
[17:03:03.400]                           invokeRestart("muffleWarning")
[17:03:03.400]                       }
[17:03:03.400]                       else if (inherits(cond, "condition")) {
[17:03:03.400]                         if (!is.null(pattern)) {
[17:03:03.400]                           computeRestarts <- base::computeRestarts
[17:03:03.400]                           grepl <- base::grepl
[17:03:03.400]                           restarts <- computeRestarts(cond)
[17:03:03.400]                           for (restart in restarts) {
[17:03:03.400]                             name <- restart$name
[17:03:03.400]                             if (is.null(name)) 
[17:03:03.400]                               next
[17:03:03.400]                             if (!grepl(pattern, name)) 
[17:03:03.400]                               next
[17:03:03.400]                             invokeRestart(restart)
[17:03:03.400]                             muffled <- TRUE
[17:03:03.400]                             break
[17:03:03.400]                           }
[17:03:03.400]                         }
[17:03:03.400]                       }
[17:03:03.400]                       invisible(muffled)
[17:03:03.400]                     }
[17:03:03.400]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.400]                   }
[17:03:03.400]                 }
[17:03:03.400]             }
[17:03:03.400]         }))
[17:03:03.400]     }, error = function(ex) {
[17:03:03.400]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.400]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.400]                 ...future.rng), started = ...future.startTime, 
[17:03:03.400]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.400]             version = "1.8"), class = "FutureResult")
[17:03:03.400]     }, finally = {
[17:03:03.400]         if (!identical(...future.workdir, getwd())) 
[17:03:03.400]             setwd(...future.workdir)
[17:03:03.400]         {
[17:03:03.400]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.400]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.400]             }
[17:03:03.400]             base::options(...future.oldOptions)
[17:03:03.400]             if (.Platform$OS.type == "windows") {
[17:03:03.400]                 old_names <- names(...future.oldEnvVars)
[17:03:03.400]                 envs <- base::Sys.getenv()
[17:03:03.400]                 names <- names(envs)
[17:03:03.400]                 common <- intersect(names, old_names)
[17:03:03.400]                 added <- setdiff(names, old_names)
[17:03:03.400]                 removed <- setdiff(old_names, names)
[17:03:03.400]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.400]                   envs[common]]
[17:03:03.400]                 NAMES <- toupper(changed)
[17:03:03.400]                 args <- list()
[17:03:03.400]                 for (kk in seq_along(NAMES)) {
[17:03:03.400]                   name <- changed[[kk]]
[17:03:03.400]                   NAME <- NAMES[[kk]]
[17:03:03.400]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.400]                     next
[17:03:03.400]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.400]                 }
[17:03:03.400]                 NAMES <- toupper(added)
[17:03:03.400]                 for (kk in seq_along(NAMES)) {
[17:03:03.400]                   name <- added[[kk]]
[17:03:03.400]                   NAME <- NAMES[[kk]]
[17:03:03.400]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.400]                     next
[17:03:03.400]                   args[[name]] <- ""
[17:03:03.400]                 }
[17:03:03.400]                 NAMES <- toupper(removed)
[17:03:03.400]                 for (kk in seq_along(NAMES)) {
[17:03:03.400]                   name <- removed[[kk]]
[17:03:03.400]                   NAME <- NAMES[[kk]]
[17:03:03.400]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.400]                     next
[17:03:03.400]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.400]                 }
[17:03:03.400]                 if (length(args) > 0) 
[17:03:03.400]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.400]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.400]             }
[17:03:03.400]             else {
[17:03:03.400]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.400]             }
[17:03:03.400]             {
[17:03:03.400]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.400]                   0L) {
[17:03:03.400]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.400]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.400]                   base::options(opts)
[17:03:03.400]                 }
[17:03:03.400]                 {
[17:03:03.400]                   {
[17:03:03.400]                     NULL
[17:03:03.400]                     RNGkind("Mersenne-Twister")
[17:03:03.400]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:03.400]                       inherits = FALSE)
[17:03:03.400]                   }
[17:03:03.400]                   options(future.plan = NULL)
[17:03:03.400]                   if (is.na(NA_character_)) 
[17:03:03.400]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.400]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.400]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.400]                     .init = FALSE)
[17:03:03.400]                 }
[17:03:03.400]             }
[17:03:03.400]         }
[17:03:03.400]     })
[17:03:03.400]     if (TRUE) {
[17:03:03.400]         base::sink(type = "output", split = FALSE)
[17:03:03.400]         if (TRUE) {
[17:03:03.400]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.400]         }
[17:03:03.400]         else {
[17:03:03.400]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.400]         }
[17:03:03.400]         base::close(...future.stdout)
[17:03:03.400]         ...future.stdout <- NULL
[17:03:03.400]     }
[17:03:03.400]     ...future.result$conditions <- ...future.conditions
[17:03:03.400]     ...future.result$finished <- base::Sys.time()
[17:03:03.400]     ...future.result
[17:03:03.400] }
[17:03:03.401] plan(): Setting new future strategy stack:
[17:03:03.401] List of future strategies:
[17:03:03.401] 1. sequential:
[17:03:03.401]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.401]    - tweaked: FALSE
[17:03:03.401]    - call: NULL
[17:03:03.402] plan(): nbrOfWorkers() = 1
[17:03:03.403] plan(): Setting new future strategy stack:
[17:03:03.403] List of future strategies:
[17:03:03.403] 1. multicore:
[17:03:03.403]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.403]    - tweaked: FALSE
[17:03:03.403]    - call: plan(multicore)
[17:03:03.406] plan(): nbrOfWorkers() = 1
[17:03:03.406] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 07dd274d-66ac-c50c-eb90-f530485edd79
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[1] 0
*** multicore(..., globals = FALSE) with globals and blocking
 - Creating multicore future #1 ...
[17:03:03.411] getGlobalsAndPackages() ...
[17:03:03.411] Not searching for globals
[17:03:03.411] - globals: [0] <none>
[17:03:03.411] getGlobalsAndPackages() ... DONE
[17:03:03.411] Packages needed by the future expression (n = 0): <none>
[17:03:03.412] Packages needed by future strategies (n = 0): <none>
[17:03:03.412] {
[17:03:03.412]     {
[17:03:03.412]         {
[17:03:03.412]             ...future.startTime <- base::Sys.time()
[17:03:03.412]             {
[17:03:03.412]                 {
[17:03:03.412]                   {
[17:03:03.412]                     base::local({
[17:03:03.412]                       has_future <- base::requireNamespace("future", 
[17:03:03.412]                         quietly = TRUE)
[17:03:03.412]                       if (has_future) {
[17:03:03.412]                         ns <- base::getNamespace("future")
[17:03:03.412]                         version <- ns[[".package"]][["version"]]
[17:03:03.412]                         if (is.null(version)) 
[17:03:03.412]                           version <- utils::packageVersion("future")
[17:03:03.412]                       }
[17:03:03.412]                       else {
[17:03:03.412]                         version <- NULL
[17:03:03.412]                       }
[17:03:03.412]                       if (!has_future || version < "1.8.0") {
[17:03:03.412]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.412]                           "", base::R.version$version.string), 
[17:03:03.412]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:03.412]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.412]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.412]                             "release", "version")], collapse = " "), 
[17:03:03.412]                           hostname = base::Sys.info()[["nodename"]])
[17:03:03.412]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.412]                           info)
[17:03:03.412]                         info <- base::paste(info, collapse = "; ")
[17:03:03.412]                         if (!has_future) {
[17:03:03.412]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.412]                             info)
[17:03:03.412]                         }
[17:03:03.412]                         else {
[17:03:03.412]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.412]                             info, version)
[17:03:03.412]                         }
[17:03:03.412]                         base::stop(msg)
[17:03:03.412]                       }
[17:03:03.412]                     })
[17:03:03.412]                   }
[17:03:03.412]                   ...future.strategy.old <- future::plan("list")
[17:03:03.412]                   options(future.plan = NULL)
[17:03:03.412]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.412]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.412]                 }
[17:03:03.412]                 ...future.workdir <- getwd()
[17:03:03.412]             }
[17:03:03.412]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.412]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.412]         }
[17:03:03.412]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.412]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.412]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.412]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.412]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.412]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.412]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.412]             base::names(...future.oldOptions))
[17:03:03.412]     }
[17:03:03.412]     if (FALSE) {
[17:03:03.412]     }
[17:03:03.412]     else {
[17:03:03.412]         if (TRUE) {
[17:03:03.412]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.412]                 open = "w")
[17:03:03.412]         }
[17:03:03.412]         else {
[17:03:03.412]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.412]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.412]         }
[17:03:03.412]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.412]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.412]             base::sink(type = "output", split = FALSE)
[17:03:03.412]             base::close(...future.stdout)
[17:03:03.412]         }, add = TRUE)
[17:03:03.412]     }
[17:03:03.412]     ...future.frame <- base::sys.nframe()
[17:03:03.412]     ...future.conditions <- base::list()
[17:03:03.412]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.412]     if (FALSE) {
[17:03:03.412]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.412]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.412]     }
[17:03:03.412]     ...future.result <- base::tryCatch({
[17:03:03.412]         base::withCallingHandlers({
[17:03:03.412]             ...future.value <- base::withVisible(base::local({
[17:03:03.412]                 ii
[17:03:03.412]             }))
[17:03:03.412]             future::FutureResult(value = ...future.value$value, 
[17:03:03.412]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.412]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.412]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.412]                     ...future.globalenv.names))
[17:03:03.412]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.412]         }, condition = base::local({
[17:03:03.412]             c <- base::c
[17:03:03.412]             inherits <- base::inherits
[17:03:03.412]             invokeRestart <- base::invokeRestart
[17:03:03.412]             length <- base::length
[17:03:03.412]             list <- base::list
[17:03:03.412]             seq.int <- base::seq.int
[17:03:03.412]             signalCondition <- base::signalCondition
[17:03:03.412]             sys.calls <- base::sys.calls
[17:03:03.412]             `[[` <- base::`[[`
[17:03:03.412]             `+` <- base::`+`
[17:03:03.412]             `<<-` <- base::`<<-`
[17:03:03.412]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.412]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.412]                   3L)]
[17:03:03.412]             }
[17:03:03.412]             function(cond) {
[17:03:03.412]                 is_error <- inherits(cond, "error")
[17:03:03.412]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.412]                   NULL)
[17:03:03.412]                 if (is_error) {
[17:03:03.412]                   sessionInformation <- function() {
[17:03:03.412]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.412]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.412]                       search = base::search(), system = base::Sys.info())
[17:03:03.412]                   }
[17:03:03.412]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.412]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.412]                     cond$call), session = sessionInformation(), 
[17:03:03.412]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.412]                   signalCondition(cond)
[17:03:03.412]                 }
[17:03:03.412]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.412]                 "immediateCondition"))) {
[17:03:03.412]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.412]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.412]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.412]                   if (TRUE && !signal) {
[17:03:03.412]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.412]                     {
[17:03:03.412]                       inherits <- base::inherits
[17:03:03.412]                       invokeRestart <- base::invokeRestart
[17:03:03.412]                       is.null <- base::is.null
[17:03:03.412]                       muffled <- FALSE
[17:03:03.412]                       if (inherits(cond, "message")) {
[17:03:03.412]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.412]                         if (muffled) 
[17:03:03.412]                           invokeRestart("muffleMessage")
[17:03:03.412]                       }
[17:03:03.412]                       else if (inherits(cond, "warning")) {
[17:03:03.412]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.412]                         if (muffled) 
[17:03:03.412]                           invokeRestart("muffleWarning")
[17:03:03.412]                       }
[17:03:03.412]                       else if (inherits(cond, "condition")) {
[17:03:03.412]                         if (!is.null(pattern)) {
[17:03:03.412]                           computeRestarts <- base::computeRestarts
[17:03:03.412]                           grepl <- base::grepl
[17:03:03.412]                           restarts <- computeRestarts(cond)
[17:03:03.412]                           for (restart in restarts) {
[17:03:03.412]                             name <- restart$name
[17:03:03.412]                             if (is.null(name)) 
[17:03:03.412]                               next
[17:03:03.412]                             if (!grepl(pattern, name)) 
[17:03:03.412]                               next
[17:03:03.412]                             invokeRestart(restart)
[17:03:03.412]                             muffled <- TRUE
[17:03:03.412]                             break
[17:03:03.412]                           }
[17:03:03.412]                         }
[17:03:03.412]                       }
[17:03:03.412]                       invisible(muffled)
[17:03:03.412]                     }
[17:03:03.412]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.412]                   }
[17:03:03.412]                 }
[17:03:03.412]                 else {
[17:03:03.412]                   if (TRUE) {
[17:03:03.412]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.412]                     {
[17:03:03.412]                       inherits <- base::inherits
[17:03:03.412]                       invokeRestart <- base::invokeRestart
[17:03:03.412]                       is.null <- base::is.null
[17:03:03.412]                       muffled <- FALSE
[17:03:03.412]                       if (inherits(cond, "message")) {
[17:03:03.412]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.412]                         if (muffled) 
[17:03:03.412]                           invokeRestart("muffleMessage")
[17:03:03.412]                       }
[17:03:03.412]                       else if (inherits(cond, "warning")) {
[17:03:03.412]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.412]                         if (muffled) 
[17:03:03.412]                           invokeRestart("muffleWarning")
[17:03:03.412]                       }
[17:03:03.412]                       else if (inherits(cond, "condition")) {
[17:03:03.412]                         if (!is.null(pattern)) {
[17:03:03.412]                           computeRestarts <- base::computeRestarts
[17:03:03.412]                           grepl <- base::grepl
[17:03:03.412]                           restarts <- computeRestarts(cond)
[17:03:03.412]                           for (restart in restarts) {
[17:03:03.412]                             name <- restart$name
[17:03:03.412]                             if (is.null(name)) 
[17:03:03.412]                               next
[17:03:03.412]                             if (!grepl(pattern, name)) 
[17:03:03.412]                               next
[17:03:03.412]                             invokeRestart(restart)
[17:03:03.412]                             muffled <- TRUE
[17:03:03.412]                             break
[17:03:03.412]                           }
[17:03:03.412]                         }
[17:03:03.412]                       }
[17:03:03.412]                       invisible(muffled)
[17:03:03.412]                     }
[17:03:03.412]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.412]                   }
[17:03:03.412]                 }
[17:03:03.412]             }
[17:03:03.412]         }))
[17:03:03.412]     }, error = function(ex) {
[17:03:03.412]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.412]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.412]                 ...future.rng), started = ...future.startTime, 
[17:03:03.412]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.412]             version = "1.8"), class = "FutureResult")
[17:03:03.412]     }, finally = {
[17:03:03.412]         if (!identical(...future.workdir, getwd())) 
[17:03:03.412]             setwd(...future.workdir)
[17:03:03.412]         {
[17:03:03.412]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.412]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.412]             }
[17:03:03.412]             base::options(...future.oldOptions)
[17:03:03.412]             if (.Platform$OS.type == "windows") {
[17:03:03.412]                 old_names <- names(...future.oldEnvVars)
[17:03:03.412]                 envs <- base::Sys.getenv()
[17:03:03.412]                 names <- names(envs)
[17:03:03.412]                 common <- intersect(names, old_names)
[17:03:03.412]                 added <- setdiff(names, old_names)
[17:03:03.412]                 removed <- setdiff(old_names, names)
[17:03:03.412]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.412]                   envs[common]]
[17:03:03.412]                 NAMES <- toupper(changed)
[17:03:03.412]                 args <- list()
[17:03:03.412]                 for (kk in seq_along(NAMES)) {
[17:03:03.412]                   name <- changed[[kk]]
[17:03:03.412]                   NAME <- NAMES[[kk]]
[17:03:03.412]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.412]                     next
[17:03:03.412]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.412]                 }
[17:03:03.412]                 NAMES <- toupper(added)
[17:03:03.412]                 for (kk in seq_along(NAMES)) {
[17:03:03.412]                   name <- added[[kk]]
[17:03:03.412]                   NAME <- NAMES[[kk]]
[17:03:03.412]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.412]                     next
[17:03:03.412]                   args[[name]] <- ""
[17:03:03.412]                 }
[17:03:03.412]                 NAMES <- toupper(removed)
[17:03:03.412]                 for (kk in seq_along(NAMES)) {
[17:03:03.412]                   name <- removed[[kk]]
[17:03:03.412]                   NAME <- NAMES[[kk]]
[17:03:03.412]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.412]                     next
[17:03:03.412]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.412]                 }
[17:03:03.412]                 if (length(args) > 0) 
[17:03:03.412]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.412]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.412]             }
[17:03:03.412]             else {
[17:03:03.412]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.412]             }
[17:03:03.412]             {
[17:03:03.412]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.412]                   0L) {
[17:03:03.412]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.412]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.412]                   base::options(opts)
[17:03:03.412]                 }
[17:03:03.412]                 {
[17:03:03.412]                   {
[17:03:03.412]                     NULL
[17:03:03.412]                     RNGkind("Mersenne-Twister")
[17:03:03.412]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:03.412]                       inherits = FALSE)
[17:03:03.412]                   }
[17:03:03.412]                   options(future.plan = NULL)
[17:03:03.412]                   if (is.na(NA_character_)) 
[17:03:03.412]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.412]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.412]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.412]                     .init = FALSE)
[17:03:03.412]                 }
[17:03:03.412]             }
[17:03:03.412]         }
[17:03:03.412]     })
[17:03:03.412]     if (TRUE) {
[17:03:03.412]         base::sink(type = "output", split = FALSE)
[17:03:03.412]         if (TRUE) {
[17:03:03.412]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.412]         }
[17:03:03.412]         else {
[17:03:03.412]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.412]         }
[17:03:03.412]         base::close(...future.stdout)
[17:03:03.412]         ...future.stdout <- NULL
[17:03:03.412]     }
[17:03:03.412]     ...future.result$conditions <- ...future.conditions
[17:03:03.412]     ...future.result$finished <- base::Sys.time()
[17:03:03.412]     ...future.result
[17:03:03.412] }
[17:03:03.414] plan(): Setting new future strategy stack:
[17:03:03.414] List of future strategies:
[17:03:03.414] 1. sequential:
[17:03:03.414]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.414]    - tweaked: FALSE
[17:03:03.414]    - call: NULL
[17:03:03.414] plan(): nbrOfWorkers() = 1
[17:03:03.415] plan(): Setting new future strategy stack:
[17:03:03.415] List of future strategies:
[17:03:03.415] 1. multicore:
[17:03:03.415]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.415]    - tweaked: FALSE
[17:03:03.415]    - call: plan(multicore)
[17:03:03.418] plan(): nbrOfWorkers() = 1
[17:03:03.419] SequentialFuture started (and completed)
 - Creating multicore future #2 ...
[17:03:03.422] getGlobalsAndPackages() ...
[17:03:03.422] Not searching for globals
[17:03:03.422] - globals: [0] <none>
[17:03:03.423] getGlobalsAndPackages() ... DONE
[17:03:03.423] Packages needed by the future expression (n = 0): <none>
[17:03:03.423] Packages needed by future strategies (n = 0): <none>
[17:03:03.423] {
[17:03:03.423]     {
[17:03:03.423]         {
[17:03:03.423]             ...future.startTime <- base::Sys.time()
[17:03:03.423]             {
[17:03:03.423]                 {
[17:03:03.423]                   {
[17:03:03.423]                     base::local({
[17:03:03.423]                       has_future <- base::requireNamespace("future", 
[17:03:03.423]                         quietly = TRUE)
[17:03:03.423]                       if (has_future) {
[17:03:03.423]                         ns <- base::getNamespace("future")
[17:03:03.423]                         version <- ns[[".package"]][["version"]]
[17:03:03.423]                         if (is.null(version)) 
[17:03:03.423]                           version <- utils::packageVersion("future")
[17:03:03.423]                       }
[17:03:03.423]                       else {
[17:03:03.423]                         version <- NULL
[17:03:03.423]                       }
[17:03:03.423]                       if (!has_future || version < "1.8.0") {
[17:03:03.423]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.423]                           "", base::R.version$version.string), 
[17:03:03.423]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:03.423]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.423]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.423]                             "release", "version")], collapse = " "), 
[17:03:03.423]                           hostname = base::Sys.info()[["nodename"]])
[17:03:03.423]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.423]                           info)
[17:03:03.423]                         info <- base::paste(info, collapse = "; ")
[17:03:03.423]                         if (!has_future) {
[17:03:03.423]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.423]                             info)
[17:03:03.423]                         }
[17:03:03.423]                         else {
[17:03:03.423]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.423]                             info, version)
[17:03:03.423]                         }
[17:03:03.423]                         base::stop(msg)
[17:03:03.423]                       }
[17:03:03.423]                     })
[17:03:03.423]                   }
[17:03:03.423]                   ...future.strategy.old <- future::plan("list")
[17:03:03.423]                   options(future.plan = NULL)
[17:03:03.423]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.423]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.423]                 }
[17:03:03.423]                 ...future.workdir <- getwd()
[17:03:03.423]             }
[17:03:03.423]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.423]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.423]         }
[17:03:03.423]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.423]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.423]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.423]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.423]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.423]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.423]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.423]             base::names(...future.oldOptions))
[17:03:03.423]     }
[17:03:03.423]     if (FALSE) {
[17:03:03.423]     }
[17:03:03.423]     else {
[17:03:03.423]         if (TRUE) {
[17:03:03.423]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.423]                 open = "w")
[17:03:03.423]         }
[17:03:03.423]         else {
[17:03:03.423]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.423]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.423]         }
[17:03:03.423]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.423]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.423]             base::sink(type = "output", split = FALSE)
[17:03:03.423]             base::close(...future.stdout)
[17:03:03.423]         }, add = TRUE)
[17:03:03.423]     }
[17:03:03.423]     ...future.frame <- base::sys.nframe()
[17:03:03.423]     ...future.conditions <- base::list()
[17:03:03.423]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.423]     if (FALSE) {
[17:03:03.423]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.423]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.423]     }
[17:03:03.423]     ...future.result <- base::tryCatch({
[17:03:03.423]         base::withCallingHandlers({
[17:03:03.423]             ...future.value <- base::withVisible(base::local({
[17:03:03.423]                 ii
[17:03:03.423]             }))
[17:03:03.423]             future::FutureResult(value = ...future.value$value, 
[17:03:03.423]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.423]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.423]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.423]                     ...future.globalenv.names))
[17:03:03.423]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.423]         }, condition = base::local({
[17:03:03.423]             c <- base::c
[17:03:03.423]             inherits <- base::inherits
[17:03:03.423]             invokeRestart <- base::invokeRestart
[17:03:03.423]             length <- base::length
[17:03:03.423]             list <- base::list
[17:03:03.423]             seq.int <- base::seq.int
[17:03:03.423]             signalCondition <- base::signalCondition
[17:03:03.423]             sys.calls <- base::sys.calls
[17:03:03.423]             `[[` <- base::`[[`
[17:03:03.423]             `+` <- base::`+`
[17:03:03.423]             `<<-` <- base::`<<-`
[17:03:03.423]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.423]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.423]                   3L)]
[17:03:03.423]             }
[17:03:03.423]             function(cond) {
[17:03:03.423]                 is_error <- inherits(cond, "error")
[17:03:03.423]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.423]                   NULL)
[17:03:03.423]                 if (is_error) {
[17:03:03.423]                   sessionInformation <- function() {
[17:03:03.423]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.423]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.423]                       search = base::search(), system = base::Sys.info())
[17:03:03.423]                   }
[17:03:03.423]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.423]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.423]                     cond$call), session = sessionInformation(), 
[17:03:03.423]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.423]                   signalCondition(cond)
[17:03:03.423]                 }
[17:03:03.423]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.423]                 "immediateCondition"))) {
[17:03:03.423]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.423]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.423]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.423]                   if (TRUE && !signal) {
[17:03:03.423]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.423]                     {
[17:03:03.423]                       inherits <- base::inherits
[17:03:03.423]                       invokeRestart <- base::invokeRestart
[17:03:03.423]                       is.null <- base::is.null
[17:03:03.423]                       muffled <- FALSE
[17:03:03.423]                       if (inherits(cond, "message")) {
[17:03:03.423]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.423]                         if (muffled) 
[17:03:03.423]                           invokeRestart("muffleMessage")
[17:03:03.423]                       }
[17:03:03.423]                       else if (inherits(cond, "warning")) {
[17:03:03.423]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.423]                         if (muffled) 
[17:03:03.423]                           invokeRestart("muffleWarning")
[17:03:03.423]                       }
[17:03:03.423]                       else if (inherits(cond, "condition")) {
[17:03:03.423]                         if (!is.null(pattern)) {
[17:03:03.423]                           computeRestarts <- base::computeRestarts
[17:03:03.423]                           grepl <- base::grepl
[17:03:03.423]                           restarts <- computeRestarts(cond)
[17:03:03.423]                           for (restart in restarts) {
[17:03:03.423]                             name <- restart$name
[17:03:03.423]                             if (is.null(name)) 
[17:03:03.423]                               next
[17:03:03.423]                             if (!grepl(pattern, name)) 
[17:03:03.423]                               next
[17:03:03.423]                             invokeRestart(restart)
[17:03:03.423]                             muffled <- TRUE
[17:03:03.423]                             break
[17:03:03.423]                           }
[17:03:03.423]                         }
[17:03:03.423]                       }
[17:03:03.423]                       invisible(muffled)
[17:03:03.423]                     }
[17:03:03.423]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.423]                   }
[17:03:03.423]                 }
[17:03:03.423]                 else {
[17:03:03.423]                   if (TRUE) {
[17:03:03.423]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.423]                     {
[17:03:03.423]                       inherits <- base::inherits
[17:03:03.423]                       invokeRestart <- base::invokeRestart
[17:03:03.423]                       is.null <- base::is.null
[17:03:03.423]                       muffled <- FALSE
[17:03:03.423]                       if (inherits(cond, "message")) {
[17:03:03.423]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.423]                         if (muffled) 
[17:03:03.423]                           invokeRestart("muffleMessage")
[17:03:03.423]                       }
[17:03:03.423]                       else if (inherits(cond, "warning")) {
[17:03:03.423]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.423]                         if (muffled) 
[17:03:03.423]                           invokeRestart("muffleWarning")
[17:03:03.423]                       }
[17:03:03.423]                       else if (inherits(cond, "condition")) {
[17:03:03.423]                         if (!is.null(pattern)) {
[17:03:03.423]                           computeRestarts <- base::computeRestarts
[17:03:03.423]                           grepl <- base::grepl
[17:03:03.423]                           restarts <- computeRestarts(cond)
[17:03:03.423]                           for (restart in restarts) {
[17:03:03.423]                             name <- restart$name
[17:03:03.423]                             if (is.null(name)) 
[17:03:03.423]                               next
[17:03:03.423]                             if (!grepl(pattern, name)) 
[17:03:03.423]                               next
[17:03:03.423]                             invokeRestart(restart)
[17:03:03.423]                             muffled <- TRUE
[17:03:03.423]                             break
[17:03:03.423]                           }
[17:03:03.423]                         }
[17:03:03.423]                       }
[17:03:03.423]                       invisible(muffled)
[17:03:03.423]                     }
[17:03:03.423]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.423]                   }
[17:03:03.423]                 }
[17:03:03.423]             }
[17:03:03.423]         }))
[17:03:03.423]     }, error = function(ex) {
[17:03:03.423]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.423]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.423]                 ...future.rng), started = ...future.startTime, 
[17:03:03.423]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.423]             version = "1.8"), class = "FutureResult")
[17:03:03.423]     }, finally = {
[17:03:03.423]         if (!identical(...future.workdir, getwd())) 
[17:03:03.423]             setwd(...future.workdir)
[17:03:03.423]         {
[17:03:03.423]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.423]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.423]             }
[17:03:03.423]             base::options(...future.oldOptions)
[17:03:03.423]             if (.Platform$OS.type == "windows") {
[17:03:03.423]                 old_names <- names(...future.oldEnvVars)
[17:03:03.423]                 envs <- base::Sys.getenv()
[17:03:03.423]                 names <- names(envs)
[17:03:03.423]                 common <- intersect(names, old_names)
[17:03:03.423]                 added <- setdiff(names, old_names)
[17:03:03.423]                 removed <- setdiff(old_names, names)
[17:03:03.423]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.423]                   envs[common]]
[17:03:03.423]                 NAMES <- toupper(changed)
[17:03:03.423]                 args <- list()
[17:03:03.423]                 for (kk in seq_along(NAMES)) {
[17:03:03.423]                   name <- changed[[kk]]
[17:03:03.423]                   NAME <- NAMES[[kk]]
[17:03:03.423]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.423]                     next
[17:03:03.423]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.423]                 }
[17:03:03.423]                 NAMES <- toupper(added)
[17:03:03.423]                 for (kk in seq_along(NAMES)) {
[17:03:03.423]                   name <- added[[kk]]
[17:03:03.423]                   NAME <- NAMES[[kk]]
[17:03:03.423]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.423]                     next
[17:03:03.423]                   args[[name]] <- ""
[17:03:03.423]                 }
[17:03:03.423]                 NAMES <- toupper(removed)
[17:03:03.423]                 for (kk in seq_along(NAMES)) {
[17:03:03.423]                   name <- removed[[kk]]
[17:03:03.423]                   NAME <- NAMES[[kk]]
[17:03:03.423]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.423]                     next
[17:03:03.423]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.423]                 }
[17:03:03.423]                 if (length(args) > 0) 
[17:03:03.423]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.423]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.423]             }
[17:03:03.423]             else {
[17:03:03.423]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.423]             }
[17:03:03.423]             {
[17:03:03.423]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.423]                   0L) {
[17:03:03.423]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.423]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.423]                   base::options(opts)
[17:03:03.423]                 }
[17:03:03.423]                 {
[17:03:03.423]                   {
[17:03:03.423]                     NULL
[17:03:03.423]                     RNGkind("Mersenne-Twister")
[17:03:03.423]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:03.423]                       inherits = FALSE)
[17:03:03.423]                   }
[17:03:03.423]                   options(future.plan = NULL)
[17:03:03.423]                   if (is.na(NA_character_)) 
[17:03:03.423]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.423]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.423]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.423]                     .init = FALSE)
[17:03:03.423]                 }
[17:03:03.423]             }
[17:03:03.423]         }
[17:03:03.423]     })
[17:03:03.423]     if (TRUE) {
[17:03:03.423]         base::sink(type = "output", split = FALSE)
[17:03:03.423]         if (TRUE) {
[17:03:03.423]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.423]         }
[17:03:03.423]         else {
[17:03:03.423]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.423]         }
[17:03:03.423]         base::close(...future.stdout)
[17:03:03.423]         ...future.stdout <- NULL
[17:03:03.423]     }
[17:03:03.423]     ...future.result$conditions <- ...future.conditions
[17:03:03.423]     ...future.result$finished <- base::Sys.time()
[17:03:03.423]     ...future.result
[17:03:03.423] }
[17:03:03.425] plan(): Setting new future strategy stack:
[17:03:03.425] List of future strategies:
[17:03:03.425] 1. sequential:
[17:03:03.425]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.425]    - tweaked: FALSE
[17:03:03.425]    - call: NULL
[17:03:03.426] plan(): nbrOfWorkers() = 1
[17:03:03.426] plan(): Setting new future strategy stack:
[17:03:03.426] List of future strategies:
[17:03:03.426] 1. multicore:
[17:03:03.426]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.426]    - tweaked: FALSE
[17:03:03.426]    - call: plan(multicore)
[17:03:03.430] plan(): nbrOfWorkers() = 1
[17:03:03.430] SequentialFuture started (and completed)
 - Creating multicore future #3 ...
[17:03:03.435] getGlobalsAndPackages() ...
[17:03:03.435] Not searching for globals
[17:03:03.435] - globals: [0] <none>
[17:03:03.435] getGlobalsAndPackages() ... DONE
[17:03:03.436] Packages needed by the future expression (n = 0): <none>
[17:03:03.436] Packages needed by future strategies (n = 0): <none>
[17:03:03.436] {
[17:03:03.436]     {
[17:03:03.436]         {
[17:03:03.436]             ...future.startTime <- base::Sys.time()
[17:03:03.436]             {
[17:03:03.436]                 {
[17:03:03.436]                   {
[17:03:03.436]                     base::local({
[17:03:03.436]                       has_future <- base::requireNamespace("future", 
[17:03:03.436]                         quietly = TRUE)
[17:03:03.436]                       if (has_future) {
[17:03:03.436]                         ns <- base::getNamespace("future")
[17:03:03.436]                         version <- ns[[".package"]][["version"]]
[17:03:03.436]                         if (is.null(version)) 
[17:03:03.436]                           version <- utils::packageVersion("future")
[17:03:03.436]                       }
[17:03:03.436]                       else {
[17:03:03.436]                         version <- NULL
[17:03:03.436]                       }
[17:03:03.436]                       if (!has_future || version < "1.8.0") {
[17:03:03.436]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.436]                           "", base::R.version$version.string), 
[17:03:03.436]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:03.436]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.436]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.436]                             "release", "version")], collapse = " "), 
[17:03:03.436]                           hostname = base::Sys.info()[["nodename"]])
[17:03:03.436]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.436]                           info)
[17:03:03.436]                         info <- base::paste(info, collapse = "; ")
[17:03:03.436]                         if (!has_future) {
[17:03:03.436]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.436]                             info)
[17:03:03.436]                         }
[17:03:03.436]                         else {
[17:03:03.436]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.436]                             info, version)
[17:03:03.436]                         }
[17:03:03.436]                         base::stop(msg)
[17:03:03.436]                       }
[17:03:03.436]                     })
[17:03:03.436]                   }
[17:03:03.436]                   ...future.strategy.old <- future::plan("list")
[17:03:03.436]                   options(future.plan = NULL)
[17:03:03.436]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.436]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.436]                 }
[17:03:03.436]                 ...future.workdir <- getwd()
[17:03:03.436]             }
[17:03:03.436]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.436]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.436]         }
[17:03:03.436]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.436]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.436]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.436]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.436]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.436]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.436]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.436]             base::names(...future.oldOptions))
[17:03:03.436]     }
[17:03:03.436]     if (FALSE) {
[17:03:03.436]     }
[17:03:03.436]     else {
[17:03:03.436]         if (TRUE) {
[17:03:03.436]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.436]                 open = "w")
[17:03:03.436]         }
[17:03:03.436]         else {
[17:03:03.436]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.436]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.436]         }
[17:03:03.436]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.436]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.436]             base::sink(type = "output", split = FALSE)
[17:03:03.436]             base::close(...future.stdout)
[17:03:03.436]         }, add = TRUE)
[17:03:03.436]     }
[17:03:03.436]     ...future.frame <- base::sys.nframe()
[17:03:03.436]     ...future.conditions <- base::list()
[17:03:03.436]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.436]     if (FALSE) {
[17:03:03.436]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.436]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.436]     }
[17:03:03.436]     ...future.result <- base::tryCatch({
[17:03:03.436]         base::withCallingHandlers({
[17:03:03.436]             ...future.value <- base::withVisible(base::local({
[17:03:03.436]                 ii
[17:03:03.436]             }))
[17:03:03.436]             future::FutureResult(value = ...future.value$value, 
[17:03:03.436]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.436]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.436]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.436]                     ...future.globalenv.names))
[17:03:03.436]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.436]         }, condition = base::local({
[17:03:03.436]             c <- base::c
[17:03:03.436]             inherits <- base::inherits
[17:03:03.436]             invokeRestart <- base::invokeRestart
[17:03:03.436]             length <- base::length
[17:03:03.436]             list <- base::list
[17:03:03.436]             seq.int <- base::seq.int
[17:03:03.436]             signalCondition <- base::signalCondition
[17:03:03.436]             sys.calls <- base::sys.calls
[17:03:03.436]             `[[` <- base::`[[`
[17:03:03.436]             `+` <- base::`+`
[17:03:03.436]             `<<-` <- base::`<<-`
[17:03:03.436]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.436]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.436]                   3L)]
[17:03:03.436]             }
[17:03:03.436]             function(cond) {
[17:03:03.436]                 is_error <- inherits(cond, "error")
[17:03:03.436]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.436]                   NULL)
[17:03:03.436]                 if (is_error) {
[17:03:03.436]                   sessionInformation <- function() {
[17:03:03.436]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.436]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.436]                       search = base::search(), system = base::Sys.info())
[17:03:03.436]                   }
[17:03:03.436]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.436]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.436]                     cond$call), session = sessionInformation(), 
[17:03:03.436]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.436]                   signalCondition(cond)
[17:03:03.436]                 }
[17:03:03.436]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.436]                 "immediateCondition"))) {
[17:03:03.436]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.436]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.436]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.436]                   if (TRUE && !signal) {
[17:03:03.436]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.436]                     {
[17:03:03.436]                       inherits <- base::inherits
[17:03:03.436]                       invokeRestart <- base::invokeRestart
[17:03:03.436]                       is.null <- base::is.null
[17:03:03.436]                       muffled <- FALSE
[17:03:03.436]                       if (inherits(cond, "message")) {
[17:03:03.436]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.436]                         if (muffled) 
[17:03:03.436]                           invokeRestart("muffleMessage")
[17:03:03.436]                       }
[17:03:03.436]                       else if (inherits(cond, "warning")) {
[17:03:03.436]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.436]                         if (muffled) 
[17:03:03.436]                           invokeRestart("muffleWarning")
[17:03:03.436]                       }
[17:03:03.436]                       else if (inherits(cond, "condition")) {
[17:03:03.436]                         if (!is.null(pattern)) {
[17:03:03.436]                           computeRestarts <- base::computeRestarts
[17:03:03.436]                           grepl <- base::grepl
[17:03:03.436]                           restarts <- computeRestarts(cond)
[17:03:03.436]                           for (restart in restarts) {
[17:03:03.436]                             name <- restart$name
[17:03:03.436]                             if (is.null(name)) 
[17:03:03.436]                               next
[17:03:03.436]                             if (!grepl(pattern, name)) 
[17:03:03.436]                               next
[17:03:03.436]                             invokeRestart(restart)
[17:03:03.436]                             muffled <- TRUE
[17:03:03.436]                             break
[17:03:03.436]                           }
[17:03:03.436]                         }
[17:03:03.436]                       }
[17:03:03.436]                       invisible(muffled)
[17:03:03.436]                     }
[17:03:03.436]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.436]                   }
[17:03:03.436]                 }
[17:03:03.436]                 else {
[17:03:03.436]                   if (TRUE) {
[17:03:03.436]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.436]                     {
[17:03:03.436]                       inherits <- base::inherits
[17:03:03.436]                       invokeRestart <- base::invokeRestart
[17:03:03.436]                       is.null <- base::is.null
[17:03:03.436]                       muffled <- FALSE
[17:03:03.436]                       if (inherits(cond, "message")) {
[17:03:03.436]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.436]                         if (muffled) 
[17:03:03.436]                           invokeRestart("muffleMessage")
[17:03:03.436]                       }
[17:03:03.436]                       else if (inherits(cond, "warning")) {
[17:03:03.436]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.436]                         if (muffled) 
[17:03:03.436]                           invokeRestart("muffleWarning")
[17:03:03.436]                       }
[17:03:03.436]                       else if (inherits(cond, "condition")) {
[17:03:03.436]                         if (!is.null(pattern)) {
[17:03:03.436]                           computeRestarts <- base::computeRestarts
[17:03:03.436]                           grepl <- base::grepl
[17:03:03.436]                           restarts <- computeRestarts(cond)
[17:03:03.436]                           for (restart in restarts) {
[17:03:03.436]                             name <- restart$name
[17:03:03.436]                             if (is.null(name)) 
[17:03:03.436]                               next
[17:03:03.436]                             if (!grepl(pattern, name)) 
[17:03:03.436]                               next
[17:03:03.436]                             invokeRestart(restart)
[17:03:03.436]                             muffled <- TRUE
[17:03:03.436]                             break
[17:03:03.436]                           }
[17:03:03.436]                         }
[17:03:03.436]                       }
[17:03:03.436]                       invisible(muffled)
[17:03:03.436]                     }
[17:03:03.436]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.436]                   }
[17:03:03.436]                 }
[17:03:03.436]             }
[17:03:03.436]         }))
[17:03:03.436]     }, error = function(ex) {
[17:03:03.436]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.436]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.436]                 ...future.rng), started = ...future.startTime, 
[17:03:03.436]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.436]             version = "1.8"), class = "FutureResult")
[17:03:03.436]     }, finally = {
[17:03:03.436]         if (!identical(...future.workdir, getwd())) 
[17:03:03.436]             setwd(...future.workdir)
[17:03:03.436]         {
[17:03:03.436]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.436]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.436]             }
[17:03:03.436]             base::options(...future.oldOptions)
[17:03:03.436]             if (.Platform$OS.type == "windows") {
[17:03:03.436]                 old_names <- names(...future.oldEnvVars)
[17:03:03.436]                 envs <- base::Sys.getenv()
[17:03:03.436]                 names <- names(envs)
[17:03:03.436]                 common <- intersect(names, old_names)
[17:03:03.436]                 added <- setdiff(names, old_names)
[17:03:03.436]                 removed <- setdiff(old_names, names)
[17:03:03.436]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.436]                   envs[common]]
[17:03:03.436]                 NAMES <- toupper(changed)
[17:03:03.436]                 args <- list()
[17:03:03.436]                 for (kk in seq_along(NAMES)) {
[17:03:03.436]                   name <- changed[[kk]]
[17:03:03.436]                   NAME <- NAMES[[kk]]
[17:03:03.436]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.436]                     next
[17:03:03.436]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.436]                 }
[17:03:03.436]                 NAMES <- toupper(added)
[17:03:03.436]                 for (kk in seq_along(NAMES)) {
[17:03:03.436]                   name <- added[[kk]]
[17:03:03.436]                   NAME <- NAMES[[kk]]
[17:03:03.436]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.436]                     next
[17:03:03.436]                   args[[name]] <- ""
[17:03:03.436]                 }
[17:03:03.436]                 NAMES <- toupper(removed)
[17:03:03.436]                 for (kk in seq_along(NAMES)) {
[17:03:03.436]                   name <- removed[[kk]]
[17:03:03.436]                   NAME <- NAMES[[kk]]
[17:03:03.436]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.436]                     next
[17:03:03.436]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.436]                 }
[17:03:03.436]                 if (length(args) > 0) 
[17:03:03.436]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.436]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.436]             }
[17:03:03.436]             else {
[17:03:03.436]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.436]             }
[17:03:03.436]             {
[17:03:03.436]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.436]                   0L) {
[17:03:03.436]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.436]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.436]                   base::options(opts)
[17:03:03.436]                 }
[17:03:03.436]                 {
[17:03:03.436]                   {
[17:03:03.436]                     NULL
[17:03:03.436]                     RNGkind("Mersenne-Twister")
[17:03:03.436]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:03.436]                       inherits = FALSE)
[17:03:03.436]                   }
[17:03:03.436]                   options(future.plan = NULL)
[17:03:03.436]                   if (is.na(NA_character_)) 
[17:03:03.436]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.436]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.436]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.436]                     .init = FALSE)
[17:03:03.436]                 }
[17:03:03.436]             }
[17:03:03.436]         }
[17:03:03.436]     })
[17:03:03.436]     if (TRUE) {
[17:03:03.436]         base::sink(type = "output", split = FALSE)
[17:03:03.436]         if (TRUE) {
[17:03:03.436]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.436]         }
[17:03:03.436]         else {
[17:03:03.436]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.436]         }
[17:03:03.436]         base::close(...future.stdout)
[17:03:03.436]         ...future.stdout <- NULL
[17:03:03.436]     }
[17:03:03.436]     ...future.result$conditions <- ...future.conditions
[17:03:03.436]     ...future.result$finished <- base::Sys.time()
[17:03:03.436]     ...future.result
[17:03:03.436] }
[17:03:03.438] plan(): Setting new future strategy stack:
[17:03:03.438] List of future strategies:
[17:03:03.438] 1. sequential:
[17:03:03.438]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.438]    - tweaked: FALSE
[17:03:03.438]    - call: NULL
[17:03:03.438] plan(): nbrOfWorkers() = 1
[17:03:03.439] plan(): Setting new future strategy stack:
[17:03:03.439] List of future strategies:
[17:03:03.439] 1. multicore:
[17:03:03.439]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.439]    - tweaked: FALSE
[17:03:03.439]    - call: plan(multicore)
[17:03:03.443] plan(): nbrOfWorkers() = 1
[17:03:03.443] SequentialFuture started (and completed)
 - Creating multicore future #4 ...
[17:03:03.446] getGlobalsAndPackages() ...
[17:03:03.446] Not searching for globals
[17:03:03.446] - globals: [0] <none>
[17:03:03.446] getGlobalsAndPackages() ... DONE
[17:03:03.447] Packages needed by the future expression (n = 0): <none>
[17:03:03.447] Packages needed by future strategies (n = 0): <none>
[17:03:03.447] {
[17:03:03.447]     {
[17:03:03.447]         {
[17:03:03.447]             ...future.startTime <- base::Sys.time()
[17:03:03.447]             {
[17:03:03.447]                 {
[17:03:03.447]                   {
[17:03:03.447]                     base::local({
[17:03:03.447]                       has_future <- base::requireNamespace("future", 
[17:03:03.447]                         quietly = TRUE)
[17:03:03.447]                       if (has_future) {
[17:03:03.447]                         ns <- base::getNamespace("future")
[17:03:03.447]                         version <- ns[[".package"]][["version"]]
[17:03:03.447]                         if (is.null(version)) 
[17:03:03.447]                           version <- utils::packageVersion("future")
[17:03:03.447]                       }
[17:03:03.447]                       else {
[17:03:03.447]                         version <- NULL
[17:03:03.447]                       }
[17:03:03.447]                       if (!has_future || version < "1.8.0") {
[17:03:03.447]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.447]                           "", base::R.version$version.string), 
[17:03:03.447]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:03.447]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.447]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.447]                             "release", "version")], collapse = " "), 
[17:03:03.447]                           hostname = base::Sys.info()[["nodename"]])
[17:03:03.447]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.447]                           info)
[17:03:03.447]                         info <- base::paste(info, collapse = "; ")
[17:03:03.447]                         if (!has_future) {
[17:03:03.447]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.447]                             info)
[17:03:03.447]                         }
[17:03:03.447]                         else {
[17:03:03.447]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.447]                             info, version)
[17:03:03.447]                         }
[17:03:03.447]                         base::stop(msg)
[17:03:03.447]                       }
[17:03:03.447]                     })
[17:03:03.447]                   }
[17:03:03.447]                   ...future.strategy.old <- future::plan("list")
[17:03:03.447]                   options(future.plan = NULL)
[17:03:03.447]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.447]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.447]                 }
[17:03:03.447]                 ...future.workdir <- getwd()
[17:03:03.447]             }
[17:03:03.447]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.447]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.447]         }
[17:03:03.447]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.447]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.447]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.447]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.447]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.447]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.447]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.447]             base::names(...future.oldOptions))
[17:03:03.447]     }
[17:03:03.447]     if (FALSE) {
[17:03:03.447]     }
[17:03:03.447]     else {
[17:03:03.447]         if (TRUE) {
[17:03:03.447]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.447]                 open = "w")
[17:03:03.447]         }
[17:03:03.447]         else {
[17:03:03.447]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.447]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.447]         }
[17:03:03.447]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.447]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.447]             base::sink(type = "output", split = FALSE)
[17:03:03.447]             base::close(...future.stdout)
[17:03:03.447]         }, add = TRUE)
[17:03:03.447]     }
[17:03:03.447]     ...future.frame <- base::sys.nframe()
[17:03:03.447]     ...future.conditions <- base::list()
[17:03:03.447]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.447]     if (FALSE) {
[17:03:03.447]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.447]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.447]     }
[17:03:03.447]     ...future.result <- base::tryCatch({
[17:03:03.447]         base::withCallingHandlers({
[17:03:03.447]             ...future.value <- base::withVisible(base::local({
[17:03:03.447]                 ii
[17:03:03.447]             }))
[17:03:03.447]             future::FutureResult(value = ...future.value$value, 
[17:03:03.447]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.447]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.447]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.447]                     ...future.globalenv.names))
[17:03:03.447]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.447]         }, condition = base::local({
[17:03:03.447]             c <- base::c
[17:03:03.447]             inherits <- base::inherits
[17:03:03.447]             invokeRestart <- base::invokeRestart
[17:03:03.447]             length <- base::length
[17:03:03.447]             list <- base::list
[17:03:03.447]             seq.int <- base::seq.int
[17:03:03.447]             signalCondition <- base::signalCondition
[17:03:03.447]             sys.calls <- base::sys.calls
[17:03:03.447]             `[[` <- base::`[[`
[17:03:03.447]             `+` <- base::`+`
[17:03:03.447]             `<<-` <- base::`<<-`
[17:03:03.447]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.447]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.447]                   3L)]
[17:03:03.447]             }
[17:03:03.447]             function(cond) {
[17:03:03.447]                 is_error <- inherits(cond, "error")
[17:03:03.447]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.447]                   NULL)
[17:03:03.447]                 if (is_error) {
[17:03:03.447]                   sessionInformation <- function() {
[17:03:03.447]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.447]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.447]                       search = base::search(), system = base::Sys.info())
[17:03:03.447]                   }
[17:03:03.447]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.447]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.447]                     cond$call), session = sessionInformation(), 
[17:03:03.447]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.447]                   signalCondition(cond)
[17:03:03.447]                 }
[17:03:03.447]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.447]                 "immediateCondition"))) {
[17:03:03.447]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.447]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.447]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.447]                   if (TRUE && !signal) {
[17:03:03.447]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.447]                     {
[17:03:03.447]                       inherits <- base::inherits
[17:03:03.447]                       invokeRestart <- base::invokeRestart
[17:03:03.447]                       is.null <- base::is.null
[17:03:03.447]                       muffled <- FALSE
[17:03:03.447]                       if (inherits(cond, "message")) {
[17:03:03.447]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.447]                         if (muffled) 
[17:03:03.447]                           invokeRestart("muffleMessage")
[17:03:03.447]                       }
[17:03:03.447]                       else if (inherits(cond, "warning")) {
[17:03:03.447]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.447]                         if (muffled) 
[17:03:03.447]                           invokeRestart("muffleWarning")
[17:03:03.447]                       }
[17:03:03.447]                       else if (inherits(cond, "condition")) {
[17:03:03.447]                         if (!is.null(pattern)) {
[17:03:03.447]                           computeRestarts <- base::computeRestarts
[17:03:03.447]                           grepl <- base::grepl
[17:03:03.447]                           restarts <- computeRestarts(cond)
[17:03:03.447]                           for (restart in restarts) {
[17:03:03.447]                             name <- restart$name
[17:03:03.447]                             if (is.null(name)) 
[17:03:03.447]                               next
[17:03:03.447]                             if (!grepl(pattern, name)) 
[17:03:03.447]                               next
[17:03:03.447]                             invokeRestart(restart)
[17:03:03.447]                             muffled <- TRUE
[17:03:03.447]                             break
[17:03:03.447]                           }
[17:03:03.447]                         }
[17:03:03.447]                       }
[17:03:03.447]                       invisible(muffled)
[17:03:03.447]                     }
[17:03:03.447]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.447]                   }
[17:03:03.447]                 }
[17:03:03.447]                 else {
[17:03:03.447]                   if (TRUE) {
[17:03:03.447]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.447]                     {
[17:03:03.447]                       inherits <- base::inherits
[17:03:03.447]                       invokeRestart <- base::invokeRestart
[17:03:03.447]                       is.null <- base::is.null
[17:03:03.447]                       muffled <- FALSE
[17:03:03.447]                       if (inherits(cond, "message")) {
[17:03:03.447]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.447]                         if (muffled) 
[17:03:03.447]                           invokeRestart("muffleMessage")
[17:03:03.447]                       }
[17:03:03.447]                       else if (inherits(cond, "warning")) {
[17:03:03.447]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.447]                         if (muffled) 
[17:03:03.447]                           invokeRestart("muffleWarning")
[17:03:03.447]                       }
[17:03:03.447]                       else if (inherits(cond, "condition")) {
[17:03:03.447]                         if (!is.null(pattern)) {
[17:03:03.447]                           computeRestarts <- base::computeRestarts
[17:03:03.447]                           grepl <- base::grepl
[17:03:03.447]                           restarts <- computeRestarts(cond)
[17:03:03.447]                           for (restart in restarts) {
[17:03:03.447]                             name <- restart$name
[17:03:03.447]                             if (is.null(name)) 
[17:03:03.447]                               next
[17:03:03.447]                             if (!grepl(pattern, name)) 
[17:03:03.447]                               next
[17:03:03.447]                             invokeRestart(restart)
[17:03:03.447]                             muffled <- TRUE
[17:03:03.447]                             break
[17:03:03.447]                           }
[17:03:03.447]                         }
[17:03:03.447]                       }
[17:03:03.447]                       invisible(muffled)
[17:03:03.447]                     }
[17:03:03.447]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.447]                   }
[17:03:03.447]                 }
[17:03:03.447]             }
[17:03:03.447]         }))
[17:03:03.447]     }, error = function(ex) {
[17:03:03.447]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.447]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.447]                 ...future.rng), started = ...future.startTime, 
[17:03:03.447]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.447]             version = "1.8"), class = "FutureResult")
[17:03:03.447]     }, finally = {
[17:03:03.447]         if (!identical(...future.workdir, getwd())) 
[17:03:03.447]             setwd(...future.workdir)
[17:03:03.447]         {
[17:03:03.447]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.447]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.447]             }
[17:03:03.447]             base::options(...future.oldOptions)
[17:03:03.447]             if (.Platform$OS.type == "windows") {
[17:03:03.447]                 old_names <- names(...future.oldEnvVars)
[17:03:03.447]                 envs <- base::Sys.getenv()
[17:03:03.447]                 names <- names(envs)
[17:03:03.447]                 common <- intersect(names, old_names)
[17:03:03.447]                 added <- setdiff(names, old_names)
[17:03:03.447]                 removed <- setdiff(old_names, names)
[17:03:03.447]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.447]                   envs[common]]
[17:03:03.447]                 NAMES <- toupper(changed)
[17:03:03.447]                 args <- list()
[17:03:03.447]                 for (kk in seq_along(NAMES)) {
[17:03:03.447]                   name <- changed[[kk]]
[17:03:03.447]                   NAME <- NAMES[[kk]]
[17:03:03.447]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.447]                     next
[17:03:03.447]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.447]                 }
[17:03:03.447]                 NAMES <- toupper(added)
[17:03:03.447]                 for (kk in seq_along(NAMES)) {
[17:03:03.447]                   name <- added[[kk]]
[17:03:03.447]                   NAME <- NAMES[[kk]]
[17:03:03.447]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.447]                     next
[17:03:03.447]                   args[[name]] <- ""
[17:03:03.447]                 }
[17:03:03.447]                 NAMES <- toupper(removed)
[17:03:03.447]                 for (kk in seq_along(NAMES)) {
[17:03:03.447]                   name <- removed[[kk]]
[17:03:03.447]                   NAME <- NAMES[[kk]]
[17:03:03.447]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.447]                     next
[17:03:03.447]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.447]                 }
[17:03:03.447]                 if (length(args) > 0) 
[17:03:03.447]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.447]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.447]             }
[17:03:03.447]             else {
[17:03:03.447]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.447]             }
[17:03:03.447]             {
[17:03:03.447]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.447]                   0L) {
[17:03:03.447]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.447]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.447]                   base::options(opts)
[17:03:03.447]                 }
[17:03:03.447]                 {
[17:03:03.447]                   {
[17:03:03.447]                     NULL
[17:03:03.447]                     RNGkind("Mersenne-Twister")
[17:03:03.447]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:03.447]                       inherits = FALSE)
[17:03:03.447]                   }
[17:03:03.447]                   options(future.plan = NULL)
[17:03:03.447]                   if (is.na(NA_character_)) 
[17:03:03.447]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.447]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.447]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.447]                     .init = FALSE)
[17:03:03.447]                 }
[17:03:03.447]             }
[17:03:03.447]         }
[17:03:03.447]     })
[17:03:03.447]     if (TRUE) {
[17:03:03.447]         base::sink(type = "output", split = FALSE)
[17:03:03.447]         if (TRUE) {
[17:03:03.447]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.447]         }
[17:03:03.447]         else {
[17:03:03.447]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.447]         }
[17:03:03.447]         base::close(...future.stdout)
[17:03:03.447]         ...future.stdout <- NULL
[17:03:03.447]     }
[17:03:03.447]     ...future.result$conditions <- ...future.conditions
[17:03:03.447]     ...future.result$finished <- base::Sys.time()
[17:03:03.447]     ...future.result
[17:03:03.447] }
[17:03:03.449] plan(): Setting new future strategy stack:
[17:03:03.449] List of future strategies:
[17:03:03.449] 1. sequential:
[17:03:03.449]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.449]    - tweaked: FALSE
[17:03:03.449]    - call: NULL
[17:03:03.449] plan(): nbrOfWorkers() = 1
[17:03:03.450] plan(): Setting new future strategy stack:
[17:03:03.450] List of future strategies:
[17:03:03.450] 1. multicore:
[17:03:03.450]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.450]    - tweaked: FALSE
[17:03:03.450]    - call: plan(multicore)
[17:03:03.453] plan(): nbrOfWorkers() = 1
[17:03:03.454] SequentialFuture started (and completed)
 - Resolving 4 multicore futures
*** multicore(..., globals = FALSE) and errors
[17:03:03.458] getGlobalsAndPackages() ...
[17:03:03.458] Not searching for globals
[17:03:03.458] - globals: [0] <none>
[17:03:03.458] getGlobalsAndPackages() ... DONE
[17:03:03.458] Packages needed by the future expression (n = 0): <none>
[17:03:03.458] Packages needed by future strategies (n = 0): <none>
[17:03:03.459] {
[17:03:03.459]     {
[17:03:03.459]         {
[17:03:03.459]             ...future.startTime <- base::Sys.time()
[17:03:03.459]             {
[17:03:03.459]                 {
[17:03:03.459]                   {
[17:03:03.459]                     base::local({
[17:03:03.459]                       has_future <- base::requireNamespace("future", 
[17:03:03.459]                         quietly = TRUE)
[17:03:03.459]                       if (has_future) {
[17:03:03.459]                         ns <- base::getNamespace("future")
[17:03:03.459]                         version <- ns[[".package"]][["version"]]
[17:03:03.459]                         if (is.null(version)) 
[17:03:03.459]                           version <- utils::packageVersion("future")
[17:03:03.459]                       }
[17:03:03.459]                       else {
[17:03:03.459]                         version <- NULL
[17:03:03.459]                       }
[17:03:03.459]                       if (!has_future || version < "1.8.0") {
[17:03:03.459]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.459]                           "", base::R.version$version.string), 
[17:03:03.459]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:03.459]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.459]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.459]                             "release", "version")], collapse = " "), 
[17:03:03.459]                           hostname = base::Sys.info()[["nodename"]])
[17:03:03.459]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.459]                           info)
[17:03:03.459]                         info <- base::paste(info, collapse = "; ")
[17:03:03.459]                         if (!has_future) {
[17:03:03.459]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.459]                             info)
[17:03:03.459]                         }
[17:03:03.459]                         else {
[17:03:03.459]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.459]                             info, version)
[17:03:03.459]                         }
[17:03:03.459]                         base::stop(msg)
[17:03:03.459]                       }
[17:03:03.459]                     })
[17:03:03.459]                   }
[17:03:03.459]                   ...future.strategy.old <- future::plan("list")
[17:03:03.459]                   options(future.plan = NULL)
[17:03:03.459]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.459]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.459]                 }
[17:03:03.459]                 ...future.workdir <- getwd()
[17:03:03.459]             }
[17:03:03.459]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.459]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.459]         }
[17:03:03.459]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.459]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.459]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.459]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.459]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.459]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.459]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.459]             base::names(...future.oldOptions))
[17:03:03.459]     }
[17:03:03.459]     if (FALSE) {
[17:03:03.459]     }
[17:03:03.459]     else {
[17:03:03.459]         if (TRUE) {
[17:03:03.459]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.459]                 open = "w")
[17:03:03.459]         }
[17:03:03.459]         else {
[17:03:03.459]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.459]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.459]         }
[17:03:03.459]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.459]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.459]             base::sink(type = "output", split = FALSE)
[17:03:03.459]             base::close(...future.stdout)
[17:03:03.459]         }, add = TRUE)
[17:03:03.459]     }
[17:03:03.459]     ...future.frame <- base::sys.nframe()
[17:03:03.459]     ...future.conditions <- base::list()
[17:03:03.459]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.459]     if (FALSE) {
[17:03:03.459]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.459]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.459]     }
[17:03:03.459]     ...future.result <- base::tryCatch({
[17:03:03.459]         base::withCallingHandlers({
[17:03:03.459]             ...future.value <- base::withVisible(base::local({
[17:03:03.459]                 stop("Whoops!")
[17:03:03.459]                 1
[17:03:03.459]             }))
[17:03:03.459]             future::FutureResult(value = ...future.value$value, 
[17:03:03.459]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.459]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.459]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.459]                     ...future.globalenv.names))
[17:03:03.459]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.459]         }, condition = base::local({
[17:03:03.459]             c <- base::c
[17:03:03.459]             inherits <- base::inherits
[17:03:03.459]             invokeRestart <- base::invokeRestart
[17:03:03.459]             length <- base::length
[17:03:03.459]             list <- base::list
[17:03:03.459]             seq.int <- base::seq.int
[17:03:03.459]             signalCondition <- base::signalCondition
[17:03:03.459]             sys.calls <- base::sys.calls
[17:03:03.459]             `[[` <- base::`[[`
[17:03:03.459]             `+` <- base::`+`
[17:03:03.459]             `<<-` <- base::`<<-`
[17:03:03.459]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.459]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.459]                   3L)]
[17:03:03.459]             }
[17:03:03.459]             function(cond) {
[17:03:03.459]                 is_error <- inherits(cond, "error")
[17:03:03.459]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.459]                   NULL)
[17:03:03.459]                 if (is_error) {
[17:03:03.459]                   sessionInformation <- function() {
[17:03:03.459]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.459]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.459]                       search = base::search(), system = base::Sys.info())
[17:03:03.459]                   }
[17:03:03.459]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.459]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.459]                     cond$call), session = sessionInformation(), 
[17:03:03.459]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.459]                   signalCondition(cond)
[17:03:03.459]                 }
[17:03:03.459]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.459]                 "immediateCondition"))) {
[17:03:03.459]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.459]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.459]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.459]                   if (TRUE && !signal) {
[17:03:03.459]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.459]                     {
[17:03:03.459]                       inherits <- base::inherits
[17:03:03.459]                       invokeRestart <- base::invokeRestart
[17:03:03.459]                       is.null <- base::is.null
[17:03:03.459]                       muffled <- FALSE
[17:03:03.459]                       if (inherits(cond, "message")) {
[17:03:03.459]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.459]                         if (muffled) 
[17:03:03.459]                           invokeRestart("muffleMessage")
[17:03:03.459]                       }
[17:03:03.459]                       else if (inherits(cond, "warning")) {
[17:03:03.459]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.459]                         if (muffled) 
[17:03:03.459]                           invokeRestart("muffleWarning")
[17:03:03.459]                       }
[17:03:03.459]                       else if (inherits(cond, "condition")) {
[17:03:03.459]                         if (!is.null(pattern)) {
[17:03:03.459]                           computeRestarts <- base::computeRestarts
[17:03:03.459]                           grepl <- base::grepl
[17:03:03.459]                           restarts <- computeRestarts(cond)
[17:03:03.459]                           for (restart in restarts) {
[17:03:03.459]                             name <- restart$name
[17:03:03.459]                             if (is.null(name)) 
[17:03:03.459]                               next
[17:03:03.459]                             if (!grepl(pattern, name)) 
[17:03:03.459]                               next
[17:03:03.459]                             invokeRestart(restart)
[17:03:03.459]                             muffled <- TRUE
[17:03:03.459]                             break
[17:03:03.459]                           }
[17:03:03.459]                         }
[17:03:03.459]                       }
[17:03:03.459]                       invisible(muffled)
[17:03:03.459]                     }
[17:03:03.459]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.459]                   }
[17:03:03.459]                 }
[17:03:03.459]                 else {
[17:03:03.459]                   if (TRUE) {
[17:03:03.459]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.459]                     {
[17:03:03.459]                       inherits <- base::inherits
[17:03:03.459]                       invokeRestart <- base::invokeRestart
[17:03:03.459]                       is.null <- base::is.null
[17:03:03.459]                       muffled <- FALSE
[17:03:03.459]                       if (inherits(cond, "message")) {
[17:03:03.459]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.459]                         if (muffled) 
[17:03:03.459]                           invokeRestart("muffleMessage")
[17:03:03.459]                       }
[17:03:03.459]                       else if (inherits(cond, "warning")) {
[17:03:03.459]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.459]                         if (muffled) 
[17:03:03.459]                           invokeRestart("muffleWarning")
[17:03:03.459]                       }
[17:03:03.459]                       else if (inherits(cond, "condition")) {
[17:03:03.459]                         if (!is.null(pattern)) {
[17:03:03.459]                           computeRestarts <- base::computeRestarts
[17:03:03.459]                           grepl <- base::grepl
[17:03:03.459]                           restarts <- computeRestarts(cond)
[17:03:03.459]                           for (restart in restarts) {
[17:03:03.459]                             name <- restart$name
[17:03:03.459]                             if (is.null(name)) 
[17:03:03.459]                               next
[17:03:03.459]                             if (!grepl(pattern, name)) 
[17:03:03.459]                               next
[17:03:03.459]                             invokeRestart(restart)
[17:03:03.459]                             muffled <- TRUE
[17:03:03.459]                             break
[17:03:03.459]                           }
[17:03:03.459]                         }
[17:03:03.459]                       }
[17:03:03.459]                       invisible(muffled)
[17:03:03.459]                     }
[17:03:03.459]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.459]                   }
[17:03:03.459]                 }
[17:03:03.459]             }
[17:03:03.459]         }))
[17:03:03.459]     }, error = function(ex) {
[17:03:03.459]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.459]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.459]                 ...future.rng), started = ...future.startTime, 
[17:03:03.459]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.459]             version = "1.8"), class = "FutureResult")
[17:03:03.459]     }, finally = {
[17:03:03.459]         if (!identical(...future.workdir, getwd())) 
[17:03:03.459]             setwd(...future.workdir)
[17:03:03.459]         {
[17:03:03.459]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.459]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.459]             }
[17:03:03.459]             base::options(...future.oldOptions)
[17:03:03.459]             if (.Platform$OS.type == "windows") {
[17:03:03.459]                 old_names <- names(...future.oldEnvVars)
[17:03:03.459]                 envs <- base::Sys.getenv()
[17:03:03.459]                 names <- names(envs)
[17:03:03.459]                 common <- intersect(names, old_names)
[17:03:03.459]                 added <- setdiff(names, old_names)
[17:03:03.459]                 removed <- setdiff(old_names, names)
[17:03:03.459]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.459]                   envs[common]]
[17:03:03.459]                 NAMES <- toupper(changed)
[17:03:03.459]                 args <- list()
[17:03:03.459]                 for (kk in seq_along(NAMES)) {
[17:03:03.459]                   name <- changed[[kk]]
[17:03:03.459]                   NAME <- NAMES[[kk]]
[17:03:03.459]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.459]                     next
[17:03:03.459]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.459]                 }
[17:03:03.459]                 NAMES <- toupper(added)
[17:03:03.459]                 for (kk in seq_along(NAMES)) {
[17:03:03.459]                   name <- added[[kk]]
[17:03:03.459]                   NAME <- NAMES[[kk]]
[17:03:03.459]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.459]                     next
[17:03:03.459]                   args[[name]] <- ""
[17:03:03.459]                 }
[17:03:03.459]                 NAMES <- toupper(removed)
[17:03:03.459]                 for (kk in seq_along(NAMES)) {
[17:03:03.459]                   name <- removed[[kk]]
[17:03:03.459]                   NAME <- NAMES[[kk]]
[17:03:03.459]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.459]                     next
[17:03:03.459]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.459]                 }
[17:03:03.459]                 if (length(args) > 0) 
[17:03:03.459]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.459]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.459]             }
[17:03:03.459]             else {
[17:03:03.459]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.459]             }
[17:03:03.459]             {
[17:03:03.459]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.459]                   0L) {
[17:03:03.459]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.459]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.459]                   base::options(opts)
[17:03:03.459]                 }
[17:03:03.459]                 {
[17:03:03.459]                   {
[17:03:03.459]                     NULL
[17:03:03.459]                     RNGkind("Mersenne-Twister")
[17:03:03.459]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:03.459]                       inherits = FALSE)
[17:03:03.459]                   }
[17:03:03.459]                   options(future.plan = NULL)
[17:03:03.459]                   if (is.na(NA_character_)) 
[17:03:03.459]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.459]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.459]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.459]                     .init = FALSE)
[17:03:03.459]                 }
[17:03:03.459]             }
[17:03:03.459]         }
[17:03:03.459]     })
[17:03:03.459]     if (TRUE) {
[17:03:03.459]         base::sink(type = "output", split = FALSE)
[17:03:03.459]         if (TRUE) {
[17:03:03.459]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.459]         }
[17:03:03.459]         else {
[17:03:03.459]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.459]         }
[17:03:03.459]         base::close(...future.stdout)
[17:03:03.459]         ...future.stdout <- NULL
[17:03:03.459]     }
[17:03:03.459]     ...future.result$conditions <- ...future.conditions
[17:03:03.459]     ...future.result$finished <- base::Sys.time()
[17:03:03.459]     ...future.result
[17:03:03.459] }
[17:03:03.461] plan(): Setting new future strategy stack:
[17:03:03.461] List of future strategies:
[17:03:03.461] 1. sequential:
[17:03:03.461]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.461]    - tweaked: FALSE
[17:03:03.461]    - call: NULL
[17:03:03.461] plan(): nbrOfWorkers() = 1
[17:03:03.462] plan(): Setting new future strategy stack:
[17:03:03.462] List of future strategies:
[17:03:03.462] 1. multicore:
[17:03:03.462]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.462]    - tweaked: FALSE
[17:03:03.462]    - call: plan(multicore)
[17:03:03.465] plan(): nbrOfWorkers() = 1
[17:03:03.466] SequentialFuture started (and completed)
[17:03:03.466] signalConditions() ...
[17:03:03.466]  - include = ‘immediateCondition’
[17:03:03.466]  - exclude = 
[17:03:03.466]  - resignal = FALSE
[17:03:03.466]  - Number of conditions: 1
[17:03:03.466] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: 07dd274d-66ac-c50c-eb90-f530485edd79
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:03.467] signalConditions() ...
[17:03:03.467]  - include = ‘immediateCondition’
[17:03:03.467]  - exclude = 
[17:03:03.467]  - resignal = FALSE
[17:03:03.467]  - Number of conditions: 1
[17:03:03.467] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:03:03.468] signalConditions() ...
[17:03:03.468]  - include = ‘immediateCondition’
[17:03:03.468]  - exclude = 
[17:03:03.468]  - resignal = FALSE
[17:03:03.468]  - Number of conditions: 1
[17:03:03.468] signalConditions() ... done
[17:03:03.468] Future state: ‘finished’
[17:03:03.468] signalConditions() ...
[17:03:03.468]  - include = ‘condition’
[17:03:03.468]  - exclude = ‘immediateCondition’
[17:03:03.468]  - resignal = TRUE
[17:03:03.469]  - Number of conditions: 1
[17:03:03.469]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:03:03.469] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:03:03.469] signalConditions() ...
[17:03:03.469]  - include = ‘immediateCondition’
[17:03:03.469]  - exclude = 
[17:03:03.469]  - resignal = FALSE
[17:03:03.469]  - Number of conditions: 1
[17:03:03.470] signalConditions() ... done
[17:03:03.470] Future state: ‘finished’
[17:03:03.470] signalConditions() ...
[17:03:03.470]  - include = ‘condition’
[17:03:03.470]  - exclude = ‘immediateCondition’
[17:03:03.470]  - resignal = TRUE
[17:03:03.470]  - Number of conditions: 1
[17:03:03.470]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:03:03.470] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:03:03.474] getGlobalsAndPackages() ...
[17:03:03.474] Searching for globals...
[17:03:03.480] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[17:03:03.480] Searching for globals ... DONE
[17:03:03.480] Resolving globals: FALSE
[17:03:03.481] 
[17:03:03.481] 
[17:03:03.481] getGlobalsAndPackages() ... DONE
[17:03:03.481] Packages needed by the future expression (n = 0): <none>
[17:03:03.482] Packages needed by future strategies (n = 0): <none>
[17:03:03.482] {
[17:03:03.482]     {
[17:03:03.482]         {
[17:03:03.482]             ...future.startTime <- base::Sys.time()
[17:03:03.482]             {
[17:03:03.482]                 {
[17:03:03.482]                   {
[17:03:03.482]                     base::local({
[17:03:03.482]                       has_future <- base::requireNamespace("future", 
[17:03:03.482]                         quietly = TRUE)
[17:03:03.482]                       if (has_future) {
[17:03:03.482]                         ns <- base::getNamespace("future")
[17:03:03.482]                         version <- ns[[".package"]][["version"]]
[17:03:03.482]                         if (is.null(version)) 
[17:03:03.482]                           version <- utils::packageVersion("future")
[17:03:03.482]                       }
[17:03:03.482]                       else {
[17:03:03.482]                         version <- NULL
[17:03:03.482]                       }
[17:03:03.482]                       if (!has_future || version < "1.8.0") {
[17:03:03.482]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.482]                           "", base::R.version$version.string), 
[17:03:03.482]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:03.482]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.482]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.482]                             "release", "version")], collapse = " "), 
[17:03:03.482]                           hostname = base::Sys.info()[["nodename"]])
[17:03:03.482]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.482]                           info)
[17:03:03.482]                         info <- base::paste(info, collapse = "; ")
[17:03:03.482]                         if (!has_future) {
[17:03:03.482]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.482]                             info)
[17:03:03.482]                         }
[17:03:03.482]                         else {
[17:03:03.482]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.482]                             info, version)
[17:03:03.482]                         }
[17:03:03.482]                         base::stop(msg)
[17:03:03.482]                       }
[17:03:03.482]                     })
[17:03:03.482]                   }
[17:03:03.482]                   ...future.strategy.old <- future::plan("list")
[17:03:03.482]                   options(future.plan = NULL)
[17:03:03.482]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.482]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.482]                 }
[17:03:03.482]                 ...future.workdir <- getwd()
[17:03:03.482]             }
[17:03:03.482]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.482]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.482]         }
[17:03:03.482]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.482]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.482]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.482]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.482]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.482]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.482]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.482]             base::names(...future.oldOptions))
[17:03:03.482]     }
[17:03:03.482]     if (FALSE) {
[17:03:03.482]     }
[17:03:03.482]     else {
[17:03:03.482]         if (TRUE) {
[17:03:03.482]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.482]                 open = "w")
[17:03:03.482]         }
[17:03:03.482]         else {
[17:03:03.482]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.482]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.482]         }
[17:03:03.482]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.482]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.482]             base::sink(type = "output", split = FALSE)
[17:03:03.482]             base::close(...future.stdout)
[17:03:03.482]         }, add = TRUE)
[17:03:03.482]     }
[17:03:03.482]     ...future.frame <- base::sys.nframe()
[17:03:03.482]     ...future.conditions <- base::list()
[17:03:03.482]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.482]     if (FALSE) {
[17:03:03.482]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.482]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.482]     }
[17:03:03.482]     ...future.result <- base::tryCatch({
[17:03:03.482]         base::withCallingHandlers({
[17:03:03.482]             ...future.value <- base::withVisible(base::local({
[17:03:03.482]                 stop(structure(list(message = "boom"), class = c("MyError", 
[17:03:03.482]                   "error", "condition")))
[17:03:03.482]             }))
[17:03:03.482]             future::FutureResult(value = ...future.value$value, 
[17:03:03.482]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.482]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.482]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.482]                     ...future.globalenv.names))
[17:03:03.482]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.482]         }, condition = base::local({
[17:03:03.482]             c <- base::c
[17:03:03.482]             inherits <- base::inherits
[17:03:03.482]             invokeRestart <- base::invokeRestart
[17:03:03.482]             length <- base::length
[17:03:03.482]             list <- base::list
[17:03:03.482]             seq.int <- base::seq.int
[17:03:03.482]             signalCondition <- base::signalCondition
[17:03:03.482]             sys.calls <- base::sys.calls
[17:03:03.482]             `[[` <- base::`[[`
[17:03:03.482]             `+` <- base::`+`
[17:03:03.482]             `<<-` <- base::`<<-`
[17:03:03.482]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.482]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.482]                   3L)]
[17:03:03.482]             }
[17:03:03.482]             function(cond) {
[17:03:03.482]                 is_error <- inherits(cond, "error")
[17:03:03.482]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.482]                   NULL)
[17:03:03.482]                 if (is_error) {
[17:03:03.482]                   sessionInformation <- function() {
[17:03:03.482]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.482]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.482]                       search = base::search(), system = base::Sys.info())
[17:03:03.482]                   }
[17:03:03.482]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.482]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.482]                     cond$call), session = sessionInformation(), 
[17:03:03.482]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.482]                   signalCondition(cond)
[17:03:03.482]                 }
[17:03:03.482]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.482]                 "immediateCondition"))) {
[17:03:03.482]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.482]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.482]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.482]                   if (TRUE && !signal) {
[17:03:03.482]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.482]                     {
[17:03:03.482]                       inherits <- base::inherits
[17:03:03.482]                       invokeRestart <- base::invokeRestart
[17:03:03.482]                       is.null <- base::is.null
[17:03:03.482]                       muffled <- FALSE
[17:03:03.482]                       if (inherits(cond, "message")) {
[17:03:03.482]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.482]                         if (muffled) 
[17:03:03.482]                           invokeRestart("muffleMessage")
[17:03:03.482]                       }
[17:03:03.482]                       else if (inherits(cond, "warning")) {
[17:03:03.482]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.482]                         if (muffled) 
[17:03:03.482]                           invokeRestart("muffleWarning")
[17:03:03.482]                       }
[17:03:03.482]                       else if (inherits(cond, "condition")) {
[17:03:03.482]                         if (!is.null(pattern)) {
[17:03:03.482]                           computeRestarts <- base::computeRestarts
[17:03:03.482]                           grepl <- base::grepl
[17:03:03.482]                           restarts <- computeRestarts(cond)
[17:03:03.482]                           for (restart in restarts) {
[17:03:03.482]                             name <- restart$name
[17:03:03.482]                             if (is.null(name)) 
[17:03:03.482]                               next
[17:03:03.482]                             if (!grepl(pattern, name)) 
[17:03:03.482]                               next
[17:03:03.482]                             invokeRestart(restart)
[17:03:03.482]                             muffled <- TRUE
[17:03:03.482]                             break
[17:03:03.482]                           }
[17:03:03.482]                         }
[17:03:03.482]                       }
[17:03:03.482]                       invisible(muffled)
[17:03:03.482]                     }
[17:03:03.482]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.482]                   }
[17:03:03.482]                 }
[17:03:03.482]                 else {
[17:03:03.482]                   if (TRUE) {
[17:03:03.482]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.482]                     {
[17:03:03.482]                       inherits <- base::inherits
[17:03:03.482]                       invokeRestart <- base::invokeRestart
[17:03:03.482]                       is.null <- base::is.null
[17:03:03.482]                       muffled <- FALSE
[17:03:03.482]                       if (inherits(cond, "message")) {
[17:03:03.482]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.482]                         if (muffled) 
[17:03:03.482]                           invokeRestart("muffleMessage")
[17:03:03.482]                       }
[17:03:03.482]                       else if (inherits(cond, "warning")) {
[17:03:03.482]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.482]                         if (muffled) 
[17:03:03.482]                           invokeRestart("muffleWarning")
[17:03:03.482]                       }
[17:03:03.482]                       else if (inherits(cond, "condition")) {
[17:03:03.482]                         if (!is.null(pattern)) {
[17:03:03.482]                           computeRestarts <- base::computeRestarts
[17:03:03.482]                           grepl <- base::grepl
[17:03:03.482]                           restarts <- computeRestarts(cond)
[17:03:03.482]                           for (restart in restarts) {
[17:03:03.482]                             name <- restart$name
[17:03:03.482]                             if (is.null(name)) 
[17:03:03.482]                               next
[17:03:03.482]                             if (!grepl(pattern, name)) 
[17:03:03.482]                               next
[17:03:03.482]                             invokeRestart(restart)
[17:03:03.482]                             muffled <- TRUE
[17:03:03.482]                             break
[17:03:03.482]                           }
[17:03:03.482]                         }
[17:03:03.482]                       }
[17:03:03.482]                       invisible(muffled)
[17:03:03.482]                     }
[17:03:03.482]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.482]                   }
[17:03:03.482]                 }
[17:03:03.482]             }
[17:03:03.482]         }))
[17:03:03.482]     }, error = function(ex) {
[17:03:03.482]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.482]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.482]                 ...future.rng), started = ...future.startTime, 
[17:03:03.482]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.482]             version = "1.8"), class = "FutureResult")
[17:03:03.482]     }, finally = {
[17:03:03.482]         if (!identical(...future.workdir, getwd())) 
[17:03:03.482]             setwd(...future.workdir)
[17:03:03.482]         {
[17:03:03.482]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.482]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.482]             }
[17:03:03.482]             base::options(...future.oldOptions)
[17:03:03.482]             if (.Platform$OS.type == "windows") {
[17:03:03.482]                 old_names <- names(...future.oldEnvVars)
[17:03:03.482]                 envs <- base::Sys.getenv()
[17:03:03.482]                 names <- names(envs)
[17:03:03.482]                 common <- intersect(names, old_names)
[17:03:03.482]                 added <- setdiff(names, old_names)
[17:03:03.482]                 removed <- setdiff(old_names, names)
[17:03:03.482]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.482]                   envs[common]]
[17:03:03.482]                 NAMES <- toupper(changed)
[17:03:03.482]                 args <- list()
[17:03:03.482]                 for (kk in seq_along(NAMES)) {
[17:03:03.482]                   name <- changed[[kk]]
[17:03:03.482]                   NAME <- NAMES[[kk]]
[17:03:03.482]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.482]                     next
[17:03:03.482]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.482]                 }
[17:03:03.482]                 NAMES <- toupper(added)
[17:03:03.482]                 for (kk in seq_along(NAMES)) {
[17:03:03.482]                   name <- added[[kk]]
[17:03:03.482]                   NAME <- NAMES[[kk]]
[17:03:03.482]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.482]                     next
[17:03:03.482]                   args[[name]] <- ""
[17:03:03.482]                 }
[17:03:03.482]                 NAMES <- toupper(removed)
[17:03:03.482]                 for (kk in seq_along(NAMES)) {
[17:03:03.482]                   name <- removed[[kk]]
[17:03:03.482]                   NAME <- NAMES[[kk]]
[17:03:03.482]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.482]                     next
[17:03:03.482]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.482]                 }
[17:03:03.482]                 if (length(args) > 0) 
[17:03:03.482]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.482]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.482]             }
[17:03:03.482]             else {
[17:03:03.482]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.482]             }
[17:03:03.482]             {
[17:03:03.482]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.482]                   0L) {
[17:03:03.482]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.482]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.482]                   base::options(opts)
[17:03:03.482]                 }
[17:03:03.482]                 {
[17:03:03.482]                   {
[17:03:03.482]                     NULL
[17:03:03.482]                     RNGkind("Mersenne-Twister")
[17:03:03.482]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:03.482]                       inherits = FALSE)
[17:03:03.482]                   }
[17:03:03.482]                   options(future.plan = NULL)
[17:03:03.482]                   if (is.na(NA_character_)) 
[17:03:03.482]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.482]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.482]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.482]                     .init = FALSE)
[17:03:03.482]                 }
[17:03:03.482]             }
[17:03:03.482]         }
[17:03:03.482]     })
[17:03:03.482]     if (TRUE) {
[17:03:03.482]         base::sink(type = "output", split = FALSE)
[17:03:03.482]         if (TRUE) {
[17:03:03.482]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.482]         }
[17:03:03.482]         else {
[17:03:03.482]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.482]         }
[17:03:03.482]         base::close(...future.stdout)
[17:03:03.482]         ...future.stdout <- NULL
[17:03:03.482]     }
[17:03:03.482]     ...future.result$conditions <- ...future.conditions
[17:03:03.482]     ...future.result$finished <- base::Sys.time()
[17:03:03.482]     ...future.result
[17:03:03.482] }
[17:03:03.484] plan(): Setting new future strategy stack:
[17:03:03.484] List of future strategies:
[17:03:03.484] 1. sequential:
[17:03:03.484]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.484]    - tweaked: FALSE
[17:03:03.484]    - call: NULL
[17:03:03.484] plan(): nbrOfWorkers() = 1
[17:03:03.485] plan(): Setting new future strategy stack:
[17:03:03.487] List of future strategies:
[17:03:03.487] 1. multicore:
[17:03:03.487]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.487]    - tweaked: FALSE
[17:03:03.487]    - call: plan(multicore)
[17:03:03.491] plan(): nbrOfWorkers() = 1
[17:03:03.491] SequentialFuture started (and completed)
[17:03:03.491] signalConditions() ...
[17:03:03.491]  - include = ‘immediateCondition’
[17:03:03.491]  - exclude = 
[17:03:03.491]  - resignal = FALSE
[17:03:03.492]  - Number of conditions: 1
[17:03:03.492] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘MyError’
Early signaling: FALSE
Owner process: 07dd274d-66ac-c50c-eb90-f530485edd79
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:03.492] signalConditions() ...
[17:03:03.492]  - include = ‘immediateCondition’
[17:03:03.492]  - exclude = 
[17:03:03.492]  - resignal = FALSE
[17:03:03.493]  - Number of conditions: 1
[17:03:03.493] signalConditions() ... done
<MyError: boom>
[17:03:03.493] signalConditions() ...
[17:03:03.493]  - include = ‘immediateCondition’
[17:03:03.493]  - exclude = 
[17:03:03.493]  - resignal = FALSE
[17:03:03.493]  - Number of conditions: 1
[17:03:03.493] signalConditions() ... done
[17:03:03.493] Future state: ‘finished’
[17:03:03.494] signalConditions() ...
[17:03:03.494]  - include = ‘condition’
[17:03:03.494]  - exclude = ‘immediateCondition’
[17:03:03.494]  - resignal = TRUE
[17:03:03.494]  - Number of conditions: 1
[17:03:03.494]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[17:03:03.494] signalConditions() ... done
*** multicore(..., globals = TRUE) without globals
[17:03:03.498] getGlobalsAndPackages() ...
[17:03:03.498] Searching for globals...
[17:03:03.498] - globals found: [1] ‘{’
[17:03:03.498] Searching for globals ... DONE
[17:03:03.498] Resolving globals: FALSE
[17:03:03.499] 
[17:03:03.499] 
[17:03:03.499] getGlobalsAndPackages() ... DONE
[17:03:03.499] Packages needed by the future expression (n = 0): <none>
[17:03:03.499] Packages needed by future strategies (n = 0): <none>
[17:03:03.500] {
[17:03:03.500]     {
[17:03:03.500]         {
[17:03:03.500]             ...future.startTime <- base::Sys.time()
[17:03:03.500]             {
[17:03:03.500]                 {
[17:03:03.500]                   {
[17:03:03.500]                     base::local({
[17:03:03.500]                       has_future <- base::requireNamespace("future", 
[17:03:03.500]                         quietly = TRUE)
[17:03:03.500]                       if (has_future) {
[17:03:03.500]                         ns <- base::getNamespace("future")
[17:03:03.500]                         version <- ns[[".package"]][["version"]]
[17:03:03.500]                         if (is.null(version)) 
[17:03:03.500]                           version <- utils::packageVersion("future")
[17:03:03.500]                       }
[17:03:03.500]                       else {
[17:03:03.500]                         version <- NULL
[17:03:03.500]                       }
[17:03:03.500]                       if (!has_future || version < "1.8.0") {
[17:03:03.500]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.500]                           "", base::R.version$version.string), 
[17:03:03.500]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:03.500]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.500]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.500]                             "release", "version")], collapse = " "), 
[17:03:03.500]                           hostname = base::Sys.info()[["nodename"]])
[17:03:03.500]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.500]                           info)
[17:03:03.500]                         info <- base::paste(info, collapse = "; ")
[17:03:03.500]                         if (!has_future) {
[17:03:03.500]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.500]                             info)
[17:03:03.500]                         }
[17:03:03.500]                         else {
[17:03:03.500]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.500]                             info, version)
[17:03:03.500]                         }
[17:03:03.500]                         base::stop(msg)
[17:03:03.500]                       }
[17:03:03.500]                     })
[17:03:03.500]                   }
[17:03:03.500]                   ...future.strategy.old <- future::plan("list")
[17:03:03.500]                   options(future.plan = NULL)
[17:03:03.500]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.500]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.500]                 }
[17:03:03.500]                 ...future.workdir <- getwd()
[17:03:03.500]             }
[17:03:03.500]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.500]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.500]         }
[17:03:03.500]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.500]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.500]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.500]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.500]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.500]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.500]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.500]             base::names(...future.oldOptions))
[17:03:03.500]     }
[17:03:03.500]     if (FALSE) {
[17:03:03.500]     }
[17:03:03.500]     else {
[17:03:03.500]         if (TRUE) {
[17:03:03.500]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.500]                 open = "w")
[17:03:03.500]         }
[17:03:03.500]         else {
[17:03:03.500]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.500]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.500]         }
[17:03:03.500]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.500]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.500]             base::sink(type = "output", split = FALSE)
[17:03:03.500]             base::close(...future.stdout)
[17:03:03.500]         }, add = TRUE)
[17:03:03.500]     }
[17:03:03.500]     ...future.frame <- base::sys.nframe()
[17:03:03.500]     ...future.conditions <- base::list()
[17:03:03.500]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.500]     if (FALSE) {
[17:03:03.500]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.500]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.500]     }
[17:03:03.500]     ...future.result <- base::tryCatch({
[17:03:03.500]         base::withCallingHandlers({
[17:03:03.500]             ...future.value <- base::withVisible(base::local({
[17:03:03.500]                 42L
[17:03:03.500]             }))
[17:03:03.500]             future::FutureResult(value = ...future.value$value, 
[17:03:03.500]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.500]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.500]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.500]                     ...future.globalenv.names))
[17:03:03.500]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.500]         }, condition = base::local({
[17:03:03.500]             c <- base::c
[17:03:03.500]             inherits <- base::inherits
[17:03:03.500]             invokeRestart <- base::invokeRestart
[17:03:03.500]             length <- base::length
[17:03:03.500]             list <- base::list
[17:03:03.500]             seq.int <- base::seq.int
[17:03:03.500]             signalCondition <- base::signalCondition
[17:03:03.500]             sys.calls <- base::sys.calls
[17:03:03.500]             `[[` <- base::`[[`
[17:03:03.500]             `+` <- base::`+`
[17:03:03.500]             `<<-` <- base::`<<-`
[17:03:03.500]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.500]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.500]                   3L)]
[17:03:03.500]             }
[17:03:03.500]             function(cond) {
[17:03:03.500]                 is_error <- inherits(cond, "error")
[17:03:03.500]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.500]                   NULL)
[17:03:03.500]                 if (is_error) {
[17:03:03.500]                   sessionInformation <- function() {
[17:03:03.500]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.500]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.500]                       search = base::search(), system = base::Sys.info())
[17:03:03.500]                   }
[17:03:03.500]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.500]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.500]                     cond$call), session = sessionInformation(), 
[17:03:03.500]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.500]                   signalCondition(cond)
[17:03:03.500]                 }
[17:03:03.500]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.500]                 "immediateCondition"))) {
[17:03:03.500]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.500]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.500]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.500]                   if (TRUE && !signal) {
[17:03:03.500]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.500]                     {
[17:03:03.500]                       inherits <- base::inherits
[17:03:03.500]                       invokeRestart <- base::invokeRestart
[17:03:03.500]                       is.null <- base::is.null
[17:03:03.500]                       muffled <- FALSE
[17:03:03.500]                       if (inherits(cond, "message")) {
[17:03:03.500]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.500]                         if (muffled) 
[17:03:03.500]                           invokeRestart("muffleMessage")
[17:03:03.500]                       }
[17:03:03.500]                       else if (inherits(cond, "warning")) {
[17:03:03.500]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.500]                         if (muffled) 
[17:03:03.500]                           invokeRestart("muffleWarning")
[17:03:03.500]                       }
[17:03:03.500]                       else if (inherits(cond, "condition")) {
[17:03:03.500]                         if (!is.null(pattern)) {
[17:03:03.500]                           computeRestarts <- base::computeRestarts
[17:03:03.500]                           grepl <- base::grepl
[17:03:03.500]                           restarts <- computeRestarts(cond)
[17:03:03.500]                           for (restart in restarts) {
[17:03:03.500]                             name <- restart$name
[17:03:03.500]                             if (is.null(name)) 
[17:03:03.500]                               next
[17:03:03.500]                             if (!grepl(pattern, name)) 
[17:03:03.500]                               next
[17:03:03.500]                             invokeRestart(restart)
[17:03:03.500]                             muffled <- TRUE
[17:03:03.500]                             break
[17:03:03.500]                           }
[17:03:03.500]                         }
[17:03:03.500]                       }
[17:03:03.500]                       invisible(muffled)
[17:03:03.500]                     }
[17:03:03.500]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.500]                   }
[17:03:03.500]                 }
[17:03:03.500]                 else {
[17:03:03.500]                   if (TRUE) {
[17:03:03.500]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.500]                     {
[17:03:03.500]                       inherits <- base::inherits
[17:03:03.500]                       invokeRestart <- base::invokeRestart
[17:03:03.500]                       is.null <- base::is.null
[17:03:03.500]                       muffled <- FALSE
[17:03:03.500]                       if (inherits(cond, "message")) {
[17:03:03.500]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.500]                         if (muffled) 
[17:03:03.500]                           invokeRestart("muffleMessage")
[17:03:03.500]                       }
[17:03:03.500]                       else if (inherits(cond, "warning")) {
[17:03:03.500]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.500]                         if (muffled) 
[17:03:03.500]                           invokeRestart("muffleWarning")
[17:03:03.500]                       }
[17:03:03.500]                       else if (inherits(cond, "condition")) {
[17:03:03.500]                         if (!is.null(pattern)) {
[17:03:03.500]                           computeRestarts <- base::computeRestarts
[17:03:03.500]                           grepl <- base::grepl
[17:03:03.500]                           restarts <- computeRestarts(cond)
[17:03:03.500]                           for (restart in restarts) {
[17:03:03.500]                             name <- restart$name
[17:03:03.500]                             if (is.null(name)) 
[17:03:03.500]                               next
[17:03:03.500]                             if (!grepl(pattern, name)) 
[17:03:03.500]                               next
[17:03:03.500]                             invokeRestart(restart)
[17:03:03.500]                             muffled <- TRUE
[17:03:03.500]                             break
[17:03:03.500]                           }
[17:03:03.500]                         }
[17:03:03.500]                       }
[17:03:03.500]                       invisible(muffled)
[17:03:03.500]                     }
[17:03:03.500]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.500]                   }
[17:03:03.500]                 }
[17:03:03.500]             }
[17:03:03.500]         }))
[17:03:03.500]     }, error = function(ex) {
[17:03:03.500]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.500]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.500]                 ...future.rng), started = ...future.startTime, 
[17:03:03.500]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.500]             version = "1.8"), class = "FutureResult")
[17:03:03.500]     }, finally = {
[17:03:03.500]         if (!identical(...future.workdir, getwd())) 
[17:03:03.500]             setwd(...future.workdir)
[17:03:03.500]         {
[17:03:03.500]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.500]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.500]             }
[17:03:03.500]             base::options(...future.oldOptions)
[17:03:03.500]             if (.Platform$OS.type == "windows") {
[17:03:03.500]                 old_names <- names(...future.oldEnvVars)
[17:03:03.500]                 envs <- base::Sys.getenv()
[17:03:03.500]                 names <- names(envs)
[17:03:03.500]                 common <- intersect(names, old_names)
[17:03:03.500]                 added <- setdiff(names, old_names)
[17:03:03.500]                 removed <- setdiff(old_names, names)
[17:03:03.500]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.500]                   envs[common]]
[17:03:03.500]                 NAMES <- toupper(changed)
[17:03:03.500]                 args <- list()
[17:03:03.500]                 for (kk in seq_along(NAMES)) {
[17:03:03.500]                   name <- changed[[kk]]
[17:03:03.500]                   NAME <- NAMES[[kk]]
[17:03:03.500]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.500]                     next
[17:03:03.500]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.500]                 }
[17:03:03.500]                 NAMES <- toupper(added)
[17:03:03.500]                 for (kk in seq_along(NAMES)) {
[17:03:03.500]                   name <- added[[kk]]
[17:03:03.500]                   NAME <- NAMES[[kk]]
[17:03:03.500]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.500]                     next
[17:03:03.500]                   args[[name]] <- ""
[17:03:03.500]                 }
[17:03:03.500]                 NAMES <- toupper(removed)
[17:03:03.500]                 for (kk in seq_along(NAMES)) {
[17:03:03.500]                   name <- removed[[kk]]
[17:03:03.500]                   NAME <- NAMES[[kk]]
[17:03:03.500]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.500]                     next
[17:03:03.500]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.500]                 }
[17:03:03.500]                 if (length(args) > 0) 
[17:03:03.500]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.500]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.500]             }
[17:03:03.500]             else {
[17:03:03.500]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.500]             }
[17:03:03.500]             {
[17:03:03.500]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.500]                   0L) {
[17:03:03.500]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.500]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.500]                   base::options(opts)
[17:03:03.500]                 }
[17:03:03.500]                 {
[17:03:03.500]                   {
[17:03:03.500]                     NULL
[17:03:03.500]                     RNGkind("Mersenne-Twister")
[17:03:03.500]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:03.500]                       inherits = FALSE)
[17:03:03.500]                   }
[17:03:03.500]                   options(future.plan = NULL)
[17:03:03.500]                   if (is.na(NA_character_)) 
[17:03:03.500]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.500]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.500]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.500]                     .init = FALSE)
[17:03:03.500]                 }
[17:03:03.500]             }
[17:03:03.500]         }
[17:03:03.500]     })
[17:03:03.500]     if (TRUE) {
[17:03:03.500]         base::sink(type = "output", split = FALSE)
[17:03:03.500]         if (TRUE) {
[17:03:03.500]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.500]         }
[17:03:03.500]         else {
[17:03:03.500]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.500]         }
[17:03:03.500]         base::close(...future.stdout)
[17:03:03.500]         ...future.stdout <- NULL
[17:03:03.500]     }
[17:03:03.500]     ...future.result$conditions <- ...future.conditions
[17:03:03.500]     ...future.result$finished <- base::Sys.time()
[17:03:03.500]     ...future.result
[17:03:03.500] }
[17:03:03.502] plan(): Setting new future strategy stack:
[17:03:03.502] List of future strategies:
[17:03:03.502] 1. sequential:
[17:03:03.502]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.502]    - tweaked: FALSE
[17:03:03.502]    - call: NULL
[17:03:03.502] plan(): nbrOfWorkers() = 1
[17:03:03.503] plan(): Setting new future strategy stack:
[17:03:03.503] List of future strategies:
[17:03:03.503] 1. multicore:
[17:03:03.503]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.503]    - tweaked: FALSE
[17:03:03.503]    - call: plan(multicore)
[17:03:03.506] plan(): nbrOfWorkers() = 1
[17:03:03.507] SequentialFuture started (and completed)
[17:03:03.507] resolved() for ‘SequentialFuture’ ...
[17:03:03.507] - state: ‘finished’
[17:03:03.507] - run: TRUE
[17:03:03.507] - result: ‘FutureResult’
[17:03:03.507] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
*** multicore(..., globals = TRUE) with globals
[17:03:03.510] getGlobalsAndPackages() ...
[17:03:03.510] Searching for globals...
[17:03:03.512] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[17:03:03.513] Searching for globals ... DONE
[17:03:03.513] Resolving globals: FALSE
[17:03:03.513] The total size of the 1 globals is 56 bytes (56 bytes)
[17:03:03.514] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:03:03.514] - globals: [1] ‘a’
[17:03:03.514] 
[17:03:03.514] getGlobalsAndPackages() ... DONE
[17:03:03.514] Packages needed by the future expression (n = 0): <none>
[17:03:03.514] Packages needed by future strategies (n = 0): <none>
[17:03:03.515] {
[17:03:03.515]     {
[17:03:03.515]         {
[17:03:03.515]             ...future.startTime <- base::Sys.time()
[17:03:03.515]             {
[17:03:03.515]                 {
[17:03:03.515]                   {
[17:03:03.515]                     base::local({
[17:03:03.515]                       has_future <- base::requireNamespace("future", 
[17:03:03.515]                         quietly = TRUE)
[17:03:03.515]                       if (has_future) {
[17:03:03.515]                         ns <- base::getNamespace("future")
[17:03:03.515]                         version <- ns[[".package"]][["version"]]
[17:03:03.515]                         if (is.null(version)) 
[17:03:03.515]                           version <- utils::packageVersion("future")
[17:03:03.515]                       }
[17:03:03.515]                       else {
[17:03:03.515]                         version <- NULL
[17:03:03.515]                       }
[17:03:03.515]                       if (!has_future || version < "1.8.0") {
[17:03:03.515]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.515]                           "", base::R.version$version.string), 
[17:03:03.515]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:03.515]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.515]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.515]                             "release", "version")], collapse = " "), 
[17:03:03.515]                           hostname = base::Sys.info()[["nodename"]])
[17:03:03.515]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.515]                           info)
[17:03:03.515]                         info <- base::paste(info, collapse = "; ")
[17:03:03.515]                         if (!has_future) {
[17:03:03.515]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.515]                             info)
[17:03:03.515]                         }
[17:03:03.515]                         else {
[17:03:03.515]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.515]                             info, version)
[17:03:03.515]                         }
[17:03:03.515]                         base::stop(msg)
[17:03:03.515]                       }
[17:03:03.515]                     })
[17:03:03.515]                   }
[17:03:03.515]                   ...future.strategy.old <- future::plan("list")
[17:03:03.515]                   options(future.plan = NULL)
[17:03:03.515]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.515]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.515]                 }
[17:03:03.515]                 ...future.workdir <- getwd()
[17:03:03.515]             }
[17:03:03.515]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.515]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.515]         }
[17:03:03.515]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.515]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.515]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.515]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.515]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.515]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.515]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.515]             base::names(...future.oldOptions))
[17:03:03.515]     }
[17:03:03.515]     if (FALSE) {
[17:03:03.515]     }
[17:03:03.515]     else {
[17:03:03.515]         if (TRUE) {
[17:03:03.515]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.515]                 open = "w")
[17:03:03.515]         }
[17:03:03.515]         else {
[17:03:03.515]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.515]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.515]         }
[17:03:03.515]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.515]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.515]             base::sink(type = "output", split = FALSE)
[17:03:03.515]             base::close(...future.stdout)
[17:03:03.515]         }, add = TRUE)
[17:03:03.515]     }
[17:03:03.515]     ...future.frame <- base::sys.nframe()
[17:03:03.515]     ...future.conditions <- base::list()
[17:03:03.515]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.515]     if (FALSE) {
[17:03:03.515]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.515]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.515]     }
[17:03:03.515]     ...future.result <- base::tryCatch({
[17:03:03.515]         base::withCallingHandlers({
[17:03:03.515]             ...future.value <- base::withVisible(base::local({
[17:03:03.515]                 b <- 3
[17:03:03.515]                 c <- 2
[17:03:03.515]                 a * b * c
[17:03:03.515]             }))
[17:03:03.515]             future::FutureResult(value = ...future.value$value, 
[17:03:03.515]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.515]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.515]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.515]                     ...future.globalenv.names))
[17:03:03.515]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.515]         }, condition = base::local({
[17:03:03.515]             c <- base::c
[17:03:03.515]             inherits <- base::inherits
[17:03:03.515]             invokeRestart <- base::invokeRestart
[17:03:03.515]             length <- base::length
[17:03:03.515]             list <- base::list
[17:03:03.515]             seq.int <- base::seq.int
[17:03:03.515]             signalCondition <- base::signalCondition
[17:03:03.515]             sys.calls <- base::sys.calls
[17:03:03.515]             `[[` <- base::`[[`
[17:03:03.515]             `+` <- base::`+`
[17:03:03.515]             `<<-` <- base::`<<-`
[17:03:03.515]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.515]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.515]                   3L)]
[17:03:03.515]             }
[17:03:03.515]             function(cond) {
[17:03:03.515]                 is_error <- inherits(cond, "error")
[17:03:03.515]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.515]                   NULL)
[17:03:03.515]                 if (is_error) {
[17:03:03.515]                   sessionInformation <- function() {
[17:03:03.515]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.515]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.515]                       search = base::search(), system = base::Sys.info())
[17:03:03.515]                   }
[17:03:03.515]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.515]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.515]                     cond$call), session = sessionInformation(), 
[17:03:03.515]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.515]                   signalCondition(cond)
[17:03:03.515]                 }
[17:03:03.515]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.515]                 "immediateCondition"))) {
[17:03:03.515]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.515]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.515]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.515]                   if (TRUE && !signal) {
[17:03:03.515]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.515]                     {
[17:03:03.515]                       inherits <- base::inherits
[17:03:03.515]                       invokeRestart <- base::invokeRestart
[17:03:03.515]                       is.null <- base::is.null
[17:03:03.515]                       muffled <- FALSE
[17:03:03.515]                       if (inherits(cond, "message")) {
[17:03:03.515]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.515]                         if (muffled) 
[17:03:03.515]                           invokeRestart("muffleMessage")
[17:03:03.515]                       }
[17:03:03.515]                       else if (inherits(cond, "warning")) {
[17:03:03.515]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.515]                         if (muffled) 
[17:03:03.515]                           invokeRestart("muffleWarning")
[17:03:03.515]                       }
[17:03:03.515]                       else if (inherits(cond, "condition")) {
[17:03:03.515]                         if (!is.null(pattern)) {
[17:03:03.515]                           computeRestarts <- base::computeRestarts
[17:03:03.515]                           grepl <- base::grepl
[17:03:03.515]                           restarts <- computeRestarts(cond)
[17:03:03.515]                           for (restart in restarts) {
[17:03:03.515]                             name <- restart$name
[17:03:03.515]                             if (is.null(name)) 
[17:03:03.515]                               next
[17:03:03.515]                             if (!grepl(pattern, name)) 
[17:03:03.515]                               next
[17:03:03.515]                             invokeRestart(restart)
[17:03:03.515]                             muffled <- TRUE
[17:03:03.515]                             break
[17:03:03.515]                           }
[17:03:03.515]                         }
[17:03:03.515]                       }
[17:03:03.515]                       invisible(muffled)
[17:03:03.515]                     }
[17:03:03.515]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.515]                   }
[17:03:03.515]                 }
[17:03:03.515]                 else {
[17:03:03.515]                   if (TRUE) {
[17:03:03.515]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.515]                     {
[17:03:03.515]                       inherits <- base::inherits
[17:03:03.515]                       invokeRestart <- base::invokeRestart
[17:03:03.515]                       is.null <- base::is.null
[17:03:03.515]                       muffled <- FALSE
[17:03:03.515]                       if (inherits(cond, "message")) {
[17:03:03.515]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.515]                         if (muffled) 
[17:03:03.515]                           invokeRestart("muffleMessage")
[17:03:03.515]                       }
[17:03:03.515]                       else if (inherits(cond, "warning")) {
[17:03:03.515]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.515]                         if (muffled) 
[17:03:03.515]                           invokeRestart("muffleWarning")
[17:03:03.515]                       }
[17:03:03.515]                       else if (inherits(cond, "condition")) {
[17:03:03.515]                         if (!is.null(pattern)) {
[17:03:03.515]                           computeRestarts <- base::computeRestarts
[17:03:03.515]                           grepl <- base::grepl
[17:03:03.515]                           restarts <- computeRestarts(cond)
[17:03:03.515]                           for (restart in restarts) {
[17:03:03.515]                             name <- restart$name
[17:03:03.515]                             if (is.null(name)) 
[17:03:03.515]                               next
[17:03:03.515]                             if (!grepl(pattern, name)) 
[17:03:03.515]                               next
[17:03:03.515]                             invokeRestart(restart)
[17:03:03.515]                             muffled <- TRUE
[17:03:03.515]                             break
[17:03:03.515]                           }
[17:03:03.515]                         }
[17:03:03.515]                       }
[17:03:03.515]                       invisible(muffled)
[17:03:03.515]                     }
[17:03:03.515]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.515]                   }
[17:03:03.515]                 }
[17:03:03.515]             }
[17:03:03.515]         }))
[17:03:03.515]     }, error = function(ex) {
[17:03:03.515]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.515]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.515]                 ...future.rng), started = ...future.startTime, 
[17:03:03.515]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.515]             version = "1.8"), class = "FutureResult")
[17:03:03.515]     }, finally = {
[17:03:03.515]         if (!identical(...future.workdir, getwd())) 
[17:03:03.515]             setwd(...future.workdir)
[17:03:03.515]         {
[17:03:03.515]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.515]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.515]             }
[17:03:03.515]             base::options(...future.oldOptions)
[17:03:03.515]             if (.Platform$OS.type == "windows") {
[17:03:03.515]                 old_names <- names(...future.oldEnvVars)
[17:03:03.515]                 envs <- base::Sys.getenv()
[17:03:03.515]                 names <- names(envs)
[17:03:03.515]                 common <- intersect(names, old_names)
[17:03:03.515]                 added <- setdiff(names, old_names)
[17:03:03.515]                 removed <- setdiff(old_names, names)
[17:03:03.515]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.515]                   envs[common]]
[17:03:03.515]                 NAMES <- toupper(changed)
[17:03:03.515]                 args <- list()
[17:03:03.515]                 for (kk in seq_along(NAMES)) {
[17:03:03.515]                   name <- changed[[kk]]
[17:03:03.515]                   NAME <- NAMES[[kk]]
[17:03:03.515]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.515]                     next
[17:03:03.515]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.515]                 }
[17:03:03.515]                 NAMES <- toupper(added)
[17:03:03.515]                 for (kk in seq_along(NAMES)) {
[17:03:03.515]                   name <- added[[kk]]
[17:03:03.515]                   NAME <- NAMES[[kk]]
[17:03:03.515]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.515]                     next
[17:03:03.515]                   args[[name]] <- ""
[17:03:03.515]                 }
[17:03:03.515]                 NAMES <- toupper(removed)
[17:03:03.515]                 for (kk in seq_along(NAMES)) {
[17:03:03.515]                   name <- removed[[kk]]
[17:03:03.515]                   NAME <- NAMES[[kk]]
[17:03:03.515]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.515]                     next
[17:03:03.515]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.515]                 }
[17:03:03.515]                 if (length(args) > 0) 
[17:03:03.515]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.515]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.515]             }
[17:03:03.515]             else {
[17:03:03.515]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.515]             }
[17:03:03.515]             {
[17:03:03.515]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.515]                   0L) {
[17:03:03.515]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.515]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.515]                   base::options(opts)
[17:03:03.515]                 }
[17:03:03.515]                 {
[17:03:03.515]                   {
[17:03:03.515]                     NULL
[17:03:03.515]                     RNGkind("Mersenne-Twister")
[17:03:03.515]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:03.515]                       inherits = FALSE)
[17:03:03.515]                   }
[17:03:03.515]                   options(future.plan = NULL)
[17:03:03.515]                   if (is.na(NA_character_)) 
[17:03:03.515]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.515]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.515]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.515]                     .init = FALSE)
[17:03:03.515]                 }
[17:03:03.515]             }
[17:03:03.515]         }
[17:03:03.515]     })
[17:03:03.515]     if (TRUE) {
[17:03:03.515]         base::sink(type = "output", split = FALSE)
[17:03:03.515]         if (TRUE) {
[17:03:03.515]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.515]         }
[17:03:03.515]         else {
[17:03:03.515]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.515]         }
[17:03:03.515]         base::close(...future.stdout)
[17:03:03.515]         ...future.stdout <- NULL
[17:03:03.515]     }
[17:03:03.515]     ...future.result$conditions <- ...future.conditions
[17:03:03.515]     ...future.result$finished <- base::Sys.time()
[17:03:03.515]     ...future.result
[17:03:03.515] }
[17:03:03.516] assign_globals() ...
[17:03:03.517] List of 1
[17:03:03.517]  $ a: num 0
[17:03:03.517]  - attr(*, "where")=List of 1
[17:03:03.517]   ..$ a:<environment: R_EmptyEnv> 
[17:03:03.517]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:03.517]  - attr(*, "resolved")= logi FALSE
[17:03:03.517]  - attr(*, "total_size")= num 56
[17:03:03.521] - copied ‘a’ to environment
[17:03:03.521] assign_globals() ... done
[17:03:03.521] plan(): Setting new future strategy stack:
[17:03:03.521] List of future strategies:
[17:03:03.521] 1. sequential:
[17:03:03.521]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.521]    - tweaked: FALSE
[17:03:03.521]    - call: NULL
[17:03:03.522] plan(): nbrOfWorkers() = 1
[17:03:03.522] plan(): Setting new future strategy stack:
[17:03:03.523] List of future strategies:
[17:03:03.523] 1. multicore:
[17:03:03.523]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.523]    - tweaked: FALSE
[17:03:03.523]    - call: plan(multicore)
[17:03:03.526] plan(): nbrOfWorkers() = 1
[17:03:03.526] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 07dd274d-66ac-c50c-eb90-f530485edd79
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[1] 0
*** multicore(..., globals = TRUE) with globals and blocking
 - Creating multicore future #1 ...
[17:03:03.530] getGlobalsAndPackages() ...
[17:03:03.530] Searching for globals...
[17:03:03.531] - globals found: [2] ‘{’, ‘ii’
[17:03:03.531] Searching for globals ... DONE
[17:03:03.531] Resolving globals: FALSE
[17:03:03.532] The total size of the 1 globals is 56 bytes (56 bytes)
[17:03:03.532] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:03:03.532] - globals: [1] ‘ii’
[17:03:03.532] 
[17:03:03.532] getGlobalsAndPackages() ... DONE
[17:03:03.533] Packages needed by the future expression (n = 0): <none>
[17:03:03.535] Packages needed by future strategies (n = 0): <none>
[17:03:03.535] {
[17:03:03.535]     {
[17:03:03.535]         {
[17:03:03.535]             ...future.startTime <- base::Sys.time()
[17:03:03.535]             {
[17:03:03.535]                 {
[17:03:03.535]                   {
[17:03:03.535]                     base::local({
[17:03:03.535]                       has_future <- base::requireNamespace("future", 
[17:03:03.535]                         quietly = TRUE)
[17:03:03.535]                       if (has_future) {
[17:03:03.535]                         ns <- base::getNamespace("future")
[17:03:03.535]                         version <- ns[[".package"]][["version"]]
[17:03:03.535]                         if (is.null(version)) 
[17:03:03.535]                           version <- utils::packageVersion("future")
[17:03:03.535]                       }
[17:03:03.535]                       else {
[17:03:03.535]                         version <- NULL
[17:03:03.535]                       }
[17:03:03.535]                       if (!has_future || version < "1.8.0") {
[17:03:03.535]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.535]                           "", base::R.version$version.string), 
[17:03:03.535]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:03.535]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.535]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.535]                             "release", "version")], collapse = " "), 
[17:03:03.535]                           hostname = base::Sys.info()[["nodename"]])
[17:03:03.535]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.535]                           info)
[17:03:03.535]                         info <- base::paste(info, collapse = "; ")
[17:03:03.535]                         if (!has_future) {
[17:03:03.535]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.535]                             info)
[17:03:03.535]                         }
[17:03:03.535]                         else {
[17:03:03.535]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.535]                             info, version)
[17:03:03.535]                         }
[17:03:03.535]                         base::stop(msg)
[17:03:03.535]                       }
[17:03:03.535]                     })
[17:03:03.535]                   }
[17:03:03.535]                   ...future.strategy.old <- future::plan("list")
[17:03:03.535]                   options(future.plan = NULL)
[17:03:03.535]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.535]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.535]                 }
[17:03:03.535]                 ...future.workdir <- getwd()
[17:03:03.535]             }
[17:03:03.535]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.535]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.535]         }
[17:03:03.535]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.535]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.535]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.535]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.535]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.535]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.535]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.535]             base::names(...future.oldOptions))
[17:03:03.535]     }
[17:03:03.535]     if (FALSE) {
[17:03:03.535]     }
[17:03:03.535]     else {
[17:03:03.535]         if (TRUE) {
[17:03:03.535]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.535]                 open = "w")
[17:03:03.535]         }
[17:03:03.535]         else {
[17:03:03.535]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.535]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.535]         }
[17:03:03.535]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.535]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.535]             base::sink(type = "output", split = FALSE)
[17:03:03.535]             base::close(...future.stdout)
[17:03:03.535]         }, add = TRUE)
[17:03:03.535]     }
[17:03:03.535]     ...future.frame <- base::sys.nframe()
[17:03:03.535]     ...future.conditions <- base::list()
[17:03:03.535]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.535]     if (FALSE) {
[17:03:03.535]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.535]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.535]     }
[17:03:03.535]     ...future.result <- base::tryCatch({
[17:03:03.535]         base::withCallingHandlers({
[17:03:03.535]             ...future.value <- base::withVisible(base::local({
[17:03:03.535]                 ii
[17:03:03.535]             }))
[17:03:03.535]             future::FutureResult(value = ...future.value$value, 
[17:03:03.535]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.535]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.535]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.535]                     ...future.globalenv.names))
[17:03:03.535]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.535]         }, condition = base::local({
[17:03:03.535]             c <- base::c
[17:03:03.535]             inherits <- base::inherits
[17:03:03.535]             invokeRestart <- base::invokeRestart
[17:03:03.535]             length <- base::length
[17:03:03.535]             list <- base::list
[17:03:03.535]             seq.int <- base::seq.int
[17:03:03.535]             signalCondition <- base::signalCondition
[17:03:03.535]             sys.calls <- base::sys.calls
[17:03:03.535]             `[[` <- base::`[[`
[17:03:03.535]             `+` <- base::`+`
[17:03:03.535]             `<<-` <- base::`<<-`
[17:03:03.535]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.535]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.535]                   3L)]
[17:03:03.535]             }
[17:03:03.535]             function(cond) {
[17:03:03.535]                 is_error <- inherits(cond, "error")
[17:03:03.535]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.535]                   NULL)
[17:03:03.535]                 if (is_error) {
[17:03:03.535]                   sessionInformation <- function() {
[17:03:03.535]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.535]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.535]                       search = base::search(), system = base::Sys.info())
[17:03:03.535]                   }
[17:03:03.535]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.535]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.535]                     cond$call), session = sessionInformation(), 
[17:03:03.535]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.535]                   signalCondition(cond)
[17:03:03.535]                 }
[17:03:03.535]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.535]                 "immediateCondition"))) {
[17:03:03.535]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.535]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.535]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.535]                   if (TRUE && !signal) {
[17:03:03.535]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.535]                     {
[17:03:03.535]                       inherits <- base::inherits
[17:03:03.535]                       invokeRestart <- base::invokeRestart
[17:03:03.535]                       is.null <- base::is.null
[17:03:03.535]                       muffled <- FALSE
[17:03:03.535]                       if (inherits(cond, "message")) {
[17:03:03.535]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.535]                         if (muffled) 
[17:03:03.535]                           invokeRestart("muffleMessage")
[17:03:03.535]                       }
[17:03:03.535]                       else if (inherits(cond, "warning")) {
[17:03:03.535]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.535]                         if (muffled) 
[17:03:03.535]                           invokeRestart("muffleWarning")
[17:03:03.535]                       }
[17:03:03.535]                       else if (inherits(cond, "condition")) {
[17:03:03.535]                         if (!is.null(pattern)) {
[17:03:03.535]                           computeRestarts <- base::computeRestarts
[17:03:03.535]                           grepl <- base::grepl
[17:03:03.535]                           restarts <- computeRestarts(cond)
[17:03:03.535]                           for (restart in restarts) {
[17:03:03.535]                             name <- restart$name
[17:03:03.535]                             if (is.null(name)) 
[17:03:03.535]                               next
[17:03:03.535]                             if (!grepl(pattern, name)) 
[17:03:03.535]                               next
[17:03:03.535]                             invokeRestart(restart)
[17:03:03.535]                             muffled <- TRUE
[17:03:03.535]                             break
[17:03:03.535]                           }
[17:03:03.535]                         }
[17:03:03.535]                       }
[17:03:03.535]                       invisible(muffled)
[17:03:03.535]                     }
[17:03:03.535]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.535]                   }
[17:03:03.535]                 }
[17:03:03.535]                 else {
[17:03:03.535]                   if (TRUE) {
[17:03:03.535]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.535]                     {
[17:03:03.535]                       inherits <- base::inherits
[17:03:03.535]                       invokeRestart <- base::invokeRestart
[17:03:03.535]                       is.null <- base::is.null
[17:03:03.535]                       muffled <- FALSE
[17:03:03.535]                       if (inherits(cond, "message")) {
[17:03:03.535]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.535]                         if (muffled) 
[17:03:03.535]                           invokeRestart("muffleMessage")
[17:03:03.535]                       }
[17:03:03.535]                       else if (inherits(cond, "warning")) {
[17:03:03.535]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.535]                         if (muffled) 
[17:03:03.535]                           invokeRestart("muffleWarning")
[17:03:03.535]                       }
[17:03:03.535]                       else if (inherits(cond, "condition")) {
[17:03:03.535]                         if (!is.null(pattern)) {
[17:03:03.535]                           computeRestarts <- base::computeRestarts
[17:03:03.535]                           grepl <- base::grepl
[17:03:03.535]                           restarts <- computeRestarts(cond)
[17:03:03.535]                           for (restart in restarts) {
[17:03:03.535]                             name <- restart$name
[17:03:03.535]                             if (is.null(name)) 
[17:03:03.535]                               next
[17:03:03.535]                             if (!grepl(pattern, name)) 
[17:03:03.535]                               next
[17:03:03.535]                             invokeRestart(restart)
[17:03:03.535]                             muffled <- TRUE
[17:03:03.535]                             break
[17:03:03.535]                           }
[17:03:03.535]                         }
[17:03:03.535]                       }
[17:03:03.535]                       invisible(muffled)
[17:03:03.535]                     }
[17:03:03.535]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.535]                   }
[17:03:03.535]                 }
[17:03:03.535]             }
[17:03:03.535]         }))
[17:03:03.535]     }, error = function(ex) {
[17:03:03.535]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.535]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.535]                 ...future.rng), started = ...future.startTime, 
[17:03:03.535]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.535]             version = "1.8"), class = "FutureResult")
[17:03:03.535]     }, finally = {
[17:03:03.535]         if (!identical(...future.workdir, getwd())) 
[17:03:03.535]             setwd(...future.workdir)
[17:03:03.535]         {
[17:03:03.535]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.535]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.535]             }
[17:03:03.535]             base::options(...future.oldOptions)
[17:03:03.535]             if (.Platform$OS.type == "windows") {
[17:03:03.535]                 old_names <- names(...future.oldEnvVars)
[17:03:03.535]                 envs <- base::Sys.getenv()
[17:03:03.535]                 names <- names(envs)
[17:03:03.535]                 common <- intersect(names, old_names)
[17:03:03.535]                 added <- setdiff(names, old_names)
[17:03:03.535]                 removed <- setdiff(old_names, names)
[17:03:03.535]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.535]                   envs[common]]
[17:03:03.535]                 NAMES <- toupper(changed)
[17:03:03.535]                 args <- list()
[17:03:03.535]                 for (kk in seq_along(NAMES)) {
[17:03:03.535]                   name <- changed[[kk]]
[17:03:03.535]                   NAME <- NAMES[[kk]]
[17:03:03.535]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.535]                     next
[17:03:03.535]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.535]                 }
[17:03:03.535]                 NAMES <- toupper(added)
[17:03:03.535]                 for (kk in seq_along(NAMES)) {
[17:03:03.535]                   name <- added[[kk]]
[17:03:03.535]                   NAME <- NAMES[[kk]]
[17:03:03.535]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.535]                     next
[17:03:03.535]                   args[[name]] <- ""
[17:03:03.535]                 }
[17:03:03.535]                 NAMES <- toupper(removed)
[17:03:03.535]                 for (kk in seq_along(NAMES)) {
[17:03:03.535]                   name <- removed[[kk]]
[17:03:03.535]                   NAME <- NAMES[[kk]]
[17:03:03.535]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.535]                     next
[17:03:03.535]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.535]                 }
[17:03:03.535]                 if (length(args) > 0) 
[17:03:03.535]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.535]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.535]             }
[17:03:03.535]             else {
[17:03:03.535]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.535]             }
[17:03:03.535]             {
[17:03:03.535]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.535]                   0L) {
[17:03:03.535]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.535]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.535]                   base::options(opts)
[17:03:03.535]                 }
[17:03:03.535]                 {
[17:03:03.535]                   {
[17:03:03.535]                     NULL
[17:03:03.535]                     RNGkind("Mersenne-Twister")
[17:03:03.535]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:03.535]                       inherits = FALSE)
[17:03:03.535]                   }
[17:03:03.535]                   options(future.plan = NULL)
[17:03:03.535]                   if (is.na(NA_character_)) 
[17:03:03.535]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.535]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.535]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.535]                     .init = FALSE)
[17:03:03.535]                 }
[17:03:03.535]             }
[17:03:03.535]         }
[17:03:03.535]     })
[17:03:03.535]     if (TRUE) {
[17:03:03.535]         base::sink(type = "output", split = FALSE)
[17:03:03.535]         if (TRUE) {
[17:03:03.535]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.535]         }
[17:03:03.535]         else {
[17:03:03.535]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.535]         }
[17:03:03.535]         base::close(...future.stdout)
[17:03:03.535]         ...future.stdout <- NULL
[17:03:03.535]     }
[17:03:03.535]     ...future.result$conditions <- ...future.conditions
[17:03:03.535]     ...future.result$finished <- base::Sys.time()
[17:03:03.535]     ...future.result
[17:03:03.535] }
[17:03:03.537] assign_globals() ...
[17:03:03.537] List of 1
[17:03:03.537]  $ ii: int 1
[17:03:03.537]  - attr(*, "where")=List of 1
[17:03:03.537]   ..$ ii:<environment: R_EmptyEnv> 
[17:03:03.537]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:03.537]  - attr(*, "resolved")= logi FALSE
[17:03:03.537]  - attr(*, "total_size")= num 56
[17:03:03.539] - copied ‘ii’ to environment
[17:03:03.539] assign_globals() ... done
[17:03:03.539] plan(): Setting new future strategy stack:
[17:03:03.540] List of future strategies:
[17:03:03.540] 1. sequential:
[17:03:03.540]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.540]    - tweaked: FALSE
[17:03:03.540]    - call: NULL
[17:03:03.540] plan(): nbrOfWorkers() = 1
[17:03:03.541] plan(): Setting new future strategy stack:
[17:03:03.541] List of future strategies:
[17:03:03.541] 1. multicore:
[17:03:03.541]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.541]    - tweaked: FALSE
[17:03:03.541]    - call: plan(multicore)
[17:03:03.544] plan(): nbrOfWorkers() = 1
[17:03:03.545] SequentialFuture started (and completed)
 - Creating multicore future #2 ...
[17:03:03.548] getGlobalsAndPackages() ...
[17:03:03.548] Searching for globals...
[17:03:03.549] - globals found: [2] ‘{’, ‘ii’
[17:03:03.549] Searching for globals ... DONE
[17:03:03.549] Resolving globals: FALSE
[17:03:03.549] The total size of the 1 globals is 56 bytes (56 bytes)
[17:03:03.550] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:03:03.550] - globals: [1] ‘ii’
[17:03:03.550] 
[17:03:03.550] getGlobalsAndPackages() ... DONE
[17:03:03.550] Packages needed by the future expression (n = 0): <none>
[17:03:03.550] Packages needed by future strategies (n = 0): <none>
[17:03:03.551] {
[17:03:03.551]     {
[17:03:03.551]         {
[17:03:03.551]             ...future.startTime <- base::Sys.time()
[17:03:03.551]             {
[17:03:03.551]                 {
[17:03:03.551]                   {
[17:03:03.551]                     base::local({
[17:03:03.551]                       has_future <- base::requireNamespace("future", 
[17:03:03.551]                         quietly = TRUE)
[17:03:03.551]                       if (has_future) {
[17:03:03.551]                         ns <- base::getNamespace("future")
[17:03:03.551]                         version <- ns[[".package"]][["version"]]
[17:03:03.551]                         if (is.null(version)) 
[17:03:03.551]                           version <- utils::packageVersion("future")
[17:03:03.551]                       }
[17:03:03.551]                       else {
[17:03:03.551]                         version <- NULL
[17:03:03.551]                       }
[17:03:03.551]                       if (!has_future || version < "1.8.0") {
[17:03:03.551]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.551]                           "", base::R.version$version.string), 
[17:03:03.551]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:03.551]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.551]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.551]                             "release", "version")], collapse = " "), 
[17:03:03.551]                           hostname = base::Sys.info()[["nodename"]])
[17:03:03.551]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.551]                           info)
[17:03:03.551]                         info <- base::paste(info, collapse = "; ")
[17:03:03.551]                         if (!has_future) {
[17:03:03.551]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.551]                             info)
[17:03:03.551]                         }
[17:03:03.551]                         else {
[17:03:03.551]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.551]                             info, version)
[17:03:03.551]                         }
[17:03:03.551]                         base::stop(msg)
[17:03:03.551]                       }
[17:03:03.551]                     })
[17:03:03.551]                   }
[17:03:03.551]                   ...future.strategy.old <- future::plan("list")
[17:03:03.551]                   options(future.plan = NULL)
[17:03:03.551]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.551]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.551]                 }
[17:03:03.551]                 ...future.workdir <- getwd()
[17:03:03.551]             }
[17:03:03.551]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.551]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.551]         }
[17:03:03.551]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.551]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.551]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.551]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.551]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.551]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.551]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.551]             base::names(...future.oldOptions))
[17:03:03.551]     }
[17:03:03.551]     if (FALSE) {
[17:03:03.551]     }
[17:03:03.551]     else {
[17:03:03.551]         if (TRUE) {
[17:03:03.551]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.551]                 open = "w")
[17:03:03.551]         }
[17:03:03.551]         else {
[17:03:03.551]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.551]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.551]         }
[17:03:03.551]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.551]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.551]             base::sink(type = "output", split = FALSE)
[17:03:03.551]             base::close(...future.stdout)
[17:03:03.551]         }, add = TRUE)
[17:03:03.551]     }
[17:03:03.551]     ...future.frame <- base::sys.nframe()
[17:03:03.551]     ...future.conditions <- base::list()
[17:03:03.551]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.551]     if (FALSE) {
[17:03:03.551]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.551]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.551]     }
[17:03:03.551]     ...future.result <- base::tryCatch({
[17:03:03.551]         base::withCallingHandlers({
[17:03:03.551]             ...future.value <- base::withVisible(base::local({
[17:03:03.551]                 ii
[17:03:03.551]             }))
[17:03:03.551]             future::FutureResult(value = ...future.value$value, 
[17:03:03.551]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.551]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.551]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.551]                     ...future.globalenv.names))
[17:03:03.551]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.551]         }, condition = base::local({
[17:03:03.551]             c <- base::c
[17:03:03.551]             inherits <- base::inherits
[17:03:03.551]             invokeRestart <- base::invokeRestart
[17:03:03.551]             length <- base::length
[17:03:03.551]             list <- base::list
[17:03:03.551]             seq.int <- base::seq.int
[17:03:03.551]             signalCondition <- base::signalCondition
[17:03:03.551]             sys.calls <- base::sys.calls
[17:03:03.551]             `[[` <- base::`[[`
[17:03:03.551]             `+` <- base::`+`
[17:03:03.551]             `<<-` <- base::`<<-`
[17:03:03.551]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.551]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.551]                   3L)]
[17:03:03.551]             }
[17:03:03.551]             function(cond) {
[17:03:03.551]                 is_error <- inherits(cond, "error")
[17:03:03.551]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.551]                   NULL)
[17:03:03.551]                 if (is_error) {
[17:03:03.551]                   sessionInformation <- function() {
[17:03:03.551]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.551]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.551]                       search = base::search(), system = base::Sys.info())
[17:03:03.551]                   }
[17:03:03.551]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.551]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.551]                     cond$call), session = sessionInformation(), 
[17:03:03.551]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.551]                   signalCondition(cond)
[17:03:03.551]                 }
[17:03:03.551]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.551]                 "immediateCondition"))) {
[17:03:03.551]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.551]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.551]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.551]                   if (TRUE && !signal) {
[17:03:03.551]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.551]                     {
[17:03:03.551]                       inherits <- base::inherits
[17:03:03.551]                       invokeRestart <- base::invokeRestart
[17:03:03.551]                       is.null <- base::is.null
[17:03:03.551]                       muffled <- FALSE
[17:03:03.551]                       if (inherits(cond, "message")) {
[17:03:03.551]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.551]                         if (muffled) 
[17:03:03.551]                           invokeRestart("muffleMessage")
[17:03:03.551]                       }
[17:03:03.551]                       else if (inherits(cond, "warning")) {
[17:03:03.551]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.551]                         if (muffled) 
[17:03:03.551]                           invokeRestart("muffleWarning")
[17:03:03.551]                       }
[17:03:03.551]                       else if (inherits(cond, "condition")) {
[17:03:03.551]                         if (!is.null(pattern)) {
[17:03:03.551]                           computeRestarts <- base::computeRestarts
[17:03:03.551]                           grepl <- base::grepl
[17:03:03.551]                           restarts <- computeRestarts(cond)
[17:03:03.551]                           for (restart in restarts) {
[17:03:03.551]                             name <- restart$name
[17:03:03.551]                             if (is.null(name)) 
[17:03:03.551]                               next
[17:03:03.551]                             if (!grepl(pattern, name)) 
[17:03:03.551]                               next
[17:03:03.551]                             invokeRestart(restart)
[17:03:03.551]                             muffled <- TRUE
[17:03:03.551]                             break
[17:03:03.551]                           }
[17:03:03.551]                         }
[17:03:03.551]                       }
[17:03:03.551]                       invisible(muffled)
[17:03:03.551]                     }
[17:03:03.551]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.551]                   }
[17:03:03.551]                 }
[17:03:03.551]                 else {
[17:03:03.551]                   if (TRUE) {
[17:03:03.551]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.551]                     {
[17:03:03.551]                       inherits <- base::inherits
[17:03:03.551]                       invokeRestart <- base::invokeRestart
[17:03:03.551]                       is.null <- base::is.null
[17:03:03.551]                       muffled <- FALSE
[17:03:03.551]                       if (inherits(cond, "message")) {
[17:03:03.551]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.551]                         if (muffled) 
[17:03:03.551]                           invokeRestart("muffleMessage")
[17:03:03.551]                       }
[17:03:03.551]                       else if (inherits(cond, "warning")) {
[17:03:03.551]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.551]                         if (muffled) 
[17:03:03.551]                           invokeRestart("muffleWarning")
[17:03:03.551]                       }
[17:03:03.551]                       else if (inherits(cond, "condition")) {
[17:03:03.551]                         if (!is.null(pattern)) {
[17:03:03.551]                           computeRestarts <- base::computeRestarts
[17:03:03.551]                           grepl <- base::grepl
[17:03:03.551]                           restarts <- computeRestarts(cond)
[17:03:03.551]                           for (restart in restarts) {
[17:03:03.551]                             name <- restart$name
[17:03:03.551]                             if (is.null(name)) 
[17:03:03.551]                               next
[17:03:03.551]                             if (!grepl(pattern, name)) 
[17:03:03.551]                               next
[17:03:03.551]                             invokeRestart(restart)
[17:03:03.551]                             muffled <- TRUE
[17:03:03.551]                             break
[17:03:03.551]                           }
[17:03:03.551]                         }
[17:03:03.551]                       }
[17:03:03.551]                       invisible(muffled)
[17:03:03.551]                     }
[17:03:03.551]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.551]                   }
[17:03:03.551]                 }
[17:03:03.551]             }
[17:03:03.551]         }))
[17:03:03.551]     }, error = function(ex) {
[17:03:03.551]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.551]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.551]                 ...future.rng), started = ...future.startTime, 
[17:03:03.551]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.551]             version = "1.8"), class = "FutureResult")
[17:03:03.551]     }, finally = {
[17:03:03.551]         if (!identical(...future.workdir, getwd())) 
[17:03:03.551]             setwd(...future.workdir)
[17:03:03.551]         {
[17:03:03.551]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.551]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.551]             }
[17:03:03.551]             base::options(...future.oldOptions)
[17:03:03.551]             if (.Platform$OS.type == "windows") {
[17:03:03.551]                 old_names <- names(...future.oldEnvVars)
[17:03:03.551]                 envs <- base::Sys.getenv()
[17:03:03.551]                 names <- names(envs)
[17:03:03.551]                 common <- intersect(names, old_names)
[17:03:03.551]                 added <- setdiff(names, old_names)
[17:03:03.551]                 removed <- setdiff(old_names, names)
[17:03:03.551]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.551]                   envs[common]]
[17:03:03.551]                 NAMES <- toupper(changed)
[17:03:03.551]                 args <- list()
[17:03:03.551]                 for (kk in seq_along(NAMES)) {
[17:03:03.551]                   name <- changed[[kk]]
[17:03:03.551]                   NAME <- NAMES[[kk]]
[17:03:03.551]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.551]                     next
[17:03:03.551]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.551]                 }
[17:03:03.551]                 NAMES <- toupper(added)
[17:03:03.551]                 for (kk in seq_along(NAMES)) {
[17:03:03.551]                   name <- added[[kk]]
[17:03:03.551]                   NAME <- NAMES[[kk]]
[17:03:03.551]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.551]                     next
[17:03:03.551]                   args[[name]] <- ""
[17:03:03.551]                 }
[17:03:03.551]                 NAMES <- toupper(removed)
[17:03:03.551]                 for (kk in seq_along(NAMES)) {
[17:03:03.551]                   name <- removed[[kk]]
[17:03:03.551]                   NAME <- NAMES[[kk]]
[17:03:03.551]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.551]                     next
[17:03:03.551]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.551]                 }
[17:03:03.551]                 if (length(args) > 0) 
[17:03:03.551]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.551]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.551]             }
[17:03:03.551]             else {
[17:03:03.551]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.551]             }
[17:03:03.551]             {
[17:03:03.551]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.551]                   0L) {
[17:03:03.551]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.551]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.551]                   base::options(opts)
[17:03:03.551]                 }
[17:03:03.551]                 {
[17:03:03.551]                   {
[17:03:03.551]                     NULL
[17:03:03.551]                     RNGkind("Mersenne-Twister")
[17:03:03.551]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:03.551]                       inherits = FALSE)
[17:03:03.551]                   }
[17:03:03.551]                   options(future.plan = NULL)
[17:03:03.551]                   if (is.na(NA_character_)) 
[17:03:03.551]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.551]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.551]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.551]                     .init = FALSE)
[17:03:03.551]                 }
[17:03:03.551]             }
[17:03:03.551]         }
[17:03:03.551]     })
[17:03:03.551]     if (TRUE) {
[17:03:03.551]         base::sink(type = "output", split = FALSE)
[17:03:03.551]         if (TRUE) {
[17:03:03.551]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.551]         }
[17:03:03.551]         else {
[17:03:03.551]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.551]         }
[17:03:03.551]         base::close(...future.stdout)
[17:03:03.551]         ...future.stdout <- NULL
[17:03:03.551]     }
[17:03:03.551]     ...future.result$conditions <- ...future.conditions
[17:03:03.551]     ...future.result$finished <- base::Sys.time()
[17:03:03.551]     ...future.result
[17:03:03.551] }
[17:03:03.552] assign_globals() ...
[17:03:03.553] List of 1
[17:03:03.553]  $ ii: int 2
[17:03:03.553]  - attr(*, "where")=List of 1
[17:03:03.553]   ..$ ii:<environment: R_EmptyEnv> 
[17:03:03.553]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:03.553]  - attr(*, "resolved")= logi FALSE
[17:03:03.553]  - attr(*, "total_size")= num 56
[17:03:03.555] - copied ‘ii’ to environment
[17:03:03.555] assign_globals() ... done
[17:03:03.555] plan(): Setting new future strategy stack:
[17:03:03.555] List of future strategies:
[17:03:03.555] 1. sequential:
[17:03:03.555]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.555]    - tweaked: FALSE
[17:03:03.555]    - call: NULL
[17:03:03.556] plan(): nbrOfWorkers() = 1
[17:03:03.556] plan(): Setting new future strategy stack:
[17:03:03.556] List of future strategies:
[17:03:03.556] 1. multicore:
[17:03:03.556]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.556]    - tweaked: FALSE
[17:03:03.556]    - call: plan(multicore)
[17:03:03.560] plan(): nbrOfWorkers() = 1
[17:03:03.560] SequentialFuture started (and completed)
 - Creating multicore future #3 ...
[17:03:03.563] getGlobalsAndPackages() ...
[17:03:03.564] Searching for globals...
[17:03:03.564] - globals found: [2] ‘{’, ‘ii’
[17:03:03.564] Searching for globals ... DONE
[17:03:03.564] Resolving globals: FALSE
[17:03:03.565] The total size of the 1 globals is 56 bytes (56 bytes)
[17:03:03.565] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:03:03.565] - globals: [1] ‘ii’
[17:03:03.565] 
[17:03:03.565] getGlobalsAndPackages() ... DONE
[17:03:03.566] Packages needed by the future expression (n = 0): <none>
[17:03:03.566] Packages needed by future strategies (n = 0): <none>
[17:03:03.566] {
[17:03:03.566]     {
[17:03:03.566]         {
[17:03:03.566]             ...future.startTime <- base::Sys.time()
[17:03:03.566]             {
[17:03:03.566]                 {
[17:03:03.566]                   {
[17:03:03.566]                     base::local({
[17:03:03.566]                       has_future <- base::requireNamespace("future", 
[17:03:03.566]                         quietly = TRUE)
[17:03:03.566]                       if (has_future) {
[17:03:03.566]                         ns <- base::getNamespace("future")
[17:03:03.566]                         version <- ns[[".package"]][["version"]]
[17:03:03.566]                         if (is.null(version)) 
[17:03:03.566]                           version <- utils::packageVersion("future")
[17:03:03.566]                       }
[17:03:03.566]                       else {
[17:03:03.566]                         version <- NULL
[17:03:03.566]                       }
[17:03:03.566]                       if (!has_future || version < "1.8.0") {
[17:03:03.566]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.566]                           "", base::R.version$version.string), 
[17:03:03.566]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:03.566]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.566]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.566]                             "release", "version")], collapse = " "), 
[17:03:03.566]                           hostname = base::Sys.info()[["nodename"]])
[17:03:03.566]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.566]                           info)
[17:03:03.566]                         info <- base::paste(info, collapse = "; ")
[17:03:03.566]                         if (!has_future) {
[17:03:03.566]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.566]                             info)
[17:03:03.566]                         }
[17:03:03.566]                         else {
[17:03:03.566]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.566]                             info, version)
[17:03:03.566]                         }
[17:03:03.566]                         base::stop(msg)
[17:03:03.566]                       }
[17:03:03.566]                     })
[17:03:03.566]                   }
[17:03:03.566]                   ...future.strategy.old <- future::plan("list")
[17:03:03.566]                   options(future.plan = NULL)
[17:03:03.566]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.566]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.566]                 }
[17:03:03.566]                 ...future.workdir <- getwd()
[17:03:03.566]             }
[17:03:03.566]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.566]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.566]         }
[17:03:03.566]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.566]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.566]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.566]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.566]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.566]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.566]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.566]             base::names(...future.oldOptions))
[17:03:03.566]     }
[17:03:03.566]     if (FALSE) {
[17:03:03.566]     }
[17:03:03.566]     else {
[17:03:03.566]         if (TRUE) {
[17:03:03.566]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.566]                 open = "w")
[17:03:03.566]         }
[17:03:03.566]         else {
[17:03:03.566]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.566]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.566]         }
[17:03:03.566]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.566]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.566]             base::sink(type = "output", split = FALSE)
[17:03:03.566]             base::close(...future.stdout)
[17:03:03.566]         }, add = TRUE)
[17:03:03.566]     }
[17:03:03.566]     ...future.frame <- base::sys.nframe()
[17:03:03.566]     ...future.conditions <- base::list()
[17:03:03.566]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.566]     if (FALSE) {
[17:03:03.566]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.566]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.566]     }
[17:03:03.566]     ...future.result <- base::tryCatch({
[17:03:03.566]         base::withCallingHandlers({
[17:03:03.566]             ...future.value <- base::withVisible(base::local({
[17:03:03.566]                 ii
[17:03:03.566]             }))
[17:03:03.566]             future::FutureResult(value = ...future.value$value, 
[17:03:03.566]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.566]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.566]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.566]                     ...future.globalenv.names))
[17:03:03.566]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.566]         }, condition = base::local({
[17:03:03.566]             c <- base::c
[17:03:03.566]             inherits <- base::inherits
[17:03:03.566]             invokeRestart <- base::invokeRestart
[17:03:03.566]             length <- base::length
[17:03:03.566]             list <- base::list
[17:03:03.566]             seq.int <- base::seq.int
[17:03:03.566]             signalCondition <- base::signalCondition
[17:03:03.566]             sys.calls <- base::sys.calls
[17:03:03.566]             `[[` <- base::`[[`
[17:03:03.566]             `+` <- base::`+`
[17:03:03.566]             `<<-` <- base::`<<-`
[17:03:03.566]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.566]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.566]                   3L)]
[17:03:03.566]             }
[17:03:03.566]             function(cond) {
[17:03:03.566]                 is_error <- inherits(cond, "error")
[17:03:03.566]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.566]                   NULL)
[17:03:03.566]                 if (is_error) {
[17:03:03.566]                   sessionInformation <- function() {
[17:03:03.566]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.566]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.566]                       search = base::search(), system = base::Sys.info())
[17:03:03.566]                   }
[17:03:03.566]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.566]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.566]                     cond$call), session = sessionInformation(), 
[17:03:03.566]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.566]                   signalCondition(cond)
[17:03:03.566]                 }
[17:03:03.566]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.566]                 "immediateCondition"))) {
[17:03:03.566]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.566]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.566]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.566]                   if (TRUE && !signal) {
[17:03:03.566]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.566]                     {
[17:03:03.566]                       inherits <- base::inherits
[17:03:03.566]                       invokeRestart <- base::invokeRestart
[17:03:03.566]                       is.null <- base::is.null
[17:03:03.566]                       muffled <- FALSE
[17:03:03.566]                       if (inherits(cond, "message")) {
[17:03:03.566]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.566]                         if (muffled) 
[17:03:03.566]                           invokeRestart("muffleMessage")
[17:03:03.566]                       }
[17:03:03.566]                       else if (inherits(cond, "warning")) {
[17:03:03.566]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.566]                         if (muffled) 
[17:03:03.566]                           invokeRestart("muffleWarning")
[17:03:03.566]                       }
[17:03:03.566]                       else if (inherits(cond, "condition")) {
[17:03:03.566]                         if (!is.null(pattern)) {
[17:03:03.566]                           computeRestarts <- base::computeRestarts
[17:03:03.566]                           grepl <- base::grepl
[17:03:03.566]                           restarts <- computeRestarts(cond)
[17:03:03.566]                           for (restart in restarts) {
[17:03:03.566]                             name <- restart$name
[17:03:03.566]                             if (is.null(name)) 
[17:03:03.566]                               next
[17:03:03.566]                             if (!grepl(pattern, name)) 
[17:03:03.566]                               next
[17:03:03.566]                             invokeRestart(restart)
[17:03:03.566]                             muffled <- TRUE
[17:03:03.566]                             break
[17:03:03.566]                           }
[17:03:03.566]                         }
[17:03:03.566]                       }
[17:03:03.566]                       invisible(muffled)
[17:03:03.566]                     }
[17:03:03.566]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.566]                   }
[17:03:03.566]                 }
[17:03:03.566]                 else {
[17:03:03.566]                   if (TRUE) {
[17:03:03.566]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.566]                     {
[17:03:03.566]                       inherits <- base::inherits
[17:03:03.566]                       invokeRestart <- base::invokeRestart
[17:03:03.566]                       is.null <- base::is.null
[17:03:03.566]                       muffled <- FALSE
[17:03:03.566]                       if (inherits(cond, "message")) {
[17:03:03.566]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.566]                         if (muffled) 
[17:03:03.566]                           invokeRestart("muffleMessage")
[17:03:03.566]                       }
[17:03:03.566]                       else if (inherits(cond, "warning")) {
[17:03:03.566]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.566]                         if (muffled) 
[17:03:03.566]                           invokeRestart("muffleWarning")
[17:03:03.566]                       }
[17:03:03.566]                       else if (inherits(cond, "condition")) {
[17:03:03.566]                         if (!is.null(pattern)) {
[17:03:03.566]                           computeRestarts <- base::computeRestarts
[17:03:03.566]                           grepl <- base::grepl
[17:03:03.566]                           restarts <- computeRestarts(cond)
[17:03:03.566]                           for (restart in restarts) {
[17:03:03.566]                             name <- restart$name
[17:03:03.566]                             if (is.null(name)) 
[17:03:03.566]                               next
[17:03:03.566]                             if (!grepl(pattern, name)) 
[17:03:03.566]                               next
[17:03:03.566]                             invokeRestart(restart)
[17:03:03.566]                             muffled <- TRUE
[17:03:03.566]                             break
[17:03:03.566]                           }
[17:03:03.566]                         }
[17:03:03.566]                       }
[17:03:03.566]                       invisible(muffled)
[17:03:03.566]                     }
[17:03:03.566]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.566]                   }
[17:03:03.566]                 }
[17:03:03.566]             }
[17:03:03.566]         }))
[17:03:03.566]     }, error = function(ex) {
[17:03:03.566]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.566]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.566]                 ...future.rng), started = ...future.startTime, 
[17:03:03.566]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.566]             version = "1.8"), class = "FutureResult")
[17:03:03.566]     }, finally = {
[17:03:03.566]         if (!identical(...future.workdir, getwd())) 
[17:03:03.566]             setwd(...future.workdir)
[17:03:03.566]         {
[17:03:03.566]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.566]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.566]             }
[17:03:03.566]             base::options(...future.oldOptions)
[17:03:03.566]             if (.Platform$OS.type == "windows") {
[17:03:03.566]                 old_names <- names(...future.oldEnvVars)
[17:03:03.566]                 envs <- base::Sys.getenv()
[17:03:03.566]                 names <- names(envs)
[17:03:03.566]                 common <- intersect(names, old_names)
[17:03:03.566]                 added <- setdiff(names, old_names)
[17:03:03.566]                 removed <- setdiff(old_names, names)
[17:03:03.566]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.566]                   envs[common]]
[17:03:03.566]                 NAMES <- toupper(changed)
[17:03:03.566]                 args <- list()
[17:03:03.566]                 for (kk in seq_along(NAMES)) {
[17:03:03.566]                   name <- changed[[kk]]
[17:03:03.566]                   NAME <- NAMES[[kk]]
[17:03:03.566]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.566]                     next
[17:03:03.566]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.566]                 }
[17:03:03.566]                 NAMES <- toupper(added)
[17:03:03.566]                 for (kk in seq_along(NAMES)) {
[17:03:03.566]                   name <- added[[kk]]
[17:03:03.566]                   NAME <- NAMES[[kk]]
[17:03:03.566]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.566]                     next
[17:03:03.566]                   args[[name]] <- ""
[17:03:03.566]                 }
[17:03:03.566]                 NAMES <- toupper(removed)
[17:03:03.566]                 for (kk in seq_along(NAMES)) {
[17:03:03.566]                   name <- removed[[kk]]
[17:03:03.566]                   NAME <- NAMES[[kk]]
[17:03:03.566]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.566]                     next
[17:03:03.566]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.566]                 }
[17:03:03.566]                 if (length(args) > 0) 
[17:03:03.566]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.566]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.566]             }
[17:03:03.566]             else {
[17:03:03.566]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.566]             }
[17:03:03.566]             {
[17:03:03.566]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.566]                   0L) {
[17:03:03.566]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.566]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.566]                   base::options(opts)
[17:03:03.566]                 }
[17:03:03.566]                 {
[17:03:03.566]                   {
[17:03:03.566]                     NULL
[17:03:03.566]                     RNGkind("Mersenne-Twister")
[17:03:03.566]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:03.566]                       inherits = FALSE)
[17:03:03.566]                   }
[17:03:03.566]                   options(future.plan = NULL)
[17:03:03.566]                   if (is.na(NA_character_)) 
[17:03:03.566]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.566]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.566]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.566]                     .init = FALSE)
[17:03:03.566]                 }
[17:03:03.566]             }
[17:03:03.566]         }
[17:03:03.566]     })
[17:03:03.566]     if (TRUE) {
[17:03:03.566]         base::sink(type = "output", split = FALSE)
[17:03:03.566]         if (TRUE) {
[17:03:03.566]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.566]         }
[17:03:03.566]         else {
[17:03:03.566]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.566]         }
[17:03:03.566]         base::close(...future.stdout)
[17:03:03.566]         ...future.stdout <- NULL
[17:03:03.566]     }
[17:03:03.566]     ...future.result$conditions <- ...future.conditions
[17:03:03.566]     ...future.result$finished <- base::Sys.time()
[17:03:03.566]     ...future.result
[17:03:03.566] }
[17:03:03.568] assign_globals() ...
[17:03:03.568] List of 1
[17:03:03.568]  $ ii: int 3
[17:03:03.568]  - attr(*, "where")=List of 1
[17:03:03.568]   ..$ ii:<environment: R_EmptyEnv> 
[17:03:03.568]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:03.568]  - attr(*, "resolved")= logi FALSE
[17:03:03.568]  - attr(*, "total_size")= num 56
[17:03:03.570] - copied ‘ii’ to environment
[17:03:03.570] assign_globals() ... done
[17:03:03.570] plan(): Setting new future strategy stack:
[17:03:03.570] List of future strategies:
[17:03:03.570] 1. sequential:
[17:03:03.570]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.570]    - tweaked: FALSE
[17:03:03.570]    - call: NULL
[17:03:03.571] plan(): nbrOfWorkers() = 1
[17:03:03.572] plan(): Setting new future strategy stack:
[17:03:03.572] List of future strategies:
[17:03:03.572] 1. multicore:
[17:03:03.572]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.572]    - tweaked: FALSE
[17:03:03.572]    - call: plan(multicore)
[17:03:03.575] plan(): nbrOfWorkers() = 1
[17:03:03.575] SequentialFuture started (and completed)
 - Creating multicore future #4 ...
[17:03:03.579] getGlobalsAndPackages() ...
[17:03:03.579] Searching for globals...
[17:03:03.581] - globals found: [2] ‘{’, ‘ii’
[17:03:03.581] Searching for globals ... DONE
[17:03:03.582] Resolving globals: FALSE
[17:03:03.582] The total size of the 1 globals is 56 bytes (56 bytes)
[17:03:03.582] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:03:03.582] - globals: [1] ‘ii’
[17:03:03.582] 
[17:03:03.583] getGlobalsAndPackages() ... DONE
[17:03:03.583] Packages needed by the future expression (n = 0): <none>
[17:03:03.583] Packages needed by future strategies (n = 0): <none>
[17:03:03.584] {
[17:03:03.584]     {
[17:03:03.584]         {
[17:03:03.584]             ...future.startTime <- base::Sys.time()
[17:03:03.584]             {
[17:03:03.584]                 {
[17:03:03.584]                   {
[17:03:03.584]                     base::local({
[17:03:03.584]                       has_future <- base::requireNamespace("future", 
[17:03:03.584]                         quietly = TRUE)
[17:03:03.584]                       if (has_future) {
[17:03:03.584]                         ns <- base::getNamespace("future")
[17:03:03.584]                         version <- ns[[".package"]][["version"]]
[17:03:03.584]                         if (is.null(version)) 
[17:03:03.584]                           version <- utils::packageVersion("future")
[17:03:03.584]                       }
[17:03:03.584]                       else {
[17:03:03.584]                         version <- NULL
[17:03:03.584]                       }
[17:03:03.584]                       if (!has_future || version < "1.8.0") {
[17:03:03.584]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.584]                           "", base::R.version$version.string), 
[17:03:03.584]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:03.584]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.584]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.584]                             "release", "version")], collapse = " "), 
[17:03:03.584]                           hostname = base::Sys.info()[["nodename"]])
[17:03:03.584]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.584]                           info)
[17:03:03.584]                         info <- base::paste(info, collapse = "; ")
[17:03:03.584]                         if (!has_future) {
[17:03:03.584]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.584]                             info)
[17:03:03.584]                         }
[17:03:03.584]                         else {
[17:03:03.584]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.584]                             info, version)
[17:03:03.584]                         }
[17:03:03.584]                         base::stop(msg)
[17:03:03.584]                       }
[17:03:03.584]                     })
[17:03:03.584]                   }
[17:03:03.584]                   ...future.strategy.old <- future::plan("list")
[17:03:03.584]                   options(future.plan = NULL)
[17:03:03.584]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.584]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.584]                 }
[17:03:03.584]                 ...future.workdir <- getwd()
[17:03:03.584]             }
[17:03:03.584]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.584]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.584]         }
[17:03:03.584]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.584]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.584]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.584]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.584]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.584]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.584]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.584]             base::names(...future.oldOptions))
[17:03:03.584]     }
[17:03:03.584]     if (FALSE) {
[17:03:03.584]     }
[17:03:03.584]     else {
[17:03:03.584]         if (TRUE) {
[17:03:03.584]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.584]                 open = "w")
[17:03:03.584]         }
[17:03:03.584]         else {
[17:03:03.584]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.584]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.584]         }
[17:03:03.584]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.584]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.584]             base::sink(type = "output", split = FALSE)
[17:03:03.584]             base::close(...future.stdout)
[17:03:03.584]         }, add = TRUE)
[17:03:03.584]     }
[17:03:03.584]     ...future.frame <- base::sys.nframe()
[17:03:03.584]     ...future.conditions <- base::list()
[17:03:03.584]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.584]     if (FALSE) {
[17:03:03.584]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.584]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.584]     }
[17:03:03.584]     ...future.result <- base::tryCatch({
[17:03:03.584]         base::withCallingHandlers({
[17:03:03.584]             ...future.value <- base::withVisible(base::local({
[17:03:03.584]                 ii
[17:03:03.584]             }))
[17:03:03.584]             future::FutureResult(value = ...future.value$value, 
[17:03:03.584]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.584]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.584]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.584]                     ...future.globalenv.names))
[17:03:03.584]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.584]         }, condition = base::local({
[17:03:03.584]             c <- base::c
[17:03:03.584]             inherits <- base::inherits
[17:03:03.584]             invokeRestart <- base::invokeRestart
[17:03:03.584]             length <- base::length
[17:03:03.584]             list <- base::list
[17:03:03.584]             seq.int <- base::seq.int
[17:03:03.584]             signalCondition <- base::signalCondition
[17:03:03.584]             sys.calls <- base::sys.calls
[17:03:03.584]             `[[` <- base::`[[`
[17:03:03.584]             `+` <- base::`+`
[17:03:03.584]             `<<-` <- base::`<<-`
[17:03:03.584]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.584]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.584]                   3L)]
[17:03:03.584]             }
[17:03:03.584]             function(cond) {
[17:03:03.584]                 is_error <- inherits(cond, "error")
[17:03:03.584]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.584]                   NULL)
[17:03:03.584]                 if (is_error) {
[17:03:03.584]                   sessionInformation <- function() {
[17:03:03.584]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.584]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.584]                       search = base::search(), system = base::Sys.info())
[17:03:03.584]                   }
[17:03:03.584]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.584]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.584]                     cond$call), session = sessionInformation(), 
[17:03:03.584]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.584]                   signalCondition(cond)
[17:03:03.584]                 }
[17:03:03.584]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.584]                 "immediateCondition"))) {
[17:03:03.584]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.584]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.584]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.584]                   if (TRUE && !signal) {
[17:03:03.584]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.584]                     {
[17:03:03.584]                       inherits <- base::inherits
[17:03:03.584]                       invokeRestart <- base::invokeRestart
[17:03:03.584]                       is.null <- base::is.null
[17:03:03.584]                       muffled <- FALSE
[17:03:03.584]                       if (inherits(cond, "message")) {
[17:03:03.584]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.584]                         if (muffled) 
[17:03:03.584]                           invokeRestart("muffleMessage")
[17:03:03.584]                       }
[17:03:03.584]                       else if (inherits(cond, "warning")) {
[17:03:03.584]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.584]                         if (muffled) 
[17:03:03.584]                           invokeRestart("muffleWarning")
[17:03:03.584]                       }
[17:03:03.584]                       else if (inherits(cond, "condition")) {
[17:03:03.584]                         if (!is.null(pattern)) {
[17:03:03.584]                           computeRestarts <- base::computeRestarts
[17:03:03.584]                           grepl <- base::grepl
[17:03:03.584]                           restarts <- computeRestarts(cond)
[17:03:03.584]                           for (restart in restarts) {
[17:03:03.584]                             name <- restart$name
[17:03:03.584]                             if (is.null(name)) 
[17:03:03.584]                               next
[17:03:03.584]                             if (!grepl(pattern, name)) 
[17:03:03.584]                               next
[17:03:03.584]                             invokeRestart(restart)
[17:03:03.584]                             muffled <- TRUE
[17:03:03.584]                             break
[17:03:03.584]                           }
[17:03:03.584]                         }
[17:03:03.584]                       }
[17:03:03.584]                       invisible(muffled)
[17:03:03.584]                     }
[17:03:03.584]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.584]                   }
[17:03:03.584]                 }
[17:03:03.584]                 else {
[17:03:03.584]                   if (TRUE) {
[17:03:03.584]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.584]                     {
[17:03:03.584]                       inherits <- base::inherits
[17:03:03.584]                       invokeRestart <- base::invokeRestart
[17:03:03.584]                       is.null <- base::is.null
[17:03:03.584]                       muffled <- FALSE
[17:03:03.584]                       if (inherits(cond, "message")) {
[17:03:03.584]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.584]                         if (muffled) 
[17:03:03.584]                           invokeRestart("muffleMessage")
[17:03:03.584]                       }
[17:03:03.584]                       else if (inherits(cond, "warning")) {
[17:03:03.584]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.584]                         if (muffled) 
[17:03:03.584]                           invokeRestart("muffleWarning")
[17:03:03.584]                       }
[17:03:03.584]                       else if (inherits(cond, "condition")) {
[17:03:03.584]                         if (!is.null(pattern)) {
[17:03:03.584]                           computeRestarts <- base::computeRestarts
[17:03:03.584]                           grepl <- base::grepl
[17:03:03.584]                           restarts <- computeRestarts(cond)
[17:03:03.584]                           for (restart in restarts) {
[17:03:03.584]                             name <- restart$name
[17:03:03.584]                             if (is.null(name)) 
[17:03:03.584]                               next
[17:03:03.584]                             if (!grepl(pattern, name)) 
[17:03:03.584]                               next
[17:03:03.584]                             invokeRestart(restart)
[17:03:03.584]                             muffled <- TRUE
[17:03:03.584]                             break
[17:03:03.584]                           }
[17:03:03.584]                         }
[17:03:03.584]                       }
[17:03:03.584]                       invisible(muffled)
[17:03:03.584]                     }
[17:03:03.584]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.584]                   }
[17:03:03.584]                 }
[17:03:03.584]             }
[17:03:03.584]         }))
[17:03:03.584]     }, error = function(ex) {
[17:03:03.584]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.584]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.584]                 ...future.rng), started = ...future.startTime, 
[17:03:03.584]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.584]             version = "1.8"), class = "FutureResult")
[17:03:03.584]     }, finally = {
[17:03:03.584]         if (!identical(...future.workdir, getwd())) 
[17:03:03.584]             setwd(...future.workdir)
[17:03:03.584]         {
[17:03:03.584]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.584]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.584]             }
[17:03:03.584]             base::options(...future.oldOptions)
[17:03:03.584]             if (.Platform$OS.type == "windows") {
[17:03:03.584]                 old_names <- names(...future.oldEnvVars)
[17:03:03.584]                 envs <- base::Sys.getenv()
[17:03:03.584]                 names <- names(envs)
[17:03:03.584]                 common <- intersect(names, old_names)
[17:03:03.584]                 added <- setdiff(names, old_names)
[17:03:03.584]                 removed <- setdiff(old_names, names)
[17:03:03.584]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.584]                   envs[common]]
[17:03:03.584]                 NAMES <- toupper(changed)
[17:03:03.584]                 args <- list()
[17:03:03.584]                 for (kk in seq_along(NAMES)) {
[17:03:03.584]                   name <- changed[[kk]]
[17:03:03.584]                   NAME <- NAMES[[kk]]
[17:03:03.584]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.584]                     next
[17:03:03.584]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.584]                 }
[17:03:03.584]                 NAMES <- toupper(added)
[17:03:03.584]                 for (kk in seq_along(NAMES)) {
[17:03:03.584]                   name <- added[[kk]]
[17:03:03.584]                   NAME <- NAMES[[kk]]
[17:03:03.584]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.584]                     next
[17:03:03.584]                   args[[name]] <- ""
[17:03:03.584]                 }
[17:03:03.584]                 NAMES <- toupper(removed)
[17:03:03.584]                 for (kk in seq_along(NAMES)) {
[17:03:03.584]                   name <- removed[[kk]]
[17:03:03.584]                   NAME <- NAMES[[kk]]
[17:03:03.584]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.584]                     next
[17:03:03.584]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.584]                 }
[17:03:03.584]                 if (length(args) > 0) 
[17:03:03.584]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.584]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.584]             }
[17:03:03.584]             else {
[17:03:03.584]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.584]             }
[17:03:03.584]             {
[17:03:03.584]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.584]                   0L) {
[17:03:03.584]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.584]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.584]                   base::options(opts)
[17:03:03.584]                 }
[17:03:03.584]                 {
[17:03:03.584]                   {
[17:03:03.584]                     NULL
[17:03:03.584]                     RNGkind("Mersenne-Twister")
[17:03:03.584]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:03.584]                       inherits = FALSE)
[17:03:03.584]                   }
[17:03:03.584]                   options(future.plan = NULL)
[17:03:03.584]                   if (is.na(NA_character_)) 
[17:03:03.584]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.584]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.584]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.584]                     .init = FALSE)
[17:03:03.584]                 }
[17:03:03.584]             }
[17:03:03.584]         }
[17:03:03.584]     })
[17:03:03.584]     if (TRUE) {
[17:03:03.584]         base::sink(type = "output", split = FALSE)
[17:03:03.584]         if (TRUE) {
[17:03:03.584]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.584]         }
[17:03:03.584]         else {
[17:03:03.584]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.584]         }
[17:03:03.584]         base::close(...future.stdout)
[17:03:03.584]         ...future.stdout <- NULL
[17:03:03.584]     }
[17:03:03.584]     ...future.result$conditions <- ...future.conditions
[17:03:03.584]     ...future.result$finished <- base::Sys.time()
[17:03:03.584]     ...future.result
[17:03:03.584] }
[17:03:03.585] assign_globals() ...
[17:03:03.585] List of 1
[17:03:03.585]  $ ii: int 4
[17:03:03.585]  - attr(*, "where")=List of 1
[17:03:03.585]   ..$ ii:<environment: R_EmptyEnv> 
[17:03:03.585]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:03.585]  - attr(*, "resolved")= logi FALSE
[17:03:03.585]  - attr(*, "total_size")= num 56
[17:03:03.587] - copied ‘ii’ to environment
[17:03:03.587] assign_globals() ... done
[17:03:03.588] plan(): Setting new future strategy stack:
[17:03:03.588] List of future strategies:
[17:03:03.588] 1. sequential:
[17:03:03.588]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.588]    - tweaked: FALSE
[17:03:03.588]    - call: NULL
[17:03:03.588] plan(): nbrOfWorkers() = 1
[17:03:03.589] plan(): Setting new future strategy stack:
[17:03:03.589] List of future strategies:
[17:03:03.589] 1. multicore:
[17:03:03.589]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.589]    - tweaked: FALSE
[17:03:03.589]    - call: plan(multicore)
[17:03:03.593] plan(): nbrOfWorkers() = 1
[17:03:03.593] SequentialFuture started (and completed)
 - Resolving 4 multicore futures
*** multicore(..., globals = TRUE) and errors
[17:03:03.596] getGlobalsAndPackages() ...
[17:03:03.597] Searching for globals...
[17:03:03.598] - globals found: [2] ‘{’, ‘stop’
[17:03:03.598] Searching for globals ... DONE
[17:03:03.598] Resolving globals: FALSE
[17:03:03.598] 
[17:03:03.598] 
[17:03:03.598] getGlobalsAndPackages() ... DONE
[17:03:03.599] Packages needed by the future expression (n = 0): <none>
[17:03:03.599] Packages needed by future strategies (n = 0): <none>
[17:03:03.599] {
[17:03:03.599]     {
[17:03:03.599]         {
[17:03:03.599]             ...future.startTime <- base::Sys.time()
[17:03:03.599]             {
[17:03:03.599]                 {
[17:03:03.599]                   {
[17:03:03.599]                     base::local({
[17:03:03.599]                       has_future <- base::requireNamespace("future", 
[17:03:03.599]                         quietly = TRUE)
[17:03:03.599]                       if (has_future) {
[17:03:03.599]                         ns <- base::getNamespace("future")
[17:03:03.599]                         version <- ns[[".package"]][["version"]]
[17:03:03.599]                         if (is.null(version)) 
[17:03:03.599]                           version <- utils::packageVersion("future")
[17:03:03.599]                       }
[17:03:03.599]                       else {
[17:03:03.599]                         version <- NULL
[17:03:03.599]                       }
[17:03:03.599]                       if (!has_future || version < "1.8.0") {
[17:03:03.599]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.599]                           "", base::R.version$version.string), 
[17:03:03.599]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:03.599]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.599]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.599]                             "release", "version")], collapse = " "), 
[17:03:03.599]                           hostname = base::Sys.info()[["nodename"]])
[17:03:03.599]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.599]                           info)
[17:03:03.599]                         info <- base::paste(info, collapse = "; ")
[17:03:03.599]                         if (!has_future) {
[17:03:03.599]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.599]                             info)
[17:03:03.599]                         }
[17:03:03.599]                         else {
[17:03:03.599]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.599]                             info, version)
[17:03:03.599]                         }
[17:03:03.599]                         base::stop(msg)
[17:03:03.599]                       }
[17:03:03.599]                     })
[17:03:03.599]                   }
[17:03:03.599]                   ...future.strategy.old <- future::plan("list")
[17:03:03.599]                   options(future.plan = NULL)
[17:03:03.599]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.599]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.599]                 }
[17:03:03.599]                 ...future.workdir <- getwd()
[17:03:03.599]             }
[17:03:03.599]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.599]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.599]         }
[17:03:03.599]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.599]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.599]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.599]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.599]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.599]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.599]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.599]             base::names(...future.oldOptions))
[17:03:03.599]     }
[17:03:03.599]     if (FALSE) {
[17:03:03.599]     }
[17:03:03.599]     else {
[17:03:03.599]         if (TRUE) {
[17:03:03.599]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.599]                 open = "w")
[17:03:03.599]         }
[17:03:03.599]         else {
[17:03:03.599]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.599]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.599]         }
[17:03:03.599]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.599]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.599]             base::sink(type = "output", split = FALSE)
[17:03:03.599]             base::close(...future.stdout)
[17:03:03.599]         }, add = TRUE)
[17:03:03.599]     }
[17:03:03.599]     ...future.frame <- base::sys.nframe()
[17:03:03.599]     ...future.conditions <- base::list()
[17:03:03.599]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.599]     if (FALSE) {
[17:03:03.599]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.599]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.599]     }
[17:03:03.599]     ...future.result <- base::tryCatch({
[17:03:03.599]         base::withCallingHandlers({
[17:03:03.599]             ...future.value <- base::withVisible(base::local({
[17:03:03.599]                 stop("Whoops!")
[17:03:03.599]                 1
[17:03:03.599]             }))
[17:03:03.599]             future::FutureResult(value = ...future.value$value, 
[17:03:03.599]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.599]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.599]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.599]                     ...future.globalenv.names))
[17:03:03.599]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.599]         }, condition = base::local({
[17:03:03.599]             c <- base::c
[17:03:03.599]             inherits <- base::inherits
[17:03:03.599]             invokeRestart <- base::invokeRestart
[17:03:03.599]             length <- base::length
[17:03:03.599]             list <- base::list
[17:03:03.599]             seq.int <- base::seq.int
[17:03:03.599]             signalCondition <- base::signalCondition
[17:03:03.599]             sys.calls <- base::sys.calls
[17:03:03.599]             `[[` <- base::`[[`
[17:03:03.599]             `+` <- base::`+`
[17:03:03.599]             `<<-` <- base::`<<-`
[17:03:03.599]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.599]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.599]                   3L)]
[17:03:03.599]             }
[17:03:03.599]             function(cond) {
[17:03:03.599]                 is_error <- inherits(cond, "error")
[17:03:03.599]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.599]                   NULL)
[17:03:03.599]                 if (is_error) {
[17:03:03.599]                   sessionInformation <- function() {
[17:03:03.599]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.599]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.599]                       search = base::search(), system = base::Sys.info())
[17:03:03.599]                   }
[17:03:03.599]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.599]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.599]                     cond$call), session = sessionInformation(), 
[17:03:03.599]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.599]                   signalCondition(cond)
[17:03:03.599]                 }
[17:03:03.599]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.599]                 "immediateCondition"))) {
[17:03:03.599]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.599]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.599]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.599]                   if (TRUE && !signal) {
[17:03:03.599]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.599]                     {
[17:03:03.599]                       inherits <- base::inherits
[17:03:03.599]                       invokeRestart <- base::invokeRestart
[17:03:03.599]                       is.null <- base::is.null
[17:03:03.599]                       muffled <- FALSE
[17:03:03.599]                       if (inherits(cond, "message")) {
[17:03:03.599]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.599]                         if (muffled) 
[17:03:03.599]                           invokeRestart("muffleMessage")
[17:03:03.599]                       }
[17:03:03.599]                       else if (inherits(cond, "warning")) {
[17:03:03.599]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.599]                         if (muffled) 
[17:03:03.599]                           invokeRestart("muffleWarning")
[17:03:03.599]                       }
[17:03:03.599]                       else if (inherits(cond, "condition")) {
[17:03:03.599]                         if (!is.null(pattern)) {
[17:03:03.599]                           computeRestarts <- base::computeRestarts
[17:03:03.599]                           grepl <- base::grepl
[17:03:03.599]                           restarts <- computeRestarts(cond)
[17:03:03.599]                           for (restart in restarts) {
[17:03:03.599]                             name <- restart$name
[17:03:03.599]                             if (is.null(name)) 
[17:03:03.599]                               next
[17:03:03.599]                             if (!grepl(pattern, name)) 
[17:03:03.599]                               next
[17:03:03.599]                             invokeRestart(restart)
[17:03:03.599]                             muffled <- TRUE
[17:03:03.599]                             break
[17:03:03.599]                           }
[17:03:03.599]                         }
[17:03:03.599]                       }
[17:03:03.599]                       invisible(muffled)
[17:03:03.599]                     }
[17:03:03.599]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.599]                   }
[17:03:03.599]                 }
[17:03:03.599]                 else {
[17:03:03.599]                   if (TRUE) {
[17:03:03.599]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.599]                     {
[17:03:03.599]                       inherits <- base::inherits
[17:03:03.599]                       invokeRestart <- base::invokeRestart
[17:03:03.599]                       is.null <- base::is.null
[17:03:03.599]                       muffled <- FALSE
[17:03:03.599]                       if (inherits(cond, "message")) {
[17:03:03.599]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.599]                         if (muffled) 
[17:03:03.599]                           invokeRestart("muffleMessage")
[17:03:03.599]                       }
[17:03:03.599]                       else if (inherits(cond, "warning")) {
[17:03:03.599]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.599]                         if (muffled) 
[17:03:03.599]                           invokeRestart("muffleWarning")
[17:03:03.599]                       }
[17:03:03.599]                       else if (inherits(cond, "condition")) {
[17:03:03.599]                         if (!is.null(pattern)) {
[17:03:03.599]                           computeRestarts <- base::computeRestarts
[17:03:03.599]                           grepl <- base::grepl
[17:03:03.599]                           restarts <- computeRestarts(cond)
[17:03:03.599]                           for (restart in restarts) {
[17:03:03.599]                             name <- restart$name
[17:03:03.599]                             if (is.null(name)) 
[17:03:03.599]                               next
[17:03:03.599]                             if (!grepl(pattern, name)) 
[17:03:03.599]                               next
[17:03:03.599]                             invokeRestart(restart)
[17:03:03.599]                             muffled <- TRUE
[17:03:03.599]                             break
[17:03:03.599]                           }
[17:03:03.599]                         }
[17:03:03.599]                       }
[17:03:03.599]                       invisible(muffled)
[17:03:03.599]                     }
[17:03:03.599]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.599]                   }
[17:03:03.599]                 }
[17:03:03.599]             }
[17:03:03.599]         }))
[17:03:03.599]     }, error = function(ex) {
[17:03:03.599]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.599]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.599]                 ...future.rng), started = ...future.startTime, 
[17:03:03.599]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.599]             version = "1.8"), class = "FutureResult")
[17:03:03.599]     }, finally = {
[17:03:03.599]         if (!identical(...future.workdir, getwd())) 
[17:03:03.599]             setwd(...future.workdir)
[17:03:03.599]         {
[17:03:03.599]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.599]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.599]             }
[17:03:03.599]             base::options(...future.oldOptions)
[17:03:03.599]             if (.Platform$OS.type == "windows") {
[17:03:03.599]                 old_names <- names(...future.oldEnvVars)
[17:03:03.599]                 envs <- base::Sys.getenv()
[17:03:03.599]                 names <- names(envs)
[17:03:03.599]                 common <- intersect(names, old_names)
[17:03:03.599]                 added <- setdiff(names, old_names)
[17:03:03.599]                 removed <- setdiff(old_names, names)
[17:03:03.599]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.599]                   envs[common]]
[17:03:03.599]                 NAMES <- toupper(changed)
[17:03:03.599]                 args <- list()
[17:03:03.599]                 for (kk in seq_along(NAMES)) {
[17:03:03.599]                   name <- changed[[kk]]
[17:03:03.599]                   NAME <- NAMES[[kk]]
[17:03:03.599]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.599]                     next
[17:03:03.599]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.599]                 }
[17:03:03.599]                 NAMES <- toupper(added)
[17:03:03.599]                 for (kk in seq_along(NAMES)) {
[17:03:03.599]                   name <- added[[kk]]
[17:03:03.599]                   NAME <- NAMES[[kk]]
[17:03:03.599]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.599]                     next
[17:03:03.599]                   args[[name]] <- ""
[17:03:03.599]                 }
[17:03:03.599]                 NAMES <- toupper(removed)
[17:03:03.599]                 for (kk in seq_along(NAMES)) {
[17:03:03.599]                   name <- removed[[kk]]
[17:03:03.599]                   NAME <- NAMES[[kk]]
[17:03:03.599]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.599]                     next
[17:03:03.599]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.599]                 }
[17:03:03.599]                 if (length(args) > 0) 
[17:03:03.599]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.599]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.599]             }
[17:03:03.599]             else {
[17:03:03.599]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.599]             }
[17:03:03.599]             {
[17:03:03.599]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.599]                   0L) {
[17:03:03.599]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.599]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.599]                   base::options(opts)
[17:03:03.599]                 }
[17:03:03.599]                 {
[17:03:03.599]                   {
[17:03:03.599]                     NULL
[17:03:03.599]                     RNGkind("Mersenne-Twister")
[17:03:03.599]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:03.599]                       inherits = FALSE)
[17:03:03.599]                   }
[17:03:03.599]                   options(future.plan = NULL)
[17:03:03.599]                   if (is.na(NA_character_)) 
[17:03:03.599]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.599]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.599]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.599]                     .init = FALSE)
[17:03:03.599]                 }
[17:03:03.599]             }
[17:03:03.599]         }
[17:03:03.599]     })
[17:03:03.599]     if (TRUE) {
[17:03:03.599]         base::sink(type = "output", split = FALSE)
[17:03:03.599]         if (TRUE) {
[17:03:03.599]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.599]         }
[17:03:03.599]         else {
[17:03:03.599]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.599]         }
[17:03:03.599]         base::close(...future.stdout)
[17:03:03.599]         ...future.stdout <- NULL
[17:03:03.599]     }
[17:03:03.599]     ...future.result$conditions <- ...future.conditions
[17:03:03.599]     ...future.result$finished <- base::Sys.time()
[17:03:03.599]     ...future.result
[17:03:03.599] }
[17:03:03.601] plan(): Setting new future strategy stack:
[17:03:03.601] List of future strategies:
[17:03:03.601] 1. sequential:
[17:03:03.601]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.601]    - tweaked: FALSE
[17:03:03.601]    - call: NULL
[17:03:03.601] plan(): nbrOfWorkers() = 1
[17:03:03.602] plan(): Setting new future strategy stack:
[17:03:03.602] List of future strategies:
[17:03:03.602] 1. multicore:
[17:03:03.602]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.602]    - tweaked: FALSE
[17:03:03.602]    - call: plan(multicore)
[17:03:03.606] plan(): nbrOfWorkers() = 1
[17:03:03.606] SequentialFuture started (and completed)
[17:03:03.606] signalConditions() ...
[17:03:03.606]  - include = ‘immediateCondition’
[17:03:03.606]  - exclude = 
[17:03:03.606]  - resignal = FALSE
[17:03:03.607]  - Number of conditions: 1
[17:03:03.607] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: 07dd274d-66ac-c50c-eb90-f530485edd79
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:03.607] signalConditions() ...
[17:03:03.607]  - include = ‘immediateCondition’
[17:03:03.607]  - exclude = 
[17:03:03.608]  - resignal = FALSE
[17:03:03.608]  - Number of conditions: 1
[17:03:03.608] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:03:03.608] signalConditions() ...
[17:03:03.608]  - include = ‘immediateCondition’
[17:03:03.608]  - exclude = 
[17:03:03.608]  - resignal = FALSE
[17:03:03.608]  - Number of conditions: 1
[17:03:03.608] signalConditions() ... done
[17:03:03.609] Future state: ‘finished’
[17:03:03.609] signalConditions() ...
[17:03:03.609]  - include = ‘condition’
[17:03:03.609]  - exclude = ‘immediateCondition’
[17:03:03.609]  - resignal = TRUE
[17:03:03.609]  - Number of conditions: 1
[17:03:03.609]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:03:03.609] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:03:03.610] signalConditions() ...
[17:03:03.610]  - include = ‘immediateCondition’
[17:03:03.610]  - exclude = 
[17:03:03.610]  - resignal = FALSE
[17:03:03.610]  - Number of conditions: 1
[17:03:03.610] signalConditions() ... done
[17:03:03.610] Future state: ‘finished’
[17:03:03.610] signalConditions() ...
[17:03:03.610]  - include = ‘condition’
[17:03:03.610]  - exclude = ‘immediateCondition’
[17:03:03.610]  - resignal = TRUE
[17:03:03.611]  - Number of conditions: 1
[17:03:03.611]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:03:03.611] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:03:03.614] getGlobalsAndPackages() ...
[17:03:03.614] Searching for globals...
[17:03:03.615] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[17:03:03.616] Searching for globals ... DONE
[17:03:03.616] Resolving globals: FALSE
[17:03:03.616] 
[17:03:03.616] 
[17:03:03.616] getGlobalsAndPackages() ... DONE
[17:03:03.617] Packages needed by the future expression (n = 0): <none>
[17:03:03.617] Packages needed by future strategies (n = 0): <none>
[17:03:03.617] {
[17:03:03.617]     {
[17:03:03.617]         {
[17:03:03.617]             ...future.startTime <- base::Sys.time()
[17:03:03.617]             {
[17:03:03.617]                 {
[17:03:03.617]                   {
[17:03:03.617]                     base::local({
[17:03:03.617]                       has_future <- base::requireNamespace("future", 
[17:03:03.617]                         quietly = TRUE)
[17:03:03.617]                       if (has_future) {
[17:03:03.617]                         ns <- base::getNamespace("future")
[17:03:03.617]                         version <- ns[[".package"]][["version"]]
[17:03:03.617]                         if (is.null(version)) 
[17:03:03.617]                           version <- utils::packageVersion("future")
[17:03:03.617]                       }
[17:03:03.617]                       else {
[17:03:03.617]                         version <- NULL
[17:03:03.617]                       }
[17:03:03.617]                       if (!has_future || version < "1.8.0") {
[17:03:03.617]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.617]                           "", base::R.version$version.string), 
[17:03:03.617]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:03.617]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.617]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.617]                             "release", "version")], collapse = " "), 
[17:03:03.617]                           hostname = base::Sys.info()[["nodename"]])
[17:03:03.617]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.617]                           info)
[17:03:03.617]                         info <- base::paste(info, collapse = "; ")
[17:03:03.617]                         if (!has_future) {
[17:03:03.617]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.617]                             info)
[17:03:03.617]                         }
[17:03:03.617]                         else {
[17:03:03.617]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.617]                             info, version)
[17:03:03.617]                         }
[17:03:03.617]                         base::stop(msg)
[17:03:03.617]                       }
[17:03:03.617]                     })
[17:03:03.617]                   }
[17:03:03.617]                   ...future.strategy.old <- future::plan("list")
[17:03:03.617]                   options(future.plan = NULL)
[17:03:03.617]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.617]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.617]                 }
[17:03:03.617]                 ...future.workdir <- getwd()
[17:03:03.617]             }
[17:03:03.617]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.617]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.617]         }
[17:03:03.617]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.617]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.617]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.617]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.617]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.617]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.617]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.617]             base::names(...future.oldOptions))
[17:03:03.617]     }
[17:03:03.617]     if (FALSE) {
[17:03:03.617]     }
[17:03:03.617]     else {
[17:03:03.617]         if (TRUE) {
[17:03:03.617]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.617]                 open = "w")
[17:03:03.617]         }
[17:03:03.617]         else {
[17:03:03.617]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.617]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.617]         }
[17:03:03.617]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.617]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.617]             base::sink(type = "output", split = FALSE)
[17:03:03.617]             base::close(...future.stdout)
[17:03:03.617]         }, add = TRUE)
[17:03:03.617]     }
[17:03:03.617]     ...future.frame <- base::sys.nframe()
[17:03:03.617]     ...future.conditions <- base::list()
[17:03:03.617]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.617]     if (FALSE) {
[17:03:03.617]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.617]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.617]     }
[17:03:03.617]     ...future.result <- base::tryCatch({
[17:03:03.617]         base::withCallingHandlers({
[17:03:03.617]             ...future.value <- base::withVisible(base::local({
[17:03:03.617]                 stop(structure(list(message = "boom"), class = c("MyError", 
[17:03:03.617]                   "error", "condition")))
[17:03:03.617]             }))
[17:03:03.617]             future::FutureResult(value = ...future.value$value, 
[17:03:03.617]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.617]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.617]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.617]                     ...future.globalenv.names))
[17:03:03.617]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.617]         }, condition = base::local({
[17:03:03.617]             c <- base::c
[17:03:03.617]             inherits <- base::inherits
[17:03:03.617]             invokeRestart <- base::invokeRestart
[17:03:03.617]             length <- base::length
[17:03:03.617]             list <- base::list
[17:03:03.617]             seq.int <- base::seq.int
[17:03:03.617]             signalCondition <- base::signalCondition
[17:03:03.617]             sys.calls <- base::sys.calls
[17:03:03.617]             `[[` <- base::`[[`
[17:03:03.617]             `+` <- base::`+`
[17:03:03.617]             `<<-` <- base::`<<-`
[17:03:03.617]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.617]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.617]                   3L)]
[17:03:03.617]             }
[17:03:03.617]             function(cond) {
[17:03:03.617]                 is_error <- inherits(cond, "error")
[17:03:03.617]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.617]                   NULL)
[17:03:03.617]                 if (is_error) {
[17:03:03.617]                   sessionInformation <- function() {
[17:03:03.617]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.617]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.617]                       search = base::search(), system = base::Sys.info())
[17:03:03.617]                   }
[17:03:03.617]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.617]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.617]                     cond$call), session = sessionInformation(), 
[17:03:03.617]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.617]                   signalCondition(cond)
[17:03:03.617]                 }
[17:03:03.617]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.617]                 "immediateCondition"))) {
[17:03:03.617]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.617]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.617]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.617]                   if (TRUE && !signal) {
[17:03:03.617]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.617]                     {
[17:03:03.617]                       inherits <- base::inherits
[17:03:03.617]                       invokeRestart <- base::invokeRestart
[17:03:03.617]                       is.null <- base::is.null
[17:03:03.617]                       muffled <- FALSE
[17:03:03.617]                       if (inherits(cond, "message")) {
[17:03:03.617]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.617]                         if (muffled) 
[17:03:03.617]                           invokeRestart("muffleMessage")
[17:03:03.617]                       }
[17:03:03.617]                       else if (inherits(cond, "warning")) {
[17:03:03.617]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.617]                         if (muffled) 
[17:03:03.617]                           invokeRestart("muffleWarning")
[17:03:03.617]                       }
[17:03:03.617]                       else if (inherits(cond, "condition")) {
[17:03:03.617]                         if (!is.null(pattern)) {
[17:03:03.617]                           computeRestarts <- base::computeRestarts
[17:03:03.617]                           grepl <- base::grepl
[17:03:03.617]                           restarts <- computeRestarts(cond)
[17:03:03.617]                           for (restart in restarts) {
[17:03:03.617]                             name <- restart$name
[17:03:03.617]                             if (is.null(name)) 
[17:03:03.617]                               next
[17:03:03.617]                             if (!grepl(pattern, name)) 
[17:03:03.617]                               next
[17:03:03.617]                             invokeRestart(restart)
[17:03:03.617]                             muffled <- TRUE
[17:03:03.617]                             break
[17:03:03.617]                           }
[17:03:03.617]                         }
[17:03:03.617]                       }
[17:03:03.617]                       invisible(muffled)
[17:03:03.617]                     }
[17:03:03.617]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.617]                   }
[17:03:03.617]                 }
[17:03:03.617]                 else {
[17:03:03.617]                   if (TRUE) {
[17:03:03.617]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.617]                     {
[17:03:03.617]                       inherits <- base::inherits
[17:03:03.617]                       invokeRestart <- base::invokeRestart
[17:03:03.617]                       is.null <- base::is.null
[17:03:03.617]                       muffled <- FALSE
[17:03:03.617]                       if (inherits(cond, "message")) {
[17:03:03.617]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.617]                         if (muffled) 
[17:03:03.617]                           invokeRestart("muffleMessage")
[17:03:03.617]                       }
[17:03:03.617]                       else if (inherits(cond, "warning")) {
[17:03:03.617]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.617]                         if (muffled) 
[17:03:03.617]                           invokeRestart("muffleWarning")
[17:03:03.617]                       }
[17:03:03.617]                       else if (inherits(cond, "condition")) {
[17:03:03.617]                         if (!is.null(pattern)) {
[17:03:03.617]                           computeRestarts <- base::computeRestarts
[17:03:03.617]                           grepl <- base::grepl
[17:03:03.617]                           restarts <- computeRestarts(cond)
[17:03:03.617]                           for (restart in restarts) {
[17:03:03.617]                             name <- restart$name
[17:03:03.617]                             if (is.null(name)) 
[17:03:03.617]                               next
[17:03:03.617]                             if (!grepl(pattern, name)) 
[17:03:03.617]                               next
[17:03:03.617]                             invokeRestart(restart)
[17:03:03.617]                             muffled <- TRUE
[17:03:03.617]                             break
[17:03:03.617]                           }
[17:03:03.617]                         }
[17:03:03.617]                       }
[17:03:03.617]                       invisible(muffled)
[17:03:03.617]                     }
[17:03:03.617]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.617]                   }
[17:03:03.617]                 }
[17:03:03.617]             }
[17:03:03.617]         }))
[17:03:03.617]     }, error = function(ex) {
[17:03:03.617]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.617]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.617]                 ...future.rng), started = ...future.startTime, 
[17:03:03.617]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.617]             version = "1.8"), class = "FutureResult")
[17:03:03.617]     }, finally = {
[17:03:03.617]         if (!identical(...future.workdir, getwd())) 
[17:03:03.617]             setwd(...future.workdir)
[17:03:03.617]         {
[17:03:03.617]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.617]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.617]             }
[17:03:03.617]             base::options(...future.oldOptions)
[17:03:03.617]             if (.Platform$OS.type == "windows") {
[17:03:03.617]                 old_names <- names(...future.oldEnvVars)
[17:03:03.617]                 envs <- base::Sys.getenv()
[17:03:03.617]                 names <- names(envs)
[17:03:03.617]                 common <- intersect(names, old_names)
[17:03:03.617]                 added <- setdiff(names, old_names)
[17:03:03.617]                 removed <- setdiff(old_names, names)
[17:03:03.617]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.617]                   envs[common]]
[17:03:03.617]                 NAMES <- toupper(changed)
[17:03:03.617]                 args <- list()
[17:03:03.617]                 for (kk in seq_along(NAMES)) {
[17:03:03.617]                   name <- changed[[kk]]
[17:03:03.617]                   NAME <- NAMES[[kk]]
[17:03:03.617]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.617]                     next
[17:03:03.617]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.617]                 }
[17:03:03.617]                 NAMES <- toupper(added)
[17:03:03.617]                 for (kk in seq_along(NAMES)) {
[17:03:03.617]                   name <- added[[kk]]
[17:03:03.617]                   NAME <- NAMES[[kk]]
[17:03:03.617]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.617]                     next
[17:03:03.617]                   args[[name]] <- ""
[17:03:03.617]                 }
[17:03:03.617]                 NAMES <- toupper(removed)
[17:03:03.617]                 for (kk in seq_along(NAMES)) {
[17:03:03.617]                   name <- removed[[kk]]
[17:03:03.617]                   NAME <- NAMES[[kk]]
[17:03:03.617]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.617]                     next
[17:03:03.617]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.617]                 }
[17:03:03.617]                 if (length(args) > 0) 
[17:03:03.617]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.617]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.617]             }
[17:03:03.617]             else {
[17:03:03.617]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.617]             }
[17:03:03.617]             {
[17:03:03.617]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.617]                   0L) {
[17:03:03.617]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.617]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.617]                   base::options(opts)
[17:03:03.617]                 }
[17:03:03.617]                 {
[17:03:03.617]                   {
[17:03:03.617]                     NULL
[17:03:03.617]                     RNGkind("Mersenne-Twister")
[17:03:03.617]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:03.617]                       inherits = FALSE)
[17:03:03.617]                   }
[17:03:03.617]                   options(future.plan = NULL)
[17:03:03.617]                   if (is.na(NA_character_)) 
[17:03:03.617]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.617]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.617]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.617]                     .init = FALSE)
[17:03:03.617]                 }
[17:03:03.617]             }
[17:03:03.617]         }
[17:03:03.617]     })
[17:03:03.617]     if (TRUE) {
[17:03:03.617]         base::sink(type = "output", split = FALSE)
[17:03:03.617]         if (TRUE) {
[17:03:03.617]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.617]         }
[17:03:03.617]         else {
[17:03:03.617]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.617]         }
[17:03:03.617]         base::close(...future.stdout)
[17:03:03.617]         ...future.stdout <- NULL
[17:03:03.617]     }
[17:03:03.617]     ...future.result$conditions <- ...future.conditions
[17:03:03.617]     ...future.result$finished <- base::Sys.time()
[17:03:03.617]     ...future.result
[17:03:03.617] }
[17:03:03.619] plan(): Setting new future strategy stack:
[17:03:03.619] List of future strategies:
[17:03:03.619] 1. sequential:
[17:03:03.619]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.619]    - tweaked: FALSE
[17:03:03.619]    - call: NULL
[17:03:03.619] plan(): nbrOfWorkers() = 1
[17:03:03.620] plan(): Setting new future strategy stack:
[17:03:03.620] List of future strategies:
[17:03:03.620] 1. multicore:
[17:03:03.620]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.620]    - tweaked: FALSE
[17:03:03.620]    - call: plan(multicore)
[17:03:03.626] plan(): nbrOfWorkers() = 1
[17:03:03.626] SequentialFuture started (and completed)
[17:03:03.626] signalConditions() ...
[17:03:03.626]  - include = ‘immediateCondition’
[17:03:03.626]  - exclude = 
[17:03:03.626]  - resignal = FALSE
[17:03:03.626]  - Number of conditions: 1
[17:03:03.626] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘MyError’
Early signaling: FALSE
Owner process: 07dd274d-66ac-c50c-eb90-f530485edd79
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:03.627] signalConditions() ...
[17:03:03.627]  - include = ‘immediateCondition’
[17:03:03.627]  - exclude = 
[17:03:03.627]  - resignal = FALSE
[17:03:03.627]  - Number of conditions: 1
[17:03:03.627] signalConditions() ... done
<MyError: boom>
[17:03:03.628] signalConditions() ...
[17:03:03.628]  - include = ‘immediateCondition’
[17:03:03.628]  - exclude = 
[17:03:03.628]  - resignal = FALSE
[17:03:03.628]  - Number of conditions: 1
[17:03:03.628] signalConditions() ... done
[17:03:03.628] Future state: ‘finished’
[17:03:03.628] signalConditions() ...
[17:03:03.628]  - include = ‘condition’
[17:03:03.628]  - exclude = ‘immediateCondition’
[17:03:03.629]  - resignal = TRUE
[17:03:03.629]  - Number of conditions: 1
[17:03:03.629]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[17:03:03.629] signalConditions() ... done
*** multicore(..., workers = 1L) ...
[17:03:03.629] getGlobalsAndPackages() ...
[17:03:03.629] Searching for globals...
[17:03:03.630] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[17:03:03.630] Searching for globals ... DONE
[17:03:03.630] Resolving globals: FALSE
[17:03:03.631] The total size of the 2 globals is 112 bytes (112 bytes)
[17:03:03.631] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[17:03:03.631] - globals: [2] ‘a’, ‘b’
[17:03:03.631] 
[17:03:03.631] getGlobalsAndPackages() ... DONE
[17:03:03.632] Packages needed by the future expression (n = 0): <none>
[17:03:03.632] Packages needed by future strategies (n = 0): <none>
[17:03:03.632] {
[17:03:03.632]     {
[17:03:03.632]         {
[17:03:03.632]             ...future.startTime <- base::Sys.time()
[17:03:03.632]             {
[17:03:03.632]                 {
[17:03:03.632]                   {
[17:03:03.632]                     base::local({
[17:03:03.632]                       has_future <- base::requireNamespace("future", 
[17:03:03.632]                         quietly = TRUE)
[17:03:03.632]                       if (has_future) {
[17:03:03.632]                         ns <- base::getNamespace("future")
[17:03:03.632]                         version <- ns[[".package"]][["version"]]
[17:03:03.632]                         if (is.null(version)) 
[17:03:03.632]                           version <- utils::packageVersion("future")
[17:03:03.632]                       }
[17:03:03.632]                       else {
[17:03:03.632]                         version <- NULL
[17:03:03.632]                       }
[17:03:03.632]                       if (!has_future || version < "1.8.0") {
[17:03:03.632]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.632]                           "", base::R.version$version.string), 
[17:03:03.632]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:03.632]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.632]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.632]                             "release", "version")], collapse = " "), 
[17:03:03.632]                           hostname = base::Sys.info()[["nodename"]])
[17:03:03.632]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.632]                           info)
[17:03:03.632]                         info <- base::paste(info, collapse = "; ")
[17:03:03.632]                         if (!has_future) {
[17:03:03.632]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.632]                             info)
[17:03:03.632]                         }
[17:03:03.632]                         else {
[17:03:03.632]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.632]                             info, version)
[17:03:03.632]                         }
[17:03:03.632]                         base::stop(msg)
[17:03:03.632]                       }
[17:03:03.632]                     })
[17:03:03.632]                   }
[17:03:03.632]                   ...future.strategy.old <- future::plan("list")
[17:03:03.632]                   options(future.plan = NULL)
[17:03:03.632]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.632]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.632]                 }
[17:03:03.632]                 ...future.workdir <- getwd()
[17:03:03.632]             }
[17:03:03.632]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.632]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.632]         }
[17:03:03.632]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.632]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.632]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.632]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.632]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.632]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.632]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.632]             base::names(...future.oldOptions))
[17:03:03.632]     }
[17:03:03.632]     if (FALSE) {
[17:03:03.632]     }
[17:03:03.632]     else {
[17:03:03.632]         if (TRUE) {
[17:03:03.632]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.632]                 open = "w")
[17:03:03.632]         }
[17:03:03.632]         else {
[17:03:03.632]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.632]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.632]         }
[17:03:03.632]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.632]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.632]             base::sink(type = "output", split = FALSE)
[17:03:03.632]             base::close(...future.stdout)
[17:03:03.632]         }, add = TRUE)
[17:03:03.632]     }
[17:03:03.632]     ...future.frame <- base::sys.nframe()
[17:03:03.632]     ...future.conditions <- base::list()
[17:03:03.632]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.632]     if (FALSE) {
[17:03:03.632]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.632]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.632]     }
[17:03:03.632]     ...future.result <- base::tryCatch({
[17:03:03.632]         base::withCallingHandlers({
[17:03:03.632]             ...future.value <- base::withVisible(base::local({
[17:03:03.632]                 a * b
[17:03:03.632]             }))
[17:03:03.632]             future::FutureResult(value = ...future.value$value, 
[17:03:03.632]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.632]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.632]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.632]                     ...future.globalenv.names))
[17:03:03.632]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.632]         }, condition = base::local({
[17:03:03.632]             c <- base::c
[17:03:03.632]             inherits <- base::inherits
[17:03:03.632]             invokeRestart <- base::invokeRestart
[17:03:03.632]             length <- base::length
[17:03:03.632]             list <- base::list
[17:03:03.632]             seq.int <- base::seq.int
[17:03:03.632]             signalCondition <- base::signalCondition
[17:03:03.632]             sys.calls <- base::sys.calls
[17:03:03.632]             `[[` <- base::`[[`
[17:03:03.632]             `+` <- base::`+`
[17:03:03.632]             `<<-` <- base::`<<-`
[17:03:03.632]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.632]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.632]                   3L)]
[17:03:03.632]             }
[17:03:03.632]             function(cond) {
[17:03:03.632]                 is_error <- inherits(cond, "error")
[17:03:03.632]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.632]                   NULL)
[17:03:03.632]                 if (is_error) {
[17:03:03.632]                   sessionInformation <- function() {
[17:03:03.632]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.632]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.632]                       search = base::search(), system = base::Sys.info())
[17:03:03.632]                   }
[17:03:03.632]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.632]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.632]                     cond$call), session = sessionInformation(), 
[17:03:03.632]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.632]                   signalCondition(cond)
[17:03:03.632]                 }
[17:03:03.632]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.632]                 "immediateCondition"))) {
[17:03:03.632]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.632]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.632]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.632]                   if (TRUE && !signal) {
[17:03:03.632]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.632]                     {
[17:03:03.632]                       inherits <- base::inherits
[17:03:03.632]                       invokeRestart <- base::invokeRestart
[17:03:03.632]                       is.null <- base::is.null
[17:03:03.632]                       muffled <- FALSE
[17:03:03.632]                       if (inherits(cond, "message")) {
[17:03:03.632]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.632]                         if (muffled) 
[17:03:03.632]                           invokeRestart("muffleMessage")
[17:03:03.632]                       }
[17:03:03.632]                       else if (inherits(cond, "warning")) {
[17:03:03.632]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.632]                         if (muffled) 
[17:03:03.632]                           invokeRestart("muffleWarning")
[17:03:03.632]                       }
[17:03:03.632]                       else if (inherits(cond, "condition")) {
[17:03:03.632]                         if (!is.null(pattern)) {
[17:03:03.632]                           computeRestarts <- base::computeRestarts
[17:03:03.632]                           grepl <- base::grepl
[17:03:03.632]                           restarts <- computeRestarts(cond)
[17:03:03.632]                           for (restart in restarts) {
[17:03:03.632]                             name <- restart$name
[17:03:03.632]                             if (is.null(name)) 
[17:03:03.632]                               next
[17:03:03.632]                             if (!grepl(pattern, name)) 
[17:03:03.632]                               next
[17:03:03.632]                             invokeRestart(restart)
[17:03:03.632]                             muffled <- TRUE
[17:03:03.632]                             break
[17:03:03.632]                           }
[17:03:03.632]                         }
[17:03:03.632]                       }
[17:03:03.632]                       invisible(muffled)
[17:03:03.632]                     }
[17:03:03.632]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.632]                   }
[17:03:03.632]                 }
[17:03:03.632]                 else {
[17:03:03.632]                   if (TRUE) {
[17:03:03.632]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.632]                     {
[17:03:03.632]                       inherits <- base::inherits
[17:03:03.632]                       invokeRestart <- base::invokeRestart
[17:03:03.632]                       is.null <- base::is.null
[17:03:03.632]                       muffled <- FALSE
[17:03:03.632]                       if (inherits(cond, "message")) {
[17:03:03.632]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.632]                         if (muffled) 
[17:03:03.632]                           invokeRestart("muffleMessage")
[17:03:03.632]                       }
[17:03:03.632]                       else if (inherits(cond, "warning")) {
[17:03:03.632]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.632]                         if (muffled) 
[17:03:03.632]                           invokeRestart("muffleWarning")
[17:03:03.632]                       }
[17:03:03.632]                       else if (inherits(cond, "condition")) {
[17:03:03.632]                         if (!is.null(pattern)) {
[17:03:03.632]                           computeRestarts <- base::computeRestarts
[17:03:03.632]                           grepl <- base::grepl
[17:03:03.632]                           restarts <- computeRestarts(cond)
[17:03:03.632]                           for (restart in restarts) {
[17:03:03.632]                             name <- restart$name
[17:03:03.632]                             if (is.null(name)) 
[17:03:03.632]                               next
[17:03:03.632]                             if (!grepl(pattern, name)) 
[17:03:03.632]                               next
[17:03:03.632]                             invokeRestart(restart)
[17:03:03.632]                             muffled <- TRUE
[17:03:03.632]                             break
[17:03:03.632]                           }
[17:03:03.632]                         }
[17:03:03.632]                       }
[17:03:03.632]                       invisible(muffled)
[17:03:03.632]                     }
[17:03:03.632]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.632]                   }
[17:03:03.632]                 }
[17:03:03.632]             }
[17:03:03.632]         }))
[17:03:03.632]     }, error = function(ex) {
[17:03:03.632]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.632]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.632]                 ...future.rng), started = ...future.startTime, 
[17:03:03.632]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.632]             version = "1.8"), class = "FutureResult")
[17:03:03.632]     }, finally = {
[17:03:03.632]         if (!identical(...future.workdir, getwd())) 
[17:03:03.632]             setwd(...future.workdir)
[17:03:03.632]         {
[17:03:03.632]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.632]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.632]             }
[17:03:03.632]             base::options(...future.oldOptions)
[17:03:03.632]             if (.Platform$OS.type == "windows") {
[17:03:03.632]                 old_names <- names(...future.oldEnvVars)
[17:03:03.632]                 envs <- base::Sys.getenv()
[17:03:03.632]                 names <- names(envs)
[17:03:03.632]                 common <- intersect(names, old_names)
[17:03:03.632]                 added <- setdiff(names, old_names)
[17:03:03.632]                 removed <- setdiff(old_names, names)
[17:03:03.632]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.632]                   envs[common]]
[17:03:03.632]                 NAMES <- toupper(changed)
[17:03:03.632]                 args <- list()
[17:03:03.632]                 for (kk in seq_along(NAMES)) {
[17:03:03.632]                   name <- changed[[kk]]
[17:03:03.632]                   NAME <- NAMES[[kk]]
[17:03:03.632]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.632]                     next
[17:03:03.632]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.632]                 }
[17:03:03.632]                 NAMES <- toupper(added)
[17:03:03.632]                 for (kk in seq_along(NAMES)) {
[17:03:03.632]                   name <- added[[kk]]
[17:03:03.632]                   NAME <- NAMES[[kk]]
[17:03:03.632]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.632]                     next
[17:03:03.632]                   args[[name]] <- ""
[17:03:03.632]                 }
[17:03:03.632]                 NAMES <- toupper(removed)
[17:03:03.632]                 for (kk in seq_along(NAMES)) {
[17:03:03.632]                   name <- removed[[kk]]
[17:03:03.632]                   NAME <- NAMES[[kk]]
[17:03:03.632]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.632]                     next
[17:03:03.632]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.632]                 }
[17:03:03.632]                 if (length(args) > 0) 
[17:03:03.632]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.632]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.632]             }
[17:03:03.632]             else {
[17:03:03.632]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.632]             }
[17:03:03.632]             {
[17:03:03.632]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.632]                   0L) {
[17:03:03.632]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.632]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.632]                   base::options(opts)
[17:03:03.632]                 }
[17:03:03.632]                 {
[17:03:03.632]                   {
[17:03:03.632]                     NULL
[17:03:03.632]                     RNGkind("Mersenne-Twister")
[17:03:03.632]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:03.632]                       inherits = FALSE)
[17:03:03.632]                   }
[17:03:03.632]                   options(future.plan = NULL)
[17:03:03.632]                   if (is.na(NA_character_)) 
[17:03:03.632]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.632]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.632]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.632]                     .init = FALSE)
[17:03:03.632]                 }
[17:03:03.632]             }
[17:03:03.632]         }
[17:03:03.632]     })
[17:03:03.632]     if (TRUE) {
[17:03:03.632]         base::sink(type = "output", split = FALSE)
[17:03:03.632]         if (TRUE) {
[17:03:03.632]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.632]         }
[17:03:03.632]         else {
[17:03:03.632]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.632]         }
[17:03:03.632]         base::close(...future.stdout)
[17:03:03.632]         ...future.stdout <- NULL
[17:03:03.632]     }
[17:03:03.632]     ...future.result$conditions <- ...future.conditions
[17:03:03.632]     ...future.result$finished <- base::Sys.time()
[17:03:03.632]     ...future.result
[17:03:03.632] }
[17:03:03.634] assign_globals() ...
[17:03:03.634] List of 2
[17:03:03.634]  $ a: num 2
[17:03:03.634]  $ b: num 3
[17:03:03.634]  - attr(*, "where")=List of 2
[17:03:03.634]   ..$ a:<environment: R_EmptyEnv> 
[17:03:03.634]   ..$ b:<environment: R_EmptyEnv> 
[17:03:03.634]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:03.634]  - attr(*, "resolved")= logi FALSE
[17:03:03.634]  - attr(*, "total_size")= num 112
[17:03:03.636] - copied ‘a’ to environment
[17:03:03.637] - copied ‘b’ to environment
[17:03:03.637] assign_globals() ... done
[17:03:03.637] plan(): Setting new future strategy stack:
[17:03:03.637] List of future strategies:
[17:03:03.637] 1. sequential:
[17:03:03.637]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.637]    - tweaked: FALSE
[17:03:03.637]    - call: NULL
[17:03:03.637] plan(): nbrOfWorkers() = 1
[17:03:03.638] plan(): Setting new future strategy stack:
[17:03:03.638] List of future strategies:
[17:03:03.638] 1. multicore:
[17:03:03.638]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.638]    - tweaked: FALSE
[17:03:03.638]    - call: plan(multicore)
[17:03:03.642] plan(): nbrOfWorkers() = 1
[17:03:03.642] SequentialFuture started (and completed)
[1] 6
*** multicore(..., workers = 1L) ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
Number of workers: 2
*** multicore(..., globals = FALSE) without globals
[17:03:03.649] getGlobalsAndPackages() ...
[17:03:03.649] Not searching for globals
[17:03:03.649] - globals: [0] <none>
[17:03:03.649] getGlobalsAndPackages() ... DONE
[17:03:03.650] Packages needed by the future expression (n = 0): <none>
[17:03:03.650] Packages needed by future strategies (n = 0): <none>
[17:03:03.651] {
[17:03:03.651]     {
[17:03:03.651]         {
[17:03:03.651]             ...future.startTime <- base::Sys.time()
[17:03:03.651]             {
[17:03:03.651]                 {
[17:03:03.651]                   {
[17:03:03.651]                     {
[17:03:03.651]                       base::local({
[17:03:03.651]                         has_future <- base::requireNamespace("future", 
[17:03:03.651]                           quietly = TRUE)
[17:03:03.651]                         if (has_future) {
[17:03:03.651]                           ns <- base::getNamespace("future")
[17:03:03.651]                           version <- ns[[".package"]][["version"]]
[17:03:03.651]                           if (is.null(version)) 
[17:03:03.651]                             version <- utils::packageVersion("future")
[17:03:03.651]                         }
[17:03:03.651]                         else {
[17:03:03.651]                           version <- NULL
[17:03:03.651]                         }
[17:03:03.651]                         if (!has_future || version < "1.8.0") {
[17:03:03.651]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.651]                             "", base::R.version$version.string), 
[17:03:03.651]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:03.651]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.651]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.651]                               "release", "version")], collapse = " "), 
[17:03:03.651]                             hostname = base::Sys.info()[["nodename"]])
[17:03:03.651]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.651]                             info)
[17:03:03.651]                           info <- base::paste(info, collapse = "; ")
[17:03:03.651]                           if (!has_future) {
[17:03:03.651]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.651]                               info)
[17:03:03.651]                           }
[17:03:03.651]                           else {
[17:03:03.651]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.651]                               info, version)
[17:03:03.651]                           }
[17:03:03.651]                           base::stop(msg)
[17:03:03.651]                         }
[17:03:03.651]                       })
[17:03:03.651]                     }
[17:03:03.651]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:03.651]                     base::options(mc.cores = 1L)
[17:03:03.651]                   }
[17:03:03.651]                   ...future.strategy.old <- future::plan("list")
[17:03:03.651]                   options(future.plan = NULL)
[17:03:03.651]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.651]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.651]                 }
[17:03:03.651]                 ...future.workdir <- getwd()
[17:03:03.651]             }
[17:03:03.651]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.651]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.651]         }
[17:03:03.651]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.651]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.651]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.651]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.651]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.651]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.651]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.651]             base::names(...future.oldOptions))
[17:03:03.651]     }
[17:03:03.651]     if (FALSE) {
[17:03:03.651]     }
[17:03:03.651]     else {
[17:03:03.651]         if (TRUE) {
[17:03:03.651]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.651]                 open = "w")
[17:03:03.651]         }
[17:03:03.651]         else {
[17:03:03.651]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.651]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.651]         }
[17:03:03.651]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.651]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.651]             base::sink(type = "output", split = FALSE)
[17:03:03.651]             base::close(...future.stdout)
[17:03:03.651]         }, add = TRUE)
[17:03:03.651]     }
[17:03:03.651]     ...future.frame <- base::sys.nframe()
[17:03:03.651]     ...future.conditions <- base::list()
[17:03:03.651]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.651]     if (FALSE) {
[17:03:03.651]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.651]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.651]     }
[17:03:03.651]     ...future.result <- base::tryCatch({
[17:03:03.651]         base::withCallingHandlers({
[17:03:03.651]             ...future.value <- base::withVisible(base::local({
[17:03:03.651]                 withCallingHandlers({
[17:03:03.651]                   {
[17:03:03.651]                     42L
[17:03:03.651]                   }
[17:03:03.651]                 }, immediateCondition = function(cond) {
[17:03:03.651]                   save_rds <- function (object, pathname, ...) 
[17:03:03.651]                   {
[17:03:03.651]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:03.651]                     if (file_test("-f", pathname_tmp)) {
[17:03:03.651]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.651]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:03.651]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.651]                         fi_tmp[["mtime"]])
[17:03:03.651]                     }
[17:03:03.651]                     tryCatch({
[17:03:03.651]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:03.651]                     }, error = function(ex) {
[17:03:03.651]                       msg <- conditionMessage(ex)
[17:03:03.651]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.651]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:03.651]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.651]                         fi_tmp[["mtime"]], msg)
[17:03:03.651]                       ex$message <- msg
[17:03:03.651]                       stop(ex)
[17:03:03.651]                     })
[17:03:03.651]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:03.651]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:03.651]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:03.651]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.651]                       fi <- file.info(pathname)
[17:03:03.651]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:03.651]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.651]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:03.651]                         fi[["size"]], fi[["mtime"]])
[17:03:03.651]                       stop(msg)
[17:03:03.651]                     }
[17:03:03.651]                     invisible(pathname)
[17:03:03.651]                   }
[17:03:03.651]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:03.651]                     rootPath = tempdir()) 
[17:03:03.651]                   {
[17:03:03.651]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:03.651]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:03.651]                       tmpdir = path, fileext = ".rds")
[17:03:03.651]                     save_rds(obj, file)
[17:03:03.651]                   }
[17:03:03.651]                   saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")
[17:03:03.651]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.651]                   {
[17:03:03.651]                     inherits <- base::inherits
[17:03:03.651]                     invokeRestart <- base::invokeRestart
[17:03:03.651]                     is.null <- base::is.null
[17:03:03.651]                     muffled <- FALSE
[17:03:03.651]                     if (inherits(cond, "message")) {
[17:03:03.651]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:03.651]                       if (muffled) 
[17:03:03.651]                         invokeRestart("muffleMessage")
[17:03:03.651]                     }
[17:03:03.651]                     else if (inherits(cond, "warning")) {
[17:03:03.651]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:03.651]                       if (muffled) 
[17:03:03.651]                         invokeRestart("muffleWarning")
[17:03:03.651]                     }
[17:03:03.651]                     else if (inherits(cond, "condition")) {
[17:03:03.651]                       if (!is.null(pattern)) {
[17:03:03.651]                         computeRestarts <- base::computeRestarts
[17:03:03.651]                         grepl <- base::grepl
[17:03:03.651]                         restarts <- computeRestarts(cond)
[17:03:03.651]                         for (restart in restarts) {
[17:03:03.651]                           name <- restart$name
[17:03:03.651]                           if (is.null(name)) 
[17:03:03.651]                             next
[17:03:03.651]                           if (!grepl(pattern, name)) 
[17:03:03.651]                             next
[17:03:03.651]                           invokeRestart(restart)
[17:03:03.651]                           muffled <- TRUE
[17:03:03.651]                           break
[17:03:03.651]                         }
[17:03:03.651]                       }
[17:03:03.651]                     }
[17:03:03.651]                     invisible(muffled)
[17:03:03.651]                   }
[17:03:03.651]                   muffleCondition(cond)
[17:03:03.651]                 })
[17:03:03.651]             }))
[17:03:03.651]             future::FutureResult(value = ...future.value$value, 
[17:03:03.651]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.651]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.651]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.651]                     ...future.globalenv.names))
[17:03:03.651]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.651]         }, condition = base::local({
[17:03:03.651]             c <- base::c
[17:03:03.651]             inherits <- base::inherits
[17:03:03.651]             invokeRestart <- base::invokeRestart
[17:03:03.651]             length <- base::length
[17:03:03.651]             list <- base::list
[17:03:03.651]             seq.int <- base::seq.int
[17:03:03.651]             signalCondition <- base::signalCondition
[17:03:03.651]             sys.calls <- base::sys.calls
[17:03:03.651]             `[[` <- base::`[[`
[17:03:03.651]             `+` <- base::`+`
[17:03:03.651]             `<<-` <- base::`<<-`
[17:03:03.651]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.651]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.651]                   3L)]
[17:03:03.651]             }
[17:03:03.651]             function(cond) {
[17:03:03.651]                 is_error <- inherits(cond, "error")
[17:03:03.651]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.651]                   NULL)
[17:03:03.651]                 if (is_error) {
[17:03:03.651]                   sessionInformation <- function() {
[17:03:03.651]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.651]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.651]                       search = base::search(), system = base::Sys.info())
[17:03:03.651]                   }
[17:03:03.651]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.651]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.651]                     cond$call), session = sessionInformation(), 
[17:03:03.651]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.651]                   signalCondition(cond)
[17:03:03.651]                 }
[17:03:03.651]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.651]                 "immediateCondition"))) {
[17:03:03.651]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.651]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.651]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.651]                   if (TRUE && !signal) {
[17:03:03.651]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.651]                     {
[17:03:03.651]                       inherits <- base::inherits
[17:03:03.651]                       invokeRestart <- base::invokeRestart
[17:03:03.651]                       is.null <- base::is.null
[17:03:03.651]                       muffled <- FALSE
[17:03:03.651]                       if (inherits(cond, "message")) {
[17:03:03.651]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.651]                         if (muffled) 
[17:03:03.651]                           invokeRestart("muffleMessage")
[17:03:03.651]                       }
[17:03:03.651]                       else if (inherits(cond, "warning")) {
[17:03:03.651]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.651]                         if (muffled) 
[17:03:03.651]                           invokeRestart("muffleWarning")
[17:03:03.651]                       }
[17:03:03.651]                       else if (inherits(cond, "condition")) {
[17:03:03.651]                         if (!is.null(pattern)) {
[17:03:03.651]                           computeRestarts <- base::computeRestarts
[17:03:03.651]                           grepl <- base::grepl
[17:03:03.651]                           restarts <- computeRestarts(cond)
[17:03:03.651]                           for (restart in restarts) {
[17:03:03.651]                             name <- restart$name
[17:03:03.651]                             if (is.null(name)) 
[17:03:03.651]                               next
[17:03:03.651]                             if (!grepl(pattern, name)) 
[17:03:03.651]                               next
[17:03:03.651]                             invokeRestart(restart)
[17:03:03.651]                             muffled <- TRUE
[17:03:03.651]                             break
[17:03:03.651]                           }
[17:03:03.651]                         }
[17:03:03.651]                       }
[17:03:03.651]                       invisible(muffled)
[17:03:03.651]                     }
[17:03:03.651]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.651]                   }
[17:03:03.651]                 }
[17:03:03.651]                 else {
[17:03:03.651]                   if (TRUE) {
[17:03:03.651]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.651]                     {
[17:03:03.651]                       inherits <- base::inherits
[17:03:03.651]                       invokeRestart <- base::invokeRestart
[17:03:03.651]                       is.null <- base::is.null
[17:03:03.651]                       muffled <- FALSE
[17:03:03.651]                       if (inherits(cond, "message")) {
[17:03:03.651]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.651]                         if (muffled) 
[17:03:03.651]                           invokeRestart("muffleMessage")
[17:03:03.651]                       }
[17:03:03.651]                       else if (inherits(cond, "warning")) {
[17:03:03.651]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.651]                         if (muffled) 
[17:03:03.651]                           invokeRestart("muffleWarning")
[17:03:03.651]                       }
[17:03:03.651]                       else if (inherits(cond, "condition")) {
[17:03:03.651]                         if (!is.null(pattern)) {
[17:03:03.651]                           computeRestarts <- base::computeRestarts
[17:03:03.651]                           grepl <- base::grepl
[17:03:03.651]                           restarts <- computeRestarts(cond)
[17:03:03.651]                           for (restart in restarts) {
[17:03:03.651]                             name <- restart$name
[17:03:03.651]                             if (is.null(name)) 
[17:03:03.651]                               next
[17:03:03.651]                             if (!grepl(pattern, name)) 
[17:03:03.651]                               next
[17:03:03.651]                             invokeRestart(restart)
[17:03:03.651]                             muffled <- TRUE
[17:03:03.651]                             break
[17:03:03.651]                           }
[17:03:03.651]                         }
[17:03:03.651]                       }
[17:03:03.651]                       invisible(muffled)
[17:03:03.651]                     }
[17:03:03.651]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.651]                   }
[17:03:03.651]                 }
[17:03:03.651]             }
[17:03:03.651]         }))
[17:03:03.651]     }, error = function(ex) {
[17:03:03.651]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.651]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.651]                 ...future.rng), started = ...future.startTime, 
[17:03:03.651]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.651]             version = "1.8"), class = "FutureResult")
[17:03:03.651]     }, finally = {
[17:03:03.651]         if (!identical(...future.workdir, getwd())) 
[17:03:03.651]             setwd(...future.workdir)
[17:03:03.651]         {
[17:03:03.651]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.651]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.651]             }
[17:03:03.651]             base::options(...future.oldOptions)
[17:03:03.651]             if (.Platform$OS.type == "windows") {
[17:03:03.651]                 old_names <- names(...future.oldEnvVars)
[17:03:03.651]                 envs <- base::Sys.getenv()
[17:03:03.651]                 names <- names(envs)
[17:03:03.651]                 common <- intersect(names, old_names)
[17:03:03.651]                 added <- setdiff(names, old_names)
[17:03:03.651]                 removed <- setdiff(old_names, names)
[17:03:03.651]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.651]                   envs[common]]
[17:03:03.651]                 NAMES <- toupper(changed)
[17:03:03.651]                 args <- list()
[17:03:03.651]                 for (kk in seq_along(NAMES)) {
[17:03:03.651]                   name <- changed[[kk]]
[17:03:03.651]                   NAME <- NAMES[[kk]]
[17:03:03.651]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.651]                     next
[17:03:03.651]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.651]                 }
[17:03:03.651]                 NAMES <- toupper(added)
[17:03:03.651]                 for (kk in seq_along(NAMES)) {
[17:03:03.651]                   name <- added[[kk]]
[17:03:03.651]                   NAME <- NAMES[[kk]]
[17:03:03.651]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.651]                     next
[17:03:03.651]                   args[[name]] <- ""
[17:03:03.651]                 }
[17:03:03.651]                 NAMES <- toupper(removed)
[17:03:03.651]                 for (kk in seq_along(NAMES)) {
[17:03:03.651]                   name <- removed[[kk]]
[17:03:03.651]                   NAME <- NAMES[[kk]]
[17:03:03.651]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.651]                     next
[17:03:03.651]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.651]                 }
[17:03:03.651]                 if (length(args) > 0) 
[17:03:03.651]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.651]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.651]             }
[17:03:03.651]             else {
[17:03:03.651]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.651]             }
[17:03:03.651]             {
[17:03:03.651]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.651]                   0L) {
[17:03:03.651]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.651]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.651]                   base::options(opts)
[17:03:03.651]                 }
[17:03:03.651]                 {
[17:03:03.651]                   {
[17:03:03.651]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:03.651]                     NULL
[17:03:03.651]                   }
[17:03:03.651]                   options(future.plan = NULL)
[17:03:03.651]                   if (is.na(NA_character_)) 
[17:03:03.651]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.651]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.651]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.651]                     .init = FALSE)
[17:03:03.651]                 }
[17:03:03.651]             }
[17:03:03.651]         }
[17:03:03.651]     })
[17:03:03.651]     if (TRUE) {
[17:03:03.651]         base::sink(type = "output", split = FALSE)
[17:03:03.651]         if (TRUE) {
[17:03:03.651]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.651]         }
[17:03:03.651]         else {
[17:03:03.651]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.651]         }
[17:03:03.651]         base::close(...future.stdout)
[17:03:03.651]         ...future.stdout <- NULL
[17:03:03.651]     }
[17:03:03.651]     ...future.result$conditions <- ...future.conditions
[17:03:03.651]     ...future.result$finished <- base::Sys.time()
[17:03:03.651]     ...future.result
[17:03:03.651] }
[17:03:03.653] requestCore(): workers = 2
[17:03:03.656] MulticoreFuture started
[17:03:03.656] plan(): Setting new future strategy stack:
[17:03:03.657] List of future strategies:
[17:03:03.657] 1. sequential:
[17:03:03.657]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.657]    - tweaked: FALSE
[17:03:03.657]    - call: NULL
[17:03:03.658] plan(): nbrOfWorkers() = 1
[17:03:03.660] plan(): Setting new future strategy stack:
[17:03:03.660] List of future strategies:
[17:03:03.660] 1. multicore:
[17:03:03.660]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.660]    - tweaked: FALSE
[17:03:03.660]    - call: plan(multicore)
[17:03:03.665] plan(): nbrOfWorkers() = 2
[1] TRUE
[17:03:03.666] result() for MulticoreFuture ...
[17:03:03.671] result() for MulticoreFuture ...
[17:03:03.671] result() for MulticoreFuture ... done
[17:03:03.671] result() for MulticoreFuture ... done
[17:03:03.671] result() for MulticoreFuture ...
[17:03:03.672] result() for MulticoreFuture ... done
[1] 42
*** multicore(..., globals = FALSE) with globals
[17:03:03.676] getGlobalsAndPackages() ...
[17:03:03.676] Not searching for globals
[17:03:03.676] - globals: [0] <none>
[17:03:03.676] getGlobalsAndPackages() ... DONE
[17:03:03.677] Packages needed by the future expression (n = 0): <none>
[17:03:03.677] Packages needed by future strategies (n = 0): <none>
[17:03:03.677] {
[17:03:03.677]     {
[17:03:03.677]         {
[17:03:03.677]             ...future.startTime <- base::Sys.time()
[17:03:03.677]             {
[17:03:03.677]                 {
[17:03:03.677]                   {
[17:03:03.677]                     {
[17:03:03.677]                       base::local({
[17:03:03.677]                         has_future <- base::requireNamespace("future", 
[17:03:03.677]                           quietly = TRUE)
[17:03:03.677]                         if (has_future) {
[17:03:03.677]                           ns <- base::getNamespace("future")
[17:03:03.677]                           version <- ns[[".package"]][["version"]]
[17:03:03.677]                           if (is.null(version)) 
[17:03:03.677]                             version <- utils::packageVersion("future")
[17:03:03.677]                         }
[17:03:03.677]                         else {
[17:03:03.677]                           version <- NULL
[17:03:03.677]                         }
[17:03:03.677]                         if (!has_future || version < "1.8.0") {
[17:03:03.677]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.677]                             "", base::R.version$version.string), 
[17:03:03.677]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:03.677]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.677]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.677]                               "release", "version")], collapse = " "), 
[17:03:03.677]                             hostname = base::Sys.info()[["nodename"]])
[17:03:03.677]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.677]                             info)
[17:03:03.677]                           info <- base::paste(info, collapse = "; ")
[17:03:03.677]                           if (!has_future) {
[17:03:03.677]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.677]                               info)
[17:03:03.677]                           }
[17:03:03.677]                           else {
[17:03:03.677]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.677]                               info, version)
[17:03:03.677]                           }
[17:03:03.677]                           base::stop(msg)
[17:03:03.677]                         }
[17:03:03.677]                       })
[17:03:03.677]                     }
[17:03:03.677]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:03.677]                     base::options(mc.cores = 1L)
[17:03:03.677]                   }
[17:03:03.677]                   ...future.strategy.old <- future::plan("list")
[17:03:03.677]                   options(future.plan = NULL)
[17:03:03.677]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.677]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.677]                 }
[17:03:03.677]                 ...future.workdir <- getwd()
[17:03:03.677]             }
[17:03:03.677]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.677]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.677]         }
[17:03:03.677]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.677]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.677]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.677]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.677]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.677]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.677]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.677]             base::names(...future.oldOptions))
[17:03:03.677]     }
[17:03:03.677]     if (FALSE) {
[17:03:03.677]     }
[17:03:03.677]     else {
[17:03:03.677]         if (TRUE) {
[17:03:03.677]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.677]                 open = "w")
[17:03:03.677]         }
[17:03:03.677]         else {
[17:03:03.677]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.677]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.677]         }
[17:03:03.677]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.677]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.677]             base::sink(type = "output", split = FALSE)
[17:03:03.677]             base::close(...future.stdout)
[17:03:03.677]         }, add = TRUE)
[17:03:03.677]     }
[17:03:03.677]     ...future.frame <- base::sys.nframe()
[17:03:03.677]     ...future.conditions <- base::list()
[17:03:03.677]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.677]     if (FALSE) {
[17:03:03.677]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.677]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.677]     }
[17:03:03.677]     ...future.result <- base::tryCatch({
[17:03:03.677]         base::withCallingHandlers({
[17:03:03.677]             ...future.value <- base::withVisible(base::local({
[17:03:03.677]                 withCallingHandlers({
[17:03:03.677]                   {
[17:03:03.677]                     b <- 3
[17:03:03.677]                     c <- 2
[17:03:03.677]                     a * b * c
[17:03:03.677]                   }
[17:03:03.677]                 }, immediateCondition = function(cond) {
[17:03:03.677]                   save_rds <- function (object, pathname, ...) 
[17:03:03.677]                   {
[17:03:03.677]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:03.677]                     if (file_test("-f", pathname_tmp)) {
[17:03:03.677]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.677]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:03.677]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.677]                         fi_tmp[["mtime"]])
[17:03:03.677]                     }
[17:03:03.677]                     tryCatch({
[17:03:03.677]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:03.677]                     }, error = function(ex) {
[17:03:03.677]                       msg <- conditionMessage(ex)
[17:03:03.677]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.677]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:03.677]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.677]                         fi_tmp[["mtime"]], msg)
[17:03:03.677]                       ex$message <- msg
[17:03:03.677]                       stop(ex)
[17:03:03.677]                     })
[17:03:03.677]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:03.677]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:03.677]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:03.677]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.677]                       fi <- file.info(pathname)
[17:03:03.677]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:03.677]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.677]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:03.677]                         fi[["size"]], fi[["mtime"]])
[17:03:03.677]                       stop(msg)
[17:03:03.677]                     }
[17:03:03.677]                     invisible(pathname)
[17:03:03.677]                   }
[17:03:03.677]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:03.677]                     rootPath = tempdir()) 
[17:03:03.677]                   {
[17:03:03.677]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:03.677]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:03.677]                       tmpdir = path, fileext = ".rds")
[17:03:03.677]                     save_rds(obj, file)
[17:03:03.677]                   }
[17:03:03.677]                   saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")
[17:03:03.677]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.677]                   {
[17:03:03.677]                     inherits <- base::inherits
[17:03:03.677]                     invokeRestart <- base::invokeRestart
[17:03:03.677]                     is.null <- base::is.null
[17:03:03.677]                     muffled <- FALSE
[17:03:03.677]                     if (inherits(cond, "message")) {
[17:03:03.677]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:03.677]                       if (muffled) 
[17:03:03.677]                         invokeRestart("muffleMessage")
[17:03:03.677]                     }
[17:03:03.677]                     else if (inherits(cond, "warning")) {
[17:03:03.677]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:03.677]                       if (muffled) 
[17:03:03.677]                         invokeRestart("muffleWarning")
[17:03:03.677]                     }
[17:03:03.677]                     else if (inherits(cond, "condition")) {
[17:03:03.677]                       if (!is.null(pattern)) {
[17:03:03.677]                         computeRestarts <- base::computeRestarts
[17:03:03.677]                         grepl <- base::grepl
[17:03:03.677]                         restarts <- computeRestarts(cond)
[17:03:03.677]                         for (restart in restarts) {
[17:03:03.677]                           name <- restart$name
[17:03:03.677]                           if (is.null(name)) 
[17:03:03.677]                             next
[17:03:03.677]                           if (!grepl(pattern, name)) 
[17:03:03.677]                             next
[17:03:03.677]                           invokeRestart(restart)
[17:03:03.677]                           muffled <- TRUE
[17:03:03.677]                           break
[17:03:03.677]                         }
[17:03:03.677]                       }
[17:03:03.677]                     }
[17:03:03.677]                     invisible(muffled)
[17:03:03.677]                   }
[17:03:03.677]                   muffleCondition(cond)
[17:03:03.677]                 })
[17:03:03.677]             }))
[17:03:03.677]             future::FutureResult(value = ...future.value$value, 
[17:03:03.677]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.677]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.677]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.677]                     ...future.globalenv.names))
[17:03:03.677]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.677]         }, condition = base::local({
[17:03:03.677]             c <- base::c
[17:03:03.677]             inherits <- base::inherits
[17:03:03.677]             invokeRestart <- base::invokeRestart
[17:03:03.677]             length <- base::length
[17:03:03.677]             list <- base::list
[17:03:03.677]             seq.int <- base::seq.int
[17:03:03.677]             signalCondition <- base::signalCondition
[17:03:03.677]             sys.calls <- base::sys.calls
[17:03:03.677]             `[[` <- base::`[[`
[17:03:03.677]             `+` <- base::`+`
[17:03:03.677]             `<<-` <- base::`<<-`
[17:03:03.677]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.677]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.677]                   3L)]
[17:03:03.677]             }
[17:03:03.677]             function(cond) {
[17:03:03.677]                 is_error <- inherits(cond, "error")
[17:03:03.677]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.677]                   NULL)
[17:03:03.677]                 if (is_error) {
[17:03:03.677]                   sessionInformation <- function() {
[17:03:03.677]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.677]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.677]                       search = base::search(), system = base::Sys.info())
[17:03:03.677]                   }
[17:03:03.677]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.677]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.677]                     cond$call), session = sessionInformation(), 
[17:03:03.677]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.677]                   signalCondition(cond)
[17:03:03.677]                 }
[17:03:03.677]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.677]                 "immediateCondition"))) {
[17:03:03.677]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.677]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.677]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.677]                   if (TRUE && !signal) {
[17:03:03.677]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.677]                     {
[17:03:03.677]                       inherits <- base::inherits
[17:03:03.677]                       invokeRestart <- base::invokeRestart
[17:03:03.677]                       is.null <- base::is.null
[17:03:03.677]                       muffled <- FALSE
[17:03:03.677]                       if (inherits(cond, "message")) {
[17:03:03.677]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.677]                         if (muffled) 
[17:03:03.677]                           invokeRestart("muffleMessage")
[17:03:03.677]                       }
[17:03:03.677]                       else if (inherits(cond, "warning")) {
[17:03:03.677]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.677]                         if (muffled) 
[17:03:03.677]                           invokeRestart("muffleWarning")
[17:03:03.677]                       }
[17:03:03.677]                       else if (inherits(cond, "condition")) {
[17:03:03.677]                         if (!is.null(pattern)) {
[17:03:03.677]                           computeRestarts <- base::computeRestarts
[17:03:03.677]                           grepl <- base::grepl
[17:03:03.677]                           restarts <- computeRestarts(cond)
[17:03:03.677]                           for (restart in restarts) {
[17:03:03.677]                             name <- restart$name
[17:03:03.677]                             if (is.null(name)) 
[17:03:03.677]                               next
[17:03:03.677]                             if (!grepl(pattern, name)) 
[17:03:03.677]                               next
[17:03:03.677]                             invokeRestart(restart)
[17:03:03.677]                             muffled <- TRUE
[17:03:03.677]                             break
[17:03:03.677]                           }
[17:03:03.677]                         }
[17:03:03.677]                       }
[17:03:03.677]                       invisible(muffled)
[17:03:03.677]                     }
[17:03:03.677]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.677]                   }
[17:03:03.677]                 }
[17:03:03.677]                 else {
[17:03:03.677]                   if (TRUE) {
[17:03:03.677]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.677]                     {
[17:03:03.677]                       inherits <- base::inherits
[17:03:03.677]                       invokeRestart <- base::invokeRestart
[17:03:03.677]                       is.null <- base::is.null
[17:03:03.677]                       muffled <- FALSE
[17:03:03.677]                       if (inherits(cond, "message")) {
[17:03:03.677]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.677]                         if (muffled) 
[17:03:03.677]                           invokeRestart("muffleMessage")
[17:03:03.677]                       }
[17:03:03.677]                       else if (inherits(cond, "warning")) {
[17:03:03.677]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.677]                         if (muffled) 
[17:03:03.677]                           invokeRestart("muffleWarning")
[17:03:03.677]                       }
[17:03:03.677]                       else if (inherits(cond, "condition")) {
[17:03:03.677]                         if (!is.null(pattern)) {
[17:03:03.677]                           computeRestarts <- base::computeRestarts
[17:03:03.677]                           grepl <- base::grepl
[17:03:03.677]                           restarts <- computeRestarts(cond)
[17:03:03.677]                           for (restart in restarts) {
[17:03:03.677]                             name <- restart$name
[17:03:03.677]                             if (is.null(name)) 
[17:03:03.677]                               next
[17:03:03.677]                             if (!grepl(pattern, name)) 
[17:03:03.677]                               next
[17:03:03.677]                             invokeRestart(restart)
[17:03:03.677]                             muffled <- TRUE
[17:03:03.677]                             break
[17:03:03.677]                           }
[17:03:03.677]                         }
[17:03:03.677]                       }
[17:03:03.677]                       invisible(muffled)
[17:03:03.677]                     }
[17:03:03.677]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.677]                   }
[17:03:03.677]                 }
[17:03:03.677]             }
[17:03:03.677]         }))
[17:03:03.677]     }, error = function(ex) {
[17:03:03.677]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.677]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.677]                 ...future.rng), started = ...future.startTime, 
[17:03:03.677]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.677]             version = "1.8"), class = "FutureResult")
[17:03:03.677]     }, finally = {
[17:03:03.677]         if (!identical(...future.workdir, getwd())) 
[17:03:03.677]             setwd(...future.workdir)
[17:03:03.677]         {
[17:03:03.677]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.677]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.677]             }
[17:03:03.677]             base::options(...future.oldOptions)
[17:03:03.677]             if (.Platform$OS.type == "windows") {
[17:03:03.677]                 old_names <- names(...future.oldEnvVars)
[17:03:03.677]                 envs <- base::Sys.getenv()
[17:03:03.677]                 names <- names(envs)
[17:03:03.677]                 common <- intersect(names, old_names)
[17:03:03.677]                 added <- setdiff(names, old_names)
[17:03:03.677]                 removed <- setdiff(old_names, names)
[17:03:03.677]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.677]                   envs[common]]
[17:03:03.677]                 NAMES <- toupper(changed)
[17:03:03.677]                 args <- list()
[17:03:03.677]                 for (kk in seq_along(NAMES)) {
[17:03:03.677]                   name <- changed[[kk]]
[17:03:03.677]                   NAME <- NAMES[[kk]]
[17:03:03.677]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.677]                     next
[17:03:03.677]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.677]                 }
[17:03:03.677]                 NAMES <- toupper(added)
[17:03:03.677]                 for (kk in seq_along(NAMES)) {
[17:03:03.677]                   name <- added[[kk]]
[17:03:03.677]                   NAME <- NAMES[[kk]]
[17:03:03.677]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.677]                     next
[17:03:03.677]                   args[[name]] <- ""
[17:03:03.677]                 }
[17:03:03.677]                 NAMES <- toupper(removed)
[17:03:03.677]                 for (kk in seq_along(NAMES)) {
[17:03:03.677]                   name <- removed[[kk]]
[17:03:03.677]                   NAME <- NAMES[[kk]]
[17:03:03.677]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.677]                     next
[17:03:03.677]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.677]                 }
[17:03:03.677]                 if (length(args) > 0) 
[17:03:03.677]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.677]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.677]             }
[17:03:03.677]             else {
[17:03:03.677]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.677]             }
[17:03:03.677]             {
[17:03:03.677]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.677]                   0L) {
[17:03:03.677]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.677]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.677]                   base::options(opts)
[17:03:03.677]                 }
[17:03:03.677]                 {
[17:03:03.677]                   {
[17:03:03.677]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:03.677]                     NULL
[17:03:03.677]                   }
[17:03:03.677]                   options(future.plan = NULL)
[17:03:03.677]                   if (is.na(NA_character_)) 
[17:03:03.677]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.677]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.677]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.677]                     .init = FALSE)
[17:03:03.677]                 }
[17:03:03.677]             }
[17:03:03.677]         }
[17:03:03.677]     })
[17:03:03.677]     if (TRUE) {
[17:03:03.677]         base::sink(type = "output", split = FALSE)
[17:03:03.677]         if (TRUE) {
[17:03:03.677]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.677]         }
[17:03:03.677]         else {
[17:03:03.677]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.677]         }
[17:03:03.677]         base::close(...future.stdout)
[17:03:03.677]         ...future.stdout <- NULL
[17:03:03.677]     }
[17:03:03.677]     ...future.result$conditions <- ...future.conditions
[17:03:03.677]     ...future.result$finished <- base::Sys.time()
[17:03:03.677]     ...future.result
[17:03:03.677] }
[17:03:03.680] requestCore(): workers = 2
[17:03:03.682] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:03:03.683] plan(): Setting new future strategy stack:
[17:03:03.683] List of future strategies:
[17:03:03.683] 1. sequential:
[17:03:03.683]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.683]    - tweaked: FALSE
[17:03:03.683]    - call: NULL
[17:03:03.693] plan(): nbrOfWorkers() = 1
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 07dd274d-66ac-c50c-eb90-f530485edd79
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:03.694] result() for MulticoreFuture ...
[17:03:03.695] plan(): Setting new future strategy stack:
[17:03:03.695] List of future strategies:
[17:03:03.695] 1. multicore:
[17:03:03.695]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.695]    - tweaked: FALSE
[17:03:03.695]    - call: plan(multicore)
[17:03:03.701] plan(): nbrOfWorkers() = 2
[17:03:03.702] result() for MulticoreFuture ...
[17:03:03.702] result() for MulticoreFuture ... done
[17:03:03.702] result() for MulticoreFuture ... done
[17:03:03.702] result() for MulticoreFuture ...
[17:03:03.702] result() for MulticoreFuture ... done
[1] 0
*** multicore(..., globals = FALSE) with globals and blocking
 - Creating multicore future #1 ...
[17:03:03.707] getGlobalsAndPackages() ...
[17:03:03.707] Not searching for globals
[17:03:03.707] - globals: [0] <none>
[17:03:03.707] getGlobalsAndPackages() ... DONE
[17:03:03.708] Packages needed by the future expression (n = 0): <none>
[17:03:03.708] Packages needed by future strategies (n = 0): <none>
[17:03:03.709] {
[17:03:03.709]     {
[17:03:03.709]         {
[17:03:03.709]             ...future.startTime <- base::Sys.time()
[17:03:03.709]             {
[17:03:03.709]                 {
[17:03:03.709]                   {
[17:03:03.709]                     {
[17:03:03.709]                       base::local({
[17:03:03.709]                         has_future <- base::requireNamespace("future", 
[17:03:03.709]                           quietly = TRUE)
[17:03:03.709]                         if (has_future) {
[17:03:03.709]                           ns <- base::getNamespace("future")
[17:03:03.709]                           version <- ns[[".package"]][["version"]]
[17:03:03.709]                           if (is.null(version)) 
[17:03:03.709]                             version <- utils::packageVersion("future")
[17:03:03.709]                         }
[17:03:03.709]                         else {
[17:03:03.709]                           version <- NULL
[17:03:03.709]                         }
[17:03:03.709]                         if (!has_future || version < "1.8.0") {
[17:03:03.709]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.709]                             "", base::R.version$version.string), 
[17:03:03.709]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:03.709]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.709]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.709]                               "release", "version")], collapse = " "), 
[17:03:03.709]                             hostname = base::Sys.info()[["nodename"]])
[17:03:03.709]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.709]                             info)
[17:03:03.709]                           info <- base::paste(info, collapse = "; ")
[17:03:03.709]                           if (!has_future) {
[17:03:03.709]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.709]                               info)
[17:03:03.709]                           }
[17:03:03.709]                           else {
[17:03:03.709]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.709]                               info, version)
[17:03:03.709]                           }
[17:03:03.709]                           base::stop(msg)
[17:03:03.709]                         }
[17:03:03.709]                       })
[17:03:03.709]                     }
[17:03:03.709]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:03.709]                     base::options(mc.cores = 1L)
[17:03:03.709]                   }
[17:03:03.709]                   ...future.strategy.old <- future::plan("list")
[17:03:03.709]                   options(future.plan = NULL)
[17:03:03.709]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.709]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.709]                 }
[17:03:03.709]                 ...future.workdir <- getwd()
[17:03:03.709]             }
[17:03:03.709]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.709]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.709]         }
[17:03:03.709]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.709]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.709]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.709]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.709]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.709]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.709]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.709]             base::names(...future.oldOptions))
[17:03:03.709]     }
[17:03:03.709]     if (FALSE) {
[17:03:03.709]     }
[17:03:03.709]     else {
[17:03:03.709]         if (TRUE) {
[17:03:03.709]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.709]                 open = "w")
[17:03:03.709]         }
[17:03:03.709]         else {
[17:03:03.709]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.709]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.709]         }
[17:03:03.709]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.709]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.709]             base::sink(type = "output", split = FALSE)
[17:03:03.709]             base::close(...future.stdout)
[17:03:03.709]         }, add = TRUE)
[17:03:03.709]     }
[17:03:03.709]     ...future.frame <- base::sys.nframe()
[17:03:03.709]     ...future.conditions <- base::list()
[17:03:03.709]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.709]     if (FALSE) {
[17:03:03.709]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.709]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.709]     }
[17:03:03.709]     ...future.result <- base::tryCatch({
[17:03:03.709]         base::withCallingHandlers({
[17:03:03.709]             ...future.value <- base::withVisible(base::local({
[17:03:03.709]                 withCallingHandlers({
[17:03:03.709]                   {
[17:03:03.709]                     ii
[17:03:03.709]                   }
[17:03:03.709]                 }, immediateCondition = function(cond) {
[17:03:03.709]                   save_rds <- function (object, pathname, ...) 
[17:03:03.709]                   {
[17:03:03.709]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:03.709]                     if (file_test("-f", pathname_tmp)) {
[17:03:03.709]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.709]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:03.709]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.709]                         fi_tmp[["mtime"]])
[17:03:03.709]                     }
[17:03:03.709]                     tryCatch({
[17:03:03.709]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:03.709]                     }, error = function(ex) {
[17:03:03.709]                       msg <- conditionMessage(ex)
[17:03:03.709]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.709]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:03.709]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.709]                         fi_tmp[["mtime"]], msg)
[17:03:03.709]                       ex$message <- msg
[17:03:03.709]                       stop(ex)
[17:03:03.709]                     })
[17:03:03.709]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:03.709]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:03.709]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:03.709]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.709]                       fi <- file.info(pathname)
[17:03:03.709]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:03.709]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.709]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:03.709]                         fi[["size"]], fi[["mtime"]])
[17:03:03.709]                       stop(msg)
[17:03:03.709]                     }
[17:03:03.709]                     invisible(pathname)
[17:03:03.709]                   }
[17:03:03.709]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:03.709]                     rootPath = tempdir()) 
[17:03:03.709]                   {
[17:03:03.709]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:03.709]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:03.709]                       tmpdir = path, fileext = ".rds")
[17:03:03.709]                     save_rds(obj, file)
[17:03:03.709]                   }
[17:03:03.709]                   saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")
[17:03:03.709]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.709]                   {
[17:03:03.709]                     inherits <- base::inherits
[17:03:03.709]                     invokeRestart <- base::invokeRestart
[17:03:03.709]                     is.null <- base::is.null
[17:03:03.709]                     muffled <- FALSE
[17:03:03.709]                     if (inherits(cond, "message")) {
[17:03:03.709]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:03.709]                       if (muffled) 
[17:03:03.709]                         invokeRestart("muffleMessage")
[17:03:03.709]                     }
[17:03:03.709]                     else if (inherits(cond, "warning")) {
[17:03:03.709]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:03.709]                       if (muffled) 
[17:03:03.709]                         invokeRestart("muffleWarning")
[17:03:03.709]                     }
[17:03:03.709]                     else if (inherits(cond, "condition")) {
[17:03:03.709]                       if (!is.null(pattern)) {
[17:03:03.709]                         computeRestarts <- base::computeRestarts
[17:03:03.709]                         grepl <- base::grepl
[17:03:03.709]                         restarts <- computeRestarts(cond)
[17:03:03.709]                         for (restart in restarts) {
[17:03:03.709]                           name <- restart$name
[17:03:03.709]                           if (is.null(name)) 
[17:03:03.709]                             next
[17:03:03.709]                           if (!grepl(pattern, name)) 
[17:03:03.709]                             next
[17:03:03.709]                           invokeRestart(restart)
[17:03:03.709]                           muffled <- TRUE
[17:03:03.709]                           break
[17:03:03.709]                         }
[17:03:03.709]                       }
[17:03:03.709]                     }
[17:03:03.709]                     invisible(muffled)
[17:03:03.709]                   }
[17:03:03.709]                   muffleCondition(cond)
[17:03:03.709]                 })
[17:03:03.709]             }))
[17:03:03.709]             future::FutureResult(value = ...future.value$value, 
[17:03:03.709]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.709]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.709]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.709]                     ...future.globalenv.names))
[17:03:03.709]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.709]         }, condition = base::local({
[17:03:03.709]             c <- base::c
[17:03:03.709]             inherits <- base::inherits
[17:03:03.709]             invokeRestart <- base::invokeRestart
[17:03:03.709]             length <- base::length
[17:03:03.709]             list <- base::list
[17:03:03.709]             seq.int <- base::seq.int
[17:03:03.709]             signalCondition <- base::signalCondition
[17:03:03.709]             sys.calls <- base::sys.calls
[17:03:03.709]             `[[` <- base::`[[`
[17:03:03.709]             `+` <- base::`+`
[17:03:03.709]             `<<-` <- base::`<<-`
[17:03:03.709]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.709]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.709]                   3L)]
[17:03:03.709]             }
[17:03:03.709]             function(cond) {
[17:03:03.709]                 is_error <- inherits(cond, "error")
[17:03:03.709]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.709]                   NULL)
[17:03:03.709]                 if (is_error) {
[17:03:03.709]                   sessionInformation <- function() {
[17:03:03.709]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.709]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.709]                       search = base::search(), system = base::Sys.info())
[17:03:03.709]                   }
[17:03:03.709]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.709]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.709]                     cond$call), session = sessionInformation(), 
[17:03:03.709]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.709]                   signalCondition(cond)
[17:03:03.709]                 }
[17:03:03.709]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.709]                 "immediateCondition"))) {
[17:03:03.709]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.709]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.709]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.709]                   if (TRUE && !signal) {
[17:03:03.709]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.709]                     {
[17:03:03.709]                       inherits <- base::inherits
[17:03:03.709]                       invokeRestart <- base::invokeRestart
[17:03:03.709]                       is.null <- base::is.null
[17:03:03.709]                       muffled <- FALSE
[17:03:03.709]                       if (inherits(cond, "message")) {
[17:03:03.709]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.709]                         if (muffled) 
[17:03:03.709]                           invokeRestart("muffleMessage")
[17:03:03.709]                       }
[17:03:03.709]                       else if (inherits(cond, "warning")) {
[17:03:03.709]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.709]                         if (muffled) 
[17:03:03.709]                           invokeRestart("muffleWarning")
[17:03:03.709]                       }
[17:03:03.709]                       else if (inherits(cond, "condition")) {
[17:03:03.709]                         if (!is.null(pattern)) {
[17:03:03.709]                           computeRestarts <- base::computeRestarts
[17:03:03.709]                           grepl <- base::grepl
[17:03:03.709]                           restarts <- computeRestarts(cond)
[17:03:03.709]                           for (restart in restarts) {
[17:03:03.709]                             name <- restart$name
[17:03:03.709]                             if (is.null(name)) 
[17:03:03.709]                               next
[17:03:03.709]                             if (!grepl(pattern, name)) 
[17:03:03.709]                               next
[17:03:03.709]                             invokeRestart(restart)
[17:03:03.709]                             muffled <- TRUE
[17:03:03.709]                             break
[17:03:03.709]                           }
[17:03:03.709]                         }
[17:03:03.709]                       }
[17:03:03.709]                       invisible(muffled)
[17:03:03.709]                     }
[17:03:03.709]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.709]                   }
[17:03:03.709]                 }
[17:03:03.709]                 else {
[17:03:03.709]                   if (TRUE) {
[17:03:03.709]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.709]                     {
[17:03:03.709]                       inherits <- base::inherits
[17:03:03.709]                       invokeRestart <- base::invokeRestart
[17:03:03.709]                       is.null <- base::is.null
[17:03:03.709]                       muffled <- FALSE
[17:03:03.709]                       if (inherits(cond, "message")) {
[17:03:03.709]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.709]                         if (muffled) 
[17:03:03.709]                           invokeRestart("muffleMessage")
[17:03:03.709]                       }
[17:03:03.709]                       else if (inherits(cond, "warning")) {
[17:03:03.709]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.709]                         if (muffled) 
[17:03:03.709]                           invokeRestart("muffleWarning")
[17:03:03.709]                       }
[17:03:03.709]                       else if (inherits(cond, "condition")) {
[17:03:03.709]                         if (!is.null(pattern)) {
[17:03:03.709]                           computeRestarts <- base::computeRestarts
[17:03:03.709]                           grepl <- base::grepl
[17:03:03.709]                           restarts <- computeRestarts(cond)
[17:03:03.709]                           for (restart in restarts) {
[17:03:03.709]                             name <- restart$name
[17:03:03.709]                             if (is.null(name)) 
[17:03:03.709]                               next
[17:03:03.709]                             if (!grepl(pattern, name)) 
[17:03:03.709]                               next
[17:03:03.709]                             invokeRestart(restart)
[17:03:03.709]                             muffled <- TRUE
[17:03:03.709]                             break
[17:03:03.709]                           }
[17:03:03.709]                         }
[17:03:03.709]                       }
[17:03:03.709]                       invisible(muffled)
[17:03:03.709]                     }
[17:03:03.709]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.709]                   }
[17:03:03.709]                 }
[17:03:03.709]             }
[17:03:03.709]         }))
[17:03:03.709]     }, error = function(ex) {
[17:03:03.709]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.709]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.709]                 ...future.rng), started = ...future.startTime, 
[17:03:03.709]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.709]             version = "1.8"), class = "FutureResult")
[17:03:03.709]     }, finally = {
[17:03:03.709]         if (!identical(...future.workdir, getwd())) 
[17:03:03.709]             setwd(...future.workdir)
[17:03:03.709]         {
[17:03:03.709]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.709]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.709]             }
[17:03:03.709]             base::options(...future.oldOptions)
[17:03:03.709]             if (.Platform$OS.type == "windows") {
[17:03:03.709]                 old_names <- names(...future.oldEnvVars)
[17:03:03.709]                 envs <- base::Sys.getenv()
[17:03:03.709]                 names <- names(envs)
[17:03:03.709]                 common <- intersect(names, old_names)
[17:03:03.709]                 added <- setdiff(names, old_names)
[17:03:03.709]                 removed <- setdiff(old_names, names)
[17:03:03.709]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.709]                   envs[common]]
[17:03:03.709]                 NAMES <- toupper(changed)
[17:03:03.709]                 args <- list()
[17:03:03.709]                 for (kk in seq_along(NAMES)) {
[17:03:03.709]                   name <- changed[[kk]]
[17:03:03.709]                   NAME <- NAMES[[kk]]
[17:03:03.709]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.709]                     next
[17:03:03.709]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.709]                 }
[17:03:03.709]                 NAMES <- toupper(added)
[17:03:03.709]                 for (kk in seq_along(NAMES)) {
[17:03:03.709]                   name <- added[[kk]]
[17:03:03.709]                   NAME <- NAMES[[kk]]
[17:03:03.709]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.709]                     next
[17:03:03.709]                   args[[name]] <- ""
[17:03:03.709]                 }
[17:03:03.709]                 NAMES <- toupper(removed)
[17:03:03.709]                 for (kk in seq_along(NAMES)) {
[17:03:03.709]                   name <- removed[[kk]]
[17:03:03.709]                   NAME <- NAMES[[kk]]
[17:03:03.709]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.709]                     next
[17:03:03.709]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.709]                 }
[17:03:03.709]                 if (length(args) > 0) 
[17:03:03.709]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.709]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.709]             }
[17:03:03.709]             else {
[17:03:03.709]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.709]             }
[17:03:03.709]             {
[17:03:03.709]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.709]                   0L) {
[17:03:03.709]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.709]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.709]                   base::options(opts)
[17:03:03.709]                 }
[17:03:03.709]                 {
[17:03:03.709]                   {
[17:03:03.709]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:03.709]                     NULL
[17:03:03.709]                   }
[17:03:03.709]                   options(future.plan = NULL)
[17:03:03.709]                   if (is.na(NA_character_)) 
[17:03:03.709]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.709]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.709]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.709]                     .init = FALSE)
[17:03:03.709]                 }
[17:03:03.709]             }
[17:03:03.709]         }
[17:03:03.709]     })
[17:03:03.709]     if (TRUE) {
[17:03:03.709]         base::sink(type = "output", split = FALSE)
[17:03:03.709]         if (TRUE) {
[17:03:03.709]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.709]         }
[17:03:03.709]         else {
[17:03:03.709]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.709]         }
[17:03:03.709]         base::close(...future.stdout)
[17:03:03.709]         ...future.stdout <- NULL
[17:03:03.709]     }
[17:03:03.709]     ...future.result$conditions <- ...future.conditions
[17:03:03.709]     ...future.result$finished <- base::Sys.time()
[17:03:03.709]     ...future.result
[17:03:03.709] }
[17:03:03.711] requestCore(): workers = 2
[17:03:03.713] MulticoreFuture started
 - Creating multicore future #2 ...
[17:03:03.714] plan(): Setting new future strategy stack:
[17:03:03.714] List of future strategies:
[17:03:03.714] 1. sequential:
[17:03:03.714]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.714]    - tweaked: FALSE
[17:03:03.714]    - call: NULL
[17:03:03.715] plan(): nbrOfWorkers() = 1
[17:03:03.717] plan(): Setting new future strategy stack:
[17:03:03.718] List of future strategies:
[17:03:03.718] 1. multicore:
[17:03:03.718]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.718]    - tweaked: FALSE
[17:03:03.718]    - call: plan(multicore)
[17:03:03.718] getGlobalsAndPackages() ...
[17:03:03.719] Not searching for globals
[17:03:03.719] - globals: [0] <none>
[17:03:03.719] getGlobalsAndPackages() ... DONE
[17:03:03.720] Packages needed by the future expression (n = 0): <none>
[17:03:03.720] Packages needed by future strategies (n = 0): <none>
[17:03:03.722] plan(): nbrOfWorkers() = 2
[17:03:03.721] {
[17:03:03.721]     {
[17:03:03.721]         {
[17:03:03.721]             ...future.startTime <- base::Sys.time()
[17:03:03.721]             {
[17:03:03.721]                 {
[17:03:03.721]                   {
[17:03:03.721]                     {
[17:03:03.721]                       base::local({
[17:03:03.721]                         has_future <- base::requireNamespace("future", 
[17:03:03.721]                           quietly = TRUE)
[17:03:03.721]                         if (has_future) {
[17:03:03.721]                           ns <- base::getNamespace("future")
[17:03:03.721]                           version <- ns[[".package"]][["version"]]
[17:03:03.721]                           if (is.null(version)) 
[17:03:03.721]                             version <- utils::packageVersion("future")
[17:03:03.721]                         }
[17:03:03.721]                         else {
[17:03:03.721]                           version <- NULL
[17:03:03.721]                         }
[17:03:03.721]                         if (!has_future || version < "1.8.0") {
[17:03:03.721]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.721]                             "", base::R.version$version.string), 
[17:03:03.721]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:03.721]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.721]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.721]                               "release", "version")], collapse = " "), 
[17:03:03.721]                             hostname = base::Sys.info()[["nodename"]])
[17:03:03.721]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.721]                             info)
[17:03:03.721]                           info <- base::paste(info, collapse = "; ")
[17:03:03.721]                           if (!has_future) {
[17:03:03.721]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.721]                               info)
[17:03:03.721]                           }
[17:03:03.721]                           else {
[17:03:03.721]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.721]                               info, version)
[17:03:03.721]                           }
[17:03:03.721]                           base::stop(msg)
[17:03:03.721]                         }
[17:03:03.721]                       })
[17:03:03.721]                     }
[17:03:03.721]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:03.721]                     base::options(mc.cores = 1L)
[17:03:03.721]                   }
[17:03:03.721]                   ...future.strategy.old <- future::plan("list")
[17:03:03.721]                   options(future.plan = NULL)
[17:03:03.721]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.721]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.721]                 }
[17:03:03.721]                 ...future.workdir <- getwd()
[17:03:03.721]             }
[17:03:03.721]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.721]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.721]         }
[17:03:03.721]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.721]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.721]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.721]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.721]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.721]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.721]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.721]             base::names(...future.oldOptions))
[17:03:03.721]     }
[17:03:03.721]     if (FALSE) {
[17:03:03.721]     }
[17:03:03.721]     else {
[17:03:03.721]         if (TRUE) {
[17:03:03.721]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.721]                 open = "w")
[17:03:03.721]         }
[17:03:03.721]         else {
[17:03:03.721]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.721]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.721]         }
[17:03:03.721]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.721]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.721]             base::sink(type = "output", split = FALSE)
[17:03:03.721]             base::close(...future.stdout)
[17:03:03.721]         }, add = TRUE)
[17:03:03.721]     }
[17:03:03.721]     ...future.frame <- base::sys.nframe()
[17:03:03.721]     ...future.conditions <- base::list()
[17:03:03.721]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.721]     if (FALSE) {
[17:03:03.721]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.721]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.721]     }
[17:03:03.721]     ...future.result <- base::tryCatch({
[17:03:03.721]         base::withCallingHandlers({
[17:03:03.721]             ...future.value <- base::withVisible(base::local({
[17:03:03.721]                 withCallingHandlers({
[17:03:03.721]                   {
[17:03:03.721]                     ii
[17:03:03.721]                   }
[17:03:03.721]                 }, immediateCondition = function(cond) {
[17:03:03.721]                   save_rds <- function (object, pathname, ...) 
[17:03:03.721]                   {
[17:03:03.721]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:03.721]                     if (file_test("-f", pathname_tmp)) {
[17:03:03.721]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.721]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:03.721]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.721]                         fi_tmp[["mtime"]])
[17:03:03.721]                     }
[17:03:03.721]                     tryCatch({
[17:03:03.721]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:03.721]                     }, error = function(ex) {
[17:03:03.721]                       msg <- conditionMessage(ex)
[17:03:03.721]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.721]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:03.721]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.721]                         fi_tmp[["mtime"]], msg)
[17:03:03.721]                       ex$message <- msg
[17:03:03.721]                       stop(ex)
[17:03:03.721]                     })
[17:03:03.721]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:03.721]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:03.721]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:03.721]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.721]                       fi <- file.info(pathname)
[17:03:03.721]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:03.721]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.721]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:03.721]                         fi[["size"]], fi[["mtime"]])
[17:03:03.721]                       stop(msg)
[17:03:03.721]                     }
[17:03:03.721]                     invisible(pathname)
[17:03:03.721]                   }
[17:03:03.721]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:03.721]                     rootPath = tempdir()) 
[17:03:03.721]                   {
[17:03:03.721]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:03.721]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:03.721]                       tmpdir = path, fileext = ".rds")
[17:03:03.721]                     save_rds(obj, file)
[17:03:03.721]                   }
[17:03:03.721]                   saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")
[17:03:03.721]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.721]                   {
[17:03:03.721]                     inherits <- base::inherits
[17:03:03.721]                     invokeRestart <- base::invokeRestart
[17:03:03.721]                     is.null <- base::is.null
[17:03:03.721]                     muffled <- FALSE
[17:03:03.721]                     if (inherits(cond, "message")) {
[17:03:03.721]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:03.721]                       if (muffled) 
[17:03:03.721]                         invokeRestart("muffleMessage")
[17:03:03.721]                     }
[17:03:03.721]                     else if (inherits(cond, "warning")) {
[17:03:03.721]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:03.721]                       if (muffled) 
[17:03:03.721]                         invokeRestart("muffleWarning")
[17:03:03.721]                     }
[17:03:03.721]                     else if (inherits(cond, "condition")) {
[17:03:03.721]                       if (!is.null(pattern)) {
[17:03:03.721]                         computeRestarts <- base::computeRestarts
[17:03:03.721]                         grepl <- base::grepl
[17:03:03.721]                         restarts <- computeRestarts(cond)
[17:03:03.721]                         for (restart in restarts) {
[17:03:03.721]                           name <- restart$name
[17:03:03.721]                           if (is.null(name)) 
[17:03:03.721]                             next
[17:03:03.721]                           if (!grepl(pattern, name)) 
[17:03:03.721]                             next
[17:03:03.721]                           invokeRestart(restart)
[17:03:03.721]                           muffled <- TRUE
[17:03:03.721]                           break
[17:03:03.721]                         }
[17:03:03.721]                       }
[17:03:03.721]                     }
[17:03:03.721]                     invisible(muffled)
[17:03:03.721]                   }
[17:03:03.721]                   muffleCondition(cond)
[17:03:03.721]                 })
[17:03:03.721]             }))
[17:03:03.721]             future::FutureResult(value = ...future.value$value, 
[17:03:03.721]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.721]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.721]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.721]                     ...future.globalenv.names))
[17:03:03.721]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.721]         }, condition = base::local({
[17:03:03.721]             c <- base::c
[17:03:03.721]             inherits <- base::inherits
[17:03:03.721]             invokeRestart <- base::invokeRestart
[17:03:03.721]             length <- base::length
[17:03:03.721]             list <- base::list
[17:03:03.721]             seq.int <- base::seq.int
[17:03:03.721]             signalCondition <- base::signalCondition
[17:03:03.721]             sys.calls <- base::sys.calls
[17:03:03.721]             `[[` <- base::`[[`
[17:03:03.721]             `+` <- base::`+`
[17:03:03.721]             `<<-` <- base::`<<-`
[17:03:03.721]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.721]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.721]                   3L)]
[17:03:03.721]             }
[17:03:03.721]             function(cond) {
[17:03:03.721]                 is_error <- inherits(cond, "error")
[17:03:03.721]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.721]                   NULL)
[17:03:03.721]                 if (is_error) {
[17:03:03.721]                   sessionInformation <- function() {
[17:03:03.721]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.721]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.721]                       search = base::search(), system = base::Sys.info())
[17:03:03.721]                   }
[17:03:03.721]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.721]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.721]                     cond$call), session = sessionInformation(), 
[17:03:03.721]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.721]                   signalCondition(cond)
[17:03:03.721]                 }
[17:03:03.721]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.721]                 "immediateCondition"))) {
[17:03:03.721]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.721]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.721]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.721]                   if (TRUE && !signal) {
[17:03:03.721]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.721]                     {
[17:03:03.721]                       inherits <- base::inherits
[17:03:03.721]                       invokeRestart <- base::invokeRestart
[17:03:03.721]                       is.null <- base::is.null
[17:03:03.721]                       muffled <- FALSE
[17:03:03.721]                       if (inherits(cond, "message")) {
[17:03:03.721]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.721]                         if (muffled) 
[17:03:03.721]                           invokeRestart("muffleMessage")
[17:03:03.721]                       }
[17:03:03.721]                       else if (inherits(cond, "warning")) {
[17:03:03.721]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.721]                         if (muffled) 
[17:03:03.721]                           invokeRestart("muffleWarning")
[17:03:03.721]                       }
[17:03:03.721]                       else if (inherits(cond, "condition")) {
[17:03:03.721]                         if (!is.null(pattern)) {
[17:03:03.721]                           computeRestarts <- base::computeRestarts
[17:03:03.721]                           grepl <- base::grepl
[17:03:03.721]                           restarts <- computeRestarts(cond)
[17:03:03.721]                           for (restart in restarts) {
[17:03:03.721]                             name <- restart$name
[17:03:03.721]                             if (is.null(name)) 
[17:03:03.721]                               next
[17:03:03.721]                             if (!grepl(pattern, name)) 
[17:03:03.721]                               next
[17:03:03.721]                             invokeRestart(restart)
[17:03:03.721]                             muffled <- TRUE
[17:03:03.721]                             break
[17:03:03.721]                           }
[17:03:03.721]                         }
[17:03:03.721]                       }
[17:03:03.721]                       invisible(muffled)
[17:03:03.721]                     }
[17:03:03.721]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.721]                   }
[17:03:03.721]                 }
[17:03:03.721]                 else {
[17:03:03.721]                   if (TRUE) {
[17:03:03.721]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.721]                     {
[17:03:03.721]                       inherits <- base::inherits
[17:03:03.721]                       invokeRestart <- base::invokeRestart
[17:03:03.721]                       is.null <- base::is.null
[17:03:03.721]                       muffled <- FALSE
[17:03:03.721]                       if (inherits(cond, "message")) {
[17:03:03.721]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.721]                         if (muffled) 
[17:03:03.721]                           invokeRestart("muffleMessage")
[17:03:03.721]                       }
[17:03:03.721]                       else if (inherits(cond, "warning")) {
[17:03:03.721]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.721]                         if (muffled) 
[17:03:03.721]                           invokeRestart("muffleWarning")
[17:03:03.721]                       }
[17:03:03.721]                       else if (inherits(cond, "condition")) {
[17:03:03.721]                         if (!is.null(pattern)) {
[17:03:03.721]                           computeRestarts <- base::computeRestarts
[17:03:03.721]                           grepl <- base::grepl
[17:03:03.721]                           restarts <- computeRestarts(cond)
[17:03:03.721]                           for (restart in restarts) {
[17:03:03.721]                             name <- restart$name
[17:03:03.721]                             if (is.null(name)) 
[17:03:03.721]                               next
[17:03:03.721]                             if (!grepl(pattern, name)) 
[17:03:03.721]                               next
[17:03:03.721]                             invokeRestart(restart)
[17:03:03.721]                             muffled <- TRUE
[17:03:03.721]                             break
[17:03:03.721]                           }
[17:03:03.721]                         }
[17:03:03.721]                       }
[17:03:03.721]                       invisible(muffled)
[17:03:03.721]                     }
[17:03:03.721]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.721]                   }
[17:03:03.721]                 }
[17:03:03.721]             }
[17:03:03.721]         }))
[17:03:03.721]     }, error = function(ex) {
[17:03:03.721]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.721]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.721]                 ...future.rng), started = ...future.startTime, 
[17:03:03.721]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.721]             version = "1.8"), class = "FutureResult")
[17:03:03.721]     }, finally = {
[17:03:03.721]         if (!identical(...future.workdir, getwd())) 
[17:03:03.721]             setwd(...future.workdir)
[17:03:03.721]         {
[17:03:03.721]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.721]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.721]             }
[17:03:03.721]             base::options(...future.oldOptions)
[17:03:03.721]             if (.Platform$OS.type == "windows") {
[17:03:03.721]                 old_names <- names(...future.oldEnvVars)
[17:03:03.721]                 envs <- base::Sys.getenv()
[17:03:03.721]                 names <- names(envs)
[17:03:03.721]                 common <- intersect(names, old_names)
[17:03:03.721]                 added <- setdiff(names, old_names)
[17:03:03.721]                 removed <- setdiff(old_names, names)
[17:03:03.721]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.721]                   envs[common]]
[17:03:03.721]                 NAMES <- toupper(changed)
[17:03:03.721]                 args <- list()
[17:03:03.721]                 for (kk in seq_along(NAMES)) {
[17:03:03.721]                   name <- changed[[kk]]
[17:03:03.721]                   NAME <- NAMES[[kk]]
[17:03:03.721]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.721]                     next
[17:03:03.721]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.721]                 }
[17:03:03.721]                 NAMES <- toupper(added)
[17:03:03.721]                 for (kk in seq_along(NAMES)) {
[17:03:03.721]                   name <- added[[kk]]
[17:03:03.721]                   NAME <- NAMES[[kk]]
[17:03:03.721]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.721]                     next
[17:03:03.721]                   args[[name]] <- ""
[17:03:03.721]                 }
[17:03:03.721]                 NAMES <- toupper(removed)
[17:03:03.721]                 for (kk in seq_along(NAMES)) {
[17:03:03.721]                   name <- removed[[kk]]
[17:03:03.721]                   NAME <- NAMES[[kk]]
[17:03:03.721]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.721]                     next
[17:03:03.721]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.721]                 }
[17:03:03.721]                 if (length(args) > 0) 
[17:03:03.721]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.721]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.721]             }
[17:03:03.721]             else {
[17:03:03.721]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.721]             }
[17:03:03.721]             {
[17:03:03.721]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.721]                   0L) {
[17:03:03.721]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.721]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.721]                   base::options(opts)
[17:03:03.721]                 }
[17:03:03.721]                 {
[17:03:03.721]                   {
[17:03:03.721]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:03.721]                     NULL
[17:03:03.721]                   }
[17:03:03.721]                   options(future.plan = NULL)
[17:03:03.721]                   if (is.na(NA_character_)) 
[17:03:03.721]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.721]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.721]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.721]                     .init = FALSE)
[17:03:03.721]                 }
[17:03:03.721]             }
[17:03:03.721]         }
[17:03:03.721]     })
[17:03:03.721]     if (TRUE) {
[17:03:03.721]         base::sink(type = "output", split = FALSE)
[17:03:03.721]         if (TRUE) {
[17:03:03.721]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.721]         }
[17:03:03.721]         else {
[17:03:03.721]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.721]         }
[17:03:03.721]         base::close(...future.stdout)
[17:03:03.721]         ...future.stdout <- NULL
[17:03:03.721]     }
[17:03:03.721]     ...future.result$conditions <- ...future.conditions
[17:03:03.721]     ...future.result$finished <- base::Sys.time()
[17:03:03.721]     ...future.result
[17:03:03.721] }
[17:03:03.724] requestCore(): workers = 2
[17:03:03.726] MulticoreFuture started
 - Creating multicore future #3 ...
[17:03:03.728] plan(): Setting new future strategy stack:
[17:03:03.728] List of future strategies:
[17:03:03.728] 1. sequential:
[17:03:03.728]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.728]    - tweaked: FALSE
[17:03:03.728]    - call: NULL
[17:03:03.729] plan(): nbrOfWorkers() = 1
[17:03:03.731] plan(): Setting new future strategy stack:
[17:03:03.731] List of future strategies:
[17:03:03.731] 1. multicore:
[17:03:03.731]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.731]    - tweaked: FALSE
[17:03:03.731]    - call: plan(multicore)
[17:03:03.732] getGlobalsAndPackages() ...
[17:03:03.732] Not searching for globals
[17:03:03.732] - globals: [0] <none>
[17:03:03.733] getGlobalsAndPackages() ... DONE
[17:03:03.733] Packages needed by the future expression (n = 0): <none>
[17:03:03.734] Packages needed by future strategies (n = 0): <none>
[17:03:03.736] plan(): nbrOfWorkers() = 2
[17:03:03.734] {
[17:03:03.734]     {
[17:03:03.734]         {
[17:03:03.734]             ...future.startTime <- base::Sys.time()
[17:03:03.734]             {
[17:03:03.734]                 {
[17:03:03.734]                   {
[17:03:03.734]                     {
[17:03:03.734]                       base::local({
[17:03:03.734]                         has_future <- base::requireNamespace("future", 
[17:03:03.734]                           quietly = TRUE)
[17:03:03.734]                         if (has_future) {
[17:03:03.734]                           ns <- base::getNamespace("future")
[17:03:03.734]                           version <- ns[[".package"]][["version"]]
[17:03:03.734]                           if (is.null(version)) 
[17:03:03.734]                             version <- utils::packageVersion("future")
[17:03:03.734]                         }
[17:03:03.734]                         else {
[17:03:03.734]                           version <- NULL
[17:03:03.734]                         }
[17:03:03.734]                         if (!has_future || version < "1.8.0") {
[17:03:03.734]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.734]                             "", base::R.version$version.string), 
[17:03:03.734]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:03.734]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.734]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.734]                               "release", "version")], collapse = " "), 
[17:03:03.734]                             hostname = base::Sys.info()[["nodename"]])
[17:03:03.734]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.734]                             info)
[17:03:03.734]                           info <- base::paste(info, collapse = "; ")
[17:03:03.734]                           if (!has_future) {
[17:03:03.734]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.734]                               info)
[17:03:03.734]                           }
[17:03:03.734]                           else {
[17:03:03.734]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.734]                               info, version)
[17:03:03.734]                           }
[17:03:03.734]                           base::stop(msg)
[17:03:03.734]                         }
[17:03:03.734]                       })
[17:03:03.734]                     }
[17:03:03.734]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:03.734]                     base::options(mc.cores = 1L)
[17:03:03.734]                   }
[17:03:03.734]                   ...future.strategy.old <- future::plan("list")
[17:03:03.734]                   options(future.plan = NULL)
[17:03:03.734]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.734]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.734]                 }
[17:03:03.734]                 ...future.workdir <- getwd()
[17:03:03.734]             }
[17:03:03.734]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.734]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.734]         }
[17:03:03.734]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.734]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.734]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.734]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.734]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.734]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.734]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.734]             base::names(...future.oldOptions))
[17:03:03.734]     }
[17:03:03.734]     if (FALSE) {
[17:03:03.734]     }
[17:03:03.734]     else {
[17:03:03.734]         if (TRUE) {
[17:03:03.734]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.734]                 open = "w")
[17:03:03.734]         }
[17:03:03.734]         else {
[17:03:03.734]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.734]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.734]         }
[17:03:03.734]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.734]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.734]             base::sink(type = "output", split = FALSE)
[17:03:03.734]             base::close(...future.stdout)
[17:03:03.734]         }, add = TRUE)
[17:03:03.734]     }
[17:03:03.734]     ...future.frame <- base::sys.nframe()
[17:03:03.734]     ...future.conditions <- base::list()
[17:03:03.734]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.734]     if (FALSE) {
[17:03:03.734]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.734]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.734]     }
[17:03:03.734]     ...future.result <- base::tryCatch({
[17:03:03.734]         base::withCallingHandlers({
[17:03:03.734]             ...future.value <- base::withVisible(base::local({
[17:03:03.734]                 withCallingHandlers({
[17:03:03.734]                   {
[17:03:03.734]                     ii
[17:03:03.734]                   }
[17:03:03.734]                 }, immediateCondition = function(cond) {
[17:03:03.734]                   save_rds <- function (object, pathname, ...) 
[17:03:03.734]                   {
[17:03:03.734]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:03.734]                     if (file_test("-f", pathname_tmp)) {
[17:03:03.734]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.734]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:03.734]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.734]                         fi_tmp[["mtime"]])
[17:03:03.734]                     }
[17:03:03.734]                     tryCatch({
[17:03:03.734]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:03.734]                     }, error = function(ex) {
[17:03:03.734]                       msg <- conditionMessage(ex)
[17:03:03.734]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.734]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:03.734]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.734]                         fi_tmp[["mtime"]], msg)
[17:03:03.734]                       ex$message <- msg
[17:03:03.734]                       stop(ex)
[17:03:03.734]                     })
[17:03:03.734]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:03.734]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:03.734]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:03.734]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.734]                       fi <- file.info(pathname)
[17:03:03.734]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:03.734]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.734]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:03.734]                         fi[["size"]], fi[["mtime"]])
[17:03:03.734]                       stop(msg)
[17:03:03.734]                     }
[17:03:03.734]                     invisible(pathname)
[17:03:03.734]                   }
[17:03:03.734]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:03.734]                     rootPath = tempdir()) 
[17:03:03.734]                   {
[17:03:03.734]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:03.734]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:03.734]                       tmpdir = path, fileext = ".rds")
[17:03:03.734]                     save_rds(obj, file)
[17:03:03.734]                   }
[17:03:03.734]                   saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")
[17:03:03.734]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.734]                   {
[17:03:03.734]                     inherits <- base::inherits
[17:03:03.734]                     invokeRestart <- base::invokeRestart
[17:03:03.734]                     is.null <- base::is.null
[17:03:03.734]                     muffled <- FALSE
[17:03:03.734]                     if (inherits(cond, "message")) {
[17:03:03.734]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:03.734]                       if (muffled) 
[17:03:03.734]                         invokeRestart("muffleMessage")
[17:03:03.734]                     }
[17:03:03.734]                     else if (inherits(cond, "warning")) {
[17:03:03.734]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:03.734]                       if (muffled) 
[17:03:03.734]                         invokeRestart("muffleWarning")
[17:03:03.734]                     }
[17:03:03.734]                     else if (inherits(cond, "condition")) {
[17:03:03.734]                       if (!is.null(pattern)) {
[17:03:03.734]                         computeRestarts <- base::computeRestarts
[17:03:03.734]                         grepl <- base::grepl
[17:03:03.734]                         restarts <- computeRestarts(cond)
[17:03:03.734]                         for (restart in restarts) {
[17:03:03.734]                           name <- restart$name
[17:03:03.734]                           if (is.null(name)) 
[17:03:03.734]                             next
[17:03:03.734]                           if (!grepl(pattern, name)) 
[17:03:03.734]                             next
[17:03:03.734]                           invokeRestart(restart)
[17:03:03.734]                           muffled <- TRUE
[17:03:03.734]                           break
[17:03:03.734]                         }
[17:03:03.734]                       }
[17:03:03.734]                     }
[17:03:03.734]                     invisible(muffled)
[17:03:03.734]                   }
[17:03:03.734]                   muffleCondition(cond)
[17:03:03.734]                 })
[17:03:03.734]             }))
[17:03:03.734]             future::FutureResult(value = ...future.value$value, 
[17:03:03.734]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.734]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.734]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.734]                     ...future.globalenv.names))
[17:03:03.734]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.734]         }, condition = base::local({
[17:03:03.734]             c <- base::c
[17:03:03.734]             inherits <- base::inherits
[17:03:03.734]             invokeRestart <- base::invokeRestart
[17:03:03.734]             length <- base::length
[17:03:03.734]             list <- base::list
[17:03:03.734]             seq.int <- base::seq.int
[17:03:03.734]             signalCondition <- base::signalCondition
[17:03:03.734]             sys.calls <- base::sys.calls
[17:03:03.734]             `[[` <- base::`[[`
[17:03:03.734]             `+` <- base::`+`
[17:03:03.734]             `<<-` <- base::`<<-`
[17:03:03.734]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.734]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.734]                   3L)]
[17:03:03.734]             }
[17:03:03.734]             function(cond) {
[17:03:03.734]                 is_error <- inherits(cond, "error")
[17:03:03.734]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.734]                   NULL)
[17:03:03.734]                 if (is_error) {
[17:03:03.734]                   sessionInformation <- function() {
[17:03:03.734]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.734]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.734]                       search = base::search(), system = base::Sys.info())
[17:03:03.734]                   }
[17:03:03.734]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.734]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.734]                     cond$call), session = sessionInformation(), 
[17:03:03.734]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.734]                   signalCondition(cond)
[17:03:03.734]                 }
[17:03:03.734]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.734]                 "immediateCondition"))) {
[17:03:03.734]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.734]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.734]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.734]                   if (TRUE && !signal) {
[17:03:03.734]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.734]                     {
[17:03:03.734]                       inherits <- base::inherits
[17:03:03.734]                       invokeRestart <- base::invokeRestart
[17:03:03.734]                       is.null <- base::is.null
[17:03:03.734]                       muffled <- FALSE
[17:03:03.734]                       if (inherits(cond, "message")) {
[17:03:03.734]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.734]                         if (muffled) 
[17:03:03.734]                           invokeRestart("muffleMessage")
[17:03:03.734]                       }
[17:03:03.734]                       else if (inherits(cond, "warning")) {
[17:03:03.734]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.734]                         if (muffled) 
[17:03:03.734]                           invokeRestart("muffleWarning")
[17:03:03.734]                       }
[17:03:03.734]                       else if (inherits(cond, "condition")) {
[17:03:03.734]                         if (!is.null(pattern)) {
[17:03:03.734]                           computeRestarts <- base::computeRestarts
[17:03:03.734]                           grepl <- base::grepl
[17:03:03.734]                           restarts <- computeRestarts(cond)
[17:03:03.734]                           for (restart in restarts) {
[17:03:03.734]                             name <- restart$name
[17:03:03.734]                             if (is.null(name)) 
[17:03:03.734]                               next
[17:03:03.734]                             if (!grepl(pattern, name)) 
[17:03:03.734]                               next
[17:03:03.734]                             invokeRestart(restart)
[17:03:03.734]                             muffled <- TRUE
[17:03:03.734]                             break
[17:03:03.734]                           }
[17:03:03.734]                         }
[17:03:03.734]                       }
[17:03:03.734]                       invisible(muffled)
[17:03:03.734]                     }
[17:03:03.734]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.734]                   }
[17:03:03.734]                 }
[17:03:03.734]                 else {
[17:03:03.734]                   if (TRUE) {
[17:03:03.734]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.734]                     {
[17:03:03.734]                       inherits <- base::inherits
[17:03:03.734]                       invokeRestart <- base::invokeRestart
[17:03:03.734]                       is.null <- base::is.null
[17:03:03.734]                       muffled <- FALSE
[17:03:03.734]                       if (inherits(cond, "message")) {
[17:03:03.734]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.734]                         if (muffled) 
[17:03:03.734]                           invokeRestart("muffleMessage")
[17:03:03.734]                       }
[17:03:03.734]                       else if (inherits(cond, "warning")) {
[17:03:03.734]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.734]                         if (muffled) 
[17:03:03.734]                           invokeRestart("muffleWarning")
[17:03:03.734]                       }
[17:03:03.734]                       else if (inherits(cond, "condition")) {
[17:03:03.734]                         if (!is.null(pattern)) {
[17:03:03.734]                           computeRestarts <- base::computeRestarts
[17:03:03.734]                           grepl <- base::grepl
[17:03:03.734]                           restarts <- computeRestarts(cond)
[17:03:03.734]                           for (restart in restarts) {
[17:03:03.734]                             name <- restart$name
[17:03:03.734]                             if (is.null(name)) 
[17:03:03.734]                               next
[17:03:03.734]                             if (!grepl(pattern, name)) 
[17:03:03.734]                               next
[17:03:03.734]                             invokeRestart(restart)
[17:03:03.734]                             muffled <- TRUE
[17:03:03.734]                             break
[17:03:03.734]                           }
[17:03:03.734]                         }
[17:03:03.734]                       }
[17:03:03.734]                       invisible(muffled)
[17:03:03.734]                     }
[17:03:03.734]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.734]                   }
[17:03:03.734]                 }
[17:03:03.734]             }
[17:03:03.734]         }))
[17:03:03.734]     }, error = function(ex) {
[17:03:03.734]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.734]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.734]                 ...future.rng), started = ...future.startTime, 
[17:03:03.734]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.734]             version = "1.8"), class = "FutureResult")
[17:03:03.734]     }, finally = {
[17:03:03.734]         if (!identical(...future.workdir, getwd())) 
[17:03:03.734]             setwd(...future.workdir)
[17:03:03.734]         {
[17:03:03.734]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.734]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.734]             }
[17:03:03.734]             base::options(...future.oldOptions)
[17:03:03.734]             if (.Platform$OS.type == "windows") {
[17:03:03.734]                 old_names <- names(...future.oldEnvVars)
[17:03:03.734]                 envs <- base::Sys.getenv()
[17:03:03.734]                 names <- names(envs)
[17:03:03.734]                 common <- intersect(names, old_names)
[17:03:03.734]                 added <- setdiff(names, old_names)
[17:03:03.734]                 removed <- setdiff(old_names, names)
[17:03:03.734]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.734]                   envs[common]]
[17:03:03.734]                 NAMES <- toupper(changed)
[17:03:03.734]                 args <- list()
[17:03:03.734]                 for (kk in seq_along(NAMES)) {
[17:03:03.734]                   name <- changed[[kk]]
[17:03:03.734]                   NAME <- NAMES[[kk]]
[17:03:03.734]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.734]                     next
[17:03:03.734]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.734]                 }
[17:03:03.734]                 NAMES <- toupper(added)
[17:03:03.734]                 for (kk in seq_along(NAMES)) {
[17:03:03.734]                   name <- added[[kk]]
[17:03:03.734]                   NAME <- NAMES[[kk]]
[17:03:03.734]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.734]                     next
[17:03:03.734]                   args[[name]] <- ""
[17:03:03.734]                 }
[17:03:03.734]                 NAMES <- toupper(removed)
[17:03:03.734]                 for (kk in seq_along(NAMES)) {
[17:03:03.734]                   name <- removed[[kk]]
[17:03:03.734]                   NAME <- NAMES[[kk]]
[17:03:03.734]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.734]                     next
[17:03:03.734]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.734]                 }
[17:03:03.734]                 if (length(args) > 0) 
[17:03:03.734]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.734]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.734]             }
[17:03:03.734]             else {
[17:03:03.734]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.734]             }
[17:03:03.734]             {
[17:03:03.734]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.734]                   0L) {
[17:03:03.734]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.734]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.734]                   base::options(opts)
[17:03:03.734]                 }
[17:03:03.734]                 {
[17:03:03.734]                   {
[17:03:03.734]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:03.734]                     NULL
[17:03:03.734]                   }
[17:03:03.734]                   options(future.plan = NULL)
[17:03:03.734]                   if (is.na(NA_character_)) 
[17:03:03.734]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.734]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.734]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.734]                     .init = FALSE)
[17:03:03.734]                 }
[17:03:03.734]             }
[17:03:03.734]         }
[17:03:03.734]     })
[17:03:03.734]     if (TRUE) {
[17:03:03.734]         base::sink(type = "output", split = FALSE)
[17:03:03.734]         if (TRUE) {
[17:03:03.734]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.734]         }
[17:03:03.734]         else {
[17:03:03.734]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.734]         }
[17:03:03.734]         base::close(...future.stdout)
[17:03:03.734]         ...future.stdout <- NULL
[17:03:03.734]     }
[17:03:03.734]     ...future.result$conditions <- ...future.conditions
[17:03:03.734]     ...future.result$finished <- base::Sys.time()
[17:03:03.734]     ...future.result
[17:03:03.734] }
[17:03:03.738] requestCore(): workers = 2
[17:03:03.738] Poll #1 (0): usedCores() = 2, workers = 2
[17:03:03.749] result() for MulticoreFuture ...
[17:03:03.750] result() for MulticoreFuture ...
[17:03:03.750] result() for MulticoreFuture ... done
[17:03:03.750] result() for MulticoreFuture ... done
[17:03:03.751] result() for MulticoreFuture ...
[17:03:03.751] result() for MulticoreFuture ... done
[17:03:03.753] MulticoreFuture started
 - Creating multicore future #4 ...
[17:03:03.754] plan(): Setting new future strategy stack:
[17:03:03.755] List of future strategies:
[17:03:03.755] 1. sequential:
[17:03:03.755]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.755]    - tweaked: FALSE
[17:03:03.755]    - call: NULL
[17:03:03.756] plan(): nbrOfWorkers() = 1
[17:03:03.758] plan(): Setting new future strategy stack:
[17:03:03.758] List of future strategies:
[17:03:03.758] 1. multicore:
[17:03:03.758]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.758]    - tweaked: FALSE
[17:03:03.758]    - call: plan(multicore)
[17:03:03.759] getGlobalsAndPackages() ...
[17:03:03.759] Not searching for globals
[17:03:03.759] - globals: [0] <none>
[17:03:03.760] getGlobalsAndPackages() ... DONE
[17:03:03.760] Packages needed by the future expression (n = 0): <none>
[17:03:03.761] Packages needed by future strategies (n = 0): <none>
[17:03:03.763] plan(): nbrOfWorkers() = 2
[17:03:03.761] {
[17:03:03.761]     {
[17:03:03.761]         {
[17:03:03.761]             ...future.startTime <- base::Sys.time()
[17:03:03.761]             {
[17:03:03.761]                 {
[17:03:03.761]                   {
[17:03:03.761]                     {
[17:03:03.761]                       base::local({
[17:03:03.761]                         has_future <- base::requireNamespace("future", 
[17:03:03.761]                           quietly = TRUE)
[17:03:03.761]                         if (has_future) {
[17:03:03.761]                           ns <- base::getNamespace("future")
[17:03:03.761]                           version <- ns[[".package"]][["version"]]
[17:03:03.761]                           if (is.null(version)) 
[17:03:03.761]                             version <- utils::packageVersion("future")
[17:03:03.761]                         }
[17:03:03.761]                         else {
[17:03:03.761]                           version <- NULL
[17:03:03.761]                         }
[17:03:03.761]                         if (!has_future || version < "1.8.0") {
[17:03:03.761]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.761]                             "", base::R.version$version.string), 
[17:03:03.761]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:03.761]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.761]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.761]                               "release", "version")], collapse = " "), 
[17:03:03.761]                             hostname = base::Sys.info()[["nodename"]])
[17:03:03.761]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.761]                             info)
[17:03:03.761]                           info <- base::paste(info, collapse = "; ")
[17:03:03.761]                           if (!has_future) {
[17:03:03.761]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.761]                               info)
[17:03:03.761]                           }
[17:03:03.761]                           else {
[17:03:03.761]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.761]                               info, version)
[17:03:03.761]                           }
[17:03:03.761]                           base::stop(msg)
[17:03:03.761]                         }
[17:03:03.761]                       })
[17:03:03.761]                     }
[17:03:03.761]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:03.761]                     base::options(mc.cores = 1L)
[17:03:03.761]                   }
[17:03:03.761]                   ...future.strategy.old <- future::plan("list")
[17:03:03.761]                   options(future.plan = NULL)
[17:03:03.761]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.761]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.761]                 }
[17:03:03.761]                 ...future.workdir <- getwd()
[17:03:03.761]             }
[17:03:03.761]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.761]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.761]         }
[17:03:03.761]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.761]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.761]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.761]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.761]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.761]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.761]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.761]             base::names(...future.oldOptions))
[17:03:03.761]     }
[17:03:03.761]     if (FALSE) {
[17:03:03.761]     }
[17:03:03.761]     else {
[17:03:03.761]         if (TRUE) {
[17:03:03.761]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.761]                 open = "w")
[17:03:03.761]         }
[17:03:03.761]         else {
[17:03:03.761]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.761]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.761]         }
[17:03:03.761]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.761]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.761]             base::sink(type = "output", split = FALSE)
[17:03:03.761]             base::close(...future.stdout)
[17:03:03.761]         }, add = TRUE)
[17:03:03.761]     }
[17:03:03.761]     ...future.frame <- base::sys.nframe()
[17:03:03.761]     ...future.conditions <- base::list()
[17:03:03.761]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.761]     if (FALSE) {
[17:03:03.761]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.761]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.761]     }
[17:03:03.761]     ...future.result <- base::tryCatch({
[17:03:03.761]         base::withCallingHandlers({
[17:03:03.761]             ...future.value <- base::withVisible(base::local({
[17:03:03.761]                 withCallingHandlers({
[17:03:03.761]                   {
[17:03:03.761]                     ii
[17:03:03.761]                   }
[17:03:03.761]                 }, immediateCondition = function(cond) {
[17:03:03.761]                   save_rds <- function (object, pathname, ...) 
[17:03:03.761]                   {
[17:03:03.761]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:03.761]                     if (file_test("-f", pathname_tmp)) {
[17:03:03.761]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.761]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:03.761]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.761]                         fi_tmp[["mtime"]])
[17:03:03.761]                     }
[17:03:03.761]                     tryCatch({
[17:03:03.761]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:03.761]                     }, error = function(ex) {
[17:03:03.761]                       msg <- conditionMessage(ex)
[17:03:03.761]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.761]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:03.761]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.761]                         fi_tmp[["mtime"]], msg)
[17:03:03.761]                       ex$message <- msg
[17:03:03.761]                       stop(ex)
[17:03:03.761]                     })
[17:03:03.761]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:03.761]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:03.761]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:03.761]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.761]                       fi <- file.info(pathname)
[17:03:03.761]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:03.761]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.761]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:03.761]                         fi[["size"]], fi[["mtime"]])
[17:03:03.761]                       stop(msg)
[17:03:03.761]                     }
[17:03:03.761]                     invisible(pathname)
[17:03:03.761]                   }
[17:03:03.761]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:03.761]                     rootPath = tempdir()) 
[17:03:03.761]                   {
[17:03:03.761]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:03.761]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:03.761]                       tmpdir = path, fileext = ".rds")
[17:03:03.761]                     save_rds(obj, file)
[17:03:03.761]                   }
[17:03:03.761]                   saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")
[17:03:03.761]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.761]                   {
[17:03:03.761]                     inherits <- base::inherits
[17:03:03.761]                     invokeRestart <- base::invokeRestart
[17:03:03.761]                     is.null <- base::is.null
[17:03:03.761]                     muffled <- FALSE
[17:03:03.761]                     if (inherits(cond, "message")) {
[17:03:03.761]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:03.761]                       if (muffled) 
[17:03:03.761]                         invokeRestart("muffleMessage")
[17:03:03.761]                     }
[17:03:03.761]                     else if (inherits(cond, "warning")) {
[17:03:03.761]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:03.761]                       if (muffled) 
[17:03:03.761]                         invokeRestart("muffleWarning")
[17:03:03.761]                     }
[17:03:03.761]                     else if (inherits(cond, "condition")) {
[17:03:03.761]                       if (!is.null(pattern)) {
[17:03:03.761]                         computeRestarts <- base::computeRestarts
[17:03:03.761]                         grepl <- base::grepl
[17:03:03.761]                         restarts <- computeRestarts(cond)
[17:03:03.761]                         for (restart in restarts) {
[17:03:03.761]                           name <- restart$name
[17:03:03.761]                           if (is.null(name)) 
[17:03:03.761]                             next
[17:03:03.761]                           if (!grepl(pattern, name)) 
[17:03:03.761]                             next
[17:03:03.761]                           invokeRestart(restart)
[17:03:03.761]                           muffled <- TRUE
[17:03:03.761]                           break
[17:03:03.761]                         }
[17:03:03.761]                       }
[17:03:03.761]                     }
[17:03:03.761]                     invisible(muffled)
[17:03:03.761]                   }
[17:03:03.761]                   muffleCondition(cond)
[17:03:03.761]                 })
[17:03:03.761]             }))
[17:03:03.761]             future::FutureResult(value = ...future.value$value, 
[17:03:03.761]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.761]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.761]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.761]                     ...future.globalenv.names))
[17:03:03.761]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.761]         }, condition = base::local({
[17:03:03.761]             c <- base::c
[17:03:03.761]             inherits <- base::inherits
[17:03:03.761]             invokeRestart <- base::invokeRestart
[17:03:03.761]             length <- base::length
[17:03:03.761]             list <- base::list
[17:03:03.761]             seq.int <- base::seq.int
[17:03:03.761]             signalCondition <- base::signalCondition
[17:03:03.761]             sys.calls <- base::sys.calls
[17:03:03.761]             `[[` <- base::`[[`
[17:03:03.761]             `+` <- base::`+`
[17:03:03.761]             `<<-` <- base::`<<-`
[17:03:03.761]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.761]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.761]                   3L)]
[17:03:03.761]             }
[17:03:03.761]             function(cond) {
[17:03:03.761]                 is_error <- inherits(cond, "error")
[17:03:03.761]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.761]                   NULL)
[17:03:03.761]                 if (is_error) {
[17:03:03.761]                   sessionInformation <- function() {
[17:03:03.761]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.761]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.761]                       search = base::search(), system = base::Sys.info())
[17:03:03.761]                   }
[17:03:03.761]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.761]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.761]                     cond$call), session = sessionInformation(), 
[17:03:03.761]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.761]                   signalCondition(cond)
[17:03:03.761]                 }
[17:03:03.761]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.761]                 "immediateCondition"))) {
[17:03:03.761]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.761]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.761]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.761]                   if (TRUE && !signal) {
[17:03:03.761]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.761]                     {
[17:03:03.761]                       inherits <- base::inherits
[17:03:03.761]                       invokeRestart <- base::invokeRestart
[17:03:03.761]                       is.null <- base::is.null
[17:03:03.761]                       muffled <- FALSE
[17:03:03.761]                       if (inherits(cond, "message")) {
[17:03:03.761]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.761]                         if (muffled) 
[17:03:03.761]                           invokeRestart("muffleMessage")
[17:03:03.761]                       }
[17:03:03.761]                       else if (inherits(cond, "warning")) {
[17:03:03.761]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.761]                         if (muffled) 
[17:03:03.761]                           invokeRestart("muffleWarning")
[17:03:03.761]                       }
[17:03:03.761]                       else if (inherits(cond, "condition")) {
[17:03:03.761]                         if (!is.null(pattern)) {
[17:03:03.761]                           computeRestarts <- base::computeRestarts
[17:03:03.761]                           grepl <- base::grepl
[17:03:03.761]                           restarts <- computeRestarts(cond)
[17:03:03.761]                           for (restart in restarts) {
[17:03:03.761]                             name <- restart$name
[17:03:03.761]                             if (is.null(name)) 
[17:03:03.761]                               next
[17:03:03.761]                             if (!grepl(pattern, name)) 
[17:03:03.761]                               next
[17:03:03.761]                             invokeRestart(restart)
[17:03:03.761]                             muffled <- TRUE
[17:03:03.761]                             break
[17:03:03.761]                           }
[17:03:03.761]                         }
[17:03:03.761]                       }
[17:03:03.761]                       invisible(muffled)
[17:03:03.761]                     }
[17:03:03.761]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.761]                   }
[17:03:03.761]                 }
[17:03:03.761]                 else {
[17:03:03.761]                   if (TRUE) {
[17:03:03.761]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.761]                     {
[17:03:03.761]                       inherits <- base::inherits
[17:03:03.761]                       invokeRestart <- base::invokeRestart
[17:03:03.761]                       is.null <- base::is.null
[17:03:03.761]                       muffled <- FALSE
[17:03:03.761]                       if (inherits(cond, "message")) {
[17:03:03.761]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.761]                         if (muffled) 
[17:03:03.761]                           invokeRestart("muffleMessage")
[17:03:03.761]                       }
[17:03:03.761]                       else if (inherits(cond, "warning")) {
[17:03:03.761]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.761]                         if (muffled) 
[17:03:03.761]                           invokeRestart("muffleWarning")
[17:03:03.761]                       }
[17:03:03.761]                       else if (inherits(cond, "condition")) {
[17:03:03.761]                         if (!is.null(pattern)) {
[17:03:03.761]                           computeRestarts <- base::computeRestarts
[17:03:03.761]                           grepl <- base::grepl
[17:03:03.761]                           restarts <- computeRestarts(cond)
[17:03:03.761]                           for (restart in restarts) {
[17:03:03.761]                             name <- restart$name
[17:03:03.761]                             if (is.null(name)) 
[17:03:03.761]                               next
[17:03:03.761]                             if (!grepl(pattern, name)) 
[17:03:03.761]                               next
[17:03:03.761]                             invokeRestart(restart)
[17:03:03.761]                             muffled <- TRUE
[17:03:03.761]                             break
[17:03:03.761]                           }
[17:03:03.761]                         }
[17:03:03.761]                       }
[17:03:03.761]                       invisible(muffled)
[17:03:03.761]                     }
[17:03:03.761]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.761]                   }
[17:03:03.761]                 }
[17:03:03.761]             }
[17:03:03.761]         }))
[17:03:03.761]     }, error = function(ex) {
[17:03:03.761]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.761]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.761]                 ...future.rng), started = ...future.startTime, 
[17:03:03.761]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.761]             version = "1.8"), class = "FutureResult")
[17:03:03.761]     }, finally = {
[17:03:03.761]         if (!identical(...future.workdir, getwd())) 
[17:03:03.761]             setwd(...future.workdir)
[17:03:03.761]         {
[17:03:03.761]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.761]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.761]             }
[17:03:03.761]             base::options(...future.oldOptions)
[17:03:03.761]             if (.Platform$OS.type == "windows") {
[17:03:03.761]                 old_names <- names(...future.oldEnvVars)
[17:03:03.761]                 envs <- base::Sys.getenv()
[17:03:03.761]                 names <- names(envs)
[17:03:03.761]                 common <- intersect(names, old_names)
[17:03:03.761]                 added <- setdiff(names, old_names)
[17:03:03.761]                 removed <- setdiff(old_names, names)
[17:03:03.761]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.761]                   envs[common]]
[17:03:03.761]                 NAMES <- toupper(changed)
[17:03:03.761]                 args <- list()
[17:03:03.761]                 for (kk in seq_along(NAMES)) {
[17:03:03.761]                   name <- changed[[kk]]
[17:03:03.761]                   NAME <- NAMES[[kk]]
[17:03:03.761]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.761]                     next
[17:03:03.761]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.761]                 }
[17:03:03.761]                 NAMES <- toupper(added)
[17:03:03.761]                 for (kk in seq_along(NAMES)) {
[17:03:03.761]                   name <- added[[kk]]
[17:03:03.761]                   NAME <- NAMES[[kk]]
[17:03:03.761]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.761]                     next
[17:03:03.761]                   args[[name]] <- ""
[17:03:03.761]                 }
[17:03:03.761]                 NAMES <- toupper(removed)
[17:03:03.761]                 for (kk in seq_along(NAMES)) {
[17:03:03.761]                   name <- removed[[kk]]
[17:03:03.761]                   NAME <- NAMES[[kk]]
[17:03:03.761]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.761]                     next
[17:03:03.761]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.761]                 }
[17:03:03.761]                 if (length(args) > 0) 
[17:03:03.761]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.761]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.761]             }
[17:03:03.761]             else {
[17:03:03.761]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.761]             }
[17:03:03.761]             {
[17:03:03.761]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.761]                   0L) {
[17:03:03.761]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.761]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.761]                   base::options(opts)
[17:03:03.761]                 }
[17:03:03.761]                 {
[17:03:03.761]                   {
[17:03:03.761]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:03.761]                     NULL
[17:03:03.761]                   }
[17:03:03.761]                   options(future.plan = NULL)
[17:03:03.761]                   if (is.na(NA_character_)) 
[17:03:03.761]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.761]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.761]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.761]                     .init = FALSE)
[17:03:03.761]                 }
[17:03:03.761]             }
[17:03:03.761]         }
[17:03:03.761]     })
[17:03:03.761]     if (TRUE) {
[17:03:03.761]         base::sink(type = "output", split = FALSE)
[17:03:03.761]         if (TRUE) {
[17:03:03.761]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.761]         }
[17:03:03.761]         else {
[17:03:03.761]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.761]         }
[17:03:03.761]         base::close(...future.stdout)
[17:03:03.761]         ...future.stdout <- NULL
[17:03:03.761]     }
[17:03:03.761]     ...future.result$conditions <- ...future.conditions
[17:03:03.761]     ...future.result$finished <- base::Sys.time()
[17:03:03.761]     ...future.result
[17:03:03.761] }
[17:03:03.765] requestCore(): workers = 2
[17:03:03.765] Poll #1 (0): usedCores() = 2, workers = 2
[17:03:03.788] result() for MulticoreFuture ...
[17:03:03.789] result() for MulticoreFuture ...
[17:03:03.789] result() for MulticoreFuture ... done
[17:03:03.790] result() for MulticoreFuture ... done
[17:03:03.790] result() for MulticoreFuture ...
[17:03:03.794] result() for MulticoreFuture ... done
[17:03:03.797] MulticoreFuture started
 - Resolving 4 multicore futures
[17:03:03.798] result() for MulticoreFuture ...
[17:03:03.798] plan(): Setting new future strategy stack:
[17:03:03.798] result() for MulticoreFuture ... done
[17:03:03.798] result() for MulticoreFuture ...
[17:03:03.798] result() for MulticoreFuture ... done
[17:03:03.799] result() for MulticoreFuture ...
[17:03:03.799] result() for MulticoreFuture ... done
[17:03:03.798] List of future strategies:
[17:03:03.798] 1. sequential:
[17:03:03.798]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.798]    - tweaked: FALSE
[17:03:03.798]    - call: NULL
[17:03:03.799] result() for MulticoreFuture ...
[17:03:03.799] result() for MulticoreFuture ... done
[17:03:03.800] plan(): nbrOfWorkers() = 1
[17:03:03.800] result() for MulticoreFuture ...
[17:03:03.801] result() for MulticoreFuture ...
[17:03:03.801] result() for MulticoreFuture ... done
[17:03:03.801] result() for MulticoreFuture ... done
[17:03:03.802] result() for MulticoreFuture ...
[17:03:03.802] result() for MulticoreFuture ... done
[17:03:03.802] result() for MulticoreFuture ...
[17:03:03.802] plan(): Setting new future strategy stack:
[17:03:03.802] List of future strategies:
[17:03:03.802] 1. multicore:
[17:03:03.802]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.802]    - tweaked: FALSE
[17:03:03.802]    - call: plan(multicore)
[17:03:03.808] plan(): nbrOfWorkers() = 2
[17:03:03.808] result() for MulticoreFuture ...
[17:03:03.809] result() for MulticoreFuture ... done
[17:03:03.809] result() for MulticoreFuture ... done
[17:03:03.809] result() for MulticoreFuture ...
[17:03:03.809] result() for MulticoreFuture ... done
*** multicore(..., globals = FALSE) and errors
[17:03:03.814] getGlobalsAndPackages() ...
[17:03:03.814] Not searching for globals
[17:03:03.815] - globals: [0] <none>
[17:03:03.815] getGlobalsAndPackages() ... DONE
[17:03:03.815] Packages needed by the future expression (n = 0): <none>
[17:03:03.816] Packages needed by future strategies (n = 0): <none>
[17:03:03.816] {
[17:03:03.816]     {
[17:03:03.816]         {
[17:03:03.816]             ...future.startTime <- base::Sys.time()
[17:03:03.816]             {
[17:03:03.816]                 {
[17:03:03.816]                   {
[17:03:03.816]                     {
[17:03:03.816]                       base::local({
[17:03:03.816]                         has_future <- base::requireNamespace("future", 
[17:03:03.816]                           quietly = TRUE)
[17:03:03.816]                         if (has_future) {
[17:03:03.816]                           ns <- base::getNamespace("future")
[17:03:03.816]                           version <- ns[[".package"]][["version"]]
[17:03:03.816]                           if (is.null(version)) 
[17:03:03.816]                             version <- utils::packageVersion("future")
[17:03:03.816]                         }
[17:03:03.816]                         else {
[17:03:03.816]                           version <- NULL
[17:03:03.816]                         }
[17:03:03.816]                         if (!has_future || version < "1.8.0") {
[17:03:03.816]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.816]                             "", base::R.version$version.string), 
[17:03:03.816]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:03.816]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.816]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.816]                               "release", "version")], collapse = " "), 
[17:03:03.816]                             hostname = base::Sys.info()[["nodename"]])
[17:03:03.816]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.816]                             info)
[17:03:03.816]                           info <- base::paste(info, collapse = "; ")
[17:03:03.816]                           if (!has_future) {
[17:03:03.816]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.816]                               info)
[17:03:03.816]                           }
[17:03:03.816]                           else {
[17:03:03.816]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.816]                               info, version)
[17:03:03.816]                           }
[17:03:03.816]                           base::stop(msg)
[17:03:03.816]                         }
[17:03:03.816]                       })
[17:03:03.816]                     }
[17:03:03.816]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:03.816]                     base::options(mc.cores = 1L)
[17:03:03.816]                   }
[17:03:03.816]                   ...future.strategy.old <- future::plan("list")
[17:03:03.816]                   options(future.plan = NULL)
[17:03:03.816]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.816]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.816]                 }
[17:03:03.816]                 ...future.workdir <- getwd()
[17:03:03.816]             }
[17:03:03.816]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.816]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.816]         }
[17:03:03.816]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.816]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.816]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.816]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.816]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.816]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.816]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.816]             base::names(...future.oldOptions))
[17:03:03.816]     }
[17:03:03.816]     if (FALSE) {
[17:03:03.816]     }
[17:03:03.816]     else {
[17:03:03.816]         if (TRUE) {
[17:03:03.816]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.816]                 open = "w")
[17:03:03.816]         }
[17:03:03.816]         else {
[17:03:03.816]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.816]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.816]         }
[17:03:03.816]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.816]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.816]             base::sink(type = "output", split = FALSE)
[17:03:03.816]             base::close(...future.stdout)
[17:03:03.816]         }, add = TRUE)
[17:03:03.816]     }
[17:03:03.816]     ...future.frame <- base::sys.nframe()
[17:03:03.816]     ...future.conditions <- base::list()
[17:03:03.816]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.816]     if (FALSE) {
[17:03:03.816]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.816]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.816]     }
[17:03:03.816]     ...future.result <- base::tryCatch({
[17:03:03.816]         base::withCallingHandlers({
[17:03:03.816]             ...future.value <- base::withVisible(base::local({
[17:03:03.816]                 withCallingHandlers({
[17:03:03.816]                   {
[17:03:03.816]                     stop("Whoops!")
[17:03:03.816]                     1
[17:03:03.816]                   }
[17:03:03.816]                 }, immediateCondition = function(cond) {
[17:03:03.816]                   save_rds <- function (object, pathname, ...) 
[17:03:03.816]                   {
[17:03:03.816]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:03.816]                     if (file_test("-f", pathname_tmp)) {
[17:03:03.816]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.816]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:03.816]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.816]                         fi_tmp[["mtime"]])
[17:03:03.816]                     }
[17:03:03.816]                     tryCatch({
[17:03:03.816]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:03.816]                     }, error = function(ex) {
[17:03:03.816]                       msg <- conditionMessage(ex)
[17:03:03.816]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.816]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:03.816]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.816]                         fi_tmp[["mtime"]], msg)
[17:03:03.816]                       ex$message <- msg
[17:03:03.816]                       stop(ex)
[17:03:03.816]                     })
[17:03:03.816]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:03.816]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:03.816]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:03.816]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.816]                       fi <- file.info(pathname)
[17:03:03.816]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:03.816]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.816]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:03.816]                         fi[["size"]], fi[["mtime"]])
[17:03:03.816]                       stop(msg)
[17:03:03.816]                     }
[17:03:03.816]                     invisible(pathname)
[17:03:03.816]                   }
[17:03:03.816]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:03.816]                     rootPath = tempdir()) 
[17:03:03.816]                   {
[17:03:03.816]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:03.816]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:03.816]                       tmpdir = path, fileext = ".rds")
[17:03:03.816]                     save_rds(obj, file)
[17:03:03.816]                   }
[17:03:03.816]                   saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")
[17:03:03.816]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.816]                   {
[17:03:03.816]                     inherits <- base::inherits
[17:03:03.816]                     invokeRestart <- base::invokeRestart
[17:03:03.816]                     is.null <- base::is.null
[17:03:03.816]                     muffled <- FALSE
[17:03:03.816]                     if (inherits(cond, "message")) {
[17:03:03.816]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:03.816]                       if (muffled) 
[17:03:03.816]                         invokeRestart("muffleMessage")
[17:03:03.816]                     }
[17:03:03.816]                     else if (inherits(cond, "warning")) {
[17:03:03.816]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:03.816]                       if (muffled) 
[17:03:03.816]                         invokeRestart("muffleWarning")
[17:03:03.816]                     }
[17:03:03.816]                     else if (inherits(cond, "condition")) {
[17:03:03.816]                       if (!is.null(pattern)) {
[17:03:03.816]                         computeRestarts <- base::computeRestarts
[17:03:03.816]                         grepl <- base::grepl
[17:03:03.816]                         restarts <- computeRestarts(cond)
[17:03:03.816]                         for (restart in restarts) {
[17:03:03.816]                           name <- restart$name
[17:03:03.816]                           if (is.null(name)) 
[17:03:03.816]                             next
[17:03:03.816]                           if (!grepl(pattern, name)) 
[17:03:03.816]                             next
[17:03:03.816]                           invokeRestart(restart)
[17:03:03.816]                           muffled <- TRUE
[17:03:03.816]                           break
[17:03:03.816]                         }
[17:03:03.816]                       }
[17:03:03.816]                     }
[17:03:03.816]                     invisible(muffled)
[17:03:03.816]                   }
[17:03:03.816]                   muffleCondition(cond)
[17:03:03.816]                 })
[17:03:03.816]             }))
[17:03:03.816]             future::FutureResult(value = ...future.value$value, 
[17:03:03.816]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.816]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.816]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.816]                     ...future.globalenv.names))
[17:03:03.816]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.816]         }, condition = base::local({
[17:03:03.816]             c <- base::c
[17:03:03.816]             inherits <- base::inherits
[17:03:03.816]             invokeRestart <- base::invokeRestart
[17:03:03.816]             length <- base::length
[17:03:03.816]             list <- base::list
[17:03:03.816]             seq.int <- base::seq.int
[17:03:03.816]             signalCondition <- base::signalCondition
[17:03:03.816]             sys.calls <- base::sys.calls
[17:03:03.816]             `[[` <- base::`[[`
[17:03:03.816]             `+` <- base::`+`
[17:03:03.816]             `<<-` <- base::`<<-`
[17:03:03.816]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.816]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.816]                   3L)]
[17:03:03.816]             }
[17:03:03.816]             function(cond) {
[17:03:03.816]                 is_error <- inherits(cond, "error")
[17:03:03.816]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.816]                   NULL)
[17:03:03.816]                 if (is_error) {
[17:03:03.816]                   sessionInformation <- function() {
[17:03:03.816]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.816]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.816]                       search = base::search(), system = base::Sys.info())
[17:03:03.816]                   }
[17:03:03.816]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.816]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.816]                     cond$call), session = sessionInformation(), 
[17:03:03.816]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.816]                   signalCondition(cond)
[17:03:03.816]                 }
[17:03:03.816]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.816]                 "immediateCondition"))) {
[17:03:03.816]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.816]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.816]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.816]                   if (TRUE && !signal) {
[17:03:03.816]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.816]                     {
[17:03:03.816]                       inherits <- base::inherits
[17:03:03.816]                       invokeRestart <- base::invokeRestart
[17:03:03.816]                       is.null <- base::is.null
[17:03:03.816]                       muffled <- FALSE
[17:03:03.816]                       if (inherits(cond, "message")) {
[17:03:03.816]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.816]                         if (muffled) 
[17:03:03.816]                           invokeRestart("muffleMessage")
[17:03:03.816]                       }
[17:03:03.816]                       else if (inherits(cond, "warning")) {
[17:03:03.816]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.816]                         if (muffled) 
[17:03:03.816]                           invokeRestart("muffleWarning")
[17:03:03.816]                       }
[17:03:03.816]                       else if (inherits(cond, "condition")) {
[17:03:03.816]                         if (!is.null(pattern)) {
[17:03:03.816]                           computeRestarts <- base::computeRestarts
[17:03:03.816]                           grepl <- base::grepl
[17:03:03.816]                           restarts <- computeRestarts(cond)
[17:03:03.816]                           for (restart in restarts) {
[17:03:03.816]                             name <- restart$name
[17:03:03.816]                             if (is.null(name)) 
[17:03:03.816]                               next
[17:03:03.816]                             if (!grepl(pattern, name)) 
[17:03:03.816]                               next
[17:03:03.816]                             invokeRestart(restart)
[17:03:03.816]                             muffled <- TRUE
[17:03:03.816]                             break
[17:03:03.816]                           }
[17:03:03.816]                         }
[17:03:03.816]                       }
[17:03:03.816]                       invisible(muffled)
[17:03:03.816]                     }
[17:03:03.816]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.816]                   }
[17:03:03.816]                 }
[17:03:03.816]                 else {
[17:03:03.816]                   if (TRUE) {
[17:03:03.816]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.816]                     {
[17:03:03.816]                       inherits <- base::inherits
[17:03:03.816]                       invokeRestart <- base::invokeRestart
[17:03:03.816]                       is.null <- base::is.null
[17:03:03.816]                       muffled <- FALSE
[17:03:03.816]                       if (inherits(cond, "message")) {
[17:03:03.816]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.816]                         if (muffled) 
[17:03:03.816]                           invokeRestart("muffleMessage")
[17:03:03.816]                       }
[17:03:03.816]                       else if (inherits(cond, "warning")) {
[17:03:03.816]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.816]                         if (muffled) 
[17:03:03.816]                           invokeRestart("muffleWarning")
[17:03:03.816]                       }
[17:03:03.816]                       else if (inherits(cond, "condition")) {
[17:03:03.816]                         if (!is.null(pattern)) {
[17:03:03.816]                           computeRestarts <- base::computeRestarts
[17:03:03.816]                           grepl <- base::grepl
[17:03:03.816]                           restarts <- computeRestarts(cond)
[17:03:03.816]                           for (restart in restarts) {
[17:03:03.816]                             name <- restart$name
[17:03:03.816]                             if (is.null(name)) 
[17:03:03.816]                               next
[17:03:03.816]                             if (!grepl(pattern, name)) 
[17:03:03.816]                               next
[17:03:03.816]                             invokeRestart(restart)
[17:03:03.816]                             muffled <- TRUE
[17:03:03.816]                             break
[17:03:03.816]                           }
[17:03:03.816]                         }
[17:03:03.816]                       }
[17:03:03.816]                       invisible(muffled)
[17:03:03.816]                     }
[17:03:03.816]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.816]                   }
[17:03:03.816]                 }
[17:03:03.816]             }
[17:03:03.816]         }))
[17:03:03.816]     }, error = function(ex) {
[17:03:03.816]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.816]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.816]                 ...future.rng), started = ...future.startTime, 
[17:03:03.816]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.816]             version = "1.8"), class = "FutureResult")
[17:03:03.816]     }, finally = {
[17:03:03.816]         if (!identical(...future.workdir, getwd())) 
[17:03:03.816]             setwd(...future.workdir)
[17:03:03.816]         {
[17:03:03.816]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.816]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.816]             }
[17:03:03.816]             base::options(...future.oldOptions)
[17:03:03.816]             if (.Platform$OS.type == "windows") {
[17:03:03.816]                 old_names <- names(...future.oldEnvVars)
[17:03:03.816]                 envs <- base::Sys.getenv()
[17:03:03.816]                 names <- names(envs)
[17:03:03.816]                 common <- intersect(names, old_names)
[17:03:03.816]                 added <- setdiff(names, old_names)
[17:03:03.816]                 removed <- setdiff(old_names, names)
[17:03:03.816]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.816]                   envs[common]]
[17:03:03.816]                 NAMES <- toupper(changed)
[17:03:03.816]                 args <- list()
[17:03:03.816]                 for (kk in seq_along(NAMES)) {
[17:03:03.816]                   name <- changed[[kk]]
[17:03:03.816]                   NAME <- NAMES[[kk]]
[17:03:03.816]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.816]                     next
[17:03:03.816]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.816]                 }
[17:03:03.816]                 NAMES <- toupper(added)
[17:03:03.816]                 for (kk in seq_along(NAMES)) {
[17:03:03.816]                   name <- added[[kk]]
[17:03:03.816]                   NAME <- NAMES[[kk]]
[17:03:03.816]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.816]                     next
[17:03:03.816]                   args[[name]] <- ""
[17:03:03.816]                 }
[17:03:03.816]                 NAMES <- toupper(removed)
[17:03:03.816]                 for (kk in seq_along(NAMES)) {
[17:03:03.816]                   name <- removed[[kk]]
[17:03:03.816]                   NAME <- NAMES[[kk]]
[17:03:03.816]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.816]                     next
[17:03:03.816]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.816]                 }
[17:03:03.816]                 if (length(args) > 0) 
[17:03:03.816]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.816]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.816]             }
[17:03:03.816]             else {
[17:03:03.816]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.816]             }
[17:03:03.816]             {
[17:03:03.816]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.816]                   0L) {
[17:03:03.816]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.816]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.816]                   base::options(opts)
[17:03:03.816]                 }
[17:03:03.816]                 {
[17:03:03.816]                   {
[17:03:03.816]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:03.816]                     NULL
[17:03:03.816]                   }
[17:03:03.816]                   options(future.plan = NULL)
[17:03:03.816]                   if (is.na(NA_character_)) 
[17:03:03.816]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.816]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.816]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.816]                     .init = FALSE)
[17:03:03.816]                 }
[17:03:03.816]             }
[17:03:03.816]         }
[17:03:03.816]     })
[17:03:03.816]     if (TRUE) {
[17:03:03.816]         base::sink(type = "output", split = FALSE)
[17:03:03.816]         if (TRUE) {
[17:03:03.816]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.816]         }
[17:03:03.816]         else {
[17:03:03.816]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.816]         }
[17:03:03.816]         base::close(...future.stdout)
[17:03:03.816]         ...future.stdout <- NULL
[17:03:03.816]     }
[17:03:03.816]     ...future.result$conditions <- ...future.conditions
[17:03:03.816]     ...future.result$finished <- base::Sys.time()
[17:03:03.816]     ...future.result
[17:03:03.816] }
[17:03:03.819] requestCore(): workers = 2
[17:03:03.821] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:03:03.822] plan(): Setting new future strategy stack:
[17:03:03.822] List of future strategies:
[17:03:03.822] 1. sequential:
[17:03:03.822]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.822]    - tweaked: FALSE
[17:03:03.822]    - call: NULL
[17:03:03.823] plan(): nbrOfWorkers() = 1
[17:03:03.825] plan(): Setting new future strategy stack:
[17:03:03.825] List of future strategies:
[17:03:03.825] 1. multicore:
[17:03:03.825]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.825]    - tweaked: FALSE
[17:03:03.825]    - call: plan(multicore)
[17:03:03.830] plan(): nbrOfWorkers() = 2
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 07dd274d-66ac-c50c-eb90-f530485edd79
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:03.833] result() for MulticoreFuture ...
[17:03:03.836] result() for MulticoreFuture ...
[17:03:03.836] result() for MulticoreFuture ... done
[17:03:03.836] signalConditions() ...
[17:03:03.836]  - include = ‘immediateCondition’
[17:03:03.836]  - exclude = 
[17:03:03.836]  - resignal = FALSE
[17:03:03.837]  - Number of conditions: 1
[17:03:03.837] signalConditions() ... done
[17:03:03.837] result() for MulticoreFuture ... done
[17:03:03.837] result() for MulticoreFuture ...
[17:03:03.837] result() for MulticoreFuture ... done
[17:03:03.837] signalConditions() ...
[17:03:03.838]  - include = ‘immediateCondition’
[17:03:03.838]  - exclude = 
[17:03:03.838]  - resignal = FALSE
[17:03:03.838]  - Number of conditions: 1
[17:03:03.838] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:03:03.839] result() for MulticoreFuture ...
[17:03:03.839] result() for MulticoreFuture ... done
[17:03:03.839] result() for MulticoreFuture ...
[17:03:03.840] result() for MulticoreFuture ... done
[17:03:03.840] signalConditions() ...
[17:03:03.840]  - include = ‘immediateCondition’
[17:03:03.840]  - exclude = 
[17:03:03.840]  - resignal = FALSE
[17:03:03.840]  - Number of conditions: 1
[17:03:03.840] signalConditions() ... done
[17:03:03.840] Future state: ‘finished’
[17:03:03.841] result() for MulticoreFuture ...
[17:03:03.841] result() for MulticoreFuture ... done
[17:03:03.841] signalConditions() ...
[17:03:03.841]  - include = ‘condition’
[17:03:03.841]  - exclude = ‘immediateCondition’
[17:03:03.841]  - resignal = TRUE
[17:03:03.841]  - Number of conditions: 1
[17:03:03.841]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:03:03.841] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:03:03.842] result() for MulticoreFuture ...
[17:03:03.842] result() for MulticoreFuture ... done
[17:03:03.843] result() for MulticoreFuture ...
[17:03:03.843] result() for MulticoreFuture ... done
[17:03:03.843] signalConditions() ...
[17:03:03.843]  - include = ‘immediateCondition’
[17:03:03.843]  - exclude = 
[17:03:03.843]  - resignal = FALSE
[17:03:03.843]  - Number of conditions: 1
[17:03:03.843] signalConditions() ... done
[17:03:03.843] Future state: ‘finished’
[17:03:03.844] result() for MulticoreFuture ...
[17:03:03.844] result() for MulticoreFuture ... done
[17:03:03.844] signalConditions() ...
[17:03:03.844]  - include = ‘condition’
[17:03:03.844]  - exclude = ‘immediateCondition’
[17:03:03.844]  - resignal = TRUE
[17:03:03.844]  - Number of conditions: 1
[17:03:03.844]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:03:03.845] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:03:03.849] getGlobalsAndPackages() ...
[17:03:03.849] 
[17:03:03.850] - globals: [0] <none>
[17:03:03.850] getGlobalsAndPackages() ... DONE
[17:03:03.850] Packages needed by the future expression (n = 0): <none>
[17:03:03.851] Packages needed by future strategies (n = 0): <none>
[17:03:03.851] {
[17:03:03.851]     {
[17:03:03.851]         {
[17:03:03.851]             ...future.startTime <- base::Sys.time()
[17:03:03.851]             {
[17:03:03.851]                 {
[17:03:03.851]                   {
[17:03:03.851]                     {
[17:03:03.851]                       base::local({
[17:03:03.851]                         has_future <- base::requireNamespace("future", 
[17:03:03.851]                           quietly = TRUE)
[17:03:03.851]                         if (has_future) {
[17:03:03.851]                           ns <- base::getNamespace("future")
[17:03:03.851]                           version <- ns[[".package"]][["version"]]
[17:03:03.851]                           if (is.null(version)) 
[17:03:03.851]                             version <- utils::packageVersion("future")
[17:03:03.851]                         }
[17:03:03.851]                         else {
[17:03:03.851]                           version <- NULL
[17:03:03.851]                         }
[17:03:03.851]                         if (!has_future || version < "1.8.0") {
[17:03:03.851]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.851]                             "", base::R.version$version.string), 
[17:03:03.851]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:03.851]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.851]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.851]                               "release", "version")], collapse = " "), 
[17:03:03.851]                             hostname = base::Sys.info()[["nodename"]])
[17:03:03.851]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.851]                             info)
[17:03:03.851]                           info <- base::paste(info, collapse = "; ")
[17:03:03.851]                           if (!has_future) {
[17:03:03.851]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.851]                               info)
[17:03:03.851]                           }
[17:03:03.851]                           else {
[17:03:03.851]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.851]                               info, version)
[17:03:03.851]                           }
[17:03:03.851]                           base::stop(msg)
[17:03:03.851]                         }
[17:03:03.851]                       })
[17:03:03.851]                     }
[17:03:03.851]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:03.851]                     base::options(mc.cores = 1L)
[17:03:03.851]                   }
[17:03:03.851]                   ...future.strategy.old <- future::plan("list")
[17:03:03.851]                   options(future.plan = NULL)
[17:03:03.851]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.851]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.851]                 }
[17:03:03.851]                 ...future.workdir <- getwd()
[17:03:03.851]             }
[17:03:03.851]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.851]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.851]         }
[17:03:03.851]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.851]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.851]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.851]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.851]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.851]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.851]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.851]             base::names(...future.oldOptions))
[17:03:03.851]     }
[17:03:03.851]     if (FALSE) {
[17:03:03.851]     }
[17:03:03.851]     else {
[17:03:03.851]         if (TRUE) {
[17:03:03.851]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.851]                 open = "w")
[17:03:03.851]         }
[17:03:03.851]         else {
[17:03:03.851]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.851]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.851]         }
[17:03:03.851]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.851]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.851]             base::sink(type = "output", split = FALSE)
[17:03:03.851]             base::close(...future.stdout)
[17:03:03.851]         }, add = TRUE)
[17:03:03.851]     }
[17:03:03.851]     ...future.frame <- base::sys.nframe()
[17:03:03.851]     ...future.conditions <- base::list()
[17:03:03.851]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.851]     if (FALSE) {
[17:03:03.851]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.851]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.851]     }
[17:03:03.851]     ...future.result <- base::tryCatch({
[17:03:03.851]         base::withCallingHandlers({
[17:03:03.851]             ...future.value <- base::withVisible(base::local({
[17:03:03.851]                 withCallingHandlers({
[17:03:03.851]                   {
[17:03:03.851]                     stop(structure(list(message = "boom"), class = c("MyError", 
[17:03:03.851]                       "error", "condition")))
[17:03:03.851]                   }
[17:03:03.851]                 }, immediateCondition = function(cond) {
[17:03:03.851]                   save_rds <- function (object, pathname, ...) 
[17:03:03.851]                   {
[17:03:03.851]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:03.851]                     if (file_test("-f", pathname_tmp)) {
[17:03:03.851]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.851]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:03.851]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.851]                         fi_tmp[["mtime"]])
[17:03:03.851]                     }
[17:03:03.851]                     tryCatch({
[17:03:03.851]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:03.851]                     }, error = function(ex) {
[17:03:03.851]                       msg <- conditionMessage(ex)
[17:03:03.851]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.851]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:03.851]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.851]                         fi_tmp[["mtime"]], msg)
[17:03:03.851]                       ex$message <- msg
[17:03:03.851]                       stop(ex)
[17:03:03.851]                     })
[17:03:03.851]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:03.851]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:03.851]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:03.851]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.851]                       fi <- file.info(pathname)
[17:03:03.851]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:03.851]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.851]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:03.851]                         fi[["size"]], fi[["mtime"]])
[17:03:03.851]                       stop(msg)
[17:03:03.851]                     }
[17:03:03.851]                     invisible(pathname)
[17:03:03.851]                   }
[17:03:03.851]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:03.851]                     rootPath = tempdir()) 
[17:03:03.851]                   {
[17:03:03.851]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:03.851]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:03.851]                       tmpdir = path, fileext = ".rds")
[17:03:03.851]                     save_rds(obj, file)
[17:03:03.851]                   }
[17:03:03.851]                   saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")
[17:03:03.851]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.851]                   {
[17:03:03.851]                     inherits <- base::inherits
[17:03:03.851]                     invokeRestart <- base::invokeRestart
[17:03:03.851]                     is.null <- base::is.null
[17:03:03.851]                     muffled <- FALSE
[17:03:03.851]                     if (inherits(cond, "message")) {
[17:03:03.851]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:03.851]                       if (muffled) 
[17:03:03.851]                         invokeRestart("muffleMessage")
[17:03:03.851]                     }
[17:03:03.851]                     else if (inherits(cond, "warning")) {
[17:03:03.851]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:03.851]                       if (muffled) 
[17:03:03.851]                         invokeRestart("muffleWarning")
[17:03:03.851]                     }
[17:03:03.851]                     else if (inherits(cond, "condition")) {
[17:03:03.851]                       if (!is.null(pattern)) {
[17:03:03.851]                         computeRestarts <- base::computeRestarts
[17:03:03.851]                         grepl <- base::grepl
[17:03:03.851]                         restarts <- computeRestarts(cond)
[17:03:03.851]                         for (restart in restarts) {
[17:03:03.851]                           name <- restart$name
[17:03:03.851]                           if (is.null(name)) 
[17:03:03.851]                             next
[17:03:03.851]                           if (!grepl(pattern, name)) 
[17:03:03.851]                             next
[17:03:03.851]                           invokeRestart(restart)
[17:03:03.851]                           muffled <- TRUE
[17:03:03.851]                           break
[17:03:03.851]                         }
[17:03:03.851]                       }
[17:03:03.851]                     }
[17:03:03.851]                     invisible(muffled)
[17:03:03.851]                   }
[17:03:03.851]                   muffleCondition(cond)
[17:03:03.851]                 })
[17:03:03.851]             }))
[17:03:03.851]             future::FutureResult(value = ...future.value$value, 
[17:03:03.851]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.851]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.851]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.851]                     ...future.globalenv.names))
[17:03:03.851]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.851]         }, condition = base::local({
[17:03:03.851]             c <- base::c
[17:03:03.851]             inherits <- base::inherits
[17:03:03.851]             invokeRestart <- base::invokeRestart
[17:03:03.851]             length <- base::length
[17:03:03.851]             list <- base::list
[17:03:03.851]             seq.int <- base::seq.int
[17:03:03.851]             signalCondition <- base::signalCondition
[17:03:03.851]             sys.calls <- base::sys.calls
[17:03:03.851]             `[[` <- base::`[[`
[17:03:03.851]             `+` <- base::`+`
[17:03:03.851]             `<<-` <- base::`<<-`
[17:03:03.851]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.851]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.851]                   3L)]
[17:03:03.851]             }
[17:03:03.851]             function(cond) {
[17:03:03.851]                 is_error <- inherits(cond, "error")
[17:03:03.851]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.851]                   NULL)
[17:03:03.851]                 if (is_error) {
[17:03:03.851]                   sessionInformation <- function() {
[17:03:03.851]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.851]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.851]                       search = base::search(), system = base::Sys.info())
[17:03:03.851]                   }
[17:03:03.851]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.851]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.851]                     cond$call), session = sessionInformation(), 
[17:03:03.851]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.851]                   signalCondition(cond)
[17:03:03.851]                 }
[17:03:03.851]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.851]                 "immediateCondition"))) {
[17:03:03.851]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.851]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.851]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.851]                   if (TRUE && !signal) {
[17:03:03.851]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.851]                     {
[17:03:03.851]                       inherits <- base::inherits
[17:03:03.851]                       invokeRestart <- base::invokeRestart
[17:03:03.851]                       is.null <- base::is.null
[17:03:03.851]                       muffled <- FALSE
[17:03:03.851]                       if (inherits(cond, "message")) {
[17:03:03.851]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.851]                         if (muffled) 
[17:03:03.851]                           invokeRestart("muffleMessage")
[17:03:03.851]                       }
[17:03:03.851]                       else if (inherits(cond, "warning")) {
[17:03:03.851]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.851]                         if (muffled) 
[17:03:03.851]                           invokeRestart("muffleWarning")
[17:03:03.851]                       }
[17:03:03.851]                       else if (inherits(cond, "condition")) {
[17:03:03.851]                         if (!is.null(pattern)) {
[17:03:03.851]                           computeRestarts <- base::computeRestarts
[17:03:03.851]                           grepl <- base::grepl
[17:03:03.851]                           restarts <- computeRestarts(cond)
[17:03:03.851]                           for (restart in restarts) {
[17:03:03.851]                             name <- restart$name
[17:03:03.851]                             if (is.null(name)) 
[17:03:03.851]                               next
[17:03:03.851]                             if (!grepl(pattern, name)) 
[17:03:03.851]                               next
[17:03:03.851]                             invokeRestart(restart)
[17:03:03.851]                             muffled <- TRUE
[17:03:03.851]                             break
[17:03:03.851]                           }
[17:03:03.851]                         }
[17:03:03.851]                       }
[17:03:03.851]                       invisible(muffled)
[17:03:03.851]                     }
[17:03:03.851]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.851]                   }
[17:03:03.851]                 }
[17:03:03.851]                 else {
[17:03:03.851]                   if (TRUE) {
[17:03:03.851]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.851]                     {
[17:03:03.851]                       inherits <- base::inherits
[17:03:03.851]                       invokeRestart <- base::invokeRestart
[17:03:03.851]                       is.null <- base::is.null
[17:03:03.851]                       muffled <- FALSE
[17:03:03.851]                       if (inherits(cond, "message")) {
[17:03:03.851]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.851]                         if (muffled) 
[17:03:03.851]                           invokeRestart("muffleMessage")
[17:03:03.851]                       }
[17:03:03.851]                       else if (inherits(cond, "warning")) {
[17:03:03.851]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.851]                         if (muffled) 
[17:03:03.851]                           invokeRestart("muffleWarning")
[17:03:03.851]                       }
[17:03:03.851]                       else if (inherits(cond, "condition")) {
[17:03:03.851]                         if (!is.null(pattern)) {
[17:03:03.851]                           computeRestarts <- base::computeRestarts
[17:03:03.851]                           grepl <- base::grepl
[17:03:03.851]                           restarts <- computeRestarts(cond)
[17:03:03.851]                           for (restart in restarts) {
[17:03:03.851]                             name <- restart$name
[17:03:03.851]                             if (is.null(name)) 
[17:03:03.851]                               next
[17:03:03.851]                             if (!grepl(pattern, name)) 
[17:03:03.851]                               next
[17:03:03.851]                             invokeRestart(restart)
[17:03:03.851]                             muffled <- TRUE
[17:03:03.851]                             break
[17:03:03.851]                           }
[17:03:03.851]                         }
[17:03:03.851]                       }
[17:03:03.851]                       invisible(muffled)
[17:03:03.851]                     }
[17:03:03.851]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.851]                   }
[17:03:03.851]                 }
[17:03:03.851]             }
[17:03:03.851]         }))
[17:03:03.851]     }, error = function(ex) {
[17:03:03.851]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.851]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.851]                 ...future.rng), started = ...future.startTime, 
[17:03:03.851]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.851]             version = "1.8"), class = "FutureResult")
[17:03:03.851]     }, finally = {
[17:03:03.851]         if (!identical(...future.workdir, getwd())) 
[17:03:03.851]             setwd(...future.workdir)
[17:03:03.851]         {
[17:03:03.851]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.851]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.851]             }
[17:03:03.851]             base::options(...future.oldOptions)
[17:03:03.851]             if (.Platform$OS.type == "windows") {
[17:03:03.851]                 old_names <- names(...future.oldEnvVars)
[17:03:03.851]                 envs <- base::Sys.getenv()
[17:03:03.851]                 names <- names(envs)
[17:03:03.851]                 common <- intersect(names, old_names)
[17:03:03.851]                 added <- setdiff(names, old_names)
[17:03:03.851]                 removed <- setdiff(old_names, names)
[17:03:03.851]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.851]                   envs[common]]
[17:03:03.851]                 NAMES <- toupper(changed)
[17:03:03.851]                 args <- list()
[17:03:03.851]                 for (kk in seq_along(NAMES)) {
[17:03:03.851]                   name <- changed[[kk]]
[17:03:03.851]                   NAME <- NAMES[[kk]]
[17:03:03.851]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.851]                     next
[17:03:03.851]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.851]                 }
[17:03:03.851]                 NAMES <- toupper(added)
[17:03:03.851]                 for (kk in seq_along(NAMES)) {
[17:03:03.851]                   name <- added[[kk]]
[17:03:03.851]                   NAME <- NAMES[[kk]]
[17:03:03.851]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.851]                     next
[17:03:03.851]                   args[[name]] <- ""
[17:03:03.851]                 }
[17:03:03.851]                 NAMES <- toupper(removed)
[17:03:03.851]                 for (kk in seq_along(NAMES)) {
[17:03:03.851]                   name <- removed[[kk]]
[17:03:03.851]                   NAME <- NAMES[[kk]]
[17:03:03.851]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.851]                     next
[17:03:03.851]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.851]                 }
[17:03:03.851]                 if (length(args) > 0) 
[17:03:03.851]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.851]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.851]             }
[17:03:03.851]             else {
[17:03:03.851]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.851]             }
[17:03:03.851]             {
[17:03:03.851]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.851]                   0L) {
[17:03:03.851]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.851]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.851]                   base::options(opts)
[17:03:03.851]                 }
[17:03:03.851]                 {
[17:03:03.851]                   {
[17:03:03.851]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:03.851]                     NULL
[17:03:03.851]                   }
[17:03:03.851]                   options(future.plan = NULL)
[17:03:03.851]                   if (is.na(NA_character_)) 
[17:03:03.851]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.851]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.851]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.851]                     .init = FALSE)
[17:03:03.851]                 }
[17:03:03.851]             }
[17:03:03.851]         }
[17:03:03.851]     })
[17:03:03.851]     if (TRUE) {
[17:03:03.851]         base::sink(type = "output", split = FALSE)
[17:03:03.851]         if (TRUE) {
[17:03:03.851]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.851]         }
[17:03:03.851]         else {
[17:03:03.851]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.851]         }
[17:03:03.851]         base::close(...future.stdout)
[17:03:03.851]         ...future.stdout <- NULL
[17:03:03.851]     }
[17:03:03.851]     ...future.result$conditions <- ...future.conditions
[17:03:03.851]     ...future.result$finished <- base::Sys.time()
[17:03:03.851]     ...future.result
[17:03:03.851] }
[17:03:03.854] requestCore(): workers = 2
[17:03:03.856] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:03:03.857] plan(): Setting new future strategy stack:
[17:03:03.857] List of future strategies:
[17:03:03.857] 1. sequential:
[17:03:03.857]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.857]    - tweaked: FALSE
[17:03:03.857]    - call: NULL
[17:03:03.858] plan(): nbrOfWorkers() = 1
[17:03:03.860] plan(): Setting new future strategy stack:
[17:03:03.861] List of future strategies:
[17:03:03.861] 1. multicore:
[17:03:03.861]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.861]    - tweaked: FALSE
[17:03:03.861]    - call: plan(multicore)
[17:03:03.866] plan(): nbrOfWorkers() = 2
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 07dd274d-66ac-c50c-eb90-f530485edd79
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:03.868] result() for MulticoreFuture ...
[17:03:03.870] result() for MulticoreFuture ...
[17:03:03.870] result() for MulticoreFuture ... done
[17:03:03.870] signalConditions() ...
[17:03:03.870]  - include = ‘immediateCondition’
[17:03:03.871]  - exclude = 
[17:03:03.871]  - resignal = FALSE
[17:03:03.871]  - Number of conditions: 1
[17:03:03.871] signalConditions() ... done
[17:03:03.871] result() for MulticoreFuture ... done
[17:03:03.871] result() for MulticoreFuture ...
[17:03:03.871] result() for MulticoreFuture ... done
[17:03:03.871] signalConditions() ...
[17:03:03.872]  - include = ‘immediateCondition’
[17:03:03.872]  - exclude = 
[17:03:03.872]  - resignal = FALSE
[17:03:03.872]  - Number of conditions: 1
[17:03:03.872] signalConditions() ... done
<MyError: boom>
[17:03:03.872] result() for MulticoreFuture ...
[17:03:03.872] result() for MulticoreFuture ... done
[17:03:03.873] result() for MulticoreFuture ...
[17:03:03.873] result() for MulticoreFuture ... done
[17:03:03.873] signalConditions() ...
[17:03:03.873]  - include = ‘immediateCondition’
[17:03:03.873]  - exclude = 
[17:03:03.873]  - resignal = FALSE
[17:03:03.873]  - Number of conditions: 1
[17:03:03.873] signalConditions() ... done
[17:03:03.873] Future state: ‘finished’
[17:03:03.874] result() for MulticoreFuture ...
[17:03:03.874] result() for MulticoreFuture ... done
[17:03:03.874] signalConditions() ...
[17:03:03.874]  - include = ‘condition’
[17:03:03.874]  - exclude = ‘immediateCondition’
[17:03:03.874]  - resignal = TRUE
[17:03:03.874]  - Number of conditions: 1
[17:03:03.874]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[17:03:03.874] signalConditions() ... done
*** multicore(..., globals = TRUE) without globals
[17:03:03.879] getGlobalsAndPackages() ...
[17:03:03.879] Searching for globals...
[17:03:03.880] - globals found: [1] ‘{’
[17:03:03.880] Searching for globals ... DONE
[17:03:03.880] Resolving globals: FALSE
[17:03:03.880] 
[17:03:03.883] 
[17:03:03.883] getGlobalsAndPackages() ... DONE
[17:03:03.884] Packages needed by the future expression (n = 0): <none>
[17:03:03.884] Packages needed by future strategies (n = 0): <none>
[17:03:03.885] {
[17:03:03.885]     {
[17:03:03.885]         {
[17:03:03.885]             ...future.startTime <- base::Sys.time()
[17:03:03.885]             {
[17:03:03.885]                 {
[17:03:03.885]                   {
[17:03:03.885]                     {
[17:03:03.885]                       base::local({
[17:03:03.885]                         has_future <- base::requireNamespace("future", 
[17:03:03.885]                           quietly = TRUE)
[17:03:03.885]                         if (has_future) {
[17:03:03.885]                           ns <- base::getNamespace("future")
[17:03:03.885]                           version <- ns[[".package"]][["version"]]
[17:03:03.885]                           if (is.null(version)) 
[17:03:03.885]                             version <- utils::packageVersion("future")
[17:03:03.885]                         }
[17:03:03.885]                         else {
[17:03:03.885]                           version <- NULL
[17:03:03.885]                         }
[17:03:03.885]                         if (!has_future || version < "1.8.0") {
[17:03:03.885]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.885]                             "", base::R.version$version.string), 
[17:03:03.885]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:03.885]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.885]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.885]                               "release", "version")], collapse = " "), 
[17:03:03.885]                             hostname = base::Sys.info()[["nodename"]])
[17:03:03.885]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.885]                             info)
[17:03:03.885]                           info <- base::paste(info, collapse = "; ")
[17:03:03.885]                           if (!has_future) {
[17:03:03.885]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.885]                               info)
[17:03:03.885]                           }
[17:03:03.885]                           else {
[17:03:03.885]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.885]                               info, version)
[17:03:03.885]                           }
[17:03:03.885]                           base::stop(msg)
[17:03:03.885]                         }
[17:03:03.885]                       })
[17:03:03.885]                     }
[17:03:03.885]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:03.885]                     base::options(mc.cores = 1L)
[17:03:03.885]                   }
[17:03:03.885]                   ...future.strategy.old <- future::plan("list")
[17:03:03.885]                   options(future.plan = NULL)
[17:03:03.885]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.885]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.885]                 }
[17:03:03.885]                 ...future.workdir <- getwd()
[17:03:03.885]             }
[17:03:03.885]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.885]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.885]         }
[17:03:03.885]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.885]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.885]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.885]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.885]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.885]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.885]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.885]             base::names(...future.oldOptions))
[17:03:03.885]     }
[17:03:03.885]     if (FALSE) {
[17:03:03.885]     }
[17:03:03.885]     else {
[17:03:03.885]         if (TRUE) {
[17:03:03.885]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.885]                 open = "w")
[17:03:03.885]         }
[17:03:03.885]         else {
[17:03:03.885]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.885]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.885]         }
[17:03:03.885]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.885]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.885]             base::sink(type = "output", split = FALSE)
[17:03:03.885]             base::close(...future.stdout)
[17:03:03.885]         }, add = TRUE)
[17:03:03.885]     }
[17:03:03.885]     ...future.frame <- base::sys.nframe()
[17:03:03.885]     ...future.conditions <- base::list()
[17:03:03.885]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.885]     if (FALSE) {
[17:03:03.885]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.885]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.885]     }
[17:03:03.885]     ...future.result <- base::tryCatch({
[17:03:03.885]         base::withCallingHandlers({
[17:03:03.885]             ...future.value <- base::withVisible(base::local({
[17:03:03.885]                 withCallingHandlers({
[17:03:03.885]                   {
[17:03:03.885]                     42L
[17:03:03.885]                   }
[17:03:03.885]                 }, immediateCondition = function(cond) {
[17:03:03.885]                   save_rds <- function (object, pathname, ...) 
[17:03:03.885]                   {
[17:03:03.885]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:03.885]                     if (file_test("-f", pathname_tmp)) {
[17:03:03.885]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.885]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:03.885]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.885]                         fi_tmp[["mtime"]])
[17:03:03.885]                     }
[17:03:03.885]                     tryCatch({
[17:03:03.885]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:03.885]                     }, error = function(ex) {
[17:03:03.885]                       msg <- conditionMessage(ex)
[17:03:03.885]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.885]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:03.885]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.885]                         fi_tmp[["mtime"]], msg)
[17:03:03.885]                       ex$message <- msg
[17:03:03.885]                       stop(ex)
[17:03:03.885]                     })
[17:03:03.885]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:03.885]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:03.885]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:03.885]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.885]                       fi <- file.info(pathname)
[17:03:03.885]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:03.885]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.885]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:03.885]                         fi[["size"]], fi[["mtime"]])
[17:03:03.885]                       stop(msg)
[17:03:03.885]                     }
[17:03:03.885]                     invisible(pathname)
[17:03:03.885]                   }
[17:03:03.885]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:03.885]                     rootPath = tempdir()) 
[17:03:03.885]                   {
[17:03:03.885]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:03.885]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:03.885]                       tmpdir = path, fileext = ".rds")
[17:03:03.885]                     save_rds(obj, file)
[17:03:03.885]                   }
[17:03:03.885]                   saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")
[17:03:03.885]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.885]                   {
[17:03:03.885]                     inherits <- base::inherits
[17:03:03.885]                     invokeRestart <- base::invokeRestart
[17:03:03.885]                     is.null <- base::is.null
[17:03:03.885]                     muffled <- FALSE
[17:03:03.885]                     if (inherits(cond, "message")) {
[17:03:03.885]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:03.885]                       if (muffled) 
[17:03:03.885]                         invokeRestart("muffleMessage")
[17:03:03.885]                     }
[17:03:03.885]                     else if (inherits(cond, "warning")) {
[17:03:03.885]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:03.885]                       if (muffled) 
[17:03:03.885]                         invokeRestart("muffleWarning")
[17:03:03.885]                     }
[17:03:03.885]                     else if (inherits(cond, "condition")) {
[17:03:03.885]                       if (!is.null(pattern)) {
[17:03:03.885]                         computeRestarts <- base::computeRestarts
[17:03:03.885]                         grepl <- base::grepl
[17:03:03.885]                         restarts <- computeRestarts(cond)
[17:03:03.885]                         for (restart in restarts) {
[17:03:03.885]                           name <- restart$name
[17:03:03.885]                           if (is.null(name)) 
[17:03:03.885]                             next
[17:03:03.885]                           if (!grepl(pattern, name)) 
[17:03:03.885]                             next
[17:03:03.885]                           invokeRestart(restart)
[17:03:03.885]                           muffled <- TRUE
[17:03:03.885]                           break
[17:03:03.885]                         }
[17:03:03.885]                       }
[17:03:03.885]                     }
[17:03:03.885]                     invisible(muffled)
[17:03:03.885]                   }
[17:03:03.885]                   muffleCondition(cond)
[17:03:03.885]                 })
[17:03:03.885]             }))
[17:03:03.885]             future::FutureResult(value = ...future.value$value, 
[17:03:03.885]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.885]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.885]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.885]                     ...future.globalenv.names))
[17:03:03.885]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.885]         }, condition = base::local({
[17:03:03.885]             c <- base::c
[17:03:03.885]             inherits <- base::inherits
[17:03:03.885]             invokeRestart <- base::invokeRestart
[17:03:03.885]             length <- base::length
[17:03:03.885]             list <- base::list
[17:03:03.885]             seq.int <- base::seq.int
[17:03:03.885]             signalCondition <- base::signalCondition
[17:03:03.885]             sys.calls <- base::sys.calls
[17:03:03.885]             `[[` <- base::`[[`
[17:03:03.885]             `+` <- base::`+`
[17:03:03.885]             `<<-` <- base::`<<-`
[17:03:03.885]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.885]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.885]                   3L)]
[17:03:03.885]             }
[17:03:03.885]             function(cond) {
[17:03:03.885]                 is_error <- inherits(cond, "error")
[17:03:03.885]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.885]                   NULL)
[17:03:03.885]                 if (is_error) {
[17:03:03.885]                   sessionInformation <- function() {
[17:03:03.885]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.885]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.885]                       search = base::search(), system = base::Sys.info())
[17:03:03.885]                   }
[17:03:03.885]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.885]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.885]                     cond$call), session = sessionInformation(), 
[17:03:03.885]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.885]                   signalCondition(cond)
[17:03:03.885]                 }
[17:03:03.885]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.885]                 "immediateCondition"))) {
[17:03:03.885]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.885]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.885]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.885]                   if (TRUE && !signal) {
[17:03:03.885]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.885]                     {
[17:03:03.885]                       inherits <- base::inherits
[17:03:03.885]                       invokeRestart <- base::invokeRestart
[17:03:03.885]                       is.null <- base::is.null
[17:03:03.885]                       muffled <- FALSE
[17:03:03.885]                       if (inherits(cond, "message")) {
[17:03:03.885]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.885]                         if (muffled) 
[17:03:03.885]                           invokeRestart("muffleMessage")
[17:03:03.885]                       }
[17:03:03.885]                       else if (inherits(cond, "warning")) {
[17:03:03.885]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.885]                         if (muffled) 
[17:03:03.885]                           invokeRestart("muffleWarning")
[17:03:03.885]                       }
[17:03:03.885]                       else if (inherits(cond, "condition")) {
[17:03:03.885]                         if (!is.null(pattern)) {
[17:03:03.885]                           computeRestarts <- base::computeRestarts
[17:03:03.885]                           grepl <- base::grepl
[17:03:03.885]                           restarts <- computeRestarts(cond)
[17:03:03.885]                           for (restart in restarts) {
[17:03:03.885]                             name <- restart$name
[17:03:03.885]                             if (is.null(name)) 
[17:03:03.885]                               next
[17:03:03.885]                             if (!grepl(pattern, name)) 
[17:03:03.885]                               next
[17:03:03.885]                             invokeRestart(restart)
[17:03:03.885]                             muffled <- TRUE
[17:03:03.885]                             break
[17:03:03.885]                           }
[17:03:03.885]                         }
[17:03:03.885]                       }
[17:03:03.885]                       invisible(muffled)
[17:03:03.885]                     }
[17:03:03.885]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.885]                   }
[17:03:03.885]                 }
[17:03:03.885]                 else {
[17:03:03.885]                   if (TRUE) {
[17:03:03.885]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.885]                     {
[17:03:03.885]                       inherits <- base::inherits
[17:03:03.885]                       invokeRestart <- base::invokeRestart
[17:03:03.885]                       is.null <- base::is.null
[17:03:03.885]                       muffled <- FALSE
[17:03:03.885]                       if (inherits(cond, "message")) {
[17:03:03.885]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.885]                         if (muffled) 
[17:03:03.885]                           invokeRestart("muffleMessage")
[17:03:03.885]                       }
[17:03:03.885]                       else if (inherits(cond, "warning")) {
[17:03:03.885]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.885]                         if (muffled) 
[17:03:03.885]                           invokeRestart("muffleWarning")
[17:03:03.885]                       }
[17:03:03.885]                       else if (inherits(cond, "condition")) {
[17:03:03.885]                         if (!is.null(pattern)) {
[17:03:03.885]                           computeRestarts <- base::computeRestarts
[17:03:03.885]                           grepl <- base::grepl
[17:03:03.885]                           restarts <- computeRestarts(cond)
[17:03:03.885]                           for (restart in restarts) {
[17:03:03.885]                             name <- restart$name
[17:03:03.885]                             if (is.null(name)) 
[17:03:03.885]                               next
[17:03:03.885]                             if (!grepl(pattern, name)) 
[17:03:03.885]                               next
[17:03:03.885]                             invokeRestart(restart)
[17:03:03.885]                             muffled <- TRUE
[17:03:03.885]                             break
[17:03:03.885]                           }
[17:03:03.885]                         }
[17:03:03.885]                       }
[17:03:03.885]                       invisible(muffled)
[17:03:03.885]                     }
[17:03:03.885]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.885]                   }
[17:03:03.885]                 }
[17:03:03.885]             }
[17:03:03.885]         }))
[17:03:03.885]     }, error = function(ex) {
[17:03:03.885]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.885]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.885]                 ...future.rng), started = ...future.startTime, 
[17:03:03.885]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.885]             version = "1.8"), class = "FutureResult")
[17:03:03.885]     }, finally = {
[17:03:03.885]         if (!identical(...future.workdir, getwd())) 
[17:03:03.885]             setwd(...future.workdir)
[17:03:03.885]         {
[17:03:03.885]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.885]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.885]             }
[17:03:03.885]             base::options(...future.oldOptions)
[17:03:03.885]             if (.Platform$OS.type == "windows") {
[17:03:03.885]                 old_names <- names(...future.oldEnvVars)
[17:03:03.885]                 envs <- base::Sys.getenv()
[17:03:03.885]                 names <- names(envs)
[17:03:03.885]                 common <- intersect(names, old_names)
[17:03:03.885]                 added <- setdiff(names, old_names)
[17:03:03.885]                 removed <- setdiff(old_names, names)
[17:03:03.885]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.885]                   envs[common]]
[17:03:03.885]                 NAMES <- toupper(changed)
[17:03:03.885]                 args <- list()
[17:03:03.885]                 for (kk in seq_along(NAMES)) {
[17:03:03.885]                   name <- changed[[kk]]
[17:03:03.885]                   NAME <- NAMES[[kk]]
[17:03:03.885]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.885]                     next
[17:03:03.885]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.885]                 }
[17:03:03.885]                 NAMES <- toupper(added)
[17:03:03.885]                 for (kk in seq_along(NAMES)) {
[17:03:03.885]                   name <- added[[kk]]
[17:03:03.885]                   NAME <- NAMES[[kk]]
[17:03:03.885]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.885]                     next
[17:03:03.885]                   args[[name]] <- ""
[17:03:03.885]                 }
[17:03:03.885]                 NAMES <- toupper(removed)
[17:03:03.885]                 for (kk in seq_along(NAMES)) {
[17:03:03.885]                   name <- removed[[kk]]
[17:03:03.885]                   NAME <- NAMES[[kk]]
[17:03:03.885]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.885]                     next
[17:03:03.885]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.885]                 }
[17:03:03.885]                 if (length(args) > 0) 
[17:03:03.885]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.885]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.885]             }
[17:03:03.885]             else {
[17:03:03.885]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.885]             }
[17:03:03.885]             {
[17:03:03.885]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.885]                   0L) {
[17:03:03.885]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.885]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.885]                   base::options(opts)
[17:03:03.885]                 }
[17:03:03.885]                 {
[17:03:03.885]                   {
[17:03:03.885]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:03.885]                     NULL
[17:03:03.885]                   }
[17:03:03.885]                   options(future.plan = NULL)
[17:03:03.885]                   if (is.na(NA_character_)) 
[17:03:03.885]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.885]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.885]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.885]                     .init = FALSE)
[17:03:03.885]                 }
[17:03:03.885]             }
[17:03:03.885]         }
[17:03:03.885]     })
[17:03:03.885]     if (TRUE) {
[17:03:03.885]         base::sink(type = "output", split = FALSE)
[17:03:03.885]         if (TRUE) {
[17:03:03.885]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.885]         }
[17:03:03.885]         else {
[17:03:03.885]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.885]         }
[17:03:03.885]         base::close(...future.stdout)
[17:03:03.885]         ...future.stdout <- NULL
[17:03:03.885]     }
[17:03:03.885]     ...future.result$conditions <- ...future.conditions
[17:03:03.885]     ...future.result$finished <- base::Sys.time()
[17:03:03.885]     ...future.result
[17:03:03.885] }
[17:03:03.887] requestCore(): workers = 2
[17:03:03.889] MulticoreFuture started
[17:03:03.890] plan(): Setting new future strategy stack:
[17:03:03.891] List of future strategies:
[17:03:03.891] 1. sequential:
[17:03:03.891]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.891]    - tweaked: FALSE
[17:03:03.891]    - call: NULL
[17:03:03.892] plan(): nbrOfWorkers() = 1
[17:03:03.894] plan(): Setting new future strategy stack:
[17:03:03.894] List of future strategies:
[17:03:03.894] 1. multicore:
[17:03:03.894]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.894]    - tweaked: FALSE
[17:03:03.894]    - call: plan(multicore)
[17:03:03.900] plan(): nbrOfWorkers() = 2
[1] FALSE
[17:03:03.900] result() for MulticoreFuture ...
[17:03:03.901] result() for MulticoreFuture ...
[17:03:03.901] result() for MulticoreFuture ... done
[17:03:03.902] result() for MulticoreFuture ... done
[17:03:03.902] result() for MulticoreFuture ...
[17:03:03.902] result() for MulticoreFuture ... done
[1] 42
*** multicore(..., globals = TRUE) with globals
[17:03:03.906] getGlobalsAndPackages() ...
[17:03:03.906] Searching for globals...
[17:03:03.909] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[17:03:03.909] Searching for globals ... DONE
[17:03:03.909] Resolving globals: FALSE
[17:03:03.910] The total size of the 1 globals is 56 bytes (56 bytes)
[17:03:03.910] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:03:03.910] - globals: [1] ‘a’
[17:03:03.910] 
[17:03:03.910] getGlobalsAndPackages() ... DONE
[17:03:03.911] Packages needed by the future expression (n = 0): <none>
[17:03:03.911] Packages needed by future strategies (n = 0): <none>
[17:03:03.912] {
[17:03:03.912]     {
[17:03:03.912]         {
[17:03:03.912]             ...future.startTime <- base::Sys.time()
[17:03:03.912]             {
[17:03:03.912]                 {
[17:03:03.912]                   {
[17:03:03.912]                     {
[17:03:03.912]                       base::local({
[17:03:03.912]                         has_future <- base::requireNamespace("future", 
[17:03:03.912]                           quietly = TRUE)
[17:03:03.912]                         if (has_future) {
[17:03:03.912]                           ns <- base::getNamespace("future")
[17:03:03.912]                           version <- ns[[".package"]][["version"]]
[17:03:03.912]                           if (is.null(version)) 
[17:03:03.912]                             version <- utils::packageVersion("future")
[17:03:03.912]                         }
[17:03:03.912]                         else {
[17:03:03.912]                           version <- NULL
[17:03:03.912]                         }
[17:03:03.912]                         if (!has_future || version < "1.8.0") {
[17:03:03.912]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.912]                             "", base::R.version$version.string), 
[17:03:03.912]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:03.912]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.912]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.912]                               "release", "version")], collapse = " "), 
[17:03:03.912]                             hostname = base::Sys.info()[["nodename"]])
[17:03:03.912]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.912]                             info)
[17:03:03.912]                           info <- base::paste(info, collapse = "; ")
[17:03:03.912]                           if (!has_future) {
[17:03:03.912]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.912]                               info)
[17:03:03.912]                           }
[17:03:03.912]                           else {
[17:03:03.912]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.912]                               info, version)
[17:03:03.912]                           }
[17:03:03.912]                           base::stop(msg)
[17:03:03.912]                         }
[17:03:03.912]                       })
[17:03:03.912]                     }
[17:03:03.912]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:03.912]                     base::options(mc.cores = 1L)
[17:03:03.912]                   }
[17:03:03.912]                   ...future.strategy.old <- future::plan("list")
[17:03:03.912]                   options(future.plan = NULL)
[17:03:03.912]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.912]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.912]                 }
[17:03:03.912]                 ...future.workdir <- getwd()
[17:03:03.912]             }
[17:03:03.912]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.912]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.912]         }
[17:03:03.912]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.912]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.912]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.912]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.912]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.912]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.912]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.912]             base::names(...future.oldOptions))
[17:03:03.912]     }
[17:03:03.912]     if (FALSE) {
[17:03:03.912]     }
[17:03:03.912]     else {
[17:03:03.912]         if (TRUE) {
[17:03:03.912]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.912]                 open = "w")
[17:03:03.912]         }
[17:03:03.912]         else {
[17:03:03.912]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.912]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.912]         }
[17:03:03.912]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.912]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.912]             base::sink(type = "output", split = FALSE)
[17:03:03.912]             base::close(...future.stdout)
[17:03:03.912]         }, add = TRUE)
[17:03:03.912]     }
[17:03:03.912]     ...future.frame <- base::sys.nframe()
[17:03:03.912]     ...future.conditions <- base::list()
[17:03:03.912]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.912]     if (FALSE) {
[17:03:03.912]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.912]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.912]     }
[17:03:03.912]     ...future.result <- base::tryCatch({
[17:03:03.912]         base::withCallingHandlers({
[17:03:03.912]             ...future.value <- base::withVisible(base::local({
[17:03:03.912]                 withCallingHandlers({
[17:03:03.912]                   {
[17:03:03.912]                     b <- 3
[17:03:03.912]                     c <- 2
[17:03:03.912]                     a * b * c
[17:03:03.912]                   }
[17:03:03.912]                 }, immediateCondition = function(cond) {
[17:03:03.912]                   save_rds <- function (object, pathname, ...) 
[17:03:03.912]                   {
[17:03:03.912]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:03.912]                     if (file_test("-f", pathname_tmp)) {
[17:03:03.912]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.912]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:03.912]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.912]                         fi_tmp[["mtime"]])
[17:03:03.912]                     }
[17:03:03.912]                     tryCatch({
[17:03:03.912]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:03.912]                     }, error = function(ex) {
[17:03:03.912]                       msg <- conditionMessage(ex)
[17:03:03.912]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.912]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:03.912]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.912]                         fi_tmp[["mtime"]], msg)
[17:03:03.912]                       ex$message <- msg
[17:03:03.912]                       stop(ex)
[17:03:03.912]                     })
[17:03:03.912]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:03.912]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:03.912]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:03.912]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.912]                       fi <- file.info(pathname)
[17:03:03.912]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:03.912]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.912]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:03.912]                         fi[["size"]], fi[["mtime"]])
[17:03:03.912]                       stop(msg)
[17:03:03.912]                     }
[17:03:03.912]                     invisible(pathname)
[17:03:03.912]                   }
[17:03:03.912]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:03.912]                     rootPath = tempdir()) 
[17:03:03.912]                   {
[17:03:03.912]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:03.912]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:03.912]                       tmpdir = path, fileext = ".rds")
[17:03:03.912]                     save_rds(obj, file)
[17:03:03.912]                   }
[17:03:03.912]                   saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")
[17:03:03.912]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.912]                   {
[17:03:03.912]                     inherits <- base::inherits
[17:03:03.912]                     invokeRestart <- base::invokeRestart
[17:03:03.912]                     is.null <- base::is.null
[17:03:03.912]                     muffled <- FALSE
[17:03:03.912]                     if (inherits(cond, "message")) {
[17:03:03.912]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:03.912]                       if (muffled) 
[17:03:03.912]                         invokeRestart("muffleMessage")
[17:03:03.912]                     }
[17:03:03.912]                     else if (inherits(cond, "warning")) {
[17:03:03.912]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:03.912]                       if (muffled) 
[17:03:03.912]                         invokeRestart("muffleWarning")
[17:03:03.912]                     }
[17:03:03.912]                     else if (inherits(cond, "condition")) {
[17:03:03.912]                       if (!is.null(pattern)) {
[17:03:03.912]                         computeRestarts <- base::computeRestarts
[17:03:03.912]                         grepl <- base::grepl
[17:03:03.912]                         restarts <- computeRestarts(cond)
[17:03:03.912]                         for (restart in restarts) {
[17:03:03.912]                           name <- restart$name
[17:03:03.912]                           if (is.null(name)) 
[17:03:03.912]                             next
[17:03:03.912]                           if (!grepl(pattern, name)) 
[17:03:03.912]                             next
[17:03:03.912]                           invokeRestart(restart)
[17:03:03.912]                           muffled <- TRUE
[17:03:03.912]                           break
[17:03:03.912]                         }
[17:03:03.912]                       }
[17:03:03.912]                     }
[17:03:03.912]                     invisible(muffled)
[17:03:03.912]                   }
[17:03:03.912]                   muffleCondition(cond)
[17:03:03.912]                 })
[17:03:03.912]             }))
[17:03:03.912]             future::FutureResult(value = ...future.value$value, 
[17:03:03.912]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.912]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.912]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.912]                     ...future.globalenv.names))
[17:03:03.912]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.912]         }, condition = base::local({
[17:03:03.912]             c <- base::c
[17:03:03.912]             inherits <- base::inherits
[17:03:03.912]             invokeRestart <- base::invokeRestart
[17:03:03.912]             length <- base::length
[17:03:03.912]             list <- base::list
[17:03:03.912]             seq.int <- base::seq.int
[17:03:03.912]             signalCondition <- base::signalCondition
[17:03:03.912]             sys.calls <- base::sys.calls
[17:03:03.912]             `[[` <- base::`[[`
[17:03:03.912]             `+` <- base::`+`
[17:03:03.912]             `<<-` <- base::`<<-`
[17:03:03.912]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.912]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.912]                   3L)]
[17:03:03.912]             }
[17:03:03.912]             function(cond) {
[17:03:03.912]                 is_error <- inherits(cond, "error")
[17:03:03.912]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.912]                   NULL)
[17:03:03.912]                 if (is_error) {
[17:03:03.912]                   sessionInformation <- function() {
[17:03:03.912]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.912]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.912]                       search = base::search(), system = base::Sys.info())
[17:03:03.912]                   }
[17:03:03.912]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.912]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.912]                     cond$call), session = sessionInformation(), 
[17:03:03.912]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.912]                   signalCondition(cond)
[17:03:03.912]                 }
[17:03:03.912]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.912]                 "immediateCondition"))) {
[17:03:03.912]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.912]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.912]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.912]                   if (TRUE && !signal) {
[17:03:03.912]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.912]                     {
[17:03:03.912]                       inherits <- base::inherits
[17:03:03.912]                       invokeRestart <- base::invokeRestart
[17:03:03.912]                       is.null <- base::is.null
[17:03:03.912]                       muffled <- FALSE
[17:03:03.912]                       if (inherits(cond, "message")) {
[17:03:03.912]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.912]                         if (muffled) 
[17:03:03.912]                           invokeRestart("muffleMessage")
[17:03:03.912]                       }
[17:03:03.912]                       else if (inherits(cond, "warning")) {
[17:03:03.912]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.912]                         if (muffled) 
[17:03:03.912]                           invokeRestart("muffleWarning")
[17:03:03.912]                       }
[17:03:03.912]                       else if (inherits(cond, "condition")) {
[17:03:03.912]                         if (!is.null(pattern)) {
[17:03:03.912]                           computeRestarts <- base::computeRestarts
[17:03:03.912]                           grepl <- base::grepl
[17:03:03.912]                           restarts <- computeRestarts(cond)
[17:03:03.912]                           for (restart in restarts) {
[17:03:03.912]                             name <- restart$name
[17:03:03.912]                             if (is.null(name)) 
[17:03:03.912]                               next
[17:03:03.912]                             if (!grepl(pattern, name)) 
[17:03:03.912]                               next
[17:03:03.912]                             invokeRestart(restart)
[17:03:03.912]                             muffled <- TRUE
[17:03:03.912]                             break
[17:03:03.912]                           }
[17:03:03.912]                         }
[17:03:03.912]                       }
[17:03:03.912]                       invisible(muffled)
[17:03:03.912]                     }
[17:03:03.912]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.912]                   }
[17:03:03.912]                 }
[17:03:03.912]                 else {
[17:03:03.912]                   if (TRUE) {
[17:03:03.912]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.912]                     {
[17:03:03.912]                       inherits <- base::inherits
[17:03:03.912]                       invokeRestart <- base::invokeRestart
[17:03:03.912]                       is.null <- base::is.null
[17:03:03.912]                       muffled <- FALSE
[17:03:03.912]                       if (inherits(cond, "message")) {
[17:03:03.912]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.912]                         if (muffled) 
[17:03:03.912]                           invokeRestart("muffleMessage")
[17:03:03.912]                       }
[17:03:03.912]                       else if (inherits(cond, "warning")) {
[17:03:03.912]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.912]                         if (muffled) 
[17:03:03.912]                           invokeRestart("muffleWarning")
[17:03:03.912]                       }
[17:03:03.912]                       else if (inherits(cond, "condition")) {
[17:03:03.912]                         if (!is.null(pattern)) {
[17:03:03.912]                           computeRestarts <- base::computeRestarts
[17:03:03.912]                           grepl <- base::grepl
[17:03:03.912]                           restarts <- computeRestarts(cond)
[17:03:03.912]                           for (restart in restarts) {
[17:03:03.912]                             name <- restart$name
[17:03:03.912]                             if (is.null(name)) 
[17:03:03.912]                               next
[17:03:03.912]                             if (!grepl(pattern, name)) 
[17:03:03.912]                               next
[17:03:03.912]                             invokeRestart(restart)
[17:03:03.912]                             muffled <- TRUE
[17:03:03.912]                             break
[17:03:03.912]                           }
[17:03:03.912]                         }
[17:03:03.912]                       }
[17:03:03.912]                       invisible(muffled)
[17:03:03.912]                     }
[17:03:03.912]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.912]                   }
[17:03:03.912]                 }
[17:03:03.912]             }
[17:03:03.912]         }))
[17:03:03.912]     }, error = function(ex) {
[17:03:03.912]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.912]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.912]                 ...future.rng), started = ...future.startTime, 
[17:03:03.912]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.912]             version = "1.8"), class = "FutureResult")
[17:03:03.912]     }, finally = {
[17:03:03.912]         if (!identical(...future.workdir, getwd())) 
[17:03:03.912]             setwd(...future.workdir)
[17:03:03.912]         {
[17:03:03.912]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.912]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.912]             }
[17:03:03.912]             base::options(...future.oldOptions)
[17:03:03.912]             if (.Platform$OS.type == "windows") {
[17:03:03.912]                 old_names <- names(...future.oldEnvVars)
[17:03:03.912]                 envs <- base::Sys.getenv()
[17:03:03.912]                 names <- names(envs)
[17:03:03.912]                 common <- intersect(names, old_names)
[17:03:03.912]                 added <- setdiff(names, old_names)
[17:03:03.912]                 removed <- setdiff(old_names, names)
[17:03:03.912]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.912]                   envs[common]]
[17:03:03.912]                 NAMES <- toupper(changed)
[17:03:03.912]                 args <- list()
[17:03:03.912]                 for (kk in seq_along(NAMES)) {
[17:03:03.912]                   name <- changed[[kk]]
[17:03:03.912]                   NAME <- NAMES[[kk]]
[17:03:03.912]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.912]                     next
[17:03:03.912]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.912]                 }
[17:03:03.912]                 NAMES <- toupper(added)
[17:03:03.912]                 for (kk in seq_along(NAMES)) {
[17:03:03.912]                   name <- added[[kk]]
[17:03:03.912]                   NAME <- NAMES[[kk]]
[17:03:03.912]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.912]                     next
[17:03:03.912]                   args[[name]] <- ""
[17:03:03.912]                 }
[17:03:03.912]                 NAMES <- toupper(removed)
[17:03:03.912]                 for (kk in seq_along(NAMES)) {
[17:03:03.912]                   name <- removed[[kk]]
[17:03:03.912]                   NAME <- NAMES[[kk]]
[17:03:03.912]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.912]                     next
[17:03:03.912]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.912]                 }
[17:03:03.912]                 if (length(args) > 0) 
[17:03:03.912]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.912]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.912]             }
[17:03:03.912]             else {
[17:03:03.912]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.912]             }
[17:03:03.912]             {
[17:03:03.912]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.912]                   0L) {
[17:03:03.912]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.912]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.912]                   base::options(opts)
[17:03:03.912]                 }
[17:03:03.912]                 {
[17:03:03.912]                   {
[17:03:03.912]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:03.912]                     NULL
[17:03:03.912]                   }
[17:03:03.912]                   options(future.plan = NULL)
[17:03:03.912]                   if (is.na(NA_character_)) 
[17:03:03.912]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.912]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.912]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.912]                     .init = FALSE)
[17:03:03.912]                 }
[17:03:03.912]             }
[17:03:03.912]         }
[17:03:03.912]     })
[17:03:03.912]     if (TRUE) {
[17:03:03.912]         base::sink(type = "output", split = FALSE)
[17:03:03.912]         if (TRUE) {
[17:03:03.912]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.912]         }
[17:03:03.912]         else {
[17:03:03.912]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.912]         }
[17:03:03.912]         base::close(...future.stdout)
[17:03:03.912]         ...future.stdout <- NULL
[17:03:03.912]     }
[17:03:03.912]     ...future.result$conditions <- ...future.conditions
[17:03:03.912]     ...future.result$finished <- base::Sys.time()
[17:03:03.912]     ...future.result
[17:03:03.912] }
[17:03:03.914] assign_globals() ...
[17:03:03.914] List of 1
[17:03:03.914]  $ a: num 0
[17:03:03.914]  - attr(*, "where")=List of 1
[17:03:03.914]   ..$ a:<environment: R_EmptyEnv> 
[17:03:03.914]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:03.914]  - attr(*, "resolved")= logi FALSE
[17:03:03.914]  - attr(*, "total_size")= num 56
[17:03:03.917] - copied ‘a’ to environment
[17:03:03.917] assign_globals() ... done
[17:03:03.917] requestCore(): workers = 2
[17:03:03.920] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:03:03.921] plan(): Setting new future strategy stack:
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:03:03.921] List of future strategies:
[17:03:03.921] 1. sequential:
[17:03:03.921]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.921]    - tweaked: FALSE
[17:03:03.921]    - call: NULL
[17:03:03.922] plan(): nbrOfWorkers() = 1
[17:03:03.924] plan(): Setting new future strategy stack:
[17:03:03.924] List of future strategies:
[17:03:03.924] 1. multicore:
[17:03:03.924]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.924]    - tweaked: FALSE
[17:03:03.924]    - call: plan(multicore)
[17:03:03.930] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 07dd274d-66ac-c50c-eb90-f530485edd79
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:03.930] result() for MulticoreFuture ...
[17:03:03.931] result() for MulticoreFuture ...
[17:03:03.932] result() for MulticoreFuture ... done
[17:03:03.932] result() for MulticoreFuture ... done
[17:03:03.932] result() for MulticoreFuture ...
[17:03:03.932] result() for MulticoreFuture ... done
[1] 0
*** multicore(..., globals = TRUE) with globals and blocking
 - Creating multicore future #1 ...
[17:03:03.936] getGlobalsAndPackages() ...
[17:03:03.936] Searching for globals...
[17:03:03.937] - globals found: [2] ‘{’, ‘ii’
[17:03:03.937] Searching for globals ... DONE
[17:03:03.938] Resolving globals: FALSE
[17:03:03.938] The total size of the 1 globals is 56 bytes (56 bytes)
[17:03:03.938] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:03:03.939] - globals: [1] ‘ii’
[17:03:03.939] 
[17:03:03.939] getGlobalsAndPackages() ... DONE
[17:03:03.939] Packages needed by the future expression (n = 0): <none>
[17:03:03.940] Packages needed by future strategies (n = 0): <none>
[17:03:03.940] {
[17:03:03.940]     {
[17:03:03.940]         {
[17:03:03.940]             ...future.startTime <- base::Sys.time()
[17:03:03.940]             {
[17:03:03.940]                 {
[17:03:03.940]                   {
[17:03:03.940]                     {
[17:03:03.940]                       base::local({
[17:03:03.940]                         has_future <- base::requireNamespace("future", 
[17:03:03.940]                           quietly = TRUE)
[17:03:03.940]                         if (has_future) {
[17:03:03.940]                           ns <- base::getNamespace("future")
[17:03:03.940]                           version <- ns[[".package"]][["version"]]
[17:03:03.940]                           if (is.null(version)) 
[17:03:03.940]                             version <- utils::packageVersion("future")
[17:03:03.940]                         }
[17:03:03.940]                         else {
[17:03:03.940]                           version <- NULL
[17:03:03.940]                         }
[17:03:03.940]                         if (!has_future || version < "1.8.0") {
[17:03:03.940]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.940]                             "", base::R.version$version.string), 
[17:03:03.940]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:03.940]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.940]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.940]                               "release", "version")], collapse = " "), 
[17:03:03.940]                             hostname = base::Sys.info()[["nodename"]])
[17:03:03.940]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.940]                             info)
[17:03:03.940]                           info <- base::paste(info, collapse = "; ")
[17:03:03.940]                           if (!has_future) {
[17:03:03.940]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.940]                               info)
[17:03:03.940]                           }
[17:03:03.940]                           else {
[17:03:03.940]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.940]                               info, version)
[17:03:03.940]                           }
[17:03:03.940]                           base::stop(msg)
[17:03:03.940]                         }
[17:03:03.940]                       })
[17:03:03.940]                     }
[17:03:03.940]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:03.940]                     base::options(mc.cores = 1L)
[17:03:03.940]                   }
[17:03:03.940]                   ...future.strategy.old <- future::plan("list")
[17:03:03.940]                   options(future.plan = NULL)
[17:03:03.940]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.940]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.940]                 }
[17:03:03.940]                 ...future.workdir <- getwd()
[17:03:03.940]             }
[17:03:03.940]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.940]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.940]         }
[17:03:03.940]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.940]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.940]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.940]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.940]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.940]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.940]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.940]             base::names(...future.oldOptions))
[17:03:03.940]     }
[17:03:03.940]     if (FALSE) {
[17:03:03.940]     }
[17:03:03.940]     else {
[17:03:03.940]         if (TRUE) {
[17:03:03.940]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.940]                 open = "w")
[17:03:03.940]         }
[17:03:03.940]         else {
[17:03:03.940]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.940]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.940]         }
[17:03:03.940]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.940]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.940]             base::sink(type = "output", split = FALSE)
[17:03:03.940]             base::close(...future.stdout)
[17:03:03.940]         }, add = TRUE)
[17:03:03.940]     }
[17:03:03.940]     ...future.frame <- base::sys.nframe()
[17:03:03.940]     ...future.conditions <- base::list()
[17:03:03.940]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.940]     if (FALSE) {
[17:03:03.940]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.940]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.940]     }
[17:03:03.940]     ...future.result <- base::tryCatch({
[17:03:03.940]         base::withCallingHandlers({
[17:03:03.940]             ...future.value <- base::withVisible(base::local({
[17:03:03.940]                 withCallingHandlers({
[17:03:03.940]                   {
[17:03:03.940]                     ii
[17:03:03.940]                   }
[17:03:03.940]                 }, immediateCondition = function(cond) {
[17:03:03.940]                   save_rds <- function (object, pathname, ...) 
[17:03:03.940]                   {
[17:03:03.940]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:03.940]                     if (file_test("-f", pathname_tmp)) {
[17:03:03.940]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.940]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:03.940]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.940]                         fi_tmp[["mtime"]])
[17:03:03.940]                     }
[17:03:03.940]                     tryCatch({
[17:03:03.940]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:03.940]                     }, error = function(ex) {
[17:03:03.940]                       msg <- conditionMessage(ex)
[17:03:03.940]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.940]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:03.940]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.940]                         fi_tmp[["mtime"]], msg)
[17:03:03.940]                       ex$message <- msg
[17:03:03.940]                       stop(ex)
[17:03:03.940]                     })
[17:03:03.940]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:03.940]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:03.940]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:03.940]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.940]                       fi <- file.info(pathname)
[17:03:03.940]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:03.940]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.940]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:03.940]                         fi[["size"]], fi[["mtime"]])
[17:03:03.940]                       stop(msg)
[17:03:03.940]                     }
[17:03:03.940]                     invisible(pathname)
[17:03:03.940]                   }
[17:03:03.940]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:03.940]                     rootPath = tempdir()) 
[17:03:03.940]                   {
[17:03:03.940]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:03.940]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:03.940]                       tmpdir = path, fileext = ".rds")
[17:03:03.940]                     save_rds(obj, file)
[17:03:03.940]                   }
[17:03:03.940]                   saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")
[17:03:03.940]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.940]                   {
[17:03:03.940]                     inherits <- base::inherits
[17:03:03.940]                     invokeRestart <- base::invokeRestart
[17:03:03.940]                     is.null <- base::is.null
[17:03:03.940]                     muffled <- FALSE
[17:03:03.940]                     if (inherits(cond, "message")) {
[17:03:03.940]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:03.940]                       if (muffled) 
[17:03:03.940]                         invokeRestart("muffleMessage")
[17:03:03.940]                     }
[17:03:03.940]                     else if (inherits(cond, "warning")) {
[17:03:03.940]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:03.940]                       if (muffled) 
[17:03:03.940]                         invokeRestart("muffleWarning")
[17:03:03.940]                     }
[17:03:03.940]                     else if (inherits(cond, "condition")) {
[17:03:03.940]                       if (!is.null(pattern)) {
[17:03:03.940]                         computeRestarts <- base::computeRestarts
[17:03:03.940]                         grepl <- base::grepl
[17:03:03.940]                         restarts <- computeRestarts(cond)
[17:03:03.940]                         for (restart in restarts) {
[17:03:03.940]                           name <- restart$name
[17:03:03.940]                           if (is.null(name)) 
[17:03:03.940]                             next
[17:03:03.940]                           if (!grepl(pattern, name)) 
[17:03:03.940]                             next
[17:03:03.940]                           invokeRestart(restart)
[17:03:03.940]                           muffled <- TRUE
[17:03:03.940]                           break
[17:03:03.940]                         }
[17:03:03.940]                       }
[17:03:03.940]                     }
[17:03:03.940]                     invisible(muffled)
[17:03:03.940]                   }
[17:03:03.940]                   muffleCondition(cond)
[17:03:03.940]                 })
[17:03:03.940]             }))
[17:03:03.940]             future::FutureResult(value = ...future.value$value, 
[17:03:03.940]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.940]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.940]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.940]                     ...future.globalenv.names))
[17:03:03.940]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.940]         }, condition = base::local({
[17:03:03.940]             c <- base::c
[17:03:03.940]             inherits <- base::inherits
[17:03:03.940]             invokeRestart <- base::invokeRestart
[17:03:03.940]             length <- base::length
[17:03:03.940]             list <- base::list
[17:03:03.940]             seq.int <- base::seq.int
[17:03:03.940]             signalCondition <- base::signalCondition
[17:03:03.940]             sys.calls <- base::sys.calls
[17:03:03.940]             `[[` <- base::`[[`
[17:03:03.940]             `+` <- base::`+`
[17:03:03.940]             `<<-` <- base::`<<-`
[17:03:03.940]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.940]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.940]                   3L)]
[17:03:03.940]             }
[17:03:03.940]             function(cond) {
[17:03:03.940]                 is_error <- inherits(cond, "error")
[17:03:03.940]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.940]                   NULL)
[17:03:03.940]                 if (is_error) {
[17:03:03.940]                   sessionInformation <- function() {
[17:03:03.940]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.940]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.940]                       search = base::search(), system = base::Sys.info())
[17:03:03.940]                   }
[17:03:03.940]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.940]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.940]                     cond$call), session = sessionInformation(), 
[17:03:03.940]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.940]                   signalCondition(cond)
[17:03:03.940]                 }
[17:03:03.940]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.940]                 "immediateCondition"))) {
[17:03:03.940]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.940]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.940]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.940]                   if (TRUE && !signal) {
[17:03:03.940]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.940]                     {
[17:03:03.940]                       inherits <- base::inherits
[17:03:03.940]                       invokeRestart <- base::invokeRestart
[17:03:03.940]                       is.null <- base::is.null
[17:03:03.940]                       muffled <- FALSE
[17:03:03.940]                       if (inherits(cond, "message")) {
[17:03:03.940]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.940]                         if (muffled) 
[17:03:03.940]                           invokeRestart("muffleMessage")
[17:03:03.940]                       }
[17:03:03.940]                       else if (inherits(cond, "warning")) {
[17:03:03.940]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.940]                         if (muffled) 
[17:03:03.940]                           invokeRestart("muffleWarning")
[17:03:03.940]                       }
[17:03:03.940]                       else if (inherits(cond, "condition")) {
[17:03:03.940]                         if (!is.null(pattern)) {
[17:03:03.940]                           computeRestarts <- base::computeRestarts
[17:03:03.940]                           grepl <- base::grepl
[17:03:03.940]                           restarts <- computeRestarts(cond)
[17:03:03.940]                           for (restart in restarts) {
[17:03:03.940]                             name <- restart$name
[17:03:03.940]                             if (is.null(name)) 
[17:03:03.940]                               next
[17:03:03.940]                             if (!grepl(pattern, name)) 
[17:03:03.940]                               next
[17:03:03.940]                             invokeRestart(restart)
[17:03:03.940]                             muffled <- TRUE
[17:03:03.940]                             break
[17:03:03.940]                           }
[17:03:03.940]                         }
[17:03:03.940]                       }
[17:03:03.940]                       invisible(muffled)
[17:03:03.940]                     }
[17:03:03.940]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.940]                   }
[17:03:03.940]                 }
[17:03:03.940]                 else {
[17:03:03.940]                   if (TRUE) {
[17:03:03.940]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.940]                     {
[17:03:03.940]                       inherits <- base::inherits
[17:03:03.940]                       invokeRestart <- base::invokeRestart
[17:03:03.940]                       is.null <- base::is.null
[17:03:03.940]                       muffled <- FALSE
[17:03:03.940]                       if (inherits(cond, "message")) {
[17:03:03.940]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.940]                         if (muffled) 
[17:03:03.940]                           invokeRestart("muffleMessage")
[17:03:03.940]                       }
[17:03:03.940]                       else if (inherits(cond, "warning")) {
[17:03:03.940]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.940]                         if (muffled) 
[17:03:03.940]                           invokeRestart("muffleWarning")
[17:03:03.940]                       }
[17:03:03.940]                       else if (inherits(cond, "condition")) {
[17:03:03.940]                         if (!is.null(pattern)) {
[17:03:03.940]                           computeRestarts <- base::computeRestarts
[17:03:03.940]                           grepl <- base::grepl
[17:03:03.940]                           restarts <- computeRestarts(cond)
[17:03:03.940]                           for (restart in restarts) {
[17:03:03.940]                             name <- restart$name
[17:03:03.940]                             if (is.null(name)) 
[17:03:03.940]                               next
[17:03:03.940]                             if (!grepl(pattern, name)) 
[17:03:03.940]                               next
[17:03:03.940]                             invokeRestart(restart)
[17:03:03.940]                             muffled <- TRUE
[17:03:03.940]                             break
[17:03:03.940]                           }
[17:03:03.940]                         }
[17:03:03.940]                       }
[17:03:03.940]                       invisible(muffled)
[17:03:03.940]                     }
[17:03:03.940]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.940]                   }
[17:03:03.940]                 }
[17:03:03.940]             }
[17:03:03.940]         }))
[17:03:03.940]     }, error = function(ex) {
[17:03:03.940]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.940]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.940]                 ...future.rng), started = ...future.startTime, 
[17:03:03.940]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.940]             version = "1.8"), class = "FutureResult")
[17:03:03.940]     }, finally = {
[17:03:03.940]         if (!identical(...future.workdir, getwd())) 
[17:03:03.940]             setwd(...future.workdir)
[17:03:03.940]         {
[17:03:03.940]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.940]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.940]             }
[17:03:03.940]             base::options(...future.oldOptions)
[17:03:03.940]             if (.Platform$OS.type == "windows") {
[17:03:03.940]                 old_names <- names(...future.oldEnvVars)
[17:03:03.940]                 envs <- base::Sys.getenv()
[17:03:03.940]                 names <- names(envs)
[17:03:03.940]                 common <- intersect(names, old_names)
[17:03:03.940]                 added <- setdiff(names, old_names)
[17:03:03.940]                 removed <- setdiff(old_names, names)
[17:03:03.940]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.940]                   envs[common]]
[17:03:03.940]                 NAMES <- toupper(changed)
[17:03:03.940]                 args <- list()
[17:03:03.940]                 for (kk in seq_along(NAMES)) {
[17:03:03.940]                   name <- changed[[kk]]
[17:03:03.940]                   NAME <- NAMES[[kk]]
[17:03:03.940]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.940]                     next
[17:03:03.940]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.940]                 }
[17:03:03.940]                 NAMES <- toupper(added)
[17:03:03.940]                 for (kk in seq_along(NAMES)) {
[17:03:03.940]                   name <- added[[kk]]
[17:03:03.940]                   NAME <- NAMES[[kk]]
[17:03:03.940]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.940]                     next
[17:03:03.940]                   args[[name]] <- ""
[17:03:03.940]                 }
[17:03:03.940]                 NAMES <- toupper(removed)
[17:03:03.940]                 for (kk in seq_along(NAMES)) {
[17:03:03.940]                   name <- removed[[kk]]
[17:03:03.940]                   NAME <- NAMES[[kk]]
[17:03:03.940]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.940]                     next
[17:03:03.940]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.940]                 }
[17:03:03.940]                 if (length(args) > 0) 
[17:03:03.940]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.940]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.940]             }
[17:03:03.940]             else {
[17:03:03.940]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.940]             }
[17:03:03.940]             {
[17:03:03.940]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.940]                   0L) {
[17:03:03.940]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.940]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.940]                   base::options(opts)
[17:03:03.940]                 }
[17:03:03.940]                 {
[17:03:03.940]                   {
[17:03:03.940]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:03.940]                     NULL
[17:03:03.940]                   }
[17:03:03.940]                   options(future.plan = NULL)
[17:03:03.940]                   if (is.na(NA_character_)) 
[17:03:03.940]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.940]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.940]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.940]                     .init = FALSE)
[17:03:03.940]                 }
[17:03:03.940]             }
[17:03:03.940]         }
[17:03:03.940]     })
[17:03:03.940]     if (TRUE) {
[17:03:03.940]         base::sink(type = "output", split = FALSE)
[17:03:03.940]         if (TRUE) {
[17:03:03.940]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.940]         }
[17:03:03.940]         else {
[17:03:03.940]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.940]         }
[17:03:03.940]         base::close(...future.stdout)
[17:03:03.940]         ...future.stdout <- NULL
[17:03:03.940]     }
[17:03:03.940]     ...future.result$conditions <- ...future.conditions
[17:03:03.940]     ...future.result$finished <- base::Sys.time()
[17:03:03.940]     ...future.result
[17:03:03.940] }
[17:03:03.943] assign_globals() ...
[17:03:03.943] List of 1
[17:03:03.943]  $ ii: int 1
[17:03:03.943]  - attr(*, "where")=List of 1
[17:03:03.943]   ..$ ii:<environment: R_EmptyEnv> 
[17:03:03.943]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:03.943]  - attr(*, "resolved")= logi FALSE
[17:03:03.943]  - attr(*, "total_size")= num 56
[17:03:03.945] - copied ‘ii’ to environment
[17:03:03.946] assign_globals() ... done
[17:03:03.946] requestCore(): workers = 2
[17:03:03.948] MulticoreFuture started
 - Creating multicore future #2 ...
[17:03:03.949] plan(): Setting new future strategy stack:
[17:03:03.949] List of future strategies:
[17:03:03.949] 1. sequential:
[17:03:03.949]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.949]    - tweaked: FALSE
[17:03:03.949]    - call: NULL
[17:03:03.950] plan(): nbrOfWorkers() = 1
[17:03:03.952] plan(): Setting new future strategy stack:
[17:03:03.952] List of future strategies:
[17:03:03.952] 1. multicore:
[17:03:03.952]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.952]    - tweaked: FALSE
[17:03:03.952]    - call: plan(multicore)
[17:03:03.953] getGlobalsAndPackages() ...
[17:03:03.954] Searching for globals...
[17:03:03.955] - globals found: [2] ‘{’, ‘ii’
[17:03:03.955] Searching for globals ... DONE
[17:03:03.955] Resolving globals: FALSE
[17:03:03.956] The total size of the 1 globals is 56 bytes (56 bytes)
[17:03:03.956] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:03:03.957] plan(): nbrOfWorkers() = 2
[17:03:03.957] - globals: [1] ‘ii’
[17:03:03.957] 
[17:03:03.957] getGlobalsAndPackages() ... DONE
[17:03:03.958] Packages needed by the future expression (n = 0): <none>
[17:03:03.958] Packages needed by future strategies (n = 0): <none>
[17:03:03.963] {
[17:03:03.963]     {
[17:03:03.963]         {
[17:03:03.963]             ...future.startTime <- base::Sys.time()
[17:03:03.963]             {
[17:03:03.963]                 {
[17:03:03.963]                   {
[17:03:03.963]                     {
[17:03:03.963]                       base::local({
[17:03:03.963]                         has_future <- base::requireNamespace("future", 
[17:03:03.963]                           quietly = TRUE)
[17:03:03.963]                         if (has_future) {
[17:03:03.963]                           ns <- base::getNamespace("future")
[17:03:03.963]                           version <- ns[[".package"]][["version"]]
[17:03:03.963]                           if (is.null(version)) 
[17:03:03.963]                             version <- utils::packageVersion("future")
[17:03:03.963]                         }
[17:03:03.963]                         else {
[17:03:03.963]                           version <- NULL
[17:03:03.963]                         }
[17:03:03.963]                         if (!has_future || version < "1.8.0") {
[17:03:03.963]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.963]                             "", base::R.version$version.string), 
[17:03:03.963]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:03.963]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.963]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.963]                               "release", "version")], collapse = " "), 
[17:03:03.963]                             hostname = base::Sys.info()[["nodename"]])
[17:03:03.963]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.963]                             info)
[17:03:03.963]                           info <- base::paste(info, collapse = "; ")
[17:03:03.963]                           if (!has_future) {
[17:03:03.963]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.963]                               info)
[17:03:03.963]                           }
[17:03:03.963]                           else {
[17:03:03.963]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.963]                               info, version)
[17:03:03.963]                           }
[17:03:03.963]                           base::stop(msg)
[17:03:03.963]                         }
[17:03:03.963]                       })
[17:03:03.963]                     }
[17:03:03.963]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:03.963]                     base::options(mc.cores = 1L)
[17:03:03.963]                   }
[17:03:03.963]                   ...future.strategy.old <- future::plan("list")
[17:03:03.963]                   options(future.plan = NULL)
[17:03:03.963]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.963]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.963]                 }
[17:03:03.963]                 ...future.workdir <- getwd()
[17:03:03.963]             }
[17:03:03.963]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.963]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.963]         }
[17:03:03.963]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.963]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.963]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.963]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.963]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.963]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.963]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.963]             base::names(...future.oldOptions))
[17:03:03.963]     }
[17:03:03.963]     if (FALSE) {
[17:03:03.963]     }
[17:03:03.963]     else {
[17:03:03.963]         if (TRUE) {
[17:03:03.963]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.963]                 open = "w")
[17:03:03.963]         }
[17:03:03.963]         else {
[17:03:03.963]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.963]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.963]         }
[17:03:03.963]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.963]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.963]             base::sink(type = "output", split = FALSE)
[17:03:03.963]             base::close(...future.stdout)
[17:03:03.963]         }, add = TRUE)
[17:03:03.963]     }
[17:03:03.963]     ...future.frame <- base::sys.nframe()
[17:03:03.963]     ...future.conditions <- base::list()
[17:03:03.963]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.963]     if (FALSE) {
[17:03:03.963]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.963]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.963]     }
[17:03:03.963]     ...future.result <- base::tryCatch({
[17:03:03.963]         base::withCallingHandlers({
[17:03:03.963]             ...future.value <- base::withVisible(base::local({
[17:03:03.963]                 withCallingHandlers({
[17:03:03.963]                   {
[17:03:03.963]                     ii
[17:03:03.963]                   }
[17:03:03.963]                 }, immediateCondition = function(cond) {
[17:03:03.963]                   save_rds <- function (object, pathname, ...) 
[17:03:03.963]                   {
[17:03:03.963]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:03.963]                     if (file_test("-f", pathname_tmp)) {
[17:03:03.963]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.963]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:03.963]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.963]                         fi_tmp[["mtime"]])
[17:03:03.963]                     }
[17:03:03.963]                     tryCatch({
[17:03:03.963]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:03.963]                     }, error = function(ex) {
[17:03:03.963]                       msg <- conditionMessage(ex)
[17:03:03.963]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.963]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:03.963]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.963]                         fi_tmp[["mtime"]], msg)
[17:03:03.963]                       ex$message <- msg
[17:03:03.963]                       stop(ex)
[17:03:03.963]                     })
[17:03:03.963]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:03.963]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:03.963]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:03.963]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.963]                       fi <- file.info(pathname)
[17:03:03.963]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:03.963]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.963]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:03.963]                         fi[["size"]], fi[["mtime"]])
[17:03:03.963]                       stop(msg)
[17:03:03.963]                     }
[17:03:03.963]                     invisible(pathname)
[17:03:03.963]                   }
[17:03:03.963]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:03.963]                     rootPath = tempdir()) 
[17:03:03.963]                   {
[17:03:03.963]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:03.963]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:03.963]                       tmpdir = path, fileext = ".rds")
[17:03:03.963]                     save_rds(obj, file)
[17:03:03.963]                   }
[17:03:03.963]                   saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")
[17:03:03.963]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.963]                   {
[17:03:03.963]                     inherits <- base::inherits
[17:03:03.963]                     invokeRestart <- base::invokeRestart
[17:03:03.963]                     is.null <- base::is.null
[17:03:03.963]                     muffled <- FALSE
[17:03:03.963]                     if (inherits(cond, "message")) {
[17:03:03.963]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:03.963]                       if (muffled) 
[17:03:03.963]                         invokeRestart("muffleMessage")
[17:03:03.963]                     }
[17:03:03.963]                     else if (inherits(cond, "warning")) {
[17:03:03.963]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:03.963]                       if (muffled) 
[17:03:03.963]                         invokeRestart("muffleWarning")
[17:03:03.963]                     }
[17:03:03.963]                     else if (inherits(cond, "condition")) {
[17:03:03.963]                       if (!is.null(pattern)) {
[17:03:03.963]                         computeRestarts <- base::computeRestarts
[17:03:03.963]                         grepl <- base::grepl
[17:03:03.963]                         restarts <- computeRestarts(cond)
[17:03:03.963]                         for (restart in restarts) {
[17:03:03.963]                           name <- restart$name
[17:03:03.963]                           if (is.null(name)) 
[17:03:03.963]                             next
[17:03:03.963]                           if (!grepl(pattern, name)) 
[17:03:03.963]                             next
[17:03:03.963]                           invokeRestart(restart)
[17:03:03.963]                           muffled <- TRUE
[17:03:03.963]                           break
[17:03:03.963]                         }
[17:03:03.963]                       }
[17:03:03.963]                     }
[17:03:03.963]                     invisible(muffled)
[17:03:03.963]                   }
[17:03:03.963]                   muffleCondition(cond)
[17:03:03.963]                 })
[17:03:03.963]             }))
[17:03:03.963]             future::FutureResult(value = ...future.value$value, 
[17:03:03.963]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.963]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.963]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.963]                     ...future.globalenv.names))
[17:03:03.963]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.963]         }, condition = base::local({
[17:03:03.963]             c <- base::c
[17:03:03.963]             inherits <- base::inherits
[17:03:03.963]             invokeRestart <- base::invokeRestart
[17:03:03.963]             length <- base::length
[17:03:03.963]             list <- base::list
[17:03:03.963]             seq.int <- base::seq.int
[17:03:03.963]             signalCondition <- base::signalCondition
[17:03:03.963]             sys.calls <- base::sys.calls
[17:03:03.963]             `[[` <- base::`[[`
[17:03:03.963]             `+` <- base::`+`
[17:03:03.963]             `<<-` <- base::`<<-`
[17:03:03.963]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.963]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.963]                   3L)]
[17:03:03.963]             }
[17:03:03.963]             function(cond) {
[17:03:03.963]                 is_error <- inherits(cond, "error")
[17:03:03.963]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.963]                   NULL)
[17:03:03.963]                 if (is_error) {
[17:03:03.963]                   sessionInformation <- function() {
[17:03:03.963]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.963]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.963]                       search = base::search(), system = base::Sys.info())
[17:03:03.963]                   }
[17:03:03.963]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.963]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.963]                     cond$call), session = sessionInformation(), 
[17:03:03.963]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.963]                   signalCondition(cond)
[17:03:03.963]                 }
[17:03:03.963]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.963]                 "immediateCondition"))) {
[17:03:03.963]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.963]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.963]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.963]                   if (TRUE && !signal) {
[17:03:03.963]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.963]                     {
[17:03:03.963]                       inherits <- base::inherits
[17:03:03.963]                       invokeRestart <- base::invokeRestart
[17:03:03.963]                       is.null <- base::is.null
[17:03:03.963]                       muffled <- FALSE
[17:03:03.963]                       if (inherits(cond, "message")) {
[17:03:03.963]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.963]                         if (muffled) 
[17:03:03.963]                           invokeRestart("muffleMessage")
[17:03:03.963]                       }
[17:03:03.963]                       else if (inherits(cond, "warning")) {
[17:03:03.963]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.963]                         if (muffled) 
[17:03:03.963]                           invokeRestart("muffleWarning")
[17:03:03.963]                       }
[17:03:03.963]                       else if (inherits(cond, "condition")) {
[17:03:03.963]                         if (!is.null(pattern)) {
[17:03:03.963]                           computeRestarts <- base::computeRestarts
[17:03:03.963]                           grepl <- base::grepl
[17:03:03.963]                           restarts <- computeRestarts(cond)
[17:03:03.963]                           for (restart in restarts) {
[17:03:03.963]                             name <- restart$name
[17:03:03.963]                             if (is.null(name)) 
[17:03:03.963]                               next
[17:03:03.963]                             if (!grepl(pattern, name)) 
[17:03:03.963]                               next
[17:03:03.963]                             invokeRestart(restart)
[17:03:03.963]                             muffled <- TRUE
[17:03:03.963]                             break
[17:03:03.963]                           }
[17:03:03.963]                         }
[17:03:03.963]                       }
[17:03:03.963]                       invisible(muffled)
[17:03:03.963]                     }
[17:03:03.963]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.963]                   }
[17:03:03.963]                 }
[17:03:03.963]                 else {
[17:03:03.963]                   if (TRUE) {
[17:03:03.963]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.963]                     {
[17:03:03.963]                       inherits <- base::inherits
[17:03:03.963]                       invokeRestart <- base::invokeRestart
[17:03:03.963]                       is.null <- base::is.null
[17:03:03.963]                       muffled <- FALSE
[17:03:03.963]                       if (inherits(cond, "message")) {
[17:03:03.963]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.963]                         if (muffled) 
[17:03:03.963]                           invokeRestart("muffleMessage")
[17:03:03.963]                       }
[17:03:03.963]                       else if (inherits(cond, "warning")) {
[17:03:03.963]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.963]                         if (muffled) 
[17:03:03.963]                           invokeRestart("muffleWarning")
[17:03:03.963]                       }
[17:03:03.963]                       else if (inherits(cond, "condition")) {
[17:03:03.963]                         if (!is.null(pattern)) {
[17:03:03.963]                           computeRestarts <- base::computeRestarts
[17:03:03.963]                           grepl <- base::grepl
[17:03:03.963]                           restarts <- computeRestarts(cond)
[17:03:03.963]                           for (restart in restarts) {
[17:03:03.963]                             name <- restart$name
[17:03:03.963]                             if (is.null(name)) 
[17:03:03.963]                               next
[17:03:03.963]                             if (!grepl(pattern, name)) 
[17:03:03.963]                               next
[17:03:03.963]                             invokeRestart(restart)
[17:03:03.963]                             muffled <- TRUE
[17:03:03.963]                             break
[17:03:03.963]                           }
[17:03:03.963]                         }
[17:03:03.963]                       }
[17:03:03.963]                       invisible(muffled)
[17:03:03.963]                     }
[17:03:03.963]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.963]                   }
[17:03:03.963]                 }
[17:03:03.963]             }
[17:03:03.963]         }))
[17:03:03.963]     }, error = function(ex) {
[17:03:03.963]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.963]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.963]                 ...future.rng), started = ...future.startTime, 
[17:03:03.963]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.963]             version = "1.8"), class = "FutureResult")
[17:03:03.963]     }, finally = {
[17:03:03.963]         if (!identical(...future.workdir, getwd())) 
[17:03:03.963]             setwd(...future.workdir)
[17:03:03.963]         {
[17:03:03.963]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.963]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.963]             }
[17:03:03.963]             base::options(...future.oldOptions)
[17:03:03.963]             if (.Platform$OS.type == "windows") {
[17:03:03.963]                 old_names <- names(...future.oldEnvVars)
[17:03:03.963]                 envs <- base::Sys.getenv()
[17:03:03.963]                 names <- names(envs)
[17:03:03.963]                 common <- intersect(names, old_names)
[17:03:03.963]                 added <- setdiff(names, old_names)
[17:03:03.963]                 removed <- setdiff(old_names, names)
[17:03:03.963]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.963]                   envs[common]]
[17:03:03.963]                 NAMES <- toupper(changed)
[17:03:03.963]                 args <- list()
[17:03:03.963]                 for (kk in seq_along(NAMES)) {
[17:03:03.963]                   name <- changed[[kk]]
[17:03:03.963]                   NAME <- NAMES[[kk]]
[17:03:03.963]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.963]                     next
[17:03:03.963]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.963]                 }
[17:03:03.963]                 NAMES <- toupper(added)
[17:03:03.963]                 for (kk in seq_along(NAMES)) {
[17:03:03.963]                   name <- added[[kk]]
[17:03:03.963]                   NAME <- NAMES[[kk]]
[17:03:03.963]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.963]                     next
[17:03:03.963]                   args[[name]] <- ""
[17:03:03.963]                 }
[17:03:03.963]                 NAMES <- toupper(removed)
[17:03:03.963]                 for (kk in seq_along(NAMES)) {
[17:03:03.963]                   name <- removed[[kk]]
[17:03:03.963]                   NAME <- NAMES[[kk]]
[17:03:03.963]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.963]                     next
[17:03:03.963]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.963]                 }
[17:03:03.963]                 if (length(args) > 0) 
[17:03:03.963]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.963]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.963]             }
[17:03:03.963]             else {
[17:03:03.963]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.963]             }
[17:03:03.963]             {
[17:03:03.963]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.963]                   0L) {
[17:03:03.963]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.963]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.963]                   base::options(opts)
[17:03:03.963]                 }
[17:03:03.963]                 {
[17:03:03.963]                   {
[17:03:03.963]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:03.963]                     NULL
[17:03:03.963]                   }
[17:03:03.963]                   options(future.plan = NULL)
[17:03:03.963]                   if (is.na(NA_character_)) 
[17:03:03.963]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.963]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.963]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.963]                     .init = FALSE)
[17:03:03.963]                 }
[17:03:03.963]             }
[17:03:03.963]         }
[17:03:03.963]     })
[17:03:03.963]     if (TRUE) {
[17:03:03.963]         base::sink(type = "output", split = FALSE)
[17:03:03.963]         if (TRUE) {
[17:03:03.963]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.963]         }
[17:03:03.963]         else {
[17:03:03.963]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.963]         }
[17:03:03.963]         base::close(...future.stdout)
[17:03:03.963]         ...future.stdout <- NULL
[17:03:03.963]     }
[17:03:03.963]     ...future.result$conditions <- ...future.conditions
[17:03:03.963]     ...future.result$finished <- base::Sys.time()
[17:03:03.963]     ...future.result
[17:03:03.963] }
[17:03:03.966] assign_globals() ...
[17:03:03.966] List of 1
[17:03:03.966]  $ ii: int 2
[17:03:03.966]  - attr(*, "where")=List of 1
[17:03:03.966]   ..$ ii:<environment: R_EmptyEnv> 
[17:03:03.966]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:03.966]  - attr(*, "resolved")= logi FALSE
[17:03:03.966]  - attr(*, "total_size")= num 56
[17:03:03.970] - copied ‘ii’ to environment
[17:03:03.970] assign_globals() ... done
[17:03:03.971] requestCore(): workers = 2
[17:03:03.973] MulticoreFuture started
 - Creating multicore future #3 ...
[17:03:03.974] plan(): Setting new future strategy stack:
[17:03:03.974] List of future strategies:
[17:03:03.974] 1. sequential:
[17:03:03.974]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:03.974]    - tweaked: FALSE
[17:03:03.974]    - call: NULL
[17:03:03.976] plan(): nbrOfWorkers() = 1
[17:03:03.978] plan(): Setting new future strategy stack:
[17:03:03.978] List of future strategies:
[17:03:03.978] 1. multicore:
[17:03:03.978]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:03.978]    - tweaked: FALSE
[17:03:03.978]    - call: plan(multicore)
[17:03:03.979] getGlobalsAndPackages() ...
[17:03:03.979] Searching for globals...
[17:03:03.981] - globals found: [2] ‘{’, ‘ii’
[17:03:03.981] Searching for globals ... DONE
[17:03:03.981] Resolving globals: FALSE
[17:03:03.982] The total size of the 1 globals is 56 bytes (56 bytes)
[17:03:03.982] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:03:03.983] - globals: [1] ‘ii’
[17:03:03.983] 
[17:03:03.983] getGlobalsAndPackages() ... DONE
[17:03:03.983] plan(): nbrOfWorkers() = 2
[17:03:03.984] Packages needed by the future expression (n = 0): <none>
[17:03:03.984] Packages needed by future strategies (n = 0): <none>
[17:03:03.985] {
[17:03:03.985]     {
[17:03:03.985]         {
[17:03:03.985]             ...future.startTime <- base::Sys.time()
[17:03:03.985]             {
[17:03:03.985]                 {
[17:03:03.985]                   {
[17:03:03.985]                     {
[17:03:03.985]                       base::local({
[17:03:03.985]                         has_future <- base::requireNamespace("future", 
[17:03:03.985]                           quietly = TRUE)
[17:03:03.985]                         if (has_future) {
[17:03:03.985]                           ns <- base::getNamespace("future")
[17:03:03.985]                           version <- ns[[".package"]][["version"]]
[17:03:03.985]                           if (is.null(version)) 
[17:03:03.985]                             version <- utils::packageVersion("future")
[17:03:03.985]                         }
[17:03:03.985]                         else {
[17:03:03.985]                           version <- NULL
[17:03:03.985]                         }
[17:03:03.985]                         if (!has_future || version < "1.8.0") {
[17:03:03.985]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:03.985]                             "", base::R.version$version.string), 
[17:03:03.985]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:03.985]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:03.985]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:03.985]                               "release", "version")], collapse = " "), 
[17:03:03.985]                             hostname = base::Sys.info()[["nodename"]])
[17:03:03.985]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:03.985]                             info)
[17:03:03.985]                           info <- base::paste(info, collapse = "; ")
[17:03:03.985]                           if (!has_future) {
[17:03:03.985]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:03.985]                               info)
[17:03:03.985]                           }
[17:03:03.985]                           else {
[17:03:03.985]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:03.985]                               info, version)
[17:03:03.985]                           }
[17:03:03.985]                           base::stop(msg)
[17:03:03.985]                         }
[17:03:03.985]                       })
[17:03:03.985]                     }
[17:03:03.985]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:03.985]                     base::options(mc.cores = 1L)
[17:03:03.985]                   }
[17:03:03.985]                   ...future.strategy.old <- future::plan("list")
[17:03:03.985]                   options(future.plan = NULL)
[17:03:03.985]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.985]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:03.985]                 }
[17:03:03.985]                 ...future.workdir <- getwd()
[17:03:03.985]             }
[17:03:03.985]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:03.985]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:03.985]         }
[17:03:03.985]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:03.985]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:03.985]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:03.985]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:03.985]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:03.985]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:03.985]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:03.985]             base::names(...future.oldOptions))
[17:03:03.985]     }
[17:03:03.985]     if (FALSE) {
[17:03:03.985]     }
[17:03:03.985]     else {
[17:03:03.985]         if (TRUE) {
[17:03:03.985]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:03.985]                 open = "w")
[17:03:03.985]         }
[17:03:03.985]         else {
[17:03:03.985]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:03.985]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:03.985]         }
[17:03:03.985]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:03.985]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:03.985]             base::sink(type = "output", split = FALSE)
[17:03:03.985]             base::close(...future.stdout)
[17:03:03.985]         }, add = TRUE)
[17:03:03.985]     }
[17:03:03.985]     ...future.frame <- base::sys.nframe()
[17:03:03.985]     ...future.conditions <- base::list()
[17:03:03.985]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:03.985]     if (FALSE) {
[17:03:03.985]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:03.985]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:03.985]     }
[17:03:03.985]     ...future.result <- base::tryCatch({
[17:03:03.985]         base::withCallingHandlers({
[17:03:03.985]             ...future.value <- base::withVisible(base::local({
[17:03:03.985]                 withCallingHandlers({
[17:03:03.985]                   {
[17:03:03.985]                     ii
[17:03:03.985]                   }
[17:03:03.985]                 }, immediateCondition = function(cond) {
[17:03:03.985]                   save_rds <- function (object, pathname, ...) 
[17:03:03.985]                   {
[17:03:03.985]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:03.985]                     if (file_test("-f", pathname_tmp)) {
[17:03:03.985]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.985]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:03.985]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.985]                         fi_tmp[["mtime"]])
[17:03:03.985]                     }
[17:03:03.985]                     tryCatch({
[17:03:03.985]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:03.985]                     }, error = function(ex) {
[17:03:03.985]                       msg <- conditionMessage(ex)
[17:03:03.985]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.985]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:03.985]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.985]                         fi_tmp[["mtime"]], msg)
[17:03:03.985]                       ex$message <- msg
[17:03:03.985]                       stop(ex)
[17:03:03.985]                     })
[17:03:03.985]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:03.985]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:03.985]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:03.985]                       fi_tmp <- file.info(pathname_tmp)
[17:03:03.985]                       fi <- file.info(pathname)
[17:03:03.985]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:03.985]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:03.985]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:03.985]                         fi[["size"]], fi[["mtime"]])
[17:03:03.985]                       stop(msg)
[17:03:03.985]                     }
[17:03:03.985]                     invisible(pathname)
[17:03:03.985]                   }
[17:03:03.985]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:03.985]                     rootPath = tempdir()) 
[17:03:03.985]                   {
[17:03:03.985]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:03.985]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:03.985]                       tmpdir = path, fileext = ".rds")
[17:03:03.985]                     save_rds(obj, file)
[17:03:03.985]                   }
[17:03:03.985]                   saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")
[17:03:03.985]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.985]                   {
[17:03:03.985]                     inherits <- base::inherits
[17:03:03.985]                     invokeRestart <- base::invokeRestart
[17:03:03.985]                     is.null <- base::is.null
[17:03:03.985]                     muffled <- FALSE
[17:03:03.985]                     if (inherits(cond, "message")) {
[17:03:03.985]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:03.985]                       if (muffled) 
[17:03:03.985]                         invokeRestart("muffleMessage")
[17:03:03.985]                     }
[17:03:03.985]                     else if (inherits(cond, "warning")) {
[17:03:03.985]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:03.985]                       if (muffled) 
[17:03:03.985]                         invokeRestart("muffleWarning")
[17:03:03.985]                     }
[17:03:03.985]                     else if (inherits(cond, "condition")) {
[17:03:03.985]                       if (!is.null(pattern)) {
[17:03:03.985]                         computeRestarts <- base::computeRestarts
[17:03:03.985]                         grepl <- base::grepl
[17:03:03.985]                         restarts <- computeRestarts(cond)
[17:03:03.985]                         for (restart in restarts) {
[17:03:03.985]                           name <- restart$name
[17:03:03.985]                           if (is.null(name)) 
[17:03:03.985]                             next
[17:03:03.985]                           if (!grepl(pattern, name)) 
[17:03:03.985]                             next
[17:03:03.985]                           invokeRestart(restart)
[17:03:03.985]                           muffled <- TRUE
[17:03:03.985]                           break
[17:03:03.985]                         }
[17:03:03.985]                       }
[17:03:03.985]                     }
[17:03:03.985]                     invisible(muffled)
[17:03:03.985]                   }
[17:03:03.985]                   muffleCondition(cond)
[17:03:03.985]                 })
[17:03:03.985]             }))
[17:03:03.985]             future::FutureResult(value = ...future.value$value, 
[17:03:03.985]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.985]                   ...future.rng), globalenv = if (FALSE) 
[17:03:03.985]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:03.985]                     ...future.globalenv.names))
[17:03:03.985]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:03.985]         }, condition = base::local({
[17:03:03.985]             c <- base::c
[17:03:03.985]             inherits <- base::inherits
[17:03:03.985]             invokeRestart <- base::invokeRestart
[17:03:03.985]             length <- base::length
[17:03:03.985]             list <- base::list
[17:03:03.985]             seq.int <- base::seq.int
[17:03:03.985]             signalCondition <- base::signalCondition
[17:03:03.985]             sys.calls <- base::sys.calls
[17:03:03.985]             `[[` <- base::`[[`
[17:03:03.985]             `+` <- base::`+`
[17:03:03.985]             `<<-` <- base::`<<-`
[17:03:03.985]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:03.985]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:03.985]                   3L)]
[17:03:03.985]             }
[17:03:03.985]             function(cond) {
[17:03:03.985]                 is_error <- inherits(cond, "error")
[17:03:03.985]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:03.985]                   NULL)
[17:03:03.985]                 if (is_error) {
[17:03:03.985]                   sessionInformation <- function() {
[17:03:03.985]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:03.985]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:03.985]                       search = base::search(), system = base::Sys.info())
[17:03:03.985]                   }
[17:03:03.985]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.985]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:03.985]                     cond$call), session = sessionInformation(), 
[17:03:03.985]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:03.985]                   signalCondition(cond)
[17:03:03.985]                 }
[17:03:03.985]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:03.985]                 "immediateCondition"))) {
[17:03:03.985]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:03.985]                   ...future.conditions[[length(...future.conditions) + 
[17:03:03.985]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:03.985]                   if (TRUE && !signal) {
[17:03:03.985]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.985]                     {
[17:03:03.985]                       inherits <- base::inherits
[17:03:03.985]                       invokeRestart <- base::invokeRestart
[17:03:03.985]                       is.null <- base::is.null
[17:03:03.985]                       muffled <- FALSE
[17:03:03.985]                       if (inherits(cond, "message")) {
[17:03:03.985]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.985]                         if (muffled) 
[17:03:03.985]                           invokeRestart("muffleMessage")
[17:03:03.985]                       }
[17:03:03.985]                       else if (inherits(cond, "warning")) {
[17:03:03.985]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.985]                         if (muffled) 
[17:03:03.985]                           invokeRestart("muffleWarning")
[17:03:03.985]                       }
[17:03:03.985]                       else if (inherits(cond, "condition")) {
[17:03:03.985]                         if (!is.null(pattern)) {
[17:03:03.985]                           computeRestarts <- base::computeRestarts
[17:03:03.985]                           grepl <- base::grepl
[17:03:03.985]                           restarts <- computeRestarts(cond)
[17:03:03.985]                           for (restart in restarts) {
[17:03:03.985]                             name <- restart$name
[17:03:03.985]                             if (is.null(name)) 
[17:03:03.985]                               next
[17:03:03.985]                             if (!grepl(pattern, name)) 
[17:03:03.985]                               next
[17:03:03.985]                             invokeRestart(restart)
[17:03:03.985]                             muffled <- TRUE
[17:03:03.985]                             break
[17:03:03.985]                           }
[17:03:03.985]                         }
[17:03:03.985]                       }
[17:03:03.985]                       invisible(muffled)
[17:03:03.985]                     }
[17:03:03.985]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.985]                   }
[17:03:03.985]                 }
[17:03:03.985]                 else {
[17:03:03.985]                   if (TRUE) {
[17:03:03.985]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:03.985]                     {
[17:03:03.985]                       inherits <- base::inherits
[17:03:03.985]                       invokeRestart <- base::invokeRestart
[17:03:03.985]                       is.null <- base::is.null
[17:03:03.985]                       muffled <- FALSE
[17:03:03.985]                       if (inherits(cond, "message")) {
[17:03:03.985]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:03.985]                         if (muffled) 
[17:03:03.985]                           invokeRestart("muffleMessage")
[17:03:03.985]                       }
[17:03:03.985]                       else if (inherits(cond, "warning")) {
[17:03:03.985]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:03.985]                         if (muffled) 
[17:03:03.985]                           invokeRestart("muffleWarning")
[17:03:03.985]                       }
[17:03:03.985]                       else if (inherits(cond, "condition")) {
[17:03:03.985]                         if (!is.null(pattern)) {
[17:03:03.985]                           computeRestarts <- base::computeRestarts
[17:03:03.985]                           grepl <- base::grepl
[17:03:03.985]                           restarts <- computeRestarts(cond)
[17:03:03.985]                           for (restart in restarts) {
[17:03:03.985]                             name <- restart$name
[17:03:03.985]                             if (is.null(name)) 
[17:03:03.985]                               next
[17:03:03.985]                             if (!grepl(pattern, name)) 
[17:03:03.985]                               next
[17:03:03.985]                             invokeRestart(restart)
[17:03:03.985]                             muffled <- TRUE
[17:03:03.985]                             break
[17:03:03.985]                           }
[17:03:03.985]                         }
[17:03:03.985]                       }
[17:03:03.985]                       invisible(muffled)
[17:03:03.985]                     }
[17:03:03.985]                     muffleCondition(cond, pattern = "^muffle")
[17:03:03.985]                   }
[17:03:03.985]                 }
[17:03:03.985]             }
[17:03:03.985]         }))
[17:03:03.985]     }, error = function(ex) {
[17:03:03.985]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:03.985]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:03.985]                 ...future.rng), started = ...future.startTime, 
[17:03:03.985]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:03.985]             version = "1.8"), class = "FutureResult")
[17:03:03.985]     }, finally = {
[17:03:03.985]         if (!identical(...future.workdir, getwd())) 
[17:03:03.985]             setwd(...future.workdir)
[17:03:03.985]         {
[17:03:03.985]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:03.985]                 ...future.oldOptions$nwarnings <- NULL
[17:03:03.985]             }
[17:03:03.985]             base::options(...future.oldOptions)
[17:03:03.985]             if (.Platform$OS.type == "windows") {
[17:03:03.985]                 old_names <- names(...future.oldEnvVars)
[17:03:03.985]                 envs <- base::Sys.getenv()
[17:03:03.985]                 names <- names(envs)
[17:03:03.985]                 common <- intersect(names, old_names)
[17:03:03.985]                 added <- setdiff(names, old_names)
[17:03:03.985]                 removed <- setdiff(old_names, names)
[17:03:03.985]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:03.985]                   envs[common]]
[17:03:03.985]                 NAMES <- toupper(changed)
[17:03:03.985]                 args <- list()
[17:03:03.985]                 for (kk in seq_along(NAMES)) {
[17:03:03.985]                   name <- changed[[kk]]
[17:03:03.985]                   NAME <- NAMES[[kk]]
[17:03:03.985]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.985]                     next
[17:03:03.985]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.985]                 }
[17:03:03.985]                 NAMES <- toupper(added)
[17:03:03.985]                 for (kk in seq_along(NAMES)) {
[17:03:03.985]                   name <- added[[kk]]
[17:03:03.985]                   NAME <- NAMES[[kk]]
[17:03:03.985]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.985]                     next
[17:03:03.985]                   args[[name]] <- ""
[17:03:03.985]                 }
[17:03:03.985]                 NAMES <- toupper(removed)
[17:03:03.985]                 for (kk in seq_along(NAMES)) {
[17:03:03.985]                   name <- removed[[kk]]
[17:03:03.985]                   NAME <- NAMES[[kk]]
[17:03:03.985]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:03.985]                     next
[17:03:03.985]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:03.985]                 }
[17:03:03.985]                 if (length(args) > 0) 
[17:03:03.985]                   base::do.call(base::Sys.setenv, args = args)
[17:03:03.985]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:03.985]             }
[17:03:03.985]             else {
[17:03:03.985]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:03.985]             }
[17:03:03.985]             {
[17:03:03.985]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:03.985]                   0L) {
[17:03:03.985]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:03.985]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:03.985]                   base::options(opts)
[17:03:03.985]                 }
[17:03:03.985]                 {
[17:03:03.985]                   {
[17:03:03.985]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:03.985]                     NULL
[17:03:03.985]                   }
[17:03:03.985]                   options(future.plan = NULL)
[17:03:03.985]                   if (is.na(NA_character_)) 
[17:03:03.985]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:03.985]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:03.985]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:03.985]                     .init = FALSE)
[17:03:03.985]                 }
[17:03:03.985]             }
[17:03:03.985]         }
[17:03:03.985]     })
[17:03:03.985]     if (TRUE) {
[17:03:03.985]         base::sink(type = "output", split = FALSE)
[17:03:03.985]         if (TRUE) {
[17:03:03.985]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:03.985]         }
[17:03:03.985]         else {
[17:03:03.985]             ...future.result["stdout"] <- base::list(NULL)
[17:03:03.985]         }
[17:03:03.985]         base::close(...future.stdout)
[17:03:03.985]         ...future.stdout <- NULL
[17:03:03.985]     }
[17:03:03.985]     ...future.result$conditions <- ...future.conditions
[17:03:03.985]     ...future.result$finished <- base::Sys.time()
[17:03:03.985]     ...future.result
[17:03:03.985] }
[17:03:03.988] assign_globals() ...
[17:03:03.988] List of 1
[17:03:03.988]  $ ii: int 3
[17:03:03.988]  - attr(*, "where")=List of 1
[17:03:03.988]   ..$ ii:<environment: R_EmptyEnv> 
[17:03:03.988]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:03.988]  - attr(*, "resolved")= logi FALSE
[17:03:03.988]  - attr(*, "total_size")= num 56
[17:03:03.992] - copied ‘ii’ to environment
[17:03:03.992] assign_globals() ... done
[17:03:03.992] requestCore(): workers = 2
[17:03:03.993] Poll #1 (0): usedCores() = 2, workers = 2
[17:03:04.004] result() for MulticoreFuture ...
[17:03:04.005] result() for MulticoreFuture ...
[17:03:04.005] result() for MulticoreFuture ... done
[17:03:04.005] result() for MulticoreFuture ... done
[17:03:04.005] result() for MulticoreFuture ...
[17:03:04.005] result() for MulticoreFuture ... done
[17:03:04.009] MulticoreFuture started
 - Creating multicore future #4 ...
[17:03:04.009] plan(): Setting new future strategy stack:
[17:03:04.010] List of future strategies:
[17:03:04.010] 1. sequential:
[17:03:04.010]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:04.010]    - tweaked: FALSE
[17:03:04.010]    - call: NULL
[17:03:04.011] plan(): nbrOfWorkers() = 1
[17:03:04.013] plan(): Setting new future strategy stack:
[17:03:04.013] List of future strategies:
[17:03:04.013] 1. multicore:
[17:03:04.013]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:04.013]    - tweaked: FALSE
[17:03:04.013]    - call: plan(multicore)
[17:03:04.015] getGlobalsAndPackages() ...
[17:03:04.015] Searching for globals...
[17:03:04.016] - globals found: [2] ‘{’, ‘ii’
[17:03:04.017] Searching for globals ... DONE
[17:03:04.017] Resolving globals: FALSE
[17:03:04.017] The total size of the 1 globals is 56 bytes (56 bytes)
[17:03:04.018] plan(): nbrOfWorkers() = 2
[17:03:04.018] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:03:04.018] - globals: [1] ‘ii’
[17:03:04.018] 
[17:03:04.018] getGlobalsAndPackages() ... DONE
[17:03:04.019] Packages needed by the future expression (n = 0): <none>
[17:03:04.019] Packages needed by future strategies (n = 0): <none>
[17:03:04.020] {
[17:03:04.020]     {
[17:03:04.020]         {
[17:03:04.020]             ...future.startTime <- base::Sys.time()
[17:03:04.020]             {
[17:03:04.020]                 {
[17:03:04.020]                   {
[17:03:04.020]                     {
[17:03:04.020]                       base::local({
[17:03:04.020]                         has_future <- base::requireNamespace("future", 
[17:03:04.020]                           quietly = TRUE)
[17:03:04.020]                         if (has_future) {
[17:03:04.020]                           ns <- base::getNamespace("future")
[17:03:04.020]                           version <- ns[[".package"]][["version"]]
[17:03:04.020]                           if (is.null(version)) 
[17:03:04.020]                             version <- utils::packageVersion("future")
[17:03:04.020]                         }
[17:03:04.020]                         else {
[17:03:04.020]                           version <- NULL
[17:03:04.020]                         }
[17:03:04.020]                         if (!has_future || version < "1.8.0") {
[17:03:04.020]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:04.020]                             "", base::R.version$version.string), 
[17:03:04.020]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:04.020]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:04.020]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:04.020]                               "release", "version")], collapse = " "), 
[17:03:04.020]                             hostname = base::Sys.info()[["nodename"]])
[17:03:04.020]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:04.020]                             info)
[17:03:04.020]                           info <- base::paste(info, collapse = "; ")
[17:03:04.020]                           if (!has_future) {
[17:03:04.020]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:04.020]                               info)
[17:03:04.020]                           }
[17:03:04.020]                           else {
[17:03:04.020]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:04.020]                               info, version)
[17:03:04.020]                           }
[17:03:04.020]                           base::stop(msg)
[17:03:04.020]                         }
[17:03:04.020]                       })
[17:03:04.020]                     }
[17:03:04.020]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:04.020]                     base::options(mc.cores = 1L)
[17:03:04.020]                   }
[17:03:04.020]                   ...future.strategy.old <- future::plan("list")
[17:03:04.020]                   options(future.plan = NULL)
[17:03:04.020]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.020]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:04.020]                 }
[17:03:04.020]                 ...future.workdir <- getwd()
[17:03:04.020]             }
[17:03:04.020]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:04.020]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:04.020]         }
[17:03:04.020]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:04.020]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:04.020]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:04.020]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:04.020]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:04.020]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:04.020]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:04.020]             base::names(...future.oldOptions))
[17:03:04.020]     }
[17:03:04.020]     if (FALSE) {
[17:03:04.020]     }
[17:03:04.020]     else {
[17:03:04.020]         if (TRUE) {
[17:03:04.020]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:04.020]                 open = "w")
[17:03:04.020]         }
[17:03:04.020]         else {
[17:03:04.020]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:04.020]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:04.020]         }
[17:03:04.020]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:04.020]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:04.020]             base::sink(type = "output", split = FALSE)
[17:03:04.020]             base::close(...future.stdout)
[17:03:04.020]         }, add = TRUE)
[17:03:04.020]     }
[17:03:04.020]     ...future.frame <- base::sys.nframe()
[17:03:04.020]     ...future.conditions <- base::list()
[17:03:04.020]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:04.020]     if (FALSE) {
[17:03:04.020]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:04.020]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:04.020]     }
[17:03:04.020]     ...future.result <- base::tryCatch({
[17:03:04.020]         base::withCallingHandlers({
[17:03:04.020]             ...future.value <- base::withVisible(base::local({
[17:03:04.020]                 withCallingHandlers({
[17:03:04.020]                   {
[17:03:04.020]                     ii
[17:03:04.020]                   }
[17:03:04.020]                 }, immediateCondition = function(cond) {
[17:03:04.020]                   save_rds <- function (object, pathname, ...) 
[17:03:04.020]                   {
[17:03:04.020]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:04.020]                     if (file_test("-f", pathname_tmp)) {
[17:03:04.020]                       fi_tmp <- file.info(pathname_tmp)
[17:03:04.020]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:04.020]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:04.020]                         fi_tmp[["mtime"]])
[17:03:04.020]                     }
[17:03:04.020]                     tryCatch({
[17:03:04.020]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:04.020]                     }, error = function(ex) {
[17:03:04.020]                       msg <- conditionMessage(ex)
[17:03:04.020]                       fi_tmp <- file.info(pathname_tmp)
[17:03:04.020]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:04.020]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:04.020]                         fi_tmp[["mtime"]], msg)
[17:03:04.020]                       ex$message <- msg
[17:03:04.020]                       stop(ex)
[17:03:04.020]                     })
[17:03:04.020]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:04.020]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:04.020]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:04.020]                       fi_tmp <- file.info(pathname_tmp)
[17:03:04.020]                       fi <- file.info(pathname)
[17:03:04.020]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:04.020]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:04.020]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:04.020]                         fi[["size"]], fi[["mtime"]])
[17:03:04.020]                       stop(msg)
[17:03:04.020]                     }
[17:03:04.020]                     invisible(pathname)
[17:03:04.020]                   }
[17:03:04.020]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:04.020]                     rootPath = tempdir()) 
[17:03:04.020]                   {
[17:03:04.020]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:04.020]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:04.020]                       tmpdir = path, fileext = ".rds")
[17:03:04.020]                     save_rds(obj, file)
[17:03:04.020]                   }
[17:03:04.020]                   saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")
[17:03:04.020]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.020]                   {
[17:03:04.020]                     inherits <- base::inherits
[17:03:04.020]                     invokeRestart <- base::invokeRestart
[17:03:04.020]                     is.null <- base::is.null
[17:03:04.020]                     muffled <- FALSE
[17:03:04.020]                     if (inherits(cond, "message")) {
[17:03:04.020]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:04.020]                       if (muffled) 
[17:03:04.020]                         invokeRestart("muffleMessage")
[17:03:04.020]                     }
[17:03:04.020]                     else if (inherits(cond, "warning")) {
[17:03:04.020]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:04.020]                       if (muffled) 
[17:03:04.020]                         invokeRestart("muffleWarning")
[17:03:04.020]                     }
[17:03:04.020]                     else if (inherits(cond, "condition")) {
[17:03:04.020]                       if (!is.null(pattern)) {
[17:03:04.020]                         computeRestarts <- base::computeRestarts
[17:03:04.020]                         grepl <- base::grepl
[17:03:04.020]                         restarts <- computeRestarts(cond)
[17:03:04.020]                         for (restart in restarts) {
[17:03:04.020]                           name <- restart$name
[17:03:04.020]                           if (is.null(name)) 
[17:03:04.020]                             next
[17:03:04.020]                           if (!grepl(pattern, name)) 
[17:03:04.020]                             next
[17:03:04.020]                           invokeRestart(restart)
[17:03:04.020]                           muffled <- TRUE
[17:03:04.020]                           break
[17:03:04.020]                         }
[17:03:04.020]                       }
[17:03:04.020]                     }
[17:03:04.020]                     invisible(muffled)
[17:03:04.020]                   }
[17:03:04.020]                   muffleCondition(cond)
[17:03:04.020]                 })
[17:03:04.020]             }))
[17:03:04.020]             future::FutureResult(value = ...future.value$value, 
[17:03:04.020]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.020]                   ...future.rng), globalenv = if (FALSE) 
[17:03:04.020]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:04.020]                     ...future.globalenv.names))
[17:03:04.020]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:04.020]         }, condition = base::local({
[17:03:04.020]             c <- base::c
[17:03:04.020]             inherits <- base::inherits
[17:03:04.020]             invokeRestart <- base::invokeRestart
[17:03:04.020]             length <- base::length
[17:03:04.020]             list <- base::list
[17:03:04.020]             seq.int <- base::seq.int
[17:03:04.020]             signalCondition <- base::signalCondition
[17:03:04.020]             sys.calls <- base::sys.calls
[17:03:04.020]             `[[` <- base::`[[`
[17:03:04.020]             `+` <- base::`+`
[17:03:04.020]             `<<-` <- base::`<<-`
[17:03:04.020]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:04.020]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:04.020]                   3L)]
[17:03:04.020]             }
[17:03:04.020]             function(cond) {
[17:03:04.020]                 is_error <- inherits(cond, "error")
[17:03:04.020]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:04.020]                   NULL)
[17:03:04.020]                 if (is_error) {
[17:03:04.020]                   sessionInformation <- function() {
[17:03:04.020]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:04.020]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:04.020]                       search = base::search(), system = base::Sys.info())
[17:03:04.020]                   }
[17:03:04.020]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.020]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:04.020]                     cond$call), session = sessionInformation(), 
[17:03:04.020]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:04.020]                   signalCondition(cond)
[17:03:04.020]                 }
[17:03:04.020]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:04.020]                 "immediateCondition"))) {
[17:03:04.020]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:04.020]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.020]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:04.020]                   if (TRUE && !signal) {
[17:03:04.020]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.020]                     {
[17:03:04.020]                       inherits <- base::inherits
[17:03:04.020]                       invokeRestart <- base::invokeRestart
[17:03:04.020]                       is.null <- base::is.null
[17:03:04.020]                       muffled <- FALSE
[17:03:04.020]                       if (inherits(cond, "message")) {
[17:03:04.020]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.020]                         if (muffled) 
[17:03:04.020]                           invokeRestart("muffleMessage")
[17:03:04.020]                       }
[17:03:04.020]                       else if (inherits(cond, "warning")) {
[17:03:04.020]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.020]                         if (muffled) 
[17:03:04.020]                           invokeRestart("muffleWarning")
[17:03:04.020]                       }
[17:03:04.020]                       else if (inherits(cond, "condition")) {
[17:03:04.020]                         if (!is.null(pattern)) {
[17:03:04.020]                           computeRestarts <- base::computeRestarts
[17:03:04.020]                           grepl <- base::grepl
[17:03:04.020]                           restarts <- computeRestarts(cond)
[17:03:04.020]                           for (restart in restarts) {
[17:03:04.020]                             name <- restart$name
[17:03:04.020]                             if (is.null(name)) 
[17:03:04.020]                               next
[17:03:04.020]                             if (!grepl(pattern, name)) 
[17:03:04.020]                               next
[17:03:04.020]                             invokeRestart(restart)
[17:03:04.020]                             muffled <- TRUE
[17:03:04.020]                             break
[17:03:04.020]                           }
[17:03:04.020]                         }
[17:03:04.020]                       }
[17:03:04.020]                       invisible(muffled)
[17:03:04.020]                     }
[17:03:04.020]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.020]                   }
[17:03:04.020]                 }
[17:03:04.020]                 else {
[17:03:04.020]                   if (TRUE) {
[17:03:04.020]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.020]                     {
[17:03:04.020]                       inherits <- base::inherits
[17:03:04.020]                       invokeRestart <- base::invokeRestart
[17:03:04.020]                       is.null <- base::is.null
[17:03:04.020]                       muffled <- FALSE
[17:03:04.020]                       if (inherits(cond, "message")) {
[17:03:04.020]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.020]                         if (muffled) 
[17:03:04.020]                           invokeRestart("muffleMessage")
[17:03:04.020]                       }
[17:03:04.020]                       else if (inherits(cond, "warning")) {
[17:03:04.020]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.020]                         if (muffled) 
[17:03:04.020]                           invokeRestart("muffleWarning")
[17:03:04.020]                       }
[17:03:04.020]                       else if (inherits(cond, "condition")) {
[17:03:04.020]                         if (!is.null(pattern)) {
[17:03:04.020]                           computeRestarts <- base::computeRestarts
[17:03:04.020]                           grepl <- base::grepl
[17:03:04.020]                           restarts <- computeRestarts(cond)
[17:03:04.020]                           for (restart in restarts) {
[17:03:04.020]                             name <- restart$name
[17:03:04.020]                             if (is.null(name)) 
[17:03:04.020]                               next
[17:03:04.020]                             if (!grepl(pattern, name)) 
[17:03:04.020]                               next
[17:03:04.020]                             invokeRestart(restart)
[17:03:04.020]                             muffled <- TRUE
[17:03:04.020]                             break
[17:03:04.020]                           }
[17:03:04.020]                         }
[17:03:04.020]                       }
[17:03:04.020]                       invisible(muffled)
[17:03:04.020]                     }
[17:03:04.020]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.020]                   }
[17:03:04.020]                 }
[17:03:04.020]             }
[17:03:04.020]         }))
[17:03:04.020]     }, error = function(ex) {
[17:03:04.020]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:04.020]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.020]                 ...future.rng), started = ...future.startTime, 
[17:03:04.020]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:04.020]             version = "1.8"), class = "FutureResult")
[17:03:04.020]     }, finally = {
[17:03:04.020]         if (!identical(...future.workdir, getwd())) 
[17:03:04.020]             setwd(...future.workdir)
[17:03:04.020]         {
[17:03:04.020]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:04.020]                 ...future.oldOptions$nwarnings <- NULL
[17:03:04.020]             }
[17:03:04.020]             base::options(...future.oldOptions)
[17:03:04.020]             if (.Platform$OS.type == "windows") {
[17:03:04.020]                 old_names <- names(...future.oldEnvVars)
[17:03:04.020]                 envs <- base::Sys.getenv()
[17:03:04.020]                 names <- names(envs)
[17:03:04.020]                 common <- intersect(names, old_names)
[17:03:04.020]                 added <- setdiff(names, old_names)
[17:03:04.020]                 removed <- setdiff(old_names, names)
[17:03:04.020]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:04.020]                   envs[common]]
[17:03:04.020]                 NAMES <- toupper(changed)
[17:03:04.020]                 args <- list()
[17:03:04.020]                 for (kk in seq_along(NAMES)) {
[17:03:04.020]                   name <- changed[[kk]]
[17:03:04.020]                   NAME <- NAMES[[kk]]
[17:03:04.020]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.020]                     next
[17:03:04.020]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.020]                 }
[17:03:04.020]                 NAMES <- toupper(added)
[17:03:04.020]                 for (kk in seq_along(NAMES)) {
[17:03:04.020]                   name <- added[[kk]]
[17:03:04.020]                   NAME <- NAMES[[kk]]
[17:03:04.020]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.020]                     next
[17:03:04.020]                   args[[name]] <- ""
[17:03:04.020]                 }
[17:03:04.020]                 NAMES <- toupper(removed)
[17:03:04.020]                 for (kk in seq_along(NAMES)) {
[17:03:04.020]                   name <- removed[[kk]]
[17:03:04.020]                   NAME <- NAMES[[kk]]
[17:03:04.020]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.020]                     next
[17:03:04.020]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.020]                 }
[17:03:04.020]                 if (length(args) > 0) 
[17:03:04.020]                   base::do.call(base::Sys.setenv, args = args)
[17:03:04.020]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:04.020]             }
[17:03:04.020]             else {
[17:03:04.020]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:04.020]             }
[17:03:04.020]             {
[17:03:04.020]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:04.020]                   0L) {
[17:03:04.020]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:04.020]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:04.020]                   base::options(opts)
[17:03:04.020]                 }
[17:03:04.020]                 {
[17:03:04.020]                   {
[17:03:04.020]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:04.020]                     NULL
[17:03:04.020]                   }
[17:03:04.020]                   options(future.plan = NULL)
[17:03:04.020]                   if (is.na(NA_character_)) 
[17:03:04.020]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.020]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:04.020]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:04.020]                     .init = FALSE)
[17:03:04.020]                 }
[17:03:04.020]             }
[17:03:04.020]         }
[17:03:04.020]     })
[17:03:04.020]     if (TRUE) {
[17:03:04.020]         base::sink(type = "output", split = FALSE)
[17:03:04.020]         if (TRUE) {
[17:03:04.020]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:04.020]         }
[17:03:04.020]         else {
[17:03:04.020]             ...future.result["stdout"] <- base::list(NULL)
[17:03:04.020]         }
[17:03:04.020]         base::close(...future.stdout)
[17:03:04.020]         ...future.stdout <- NULL
[17:03:04.020]     }
[17:03:04.020]     ...future.result$conditions <- ...future.conditions
[17:03:04.020]     ...future.result$finished <- base::Sys.time()
[17:03:04.020]     ...future.result
[17:03:04.020] }
[17:03:04.023] assign_globals() ...
[17:03:04.024] List of 1
[17:03:04.024]  $ ii: int 4
[17:03:04.024]  - attr(*, "where")=List of 1
[17:03:04.024]   ..$ ii:<environment: R_EmptyEnv> 
[17:03:04.024]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:04.024]  - attr(*, "resolved")= logi FALSE
[17:03:04.024]  - attr(*, "total_size")= num 56
[17:03:04.027] - copied ‘ii’ to environment
[17:03:04.027] assign_globals() ... done
[17:03:04.027] requestCore(): workers = 2
[17:03:04.028] Poll #1 (0): usedCores() = 2, workers = 2
[17:03:04.039] result() for MulticoreFuture ...
[17:03:04.039] result() for MulticoreFuture ...
[17:03:04.040] result() for MulticoreFuture ... done
[17:03:04.040] result() for MulticoreFuture ... done
[17:03:04.040] result() for MulticoreFuture ...
[17:03:04.040] result() for MulticoreFuture ... done
[17:03:04.042] MulticoreFuture started
 - Resolving 4 multicore futures
[17:03:04.044] result() for MulticoreFuture ...
[17:03:04.044] plan(): Setting new future strategy stack:
[17:03:04.044] result() for MulticoreFuture ... done
[17:03:04.044] result() for MulticoreFuture ...
[17:03:04.044] result() for MulticoreFuture ... done
[17:03:04.045] result() for MulticoreFuture ...
[17:03:04.045] result() for MulticoreFuture ... done
[17:03:04.045] result() for MulticoreFuture ...
[17:03:04.044] List of future strategies:
[17:03:04.044] 1. sequential:
[17:03:04.044]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:04.044]    - tweaked: FALSE
[17:03:04.044]    - call: NULL
[17:03:04.045] result() for MulticoreFuture ... done
[17:03:04.046] plan(): nbrOfWorkers() = 1
[17:03:04.046] result() for MulticoreFuture ...
[17:03:04.047] result() for MulticoreFuture ...
[17:03:04.047] result() for MulticoreFuture ... done
[17:03:04.047] result() for MulticoreFuture ... done
[17:03:04.048] result() for MulticoreFuture ...
[17:03:04.048] result() for MulticoreFuture ... done
[17:03:04.048] result() for MulticoreFuture ...
[17:03:04.048] plan(): Setting new future strategy stack:
[17:03:04.048] List of future strategies:
[17:03:04.048] 1. multicore:
[17:03:04.048]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:04.048]    - tweaked: FALSE
[17:03:04.048]    - call: plan(multicore)
[17:03:04.054] plan(): nbrOfWorkers() = 2
[17:03:04.054] result() for MulticoreFuture ...
[17:03:04.054] result() for MulticoreFuture ... done
[17:03:04.055] result() for MulticoreFuture ... done
[17:03:04.055] result() for MulticoreFuture ...
[17:03:04.055] result() for MulticoreFuture ... done
*** multicore(..., globals = TRUE) and errors
[17:03:04.062] getGlobalsAndPackages() ...
[17:03:04.063] Searching for globals...
[17:03:04.064] - globals found: [2] ‘{’, ‘stop’
[17:03:04.064] Searching for globals ... DONE
[17:03:04.064] Resolving globals: FALSE
[17:03:04.065] 
[17:03:04.065] 
[17:03:04.065] getGlobalsAndPackages() ... DONE
[17:03:04.066] Packages needed by the future expression (n = 0): <none>
[17:03:04.066] Packages needed by future strategies (n = 0): <none>
[17:03:04.066] {
[17:03:04.066]     {
[17:03:04.066]         {
[17:03:04.066]             ...future.startTime <- base::Sys.time()
[17:03:04.066]             {
[17:03:04.066]                 {
[17:03:04.066]                   {
[17:03:04.066]                     {
[17:03:04.066]                       base::local({
[17:03:04.066]                         has_future <- base::requireNamespace("future", 
[17:03:04.066]                           quietly = TRUE)
[17:03:04.066]                         if (has_future) {
[17:03:04.066]                           ns <- base::getNamespace("future")
[17:03:04.066]                           version <- ns[[".package"]][["version"]]
[17:03:04.066]                           if (is.null(version)) 
[17:03:04.066]                             version <- utils::packageVersion("future")
[17:03:04.066]                         }
[17:03:04.066]                         else {
[17:03:04.066]                           version <- NULL
[17:03:04.066]                         }
[17:03:04.066]                         if (!has_future || version < "1.8.0") {
[17:03:04.066]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:04.066]                             "", base::R.version$version.string), 
[17:03:04.066]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:04.066]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:04.066]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:04.066]                               "release", "version")], collapse = " "), 
[17:03:04.066]                             hostname = base::Sys.info()[["nodename"]])
[17:03:04.066]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:04.066]                             info)
[17:03:04.066]                           info <- base::paste(info, collapse = "; ")
[17:03:04.066]                           if (!has_future) {
[17:03:04.066]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:04.066]                               info)
[17:03:04.066]                           }
[17:03:04.066]                           else {
[17:03:04.066]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:04.066]                               info, version)
[17:03:04.066]                           }
[17:03:04.066]                           base::stop(msg)
[17:03:04.066]                         }
[17:03:04.066]                       })
[17:03:04.066]                     }
[17:03:04.066]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:04.066]                     base::options(mc.cores = 1L)
[17:03:04.066]                   }
[17:03:04.066]                   ...future.strategy.old <- future::plan("list")
[17:03:04.066]                   options(future.plan = NULL)
[17:03:04.066]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.066]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:04.066]                 }
[17:03:04.066]                 ...future.workdir <- getwd()
[17:03:04.066]             }
[17:03:04.066]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:04.066]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:04.066]         }
[17:03:04.066]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:04.066]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:04.066]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:04.066]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:04.066]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:04.066]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:04.066]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:04.066]             base::names(...future.oldOptions))
[17:03:04.066]     }
[17:03:04.066]     if (FALSE) {
[17:03:04.066]     }
[17:03:04.066]     else {
[17:03:04.066]         if (TRUE) {
[17:03:04.066]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:04.066]                 open = "w")
[17:03:04.066]         }
[17:03:04.066]         else {
[17:03:04.066]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:04.066]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:04.066]         }
[17:03:04.066]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:04.066]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:04.066]             base::sink(type = "output", split = FALSE)
[17:03:04.066]             base::close(...future.stdout)
[17:03:04.066]         }, add = TRUE)
[17:03:04.066]     }
[17:03:04.066]     ...future.frame <- base::sys.nframe()
[17:03:04.066]     ...future.conditions <- base::list()
[17:03:04.066]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:04.066]     if (FALSE) {
[17:03:04.066]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:04.066]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:04.066]     }
[17:03:04.066]     ...future.result <- base::tryCatch({
[17:03:04.066]         base::withCallingHandlers({
[17:03:04.066]             ...future.value <- base::withVisible(base::local({
[17:03:04.066]                 withCallingHandlers({
[17:03:04.066]                   {
[17:03:04.066]                     stop("Whoops!")
[17:03:04.066]                     1
[17:03:04.066]                   }
[17:03:04.066]                 }, immediateCondition = function(cond) {
[17:03:04.066]                   save_rds <- function (object, pathname, ...) 
[17:03:04.066]                   {
[17:03:04.066]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:04.066]                     if (file_test("-f", pathname_tmp)) {
[17:03:04.066]                       fi_tmp <- file.info(pathname_tmp)
[17:03:04.066]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:04.066]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:04.066]                         fi_tmp[["mtime"]])
[17:03:04.066]                     }
[17:03:04.066]                     tryCatch({
[17:03:04.066]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:04.066]                     }, error = function(ex) {
[17:03:04.066]                       msg <- conditionMessage(ex)
[17:03:04.066]                       fi_tmp <- file.info(pathname_tmp)
[17:03:04.066]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:04.066]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:04.066]                         fi_tmp[["mtime"]], msg)
[17:03:04.066]                       ex$message <- msg
[17:03:04.066]                       stop(ex)
[17:03:04.066]                     })
[17:03:04.066]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:04.066]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:04.066]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:04.066]                       fi_tmp <- file.info(pathname_tmp)
[17:03:04.066]                       fi <- file.info(pathname)
[17:03:04.066]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:04.066]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:04.066]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:04.066]                         fi[["size"]], fi[["mtime"]])
[17:03:04.066]                       stop(msg)
[17:03:04.066]                     }
[17:03:04.066]                     invisible(pathname)
[17:03:04.066]                   }
[17:03:04.066]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:04.066]                     rootPath = tempdir()) 
[17:03:04.066]                   {
[17:03:04.066]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:04.066]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:04.066]                       tmpdir = path, fileext = ".rds")
[17:03:04.066]                     save_rds(obj, file)
[17:03:04.066]                   }
[17:03:04.066]                   saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")
[17:03:04.066]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.066]                   {
[17:03:04.066]                     inherits <- base::inherits
[17:03:04.066]                     invokeRestart <- base::invokeRestart
[17:03:04.066]                     is.null <- base::is.null
[17:03:04.066]                     muffled <- FALSE
[17:03:04.066]                     if (inherits(cond, "message")) {
[17:03:04.066]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:04.066]                       if (muffled) 
[17:03:04.066]                         invokeRestart("muffleMessage")
[17:03:04.066]                     }
[17:03:04.066]                     else if (inherits(cond, "warning")) {
[17:03:04.066]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:04.066]                       if (muffled) 
[17:03:04.066]                         invokeRestart("muffleWarning")
[17:03:04.066]                     }
[17:03:04.066]                     else if (inherits(cond, "condition")) {
[17:03:04.066]                       if (!is.null(pattern)) {
[17:03:04.066]                         computeRestarts <- base::computeRestarts
[17:03:04.066]                         grepl <- base::grepl
[17:03:04.066]                         restarts <- computeRestarts(cond)
[17:03:04.066]                         for (restart in restarts) {
[17:03:04.066]                           name <- restart$name
[17:03:04.066]                           if (is.null(name)) 
[17:03:04.066]                             next
[17:03:04.066]                           if (!grepl(pattern, name)) 
[17:03:04.066]                             next
[17:03:04.066]                           invokeRestart(restart)
[17:03:04.066]                           muffled <- TRUE
[17:03:04.066]                           break
[17:03:04.066]                         }
[17:03:04.066]                       }
[17:03:04.066]                     }
[17:03:04.066]                     invisible(muffled)
[17:03:04.066]                   }
[17:03:04.066]                   muffleCondition(cond)
[17:03:04.066]                 })
[17:03:04.066]             }))
[17:03:04.066]             future::FutureResult(value = ...future.value$value, 
[17:03:04.066]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.066]                   ...future.rng), globalenv = if (FALSE) 
[17:03:04.066]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:04.066]                     ...future.globalenv.names))
[17:03:04.066]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:04.066]         }, condition = base::local({
[17:03:04.066]             c <- base::c
[17:03:04.066]             inherits <- base::inherits
[17:03:04.066]             invokeRestart <- base::invokeRestart
[17:03:04.066]             length <- base::length
[17:03:04.066]             list <- base::list
[17:03:04.066]             seq.int <- base::seq.int
[17:03:04.066]             signalCondition <- base::signalCondition
[17:03:04.066]             sys.calls <- base::sys.calls
[17:03:04.066]             `[[` <- base::`[[`
[17:03:04.066]             `+` <- base::`+`
[17:03:04.066]             `<<-` <- base::`<<-`
[17:03:04.066]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:04.066]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:04.066]                   3L)]
[17:03:04.066]             }
[17:03:04.066]             function(cond) {
[17:03:04.066]                 is_error <- inherits(cond, "error")
[17:03:04.066]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:04.066]                   NULL)
[17:03:04.066]                 if (is_error) {
[17:03:04.066]                   sessionInformation <- function() {
[17:03:04.066]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:04.066]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:04.066]                       search = base::search(), system = base::Sys.info())
[17:03:04.066]                   }
[17:03:04.066]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.066]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:04.066]                     cond$call), session = sessionInformation(), 
[17:03:04.066]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:04.066]                   signalCondition(cond)
[17:03:04.066]                 }
[17:03:04.066]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:04.066]                 "immediateCondition"))) {
[17:03:04.066]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:04.066]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.066]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:04.066]                   if (TRUE && !signal) {
[17:03:04.066]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.066]                     {
[17:03:04.066]                       inherits <- base::inherits
[17:03:04.066]                       invokeRestart <- base::invokeRestart
[17:03:04.066]                       is.null <- base::is.null
[17:03:04.066]                       muffled <- FALSE
[17:03:04.066]                       if (inherits(cond, "message")) {
[17:03:04.066]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.066]                         if (muffled) 
[17:03:04.066]                           invokeRestart("muffleMessage")
[17:03:04.066]                       }
[17:03:04.066]                       else if (inherits(cond, "warning")) {
[17:03:04.066]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.066]                         if (muffled) 
[17:03:04.066]                           invokeRestart("muffleWarning")
[17:03:04.066]                       }
[17:03:04.066]                       else if (inherits(cond, "condition")) {
[17:03:04.066]                         if (!is.null(pattern)) {
[17:03:04.066]                           computeRestarts <- base::computeRestarts
[17:03:04.066]                           grepl <- base::grepl
[17:03:04.066]                           restarts <- computeRestarts(cond)
[17:03:04.066]                           for (restart in restarts) {
[17:03:04.066]                             name <- restart$name
[17:03:04.066]                             if (is.null(name)) 
[17:03:04.066]                               next
[17:03:04.066]                             if (!grepl(pattern, name)) 
[17:03:04.066]                               next
[17:03:04.066]                             invokeRestart(restart)
[17:03:04.066]                             muffled <- TRUE
[17:03:04.066]                             break
[17:03:04.066]                           }
[17:03:04.066]                         }
[17:03:04.066]                       }
[17:03:04.066]                       invisible(muffled)
[17:03:04.066]                     }
[17:03:04.066]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.066]                   }
[17:03:04.066]                 }
[17:03:04.066]                 else {
[17:03:04.066]                   if (TRUE) {
[17:03:04.066]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.066]                     {
[17:03:04.066]                       inherits <- base::inherits
[17:03:04.066]                       invokeRestart <- base::invokeRestart
[17:03:04.066]                       is.null <- base::is.null
[17:03:04.066]                       muffled <- FALSE
[17:03:04.066]                       if (inherits(cond, "message")) {
[17:03:04.066]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.066]                         if (muffled) 
[17:03:04.066]                           invokeRestart("muffleMessage")
[17:03:04.066]                       }
[17:03:04.066]                       else if (inherits(cond, "warning")) {
[17:03:04.066]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.066]                         if (muffled) 
[17:03:04.066]                           invokeRestart("muffleWarning")
[17:03:04.066]                       }
[17:03:04.066]                       else if (inherits(cond, "condition")) {
[17:03:04.066]                         if (!is.null(pattern)) {
[17:03:04.066]                           computeRestarts <- base::computeRestarts
[17:03:04.066]                           grepl <- base::grepl
[17:03:04.066]                           restarts <- computeRestarts(cond)
[17:03:04.066]                           for (restart in restarts) {
[17:03:04.066]                             name <- restart$name
[17:03:04.066]                             if (is.null(name)) 
[17:03:04.066]                               next
[17:03:04.066]                             if (!grepl(pattern, name)) 
[17:03:04.066]                               next
[17:03:04.066]                             invokeRestart(restart)
[17:03:04.066]                             muffled <- TRUE
[17:03:04.066]                             break
[17:03:04.066]                           }
[17:03:04.066]                         }
[17:03:04.066]                       }
[17:03:04.066]                       invisible(muffled)
[17:03:04.066]                     }
[17:03:04.066]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.066]                   }
[17:03:04.066]                 }
[17:03:04.066]             }
[17:03:04.066]         }))
[17:03:04.066]     }, error = function(ex) {
[17:03:04.066]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:04.066]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.066]                 ...future.rng), started = ...future.startTime, 
[17:03:04.066]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:04.066]             version = "1.8"), class = "FutureResult")
[17:03:04.066]     }, finally = {
[17:03:04.066]         if (!identical(...future.workdir, getwd())) 
[17:03:04.066]             setwd(...future.workdir)
[17:03:04.066]         {
[17:03:04.066]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:04.066]                 ...future.oldOptions$nwarnings <- NULL
[17:03:04.066]             }
[17:03:04.066]             base::options(...future.oldOptions)
[17:03:04.066]             if (.Platform$OS.type == "windows") {
[17:03:04.066]                 old_names <- names(...future.oldEnvVars)
[17:03:04.066]                 envs <- base::Sys.getenv()
[17:03:04.066]                 names <- names(envs)
[17:03:04.066]                 common <- intersect(names, old_names)
[17:03:04.066]                 added <- setdiff(names, old_names)
[17:03:04.066]                 removed <- setdiff(old_names, names)
[17:03:04.066]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:04.066]                   envs[common]]
[17:03:04.066]                 NAMES <- toupper(changed)
[17:03:04.066]                 args <- list()
[17:03:04.066]                 for (kk in seq_along(NAMES)) {
[17:03:04.066]                   name <- changed[[kk]]
[17:03:04.066]                   NAME <- NAMES[[kk]]
[17:03:04.066]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.066]                     next
[17:03:04.066]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.066]                 }
[17:03:04.066]                 NAMES <- toupper(added)
[17:03:04.066]                 for (kk in seq_along(NAMES)) {
[17:03:04.066]                   name <- added[[kk]]
[17:03:04.066]                   NAME <- NAMES[[kk]]
[17:03:04.066]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.066]                     next
[17:03:04.066]                   args[[name]] <- ""
[17:03:04.066]                 }
[17:03:04.066]                 NAMES <- toupper(removed)
[17:03:04.066]                 for (kk in seq_along(NAMES)) {
[17:03:04.066]                   name <- removed[[kk]]
[17:03:04.066]                   NAME <- NAMES[[kk]]
[17:03:04.066]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.066]                     next
[17:03:04.066]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.066]                 }
[17:03:04.066]                 if (length(args) > 0) 
[17:03:04.066]                   base::do.call(base::Sys.setenv, args = args)
[17:03:04.066]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:04.066]             }
[17:03:04.066]             else {
[17:03:04.066]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:04.066]             }
[17:03:04.066]             {
[17:03:04.066]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:04.066]                   0L) {
[17:03:04.066]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:04.066]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:04.066]                   base::options(opts)
[17:03:04.066]                 }
[17:03:04.066]                 {
[17:03:04.066]                   {
[17:03:04.066]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:04.066]                     NULL
[17:03:04.066]                   }
[17:03:04.066]                   options(future.plan = NULL)
[17:03:04.066]                   if (is.na(NA_character_)) 
[17:03:04.066]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.066]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:04.066]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:04.066]                     .init = FALSE)
[17:03:04.066]                 }
[17:03:04.066]             }
[17:03:04.066]         }
[17:03:04.066]     })
[17:03:04.066]     if (TRUE) {
[17:03:04.066]         base::sink(type = "output", split = FALSE)
[17:03:04.066]         if (TRUE) {
[17:03:04.066]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:04.066]         }
[17:03:04.066]         else {
[17:03:04.066]             ...future.result["stdout"] <- base::list(NULL)
[17:03:04.066]         }
[17:03:04.066]         base::close(...future.stdout)
[17:03:04.066]         ...future.stdout <- NULL
[17:03:04.066]     }
[17:03:04.066]     ...future.result$conditions <- ...future.conditions
[17:03:04.066]     ...future.result$finished <- base::Sys.time()
[17:03:04.066]     ...future.result
[17:03:04.066] }
[17:03:04.069] requestCore(): workers = 2
[17:03:04.071] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:03:04.073] plan(): Setting new future strategy stack:
[17:03:04.073] List of future strategies:
[17:03:04.073] 1. sequential:
[17:03:04.073]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:04.073]    - tweaked: FALSE
[17:03:04.073]    - call: NULL
[17:03:04.074] plan(): nbrOfWorkers() = 1
[17:03:04.077] plan(): Setting new future strategy stack:
[17:03:04.077] List of future strategies:
[17:03:04.077] 1. multicore:
[17:03:04.077]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:04.077]    - tweaked: FALSE
[17:03:04.077]    - call: plan(multicore)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 07dd274d-66ac-c50c-eb90-f530485edd79
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:04.083] result() for MulticoreFuture ...
[17:03:04.083] plan(): nbrOfWorkers() = 2
[17:03:04.088] result() for MulticoreFuture ...
[17:03:04.088] result() for MulticoreFuture ... done
[17:03:04.089] signalConditions() ...
[17:03:04.089]  - include = ‘immediateCondition’
[17:03:04.089]  - exclude = 
[17:03:04.089]  - resignal = FALSE
[17:03:04.089]  - Number of conditions: 1
[17:03:04.089] signalConditions() ... done
[17:03:04.090] result() for MulticoreFuture ... done
[17:03:04.090] result() for MulticoreFuture ...
[17:03:04.090] result() for MulticoreFuture ... done
[17:03:04.090] signalConditions() ...
[17:03:04.090]  - include = ‘immediateCondition’
[17:03:04.090]  - exclude = 
[17:03:04.091]  - resignal = FALSE
[17:03:04.091]  - Number of conditions: 1
[17:03:04.091] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:03:04.092] result() for MulticoreFuture ...
[17:03:04.092] result() for MulticoreFuture ... done
[17:03:04.092] result() for MulticoreFuture ...
[17:03:04.092] result() for MulticoreFuture ... done
[17:03:04.092] signalConditions() ...
[17:03:04.092]  - include = ‘immediateCondition’
[17:03:04.093]  - exclude = 
[17:03:04.093]  - resignal = FALSE
[17:03:04.093]  - Number of conditions: 1
[17:03:04.093] signalConditions() ... done
[17:03:04.093] Future state: ‘finished’
[17:03:04.093] result() for MulticoreFuture ...
[17:03:04.093] result() for MulticoreFuture ... done
[17:03:04.093] signalConditions() ...
[17:03:04.093]  - include = ‘condition’
[17:03:04.094]  - exclude = ‘immediateCondition’
[17:03:04.094]  - resignal = TRUE
[17:03:04.094]  - Number of conditions: 1
[17:03:04.094]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:03:04.094] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:03:04.095] result() for MulticoreFuture ...
[17:03:04.095] result() for MulticoreFuture ... done
[17:03:04.095] result() for MulticoreFuture ...
[17:03:04.095] result() for MulticoreFuture ... done
[17:03:04.095] signalConditions() ...
[17:03:04.096]  - include = ‘immediateCondition’
[17:03:04.096]  - exclude = 
[17:03:04.096]  - resignal = FALSE
[17:03:04.096]  - Number of conditions: 1
[17:03:04.096] signalConditions() ... done
[17:03:04.096] Future state: ‘finished’
[17:03:04.096] result() for MulticoreFuture ...
[17:03:04.096] result() for MulticoreFuture ... done
[17:03:04.096] signalConditions() ...
[17:03:04.097]  - include = ‘condition’
[17:03:04.097]  - exclude = ‘immediateCondition’
[17:03:04.097]  - resignal = TRUE
[17:03:04.097]  - Number of conditions: 1
[17:03:04.097]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:03:04.097] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:03:04.102] getGlobalsAndPackages() ...
[17:03:04.102] 
[17:03:04.103] - globals: [0] <none>
[17:03:04.103] getGlobalsAndPackages() ... DONE
[17:03:04.103] Packages needed by the future expression (n = 0): <none>
[17:03:04.103] Packages needed by future strategies (n = 0): <none>
[17:03:04.104] {
[17:03:04.104]     {
[17:03:04.104]         {
[17:03:04.104]             ...future.startTime <- base::Sys.time()
[17:03:04.104]             {
[17:03:04.104]                 {
[17:03:04.104]                   {
[17:03:04.104]                     {
[17:03:04.104]                       base::local({
[17:03:04.104]                         has_future <- base::requireNamespace("future", 
[17:03:04.104]                           quietly = TRUE)
[17:03:04.104]                         if (has_future) {
[17:03:04.104]                           ns <- base::getNamespace("future")
[17:03:04.104]                           version <- ns[[".package"]][["version"]]
[17:03:04.104]                           if (is.null(version)) 
[17:03:04.104]                             version <- utils::packageVersion("future")
[17:03:04.104]                         }
[17:03:04.104]                         else {
[17:03:04.104]                           version <- NULL
[17:03:04.104]                         }
[17:03:04.104]                         if (!has_future || version < "1.8.0") {
[17:03:04.104]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:04.104]                             "", base::R.version$version.string), 
[17:03:04.104]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:04.104]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:04.104]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:04.104]                               "release", "version")], collapse = " "), 
[17:03:04.104]                             hostname = base::Sys.info()[["nodename"]])
[17:03:04.104]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:04.104]                             info)
[17:03:04.104]                           info <- base::paste(info, collapse = "; ")
[17:03:04.104]                           if (!has_future) {
[17:03:04.104]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:04.104]                               info)
[17:03:04.104]                           }
[17:03:04.104]                           else {
[17:03:04.104]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:04.104]                               info, version)
[17:03:04.104]                           }
[17:03:04.104]                           base::stop(msg)
[17:03:04.104]                         }
[17:03:04.104]                       })
[17:03:04.104]                     }
[17:03:04.104]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:04.104]                     base::options(mc.cores = 1L)
[17:03:04.104]                   }
[17:03:04.104]                   ...future.strategy.old <- future::plan("list")
[17:03:04.104]                   options(future.plan = NULL)
[17:03:04.104]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.104]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:04.104]                 }
[17:03:04.104]                 ...future.workdir <- getwd()
[17:03:04.104]             }
[17:03:04.104]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:04.104]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:04.104]         }
[17:03:04.104]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:04.104]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:04.104]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:04.104]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:04.104]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:04.104]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:04.104]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:04.104]             base::names(...future.oldOptions))
[17:03:04.104]     }
[17:03:04.104]     if (FALSE) {
[17:03:04.104]     }
[17:03:04.104]     else {
[17:03:04.104]         if (TRUE) {
[17:03:04.104]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:04.104]                 open = "w")
[17:03:04.104]         }
[17:03:04.104]         else {
[17:03:04.104]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:04.104]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:04.104]         }
[17:03:04.104]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:04.104]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:04.104]             base::sink(type = "output", split = FALSE)
[17:03:04.104]             base::close(...future.stdout)
[17:03:04.104]         }, add = TRUE)
[17:03:04.104]     }
[17:03:04.104]     ...future.frame <- base::sys.nframe()
[17:03:04.104]     ...future.conditions <- base::list()
[17:03:04.104]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:04.104]     if (FALSE) {
[17:03:04.104]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:04.104]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:04.104]     }
[17:03:04.104]     ...future.result <- base::tryCatch({
[17:03:04.104]         base::withCallingHandlers({
[17:03:04.104]             ...future.value <- base::withVisible(base::local({
[17:03:04.104]                 withCallingHandlers({
[17:03:04.104]                   {
[17:03:04.104]                     stop(structure(list(message = "boom"), class = c("MyError", 
[17:03:04.104]                       "error", "condition")))
[17:03:04.104]                   }
[17:03:04.104]                 }, immediateCondition = function(cond) {
[17:03:04.104]                   save_rds <- function (object, pathname, ...) 
[17:03:04.104]                   {
[17:03:04.104]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:04.104]                     if (file_test("-f", pathname_tmp)) {
[17:03:04.104]                       fi_tmp <- file.info(pathname_tmp)
[17:03:04.104]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:04.104]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:04.104]                         fi_tmp[["mtime"]])
[17:03:04.104]                     }
[17:03:04.104]                     tryCatch({
[17:03:04.104]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:04.104]                     }, error = function(ex) {
[17:03:04.104]                       msg <- conditionMessage(ex)
[17:03:04.104]                       fi_tmp <- file.info(pathname_tmp)
[17:03:04.104]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:04.104]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:04.104]                         fi_tmp[["mtime"]], msg)
[17:03:04.104]                       ex$message <- msg
[17:03:04.104]                       stop(ex)
[17:03:04.104]                     })
[17:03:04.104]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:04.104]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:04.104]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:04.104]                       fi_tmp <- file.info(pathname_tmp)
[17:03:04.104]                       fi <- file.info(pathname)
[17:03:04.104]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:04.104]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:04.104]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:04.104]                         fi[["size"]], fi[["mtime"]])
[17:03:04.104]                       stop(msg)
[17:03:04.104]                     }
[17:03:04.104]                     invisible(pathname)
[17:03:04.104]                   }
[17:03:04.104]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:04.104]                     rootPath = tempdir()) 
[17:03:04.104]                   {
[17:03:04.104]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:04.104]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:04.104]                       tmpdir = path, fileext = ".rds")
[17:03:04.104]                     save_rds(obj, file)
[17:03:04.104]                   }
[17:03:04.104]                   saveImmediateCondition(cond, path = "/tmp/RtmpGGEsOb/.future/immediateConditions")
[17:03:04.104]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.104]                   {
[17:03:04.104]                     inherits <- base::inherits
[17:03:04.104]                     invokeRestart <- base::invokeRestart
[17:03:04.104]                     is.null <- base::is.null
[17:03:04.104]                     muffled <- FALSE
[17:03:04.104]                     if (inherits(cond, "message")) {
[17:03:04.104]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:04.104]                       if (muffled) 
[17:03:04.104]                         invokeRestart("muffleMessage")
[17:03:04.104]                     }
[17:03:04.104]                     else if (inherits(cond, "warning")) {
[17:03:04.104]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:04.104]                       if (muffled) 
[17:03:04.104]                         invokeRestart("muffleWarning")
[17:03:04.104]                     }
[17:03:04.104]                     else if (inherits(cond, "condition")) {
[17:03:04.104]                       if (!is.null(pattern)) {
[17:03:04.104]                         computeRestarts <- base::computeRestarts
[17:03:04.104]                         grepl <- base::grepl
[17:03:04.104]                         restarts <- computeRestarts(cond)
[17:03:04.104]                         for (restart in restarts) {
[17:03:04.104]                           name <- restart$name
[17:03:04.104]                           if (is.null(name)) 
[17:03:04.104]                             next
[17:03:04.104]                           if (!grepl(pattern, name)) 
[17:03:04.104]                             next
[17:03:04.104]                           invokeRestart(restart)
[17:03:04.104]                           muffled <- TRUE
[17:03:04.104]                           break
[17:03:04.104]                         }
[17:03:04.104]                       }
[17:03:04.104]                     }
[17:03:04.104]                     invisible(muffled)
[17:03:04.104]                   }
[17:03:04.104]                   muffleCondition(cond)
[17:03:04.104]                 })
[17:03:04.104]             }))
[17:03:04.104]             future::FutureResult(value = ...future.value$value, 
[17:03:04.104]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.104]                   ...future.rng), globalenv = if (FALSE) 
[17:03:04.104]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:04.104]                     ...future.globalenv.names))
[17:03:04.104]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:04.104]         }, condition = base::local({
[17:03:04.104]             c <- base::c
[17:03:04.104]             inherits <- base::inherits
[17:03:04.104]             invokeRestart <- base::invokeRestart
[17:03:04.104]             length <- base::length
[17:03:04.104]             list <- base::list
[17:03:04.104]             seq.int <- base::seq.int
[17:03:04.104]             signalCondition <- base::signalCondition
[17:03:04.104]             sys.calls <- base::sys.calls
[17:03:04.104]             `[[` <- base::`[[`
[17:03:04.104]             `+` <- base::`+`
[17:03:04.104]             `<<-` <- base::`<<-`
[17:03:04.104]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:04.104]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:04.104]                   3L)]
[17:03:04.104]             }
[17:03:04.104]             function(cond) {
[17:03:04.104]                 is_error <- inherits(cond, "error")
[17:03:04.104]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:04.104]                   NULL)
[17:03:04.104]                 if (is_error) {
[17:03:04.104]                   sessionInformation <- function() {
[17:03:04.104]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:04.104]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:04.104]                       search = base::search(), system = base::Sys.info())
[17:03:04.104]                   }
[17:03:04.104]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.104]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:04.104]                     cond$call), session = sessionInformation(), 
[17:03:04.104]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:04.104]                   signalCondition(cond)
[17:03:04.104]                 }
[17:03:04.104]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:04.104]                 "immediateCondition"))) {
[17:03:04.104]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:04.104]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.104]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:04.104]                   if (TRUE && !signal) {
[17:03:04.104]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.104]                     {
[17:03:04.104]                       inherits <- base::inherits
[17:03:04.104]                       invokeRestart <- base::invokeRestart
[17:03:04.104]                       is.null <- base::is.null
[17:03:04.104]                       muffled <- FALSE
[17:03:04.104]                       if (inherits(cond, "message")) {
[17:03:04.104]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.104]                         if (muffled) 
[17:03:04.104]                           invokeRestart("muffleMessage")
[17:03:04.104]                       }
[17:03:04.104]                       else if (inherits(cond, "warning")) {
[17:03:04.104]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.104]                         if (muffled) 
[17:03:04.104]                           invokeRestart("muffleWarning")
[17:03:04.104]                       }
[17:03:04.104]                       else if (inherits(cond, "condition")) {
[17:03:04.104]                         if (!is.null(pattern)) {
[17:03:04.104]                           computeRestarts <- base::computeRestarts
[17:03:04.104]                           grepl <- base::grepl
[17:03:04.104]                           restarts <- computeRestarts(cond)
[17:03:04.104]                           for (restart in restarts) {
[17:03:04.104]                             name <- restart$name
[17:03:04.104]                             if (is.null(name)) 
[17:03:04.104]                               next
[17:03:04.104]                             if (!grepl(pattern, name)) 
[17:03:04.104]                               next
[17:03:04.104]                             invokeRestart(restart)
[17:03:04.104]                             muffled <- TRUE
[17:03:04.104]                             break
[17:03:04.104]                           }
[17:03:04.104]                         }
[17:03:04.104]                       }
[17:03:04.104]                       invisible(muffled)
[17:03:04.104]                     }
[17:03:04.104]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.104]                   }
[17:03:04.104]                 }
[17:03:04.104]                 else {
[17:03:04.104]                   if (TRUE) {
[17:03:04.104]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.104]                     {
[17:03:04.104]                       inherits <- base::inherits
[17:03:04.104]                       invokeRestart <- base::invokeRestart
[17:03:04.104]                       is.null <- base::is.null
[17:03:04.104]                       muffled <- FALSE
[17:03:04.104]                       if (inherits(cond, "message")) {
[17:03:04.104]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.104]                         if (muffled) 
[17:03:04.104]                           invokeRestart("muffleMessage")
[17:03:04.104]                       }
[17:03:04.104]                       else if (inherits(cond, "warning")) {
[17:03:04.104]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.104]                         if (muffled) 
[17:03:04.104]                           invokeRestart("muffleWarning")
[17:03:04.104]                       }
[17:03:04.104]                       else if (inherits(cond, "condition")) {
[17:03:04.104]                         if (!is.null(pattern)) {
[17:03:04.104]                           computeRestarts <- base::computeRestarts
[17:03:04.104]                           grepl <- base::grepl
[17:03:04.104]                           restarts <- computeRestarts(cond)
[17:03:04.104]                           for (restart in restarts) {
[17:03:04.104]                             name <- restart$name
[17:03:04.104]                             if (is.null(name)) 
[17:03:04.104]                               next
[17:03:04.104]                             if (!grepl(pattern, name)) 
[17:03:04.104]                               next
[17:03:04.104]                             invokeRestart(restart)
[17:03:04.104]                             muffled <- TRUE
[17:03:04.104]                             break
[17:03:04.104]                           }
[17:03:04.104]                         }
[17:03:04.104]                       }
[17:03:04.104]                       invisible(muffled)
[17:03:04.104]                     }
[17:03:04.104]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.104]                   }
[17:03:04.104]                 }
[17:03:04.104]             }
[17:03:04.104]         }))
[17:03:04.104]     }, error = function(ex) {
[17:03:04.104]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:04.104]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.104]                 ...future.rng), started = ...future.startTime, 
[17:03:04.104]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:04.104]             version = "1.8"), class = "FutureResult")
[17:03:04.104]     }, finally = {
[17:03:04.104]         if (!identical(...future.workdir, getwd())) 
[17:03:04.104]             setwd(...future.workdir)
[17:03:04.104]         {
[17:03:04.104]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:04.104]                 ...future.oldOptions$nwarnings <- NULL
[17:03:04.104]             }
[17:03:04.104]             base::options(...future.oldOptions)
[17:03:04.104]             if (.Platform$OS.type == "windows") {
[17:03:04.104]                 old_names <- names(...future.oldEnvVars)
[17:03:04.104]                 envs <- base::Sys.getenv()
[17:03:04.104]                 names <- names(envs)
[17:03:04.104]                 common <- intersect(names, old_names)
[17:03:04.104]                 added <- setdiff(names, old_names)
[17:03:04.104]                 removed <- setdiff(old_names, names)
[17:03:04.104]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:04.104]                   envs[common]]
[17:03:04.104]                 NAMES <- toupper(changed)
[17:03:04.104]                 args <- list()
[17:03:04.104]                 for (kk in seq_along(NAMES)) {
[17:03:04.104]                   name <- changed[[kk]]
[17:03:04.104]                   NAME <- NAMES[[kk]]
[17:03:04.104]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.104]                     next
[17:03:04.104]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.104]                 }
[17:03:04.104]                 NAMES <- toupper(added)
[17:03:04.104]                 for (kk in seq_along(NAMES)) {
[17:03:04.104]                   name <- added[[kk]]
[17:03:04.104]                   NAME <- NAMES[[kk]]
[17:03:04.104]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.104]                     next
[17:03:04.104]                   args[[name]] <- ""
[17:03:04.104]                 }
[17:03:04.104]                 NAMES <- toupper(removed)
[17:03:04.104]                 for (kk in seq_along(NAMES)) {
[17:03:04.104]                   name <- removed[[kk]]
[17:03:04.104]                   NAME <- NAMES[[kk]]
[17:03:04.104]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.104]                     next
[17:03:04.104]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.104]                 }
[17:03:04.104]                 if (length(args) > 0) 
[17:03:04.104]                   base::do.call(base::Sys.setenv, args = args)
[17:03:04.104]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:04.104]             }
[17:03:04.104]             else {
[17:03:04.104]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:04.104]             }
[17:03:04.104]             {
[17:03:04.104]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:04.104]                   0L) {
[17:03:04.104]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:04.104]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:04.104]                   base::options(opts)
[17:03:04.104]                 }
[17:03:04.104]                 {
[17:03:04.104]                   {
[17:03:04.104]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:04.104]                     NULL
[17:03:04.104]                   }
[17:03:04.104]                   options(future.plan = NULL)
[17:03:04.104]                   if (is.na(NA_character_)) 
[17:03:04.104]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.104]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:04.104]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:04.104]                     .init = FALSE)
[17:03:04.104]                 }
[17:03:04.104]             }
[17:03:04.104]         }
[17:03:04.104]     })
[17:03:04.104]     if (TRUE) {
[17:03:04.104]         base::sink(type = "output", split = FALSE)
[17:03:04.104]         if (TRUE) {
[17:03:04.104]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:04.104]         }
[17:03:04.104]         else {
[17:03:04.104]             ...future.result["stdout"] <- base::list(NULL)
[17:03:04.104]         }
[17:03:04.104]         base::close(...future.stdout)
[17:03:04.104]         ...future.stdout <- NULL
[17:03:04.104]     }
[17:03:04.104]     ...future.result$conditions <- ...future.conditions
[17:03:04.104]     ...future.result$finished <- base::Sys.time()
[17:03:04.104]     ...future.result
[17:03:04.104] }
[17:03:04.107] requestCore(): workers = 2
[17:03:04.109] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:03:04.110] plan(): Setting new future strategy stack:
[17:03:04.110] List of future strategies:
[17:03:04.110] 1. sequential:
[17:03:04.110]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:04.110]    - tweaked: FALSE
[17:03:04.110]    - call: NULL
[17:03:04.111] plan(): nbrOfWorkers() = 1
[17:03:04.113] plan(): Setting new future strategy stack:
[17:03:04.113] List of future strategies:
[17:03:04.113] 1. multicore:
[17:03:04.113]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:04.113]    - tweaked: FALSE
[17:03:04.113]    - call: plan(multicore)
[17:03:04.118] plan(): nbrOfWorkers() = 2
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 07dd274d-66ac-c50c-eb90-f530485edd79
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:04.120] result() for MulticoreFuture ...
[17:03:04.123] result() for MulticoreFuture ...
[17:03:04.123] result() for MulticoreFuture ... done
[17:03:04.123] signalConditions() ...
[17:03:04.123]  - include = ‘immediateCondition’
[17:03:04.123]  - exclude = 
[17:03:04.124]  - resignal = FALSE
[17:03:04.124]  - Number of conditions: 1
[17:03:04.124] signalConditions() ... done
[17:03:04.124] result() for MulticoreFuture ... done
[17:03:04.124] result() for MulticoreFuture ...
[17:03:04.124] result() for MulticoreFuture ... done
[17:03:04.124] signalConditions() ...
[17:03:04.125]  - include = ‘immediateCondition’
[17:03:04.125]  - exclude = 
[17:03:04.125]  - resignal = FALSE
[17:03:04.125]  - Number of conditions: 1
[17:03:04.125] signalConditions() ... done
<MyError: boom>
[17:03:04.126] result() for MulticoreFuture ...
[17:03:04.126] result() for MulticoreFuture ... done
[17:03:04.126] result() for MulticoreFuture ...
[17:03:04.126] result() for MulticoreFuture ... done
[17:03:04.126] signalConditions() ...
[17:03:04.126]  - include = ‘immediateCondition’
[17:03:04.126]  - exclude = 
[17:03:04.126]  - resignal = FALSE
[17:03:04.126]  - Number of conditions: 1
[17:03:04.127] signalConditions() ... done
[17:03:04.127] Future state: ‘finished’
[17:03:04.127] result() for MulticoreFuture ...
[17:03:04.127] result() for MulticoreFuture ... done
[17:03:04.127] signalConditions() ...
[17:03:04.127]  - include = ‘condition’
[17:03:04.127]  - exclude = ‘immediateCondition’
[17:03:04.127]  - resignal = TRUE
[17:03:04.127]  - Number of conditions: 1
[17:03:04.128]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[17:03:04.128] signalConditions() ... done
*** multicore(..., workers = 1L) ...
[17:03:04.128] getGlobalsAndPackages() ...
[17:03:04.128] Searching for globals...
[17:03:04.129] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[17:03:04.130] Searching for globals ... DONE
[17:03:04.130] Resolving globals: FALSE
[17:03:04.130] The total size of the 2 globals is 112 bytes (112 bytes)
[17:03:04.131] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[17:03:04.131] - globals: [2] ‘a’, ‘b’
[17:03:04.131] 
[17:03:04.131] getGlobalsAndPackages() ... DONE
[17:03:04.132] Packages needed by the future expression (n = 0): <none>
[17:03:04.135] Packages needed by future strategies (n = 0): <none>
[17:03:04.136] {
[17:03:04.136]     {
[17:03:04.136]         {
[17:03:04.136]             ...future.startTime <- base::Sys.time()
[17:03:04.136]             {
[17:03:04.136]                 {
[17:03:04.136]                   {
[17:03:04.136]                     base::local({
[17:03:04.136]                       has_future <- base::requireNamespace("future", 
[17:03:04.136]                         quietly = TRUE)
[17:03:04.136]                       if (has_future) {
[17:03:04.136]                         ns <- base::getNamespace("future")
[17:03:04.136]                         version <- ns[[".package"]][["version"]]
[17:03:04.136]                         if (is.null(version)) 
[17:03:04.136]                           version <- utils::packageVersion("future")
[17:03:04.136]                       }
[17:03:04.136]                       else {
[17:03:04.136]                         version <- NULL
[17:03:04.136]                       }
[17:03:04.136]                       if (!has_future || version < "1.8.0") {
[17:03:04.136]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:04.136]                           "", base::R.version$version.string), 
[17:03:04.136]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:04.136]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:04.136]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:04.136]                             "release", "version")], collapse = " "), 
[17:03:04.136]                           hostname = base::Sys.info()[["nodename"]])
[17:03:04.136]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:04.136]                           info)
[17:03:04.136]                         info <- base::paste(info, collapse = "; ")
[17:03:04.136]                         if (!has_future) {
[17:03:04.136]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:04.136]                             info)
[17:03:04.136]                         }
[17:03:04.136]                         else {
[17:03:04.136]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:04.136]                             info, version)
[17:03:04.136]                         }
[17:03:04.136]                         base::stop(msg)
[17:03:04.136]                       }
[17:03:04.136]                     })
[17:03:04.136]                   }
[17:03:04.136]                   ...future.strategy.old <- future::plan("list")
[17:03:04.136]                   options(future.plan = NULL)
[17:03:04.136]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.136]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:04.136]                 }
[17:03:04.136]                 ...future.workdir <- getwd()
[17:03:04.136]             }
[17:03:04.136]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:04.136]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:04.136]         }
[17:03:04.136]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:04.136]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:04.136]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:04.136]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:04.136]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:04.136]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:04.136]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:04.136]             base::names(...future.oldOptions))
[17:03:04.136]     }
[17:03:04.136]     if (FALSE) {
[17:03:04.136]     }
[17:03:04.136]     else {
[17:03:04.136]         if (TRUE) {
[17:03:04.136]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:04.136]                 open = "w")
[17:03:04.136]         }
[17:03:04.136]         else {
[17:03:04.136]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:04.136]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:04.136]         }
[17:03:04.136]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:04.136]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:04.136]             base::sink(type = "output", split = FALSE)
[17:03:04.136]             base::close(...future.stdout)
[17:03:04.136]         }, add = TRUE)
[17:03:04.136]     }
[17:03:04.136]     ...future.frame <- base::sys.nframe()
[17:03:04.136]     ...future.conditions <- base::list()
[17:03:04.136]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:04.136]     if (FALSE) {
[17:03:04.136]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:04.136]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:04.136]     }
[17:03:04.136]     ...future.result <- base::tryCatch({
[17:03:04.136]         base::withCallingHandlers({
[17:03:04.136]             ...future.value <- base::withVisible(base::local({
[17:03:04.136]                 a * b
[17:03:04.136]             }))
[17:03:04.136]             future::FutureResult(value = ...future.value$value, 
[17:03:04.136]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.136]                   ...future.rng), globalenv = if (FALSE) 
[17:03:04.136]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:04.136]                     ...future.globalenv.names))
[17:03:04.136]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:04.136]         }, condition = base::local({
[17:03:04.136]             c <- base::c
[17:03:04.136]             inherits <- base::inherits
[17:03:04.136]             invokeRestart <- base::invokeRestart
[17:03:04.136]             length <- base::length
[17:03:04.136]             list <- base::list
[17:03:04.136]             seq.int <- base::seq.int
[17:03:04.136]             signalCondition <- base::signalCondition
[17:03:04.136]             sys.calls <- base::sys.calls
[17:03:04.136]             `[[` <- base::`[[`
[17:03:04.136]             `+` <- base::`+`
[17:03:04.136]             `<<-` <- base::`<<-`
[17:03:04.136]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:04.136]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:04.136]                   3L)]
[17:03:04.136]             }
[17:03:04.136]             function(cond) {
[17:03:04.136]                 is_error <- inherits(cond, "error")
[17:03:04.136]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:04.136]                   NULL)
[17:03:04.136]                 if (is_error) {
[17:03:04.136]                   sessionInformation <- function() {
[17:03:04.136]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:04.136]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:04.136]                       search = base::search(), system = base::Sys.info())
[17:03:04.136]                   }
[17:03:04.136]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.136]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:04.136]                     cond$call), session = sessionInformation(), 
[17:03:04.136]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:04.136]                   signalCondition(cond)
[17:03:04.136]                 }
[17:03:04.136]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:04.136]                 "immediateCondition"))) {
[17:03:04.136]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:04.136]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.136]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:04.136]                   if (TRUE && !signal) {
[17:03:04.136]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.136]                     {
[17:03:04.136]                       inherits <- base::inherits
[17:03:04.136]                       invokeRestart <- base::invokeRestart
[17:03:04.136]                       is.null <- base::is.null
[17:03:04.136]                       muffled <- FALSE
[17:03:04.136]                       if (inherits(cond, "message")) {
[17:03:04.136]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.136]                         if (muffled) 
[17:03:04.136]                           invokeRestart("muffleMessage")
[17:03:04.136]                       }
[17:03:04.136]                       else if (inherits(cond, "warning")) {
[17:03:04.136]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.136]                         if (muffled) 
[17:03:04.136]                           invokeRestart("muffleWarning")
[17:03:04.136]                       }
[17:03:04.136]                       else if (inherits(cond, "condition")) {
[17:03:04.136]                         if (!is.null(pattern)) {
[17:03:04.136]                           computeRestarts <- base::computeRestarts
[17:03:04.136]                           grepl <- base::grepl
[17:03:04.136]                           restarts <- computeRestarts(cond)
[17:03:04.136]                           for (restart in restarts) {
[17:03:04.136]                             name <- restart$name
[17:03:04.136]                             if (is.null(name)) 
[17:03:04.136]                               next
[17:03:04.136]                             if (!grepl(pattern, name)) 
[17:03:04.136]                               next
[17:03:04.136]                             invokeRestart(restart)
[17:03:04.136]                             muffled <- TRUE
[17:03:04.136]                             break
[17:03:04.136]                           }
[17:03:04.136]                         }
[17:03:04.136]                       }
[17:03:04.136]                       invisible(muffled)
[17:03:04.136]                     }
[17:03:04.136]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.136]                   }
[17:03:04.136]                 }
[17:03:04.136]                 else {
[17:03:04.136]                   if (TRUE) {
[17:03:04.136]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.136]                     {
[17:03:04.136]                       inherits <- base::inherits
[17:03:04.136]                       invokeRestart <- base::invokeRestart
[17:03:04.136]                       is.null <- base::is.null
[17:03:04.136]                       muffled <- FALSE
[17:03:04.136]                       if (inherits(cond, "message")) {
[17:03:04.136]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.136]                         if (muffled) 
[17:03:04.136]                           invokeRestart("muffleMessage")
[17:03:04.136]                       }
[17:03:04.136]                       else if (inherits(cond, "warning")) {
[17:03:04.136]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.136]                         if (muffled) 
[17:03:04.136]                           invokeRestart("muffleWarning")
[17:03:04.136]                       }
[17:03:04.136]                       else if (inherits(cond, "condition")) {
[17:03:04.136]                         if (!is.null(pattern)) {
[17:03:04.136]                           computeRestarts <- base::computeRestarts
[17:03:04.136]                           grepl <- base::grepl
[17:03:04.136]                           restarts <- computeRestarts(cond)
[17:03:04.136]                           for (restart in restarts) {
[17:03:04.136]                             name <- restart$name
[17:03:04.136]                             if (is.null(name)) 
[17:03:04.136]                               next
[17:03:04.136]                             if (!grepl(pattern, name)) 
[17:03:04.136]                               next
[17:03:04.136]                             invokeRestart(restart)
[17:03:04.136]                             muffled <- TRUE
[17:03:04.136]                             break
[17:03:04.136]                           }
[17:03:04.136]                         }
[17:03:04.136]                       }
[17:03:04.136]                       invisible(muffled)
[17:03:04.136]                     }
[17:03:04.136]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.136]                   }
[17:03:04.136]                 }
[17:03:04.136]             }
[17:03:04.136]         }))
[17:03:04.136]     }, error = function(ex) {
[17:03:04.136]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:04.136]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.136]                 ...future.rng), started = ...future.startTime, 
[17:03:04.136]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:04.136]             version = "1.8"), class = "FutureResult")
[17:03:04.136]     }, finally = {
[17:03:04.136]         if (!identical(...future.workdir, getwd())) 
[17:03:04.136]             setwd(...future.workdir)
[17:03:04.136]         {
[17:03:04.136]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:04.136]                 ...future.oldOptions$nwarnings <- NULL
[17:03:04.136]             }
[17:03:04.136]             base::options(...future.oldOptions)
[17:03:04.136]             if (.Platform$OS.type == "windows") {
[17:03:04.136]                 old_names <- names(...future.oldEnvVars)
[17:03:04.136]                 envs <- base::Sys.getenv()
[17:03:04.136]                 names <- names(envs)
[17:03:04.136]                 common <- intersect(names, old_names)
[17:03:04.136]                 added <- setdiff(names, old_names)
[17:03:04.136]                 removed <- setdiff(old_names, names)
[17:03:04.136]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:04.136]                   envs[common]]
[17:03:04.136]                 NAMES <- toupper(changed)
[17:03:04.136]                 args <- list()
[17:03:04.136]                 for (kk in seq_along(NAMES)) {
[17:03:04.136]                   name <- changed[[kk]]
[17:03:04.136]                   NAME <- NAMES[[kk]]
[17:03:04.136]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.136]                     next
[17:03:04.136]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.136]                 }
[17:03:04.136]                 NAMES <- toupper(added)
[17:03:04.136]                 for (kk in seq_along(NAMES)) {
[17:03:04.136]                   name <- added[[kk]]
[17:03:04.136]                   NAME <- NAMES[[kk]]
[17:03:04.136]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.136]                     next
[17:03:04.136]                   args[[name]] <- ""
[17:03:04.136]                 }
[17:03:04.136]                 NAMES <- toupper(removed)
[17:03:04.136]                 for (kk in seq_along(NAMES)) {
[17:03:04.136]                   name <- removed[[kk]]
[17:03:04.136]                   NAME <- NAMES[[kk]]
[17:03:04.136]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.136]                     next
[17:03:04.136]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.136]                 }
[17:03:04.136]                 if (length(args) > 0) 
[17:03:04.136]                   base::do.call(base::Sys.setenv, args = args)
[17:03:04.136]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:04.136]             }
[17:03:04.136]             else {
[17:03:04.136]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:04.136]             }
[17:03:04.136]             {
[17:03:04.136]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:04.136]                   0L) {
[17:03:04.136]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:04.136]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:04.136]                   base::options(opts)
[17:03:04.136]                 }
[17:03:04.136]                 {
[17:03:04.136]                   {
[17:03:04.136]                     NULL
[17:03:04.136]                     RNGkind("Mersenne-Twister")
[17:03:04.136]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:04.136]                       inherits = FALSE)
[17:03:04.136]                   }
[17:03:04.136]                   options(future.plan = NULL)
[17:03:04.136]                   if (is.na(NA_character_)) 
[17:03:04.136]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.136]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:04.136]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:04.136]                     .init = FALSE)
[17:03:04.136]                 }
[17:03:04.136]             }
[17:03:04.136]         }
[17:03:04.136]     })
[17:03:04.136]     if (TRUE) {
[17:03:04.136]         base::sink(type = "output", split = FALSE)
[17:03:04.136]         if (TRUE) {
[17:03:04.136]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:04.136]         }
[17:03:04.136]         else {
[17:03:04.136]             ...future.result["stdout"] <- base::list(NULL)
[17:03:04.136]         }
[17:03:04.136]         base::close(...future.stdout)
[17:03:04.136]         ...future.stdout <- NULL
[17:03:04.136]     }
[17:03:04.136]     ...future.result$conditions <- ...future.conditions
[17:03:04.136]     ...future.result$finished <- base::Sys.time()
[17:03:04.136]     ...future.result
[17:03:04.136] }
[17:03:04.138] assign_globals() ...
[17:03:04.138] List of 2
[17:03:04.138]  $ a: num 2
[17:03:04.138]  $ b: num 3
[17:03:04.138]  - attr(*, "where")=List of 2
[17:03:04.138]   ..$ a:<environment: R_EmptyEnv> 
[17:03:04.138]   ..$ b:<environment: R_EmptyEnv> 
[17:03:04.138]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:04.138]  - attr(*, "resolved")= logi FALSE
[17:03:04.138]  - attr(*, "total_size")= num 112
[17:03:04.141] - copied ‘a’ to environment
[17:03:04.142] - copied ‘b’ to environment
[17:03:04.142] assign_globals() ... done
[17:03:04.142] plan(): Setting new future strategy stack:
[17:03:04.142] List of future strategies:
[17:03:04.142] 1. sequential:
[17:03:04.142]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:04.142]    - tweaked: FALSE
[17:03:04.142]    - call: NULL
[17:03:04.143] plan(): nbrOfWorkers() = 1
[17:03:04.144] plan(): Setting new future strategy stack:
[17:03:04.144] List of future strategies:
[17:03:04.144] 1. multicore:
[17:03:04.144]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:04.144]    - tweaked: FALSE
[17:03:04.144]    - call: plan(multicore)
[17:03:04.148] plan(): nbrOfWorkers() = 2
[17:03:04.148] SequentialFuture started (and completed)
[1] 6
*** multicore(..., workers = 1L) ... DONE
Testing with 2 cores ... DONE
> 
> message("*** multicore() ... DONE")
*** multicore() ... DONE
> 
> source("incl/end.R")
[17:03:04.149] plan(): Setting new future strategy stack:
[17:03:04.149] List of future strategies:
[17:03:04.149] 1. FutureStrategy:
[17:03:04.149]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:04.149]    - tweaked: FALSE
[17:03:04.149]    - call: future::plan(oplan)
[17:03:04.150] plan(): nbrOfWorkers() = 1
> 
