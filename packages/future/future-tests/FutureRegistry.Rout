
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:46:43.951] plan(): Setting new future strategy stack:
[17:46:43.951] List of future strategies:
[17:46:43.951] 1. sequential:
[17:46:43.951]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:43.951]    - tweaked: FALSE
[17:46:43.951]    - call: future::plan("sequential")
[17:46:43.962] plan(): nbrOfWorkers() = 1
> 
> message("*** FutureRegistry() ...")
*** FutureRegistry() ...
> 
> for (where in c(sprintf("multicore-%s", future:::session_uuid()), "rscript")) {
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 1 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'remove') ...", where))
+   FutureRegistry(where, action = "remove", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'collect-first') ...", where))
+   FutureRegistry(where, action = "collect-first")
+ 
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) < 1L)
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'reset') ...", where))
+   FutureRegistry(where, action = "reset")
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ }
*** FutureRegistry('multicore-93ccefe3-7123-6e0b-a3b4-e6aff3297615', 'list') ...
list()
*** FutureRegistry('multicore-93ccefe3-7123-6e0b-a3b4-e6aff3297615', 'add') ...
[17:46:43.997] getGlobalsAndPackages() ...
[17:46:43.997] Searching for globals...
[17:46:44.002] - globals found: [1] ‘{’
[17:46:44.002] Searching for globals ... DONE
[17:46:44.002] Resolving globals: FALSE
[17:46:44.003] 
[17:46:44.003] 
[17:46:44.003] getGlobalsAndPackages() ... DONE
[17:46:44.004] run() for ‘Future’ ...
[17:46:44.004] - state: ‘created’
[17:46:44.004] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:44.004] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:44.005] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:44.005]   - Field: ‘label’
[17:46:44.005]   - Field: ‘local’
[17:46:44.005]   - Field: ‘owner’
[17:46:44.005]   - Field: ‘envir’
[17:46:44.005]   - Field: ‘packages’
[17:46:44.005]   - Field: ‘gc’
[17:46:44.005]   - Field: ‘conditions’
[17:46:44.005]   - Field: ‘expr’
[17:46:44.005]   - Field: ‘uuid’
[17:46:44.005]   - Field: ‘seed’
[17:46:44.006]   - Field: ‘version’
[17:46:44.006]   - Field: ‘result’
[17:46:44.006]   - Field: ‘asynchronous’
[17:46:44.006]   - Field: ‘calls’
[17:46:44.006]   - Field: ‘globals’
[17:46:44.006]   - Field: ‘stdout’
[17:46:44.006]   - Field: ‘earlySignal’
[17:46:44.006]   - Field: ‘lazy’
[17:46:44.006]   - Field: ‘state’
[17:46:44.006] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:44.006] - Launch lazy future ...
[17:46:44.007] Packages needed by the future expression (n = 0): <none>
[17:46:44.007] Packages needed by future strategies (n = 0): <none>
[17:46:44.008] {
[17:46:44.008]     {
[17:46:44.008]         {
[17:46:44.008]             ...future.startTime <- base::Sys.time()
[17:46:44.008]             {
[17:46:44.008]                 {
[17:46:44.008]                   {
[17:46:44.008]                     base::local({
[17:46:44.008]                       has_future <- base::requireNamespace("future", 
[17:46:44.008]                         quietly = TRUE)
[17:46:44.008]                       if (has_future) {
[17:46:44.008]                         ns <- base::getNamespace("future")
[17:46:44.008]                         version <- ns[[".package"]][["version"]]
[17:46:44.008]                         if (is.null(version)) 
[17:46:44.008]                           version <- utils::packageVersion("future")
[17:46:44.008]                       }
[17:46:44.008]                       else {
[17:46:44.008]                         version <- NULL
[17:46:44.008]                       }
[17:46:44.008]                       if (!has_future || version < "1.8.0") {
[17:46:44.008]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:44.008]                           "", base::R.version$version.string), 
[17:46:44.008]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:44.008]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:44.008]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:44.008]                             "release", "version")], collapse = " "), 
[17:46:44.008]                           hostname = base::Sys.info()[["nodename"]])
[17:46:44.008]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:44.008]                           info)
[17:46:44.008]                         info <- base::paste(info, collapse = "; ")
[17:46:44.008]                         if (!has_future) {
[17:46:44.008]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:44.008]                             info)
[17:46:44.008]                         }
[17:46:44.008]                         else {
[17:46:44.008]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:44.008]                             info, version)
[17:46:44.008]                         }
[17:46:44.008]                         base::stop(msg)
[17:46:44.008]                       }
[17:46:44.008]                     })
[17:46:44.008]                   }
[17:46:44.008]                   ...future.strategy.old <- future::plan("list")
[17:46:44.008]                   options(future.plan = NULL)
[17:46:44.008]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:44.008]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:44.008]                 }
[17:46:44.008]                 ...future.workdir <- getwd()
[17:46:44.008]             }
[17:46:44.008]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:44.008]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:44.008]         }
[17:46:44.008]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:44.008]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:44.008]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:44.008]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:44.008]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:44.008]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:44.008]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:44.008]             base::names(...future.oldOptions))
[17:46:44.008]     }
[17:46:44.008]     if (FALSE) {
[17:46:44.008]     }
[17:46:44.008]     else {
[17:46:44.008]         if (TRUE) {
[17:46:44.008]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:44.008]                 open = "w")
[17:46:44.008]         }
[17:46:44.008]         else {
[17:46:44.008]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:44.008]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:44.008]         }
[17:46:44.008]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:44.008]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:44.008]             base::sink(type = "output", split = FALSE)
[17:46:44.008]             base::close(...future.stdout)
[17:46:44.008]         }, add = TRUE)
[17:46:44.008]     }
[17:46:44.008]     ...future.frame <- base::sys.nframe()
[17:46:44.008]     ...future.conditions <- base::list()
[17:46:44.008]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:44.008]     if (FALSE) {
[17:46:44.008]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:44.008]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:44.008]     }
[17:46:44.008]     ...future.result <- base::tryCatch({
[17:46:44.008]         base::withCallingHandlers({
[17:46:44.008]             ...future.value <- base::withVisible(base::local({
[17:46:44.008]                 1
[17:46:44.008]             }))
[17:46:44.008]             future::FutureResult(value = ...future.value$value, 
[17:46:44.008]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:44.008]                   ...future.rng), globalenv = if (FALSE) 
[17:46:44.008]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:44.008]                     ...future.globalenv.names))
[17:46:44.008]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:44.008]         }, condition = base::local({
[17:46:44.008]             c <- base::c
[17:46:44.008]             inherits <- base::inherits
[17:46:44.008]             invokeRestart <- base::invokeRestart
[17:46:44.008]             length <- base::length
[17:46:44.008]             list <- base::list
[17:46:44.008]             seq.int <- base::seq.int
[17:46:44.008]             signalCondition <- base::signalCondition
[17:46:44.008]             sys.calls <- base::sys.calls
[17:46:44.008]             `[[` <- base::`[[`
[17:46:44.008]             `+` <- base::`+`
[17:46:44.008]             `<<-` <- base::`<<-`
[17:46:44.008]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:44.008]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:44.008]                   3L)]
[17:46:44.008]             }
[17:46:44.008]             function(cond) {
[17:46:44.008]                 is_error <- inherits(cond, "error")
[17:46:44.008]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:44.008]                   NULL)
[17:46:44.008]                 if (is_error) {
[17:46:44.008]                   sessionInformation <- function() {
[17:46:44.008]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:44.008]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:44.008]                       search = base::search(), system = base::Sys.info())
[17:46:44.008]                   }
[17:46:44.008]                   ...future.conditions[[length(...future.conditions) + 
[17:46:44.008]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:44.008]                     cond$call), session = sessionInformation(), 
[17:46:44.008]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:44.008]                   signalCondition(cond)
[17:46:44.008]                 }
[17:46:44.008]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:44.008]                 "immediateCondition"))) {
[17:46:44.008]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:44.008]                   ...future.conditions[[length(...future.conditions) + 
[17:46:44.008]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:44.008]                   if (TRUE && !signal) {
[17:46:44.008]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:44.008]                     {
[17:46:44.008]                       inherits <- base::inherits
[17:46:44.008]                       invokeRestart <- base::invokeRestart
[17:46:44.008]                       is.null <- base::is.null
[17:46:44.008]                       muffled <- FALSE
[17:46:44.008]                       if (inherits(cond, "message")) {
[17:46:44.008]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:44.008]                         if (muffled) 
[17:46:44.008]                           invokeRestart("muffleMessage")
[17:46:44.008]                       }
[17:46:44.008]                       else if (inherits(cond, "warning")) {
[17:46:44.008]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:44.008]                         if (muffled) 
[17:46:44.008]                           invokeRestart("muffleWarning")
[17:46:44.008]                       }
[17:46:44.008]                       else if (inherits(cond, "condition")) {
[17:46:44.008]                         if (!is.null(pattern)) {
[17:46:44.008]                           computeRestarts <- base::computeRestarts
[17:46:44.008]                           grepl <- base::grepl
[17:46:44.008]                           restarts <- computeRestarts(cond)
[17:46:44.008]                           for (restart in restarts) {
[17:46:44.008]                             name <- restart$name
[17:46:44.008]                             if (is.null(name)) 
[17:46:44.008]                               next
[17:46:44.008]                             if (!grepl(pattern, name)) 
[17:46:44.008]                               next
[17:46:44.008]                             invokeRestart(restart)
[17:46:44.008]                             muffled <- TRUE
[17:46:44.008]                             break
[17:46:44.008]                           }
[17:46:44.008]                         }
[17:46:44.008]                       }
[17:46:44.008]                       invisible(muffled)
[17:46:44.008]                     }
[17:46:44.008]                     muffleCondition(cond, pattern = "^muffle")
[17:46:44.008]                   }
[17:46:44.008]                 }
[17:46:44.008]                 else {
[17:46:44.008]                   if (TRUE) {
[17:46:44.008]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:44.008]                     {
[17:46:44.008]                       inherits <- base::inherits
[17:46:44.008]                       invokeRestart <- base::invokeRestart
[17:46:44.008]                       is.null <- base::is.null
[17:46:44.008]                       muffled <- FALSE
[17:46:44.008]                       if (inherits(cond, "message")) {
[17:46:44.008]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:44.008]                         if (muffled) 
[17:46:44.008]                           invokeRestart("muffleMessage")
[17:46:44.008]                       }
[17:46:44.008]                       else if (inherits(cond, "warning")) {
[17:46:44.008]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:44.008]                         if (muffled) 
[17:46:44.008]                           invokeRestart("muffleWarning")
[17:46:44.008]                       }
[17:46:44.008]                       else if (inherits(cond, "condition")) {
[17:46:44.008]                         if (!is.null(pattern)) {
[17:46:44.008]                           computeRestarts <- base::computeRestarts
[17:46:44.008]                           grepl <- base::grepl
[17:46:44.008]                           restarts <- computeRestarts(cond)
[17:46:44.008]                           for (restart in restarts) {
[17:46:44.008]                             name <- restart$name
[17:46:44.008]                             if (is.null(name)) 
[17:46:44.008]                               next
[17:46:44.008]                             if (!grepl(pattern, name)) 
[17:46:44.008]                               next
[17:46:44.008]                             invokeRestart(restart)
[17:46:44.008]                             muffled <- TRUE
[17:46:44.008]                             break
[17:46:44.008]                           }
[17:46:44.008]                         }
[17:46:44.008]                       }
[17:46:44.008]                       invisible(muffled)
[17:46:44.008]                     }
[17:46:44.008]                     muffleCondition(cond, pattern = "^muffle")
[17:46:44.008]                   }
[17:46:44.008]                 }
[17:46:44.008]             }
[17:46:44.008]         }))
[17:46:44.008]     }, error = function(ex) {
[17:46:44.008]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:44.008]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:44.008]                 ...future.rng), started = ...future.startTime, 
[17:46:44.008]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:44.008]             version = "1.8"), class = "FutureResult")
[17:46:44.008]     }, finally = {
[17:46:44.008]         if (!identical(...future.workdir, getwd())) 
[17:46:44.008]             setwd(...future.workdir)
[17:46:44.008]         {
[17:46:44.008]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:44.008]                 ...future.oldOptions$nwarnings <- NULL
[17:46:44.008]             }
[17:46:44.008]             base::options(...future.oldOptions)
[17:46:44.008]             if (.Platform$OS.type == "windows") {
[17:46:44.008]                 old_names <- names(...future.oldEnvVars)
[17:46:44.008]                 envs <- base::Sys.getenv()
[17:46:44.008]                 names <- names(envs)
[17:46:44.008]                 common <- intersect(names, old_names)
[17:46:44.008]                 added <- setdiff(names, old_names)
[17:46:44.008]                 removed <- setdiff(old_names, names)
[17:46:44.008]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:44.008]                   envs[common]]
[17:46:44.008]                 NAMES <- toupper(changed)
[17:46:44.008]                 args <- list()
[17:46:44.008]                 for (kk in seq_along(NAMES)) {
[17:46:44.008]                   name <- changed[[kk]]
[17:46:44.008]                   NAME <- NAMES[[kk]]
[17:46:44.008]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:44.008]                     next
[17:46:44.008]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:44.008]                 }
[17:46:44.008]                 NAMES <- toupper(added)
[17:46:44.008]                 for (kk in seq_along(NAMES)) {
[17:46:44.008]                   name <- added[[kk]]
[17:46:44.008]                   NAME <- NAMES[[kk]]
[17:46:44.008]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:44.008]                     next
[17:46:44.008]                   args[[name]] <- ""
[17:46:44.008]                 }
[17:46:44.008]                 NAMES <- toupper(removed)
[17:46:44.008]                 for (kk in seq_along(NAMES)) {
[17:46:44.008]                   name <- removed[[kk]]
[17:46:44.008]                   NAME <- NAMES[[kk]]
[17:46:44.008]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:44.008]                     next
[17:46:44.008]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:44.008]                 }
[17:46:44.008]                 if (length(args) > 0) 
[17:46:44.008]                   base::do.call(base::Sys.setenv, args = args)
[17:46:44.008]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:44.008]             }
[17:46:44.008]             else {
[17:46:44.008]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:44.008]             }
[17:46:44.008]             {
[17:46:44.008]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:44.008]                   0L) {
[17:46:44.008]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:44.008]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:44.008]                   base::options(opts)
[17:46:44.008]                 }
[17:46:44.008]                 {
[17:46:44.008]                   {
[17:46:44.008]                     NULL
[17:46:44.008]                     RNGkind("Mersenne-Twister")
[17:46:44.008]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:44.008]                       inherits = FALSE)
[17:46:44.008]                   }
[17:46:44.008]                   options(future.plan = NULL)
[17:46:44.008]                   if (is.na(NA_character_)) 
[17:46:44.008]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:44.008]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:44.008]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:44.008]                     .init = FALSE)
[17:46:44.008]                 }
[17:46:44.008]             }
[17:46:44.008]         }
[17:46:44.008]     })
[17:46:44.008]     if (TRUE) {
[17:46:44.008]         base::sink(type = "output", split = FALSE)
[17:46:44.008]         if (TRUE) {
[17:46:44.008]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:44.008]         }
[17:46:44.008]         else {
[17:46:44.008]             ...future.result["stdout"] <- base::list(NULL)
[17:46:44.008]         }
[17:46:44.008]         base::close(...future.stdout)
[17:46:44.008]         ...future.stdout <- NULL
[17:46:44.008]     }
[17:46:44.008]     ...future.result$conditions <- ...future.conditions
[17:46:44.008]     ...future.result$finished <- base::Sys.time()
[17:46:44.008]     ...future.result
[17:46:44.008] }
[17:46:44.010] plan(): Setting new future strategy stack:
[17:46:44.010] List of future strategies:
[17:46:44.010] 1. sequential:
[17:46:44.010]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:44.010]    - tweaked: FALSE
[17:46:44.010]    - call: NULL
[17:46:44.010] plan(): nbrOfWorkers() = 1
[17:46:44.012] plan(): Setting new future strategy stack:
[17:46:44.012] List of future strategies:
[17:46:44.012] 1. sequential:
[17:46:44.012]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:44.012]    - tweaked: FALSE
[17:46:44.012]    - call: future::plan("sequential")
[17:46:44.012] plan(): nbrOfWorkers() = 1
[17:46:44.012] SequentialFuture started (and completed)
[17:46:44.013] - Launch lazy future ... done
[17:46:44.013] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 93ccefe3-7123-6e0b-a3b4-e6aff3297615
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-93ccefe3-7123-6e0b-a3b4-e6aff3297615', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 93ccefe3-7123-6e0b-a3b4-e6aff3297615
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-93ccefe3-7123-6e0b-a3b4-e6aff3297615', 'remove') ...
*** FutureRegistry('multicore-93ccefe3-7123-6e0b-a3b4-e6aff3297615', 'list') ...
list()
*** FutureRegistry('multicore-93ccefe3-7123-6e0b-a3b4-e6aff3297615', 'add') ...
[17:46:44.017] getGlobalsAndPackages() ...
[17:46:44.017] Searching for globals...
[17:46:44.017] - globals found: [1] ‘{’
[17:46:44.017] Searching for globals ... DONE
[17:46:44.017] Resolving globals: FALSE
[17:46:44.018] 
[17:46:44.018] 
[17:46:44.018] getGlobalsAndPackages() ... DONE
[17:46:44.018] run() for ‘Future’ ...
[17:46:44.018] - state: ‘created’
[17:46:44.018] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:44.019] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:44.019] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:44.019]   - Field: ‘label’
[17:46:44.019]   - Field: ‘local’
[17:46:44.019]   - Field: ‘owner’
[17:46:44.019]   - Field: ‘envir’
[17:46:44.019]   - Field: ‘packages’
[17:46:44.019]   - Field: ‘gc’
[17:46:44.019]   - Field: ‘conditions’
[17:46:44.019]   - Field: ‘expr’
[17:46:44.020]   - Field: ‘uuid’
[17:46:44.020]   - Field: ‘seed’
[17:46:44.020]   - Field: ‘version’
[17:46:44.020]   - Field: ‘result’
[17:46:44.020]   - Field: ‘asynchronous’
[17:46:44.020]   - Field: ‘calls’
[17:46:44.020]   - Field: ‘globals’
[17:46:44.020]   - Field: ‘stdout’
[17:46:44.020]   - Field: ‘earlySignal’
[17:46:44.020]   - Field: ‘lazy’
[17:46:44.020]   - Field: ‘state’
[17:46:44.020] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:44.021] - Launch lazy future ...
[17:46:44.021] Packages needed by the future expression (n = 0): <none>
[17:46:44.021] Packages needed by future strategies (n = 0): <none>
[17:46:44.021] {
[17:46:44.021]     {
[17:46:44.021]         {
[17:46:44.021]             ...future.startTime <- base::Sys.time()
[17:46:44.021]             {
[17:46:44.021]                 {
[17:46:44.021]                   {
[17:46:44.021]                     base::local({
[17:46:44.021]                       has_future <- base::requireNamespace("future", 
[17:46:44.021]                         quietly = TRUE)
[17:46:44.021]                       if (has_future) {
[17:46:44.021]                         ns <- base::getNamespace("future")
[17:46:44.021]                         version <- ns[[".package"]][["version"]]
[17:46:44.021]                         if (is.null(version)) 
[17:46:44.021]                           version <- utils::packageVersion("future")
[17:46:44.021]                       }
[17:46:44.021]                       else {
[17:46:44.021]                         version <- NULL
[17:46:44.021]                       }
[17:46:44.021]                       if (!has_future || version < "1.8.0") {
[17:46:44.021]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:44.021]                           "", base::R.version$version.string), 
[17:46:44.021]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:44.021]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:44.021]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:44.021]                             "release", "version")], collapse = " "), 
[17:46:44.021]                           hostname = base::Sys.info()[["nodename"]])
[17:46:44.021]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:44.021]                           info)
[17:46:44.021]                         info <- base::paste(info, collapse = "; ")
[17:46:44.021]                         if (!has_future) {
[17:46:44.021]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:44.021]                             info)
[17:46:44.021]                         }
[17:46:44.021]                         else {
[17:46:44.021]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:44.021]                             info, version)
[17:46:44.021]                         }
[17:46:44.021]                         base::stop(msg)
[17:46:44.021]                       }
[17:46:44.021]                     })
[17:46:44.021]                   }
[17:46:44.021]                   ...future.strategy.old <- future::plan("list")
[17:46:44.021]                   options(future.plan = NULL)
[17:46:44.021]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:44.021]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:44.021]                 }
[17:46:44.021]                 ...future.workdir <- getwd()
[17:46:44.021]             }
[17:46:44.021]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:44.021]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:44.021]         }
[17:46:44.021]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:44.021]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:44.021]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:44.021]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:44.021]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:44.021]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:44.021]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:44.021]             base::names(...future.oldOptions))
[17:46:44.021]     }
[17:46:44.021]     if (FALSE) {
[17:46:44.021]     }
[17:46:44.021]     else {
[17:46:44.021]         if (TRUE) {
[17:46:44.021]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:44.021]                 open = "w")
[17:46:44.021]         }
[17:46:44.021]         else {
[17:46:44.021]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:44.021]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:44.021]         }
[17:46:44.021]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:44.021]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:44.021]             base::sink(type = "output", split = FALSE)
[17:46:44.021]             base::close(...future.stdout)
[17:46:44.021]         }, add = TRUE)
[17:46:44.021]     }
[17:46:44.021]     ...future.frame <- base::sys.nframe()
[17:46:44.021]     ...future.conditions <- base::list()
[17:46:44.021]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:44.021]     if (FALSE) {
[17:46:44.021]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:44.021]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:44.021]     }
[17:46:44.021]     ...future.result <- base::tryCatch({
[17:46:44.021]         base::withCallingHandlers({
[17:46:44.021]             ...future.value <- base::withVisible(base::local({
[17:46:44.021]                 2
[17:46:44.021]             }))
[17:46:44.021]             future::FutureResult(value = ...future.value$value, 
[17:46:44.021]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:44.021]                   ...future.rng), globalenv = if (FALSE) 
[17:46:44.021]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:44.021]                     ...future.globalenv.names))
[17:46:44.021]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:44.021]         }, condition = base::local({
[17:46:44.021]             c <- base::c
[17:46:44.021]             inherits <- base::inherits
[17:46:44.021]             invokeRestart <- base::invokeRestart
[17:46:44.021]             length <- base::length
[17:46:44.021]             list <- base::list
[17:46:44.021]             seq.int <- base::seq.int
[17:46:44.021]             signalCondition <- base::signalCondition
[17:46:44.021]             sys.calls <- base::sys.calls
[17:46:44.021]             `[[` <- base::`[[`
[17:46:44.021]             `+` <- base::`+`
[17:46:44.021]             `<<-` <- base::`<<-`
[17:46:44.021]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:44.021]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:44.021]                   3L)]
[17:46:44.021]             }
[17:46:44.021]             function(cond) {
[17:46:44.021]                 is_error <- inherits(cond, "error")
[17:46:44.021]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:44.021]                   NULL)
[17:46:44.021]                 if (is_error) {
[17:46:44.021]                   sessionInformation <- function() {
[17:46:44.021]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:44.021]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:44.021]                       search = base::search(), system = base::Sys.info())
[17:46:44.021]                   }
[17:46:44.021]                   ...future.conditions[[length(...future.conditions) + 
[17:46:44.021]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:44.021]                     cond$call), session = sessionInformation(), 
[17:46:44.021]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:44.021]                   signalCondition(cond)
[17:46:44.021]                 }
[17:46:44.021]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:44.021]                 "immediateCondition"))) {
[17:46:44.021]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:44.021]                   ...future.conditions[[length(...future.conditions) + 
[17:46:44.021]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:44.021]                   if (TRUE && !signal) {
[17:46:44.021]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:44.021]                     {
[17:46:44.021]                       inherits <- base::inherits
[17:46:44.021]                       invokeRestart <- base::invokeRestart
[17:46:44.021]                       is.null <- base::is.null
[17:46:44.021]                       muffled <- FALSE
[17:46:44.021]                       if (inherits(cond, "message")) {
[17:46:44.021]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:44.021]                         if (muffled) 
[17:46:44.021]                           invokeRestart("muffleMessage")
[17:46:44.021]                       }
[17:46:44.021]                       else if (inherits(cond, "warning")) {
[17:46:44.021]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:44.021]                         if (muffled) 
[17:46:44.021]                           invokeRestart("muffleWarning")
[17:46:44.021]                       }
[17:46:44.021]                       else if (inherits(cond, "condition")) {
[17:46:44.021]                         if (!is.null(pattern)) {
[17:46:44.021]                           computeRestarts <- base::computeRestarts
[17:46:44.021]                           grepl <- base::grepl
[17:46:44.021]                           restarts <- computeRestarts(cond)
[17:46:44.021]                           for (restart in restarts) {
[17:46:44.021]                             name <- restart$name
[17:46:44.021]                             if (is.null(name)) 
[17:46:44.021]                               next
[17:46:44.021]                             if (!grepl(pattern, name)) 
[17:46:44.021]                               next
[17:46:44.021]                             invokeRestart(restart)
[17:46:44.021]                             muffled <- TRUE
[17:46:44.021]                             break
[17:46:44.021]                           }
[17:46:44.021]                         }
[17:46:44.021]                       }
[17:46:44.021]                       invisible(muffled)
[17:46:44.021]                     }
[17:46:44.021]                     muffleCondition(cond, pattern = "^muffle")
[17:46:44.021]                   }
[17:46:44.021]                 }
[17:46:44.021]                 else {
[17:46:44.021]                   if (TRUE) {
[17:46:44.021]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:44.021]                     {
[17:46:44.021]                       inherits <- base::inherits
[17:46:44.021]                       invokeRestart <- base::invokeRestart
[17:46:44.021]                       is.null <- base::is.null
[17:46:44.021]                       muffled <- FALSE
[17:46:44.021]                       if (inherits(cond, "message")) {
[17:46:44.021]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:44.021]                         if (muffled) 
[17:46:44.021]                           invokeRestart("muffleMessage")
[17:46:44.021]                       }
[17:46:44.021]                       else if (inherits(cond, "warning")) {
[17:46:44.021]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:44.021]                         if (muffled) 
[17:46:44.021]                           invokeRestart("muffleWarning")
[17:46:44.021]                       }
[17:46:44.021]                       else if (inherits(cond, "condition")) {
[17:46:44.021]                         if (!is.null(pattern)) {
[17:46:44.021]                           computeRestarts <- base::computeRestarts
[17:46:44.021]                           grepl <- base::grepl
[17:46:44.021]                           restarts <- computeRestarts(cond)
[17:46:44.021]                           for (restart in restarts) {
[17:46:44.021]                             name <- restart$name
[17:46:44.021]                             if (is.null(name)) 
[17:46:44.021]                               next
[17:46:44.021]                             if (!grepl(pattern, name)) 
[17:46:44.021]                               next
[17:46:44.021]                             invokeRestart(restart)
[17:46:44.021]                             muffled <- TRUE
[17:46:44.021]                             break
[17:46:44.021]                           }
[17:46:44.021]                         }
[17:46:44.021]                       }
[17:46:44.021]                       invisible(muffled)
[17:46:44.021]                     }
[17:46:44.021]                     muffleCondition(cond, pattern = "^muffle")
[17:46:44.021]                   }
[17:46:44.021]                 }
[17:46:44.021]             }
[17:46:44.021]         }))
[17:46:44.021]     }, error = function(ex) {
[17:46:44.021]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:44.021]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:44.021]                 ...future.rng), started = ...future.startTime, 
[17:46:44.021]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:44.021]             version = "1.8"), class = "FutureResult")
[17:46:44.021]     }, finally = {
[17:46:44.021]         if (!identical(...future.workdir, getwd())) 
[17:46:44.021]             setwd(...future.workdir)
[17:46:44.021]         {
[17:46:44.021]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:44.021]                 ...future.oldOptions$nwarnings <- NULL
[17:46:44.021]             }
[17:46:44.021]             base::options(...future.oldOptions)
[17:46:44.021]             if (.Platform$OS.type == "windows") {
[17:46:44.021]                 old_names <- names(...future.oldEnvVars)
[17:46:44.021]                 envs <- base::Sys.getenv()
[17:46:44.021]                 names <- names(envs)
[17:46:44.021]                 common <- intersect(names, old_names)
[17:46:44.021]                 added <- setdiff(names, old_names)
[17:46:44.021]                 removed <- setdiff(old_names, names)
[17:46:44.021]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:44.021]                   envs[common]]
[17:46:44.021]                 NAMES <- toupper(changed)
[17:46:44.021]                 args <- list()
[17:46:44.021]                 for (kk in seq_along(NAMES)) {
[17:46:44.021]                   name <- changed[[kk]]
[17:46:44.021]                   NAME <- NAMES[[kk]]
[17:46:44.021]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:44.021]                     next
[17:46:44.021]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:44.021]                 }
[17:46:44.021]                 NAMES <- toupper(added)
[17:46:44.021]                 for (kk in seq_along(NAMES)) {
[17:46:44.021]                   name <- added[[kk]]
[17:46:44.021]                   NAME <- NAMES[[kk]]
[17:46:44.021]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:44.021]                     next
[17:46:44.021]                   args[[name]] <- ""
[17:46:44.021]                 }
[17:46:44.021]                 NAMES <- toupper(removed)
[17:46:44.021]                 for (kk in seq_along(NAMES)) {
[17:46:44.021]                   name <- removed[[kk]]
[17:46:44.021]                   NAME <- NAMES[[kk]]
[17:46:44.021]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:44.021]                     next
[17:46:44.021]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:44.021]                 }
[17:46:44.021]                 if (length(args) > 0) 
[17:46:44.021]                   base::do.call(base::Sys.setenv, args = args)
[17:46:44.021]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:44.021]             }
[17:46:44.021]             else {
[17:46:44.021]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:44.021]             }
[17:46:44.021]             {
[17:46:44.021]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:44.021]                   0L) {
[17:46:44.021]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:44.021]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:44.021]                   base::options(opts)
[17:46:44.021]                 }
[17:46:44.021]                 {
[17:46:44.021]                   {
[17:46:44.021]                     NULL
[17:46:44.021]                     RNGkind("Mersenne-Twister")
[17:46:44.021]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:44.021]                       inherits = FALSE)
[17:46:44.021]                   }
[17:46:44.021]                   options(future.plan = NULL)
[17:46:44.021]                   if (is.na(NA_character_)) 
[17:46:44.021]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:44.021]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:44.021]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:44.021]                     .init = FALSE)
[17:46:44.021]                 }
[17:46:44.021]             }
[17:46:44.021]         }
[17:46:44.021]     })
[17:46:44.021]     if (TRUE) {
[17:46:44.021]         base::sink(type = "output", split = FALSE)
[17:46:44.021]         if (TRUE) {
[17:46:44.021]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:44.021]         }
[17:46:44.021]         else {
[17:46:44.021]             ...future.result["stdout"] <- base::list(NULL)
[17:46:44.021]         }
[17:46:44.021]         base::close(...future.stdout)
[17:46:44.021]         ...future.stdout <- NULL
[17:46:44.021]     }
[17:46:44.021]     ...future.result$conditions <- ...future.conditions
[17:46:44.021]     ...future.result$finished <- base::Sys.time()
[17:46:44.021]     ...future.result
[17:46:44.021] }
[17:46:44.023] plan(): Setting new future strategy stack:
[17:46:44.023] List of future strategies:
[17:46:44.023] 1. sequential:
[17:46:44.023]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:44.023]    - tweaked: FALSE
[17:46:44.023]    - call: NULL
[17:46:44.023] plan(): nbrOfWorkers() = 1
[17:46:44.024] plan(): Setting new future strategy stack:
[17:46:44.024] List of future strategies:
[17:46:44.024] 1. sequential:
[17:46:44.024]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:44.024]    - tweaked: FALSE
[17:46:44.024]    - call: future::plan("sequential")
[17:46:44.025] plan(): nbrOfWorkers() = 1
[17:46:44.025] SequentialFuture started (and completed)
[17:46:44.025] - Launch lazy future ... done
[17:46:44.025] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 93ccefe3-7123-6e0b-a3b4-e6aff3297615
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-93ccefe3-7123-6e0b-a3b4-e6aff3297615', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 93ccefe3-7123-6e0b-a3b4-e6aff3297615
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-93ccefe3-7123-6e0b-a3b4-e6aff3297615', 'collect-first') ...
[17:46:44.026] resolved() for ‘SequentialFuture’ ...
[17:46:44.026] - state: ‘finished’
[17:46:44.026] - run: FALSE
[17:46:44.026] - result: ‘FutureResult’
[17:46:44.027] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('multicore-93ccefe3-7123-6e0b-a3b4-e6aff3297615', 'add') ...
[17:46:44.027] getGlobalsAndPackages() ...
[17:46:44.027] Searching for globals...
[17:46:44.028] - globals found: [1] ‘{’
[17:46:44.028] Searching for globals ... DONE
[17:46:44.028] Resolving globals: FALSE
[17:46:44.028] 
[17:46:44.028] 
[17:46:44.028] getGlobalsAndPackages() ... DONE
[17:46:44.029] run() for ‘Future’ ...
[17:46:44.029] - state: ‘created’
[17:46:44.029] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:44.029] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:44.029] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:44.029]   - Field: ‘label’
[17:46:44.029]   - Field: ‘local’
[17:46:44.029]   - Field: ‘owner’
[17:46:44.030]   - Field: ‘envir’
[17:46:44.030]   - Field: ‘packages’
[17:46:44.030]   - Field: ‘gc’
[17:46:44.030]   - Field: ‘conditions’
[17:46:44.030]   - Field: ‘expr’
[17:46:44.030]   - Field: ‘uuid’
[17:46:44.030]   - Field: ‘seed’
[17:46:44.030]   - Field: ‘version’
[17:46:44.030]   - Field: ‘result’
[17:46:44.030]   - Field: ‘asynchronous’
[17:46:44.030]   - Field: ‘calls’
[17:46:44.031]   - Field: ‘globals’
[17:46:44.031]   - Field: ‘stdout’
[17:46:44.031]   - Field: ‘earlySignal’
[17:46:44.031]   - Field: ‘lazy’
[17:46:44.031]   - Field: ‘state’
[17:46:44.031] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:44.031] - Launch lazy future ...
[17:46:44.031] Packages needed by the future expression (n = 0): <none>
[17:46:44.031] Packages needed by future strategies (n = 0): <none>
[17:46:44.032] {
[17:46:44.032]     {
[17:46:44.032]         {
[17:46:44.032]             ...future.startTime <- base::Sys.time()
[17:46:44.032]             {
[17:46:44.032]                 {
[17:46:44.032]                   {
[17:46:44.032]                     base::local({
[17:46:44.032]                       has_future <- base::requireNamespace("future", 
[17:46:44.032]                         quietly = TRUE)
[17:46:44.032]                       if (has_future) {
[17:46:44.032]                         ns <- base::getNamespace("future")
[17:46:44.032]                         version <- ns[[".package"]][["version"]]
[17:46:44.032]                         if (is.null(version)) 
[17:46:44.032]                           version <- utils::packageVersion("future")
[17:46:44.032]                       }
[17:46:44.032]                       else {
[17:46:44.032]                         version <- NULL
[17:46:44.032]                       }
[17:46:44.032]                       if (!has_future || version < "1.8.0") {
[17:46:44.032]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:44.032]                           "", base::R.version$version.string), 
[17:46:44.032]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:44.032]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:44.032]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:44.032]                             "release", "version")], collapse = " "), 
[17:46:44.032]                           hostname = base::Sys.info()[["nodename"]])
[17:46:44.032]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:44.032]                           info)
[17:46:44.032]                         info <- base::paste(info, collapse = "; ")
[17:46:44.032]                         if (!has_future) {
[17:46:44.032]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:44.032]                             info)
[17:46:44.032]                         }
[17:46:44.032]                         else {
[17:46:44.032]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:44.032]                             info, version)
[17:46:44.032]                         }
[17:46:44.032]                         base::stop(msg)
[17:46:44.032]                       }
[17:46:44.032]                     })
[17:46:44.032]                   }
[17:46:44.032]                   ...future.strategy.old <- future::plan("list")
[17:46:44.032]                   options(future.plan = NULL)
[17:46:44.032]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:44.032]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:44.032]                 }
[17:46:44.032]                 ...future.workdir <- getwd()
[17:46:44.032]             }
[17:46:44.032]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:44.032]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:44.032]         }
[17:46:44.032]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:44.032]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:44.032]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:44.032]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:44.032]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:44.032]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:44.032]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:44.032]             base::names(...future.oldOptions))
[17:46:44.032]     }
[17:46:44.032]     if (FALSE) {
[17:46:44.032]     }
[17:46:44.032]     else {
[17:46:44.032]         if (TRUE) {
[17:46:44.032]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:44.032]                 open = "w")
[17:46:44.032]         }
[17:46:44.032]         else {
[17:46:44.032]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:44.032]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:44.032]         }
[17:46:44.032]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:44.032]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:44.032]             base::sink(type = "output", split = FALSE)
[17:46:44.032]             base::close(...future.stdout)
[17:46:44.032]         }, add = TRUE)
[17:46:44.032]     }
[17:46:44.032]     ...future.frame <- base::sys.nframe()
[17:46:44.032]     ...future.conditions <- base::list()
[17:46:44.032]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:44.032]     if (FALSE) {
[17:46:44.032]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:44.032]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:44.032]     }
[17:46:44.032]     ...future.result <- base::tryCatch({
[17:46:44.032]         base::withCallingHandlers({
[17:46:44.032]             ...future.value <- base::withVisible(base::local({
[17:46:44.032]                 2
[17:46:44.032]             }))
[17:46:44.032]             future::FutureResult(value = ...future.value$value, 
[17:46:44.032]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:44.032]                   ...future.rng), globalenv = if (FALSE) 
[17:46:44.032]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:44.032]                     ...future.globalenv.names))
[17:46:44.032]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:44.032]         }, condition = base::local({
[17:46:44.032]             c <- base::c
[17:46:44.032]             inherits <- base::inherits
[17:46:44.032]             invokeRestart <- base::invokeRestart
[17:46:44.032]             length <- base::length
[17:46:44.032]             list <- base::list
[17:46:44.032]             seq.int <- base::seq.int
[17:46:44.032]             signalCondition <- base::signalCondition
[17:46:44.032]             sys.calls <- base::sys.calls
[17:46:44.032]             `[[` <- base::`[[`
[17:46:44.032]             `+` <- base::`+`
[17:46:44.032]             `<<-` <- base::`<<-`
[17:46:44.032]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:44.032]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:44.032]                   3L)]
[17:46:44.032]             }
[17:46:44.032]             function(cond) {
[17:46:44.032]                 is_error <- inherits(cond, "error")
[17:46:44.032]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:44.032]                   NULL)
[17:46:44.032]                 if (is_error) {
[17:46:44.032]                   sessionInformation <- function() {
[17:46:44.032]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:44.032]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:44.032]                       search = base::search(), system = base::Sys.info())
[17:46:44.032]                   }
[17:46:44.032]                   ...future.conditions[[length(...future.conditions) + 
[17:46:44.032]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:44.032]                     cond$call), session = sessionInformation(), 
[17:46:44.032]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:44.032]                   signalCondition(cond)
[17:46:44.032]                 }
[17:46:44.032]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:44.032]                 "immediateCondition"))) {
[17:46:44.032]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:44.032]                   ...future.conditions[[length(...future.conditions) + 
[17:46:44.032]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:44.032]                   if (TRUE && !signal) {
[17:46:44.032]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:44.032]                     {
[17:46:44.032]                       inherits <- base::inherits
[17:46:44.032]                       invokeRestart <- base::invokeRestart
[17:46:44.032]                       is.null <- base::is.null
[17:46:44.032]                       muffled <- FALSE
[17:46:44.032]                       if (inherits(cond, "message")) {
[17:46:44.032]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:44.032]                         if (muffled) 
[17:46:44.032]                           invokeRestart("muffleMessage")
[17:46:44.032]                       }
[17:46:44.032]                       else if (inherits(cond, "warning")) {
[17:46:44.032]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:44.032]                         if (muffled) 
[17:46:44.032]                           invokeRestart("muffleWarning")
[17:46:44.032]                       }
[17:46:44.032]                       else if (inherits(cond, "condition")) {
[17:46:44.032]                         if (!is.null(pattern)) {
[17:46:44.032]                           computeRestarts <- base::computeRestarts
[17:46:44.032]                           grepl <- base::grepl
[17:46:44.032]                           restarts <- computeRestarts(cond)
[17:46:44.032]                           for (restart in restarts) {
[17:46:44.032]                             name <- restart$name
[17:46:44.032]                             if (is.null(name)) 
[17:46:44.032]                               next
[17:46:44.032]                             if (!grepl(pattern, name)) 
[17:46:44.032]                               next
[17:46:44.032]                             invokeRestart(restart)
[17:46:44.032]                             muffled <- TRUE
[17:46:44.032]                             break
[17:46:44.032]                           }
[17:46:44.032]                         }
[17:46:44.032]                       }
[17:46:44.032]                       invisible(muffled)
[17:46:44.032]                     }
[17:46:44.032]                     muffleCondition(cond, pattern = "^muffle")
[17:46:44.032]                   }
[17:46:44.032]                 }
[17:46:44.032]                 else {
[17:46:44.032]                   if (TRUE) {
[17:46:44.032]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:44.032]                     {
[17:46:44.032]                       inherits <- base::inherits
[17:46:44.032]                       invokeRestart <- base::invokeRestart
[17:46:44.032]                       is.null <- base::is.null
[17:46:44.032]                       muffled <- FALSE
[17:46:44.032]                       if (inherits(cond, "message")) {
[17:46:44.032]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:44.032]                         if (muffled) 
[17:46:44.032]                           invokeRestart("muffleMessage")
[17:46:44.032]                       }
[17:46:44.032]                       else if (inherits(cond, "warning")) {
[17:46:44.032]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:44.032]                         if (muffled) 
[17:46:44.032]                           invokeRestart("muffleWarning")
[17:46:44.032]                       }
[17:46:44.032]                       else if (inherits(cond, "condition")) {
[17:46:44.032]                         if (!is.null(pattern)) {
[17:46:44.032]                           computeRestarts <- base::computeRestarts
[17:46:44.032]                           grepl <- base::grepl
[17:46:44.032]                           restarts <- computeRestarts(cond)
[17:46:44.032]                           for (restart in restarts) {
[17:46:44.032]                             name <- restart$name
[17:46:44.032]                             if (is.null(name)) 
[17:46:44.032]                               next
[17:46:44.032]                             if (!grepl(pattern, name)) 
[17:46:44.032]                               next
[17:46:44.032]                             invokeRestart(restart)
[17:46:44.032]                             muffled <- TRUE
[17:46:44.032]                             break
[17:46:44.032]                           }
[17:46:44.032]                         }
[17:46:44.032]                       }
[17:46:44.032]                       invisible(muffled)
[17:46:44.032]                     }
[17:46:44.032]                     muffleCondition(cond, pattern = "^muffle")
[17:46:44.032]                   }
[17:46:44.032]                 }
[17:46:44.032]             }
[17:46:44.032]         }))
[17:46:44.032]     }, error = function(ex) {
[17:46:44.032]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:44.032]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:44.032]                 ...future.rng), started = ...future.startTime, 
[17:46:44.032]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:44.032]             version = "1.8"), class = "FutureResult")
[17:46:44.032]     }, finally = {
[17:46:44.032]         if (!identical(...future.workdir, getwd())) 
[17:46:44.032]             setwd(...future.workdir)
[17:46:44.032]         {
[17:46:44.032]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:44.032]                 ...future.oldOptions$nwarnings <- NULL
[17:46:44.032]             }
[17:46:44.032]             base::options(...future.oldOptions)
[17:46:44.032]             if (.Platform$OS.type == "windows") {
[17:46:44.032]                 old_names <- names(...future.oldEnvVars)
[17:46:44.032]                 envs <- base::Sys.getenv()
[17:46:44.032]                 names <- names(envs)
[17:46:44.032]                 common <- intersect(names, old_names)
[17:46:44.032]                 added <- setdiff(names, old_names)
[17:46:44.032]                 removed <- setdiff(old_names, names)
[17:46:44.032]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:44.032]                   envs[common]]
[17:46:44.032]                 NAMES <- toupper(changed)
[17:46:44.032]                 args <- list()
[17:46:44.032]                 for (kk in seq_along(NAMES)) {
[17:46:44.032]                   name <- changed[[kk]]
[17:46:44.032]                   NAME <- NAMES[[kk]]
[17:46:44.032]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:44.032]                     next
[17:46:44.032]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:44.032]                 }
[17:46:44.032]                 NAMES <- toupper(added)
[17:46:44.032]                 for (kk in seq_along(NAMES)) {
[17:46:44.032]                   name <- added[[kk]]
[17:46:44.032]                   NAME <- NAMES[[kk]]
[17:46:44.032]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:44.032]                     next
[17:46:44.032]                   args[[name]] <- ""
[17:46:44.032]                 }
[17:46:44.032]                 NAMES <- toupper(removed)
[17:46:44.032]                 for (kk in seq_along(NAMES)) {
[17:46:44.032]                   name <- removed[[kk]]
[17:46:44.032]                   NAME <- NAMES[[kk]]
[17:46:44.032]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:44.032]                     next
[17:46:44.032]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:44.032]                 }
[17:46:44.032]                 if (length(args) > 0) 
[17:46:44.032]                   base::do.call(base::Sys.setenv, args = args)
[17:46:44.032]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:44.032]             }
[17:46:44.032]             else {
[17:46:44.032]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:44.032]             }
[17:46:44.032]             {
[17:46:44.032]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:44.032]                   0L) {
[17:46:44.032]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:44.032]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:44.032]                   base::options(opts)
[17:46:44.032]                 }
[17:46:44.032]                 {
[17:46:44.032]                   {
[17:46:44.032]                     NULL
[17:46:44.032]                     RNGkind("Mersenne-Twister")
[17:46:44.032]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:44.032]                       inherits = FALSE)
[17:46:44.032]                   }
[17:46:44.032]                   options(future.plan = NULL)
[17:46:44.032]                   if (is.na(NA_character_)) 
[17:46:44.032]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:44.032]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:44.032]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:44.032]                     .init = FALSE)
[17:46:44.032]                 }
[17:46:44.032]             }
[17:46:44.032]         }
[17:46:44.032]     })
[17:46:44.032]     if (TRUE) {
[17:46:44.032]         base::sink(type = "output", split = FALSE)
[17:46:44.032]         if (TRUE) {
[17:46:44.032]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:44.032]         }
[17:46:44.032]         else {
[17:46:44.032]             ...future.result["stdout"] <- base::list(NULL)
[17:46:44.032]         }
[17:46:44.032]         base::close(...future.stdout)
[17:46:44.032]         ...future.stdout <- NULL
[17:46:44.032]     }
[17:46:44.032]     ...future.result$conditions <- ...future.conditions
[17:46:44.032]     ...future.result$finished <- base::Sys.time()
[17:46:44.032]     ...future.result
[17:46:44.032] }
[17:46:44.033] plan(): Setting new future strategy stack:
[17:46:44.033] List of future strategies:
[17:46:44.033] 1. sequential:
[17:46:44.033]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:44.033]    - tweaked: FALSE
[17:46:44.033]    - call: NULL
[17:46:44.034] plan(): nbrOfWorkers() = 1
[17:46:44.035] plan(): Setting new future strategy stack:
[17:46:44.035] List of future strategies:
[17:46:44.035] 1. sequential:
[17:46:44.035]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:44.035]    - tweaked: FALSE
[17:46:44.035]    - call: future::plan("sequential")
[17:46:44.035] plan(): nbrOfWorkers() = 1
[17:46:44.035] SequentialFuture started (and completed)
[17:46:44.035] - Launch lazy future ... done
[17:46:44.036] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 93ccefe3-7123-6e0b-a3b4-e6aff3297615
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-93ccefe3-7123-6e0b-a3b4-e6aff3297615', 'reset') ...
*** FutureRegistry('multicore-93ccefe3-7123-6e0b-a3b4-e6aff3297615', 'list') ...
list()
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[17:46:44.036] getGlobalsAndPackages() ...
[17:46:44.036] Searching for globals...
[17:46:44.037] - globals found: [1] ‘{’
[17:46:44.037] Searching for globals ... DONE
[17:46:44.037] Resolving globals: FALSE
[17:46:44.037] 
[17:46:44.037] 
[17:46:44.038] getGlobalsAndPackages() ... DONE
[17:46:44.038] run() for ‘Future’ ...
[17:46:44.038] - state: ‘created’
[17:46:44.038] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:44.040] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:44.040] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:44.040]   - Field: ‘label’
[17:46:44.040]   - Field: ‘local’
[17:46:44.041]   - Field: ‘owner’
[17:46:44.041]   - Field: ‘envir’
[17:46:44.041]   - Field: ‘packages’
[17:46:44.041]   - Field: ‘gc’
[17:46:44.041]   - Field: ‘conditions’
[17:46:44.041]   - Field: ‘expr’
[17:46:44.041]   - Field: ‘uuid’
[17:46:44.041]   - Field: ‘seed’
[17:46:44.041]   - Field: ‘version’
[17:46:44.041]   - Field: ‘result’
[17:46:44.041]   - Field: ‘asynchronous’
[17:46:44.042]   - Field: ‘calls’
[17:46:44.042]   - Field: ‘globals’
[17:46:44.042]   - Field: ‘stdout’
[17:46:44.042]   - Field: ‘earlySignal’
[17:46:44.042]   - Field: ‘lazy’
[17:46:44.042]   - Field: ‘state’
[17:46:44.042] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:44.042] - Launch lazy future ...
[17:46:44.042] Packages needed by the future expression (n = 0): <none>
[17:46:44.042] Packages needed by future strategies (n = 0): <none>
[17:46:44.043] {
[17:46:44.043]     {
[17:46:44.043]         {
[17:46:44.043]             ...future.startTime <- base::Sys.time()
[17:46:44.043]             {
[17:46:44.043]                 {
[17:46:44.043]                   {
[17:46:44.043]                     base::local({
[17:46:44.043]                       has_future <- base::requireNamespace("future", 
[17:46:44.043]                         quietly = TRUE)
[17:46:44.043]                       if (has_future) {
[17:46:44.043]                         ns <- base::getNamespace("future")
[17:46:44.043]                         version <- ns[[".package"]][["version"]]
[17:46:44.043]                         if (is.null(version)) 
[17:46:44.043]                           version <- utils::packageVersion("future")
[17:46:44.043]                       }
[17:46:44.043]                       else {
[17:46:44.043]                         version <- NULL
[17:46:44.043]                       }
[17:46:44.043]                       if (!has_future || version < "1.8.0") {
[17:46:44.043]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:44.043]                           "", base::R.version$version.string), 
[17:46:44.043]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:44.043]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:44.043]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:44.043]                             "release", "version")], collapse = " "), 
[17:46:44.043]                           hostname = base::Sys.info()[["nodename"]])
[17:46:44.043]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:44.043]                           info)
[17:46:44.043]                         info <- base::paste(info, collapse = "; ")
[17:46:44.043]                         if (!has_future) {
[17:46:44.043]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:44.043]                             info)
[17:46:44.043]                         }
[17:46:44.043]                         else {
[17:46:44.043]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:44.043]                             info, version)
[17:46:44.043]                         }
[17:46:44.043]                         base::stop(msg)
[17:46:44.043]                       }
[17:46:44.043]                     })
[17:46:44.043]                   }
[17:46:44.043]                   ...future.strategy.old <- future::plan("list")
[17:46:44.043]                   options(future.plan = NULL)
[17:46:44.043]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:44.043]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:44.043]                 }
[17:46:44.043]                 ...future.workdir <- getwd()
[17:46:44.043]             }
[17:46:44.043]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:44.043]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:44.043]         }
[17:46:44.043]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:44.043]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:44.043]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:44.043]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:44.043]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:44.043]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:44.043]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:44.043]             base::names(...future.oldOptions))
[17:46:44.043]     }
[17:46:44.043]     if (FALSE) {
[17:46:44.043]     }
[17:46:44.043]     else {
[17:46:44.043]         if (TRUE) {
[17:46:44.043]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:44.043]                 open = "w")
[17:46:44.043]         }
[17:46:44.043]         else {
[17:46:44.043]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:44.043]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:44.043]         }
[17:46:44.043]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:44.043]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:44.043]             base::sink(type = "output", split = FALSE)
[17:46:44.043]             base::close(...future.stdout)
[17:46:44.043]         }, add = TRUE)
[17:46:44.043]     }
[17:46:44.043]     ...future.frame <- base::sys.nframe()
[17:46:44.043]     ...future.conditions <- base::list()
[17:46:44.043]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:44.043]     if (FALSE) {
[17:46:44.043]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:44.043]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:44.043]     }
[17:46:44.043]     ...future.result <- base::tryCatch({
[17:46:44.043]         base::withCallingHandlers({
[17:46:44.043]             ...future.value <- base::withVisible(base::local({
[17:46:44.043]                 1
[17:46:44.043]             }))
[17:46:44.043]             future::FutureResult(value = ...future.value$value, 
[17:46:44.043]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:44.043]                   ...future.rng), globalenv = if (FALSE) 
[17:46:44.043]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:44.043]                     ...future.globalenv.names))
[17:46:44.043]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:44.043]         }, condition = base::local({
[17:46:44.043]             c <- base::c
[17:46:44.043]             inherits <- base::inherits
[17:46:44.043]             invokeRestart <- base::invokeRestart
[17:46:44.043]             length <- base::length
[17:46:44.043]             list <- base::list
[17:46:44.043]             seq.int <- base::seq.int
[17:46:44.043]             signalCondition <- base::signalCondition
[17:46:44.043]             sys.calls <- base::sys.calls
[17:46:44.043]             `[[` <- base::`[[`
[17:46:44.043]             `+` <- base::`+`
[17:46:44.043]             `<<-` <- base::`<<-`
[17:46:44.043]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:44.043]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:44.043]                   3L)]
[17:46:44.043]             }
[17:46:44.043]             function(cond) {
[17:46:44.043]                 is_error <- inherits(cond, "error")
[17:46:44.043]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:44.043]                   NULL)
[17:46:44.043]                 if (is_error) {
[17:46:44.043]                   sessionInformation <- function() {
[17:46:44.043]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:44.043]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:44.043]                       search = base::search(), system = base::Sys.info())
[17:46:44.043]                   }
[17:46:44.043]                   ...future.conditions[[length(...future.conditions) + 
[17:46:44.043]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:44.043]                     cond$call), session = sessionInformation(), 
[17:46:44.043]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:44.043]                   signalCondition(cond)
[17:46:44.043]                 }
[17:46:44.043]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:44.043]                 "immediateCondition"))) {
[17:46:44.043]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:44.043]                   ...future.conditions[[length(...future.conditions) + 
[17:46:44.043]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:44.043]                   if (TRUE && !signal) {
[17:46:44.043]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:44.043]                     {
[17:46:44.043]                       inherits <- base::inherits
[17:46:44.043]                       invokeRestart <- base::invokeRestart
[17:46:44.043]                       is.null <- base::is.null
[17:46:44.043]                       muffled <- FALSE
[17:46:44.043]                       if (inherits(cond, "message")) {
[17:46:44.043]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:44.043]                         if (muffled) 
[17:46:44.043]                           invokeRestart("muffleMessage")
[17:46:44.043]                       }
[17:46:44.043]                       else if (inherits(cond, "warning")) {
[17:46:44.043]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:44.043]                         if (muffled) 
[17:46:44.043]                           invokeRestart("muffleWarning")
[17:46:44.043]                       }
[17:46:44.043]                       else if (inherits(cond, "condition")) {
[17:46:44.043]                         if (!is.null(pattern)) {
[17:46:44.043]                           computeRestarts <- base::computeRestarts
[17:46:44.043]                           grepl <- base::grepl
[17:46:44.043]                           restarts <- computeRestarts(cond)
[17:46:44.043]                           for (restart in restarts) {
[17:46:44.043]                             name <- restart$name
[17:46:44.043]                             if (is.null(name)) 
[17:46:44.043]                               next
[17:46:44.043]                             if (!grepl(pattern, name)) 
[17:46:44.043]                               next
[17:46:44.043]                             invokeRestart(restart)
[17:46:44.043]                             muffled <- TRUE
[17:46:44.043]                             break
[17:46:44.043]                           }
[17:46:44.043]                         }
[17:46:44.043]                       }
[17:46:44.043]                       invisible(muffled)
[17:46:44.043]                     }
[17:46:44.043]                     muffleCondition(cond, pattern = "^muffle")
[17:46:44.043]                   }
[17:46:44.043]                 }
[17:46:44.043]                 else {
[17:46:44.043]                   if (TRUE) {
[17:46:44.043]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:44.043]                     {
[17:46:44.043]                       inherits <- base::inherits
[17:46:44.043]                       invokeRestart <- base::invokeRestart
[17:46:44.043]                       is.null <- base::is.null
[17:46:44.043]                       muffled <- FALSE
[17:46:44.043]                       if (inherits(cond, "message")) {
[17:46:44.043]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:44.043]                         if (muffled) 
[17:46:44.043]                           invokeRestart("muffleMessage")
[17:46:44.043]                       }
[17:46:44.043]                       else if (inherits(cond, "warning")) {
[17:46:44.043]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:44.043]                         if (muffled) 
[17:46:44.043]                           invokeRestart("muffleWarning")
[17:46:44.043]                       }
[17:46:44.043]                       else if (inherits(cond, "condition")) {
[17:46:44.043]                         if (!is.null(pattern)) {
[17:46:44.043]                           computeRestarts <- base::computeRestarts
[17:46:44.043]                           grepl <- base::grepl
[17:46:44.043]                           restarts <- computeRestarts(cond)
[17:46:44.043]                           for (restart in restarts) {
[17:46:44.043]                             name <- restart$name
[17:46:44.043]                             if (is.null(name)) 
[17:46:44.043]                               next
[17:46:44.043]                             if (!grepl(pattern, name)) 
[17:46:44.043]                               next
[17:46:44.043]                             invokeRestart(restart)
[17:46:44.043]                             muffled <- TRUE
[17:46:44.043]                             break
[17:46:44.043]                           }
[17:46:44.043]                         }
[17:46:44.043]                       }
[17:46:44.043]                       invisible(muffled)
[17:46:44.043]                     }
[17:46:44.043]                     muffleCondition(cond, pattern = "^muffle")
[17:46:44.043]                   }
[17:46:44.043]                 }
[17:46:44.043]             }
[17:46:44.043]         }))
[17:46:44.043]     }, error = function(ex) {
[17:46:44.043]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:44.043]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:44.043]                 ...future.rng), started = ...future.startTime, 
[17:46:44.043]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:44.043]             version = "1.8"), class = "FutureResult")
[17:46:44.043]     }, finally = {
[17:46:44.043]         if (!identical(...future.workdir, getwd())) 
[17:46:44.043]             setwd(...future.workdir)
[17:46:44.043]         {
[17:46:44.043]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:44.043]                 ...future.oldOptions$nwarnings <- NULL
[17:46:44.043]             }
[17:46:44.043]             base::options(...future.oldOptions)
[17:46:44.043]             if (.Platform$OS.type == "windows") {
[17:46:44.043]                 old_names <- names(...future.oldEnvVars)
[17:46:44.043]                 envs <- base::Sys.getenv()
[17:46:44.043]                 names <- names(envs)
[17:46:44.043]                 common <- intersect(names, old_names)
[17:46:44.043]                 added <- setdiff(names, old_names)
[17:46:44.043]                 removed <- setdiff(old_names, names)
[17:46:44.043]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:44.043]                   envs[common]]
[17:46:44.043]                 NAMES <- toupper(changed)
[17:46:44.043]                 args <- list()
[17:46:44.043]                 for (kk in seq_along(NAMES)) {
[17:46:44.043]                   name <- changed[[kk]]
[17:46:44.043]                   NAME <- NAMES[[kk]]
[17:46:44.043]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:44.043]                     next
[17:46:44.043]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:44.043]                 }
[17:46:44.043]                 NAMES <- toupper(added)
[17:46:44.043]                 for (kk in seq_along(NAMES)) {
[17:46:44.043]                   name <- added[[kk]]
[17:46:44.043]                   NAME <- NAMES[[kk]]
[17:46:44.043]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:44.043]                     next
[17:46:44.043]                   args[[name]] <- ""
[17:46:44.043]                 }
[17:46:44.043]                 NAMES <- toupper(removed)
[17:46:44.043]                 for (kk in seq_along(NAMES)) {
[17:46:44.043]                   name <- removed[[kk]]
[17:46:44.043]                   NAME <- NAMES[[kk]]
[17:46:44.043]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:44.043]                     next
[17:46:44.043]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:44.043]                 }
[17:46:44.043]                 if (length(args) > 0) 
[17:46:44.043]                   base::do.call(base::Sys.setenv, args = args)
[17:46:44.043]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:44.043]             }
[17:46:44.043]             else {
[17:46:44.043]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:44.043]             }
[17:46:44.043]             {
[17:46:44.043]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:44.043]                   0L) {
[17:46:44.043]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:44.043]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:44.043]                   base::options(opts)
[17:46:44.043]                 }
[17:46:44.043]                 {
[17:46:44.043]                   {
[17:46:44.043]                     NULL
[17:46:44.043]                     RNGkind("Mersenne-Twister")
[17:46:44.043]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:44.043]                       inherits = FALSE)
[17:46:44.043]                   }
[17:46:44.043]                   options(future.plan = NULL)
[17:46:44.043]                   if (is.na(NA_character_)) 
[17:46:44.043]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:44.043]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:44.043]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:44.043]                     .init = FALSE)
[17:46:44.043]                 }
[17:46:44.043]             }
[17:46:44.043]         }
[17:46:44.043]     })
[17:46:44.043]     if (TRUE) {
[17:46:44.043]         base::sink(type = "output", split = FALSE)
[17:46:44.043]         if (TRUE) {
[17:46:44.043]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:44.043]         }
[17:46:44.043]         else {
[17:46:44.043]             ...future.result["stdout"] <- base::list(NULL)
[17:46:44.043]         }
[17:46:44.043]         base::close(...future.stdout)
[17:46:44.043]         ...future.stdout <- NULL
[17:46:44.043]     }
[17:46:44.043]     ...future.result$conditions <- ...future.conditions
[17:46:44.043]     ...future.result$finished <- base::Sys.time()
[17:46:44.043]     ...future.result
[17:46:44.043] }
[17:46:44.044] plan(): Setting new future strategy stack:
[17:46:44.045] List of future strategies:
[17:46:44.045] 1. sequential:
[17:46:44.045]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:44.045]    - tweaked: FALSE
[17:46:44.045]    - call: NULL
[17:46:44.045] plan(): nbrOfWorkers() = 1
[17:46:44.046] plan(): Setting new future strategy stack:
[17:46:44.046] List of future strategies:
[17:46:44.046] 1. sequential:
[17:46:44.046]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:44.046]    - tweaked: FALSE
[17:46:44.046]    - call: future::plan("sequential")
[17:46:44.046] plan(): nbrOfWorkers() = 1
[17:46:44.046] SequentialFuture started (and completed)
[17:46:44.046] - Launch lazy future ... done
[17:46:44.047] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 93ccefe3-7123-6e0b-a3b4-e6aff3297615
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 93ccefe3-7123-6e0b-a3b4-e6aff3297615
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'remove') ...
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[17:46:44.048] getGlobalsAndPackages() ...
[17:46:44.048] Searching for globals...
[17:46:44.048] - globals found: [1] ‘{’
[17:46:44.048] Searching for globals ... DONE
[17:46:44.049] Resolving globals: FALSE
[17:46:44.049] 
[17:46:44.049] 
[17:46:44.049] getGlobalsAndPackages() ... DONE
[17:46:44.049] run() for ‘Future’ ...
[17:46:44.049] - state: ‘created’
[17:46:44.049] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:44.050] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:44.050] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:44.050]   - Field: ‘label’
[17:46:44.050]   - Field: ‘local’
[17:46:44.050]   - Field: ‘owner’
[17:46:44.050]   - Field: ‘envir’
[17:46:44.050]   - Field: ‘packages’
[17:46:44.050]   - Field: ‘gc’
[17:46:44.050]   - Field: ‘conditions’
[17:46:44.050]   - Field: ‘expr’
[17:46:44.051]   - Field: ‘uuid’
[17:46:44.051]   - Field: ‘seed’
[17:46:44.051]   - Field: ‘version’
[17:46:44.051]   - Field: ‘result’
[17:46:44.051]   - Field: ‘asynchronous’
[17:46:44.051]   - Field: ‘calls’
[17:46:44.051]   - Field: ‘globals’
[17:46:44.051]   - Field: ‘stdout’
[17:46:44.051]   - Field: ‘earlySignal’
[17:46:44.051]   - Field: ‘lazy’
[17:46:44.051]   - Field: ‘state’
[17:46:44.052] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:44.052] - Launch lazy future ...
[17:46:44.052] Packages needed by the future expression (n = 0): <none>
[17:46:44.052] Packages needed by future strategies (n = 0): <none>
[17:46:44.052] {
[17:46:44.052]     {
[17:46:44.052]         {
[17:46:44.052]             ...future.startTime <- base::Sys.time()
[17:46:44.052]             {
[17:46:44.052]                 {
[17:46:44.052]                   {
[17:46:44.052]                     base::local({
[17:46:44.052]                       has_future <- base::requireNamespace("future", 
[17:46:44.052]                         quietly = TRUE)
[17:46:44.052]                       if (has_future) {
[17:46:44.052]                         ns <- base::getNamespace("future")
[17:46:44.052]                         version <- ns[[".package"]][["version"]]
[17:46:44.052]                         if (is.null(version)) 
[17:46:44.052]                           version <- utils::packageVersion("future")
[17:46:44.052]                       }
[17:46:44.052]                       else {
[17:46:44.052]                         version <- NULL
[17:46:44.052]                       }
[17:46:44.052]                       if (!has_future || version < "1.8.0") {
[17:46:44.052]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:44.052]                           "", base::R.version$version.string), 
[17:46:44.052]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:44.052]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:44.052]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:44.052]                             "release", "version")], collapse = " "), 
[17:46:44.052]                           hostname = base::Sys.info()[["nodename"]])
[17:46:44.052]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:44.052]                           info)
[17:46:44.052]                         info <- base::paste(info, collapse = "; ")
[17:46:44.052]                         if (!has_future) {
[17:46:44.052]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:44.052]                             info)
[17:46:44.052]                         }
[17:46:44.052]                         else {
[17:46:44.052]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:44.052]                             info, version)
[17:46:44.052]                         }
[17:46:44.052]                         base::stop(msg)
[17:46:44.052]                       }
[17:46:44.052]                     })
[17:46:44.052]                   }
[17:46:44.052]                   ...future.strategy.old <- future::plan("list")
[17:46:44.052]                   options(future.plan = NULL)
[17:46:44.052]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:44.052]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:44.052]                 }
[17:46:44.052]                 ...future.workdir <- getwd()
[17:46:44.052]             }
[17:46:44.052]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:44.052]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:44.052]         }
[17:46:44.052]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:44.052]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:44.052]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:44.052]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:44.052]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:44.052]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:44.052]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:44.052]             base::names(...future.oldOptions))
[17:46:44.052]     }
[17:46:44.052]     if (FALSE) {
[17:46:44.052]     }
[17:46:44.052]     else {
[17:46:44.052]         if (TRUE) {
[17:46:44.052]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:44.052]                 open = "w")
[17:46:44.052]         }
[17:46:44.052]         else {
[17:46:44.052]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:44.052]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:44.052]         }
[17:46:44.052]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:44.052]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:44.052]             base::sink(type = "output", split = FALSE)
[17:46:44.052]             base::close(...future.stdout)
[17:46:44.052]         }, add = TRUE)
[17:46:44.052]     }
[17:46:44.052]     ...future.frame <- base::sys.nframe()
[17:46:44.052]     ...future.conditions <- base::list()
[17:46:44.052]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:44.052]     if (FALSE) {
[17:46:44.052]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:44.052]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:44.052]     }
[17:46:44.052]     ...future.result <- base::tryCatch({
[17:46:44.052]         base::withCallingHandlers({
[17:46:44.052]             ...future.value <- base::withVisible(base::local({
[17:46:44.052]                 2
[17:46:44.052]             }))
[17:46:44.052]             future::FutureResult(value = ...future.value$value, 
[17:46:44.052]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:44.052]                   ...future.rng), globalenv = if (FALSE) 
[17:46:44.052]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:44.052]                     ...future.globalenv.names))
[17:46:44.052]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:44.052]         }, condition = base::local({
[17:46:44.052]             c <- base::c
[17:46:44.052]             inherits <- base::inherits
[17:46:44.052]             invokeRestart <- base::invokeRestart
[17:46:44.052]             length <- base::length
[17:46:44.052]             list <- base::list
[17:46:44.052]             seq.int <- base::seq.int
[17:46:44.052]             signalCondition <- base::signalCondition
[17:46:44.052]             sys.calls <- base::sys.calls
[17:46:44.052]             `[[` <- base::`[[`
[17:46:44.052]             `+` <- base::`+`
[17:46:44.052]             `<<-` <- base::`<<-`
[17:46:44.052]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:44.052]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:44.052]                   3L)]
[17:46:44.052]             }
[17:46:44.052]             function(cond) {
[17:46:44.052]                 is_error <- inherits(cond, "error")
[17:46:44.052]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:44.052]                   NULL)
[17:46:44.052]                 if (is_error) {
[17:46:44.052]                   sessionInformation <- function() {
[17:46:44.052]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:44.052]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:44.052]                       search = base::search(), system = base::Sys.info())
[17:46:44.052]                   }
[17:46:44.052]                   ...future.conditions[[length(...future.conditions) + 
[17:46:44.052]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:44.052]                     cond$call), session = sessionInformation(), 
[17:46:44.052]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:44.052]                   signalCondition(cond)
[17:46:44.052]                 }
[17:46:44.052]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:44.052]                 "immediateCondition"))) {
[17:46:44.052]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:44.052]                   ...future.conditions[[length(...future.conditions) + 
[17:46:44.052]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:44.052]                   if (TRUE && !signal) {
[17:46:44.052]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:44.052]                     {
[17:46:44.052]                       inherits <- base::inherits
[17:46:44.052]                       invokeRestart <- base::invokeRestart
[17:46:44.052]                       is.null <- base::is.null
[17:46:44.052]                       muffled <- FALSE
[17:46:44.052]                       if (inherits(cond, "message")) {
[17:46:44.052]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:44.052]                         if (muffled) 
[17:46:44.052]                           invokeRestart("muffleMessage")
[17:46:44.052]                       }
[17:46:44.052]                       else if (inherits(cond, "warning")) {
[17:46:44.052]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:44.052]                         if (muffled) 
[17:46:44.052]                           invokeRestart("muffleWarning")
[17:46:44.052]                       }
[17:46:44.052]                       else if (inherits(cond, "condition")) {
[17:46:44.052]                         if (!is.null(pattern)) {
[17:46:44.052]                           computeRestarts <- base::computeRestarts
[17:46:44.052]                           grepl <- base::grepl
[17:46:44.052]                           restarts <- computeRestarts(cond)
[17:46:44.052]                           for (restart in restarts) {
[17:46:44.052]                             name <- restart$name
[17:46:44.052]                             if (is.null(name)) 
[17:46:44.052]                               next
[17:46:44.052]                             if (!grepl(pattern, name)) 
[17:46:44.052]                               next
[17:46:44.052]                             invokeRestart(restart)
[17:46:44.052]                             muffled <- TRUE
[17:46:44.052]                             break
[17:46:44.052]                           }
[17:46:44.052]                         }
[17:46:44.052]                       }
[17:46:44.052]                       invisible(muffled)
[17:46:44.052]                     }
[17:46:44.052]                     muffleCondition(cond, pattern = "^muffle")
[17:46:44.052]                   }
[17:46:44.052]                 }
[17:46:44.052]                 else {
[17:46:44.052]                   if (TRUE) {
[17:46:44.052]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:44.052]                     {
[17:46:44.052]                       inherits <- base::inherits
[17:46:44.052]                       invokeRestart <- base::invokeRestart
[17:46:44.052]                       is.null <- base::is.null
[17:46:44.052]                       muffled <- FALSE
[17:46:44.052]                       if (inherits(cond, "message")) {
[17:46:44.052]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:44.052]                         if (muffled) 
[17:46:44.052]                           invokeRestart("muffleMessage")
[17:46:44.052]                       }
[17:46:44.052]                       else if (inherits(cond, "warning")) {
[17:46:44.052]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:44.052]                         if (muffled) 
[17:46:44.052]                           invokeRestart("muffleWarning")
[17:46:44.052]                       }
[17:46:44.052]                       else if (inherits(cond, "condition")) {
[17:46:44.052]                         if (!is.null(pattern)) {
[17:46:44.052]                           computeRestarts <- base::computeRestarts
[17:46:44.052]                           grepl <- base::grepl
[17:46:44.052]                           restarts <- computeRestarts(cond)
[17:46:44.052]                           for (restart in restarts) {
[17:46:44.052]                             name <- restart$name
[17:46:44.052]                             if (is.null(name)) 
[17:46:44.052]                               next
[17:46:44.052]                             if (!grepl(pattern, name)) 
[17:46:44.052]                               next
[17:46:44.052]                             invokeRestart(restart)
[17:46:44.052]                             muffled <- TRUE
[17:46:44.052]                             break
[17:46:44.052]                           }
[17:46:44.052]                         }
[17:46:44.052]                       }
[17:46:44.052]                       invisible(muffled)
[17:46:44.052]                     }
[17:46:44.052]                     muffleCondition(cond, pattern = "^muffle")
[17:46:44.052]                   }
[17:46:44.052]                 }
[17:46:44.052]             }
[17:46:44.052]         }))
[17:46:44.052]     }, error = function(ex) {
[17:46:44.052]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:44.052]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:44.052]                 ...future.rng), started = ...future.startTime, 
[17:46:44.052]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:44.052]             version = "1.8"), class = "FutureResult")
[17:46:44.052]     }, finally = {
[17:46:44.052]         if (!identical(...future.workdir, getwd())) 
[17:46:44.052]             setwd(...future.workdir)
[17:46:44.052]         {
[17:46:44.052]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:44.052]                 ...future.oldOptions$nwarnings <- NULL
[17:46:44.052]             }
[17:46:44.052]             base::options(...future.oldOptions)
[17:46:44.052]             if (.Platform$OS.type == "windows") {
[17:46:44.052]                 old_names <- names(...future.oldEnvVars)
[17:46:44.052]                 envs <- base::Sys.getenv()
[17:46:44.052]                 names <- names(envs)
[17:46:44.052]                 common <- intersect(names, old_names)
[17:46:44.052]                 added <- setdiff(names, old_names)
[17:46:44.052]                 removed <- setdiff(old_names, names)
[17:46:44.052]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:44.052]                   envs[common]]
[17:46:44.052]                 NAMES <- toupper(changed)
[17:46:44.052]                 args <- list()
[17:46:44.052]                 for (kk in seq_along(NAMES)) {
[17:46:44.052]                   name <- changed[[kk]]
[17:46:44.052]                   NAME <- NAMES[[kk]]
[17:46:44.052]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:44.052]                     next
[17:46:44.052]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:44.052]                 }
[17:46:44.052]                 NAMES <- toupper(added)
[17:46:44.052]                 for (kk in seq_along(NAMES)) {
[17:46:44.052]                   name <- added[[kk]]
[17:46:44.052]                   NAME <- NAMES[[kk]]
[17:46:44.052]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:44.052]                     next
[17:46:44.052]                   args[[name]] <- ""
[17:46:44.052]                 }
[17:46:44.052]                 NAMES <- toupper(removed)
[17:46:44.052]                 for (kk in seq_along(NAMES)) {
[17:46:44.052]                   name <- removed[[kk]]
[17:46:44.052]                   NAME <- NAMES[[kk]]
[17:46:44.052]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:44.052]                     next
[17:46:44.052]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:44.052]                 }
[17:46:44.052]                 if (length(args) > 0) 
[17:46:44.052]                   base::do.call(base::Sys.setenv, args = args)
[17:46:44.052]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:44.052]             }
[17:46:44.052]             else {
[17:46:44.052]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:44.052]             }
[17:46:44.052]             {
[17:46:44.052]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:44.052]                   0L) {
[17:46:44.052]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:44.052]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:44.052]                   base::options(opts)
[17:46:44.052]                 }
[17:46:44.052]                 {
[17:46:44.052]                   {
[17:46:44.052]                     NULL
[17:46:44.052]                     RNGkind("Mersenne-Twister")
[17:46:44.052]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:44.052]                       inherits = FALSE)
[17:46:44.052]                   }
[17:46:44.052]                   options(future.plan = NULL)
[17:46:44.052]                   if (is.na(NA_character_)) 
[17:46:44.052]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:44.052]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:44.052]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:44.052]                     .init = FALSE)
[17:46:44.052]                 }
[17:46:44.052]             }
[17:46:44.052]         }
[17:46:44.052]     })
[17:46:44.052]     if (TRUE) {
[17:46:44.052]         base::sink(type = "output", split = FALSE)
[17:46:44.052]         if (TRUE) {
[17:46:44.052]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:44.052]         }
[17:46:44.052]         else {
[17:46:44.052]             ...future.result["stdout"] <- base::list(NULL)
[17:46:44.052]         }
[17:46:44.052]         base::close(...future.stdout)
[17:46:44.052]         ...future.stdout <- NULL
[17:46:44.052]     }
[17:46:44.052]     ...future.result$conditions <- ...future.conditions
[17:46:44.052]     ...future.result$finished <- base::Sys.time()
[17:46:44.052]     ...future.result
[17:46:44.052] }
[17:46:44.054] plan(): Setting new future strategy stack:
[17:46:44.054] List of future strategies:
[17:46:44.054] 1. sequential:
[17:46:44.054]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:44.054]    - tweaked: FALSE
[17:46:44.054]    - call: NULL
[17:46:44.054] plan(): nbrOfWorkers() = 1
[17:46:44.055] plan(): Setting new future strategy stack:
[17:46:44.055] List of future strategies:
[17:46:44.055] 1. sequential:
[17:46:44.055]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:44.055]    - tweaked: FALSE
[17:46:44.055]    - call: future::plan("sequential")
[17:46:44.056] plan(): nbrOfWorkers() = 1
[17:46:44.056] SequentialFuture started (and completed)
[17:46:44.056] - Launch lazy future ... done
[17:46:44.056] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 93ccefe3-7123-6e0b-a3b4-e6aff3297615
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 93ccefe3-7123-6e0b-a3b4-e6aff3297615
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'collect-first') ...
[17:46:44.065] resolved() for ‘SequentialFuture’ ...
[17:46:44.065] - state: ‘finished’
[17:46:44.065] - run: FALSE
[17:46:44.065] - result: ‘FutureResult’
[17:46:44.065] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('rscript', 'add') ...
[17:46:44.066] getGlobalsAndPackages() ...
[17:46:44.066] Searching for globals...
[17:46:44.066] - globals found: [1] ‘{’
[17:46:44.066] Searching for globals ... DONE
[17:46:44.066] Resolving globals: FALSE
[17:46:44.067] 
[17:46:44.067] 
[17:46:44.067] getGlobalsAndPackages() ... DONE
[17:46:44.067] run() for ‘Future’ ...
[17:46:44.067] - state: ‘created’
[17:46:44.067] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:44.068] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:44.068] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:44.068]   - Field: ‘label’
[17:46:44.068]   - Field: ‘local’
[17:46:44.068]   - Field: ‘owner’
[17:46:44.068]   - Field: ‘envir’
[17:46:44.068]   - Field: ‘packages’
[17:46:44.068]   - Field: ‘gc’
[17:46:44.068]   - Field: ‘conditions’
[17:46:44.068]   - Field: ‘expr’
[17:46:44.068]   - Field: ‘uuid’
[17:46:44.069]   - Field: ‘seed’
[17:46:44.069]   - Field: ‘version’
[17:46:44.069]   - Field: ‘result’
[17:46:44.069]   - Field: ‘asynchronous’
[17:46:44.069]   - Field: ‘calls’
[17:46:44.069]   - Field: ‘globals’
[17:46:44.069]   - Field: ‘stdout’
[17:46:44.069]   - Field: ‘earlySignal’
[17:46:44.071]   - Field: ‘lazy’
[17:46:44.071]   - Field: ‘state’
[17:46:44.071] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:44.071] - Launch lazy future ...
[17:46:44.071] Packages needed by the future expression (n = 0): <none>
[17:46:44.072] Packages needed by future strategies (n = 0): <none>
[17:46:44.072] {
[17:46:44.072]     {
[17:46:44.072]         {
[17:46:44.072]             ...future.startTime <- base::Sys.time()
[17:46:44.072]             {
[17:46:44.072]                 {
[17:46:44.072]                   {
[17:46:44.072]                     base::local({
[17:46:44.072]                       has_future <- base::requireNamespace("future", 
[17:46:44.072]                         quietly = TRUE)
[17:46:44.072]                       if (has_future) {
[17:46:44.072]                         ns <- base::getNamespace("future")
[17:46:44.072]                         version <- ns[[".package"]][["version"]]
[17:46:44.072]                         if (is.null(version)) 
[17:46:44.072]                           version <- utils::packageVersion("future")
[17:46:44.072]                       }
[17:46:44.072]                       else {
[17:46:44.072]                         version <- NULL
[17:46:44.072]                       }
[17:46:44.072]                       if (!has_future || version < "1.8.0") {
[17:46:44.072]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:44.072]                           "", base::R.version$version.string), 
[17:46:44.072]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:44.072]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:44.072]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:44.072]                             "release", "version")], collapse = " "), 
[17:46:44.072]                           hostname = base::Sys.info()[["nodename"]])
[17:46:44.072]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:44.072]                           info)
[17:46:44.072]                         info <- base::paste(info, collapse = "; ")
[17:46:44.072]                         if (!has_future) {
[17:46:44.072]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:44.072]                             info)
[17:46:44.072]                         }
[17:46:44.072]                         else {
[17:46:44.072]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:44.072]                             info, version)
[17:46:44.072]                         }
[17:46:44.072]                         base::stop(msg)
[17:46:44.072]                       }
[17:46:44.072]                     })
[17:46:44.072]                   }
[17:46:44.072]                   ...future.strategy.old <- future::plan("list")
[17:46:44.072]                   options(future.plan = NULL)
[17:46:44.072]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:44.072]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:44.072]                 }
[17:46:44.072]                 ...future.workdir <- getwd()
[17:46:44.072]             }
[17:46:44.072]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:44.072]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:44.072]         }
[17:46:44.072]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:44.072]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:44.072]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:44.072]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:44.072]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:44.072]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:44.072]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:44.072]             base::names(...future.oldOptions))
[17:46:44.072]     }
[17:46:44.072]     if (FALSE) {
[17:46:44.072]     }
[17:46:44.072]     else {
[17:46:44.072]         if (TRUE) {
[17:46:44.072]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:44.072]                 open = "w")
[17:46:44.072]         }
[17:46:44.072]         else {
[17:46:44.072]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:44.072]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:44.072]         }
[17:46:44.072]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:44.072]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:44.072]             base::sink(type = "output", split = FALSE)
[17:46:44.072]             base::close(...future.stdout)
[17:46:44.072]         }, add = TRUE)
[17:46:44.072]     }
[17:46:44.072]     ...future.frame <- base::sys.nframe()
[17:46:44.072]     ...future.conditions <- base::list()
[17:46:44.072]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:44.072]     if (FALSE) {
[17:46:44.072]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:44.072]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:44.072]     }
[17:46:44.072]     ...future.result <- base::tryCatch({
[17:46:44.072]         base::withCallingHandlers({
[17:46:44.072]             ...future.value <- base::withVisible(base::local({
[17:46:44.072]                 2
[17:46:44.072]             }))
[17:46:44.072]             future::FutureResult(value = ...future.value$value, 
[17:46:44.072]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:44.072]                   ...future.rng), globalenv = if (FALSE) 
[17:46:44.072]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:44.072]                     ...future.globalenv.names))
[17:46:44.072]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:44.072]         }, condition = base::local({
[17:46:44.072]             c <- base::c
[17:46:44.072]             inherits <- base::inherits
[17:46:44.072]             invokeRestart <- base::invokeRestart
[17:46:44.072]             length <- base::length
[17:46:44.072]             list <- base::list
[17:46:44.072]             seq.int <- base::seq.int
[17:46:44.072]             signalCondition <- base::signalCondition
[17:46:44.072]             sys.calls <- base::sys.calls
[17:46:44.072]             `[[` <- base::`[[`
[17:46:44.072]             `+` <- base::`+`
[17:46:44.072]             `<<-` <- base::`<<-`
[17:46:44.072]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:44.072]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:44.072]                   3L)]
[17:46:44.072]             }
[17:46:44.072]             function(cond) {
[17:46:44.072]                 is_error <- inherits(cond, "error")
[17:46:44.072]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:44.072]                   NULL)
[17:46:44.072]                 if (is_error) {
[17:46:44.072]                   sessionInformation <- function() {
[17:46:44.072]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:44.072]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:44.072]                       search = base::search(), system = base::Sys.info())
[17:46:44.072]                   }
[17:46:44.072]                   ...future.conditions[[length(...future.conditions) + 
[17:46:44.072]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:44.072]                     cond$call), session = sessionInformation(), 
[17:46:44.072]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:44.072]                   signalCondition(cond)
[17:46:44.072]                 }
[17:46:44.072]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:44.072]                 "immediateCondition"))) {
[17:46:44.072]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:44.072]                   ...future.conditions[[length(...future.conditions) + 
[17:46:44.072]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:44.072]                   if (TRUE && !signal) {
[17:46:44.072]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:44.072]                     {
[17:46:44.072]                       inherits <- base::inherits
[17:46:44.072]                       invokeRestart <- base::invokeRestart
[17:46:44.072]                       is.null <- base::is.null
[17:46:44.072]                       muffled <- FALSE
[17:46:44.072]                       if (inherits(cond, "message")) {
[17:46:44.072]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:44.072]                         if (muffled) 
[17:46:44.072]                           invokeRestart("muffleMessage")
[17:46:44.072]                       }
[17:46:44.072]                       else if (inherits(cond, "warning")) {
[17:46:44.072]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:44.072]                         if (muffled) 
[17:46:44.072]                           invokeRestart("muffleWarning")
[17:46:44.072]                       }
[17:46:44.072]                       else if (inherits(cond, "condition")) {
[17:46:44.072]                         if (!is.null(pattern)) {
[17:46:44.072]                           computeRestarts <- base::computeRestarts
[17:46:44.072]                           grepl <- base::grepl
[17:46:44.072]                           restarts <- computeRestarts(cond)
[17:46:44.072]                           for (restart in restarts) {
[17:46:44.072]                             name <- restart$name
[17:46:44.072]                             if (is.null(name)) 
[17:46:44.072]                               next
[17:46:44.072]                             if (!grepl(pattern, name)) 
[17:46:44.072]                               next
[17:46:44.072]                             invokeRestart(restart)
[17:46:44.072]                             muffled <- TRUE
[17:46:44.072]                             break
[17:46:44.072]                           }
[17:46:44.072]                         }
[17:46:44.072]                       }
[17:46:44.072]                       invisible(muffled)
[17:46:44.072]                     }
[17:46:44.072]                     muffleCondition(cond, pattern = "^muffle")
[17:46:44.072]                   }
[17:46:44.072]                 }
[17:46:44.072]                 else {
[17:46:44.072]                   if (TRUE) {
[17:46:44.072]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:44.072]                     {
[17:46:44.072]                       inherits <- base::inherits
[17:46:44.072]                       invokeRestart <- base::invokeRestart
[17:46:44.072]                       is.null <- base::is.null
[17:46:44.072]                       muffled <- FALSE
[17:46:44.072]                       if (inherits(cond, "message")) {
[17:46:44.072]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:44.072]                         if (muffled) 
[17:46:44.072]                           invokeRestart("muffleMessage")
[17:46:44.072]                       }
[17:46:44.072]                       else if (inherits(cond, "warning")) {
[17:46:44.072]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:44.072]                         if (muffled) 
[17:46:44.072]                           invokeRestart("muffleWarning")
[17:46:44.072]                       }
[17:46:44.072]                       else if (inherits(cond, "condition")) {
[17:46:44.072]                         if (!is.null(pattern)) {
[17:46:44.072]                           computeRestarts <- base::computeRestarts
[17:46:44.072]                           grepl <- base::grepl
[17:46:44.072]                           restarts <- computeRestarts(cond)
[17:46:44.072]                           for (restart in restarts) {
[17:46:44.072]                             name <- restart$name
[17:46:44.072]                             if (is.null(name)) 
[17:46:44.072]                               next
[17:46:44.072]                             if (!grepl(pattern, name)) 
[17:46:44.072]                               next
[17:46:44.072]                             invokeRestart(restart)
[17:46:44.072]                             muffled <- TRUE
[17:46:44.072]                             break
[17:46:44.072]                           }
[17:46:44.072]                         }
[17:46:44.072]                       }
[17:46:44.072]                       invisible(muffled)
[17:46:44.072]                     }
[17:46:44.072]                     muffleCondition(cond, pattern = "^muffle")
[17:46:44.072]                   }
[17:46:44.072]                 }
[17:46:44.072]             }
[17:46:44.072]         }))
[17:46:44.072]     }, error = function(ex) {
[17:46:44.072]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:44.072]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:44.072]                 ...future.rng), started = ...future.startTime, 
[17:46:44.072]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:44.072]             version = "1.8"), class = "FutureResult")
[17:46:44.072]     }, finally = {
[17:46:44.072]         if (!identical(...future.workdir, getwd())) 
[17:46:44.072]             setwd(...future.workdir)
[17:46:44.072]         {
[17:46:44.072]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:44.072]                 ...future.oldOptions$nwarnings <- NULL
[17:46:44.072]             }
[17:46:44.072]             base::options(...future.oldOptions)
[17:46:44.072]             if (.Platform$OS.type == "windows") {
[17:46:44.072]                 old_names <- names(...future.oldEnvVars)
[17:46:44.072]                 envs <- base::Sys.getenv()
[17:46:44.072]                 names <- names(envs)
[17:46:44.072]                 common <- intersect(names, old_names)
[17:46:44.072]                 added <- setdiff(names, old_names)
[17:46:44.072]                 removed <- setdiff(old_names, names)
[17:46:44.072]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:44.072]                   envs[common]]
[17:46:44.072]                 NAMES <- toupper(changed)
[17:46:44.072]                 args <- list()
[17:46:44.072]                 for (kk in seq_along(NAMES)) {
[17:46:44.072]                   name <- changed[[kk]]
[17:46:44.072]                   NAME <- NAMES[[kk]]
[17:46:44.072]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:44.072]                     next
[17:46:44.072]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:44.072]                 }
[17:46:44.072]                 NAMES <- toupper(added)
[17:46:44.072]                 for (kk in seq_along(NAMES)) {
[17:46:44.072]                   name <- added[[kk]]
[17:46:44.072]                   NAME <- NAMES[[kk]]
[17:46:44.072]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:44.072]                     next
[17:46:44.072]                   args[[name]] <- ""
[17:46:44.072]                 }
[17:46:44.072]                 NAMES <- toupper(removed)
[17:46:44.072]                 for (kk in seq_along(NAMES)) {
[17:46:44.072]                   name <- removed[[kk]]
[17:46:44.072]                   NAME <- NAMES[[kk]]
[17:46:44.072]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:44.072]                     next
[17:46:44.072]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:44.072]                 }
[17:46:44.072]                 if (length(args) > 0) 
[17:46:44.072]                   base::do.call(base::Sys.setenv, args = args)
[17:46:44.072]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:44.072]             }
[17:46:44.072]             else {
[17:46:44.072]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:44.072]             }
[17:46:44.072]             {
[17:46:44.072]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:44.072]                   0L) {
[17:46:44.072]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:44.072]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:44.072]                   base::options(opts)
[17:46:44.072]                 }
[17:46:44.072]                 {
[17:46:44.072]                   {
[17:46:44.072]                     NULL
[17:46:44.072]                     RNGkind("Mersenne-Twister")
[17:46:44.072]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:44.072]                       inherits = FALSE)
[17:46:44.072]                   }
[17:46:44.072]                   options(future.plan = NULL)
[17:46:44.072]                   if (is.na(NA_character_)) 
[17:46:44.072]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:44.072]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:44.072]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:44.072]                     .init = FALSE)
[17:46:44.072]                 }
[17:46:44.072]             }
[17:46:44.072]         }
[17:46:44.072]     })
[17:46:44.072]     if (TRUE) {
[17:46:44.072]         base::sink(type = "output", split = FALSE)
[17:46:44.072]         if (TRUE) {
[17:46:44.072]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:44.072]         }
[17:46:44.072]         else {
[17:46:44.072]             ...future.result["stdout"] <- base::list(NULL)
[17:46:44.072]         }
[17:46:44.072]         base::close(...future.stdout)
[17:46:44.072]         ...future.stdout <- NULL
[17:46:44.072]     }
[17:46:44.072]     ...future.result$conditions <- ...future.conditions
[17:46:44.072]     ...future.result$finished <- base::Sys.time()
[17:46:44.072]     ...future.result
[17:46:44.072] }
[17:46:44.074] plan(): Setting new future strategy stack:
[17:46:44.074] List of future strategies:
[17:46:44.074] 1. sequential:
[17:46:44.074]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:44.074]    - tweaked: FALSE
[17:46:44.074]    - call: NULL
[17:46:44.074] plan(): nbrOfWorkers() = 1
[17:46:44.075] plan(): Setting new future strategy stack:
[17:46:44.075] List of future strategies:
[17:46:44.075] 1. sequential:
[17:46:44.075]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:44.075]    - tweaked: FALSE
[17:46:44.075]    - call: future::plan("sequential")
[17:46:44.075] plan(): nbrOfWorkers() = 1
[17:46:44.076] SequentialFuture started (and completed)
[17:46:44.076] - Launch lazy future ... done
[17:46:44.076] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 93ccefe3-7123-6e0b-a3b4-e6aff3297615
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'reset') ...
*** FutureRegistry('rscript', 'list') ...
list()
> 
> 
> message("*** FutureRegistry() - exceptions ...")
*** FutureRegistry() - exceptions ...
> 
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> f <- future(1)
[17:46:44.077] getGlobalsAndPackages() ...
[17:46:44.077] Searching for globals...
[17:46:44.077] 
[17:46:44.077] Searching for globals ... DONE
[17:46:44.077] - globals: [0] <none>
[17:46:44.077] getGlobalsAndPackages() ... DONE
[17:46:44.077] run() for ‘Future’ ...
[17:46:44.078] - state: ‘created’
[17:46:44.078] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:44.078] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:44.078] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:44.078]   - Field: ‘label’
[17:46:44.078]   - Field: ‘local’
[17:46:44.078]   - Field: ‘owner’
[17:46:44.078]   - Field: ‘envir’
[17:46:44.078]   - Field: ‘packages’
[17:46:44.079]   - Field: ‘gc’
[17:46:44.079]   - Field: ‘conditions’
[17:46:44.079]   - Field: ‘expr’
[17:46:44.079]   - Field: ‘uuid’
[17:46:44.079]   - Field: ‘seed’
[17:46:44.079]   - Field: ‘version’
[17:46:44.079]   - Field: ‘result’
[17:46:44.079]   - Field: ‘asynchronous’
[17:46:44.079]   - Field: ‘calls’
[17:46:44.079]   - Field: ‘globals’
[17:46:44.079]   - Field: ‘stdout’
[17:46:44.080]   - Field: ‘earlySignal’
[17:46:44.080]   - Field: ‘lazy’
[17:46:44.080]   - Field: ‘state’
[17:46:44.080] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:44.080] - Launch lazy future ...
[17:46:44.080] Packages needed by the future expression (n = 0): <none>
[17:46:44.080] Packages needed by future strategies (n = 0): <none>
[17:46:44.081] {
[17:46:44.081]     {
[17:46:44.081]         {
[17:46:44.081]             ...future.startTime <- base::Sys.time()
[17:46:44.081]             {
[17:46:44.081]                 {
[17:46:44.081]                   {
[17:46:44.081]                     base::local({
[17:46:44.081]                       has_future <- base::requireNamespace("future", 
[17:46:44.081]                         quietly = TRUE)
[17:46:44.081]                       if (has_future) {
[17:46:44.081]                         ns <- base::getNamespace("future")
[17:46:44.081]                         version <- ns[[".package"]][["version"]]
[17:46:44.081]                         if (is.null(version)) 
[17:46:44.081]                           version <- utils::packageVersion("future")
[17:46:44.081]                       }
[17:46:44.081]                       else {
[17:46:44.081]                         version <- NULL
[17:46:44.081]                       }
[17:46:44.081]                       if (!has_future || version < "1.8.0") {
[17:46:44.081]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:44.081]                           "", base::R.version$version.string), 
[17:46:44.081]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:44.081]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:44.081]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:44.081]                             "release", "version")], collapse = " "), 
[17:46:44.081]                           hostname = base::Sys.info()[["nodename"]])
[17:46:44.081]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:44.081]                           info)
[17:46:44.081]                         info <- base::paste(info, collapse = "; ")
[17:46:44.081]                         if (!has_future) {
[17:46:44.081]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:44.081]                             info)
[17:46:44.081]                         }
[17:46:44.081]                         else {
[17:46:44.081]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:44.081]                             info, version)
[17:46:44.081]                         }
[17:46:44.081]                         base::stop(msg)
[17:46:44.081]                       }
[17:46:44.081]                     })
[17:46:44.081]                   }
[17:46:44.081]                   ...future.strategy.old <- future::plan("list")
[17:46:44.081]                   options(future.plan = NULL)
[17:46:44.081]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:44.081]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:44.081]                 }
[17:46:44.081]                 ...future.workdir <- getwd()
[17:46:44.081]             }
[17:46:44.081]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:44.081]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:44.081]         }
[17:46:44.081]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:44.081]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:44.081]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:44.081]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:44.081]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:44.081]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:44.081]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:44.081]             base::names(...future.oldOptions))
[17:46:44.081]     }
[17:46:44.081]     if (FALSE) {
[17:46:44.081]     }
[17:46:44.081]     else {
[17:46:44.081]         if (TRUE) {
[17:46:44.081]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:44.081]                 open = "w")
[17:46:44.081]         }
[17:46:44.081]         else {
[17:46:44.081]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:44.081]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:44.081]         }
[17:46:44.081]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:44.081]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:44.081]             base::sink(type = "output", split = FALSE)
[17:46:44.081]             base::close(...future.stdout)
[17:46:44.081]         }, add = TRUE)
[17:46:44.081]     }
[17:46:44.081]     ...future.frame <- base::sys.nframe()
[17:46:44.081]     ...future.conditions <- base::list()
[17:46:44.081]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:44.081]     if (FALSE) {
[17:46:44.081]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:44.081]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:44.081]     }
[17:46:44.081]     ...future.result <- base::tryCatch({
[17:46:44.081]         base::withCallingHandlers({
[17:46:44.081]             ...future.value <- base::withVisible(base::local(1))
[17:46:44.081]             future::FutureResult(value = ...future.value$value, 
[17:46:44.081]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:44.081]                   ...future.rng), globalenv = if (FALSE) 
[17:46:44.081]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:44.081]                     ...future.globalenv.names))
[17:46:44.081]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:44.081]         }, condition = base::local({
[17:46:44.081]             c <- base::c
[17:46:44.081]             inherits <- base::inherits
[17:46:44.081]             invokeRestart <- base::invokeRestart
[17:46:44.081]             length <- base::length
[17:46:44.081]             list <- base::list
[17:46:44.081]             seq.int <- base::seq.int
[17:46:44.081]             signalCondition <- base::signalCondition
[17:46:44.081]             sys.calls <- base::sys.calls
[17:46:44.081]             `[[` <- base::`[[`
[17:46:44.081]             `+` <- base::`+`
[17:46:44.081]             `<<-` <- base::`<<-`
[17:46:44.081]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:44.081]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:44.081]                   3L)]
[17:46:44.081]             }
[17:46:44.081]             function(cond) {
[17:46:44.081]                 is_error <- inherits(cond, "error")
[17:46:44.081]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:44.081]                   NULL)
[17:46:44.081]                 if (is_error) {
[17:46:44.081]                   sessionInformation <- function() {
[17:46:44.081]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:44.081]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:44.081]                       search = base::search(), system = base::Sys.info())
[17:46:44.081]                   }
[17:46:44.081]                   ...future.conditions[[length(...future.conditions) + 
[17:46:44.081]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:44.081]                     cond$call), session = sessionInformation(), 
[17:46:44.081]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:44.081]                   signalCondition(cond)
[17:46:44.081]                 }
[17:46:44.081]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:44.081]                 "immediateCondition"))) {
[17:46:44.081]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:44.081]                   ...future.conditions[[length(...future.conditions) + 
[17:46:44.081]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:44.081]                   if (TRUE && !signal) {
[17:46:44.081]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:44.081]                     {
[17:46:44.081]                       inherits <- base::inherits
[17:46:44.081]                       invokeRestart <- base::invokeRestart
[17:46:44.081]                       is.null <- base::is.null
[17:46:44.081]                       muffled <- FALSE
[17:46:44.081]                       if (inherits(cond, "message")) {
[17:46:44.081]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:44.081]                         if (muffled) 
[17:46:44.081]                           invokeRestart("muffleMessage")
[17:46:44.081]                       }
[17:46:44.081]                       else if (inherits(cond, "warning")) {
[17:46:44.081]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:44.081]                         if (muffled) 
[17:46:44.081]                           invokeRestart("muffleWarning")
[17:46:44.081]                       }
[17:46:44.081]                       else if (inherits(cond, "condition")) {
[17:46:44.081]                         if (!is.null(pattern)) {
[17:46:44.081]                           computeRestarts <- base::computeRestarts
[17:46:44.081]                           grepl <- base::grepl
[17:46:44.081]                           restarts <- computeRestarts(cond)
[17:46:44.081]                           for (restart in restarts) {
[17:46:44.081]                             name <- restart$name
[17:46:44.081]                             if (is.null(name)) 
[17:46:44.081]                               next
[17:46:44.081]                             if (!grepl(pattern, name)) 
[17:46:44.081]                               next
[17:46:44.081]                             invokeRestart(restart)
[17:46:44.081]                             muffled <- TRUE
[17:46:44.081]                             break
[17:46:44.081]                           }
[17:46:44.081]                         }
[17:46:44.081]                       }
[17:46:44.081]                       invisible(muffled)
[17:46:44.081]                     }
[17:46:44.081]                     muffleCondition(cond, pattern = "^muffle")
[17:46:44.081]                   }
[17:46:44.081]                 }
[17:46:44.081]                 else {
[17:46:44.081]                   if (TRUE) {
[17:46:44.081]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:44.081]                     {
[17:46:44.081]                       inherits <- base::inherits
[17:46:44.081]                       invokeRestart <- base::invokeRestart
[17:46:44.081]                       is.null <- base::is.null
[17:46:44.081]                       muffled <- FALSE
[17:46:44.081]                       if (inherits(cond, "message")) {
[17:46:44.081]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:44.081]                         if (muffled) 
[17:46:44.081]                           invokeRestart("muffleMessage")
[17:46:44.081]                       }
[17:46:44.081]                       else if (inherits(cond, "warning")) {
[17:46:44.081]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:44.081]                         if (muffled) 
[17:46:44.081]                           invokeRestart("muffleWarning")
[17:46:44.081]                       }
[17:46:44.081]                       else if (inherits(cond, "condition")) {
[17:46:44.081]                         if (!is.null(pattern)) {
[17:46:44.081]                           computeRestarts <- base::computeRestarts
[17:46:44.081]                           grepl <- base::grepl
[17:46:44.081]                           restarts <- computeRestarts(cond)
[17:46:44.081]                           for (restart in restarts) {
[17:46:44.081]                             name <- restart$name
[17:46:44.081]                             if (is.null(name)) 
[17:46:44.081]                               next
[17:46:44.081]                             if (!grepl(pattern, name)) 
[17:46:44.081]                               next
[17:46:44.081]                             invokeRestart(restart)
[17:46:44.081]                             muffled <- TRUE
[17:46:44.081]                             break
[17:46:44.081]                           }
[17:46:44.081]                         }
[17:46:44.081]                       }
[17:46:44.081]                       invisible(muffled)
[17:46:44.081]                     }
[17:46:44.081]                     muffleCondition(cond, pattern = "^muffle")
[17:46:44.081]                   }
[17:46:44.081]                 }
[17:46:44.081]             }
[17:46:44.081]         }))
[17:46:44.081]     }, error = function(ex) {
[17:46:44.081]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:44.081]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:44.081]                 ...future.rng), started = ...future.startTime, 
[17:46:44.081]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:44.081]             version = "1.8"), class = "FutureResult")
[17:46:44.081]     }, finally = {
[17:46:44.081]         if (!identical(...future.workdir, getwd())) 
[17:46:44.081]             setwd(...future.workdir)
[17:46:44.081]         {
[17:46:44.081]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:44.081]                 ...future.oldOptions$nwarnings <- NULL
[17:46:44.081]             }
[17:46:44.081]             base::options(...future.oldOptions)
[17:46:44.081]             if (.Platform$OS.type == "windows") {
[17:46:44.081]                 old_names <- names(...future.oldEnvVars)
[17:46:44.081]                 envs <- base::Sys.getenv()
[17:46:44.081]                 names <- names(envs)
[17:46:44.081]                 common <- intersect(names, old_names)
[17:46:44.081]                 added <- setdiff(names, old_names)
[17:46:44.081]                 removed <- setdiff(old_names, names)
[17:46:44.081]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:44.081]                   envs[common]]
[17:46:44.081]                 NAMES <- toupper(changed)
[17:46:44.081]                 args <- list()
[17:46:44.081]                 for (kk in seq_along(NAMES)) {
[17:46:44.081]                   name <- changed[[kk]]
[17:46:44.081]                   NAME <- NAMES[[kk]]
[17:46:44.081]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:44.081]                     next
[17:46:44.081]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:44.081]                 }
[17:46:44.081]                 NAMES <- toupper(added)
[17:46:44.081]                 for (kk in seq_along(NAMES)) {
[17:46:44.081]                   name <- added[[kk]]
[17:46:44.081]                   NAME <- NAMES[[kk]]
[17:46:44.081]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:44.081]                     next
[17:46:44.081]                   args[[name]] <- ""
[17:46:44.081]                 }
[17:46:44.081]                 NAMES <- toupper(removed)
[17:46:44.081]                 for (kk in seq_along(NAMES)) {
[17:46:44.081]                   name <- removed[[kk]]
[17:46:44.081]                   NAME <- NAMES[[kk]]
[17:46:44.081]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:44.081]                     next
[17:46:44.081]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:44.081]                 }
[17:46:44.081]                 if (length(args) > 0) 
[17:46:44.081]                   base::do.call(base::Sys.setenv, args = args)
[17:46:44.081]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:44.081]             }
[17:46:44.081]             else {
[17:46:44.081]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:44.081]             }
[17:46:44.081]             {
[17:46:44.081]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:44.081]                   0L) {
[17:46:44.081]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:44.081]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:44.081]                   base::options(opts)
[17:46:44.081]                 }
[17:46:44.081]                 {
[17:46:44.081]                   {
[17:46:44.081]                     NULL
[17:46:44.081]                     RNGkind("Mersenne-Twister")
[17:46:44.081]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:44.081]                       inherits = FALSE)
[17:46:44.081]                   }
[17:46:44.081]                   options(future.plan = NULL)
[17:46:44.081]                   if (is.na(NA_character_)) 
[17:46:44.081]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:44.081]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:44.081]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:44.081]                     .init = FALSE)
[17:46:44.081]                 }
[17:46:44.081]             }
[17:46:44.081]         }
[17:46:44.081]     })
[17:46:44.081]     if (TRUE) {
[17:46:44.081]         base::sink(type = "output", split = FALSE)
[17:46:44.081]         if (TRUE) {
[17:46:44.081]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:44.081]         }
[17:46:44.081]         else {
[17:46:44.081]             ...future.result["stdout"] <- base::list(NULL)
[17:46:44.081]         }
[17:46:44.081]         base::close(...future.stdout)
[17:46:44.081]         ...future.stdout <- NULL
[17:46:44.081]     }
[17:46:44.081]     ...future.result$conditions <- ...future.conditions
[17:46:44.081]     ...future.result$finished <- base::Sys.time()
[17:46:44.081]     ...future.result
[17:46:44.081] }
[17:46:44.082] plan(): Setting new future strategy stack:
[17:46:44.082] List of future strategies:
[17:46:44.082] 1. sequential:
[17:46:44.082]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:44.082]    - tweaked: FALSE
[17:46:44.082]    - call: NULL
[17:46:44.083] plan(): nbrOfWorkers() = 1
[17:46:44.084] plan(): Setting new future strategy stack:
[17:46:44.084] List of future strategies:
[17:46:44.084] 1. sequential:
[17:46:44.084]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:44.084]    - tweaked: FALSE
[17:46:44.084]    - call: future::plan("sequential")
[17:46:44.084] plan(): nbrOfWorkers() = 1
[17:46:44.084] SequentialFuture started (and completed)
[17:46:44.084] - Launch lazy future ... done
[17:46:44.084] run() for ‘SequentialFuture’ ... done
> FutureRegistry(where = "test", action = "add", future = f)
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 1
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 93ccefe3-7123-6e0b-a3b4-e6aff3297615
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "add", future = f), error = identity)
[17:46:44.085] ERROR: Cannot add to ‘test’ registry. SequentialFuture is already registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> 
> FutureRegistry(where = "test", action = "remove", future = f)
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "remove", future = f), error = identity)
[17:46:44.085] ERROR: Cannot remove from ‘test’ registry. SequentialFuture not registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> FutureRegistry(where = "test", action = "reset")
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "<unknown>"), error = identity)
[17:46:44.086] INTERNAL ERROR: Unknown action to ‘test’ registry: <unknown>
> stopifnot(inherits(res, "error"))
> 
> message("*** FutureRegistry() - exceptions ... DONE")
*** FutureRegistry() - exceptions ... DONE
> 
> 
> message("*** FutureRegistry() ... DONE")
*** FutureRegistry() ... DONE
> 
> source("incl/end.R")
[17:46:44.087] plan(): Setting new future strategy stack:
[17:46:44.087] List of future strategies:
[17:46:44.087] 1. FutureStrategy:
[17:46:44.087]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:44.087]    - tweaked: FALSE
[17:46:44.087]    - call: future::plan(oplan)
[17:46:44.097] plan(): nbrOfWorkers() = 1
> 
