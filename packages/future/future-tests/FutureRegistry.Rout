
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[18:04:13.133] plan(): Setting new future strategy stack:
[18:04:13.134] List of future strategies:
[18:04:13.134] 1. sequential:
[18:04:13.134]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:13.134]    - tweaked: FALSE
[18:04:13.134]    - call: future::plan("sequential")
[18:04:13.157] plan(): nbrOfWorkers() = 1
> 
> message("*** FutureRegistry() ...")
*** FutureRegistry() ...
> 
> for (where in c(sprintf("multicore-%s", future:::session_uuid()), "rscript")) {
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 1 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'remove') ...", where))
+   FutureRegistry(where, action = "remove", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'collect-first') ...", where))
+   FutureRegistry(where, action = "collect-first")
+ 
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) < 1L)
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'reset') ...", where))
+   FutureRegistry(where, action = "reset")
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ }
*** FutureRegistry('multicore-841684e4-6005-644e-b912-57f4ff3ac333', 'list') ...
list()
*** FutureRegistry('multicore-841684e4-6005-644e-b912-57f4ff3ac333', 'add') ...
[18:04:13.228] getGlobalsAndPackages() ...
[18:04:13.228] Searching for globals...
[18:04:13.236] - globals found: [1] ‘{’
[18:04:13.236] Searching for globals ... DONE
[18:04:13.237] Resolving globals: FALSE
[18:04:13.238] 
[18:04:13.238] 
[18:04:13.238] getGlobalsAndPackages() ... DONE
[18:04:13.239] run() for ‘Future’ ...
[18:04:13.239] - state: ‘created’
[18:04:13.240] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:04:13.240] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:04:13.241] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:04:13.241]   - Field: ‘label’
[18:04:13.241]   - Field: ‘local’
[18:04:13.241]   - Field: ‘owner’
[18:04:13.241]   - Field: ‘envir’
[18:04:13.242]   - Field: ‘packages’
[18:04:13.242]   - Field: ‘gc’
[18:04:13.242]   - Field: ‘conditions’
[18:04:13.242]   - Field: ‘expr’
[18:04:13.242]   - Field: ‘uuid’
[18:04:13.243]   - Field: ‘seed’
[18:04:13.243]   - Field: ‘version’
[18:04:13.243]   - Field: ‘result’
[18:04:13.243]   - Field: ‘asynchronous’
[18:04:13.243]   - Field: ‘calls’
[18:04:13.243]   - Field: ‘globals’
[18:04:13.244]   - Field: ‘stdout’
[18:04:13.244]   - Field: ‘earlySignal’
[18:04:13.244]   - Field: ‘lazy’
[18:04:13.244]   - Field: ‘state’
[18:04:13.244] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:04:13.245] - Launch lazy future ...
[18:04:13.246] Packages needed by the future expression (n = 0): <none>
[18:04:13.246] Packages needed by future strategies (n = 0): <none>
[18:04:13.248] {
[18:04:13.248]     {
[18:04:13.248]         {
[18:04:13.248]             ...future.startTime <- base::Sys.time()
[18:04:13.248]             {
[18:04:13.248]                 {
[18:04:13.248]                   {
[18:04:13.248]                     base::local({
[18:04:13.248]                       has_future <- base::requireNamespace("future", 
[18:04:13.248]                         quietly = TRUE)
[18:04:13.248]                       if (has_future) {
[18:04:13.248]                         ns <- base::getNamespace("future")
[18:04:13.248]                         version <- ns[[".package"]][["version"]]
[18:04:13.248]                         if (is.null(version)) 
[18:04:13.248]                           version <- utils::packageVersion("future")
[18:04:13.248]                       }
[18:04:13.248]                       else {
[18:04:13.248]                         version <- NULL
[18:04:13.248]                       }
[18:04:13.248]                       if (!has_future || version < "1.8.0") {
[18:04:13.248]                         info <- base::c(r_version = base::gsub("R version ", 
[18:04:13.248]                           "", base::R.version$version.string), 
[18:04:13.248]                           platform = base::sprintf("%s (%s-bit)", 
[18:04:13.248]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:13.248]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:13.248]                             "release", "version")], collapse = " "), 
[18:04:13.248]                           hostname = base::Sys.info()[["nodename"]])
[18:04:13.248]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:04:13.248]                           info)
[18:04:13.248]                         info <- base::paste(info, collapse = "; ")
[18:04:13.248]                         if (!has_future) {
[18:04:13.248]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:13.248]                             info)
[18:04:13.248]                         }
[18:04:13.248]                         else {
[18:04:13.248]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:13.248]                             info, version)
[18:04:13.248]                         }
[18:04:13.248]                         base::stop(msg)
[18:04:13.248]                       }
[18:04:13.248]                     })
[18:04:13.248]                   }
[18:04:13.248]                   ...future.strategy.old <- future::plan("list")
[18:04:13.248]                   options(future.plan = NULL)
[18:04:13.248]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:13.248]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:13.248]                 }
[18:04:13.248]                 ...future.workdir <- getwd()
[18:04:13.248]             }
[18:04:13.248]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:13.248]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:13.248]         }
[18:04:13.248]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:13.248]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:13.248]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:13.248]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:13.248]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:13.248]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:13.248]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:13.248]             base::names(...future.oldOptions))
[18:04:13.248]     }
[18:04:13.248]     if (FALSE) {
[18:04:13.248]     }
[18:04:13.248]     else {
[18:04:13.248]         if (TRUE) {
[18:04:13.248]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:13.248]                 open = "w")
[18:04:13.248]         }
[18:04:13.248]         else {
[18:04:13.248]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:13.248]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:13.248]         }
[18:04:13.248]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:13.248]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:13.248]             base::sink(type = "output", split = FALSE)
[18:04:13.248]             base::close(...future.stdout)
[18:04:13.248]         }, add = TRUE)
[18:04:13.248]     }
[18:04:13.248]     ...future.frame <- base::sys.nframe()
[18:04:13.248]     ...future.conditions <- base::list()
[18:04:13.248]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:13.248]     if (FALSE) {
[18:04:13.248]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:13.248]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:13.248]     }
[18:04:13.248]     ...future.result <- base::tryCatch({
[18:04:13.248]         base::withCallingHandlers({
[18:04:13.248]             ...future.value <- base::withVisible(base::local({
[18:04:13.248]                 1
[18:04:13.248]             }))
[18:04:13.248]             future::FutureResult(value = ...future.value$value, 
[18:04:13.248]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:13.248]                   ...future.rng), globalenv = if (FALSE) 
[18:04:13.248]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:13.248]                     ...future.globalenv.names))
[18:04:13.248]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:13.248]         }, condition = base::local({
[18:04:13.248]             c <- base::c
[18:04:13.248]             inherits <- base::inherits
[18:04:13.248]             invokeRestart <- base::invokeRestart
[18:04:13.248]             length <- base::length
[18:04:13.248]             list <- base::list
[18:04:13.248]             seq.int <- base::seq.int
[18:04:13.248]             signalCondition <- base::signalCondition
[18:04:13.248]             sys.calls <- base::sys.calls
[18:04:13.248]             `[[` <- base::`[[`
[18:04:13.248]             `+` <- base::`+`
[18:04:13.248]             `<<-` <- base::`<<-`
[18:04:13.248]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:13.248]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:13.248]                   3L)]
[18:04:13.248]             }
[18:04:13.248]             function(cond) {
[18:04:13.248]                 is_error <- inherits(cond, "error")
[18:04:13.248]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:13.248]                   NULL)
[18:04:13.248]                 if (is_error) {
[18:04:13.248]                   sessionInformation <- function() {
[18:04:13.248]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:13.248]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:13.248]                       search = base::search(), system = base::Sys.info())
[18:04:13.248]                   }
[18:04:13.248]                   ...future.conditions[[length(...future.conditions) + 
[18:04:13.248]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:13.248]                     cond$call), session = sessionInformation(), 
[18:04:13.248]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:13.248]                   signalCondition(cond)
[18:04:13.248]                 }
[18:04:13.248]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:13.248]                 "immediateCondition"))) {
[18:04:13.248]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:13.248]                   ...future.conditions[[length(...future.conditions) + 
[18:04:13.248]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:13.248]                   if (TRUE && !signal) {
[18:04:13.248]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:13.248]                     {
[18:04:13.248]                       inherits <- base::inherits
[18:04:13.248]                       invokeRestart <- base::invokeRestart
[18:04:13.248]                       is.null <- base::is.null
[18:04:13.248]                       muffled <- FALSE
[18:04:13.248]                       if (inherits(cond, "message")) {
[18:04:13.248]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:13.248]                         if (muffled) 
[18:04:13.248]                           invokeRestart("muffleMessage")
[18:04:13.248]                       }
[18:04:13.248]                       else if (inherits(cond, "warning")) {
[18:04:13.248]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:13.248]                         if (muffled) 
[18:04:13.248]                           invokeRestart("muffleWarning")
[18:04:13.248]                       }
[18:04:13.248]                       else if (inherits(cond, "condition")) {
[18:04:13.248]                         if (!is.null(pattern)) {
[18:04:13.248]                           computeRestarts <- base::computeRestarts
[18:04:13.248]                           grepl <- base::grepl
[18:04:13.248]                           restarts <- computeRestarts(cond)
[18:04:13.248]                           for (restart in restarts) {
[18:04:13.248]                             name <- restart$name
[18:04:13.248]                             if (is.null(name)) 
[18:04:13.248]                               next
[18:04:13.248]                             if (!grepl(pattern, name)) 
[18:04:13.248]                               next
[18:04:13.248]                             invokeRestart(restart)
[18:04:13.248]                             muffled <- TRUE
[18:04:13.248]                             break
[18:04:13.248]                           }
[18:04:13.248]                         }
[18:04:13.248]                       }
[18:04:13.248]                       invisible(muffled)
[18:04:13.248]                     }
[18:04:13.248]                     muffleCondition(cond, pattern = "^muffle")
[18:04:13.248]                   }
[18:04:13.248]                 }
[18:04:13.248]                 else {
[18:04:13.248]                   if (TRUE) {
[18:04:13.248]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:13.248]                     {
[18:04:13.248]                       inherits <- base::inherits
[18:04:13.248]                       invokeRestart <- base::invokeRestart
[18:04:13.248]                       is.null <- base::is.null
[18:04:13.248]                       muffled <- FALSE
[18:04:13.248]                       if (inherits(cond, "message")) {
[18:04:13.248]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:13.248]                         if (muffled) 
[18:04:13.248]                           invokeRestart("muffleMessage")
[18:04:13.248]                       }
[18:04:13.248]                       else if (inherits(cond, "warning")) {
[18:04:13.248]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:13.248]                         if (muffled) 
[18:04:13.248]                           invokeRestart("muffleWarning")
[18:04:13.248]                       }
[18:04:13.248]                       else if (inherits(cond, "condition")) {
[18:04:13.248]                         if (!is.null(pattern)) {
[18:04:13.248]                           computeRestarts <- base::computeRestarts
[18:04:13.248]                           grepl <- base::grepl
[18:04:13.248]                           restarts <- computeRestarts(cond)
[18:04:13.248]                           for (restart in restarts) {
[18:04:13.248]                             name <- restart$name
[18:04:13.248]                             if (is.null(name)) 
[18:04:13.248]                               next
[18:04:13.248]                             if (!grepl(pattern, name)) 
[18:04:13.248]                               next
[18:04:13.248]                             invokeRestart(restart)
[18:04:13.248]                             muffled <- TRUE
[18:04:13.248]                             break
[18:04:13.248]                           }
[18:04:13.248]                         }
[18:04:13.248]                       }
[18:04:13.248]                       invisible(muffled)
[18:04:13.248]                     }
[18:04:13.248]                     muffleCondition(cond, pattern = "^muffle")
[18:04:13.248]                   }
[18:04:13.248]                 }
[18:04:13.248]             }
[18:04:13.248]         }))
[18:04:13.248]     }, error = function(ex) {
[18:04:13.248]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:13.248]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:13.248]                 ...future.rng), started = ...future.startTime, 
[18:04:13.248]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:13.248]             version = "1.8"), class = "FutureResult")
[18:04:13.248]     }, finally = {
[18:04:13.248]         if (!identical(...future.workdir, getwd())) 
[18:04:13.248]             setwd(...future.workdir)
[18:04:13.248]         {
[18:04:13.248]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:13.248]                 ...future.oldOptions$nwarnings <- NULL
[18:04:13.248]             }
[18:04:13.248]             base::options(...future.oldOptions)
[18:04:13.248]             if (.Platform$OS.type == "windows") {
[18:04:13.248]                 old_names <- names(...future.oldEnvVars)
[18:04:13.248]                 envs <- base::Sys.getenv()
[18:04:13.248]                 names <- names(envs)
[18:04:13.248]                 common <- intersect(names, old_names)
[18:04:13.248]                 added <- setdiff(names, old_names)
[18:04:13.248]                 removed <- setdiff(old_names, names)
[18:04:13.248]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:13.248]                   envs[common]]
[18:04:13.248]                 NAMES <- toupper(changed)
[18:04:13.248]                 args <- list()
[18:04:13.248]                 for (kk in seq_along(NAMES)) {
[18:04:13.248]                   name <- changed[[kk]]
[18:04:13.248]                   NAME <- NAMES[[kk]]
[18:04:13.248]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:13.248]                     next
[18:04:13.248]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:13.248]                 }
[18:04:13.248]                 NAMES <- toupper(added)
[18:04:13.248]                 for (kk in seq_along(NAMES)) {
[18:04:13.248]                   name <- added[[kk]]
[18:04:13.248]                   NAME <- NAMES[[kk]]
[18:04:13.248]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:13.248]                     next
[18:04:13.248]                   args[[name]] <- ""
[18:04:13.248]                 }
[18:04:13.248]                 NAMES <- toupper(removed)
[18:04:13.248]                 for (kk in seq_along(NAMES)) {
[18:04:13.248]                   name <- removed[[kk]]
[18:04:13.248]                   NAME <- NAMES[[kk]]
[18:04:13.248]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:13.248]                     next
[18:04:13.248]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:13.248]                 }
[18:04:13.248]                 if (length(args) > 0) 
[18:04:13.248]                   base::do.call(base::Sys.setenv, args = args)
[18:04:13.248]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:13.248]             }
[18:04:13.248]             else {
[18:04:13.248]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:13.248]             }
[18:04:13.248]             {
[18:04:13.248]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:13.248]                   0L) {
[18:04:13.248]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:13.248]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:13.248]                   base::options(opts)
[18:04:13.248]                 }
[18:04:13.248]                 {
[18:04:13.248]                   {
[18:04:13.248]                     NULL
[18:04:13.248]                     RNGkind("Mersenne-Twister")
[18:04:13.248]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:04:13.248]                       inherits = FALSE)
[18:04:13.248]                   }
[18:04:13.248]                   options(future.plan = NULL)
[18:04:13.248]                   if (is.na(NA_character_)) 
[18:04:13.248]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:13.248]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:13.248]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:13.248]                     .init = FALSE)
[18:04:13.248]                 }
[18:04:13.248]             }
[18:04:13.248]         }
[18:04:13.248]     })
[18:04:13.248]     if (TRUE) {
[18:04:13.248]         base::sink(type = "output", split = FALSE)
[18:04:13.248]         if (TRUE) {
[18:04:13.248]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:13.248]         }
[18:04:13.248]         else {
[18:04:13.248]             ...future.result["stdout"] <- base::list(NULL)
[18:04:13.248]         }
[18:04:13.248]         base::close(...future.stdout)
[18:04:13.248]         ...future.stdout <- NULL
[18:04:13.248]     }
[18:04:13.248]     ...future.result$conditions <- ...future.conditions
[18:04:13.248]     ...future.result$finished <- base::Sys.time()
[18:04:13.248]     ...future.result
[18:04:13.248] }
[18:04:13.251] plan(): Setting new future strategy stack:
[18:04:13.252] List of future strategies:
[18:04:13.252] 1. sequential:
[18:04:13.252]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:13.252]    - tweaked: FALSE
[18:04:13.252]    - call: NULL
[18:04:13.253] plan(): nbrOfWorkers() = 1
[18:04:13.255] plan(): Setting new future strategy stack:
[18:04:13.255] List of future strategies:
[18:04:13.255] 1. sequential:
[18:04:13.255]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:13.255]    - tweaked: FALSE
[18:04:13.255]    - call: future::plan("sequential")
[18:04:13.256] plan(): nbrOfWorkers() = 1
[18:04:13.257] SequentialFuture started (and completed)
[18:04:13.258] - Launch lazy future ... done
[18:04:13.258] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 841684e4-6005-644e-b912-57f4ff3ac333
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-841684e4-6005-644e-b912-57f4ff3ac333', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 841684e4-6005-644e-b912-57f4ff3ac333
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-841684e4-6005-644e-b912-57f4ff3ac333', 'remove') ...
*** FutureRegistry('multicore-841684e4-6005-644e-b912-57f4ff3ac333', 'list') ...
list()
*** FutureRegistry('multicore-841684e4-6005-644e-b912-57f4ff3ac333', 'add') ...
[18:04:13.266] getGlobalsAndPackages() ...
[18:04:13.267] Searching for globals...
[18:04:13.268] - globals found: [1] ‘{’
[18:04:13.268] Searching for globals ... DONE
[18:04:13.268] Resolving globals: FALSE
[18:04:13.269] 
[18:04:13.269] 
[18:04:13.269] getGlobalsAndPackages() ... DONE
[18:04:13.270] run() for ‘Future’ ...
[18:04:13.270] - state: ‘created’
[18:04:13.271] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:04:13.271] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:04:13.271] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:04:13.272]   - Field: ‘label’
[18:04:13.272]   - Field: ‘local’
[18:04:13.272]   - Field: ‘owner’
[18:04:13.272]   - Field: ‘envir’
[18:04:13.272]   - Field: ‘packages’
[18:04:13.273]   - Field: ‘gc’
[18:04:13.273]   - Field: ‘conditions’
[18:04:13.273]   - Field: ‘expr’
[18:04:13.273]   - Field: ‘uuid’
[18:04:13.273]   - Field: ‘seed’
[18:04:13.274]   - Field: ‘version’
[18:04:13.274]   - Field: ‘result’
[18:04:13.274]   - Field: ‘asynchronous’
[18:04:13.274]   - Field: ‘calls’
[18:04:13.274]   - Field: ‘globals’
[18:04:13.275]   - Field: ‘stdout’
[18:04:13.275]   - Field: ‘earlySignal’
[18:04:13.275]   - Field: ‘lazy’
[18:04:13.275]   - Field: ‘state’
[18:04:13.275] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:04:13.276] - Launch lazy future ...
[18:04:13.276] Packages needed by the future expression (n = 0): <none>
[18:04:13.276] Packages needed by future strategies (n = 0): <none>
[18:04:13.277] {
[18:04:13.277]     {
[18:04:13.277]         {
[18:04:13.277]             ...future.startTime <- base::Sys.time()
[18:04:13.277]             {
[18:04:13.277]                 {
[18:04:13.277]                   {
[18:04:13.277]                     base::local({
[18:04:13.277]                       has_future <- base::requireNamespace("future", 
[18:04:13.277]                         quietly = TRUE)
[18:04:13.277]                       if (has_future) {
[18:04:13.277]                         ns <- base::getNamespace("future")
[18:04:13.277]                         version <- ns[[".package"]][["version"]]
[18:04:13.277]                         if (is.null(version)) 
[18:04:13.277]                           version <- utils::packageVersion("future")
[18:04:13.277]                       }
[18:04:13.277]                       else {
[18:04:13.277]                         version <- NULL
[18:04:13.277]                       }
[18:04:13.277]                       if (!has_future || version < "1.8.0") {
[18:04:13.277]                         info <- base::c(r_version = base::gsub("R version ", 
[18:04:13.277]                           "", base::R.version$version.string), 
[18:04:13.277]                           platform = base::sprintf("%s (%s-bit)", 
[18:04:13.277]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:13.277]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:13.277]                             "release", "version")], collapse = " "), 
[18:04:13.277]                           hostname = base::Sys.info()[["nodename"]])
[18:04:13.277]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:04:13.277]                           info)
[18:04:13.277]                         info <- base::paste(info, collapse = "; ")
[18:04:13.277]                         if (!has_future) {
[18:04:13.277]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:13.277]                             info)
[18:04:13.277]                         }
[18:04:13.277]                         else {
[18:04:13.277]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:13.277]                             info, version)
[18:04:13.277]                         }
[18:04:13.277]                         base::stop(msg)
[18:04:13.277]                       }
[18:04:13.277]                     })
[18:04:13.277]                   }
[18:04:13.277]                   ...future.strategy.old <- future::plan("list")
[18:04:13.277]                   options(future.plan = NULL)
[18:04:13.277]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:13.277]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:13.277]                 }
[18:04:13.277]                 ...future.workdir <- getwd()
[18:04:13.277]             }
[18:04:13.277]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:13.277]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:13.277]         }
[18:04:13.277]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:13.277]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:13.277]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:13.277]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:13.277]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:13.277]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:13.277]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:13.277]             base::names(...future.oldOptions))
[18:04:13.277]     }
[18:04:13.277]     if (FALSE) {
[18:04:13.277]     }
[18:04:13.277]     else {
[18:04:13.277]         if (TRUE) {
[18:04:13.277]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:13.277]                 open = "w")
[18:04:13.277]         }
[18:04:13.277]         else {
[18:04:13.277]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:13.277]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:13.277]         }
[18:04:13.277]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:13.277]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:13.277]             base::sink(type = "output", split = FALSE)
[18:04:13.277]             base::close(...future.stdout)
[18:04:13.277]         }, add = TRUE)
[18:04:13.277]     }
[18:04:13.277]     ...future.frame <- base::sys.nframe()
[18:04:13.277]     ...future.conditions <- base::list()
[18:04:13.277]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:13.277]     if (FALSE) {
[18:04:13.277]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:13.277]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:13.277]     }
[18:04:13.277]     ...future.result <- base::tryCatch({
[18:04:13.277]         base::withCallingHandlers({
[18:04:13.277]             ...future.value <- base::withVisible(base::local({
[18:04:13.277]                 2
[18:04:13.277]             }))
[18:04:13.277]             future::FutureResult(value = ...future.value$value, 
[18:04:13.277]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:13.277]                   ...future.rng), globalenv = if (FALSE) 
[18:04:13.277]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:13.277]                     ...future.globalenv.names))
[18:04:13.277]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:13.277]         }, condition = base::local({
[18:04:13.277]             c <- base::c
[18:04:13.277]             inherits <- base::inherits
[18:04:13.277]             invokeRestart <- base::invokeRestart
[18:04:13.277]             length <- base::length
[18:04:13.277]             list <- base::list
[18:04:13.277]             seq.int <- base::seq.int
[18:04:13.277]             signalCondition <- base::signalCondition
[18:04:13.277]             sys.calls <- base::sys.calls
[18:04:13.277]             `[[` <- base::`[[`
[18:04:13.277]             `+` <- base::`+`
[18:04:13.277]             `<<-` <- base::`<<-`
[18:04:13.277]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:13.277]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:13.277]                   3L)]
[18:04:13.277]             }
[18:04:13.277]             function(cond) {
[18:04:13.277]                 is_error <- inherits(cond, "error")
[18:04:13.277]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:13.277]                   NULL)
[18:04:13.277]                 if (is_error) {
[18:04:13.277]                   sessionInformation <- function() {
[18:04:13.277]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:13.277]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:13.277]                       search = base::search(), system = base::Sys.info())
[18:04:13.277]                   }
[18:04:13.277]                   ...future.conditions[[length(...future.conditions) + 
[18:04:13.277]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:13.277]                     cond$call), session = sessionInformation(), 
[18:04:13.277]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:13.277]                   signalCondition(cond)
[18:04:13.277]                 }
[18:04:13.277]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:13.277]                 "immediateCondition"))) {
[18:04:13.277]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:13.277]                   ...future.conditions[[length(...future.conditions) + 
[18:04:13.277]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:13.277]                   if (TRUE && !signal) {
[18:04:13.277]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:13.277]                     {
[18:04:13.277]                       inherits <- base::inherits
[18:04:13.277]                       invokeRestart <- base::invokeRestart
[18:04:13.277]                       is.null <- base::is.null
[18:04:13.277]                       muffled <- FALSE
[18:04:13.277]                       if (inherits(cond, "message")) {
[18:04:13.277]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:13.277]                         if (muffled) 
[18:04:13.277]                           invokeRestart("muffleMessage")
[18:04:13.277]                       }
[18:04:13.277]                       else if (inherits(cond, "warning")) {
[18:04:13.277]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:13.277]                         if (muffled) 
[18:04:13.277]                           invokeRestart("muffleWarning")
[18:04:13.277]                       }
[18:04:13.277]                       else if (inherits(cond, "condition")) {
[18:04:13.277]                         if (!is.null(pattern)) {
[18:04:13.277]                           computeRestarts <- base::computeRestarts
[18:04:13.277]                           grepl <- base::grepl
[18:04:13.277]                           restarts <- computeRestarts(cond)
[18:04:13.277]                           for (restart in restarts) {
[18:04:13.277]                             name <- restart$name
[18:04:13.277]                             if (is.null(name)) 
[18:04:13.277]                               next
[18:04:13.277]                             if (!grepl(pattern, name)) 
[18:04:13.277]                               next
[18:04:13.277]                             invokeRestart(restart)
[18:04:13.277]                             muffled <- TRUE
[18:04:13.277]                             break
[18:04:13.277]                           }
[18:04:13.277]                         }
[18:04:13.277]                       }
[18:04:13.277]                       invisible(muffled)
[18:04:13.277]                     }
[18:04:13.277]                     muffleCondition(cond, pattern = "^muffle")
[18:04:13.277]                   }
[18:04:13.277]                 }
[18:04:13.277]                 else {
[18:04:13.277]                   if (TRUE) {
[18:04:13.277]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:13.277]                     {
[18:04:13.277]                       inherits <- base::inherits
[18:04:13.277]                       invokeRestart <- base::invokeRestart
[18:04:13.277]                       is.null <- base::is.null
[18:04:13.277]                       muffled <- FALSE
[18:04:13.277]                       if (inherits(cond, "message")) {
[18:04:13.277]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:13.277]                         if (muffled) 
[18:04:13.277]                           invokeRestart("muffleMessage")
[18:04:13.277]                       }
[18:04:13.277]                       else if (inherits(cond, "warning")) {
[18:04:13.277]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:13.277]                         if (muffled) 
[18:04:13.277]                           invokeRestart("muffleWarning")
[18:04:13.277]                       }
[18:04:13.277]                       else if (inherits(cond, "condition")) {
[18:04:13.277]                         if (!is.null(pattern)) {
[18:04:13.277]                           computeRestarts <- base::computeRestarts
[18:04:13.277]                           grepl <- base::grepl
[18:04:13.277]                           restarts <- computeRestarts(cond)
[18:04:13.277]                           for (restart in restarts) {
[18:04:13.277]                             name <- restart$name
[18:04:13.277]                             if (is.null(name)) 
[18:04:13.277]                               next
[18:04:13.277]                             if (!grepl(pattern, name)) 
[18:04:13.277]                               next
[18:04:13.277]                             invokeRestart(restart)
[18:04:13.277]                             muffled <- TRUE
[18:04:13.277]                             break
[18:04:13.277]                           }
[18:04:13.277]                         }
[18:04:13.277]                       }
[18:04:13.277]                       invisible(muffled)
[18:04:13.277]                     }
[18:04:13.277]                     muffleCondition(cond, pattern = "^muffle")
[18:04:13.277]                   }
[18:04:13.277]                 }
[18:04:13.277]             }
[18:04:13.277]         }))
[18:04:13.277]     }, error = function(ex) {
[18:04:13.277]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:13.277]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:13.277]                 ...future.rng), started = ...future.startTime, 
[18:04:13.277]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:13.277]             version = "1.8"), class = "FutureResult")
[18:04:13.277]     }, finally = {
[18:04:13.277]         if (!identical(...future.workdir, getwd())) 
[18:04:13.277]             setwd(...future.workdir)
[18:04:13.277]         {
[18:04:13.277]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:13.277]                 ...future.oldOptions$nwarnings <- NULL
[18:04:13.277]             }
[18:04:13.277]             base::options(...future.oldOptions)
[18:04:13.277]             if (.Platform$OS.type == "windows") {
[18:04:13.277]                 old_names <- names(...future.oldEnvVars)
[18:04:13.277]                 envs <- base::Sys.getenv()
[18:04:13.277]                 names <- names(envs)
[18:04:13.277]                 common <- intersect(names, old_names)
[18:04:13.277]                 added <- setdiff(names, old_names)
[18:04:13.277]                 removed <- setdiff(old_names, names)
[18:04:13.277]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:13.277]                   envs[common]]
[18:04:13.277]                 NAMES <- toupper(changed)
[18:04:13.277]                 args <- list()
[18:04:13.277]                 for (kk in seq_along(NAMES)) {
[18:04:13.277]                   name <- changed[[kk]]
[18:04:13.277]                   NAME <- NAMES[[kk]]
[18:04:13.277]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:13.277]                     next
[18:04:13.277]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:13.277]                 }
[18:04:13.277]                 NAMES <- toupper(added)
[18:04:13.277]                 for (kk in seq_along(NAMES)) {
[18:04:13.277]                   name <- added[[kk]]
[18:04:13.277]                   NAME <- NAMES[[kk]]
[18:04:13.277]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:13.277]                     next
[18:04:13.277]                   args[[name]] <- ""
[18:04:13.277]                 }
[18:04:13.277]                 NAMES <- toupper(removed)
[18:04:13.277]                 for (kk in seq_along(NAMES)) {
[18:04:13.277]                   name <- removed[[kk]]
[18:04:13.277]                   NAME <- NAMES[[kk]]
[18:04:13.277]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:13.277]                     next
[18:04:13.277]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:13.277]                 }
[18:04:13.277]                 if (length(args) > 0) 
[18:04:13.277]                   base::do.call(base::Sys.setenv, args = args)
[18:04:13.277]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:13.277]             }
[18:04:13.277]             else {
[18:04:13.277]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:13.277]             }
[18:04:13.277]             {
[18:04:13.277]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:13.277]                   0L) {
[18:04:13.277]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:13.277]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:13.277]                   base::options(opts)
[18:04:13.277]                 }
[18:04:13.277]                 {
[18:04:13.277]                   {
[18:04:13.277]                     NULL
[18:04:13.277]                     RNGkind("Mersenne-Twister")
[18:04:13.277]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:04:13.277]                       inherits = FALSE)
[18:04:13.277]                   }
[18:04:13.277]                   options(future.plan = NULL)
[18:04:13.277]                   if (is.na(NA_character_)) 
[18:04:13.277]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:13.277]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:13.277]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:13.277]                     .init = FALSE)
[18:04:13.277]                 }
[18:04:13.277]             }
[18:04:13.277]         }
[18:04:13.277]     })
[18:04:13.277]     if (TRUE) {
[18:04:13.277]         base::sink(type = "output", split = FALSE)
[18:04:13.277]         if (TRUE) {
[18:04:13.277]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:13.277]         }
[18:04:13.277]         else {
[18:04:13.277]             ...future.result["stdout"] <- base::list(NULL)
[18:04:13.277]         }
[18:04:13.277]         base::close(...future.stdout)
[18:04:13.277]         ...future.stdout <- NULL
[18:04:13.277]     }
[18:04:13.277]     ...future.result$conditions <- ...future.conditions
[18:04:13.277]     ...future.result$finished <- base::Sys.time()
[18:04:13.277]     ...future.result
[18:04:13.277] }
[18:04:13.281] plan(): Setting new future strategy stack:
[18:04:13.281] List of future strategies:
[18:04:13.281] 1. sequential:
[18:04:13.281]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:13.281]    - tweaked: FALSE
[18:04:13.281]    - call: NULL
[18:04:13.282] plan(): nbrOfWorkers() = 1
[18:04:13.284] plan(): Setting new future strategy stack:
[18:04:13.284] List of future strategies:
[18:04:13.284] 1. sequential:
[18:04:13.284]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:13.284]    - tweaked: FALSE
[18:04:13.284]    - call: future::plan("sequential")
[18:04:13.285] plan(): nbrOfWorkers() = 1
[18:04:13.285] SequentialFuture started (and completed)
[18:04:13.286] - Launch lazy future ... done
[18:04:13.286] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 841684e4-6005-644e-b912-57f4ff3ac333
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-841684e4-6005-644e-b912-57f4ff3ac333', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 841684e4-6005-644e-b912-57f4ff3ac333
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-841684e4-6005-644e-b912-57f4ff3ac333', 'collect-first') ...
[18:04:13.288] resolved() for ‘SequentialFuture’ ...
[18:04:13.289] - state: ‘finished’
[18:04:13.289] - run: FALSE
[18:04:13.289] - result: ‘FutureResult’
[18:04:13.289] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('multicore-841684e4-6005-644e-b912-57f4ff3ac333', 'add') ...
[18:04:13.290] getGlobalsAndPackages() ...
[18:04:13.291] Searching for globals...
[18:04:13.292] - globals found: [1] ‘{’
[18:04:13.292] Searching for globals ... DONE
[18:04:13.292] Resolving globals: FALSE
[18:04:13.293] 
[18:04:13.293] 
[18:04:13.293] getGlobalsAndPackages() ... DONE
[18:04:13.294] run() for ‘Future’ ...
[18:04:13.294] - state: ‘created’
[18:04:13.294] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:04:13.295] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:04:13.295] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:04:13.296]   - Field: ‘label’
[18:04:13.296]   - Field: ‘local’
[18:04:13.296]   - Field: ‘owner’
[18:04:13.296]   - Field: ‘envir’
[18:04:13.296]   - Field: ‘packages’
[18:04:13.297]   - Field: ‘gc’
[18:04:13.297]   - Field: ‘conditions’
[18:04:13.297]   - Field: ‘expr’
[18:04:13.297]   - Field: ‘uuid’
[18:04:13.297]   - Field: ‘seed’
[18:04:13.298]   - Field: ‘version’
[18:04:13.298]   - Field: ‘result’
[18:04:13.298]   - Field: ‘asynchronous’
[18:04:13.298]   - Field: ‘calls’
[18:04:13.298]   - Field: ‘globals’
[18:04:13.299]   - Field: ‘stdout’
[18:04:13.299]   - Field: ‘earlySignal’
[18:04:13.299]   - Field: ‘lazy’
[18:04:13.299]   - Field: ‘state’
[18:04:13.299] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:04:13.300] - Launch lazy future ...
[18:04:13.300] Packages needed by the future expression (n = 0): <none>
[18:04:13.300] Packages needed by future strategies (n = 0): <none>
[18:04:13.301] {
[18:04:13.301]     {
[18:04:13.301]         {
[18:04:13.301]             ...future.startTime <- base::Sys.time()
[18:04:13.301]             {
[18:04:13.301]                 {
[18:04:13.301]                   {
[18:04:13.301]                     base::local({
[18:04:13.301]                       has_future <- base::requireNamespace("future", 
[18:04:13.301]                         quietly = TRUE)
[18:04:13.301]                       if (has_future) {
[18:04:13.301]                         ns <- base::getNamespace("future")
[18:04:13.301]                         version <- ns[[".package"]][["version"]]
[18:04:13.301]                         if (is.null(version)) 
[18:04:13.301]                           version <- utils::packageVersion("future")
[18:04:13.301]                       }
[18:04:13.301]                       else {
[18:04:13.301]                         version <- NULL
[18:04:13.301]                       }
[18:04:13.301]                       if (!has_future || version < "1.8.0") {
[18:04:13.301]                         info <- base::c(r_version = base::gsub("R version ", 
[18:04:13.301]                           "", base::R.version$version.string), 
[18:04:13.301]                           platform = base::sprintf("%s (%s-bit)", 
[18:04:13.301]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:13.301]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:13.301]                             "release", "version")], collapse = " "), 
[18:04:13.301]                           hostname = base::Sys.info()[["nodename"]])
[18:04:13.301]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:04:13.301]                           info)
[18:04:13.301]                         info <- base::paste(info, collapse = "; ")
[18:04:13.301]                         if (!has_future) {
[18:04:13.301]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:13.301]                             info)
[18:04:13.301]                         }
[18:04:13.301]                         else {
[18:04:13.301]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:13.301]                             info, version)
[18:04:13.301]                         }
[18:04:13.301]                         base::stop(msg)
[18:04:13.301]                       }
[18:04:13.301]                     })
[18:04:13.301]                   }
[18:04:13.301]                   ...future.strategy.old <- future::plan("list")
[18:04:13.301]                   options(future.plan = NULL)
[18:04:13.301]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:13.301]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:13.301]                 }
[18:04:13.301]                 ...future.workdir <- getwd()
[18:04:13.301]             }
[18:04:13.301]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:13.301]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:13.301]         }
[18:04:13.301]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:13.301]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:13.301]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:13.301]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:13.301]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:13.301]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:13.301]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:13.301]             base::names(...future.oldOptions))
[18:04:13.301]     }
[18:04:13.301]     if (FALSE) {
[18:04:13.301]     }
[18:04:13.301]     else {
[18:04:13.301]         if (TRUE) {
[18:04:13.301]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:13.301]                 open = "w")
[18:04:13.301]         }
[18:04:13.301]         else {
[18:04:13.301]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:13.301]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:13.301]         }
[18:04:13.301]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:13.301]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:13.301]             base::sink(type = "output", split = FALSE)
[18:04:13.301]             base::close(...future.stdout)
[18:04:13.301]         }, add = TRUE)
[18:04:13.301]     }
[18:04:13.301]     ...future.frame <- base::sys.nframe()
[18:04:13.301]     ...future.conditions <- base::list()
[18:04:13.301]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:13.301]     if (FALSE) {
[18:04:13.301]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:13.301]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:13.301]     }
[18:04:13.301]     ...future.result <- base::tryCatch({
[18:04:13.301]         base::withCallingHandlers({
[18:04:13.301]             ...future.value <- base::withVisible(base::local({
[18:04:13.301]                 2
[18:04:13.301]             }))
[18:04:13.301]             future::FutureResult(value = ...future.value$value, 
[18:04:13.301]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:13.301]                   ...future.rng), globalenv = if (FALSE) 
[18:04:13.301]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:13.301]                     ...future.globalenv.names))
[18:04:13.301]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:13.301]         }, condition = base::local({
[18:04:13.301]             c <- base::c
[18:04:13.301]             inherits <- base::inherits
[18:04:13.301]             invokeRestart <- base::invokeRestart
[18:04:13.301]             length <- base::length
[18:04:13.301]             list <- base::list
[18:04:13.301]             seq.int <- base::seq.int
[18:04:13.301]             signalCondition <- base::signalCondition
[18:04:13.301]             sys.calls <- base::sys.calls
[18:04:13.301]             `[[` <- base::`[[`
[18:04:13.301]             `+` <- base::`+`
[18:04:13.301]             `<<-` <- base::`<<-`
[18:04:13.301]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:13.301]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:13.301]                   3L)]
[18:04:13.301]             }
[18:04:13.301]             function(cond) {
[18:04:13.301]                 is_error <- inherits(cond, "error")
[18:04:13.301]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:13.301]                   NULL)
[18:04:13.301]                 if (is_error) {
[18:04:13.301]                   sessionInformation <- function() {
[18:04:13.301]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:13.301]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:13.301]                       search = base::search(), system = base::Sys.info())
[18:04:13.301]                   }
[18:04:13.301]                   ...future.conditions[[length(...future.conditions) + 
[18:04:13.301]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:13.301]                     cond$call), session = sessionInformation(), 
[18:04:13.301]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:13.301]                   signalCondition(cond)
[18:04:13.301]                 }
[18:04:13.301]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:13.301]                 "immediateCondition"))) {
[18:04:13.301]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:13.301]                   ...future.conditions[[length(...future.conditions) + 
[18:04:13.301]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:13.301]                   if (TRUE && !signal) {
[18:04:13.301]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:13.301]                     {
[18:04:13.301]                       inherits <- base::inherits
[18:04:13.301]                       invokeRestart <- base::invokeRestart
[18:04:13.301]                       is.null <- base::is.null
[18:04:13.301]                       muffled <- FALSE
[18:04:13.301]                       if (inherits(cond, "message")) {
[18:04:13.301]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:13.301]                         if (muffled) 
[18:04:13.301]                           invokeRestart("muffleMessage")
[18:04:13.301]                       }
[18:04:13.301]                       else if (inherits(cond, "warning")) {
[18:04:13.301]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:13.301]                         if (muffled) 
[18:04:13.301]                           invokeRestart("muffleWarning")
[18:04:13.301]                       }
[18:04:13.301]                       else if (inherits(cond, "condition")) {
[18:04:13.301]                         if (!is.null(pattern)) {
[18:04:13.301]                           computeRestarts <- base::computeRestarts
[18:04:13.301]                           grepl <- base::grepl
[18:04:13.301]                           restarts <- computeRestarts(cond)
[18:04:13.301]                           for (restart in restarts) {
[18:04:13.301]                             name <- restart$name
[18:04:13.301]                             if (is.null(name)) 
[18:04:13.301]                               next
[18:04:13.301]                             if (!grepl(pattern, name)) 
[18:04:13.301]                               next
[18:04:13.301]                             invokeRestart(restart)
[18:04:13.301]                             muffled <- TRUE
[18:04:13.301]                             break
[18:04:13.301]                           }
[18:04:13.301]                         }
[18:04:13.301]                       }
[18:04:13.301]                       invisible(muffled)
[18:04:13.301]                     }
[18:04:13.301]                     muffleCondition(cond, pattern = "^muffle")
[18:04:13.301]                   }
[18:04:13.301]                 }
[18:04:13.301]                 else {
[18:04:13.301]                   if (TRUE) {
[18:04:13.301]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:13.301]                     {
[18:04:13.301]                       inherits <- base::inherits
[18:04:13.301]                       invokeRestart <- base::invokeRestart
[18:04:13.301]                       is.null <- base::is.null
[18:04:13.301]                       muffled <- FALSE
[18:04:13.301]                       if (inherits(cond, "message")) {
[18:04:13.301]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:13.301]                         if (muffled) 
[18:04:13.301]                           invokeRestart("muffleMessage")
[18:04:13.301]                       }
[18:04:13.301]                       else if (inherits(cond, "warning")) {
[18:04:13.301]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:13.301]                         if (muffled) 
[18:04:13.301]                           invokeRestart("muffleWarning")
[18:04:13.301]                       }
[18:04:13.301]                       else if (inherits(cond, "condition")) {
[18:04:13.301]                         if (!is.null(pattern)) {
[18:04:13.301]                           computeRestarts <- base::computeRestarts
[18:04:13.301]                           grepl <- base::grepl
[18:04:13.301]                           restarts <- computeRestarts(cond)
[18:04:13.301]                           for (restart in restarts) {
[18:04:13.301]                             name <- restart$name
[18:04:13.301]                             if (is.null(name)) 
[18:04:13.301]                               next
[18:04:13.301]                             if (!grepl(pattern, name)) 
[18:04:13.301]                               next
[18:04:13.301]                             invokeRestart(restart)
[18:04:13.301]                             muffled <- TRUE
[18:04:13.301]                             break
[18:04:13.301]                           }
[18:04:13.301]                         }
[18:04:13.301]                       }
[18:04:13.301]                       invisible(muffled)
[18:04:13.301]                     }
[18:04:13.301]                     muffleCondition(cond, pattern = "^muffle")
[18:04:13.301]                   }
[18:04:13.301]                 }
[18:04:13.301]             }
[18:04:13.301]         }))
[18:04:13.301]     }, error = function(ex) {
[18:04:13.301]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:13.301]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:13.301]                 ...future.rng), started = ...future.startTime, 
[18:04:13.301]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:13.301]             version = "1.8"), class = "FutureResult")
[18:04:13.301]     }, finally = {
[18:04:13.301]         if (!identical(...future.workdir, getwd())) 
[18:04:13.301]             setwd(...future.workdir)
[18:04:13.301]         {
[18:04:13.301]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:13.301]                 ...future.oldOptions$nwarnings <- NULL
[18:04:13.301]             }
[18:04:13.301]             base::options(...future.oldOptions)
[18:04:13.301]             if (.Platform$OS.type == "windows") {
[18:04:13.301]                 old_names <- names(...future.oldEnvVars)
[18:04:13.301]                 envs <- base::Sys.getenv()
[18:04:13.301]                 names <- names(envs)
[18:04:13.301]                 common <- intersect(names, old_names)
[18:04:13.301]                 added <- setdiff(names, old_names)
[18:04:13.301]                 removed <- setdiff(old_names, names)
[18:04:13.301]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:13.301]                   envs[common]]
[18:04:13.301]                 NAMES <- toupper(changed)
[18:04:13.301]                 args <- list()
[18:04:13.301]                 for (kk in seq_along(NAMES)) {
[18:04:13.301]                   name <- changed[[kk]]
[18:04:13.301]                   NAME <- NAMES[[kk]]
[18:04:13.301]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:13.301]                     next
[18:04:13.301]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:13.301]                 }
[18:04:13.301]                 NAMES <- toupper(added)
[18:04:13.301]                 for (kk in seq_along(NAMES)) {
[18:04:13.301]                   name <- added[[kk]]
[18:04:13.301]                   NAME <- NAMES[[kk]]
[18:04:13.301]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:13.301]                     next
[18:04:13.301]                   args[[name]] <- ""
[18:04:13.301]                 }
[18:04:13.301]                 NAMES <- toupper(removed)
[18:04:13.301]                 for (kk in seq_along(NAMES)) {
[18:04:13.301]                   name <- removed[[kk]]
[18:04:13.301]                   NAME <- NAMES[[kk]]
[18:04:13.301]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:13.301]                     next
[18:04:13.301]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:13.301]                 }
[18:04:13.301]                 if (length(args) > 0) 
[18:04:13.301]                   base::do.call(base::Sys.setenv, args = args)
[18:04:13.301]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:13.301]             }
[18:04:13.301]             else {
[18:04:13.301]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:13.301]             }
[18:04:13.301]             {
[18:04:13.301]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:13.301]                   0L) {
[18:04:13.301]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:13.301]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:13.301]                   base::options(opts)
[18:04:13.301]                 }
[18:04:13.301]                 {
[18:04:13.301]                   {
[18:04:13.301]                     NULL
[18:04:13.301]                     RNGkind("Mersenne-Twister")
[18:04:13.301]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:04:13.301]                       inherits = FALSE)
[18:04:13.301]                   }
[18:04:13.301]                   options(future.plan = NULL)
[18:04:13.301]                   if (is.na(NA_character_)) 
[18:04:13.301]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:13.301]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:13.301]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:13.301]                     .init = FALSE)
[18:04:13.301]                 }
[18:04:13.301]             }
[18:04:13.301]         }
[18:04:13.301]     })
[18:04:13.301]     if (TRUE) {
[18:04:13.301]         base::sink(type = "output", split = FALSE)
[18:04:13.301]         if (TRUE) {
[18:04:13.301]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:13.301]         }
[18:04:13.301]         else {
[18:04:13.301]             ...future.result["stdout"] <- base::list(NULL)
[18:04:13.301]         }
[18:04:13.301]         base::close(...future.stdout)
[18:04:13.301]         ...future.stdout <- NULL
[18:04:13.301]     }
[18:04:13.301]     ...future.result$conditions <- ...future.conditions
[18:04:13.301]     ...future.result$finished <- base::Sys.time()
[18:04:13.301]     ...future.result
[18:04:13.301] }
[18:04:13.305] plan(): Setting new future strategy stack:
[18:04:13.306] List of future strategies:
[18:04:13.306] 1. sequential:
[18:04:13.306]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:13.306]    - tweaked: FALSE
[18:04:13.306]    - call: NULL
[18:04:13.307] plan(): nbrOfWorkers() = 1
[18:04:13.308] plan(): Setting new future strategy stack:
[18:04:13.308] List of future strategies:
[18:04:13.308] 1. sequential:
[18:04:13.308]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:13.308]    - tweaked: FALSE
[18:04:13.308]    - call: future::plan("sequential")
[18:04:13.309] plan(): nbrOfWorkers() = 1
[18:04:13.310] SequentialFuture started (and completed)
[18:04:13.310] - Launch lazy future ... done
[18:04:13.310] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 841684e4-6005-644e-b912-57f4ff3ac333
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-841684e4-6005-644e-b912-57f4ff3ac333', 'reset') ...
*** FutureRegistry('multicore-841684e4-6005-644e-b912-57f4ff3ac333', 'list') ...
list()
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[18:04:13.312] getGlobalsAndPackages() ...
[18:04:13.312] Searching for globals...
[18:04:13.314] - globals found: [1] ‘{’
[18:04:13.314] Searching for globals ... DONE
[18:04:13.314] Resolving globals: FALSE
[18:04:13.315] 
[18:04:13.315] 
[18:04:13.315] getGlobalsAndPackages() ... DONE
[18:04:13.316] run() for ‘Future’ ...
[18:04:13.316] - state: ‘created’
[18:04:13.316] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:04:13.320] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:04:13.320] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:04:13.321]   - Field: ‘label’
[18:04:13.321]   - Field: ‘local’
[18:04:13.321]   - Field: ‘owner’
[18:04:13.321]   - Field: ‘envir’
[18:04:13.321]   - Field: ‘packages’
[18:04:13.322]   - Field: ‘gc’
[18:04:13.322]   - Field: ‘conditions’
[18:04:13.322]   - Field: ‘expr’
[18:04:13.322]   - Field: ‘uuid’
[18:04:13.322]   - Field: ‘seed’
[18:04:13.323]   - Field: ‘version’
[18:04:13.323]   - Field: ‘result’
[18:04:13.323]   - Field: ‘asynchronous’
[18:04:13.323]   - Field: ‘calls’
[18:04:13.323]   - Field: ‘globals’
[18:04:13.324]   - Field: ‘stdout’
[18:04:13.324]   - Field: ‘earlySignal’
[18:04:13.324]   - Field: ‘lazy’
[18:04:13.324]   - Field: ‘state’
[18:04:13.324] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:04:13.325] - Launch lazy future ...
[18:04:13.325] Packages needed by the future expression (n = 0): <none>
[18:04:13.325] Packages needed by future strategies (n = 0): <none>
[18:04:13.326] {
[18:04:13.326]     {
[18:04:13.326]         {
[18:04:13.326]             ...future.startTime <- base::Sys.time()
[18:04:13.326]             {
[18:04:13.326]                 {
[18:04:13.326]                   {
[18:04:13.326]                     base::local({
[18:04:13.326]                       has_future <- base::requireNamespace("future", 
[18:04:13.326]                         quietly = TRUE)
[18:04:13.326]                       if (has_future) {
[18:04:13.326]                         ns <- base::getNamespace("future")
[18:04:13.326]                         version <- ns[[".package"]][["version"]]
[18:04:13.326]                         if (is.null(version)) 
[18:04:13.326]                           version <- utils::packageVersion("future")
[18:04:13.326]                       }
[18:04:13.326]                       else {
[18:04:13.326]                         version <- NULL
[18:04:13.326]                       }
[18:04:13.326]                       if (!has_future || version < "1.8.0") {
[18:04:13.326]                         info <- base::c(r_version = base::gsub("R version ", 
[18:04:13.326]                           "", base::R.version$version.string), 
[18:04:13.326]                           platform = base::sprintf("%s (%s-bit)", 
[18:04:13.326]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:13.326]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:13.326]                             "release", "version")], collapse = " "), 
[18:04:13.326]                           hostname = base::Sys.info()[["nodename"]])
[18:04:13.326]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:04:13.326]                           info)
[18:04:13.326]                         info <- base::paste(info, collapse = "; ")
[18:04:13.326]                         if (!has_future) {
[18:04:13.326]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:13.326]                             info)
[18:04:13.326]                         }
[18:04:13.326]                         else {
[18:04:13.326]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:13.326]                             info, version)
[18:04:13.326]                         }
[18:04:13.326]                         base::stop(msg)
[18:04:13.326]                       }
[18:04:13.326]                     })
[18:04:13.326]                   }
[18:04:13.326]                   ...future.strategy.old <- future::plan("list")
[18:04:13.326]                   options(future.plan = NULL)
[18:04:13.326]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:13.326]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:13.326]                 }
[18:04:13.326]                 ...future.workdir <- getwd()
[18:04:13.326]             }
[18:04:13.326]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:13.326]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:13.326]         }
[18:04:13.326]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:13.326]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:13.326]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:13.326]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:13.326]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:13.326]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:13.326]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:13.326]             base::names(...future.oldOptions))
[18:04:13.326]     }
[18:04:13.326]     if (FALSE) {
[18:04:13.326]     }
[18:04:13.326]     else {
[18:04:13.326]         if (TRUE) {
[18:04:13.326]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:13.326]                 open = "w")
[18:04:13.326]         }
[18:04:13.326]         else {
[18:04:13.326]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:13.326]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:13.326]         }
[18:04:13.326]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:13.326]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:13.326]             base::sink(type = "output", split = FALSE)
[18:04:13.326]             base::close(...future.stdout)
[18:04:13.326]         }, add = TRUE)
[18:04:13.326]     }
[18:04:13.326]     ...future.frame <- base::sys.nframe()
[18:04:13.326]     ...future.conditions <- base::list()
[18:04:13.326]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:13.326]     if (FALSE) {
[18:04:13.326]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:13.326]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:13.326]     }
[18:04:13.326]     ...future.result <- base::tryCatch({
[18:04:13.326]         base::withCallingHandlers({
[18:04:13.326]             ...future.value <- base::withVisible(base::local({
[18:04:13.326]                 1
[18:04:13.326]             }))
[18:04:13.326]             future::FutureResult(value = ...future.value$value, 
[18:04:13.326]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:13.326]                   ...future.rng), globalenv = if (FALSE) 
[18:04:13.326]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:13.326]                     ...future.globalenv.names))
[18:04:13.326]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:13.326]         }, condition = base::local({
[18:04:13.326]             c <- base::c
[18:04:13.326]             inherits <- base::inherits
[18:04:13.326]             invokeRestart <- base::invokeRestart
[18:04:13.326]             length <- base::length
[18:04:13.326]             list <- base::list
[18:04:13.326]             seq.int <- base::seq.int
[18:04:13.326]             signalCondition <- base::signalCondition
[18:04:13.326]             sys.calls <- base::sys.calls
[18:04:13.326]             `[[` <- base::`[[`
[18:04:13.326]             `+` <- base::`+`
[18:04:13.326]             `<<-` <- base::`<<-`
[18:04:13.326]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:13.326]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:13.326]                   3L)]
[18:04:13.326]             }
[18:04:13.326]             function(cond) {
[18:04:13.326]                 is_error <- inherits(cond, "error")
[18:04:13.326]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:13.326]                   NULL)
[18:04:13.326]                 if (is_error) {
[18:04:13.326]                   sessionInformation <- function() {
[18:04:13.326]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:13.326]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:13.326]                       search = base::search(), system = base::Sys.info())
[18:04:13.326]                   }
[18:04:13.326]                   ...future.conditions[[length(...future.conditions) + 
[18:04:13.326]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:13.326]                     cond$call), session = sessionInformation(), 
[18:04:13.326]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:13.326]                   signalCondition(cond)
[18:04:13.326]                 }
[18:04:13.326]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:13.326]                 "immediateCondition"))) {
[18:04:13.326]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:13.326]                   ...future.conditions[[length(...future.conditions) + 
[18:04:13.326]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:13.326]                   if (TRUE && !signal) {
[18:04:13.326]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:13.326]                     {
[18:04:13.326]                       inherits <- base::inherits
[18:04:13.326]                       invokeRestart <- base::invokeRestart
[18:04:13.326]                       is.null <- base::is.null
[18:04:13.326]                       muffled <- FALSE
[18:04:13.326]                       if (inherits(cond, "message")) {
[18:04:13.326]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:13.326]                         if (muffled) 
[18:04:13.326]                           invokeRestart("muffleMessage")
[18:04:13.326]                       }
[18:04:13.326]                       else if (inherits(cond, "warning")) {
[18:04:13.326]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:13.326]                         if (muffled) 
[18:04:13.326]                           invokeRestart("muffleWarning")
[18:04:13.326]                       }
[18:04:13.326]                       else if (inherits(cond, "condition")) {
[18:04:13.326]                         if (!is.null(pattern)) {
[18:04:13.326]                           computeRestarts <- base::computeRestarts
[18:04:13.326]                           grepl <- base::grepl
[18:04:13.326]                           restarts <- computeRestarts(cond)
[18:04:13.326]                           for (restart in restarts) {
[18:04:13.326]                             name <- restart$name
[18:04:13.326]                             if (is.null(name)) 
[18:04:13.326]                               next
[18:04:13.326]                             if (!grepl(pattern, name)) 
[18:04:13.326]                               next
[18:04:13.326]                             invokeRestart(restart)
[18:04:13.326]                             muffled <- TRUE
[18:04:13.326]                             break
[18:04:13.326]                           }
[18:04:13.326]                         }
[18:04:13.326]                       }
[18:04:13.326]                       invisible(muffled)
[18:04:13.326]                     }
[18:04:13.326]                     muffleCondition(cond, pattern = "^muffle")
[18:04:13.326]                   }
[18:04:13.326]                 }
[18:04:13.326]                 else {
[18:04:13.326]                   if (TRUE) {
[18:04:13.326]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:13.326]                     {
[18:04:13.326]                       inherits <- base::inherits
[18:04:13.326]                       invokeRestart <- base::invokeRestart
[18:04:13.326]                       is.null <- base::is.null
[18:04:13.326]                       muffled <- FALSE
[18:04:13.326]                       if (inherits(cond, "message")) {
[18:04:13.326]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:13.326]                         if (muffled) 
[18:04:13.326]                           invokeRestart("muffleMessage")
[18:04:13.326]                       }
[18:04:13.326]                       else if (inherits(cond, "warning")) {
[18:04:13.326]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:13.326]                         if (muffled) 
[18:04:13.326]                           invokeRestart("muffleWarning")
[18:04:13.326]                       }
[18:04:13.326]                       else if (inherits(cond, "condition")) {
[18:04:13.326]                         if (!is.null(pattern)) {
[18:04:13.326]                           computeRestarts <- base::computeRestarts
[18:04:13.326]                           grepl <- base::grepl
[18:04:13.326]                           restarts <- computeRestarts(cond)
[18:04:13.326]                           for (restart in restarts) {
[18:04:13.326]                             name <- restart$name
[18:04:13.326]                             if (is.null(name)) 
[18:04:13.326]                               next
[18:04:13.326]                             if (!grepl(pattern, name)) 
[18:04:13.326]                               next
[18:04:13.326]                             invokeRestart(restart)
[18:04:13.326]                             muffled <- TRUE
[18:04:13.326]                             break
[18:04:13.326]                           }
[18:04:13.326]                         }
[18:04:13.326]                       }
[18:04:13.326]                       invisible(muffled)
[18:04:13.326]                     }
[18:04:13.326]                     muffleCondition(cond, pattern = "^muffle")
[18:04:13.326]                   }
[18:04:13.326]                 }
[18:04:13.326]             }
[18:04:13.326]         }))
[18:04:13.326]     }, error = function(ex) {
[18:04:13.326]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:13.326]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:13.326]                 ...future.rng), started = ...future.startTime, 
[18:04:13.326]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:13.326]             version = "1.8"), class = "FutureResult")
[18:04:13.326]     }, finally = {
[18:04:13.326]         if (!identical(...future.workdir, getwd())) 
[18:04:13.326]             setwd(...future.workdir)
[18:04:13.326]         {
[18:04:13.326]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:13.326]                 ...future.oldOptions$nwarnings <- NULL
[18:04:13.326]             }
[18:04:13.326]             base::options(...future.oldOptions)
[18:04:13.326]             if (.Platform$OS.type == "windows") {
[18:04:13.326]                 old_names <- names(...future.oldEnvVars)
[18:04:13.326]                 envs <- base::Sys.getenv()
[18:04:13.326]                 names <- names(envs)
[18:04:13.326]                 common <- intersect(names, old_names)
[18:04:13.326]                 added <- setdiff(names, old_names)
[18:04:13.326]                 removed <- setdiff(old_names, names)
[18:04:13.326]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:13.326]                   envs[common]]
[18:04:13.326]                 NAMES <- toupper(changed)
[18:04:13.326]                 args <- list()
[18:04:13.326]                 for (kk in seq_along(NAMES)) {
[18:04:13.326]                   name <- changed[[kk]]
[18:04:13.326]                   NAME <- NAMES[[kk]]
[18:04:13.326]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:13.326]                     next
[18:04:13.326]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:13.326]                 }
[18:04:13.326]                 NAMES <- toupper(added)
[18:04:13.326]                 for (kk in seq_along(NAMES)) {
[18:04:13.326]                   name <- added[[kk]]
[18:04:13.326]                   NAME <- NAMES[[kk]]
[18:04:13.326]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:13.326]                     next
[18:04:13.326]                   args[[name]] <- ""
[18:04:13.326]                 }
[18:04:13.326]                 NAMES <- toupper(removed)
[18:04:13.326]                 for (kk in seq_along(NAMES)) {
[18:04:13.326]                   name <- removed[[kk]]
[18:04:13.326]                   NAME <- NAMES[[kk]]
[18:04:13.326]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:13.326]                     next
[18:04:13.326]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:13.326]                 }
[18:04:13.326]                 if (length(args) > 0) 
[18:04:13.326]                   base::do.call(base::Sys.setenv, args = args)
[18:04:13.326]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:13.326]             }
[18:04:13.326]             else {
[18:04:13.326]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:13.326]             }
[18:04:13.326]             {
[18:04:13.326]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:13.326]                   0L) {
[18:04:13.326]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:13.326]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:13.326]                   base::options(opts)
[18:04:13.326]                 }
[18:04:13.326]                 {
[18:04:13.326]                   {
[18:04:13.326]                     NULL
[18:04:13.326]                     RNGkind("Mersenne-Twister")
[18:04:13.326]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:04:13.326]                       inherits = FALSE)
[18:04:13.326]                   }
[18:04:13.326]                   options(future.plan = NULL)
[18:04:13.326]                   if (is.na(NA_character_)) 
[18:04:13.326]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:13.326]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:13.326]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:13.326]                     .init = FALSE)
[18:04:13.326]                 }
[18:04:13.326]             }
[18:04:13.326]         }
[18:04:13.326]     })
[18:04:13.326]     if (TRUE) {
[18:04:13.326]         base::sink(type = "output", split = FALSE)
[18:04:13.326]         if (TRUE) {
[18:04:13.326]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:13.326]         }
[18:04:13.326]         else {
[18:04:13.326]             ...future.result["stdout"] <- base::list(NULL)
[18:04:13.326]         }
[18:04:13.326]         base::close(...future.stdout)
[18:04:13.326]         ...future.stdout <- NULL
[18:04:13.326]     }
[18:04:13.326]     ...future.result$conditions <- ...future.conditions
[18:04:13.326]     ...future.result$finished <- base::Sys.time()
[18:04:13.326]     ...future.result
[18:04:13.326] }
[18:04:13.330] plan(): Setting new future strategy stack:
[18:04:13.330] List of future strategies:
[18:04:13.330] 1. sequential:
[18:04:13.330]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:13.330]    - tweaked: FALSE
[18:04:13.330]    - call: NULL
[18:04:13.331] plan(): nbrOfWorkers() = 1
[18:04:13.333] plan(): Setting new future strategy stack:
[18:04:13.333] List of future strategies:
[18:04:13.333] 1. sequential:
[18:04:13.333]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:13.333]    - tweaked: FALSE
[18:04:13.333]    - call: future::plan("sequential")
[18:04:13.334] plan(): nbrOfWorkers() = 1
[18:04:13.334] SequentialFuture started (and completed)
[18:04:13.335] - Launch lazy future ... done
[18:04:13.335] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 841684e4-6005-644e-b912-57f4ff3ac333
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 841684e4-6005-644e-b912-57f4ff3ac333
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'remove') ...
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[18:04:13.338] getGlobalsAndPackages() ...
[18:04:13.338] Searching for globals...
[18:04:13.339] - globals found: [1] ‘{’
[18:04:13.339] Searching for globals ... DONE
[18:04:13.340] Resolving globals: FALSE
[18:04:13.341] 
[18:04:13.341] 
[18:04:13.342] getGlobalsAndPackages() ... DONE
[18:04:13.345] run() for ‘Future’ ...
[18:04:13.345] - state: ‘created’
[18:04:13.346] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:04:13.346] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:04:13.347] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:04:13.348]   - Field: ‘label’
[18:04:13.348]   - Field: ‘local’
[18:04:13.348]   - Field: ‘owner’
[18:04:13.349]   - Field: ‘envir’
[18:04:13.349]   - Field: ‘packages’
[18:04:13.349]   - Field: ‘gc’
[18:04:13.349]   - Field: ‘conditions’
[18:04:13.349]   - Field: ‘expr’
[18:04:13.350]   - Field: ‘uuid’
[18:04:13.350]   - Field: ‘seed’
[18:04:13.350]   - Field: ‘version’
[18:04:13.350]   - Field: ‘result’
[18:04:13.351]   - Field: ‘asynchronous’
[18:04:13.351]   - Field: ‘calls’
[18:04:13.351]   - Field: ‘globals’
[18:04:13.351]   - Field: ‘stdout’
[18:04:13.351]   - Field: ‘earlySignal’
[18:04:13.352]   - Field: ‘lazy’
[18:04:13.352]   - Field: ‘state’
[18:04:13.352] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:04:13.352] - Launch lazy future ...
[18:04:13.353] Packages needed by the future expression (n = 0): <none>
[18:04:13.353] Packages needed by future strategies (n = 0): <none>
[18:04:13.354] {
[18:04:13.354]     {
[18:04:13.354]         {
[18:04:13.354]             ...future.startTime <- base::Sys.time()
[18:04:13.354]             {
[18:04:13.354]                 {
[18:04:13.354]                   {
[18:04:13.354]                     base::local({
[18:04:13.354]                       has_future <- base::requireNamespace("future", 
[18:04:13.354]                         quietly = TRUE)
[18:04:13.354]                       if (has_future) {
[18:04:13.354]                         ns <- base::getNamespace("future")
[18:04:13.354]                         version <- ns[[".package"]][["version"]]
[18:04:13.354]                         if (is.null(version)) 
[18:04:13.354]                           version <- utils::packageVersion("future")
[18:04:13.354]                       }
[18:04:13.354]                       else {
[18:04:13.354]                         version <- NULL
[18:04:13.354]                       }
[18:04:13.354]                       if (!has_future || version < "1.8.0") {
[18:04:13.354]                         info <- base::c(r_version = base::gsub("R version ", 
[18:04:13.354]                           "", base::R.version$version.string), 
[18:04:13.354]                           platform = base::sprintf("%s (%s-bit)", 
[18:04:13.354]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:13.354]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:13.354]                             "release", "version")], collapse = " "), 
[18:04:13.354]                           hostname = base::Sys.info()[["nodename"]])
[18:04:13.354]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:04:13.354]                           info)
[18:04:13.354]                         info <- base::paste(info, collapse = "; ")
[18:04:13.354]                         if (!has_future) {
[18:04:13.354]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:13.354]                             info)
[18:04:13.354]                         }
[18:04:13.354]                         else {
[18:04:13.354]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:13.354]                             info, version)
[18:04:13.354]                         }
[18:04:13.354]                         base::stop(msg)
[18:04:13.354]                       }
[18:04:13.354]                     })
[18:04:13.354]                   }
[18:04:13.354]                   ...future.strategy.old <- future::plan("list")
[18:04:13.354]                   options(future.plan = NULL)
[18:04:13.354]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:13.354]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:13.354]                 }
[18:04:13.354]                 ...future.workdir <- getwd()
[18:04:13.354]             }
[18:04:13.354]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:13.354]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:13.354]         }
[18:04:13.354]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:13.354]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:13.354]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:13.354]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:13.354]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:13.354]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:13.354]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:13.354]             base::names(...future.oldOptions))
[18:04:13.354]     }
[18:04:13.354]     if (FALSE) {
[18:04:13.354]     }
[18:04:13.354]     else {
[18:04:13.354]         if (TRUE) {
[18:04:13.354]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:13.354]                 open = "w")
[18:04:13.354]         }
[18:04:13.354]         else {
[18:04:13.354]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:13.354]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:13.354]         }
[18:04:13.354]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:13.354]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:13.354]             base::sink(type = "output", split = FALSE)
[18:04:13.354]             base::close(...future.stdout)
[18:04:13.354]         }, add = TRUE)
[18:04:13.354]     }
[18:04:13.354]     ...future.frame <- base::sys.nframe()
[18:04:13.354]     ...future.conditions <- base::list()
[18:04:13.354]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:13.354]     if (FALSE) {
[18:04:13.354]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:13.354]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:13.354]     }
[18:04:13.354]     ...future.result <- base::tryCatch({
[18:04:13.354]         base::withCallingHandlers({
[18:04:13.354]             ...future.value <- base::withVisible(base::local({
[18:04:13.354]                 2
[18:04:13.354]             }))
[18:04:13.354]             future::FutureResult(value = ...future.value$value, 
[18:04:13.354]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:13.354]                   ...future.rng), globalenv = if (FALSE) 
[18:04:13.354]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:13.354]                     ...future.globalenv.names))
[18:04:13.354]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:13.354]         }, condition = base::local({
[18:04:13.354]             c <- base::c
[18:04:13.354]             inherits <- base::inherits
[18:04:13.354]             invokeRestart <- base::invokeRestart
[18:04:13.354]             length <- base::length
[18:04:13.354]             list <- base::list
[18:04:13.354]             seq.int <- base::seq.int
[18:04:13.354]             signalCondition <- base::signalCondition
[18:04:13.354]             sys.calls <- base::sys.calls
[18:04:13.354]             `[[` <- base::`[[`
[18:04:13.354]             `+` <- base::`+`
[18:04:13.354]             `<<-` <- base::`<<-`
[18:04:13.354]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:13.354]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:13.354]                   3L)]
[18:04:13.354]             }
[18:04:13.354]             function(cond) {
[18:04:13.354]                 is_error <- inherits(cond, "error")
[18:04:13.354]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:13.354]                   NULL)
[18:04:13.354]                 if (is_error) {
[18:04:13.354]                   sessionInformation <- function() {
[18:04:13.354]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:13.354]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:13.354]                       search = base::search(), system = base::Sys.info())
[18:04:13.354]                   }
[18:04:13.354]                   ...future.conditions[[length(...future.conditions) + 
[18:04:13.354]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:13.354]                     cond$call), session = sessionInformation(), 
[18:04:13.354]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:13.354]                   signalCondition(cond)
[18:04:13.354]                 }
[18:04:13.354]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:13.354]                 "immediateCondition"))) {
[18:04:13.354]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:13.354]                   ...future.conditions[[length(...future.conditions) + 
[18:04:13.354]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:13.354]                   if (TRUE && !signal) {
[18:04:13.354]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:13.354]                     {
[18:04:13.354]                       inherits <- base::inherits
[18:04:13.354]                       invokeRestart <- base::invokeRestart
[18:04:13.354]                       is.null <- base::is.null
[18:04:13.354]                       muffled <- FALSE
[18:04:13.354]                       if (inherits(cond, "message")) {
[18:04:13.354]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:13.354]                         if (muffled) 
[18:04:13.354]                           invokeRestart("muffleMessage")
[18:04:13.354]                       }
[18:04:13.354]                       else if (inherits(cond, "warning")) {
[18:04:13.354]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:13.354]                         if (muffled) 
[18:04:13.354]                           invokeRestart("muffleWarning")
[18:04:13.354]                       }
[18:04:13.354]                       else if (inherits(cond, "condition")) {
[18:04:13.354]                         if (!is.null(pattern)) {
[18:04:13.354]                           computeRestarts <- base::computeRestarts
[18:04:13.354]                           grepl <- base::grepl
[18:04:13.354]                           restarts <- computeRestarts(cond)
[18:04:13.354]                           for (restart in restarts) {
[18:04:13.354]                             name <- restart$name
[18:04:13.354]                             if (is.null(name)) 
[18:04:13.354]                               next
[18:04:13.354]                             if (!grepl(pattern, name)) 
[18:04:13.354]                               next
[18:04:13.354]                             invokeRestart(restart)
[18:04:13.354]                             muffled <- TRUE
[18:04:13.354]                             break
[18:04:13.354]                           }
[18:04:13.354]                         }
[18:04:13.354]                       }
[18:04:13.354]                       invisible(muffled)
[18:04:13.354]                     }
[18:04:13.354]                     muffleCondition(cond, pattern = "^muffle")
[18:04:13.354]                   }
[18:04:13.354]                 }
[18:04:13.354]                 else {
[18:04:13.354]                   if (TRUE) {
[18:04:13.354]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:13.354]                     {
[18:04:13.354]                       inherits <- base::inherits
[18:04:13.354]                       invokeRestart <- base::invokeRestart
[18:04:13.354]                       is.null <- base::is.null
[18:04:13.354]                       muffled <- FALSE
[18:04:13.354]                       if (inherits(cond, "message")) {
[18:04:13.354]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:13.354]                         if (muffled) 
[18:04:13.354]                           invokeRestart("muffleMessage")
[18:04:13.354]                       }
[18:04:13.354]                       else if (inherits(cond, "warning")) {
[18:04:13.354]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:13.354]                         if (muffled) 
[18:04:13.354]                           invokeRestart("muffleWarning")
[18:04:13.354]                       }
[18:04:13.354]                       else if (inherits(cond, "condition")) {
[18:04:13.354]                         if (!is.null(pattern)) {
[18:04:13.354]                           computeRestarts <- base::computeRestarts
[18:04:13.354]                           grepl <- base::grepl
[18:04:13.354]                           restarts <- computeRestarts(cond)
[18:04:13.354]                           for (restart in restarts) {
[18:04:13.354]                             name <- restart$name
[18:04:13.354]                             if (is.null(name)) 
[18:04:13.354]                               next
[18:04:13.354]                             if (!grepl(pattern, name)) 
[18:04:13.354]                               next
[18:04:13.354]                             invokeRestart(restart)
[18:04:13.354]                             muffled <- TRUE
[18:04:13.354]                             break
[18:04:13.354]                           }
[18:04:13.354]                         }
[18:04:13.354]                       }
[18:04:13.354]                       invisible(muffled)
[18:04:13.354]                     }
[18:04:13.354]                     muffleCondition(cond, pattern = "^muffle")
[18:04:13.354]                   }
[18:04:13.354]                 }
[18:04:13.354]             }
[18:04:13.354]         }))
[18:04:13.354]     }, error = function(ex) {
[18:04:13.354]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:13.354]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:13.354]                 ...future.rng), started = ...future.startTime, 
[18:04:13.354]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:13.354]             version = "1.8"), class = "FutureResult")
[18:04:13.354]     }, finally = {
[18:04:13.354]         if (!identical(...future.workdir, getwd())) 
[18:04:13.354]             setwd(...future.workdir)
[18:04:13.354]         {
[18:04:13.354]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:13.354]                 ...future.oldOptions$nwarnings <- NULL
[18:04:13.354]             }
[18:04:13.354]             base::options(...future.oldOptions)
[18:04:13.354]             if (.Platform$OS.type == "windows") {
[18:04:13.354]                 old_names <- names(...future.oldEnvVars)
[18:04:13.354]                 envs <- base::Sys.getenv()
[18:04:13.354]                 names <- names(envs)
[18:04:13.354]                 common <- intersect(names, old_names)
[18:04:13.354]                 added <- setdiff(names, old_names)
[18:04:13.354]                 removed <- setdiff(old_names, names)
[18:04:13.354]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:13.354]                   envs[common]]
[18:04:13.354]                 NAMES <- toupper(changed)
[18:04:13.354]                 args <- list()
[18:04:13.354]                 for (kk in seq_along(NAMES)) {
[18:04:13.354]                   name <- changed[[kk]]
[18:04:13.354]                   NAME <- NAMES[[kk]]
[18:04:13.354]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:13.354]                     next
[18:04:13.354]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:13.354]                 }
[18:04:13.354]                 NAMES <- toupper(added)
[18:04:13.354]                 for (kk in seq_along(NAMES)) {
[18:04:13.354]                   name <- added[[kk]]
[18:04:13.354]                   NAME <- NAMES[[kk]]
[18:04:13.354]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:13.354]                     next
[18:04:13.354]                   args[[name]] <- ""
[18:04:13.354]                 }
[18:04:13.354]                 NAMES <- toupper(removed)
[18:04:13.354]                 for (kk in seq_along(NAMES)) {
[18:04:13.354]                   name <- removed[[kk]]
[18:04:13.354]                   NAME <- NAMES[[kk]]
[18:04:13.354]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:13.354]                     next
[18:04:13.354]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:13.354]                 }
[18:04:13.354]                 if (length(args) > 0) 
[18:04:13.354]                   base::do.call(base::Sys.setenv, args = args)
[18:04:13.354]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:13.354]             }
[18:04:13.354]             else {
[18:04:13.354]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:13.354]             }
[18:04:13.354]             {
[18:04:13.354]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:13.354]                   0L) {
[18:04:13.354]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:13.354]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:13.354]                   base::options(opts)
[18:04:13.354]                 }
[18:04:13.354]                 {
[18:04:13.354]                   {
[18:04:13.354]                     NULL
[18:04:13.354]                     RNGkind("Mersenne-Twister")
[18:04:13.354]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:04:13.354]                       inherits = FALSE)
[18:04:13.354]                   }
[18:04:13.354]                   options(future.plan = NULL)
[18:04:13.354]                   if (is.na(NA_character_)) 
[18:04:13.354]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:13.354]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:13.354]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:13.354]                     .init = FALSE)
[18:04:13.354]                 }
[18:04:13.354]             }
[18:04:13.354]         }
[18:04:13.354]     })
[18:04:13.354]     if (TRUE) {
[18:04:13.354]         base::sink(type = "output", split = FALSE)
[18:04:13.354]         if (TRUE) {
[18:04:13.354]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:13.354]         }
[18:04:13.354]         else {
[18:04:13.354]             ...future.result["stdout"] <- base::list(NULL)
[18:04:13.354]         }
[18:04:13.354]         base::close(...future.stdout)
[18:04:13.354]         ...future.stdout <- NULL
[18:04:13.354]     }
[18:04:13.354]     ...future.result$conditions <- ...future.conditions
[18:04:13.354]     ...future.result$finished <- base::Sys.time()
[18:04:13.354]     ...future.result
[18:04:13.354] }
[18:04:13.357] plan(): Setting new future strategy stack:
[18:04:13.358] List of future strategies:
[18:04:13.358] 1. sequential:
[18:04:13.358]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:13.358]    - tweaked: FALSE
[18:04:13.358]    - call: NULL
[18:04:13.359] plan(): nbrOfWorkers() = 1
[18:04:13.360] plan(): Setting new future strategy stack:
[18:04:13.361] List of future strategies:
[18:04:13.361] 1. sequential:
[18:04:13.361]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:13.361]    - tweaked: FALSE
[18:04:13.361]    - call: future::plan("sequential")
[18:04:13.362] plan(): nbrOfWorkers() = 1
[18:04:13.362] SequentialFuture started (and completed)
[18:04:13.362] - Launch lazy future ... done
[18:04:13.363] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 841684e4-6005-644e-b912-57f4ff3ac333
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 841684e4-6005-644e-b912-57f4ff3ac333
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'collect-first') ...
[18:04:13.388] resolved() for ‘SequentialFuture’ ...
[18:04:13.388] - state: ‘finished’
[18:04:13.389] - run: FALSE
[18:04:13.389] - result: ‘FutureResult’
[18:04:13.389] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('rscript', 'add') ...
[18:04:13.390] getGlobalsAndPackages() ...
[18:04:13.390] Searching for globals...
[18:04:13.391] - globals found: [1] ‘{’
[18:04:13.392] Searching for globals ... DONE
[18:04:13.392] Resolving globals: FALSE
[18:04:13.392] 
[18:04:13.393] 
[18:04:13.393] getGlobalsAndPackages() ... DONE
[18:04:13.393] run() for ‘Future’ ...
[18:04:13.393] - state: ‘created’
[18:04:13.394] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:04:13.394] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:04:13.395] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:04:13.395]   - Field: ‘label’
[18:04:13.395]   - Field: ‘local’
[18:04:13.395]   - Field: ‘owner’
[18:04:13.395]   - Field: ‘envir’
[18:04:13.396]   - Field: ‘packages’
[18:04:13.396]   - Field: ‘gc’
[18:04:13.396]   - Field: ‘conditions’
[18:04:13.396]   - Field: ‘expr’
[18:04:13.396]   - Field: ‘uuid’
[18:04:13.397]   - Field: ‘seed’
[18:04:13.397]   - Field: ‘version’
[18:04:13.397]   - Field: ‘result’
[18:04:13.397]   - Field: ‘asynchronous’
[18:04:13.397]   - Field: ‘calls’
[18:04:13.398]   - Field: ‘globals’
[18:04:13.398]   - Field: ‘stdout’
[18:04:13.398]   - Field: ‘earlySignal’
[18:04:13.401]   - Field: ‘lazy’
[18:04:13.401]   - Field: ‘state’
[18:04:13.402] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:04:13.402] - Launch lazy future ...
[18:04:13.402] Packages needed by the future expression (n = 0): <none>
[18:04:13.402] Packages needed by future strategies (n = 0): <none>
[18:04:13.403] {
[18:04:13.403]     {
[18:04:13.403]         {
[18:04:13.403]             ...future.startTime <- base::Sys.time()
[18:04:13.403]             {
[18:04:13.403]                 {
[18:04:13.403]                   {
[18:04:13.403]                     base::local({
[18:04:13.403]                       has_future <- base::requireNamespace("future", 
[18:04:13.403]                         quietly = TRUE)
[18:04:13.403]                       if (has_future) {
[18:04:13.403]                         ns <- base::getNamespace("future")
[18:04:13.403]                         version <- ns[[".package"]][["version"]]
[18:04:13.403]                         if (is.null(version)) 
[18:04:13.403]                           version <- utils::packageVersion("future")
[18:04:13.403]                       }
[18:04:13.403]                       else {
[18:04:13.403]                         version <- NULL
[18:04:13.403]                       }
[18:04:13.403]                       if (!has_future || version < "1.8.0") {
[18:04:13.403]                         info <- base::c(r_version = base::gsub("R version ", 
[18:04:13.403]                           "", base::R.version$version.string), 
[18:04:13.403]                           platform = base::sprintf("%s (%s-bit)", 
[18:04:13.403]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:13.403]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:13.403]                             "release", "version")], collapse = " "), 
[18:04:13.403]                           hostname = base::Sys.info()[["nodename"]])
[18:04:13.403]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:04:13.403]                           info)
[18:04:13.403]                         info <- base::paste(info, collapse = "; ")
[18:04:13.403]                         if (!has_future) {
[18:04:13.403]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:13.403]                             info)
[18:04:13.403]                         }
[18:04:13.403]                         else {
[18:04:13.403]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:13.403]                             info, version)
[18:04:13.403]                         }
[18:04:13.403]                         base::stop(msg)
[18:04:13.403]                       }
[18:04:13.403]                     })
[18:04:13.403]                   }
[18:04:13.403]                   ...future.strategy.old <- future::plan("list")
[18:04:13.403]                   options(future.plan = NULL)
[18:04:13.403]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:13.403]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:13.403]                 }
[18:04:13.403]                 ...future.workdir <- getwd()
[18:04:13.403]             }
[18:04:13.403]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:13.403]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:13.403]         }
[18:04:13.403]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:13.403]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:13.403]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:13.403]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:13.403]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:13.403]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:13.403]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:13.403]             base::names(...future.oldOptions))
[18:04:13.403]     }
[18:04:13.403]     if (FALSE) {
[18:04:13.403]     }
[18:04:13.403]     else {
[18:04:13.403]         if (TRUE) {
[18:04:13.403]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:13.403]                 open = "w")
[18:04:13.403]         }
[18:04:13.403]         else {
[18:04:13.403]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:13.403]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:13.403]         }
[18:04:13.403]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:13.403]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:13.403]             base::sink(type = "output", split = FALSE)
[18:04:13.403]             base::close(...future.stdout)
[18:04:13.403]         }, add = TRUE)
[18:04:13.403]     }
[18:04:13.403]     ...future.frame <- base::sys.nframe()
[18:04:13.403]     ...future.conditions <- base::list()
[18:04:13.403]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:13.403]     if (FALSE) {
[18:04:13.403]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:13.403]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:13.403]     }
[18:04:13.403]     ...future.result <- base::tryCatch({
[18:04:13.403]         base::withCallingHandlers({
[18:04:13.403]             ...future.value <- base::withVisible(base::local({
[18:04:13.403]                 2
[18:04:13.403]             }))
[18:04:13.403]             future::FutureResult(value = ...future.value$value, 
[18:04:13.403]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:13.403]                   ...future.rng), globalenv = if (FALSE) 
[18:04:13.403]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:13.403]                     ...future.globalenv.names))
[18:04:13.403]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:13.403]         }, condition = base::local({
[18:04:13.403]             c <- base::c
[18:04:13.403]             inherits <- base::inherits
[18:04:13.403]             invokeRestart <- base::invokeRestart
[18:04:13.403]             length <- base::length
[18:04:13.403]             list <- base::list
[18:04:13.403]             seq.int <- base::seq.int
[18:04:13.403]             signalCondition <- base::signalCondition
[18:04:13.403]             sys.calls <- base::sys.calls
[18:04:13.403]             `[[` <- base::`[[`
[18:04:13.403]             `+` <- base::`+`
[18:04:13.403]             `<<-` <- base::`<<-`
[18:04:13.403]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:13.403]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:13.403]                   3L)]
[18:04:13.403]             }
[18:04:13.403]             function(cond) {
[18:04:13.403]                 is_error <- inherits(cond, "error")
[18:04:13.403]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:13.403]                   NULL)
[18:04:13.403]                 if (is_error) {
[18:04:13.403]                   sessionInformation <- function() {
[18:04:13.403]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:13.403]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:13.403]                       search = base::search(), system = base::Sys.info())
[18:04:13.403]                   }
[18:04:13.403]                   ...future.conditions[[length(...future.conditions) + 
[18:04:13.403]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:13.403]                     cond$call), session = sessionInformation(), 
[18:04:13.403]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:13.403]                   signalCondition(cond)
[18:04:13.403]                 }
[18:04:13.403]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:13.403]                 "immediateCondition"))) {
[18:04:13.403]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:13.403]                   ...future.conditions[[length(...future.conditions) + 
[18:04:13.403]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:13.403]                   if (TRUE && !signal) {
[18:04:13.403]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:13.403]                     {
[18:04:13.403]                       inherits <- base::inherits
[18:04:13.403]                       invokeRestart <- base::invokeRestart
[18:04:13.403]                       is.null <- base::is.null
[18:04:13.403]                       muffled <- FALSE
[18:04:13.403]                       if (inherits(cond, "message")) {
[18:04:13.403]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:13.403]                         if (muffled) 
[18:04:13.403]                           invokeRestart("muffleMessage")
[18:04:13.403]                       }
[18:04:13.403]                       else if (inherits(cond, "warning")) {
[18:04:13.403]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:13.403]                         if (muffled) 
[18:04:13.403]                           invokeRestart("muffleWarning")
[18:04:13.403]                       }
[18:04:13.403]                       else if (inherits(cond, "condition")) {
[18:04:13.403]                         if (!is.null(pattern)) {
[18:04:13.403]                           computeRestarts <- base::computeRestarts
[18:04:13.403]                           grepl <- base::grepl
[18:04:13.403]                           restarts <- computeRestarts(cond)
[18:04:13.403]                           for (restart in restarts) {
[18:04:13.403]                             name <- restart$name
[18:04:13.403]                             if (is.null(name)) 
[18:04:13.403]                               next
[18:04:13.403]                             if (!grepl(pattern, name)) 
[18:04:13.403]                               next
[18:04:13.403]                             invokeRestart(restart)
[18:04:13.403]                             muffled <- TRUE
[18:04:13.403]                             break
[18:04:13.403]                           }
[18:04:13.403]                         }
[18:04:13.403]                       }
[18:04:13.403]                       invisible(muffled)
[18:04:13.403]                     }
[18:04:13.403]                     muffleCondition(cond, pattern = "^muffle")
[18:04:13.403]                   }
[18:04:13.403]                 }
[18:04:13.403]                 else {
[18:04:13.403]                   if (TRUE) {
[18:04:13.403]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:13.403]                     {
[18:04:13.403]                       inherits <- base::inherits
[18:04:13.403]                       invokeRestart <- base::invokeRestart
[18:04:13.403]                       is.null <- base::is.null
[18:04:13.403]                       muffled <- FALSE
[18:04:13.403]                       if (inherits(cond, "message")) {
[18:04:13.403]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:13.403]                         if (muffled) 
[18:04:13.403]                           invokeRestart("muffleMessage")
[18:04:13.403]                       }
[18:04:13.403]                       else if (inherits(cond, "warning")) {
[18:04:13.403]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:13.403]                         if (muffled) 
[18:04:13.403]                           invokeRestart("muffleWarning")
[18:04:13.403]                       }
[18:04:13.403]                       else if (inherits(cond, "condition")) {
[18:04:13.403]                         if (!is.null(pattern)) {
[18:04:13.403]                           computeRestarts <- base::computeRestarts
[18:04:13.403]                           grepl <- base::grepl
[18:04:13.403]                           restarts <- computeRestarts(cond)
[18:04:13.403]                           for (restart in restarts) {
[18:04:13.403]                             name <- restart$name
[18:04:13.403]                             if (is.null(name)) 
[18:04:13.403]                               next
[18:04:13.403]                             if (!grepl(pattern, name)) 
[18:04:13.403]                               next
[18:04:13.403]                             invokeRestart(restart)
[18:04:13.403]                             muffled <- TRUE
[18:04:13.403]                             break
[18:04:13.403]                           }
[18:04:13.403]                         }
[18:04:13.403]                       }
[18:04:13.403]                       invisible(muffled)
[18:04:13.403]                     }
[18:04:13.403]                     muffleCondition(cond, pattern = "^muffle")
[18:04:13.403]                   }
[18:04:13.403]                 }
[18:04:13.403]             }
[18:04:13.403]         }))
[18:04:13.403]     }, error = function(ex) {
[18:04:13.403]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:13.403]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:13.403]                 ...future.rng), started = ...future.startTime, 
[18:04:13.403]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:13.403]             version = "1.8"), class = "FutureResult")
[18:04:13.403]     }, finally = {
[18:04:13.403]         if (!identical(...future.workdir, getwd())) 
[18:04:13.403]             setwd(...future.workdir)
[18:04:13.403]         {
[18:04:13.403]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:13.403]                 ...future.oldOptions$nwarnings <- NULL
[18:04:13.403]             }
[18:04:13.403]             base::options(...future.oldOptions)
[18:04:13.403]             if (.Platform$OS.type == "windows") {
[18:04:13.403]                 old_names <- names(...future.oldEnvVars)
[18:04:13.403]                 envs <- base::Sys.getenv()
[18:04:13.403]                 names <- names(envs)
[18:04:13.403]                 common <- intersect(names, old_names)
[18:04:13.403]                 added <- setdiff(names, old_names)
[18:04:13.403]                 removed <- setdiff(old_names, names)
[18:04:13.403]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:13.403]                   envs[common]]
[18:04:13.403]                 NAMES <- toupper(changed)
[18:04:13.403]                 args <- list()
[18:04:13.403]                 for (kk in seq_along(NAMES)) {
[18:04:13.403]                   name <- changed[[kk]]
[18:04:13.403]                   NAME <- NAMES[[kk]]
[18:04:13.403]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:13.403]                     next
[18:04:13.403]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:13.403]                 }
[18:04:13.403]                 NAMES <- toupper(added)
[18:04:13.403]                 for (kk in seq_along(NAMES)) {
[18:04:13.403]                   name <- added[[kk]]
[18:04:13.403]                   NAME <- NAMES[[kk]]
[18:04:13.403]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:13.403]                     next
[18:04:13.403]                   args[[name]] <- ""
[18:04:13.403]                 }
[18:04:13.403]                 NAMES <- toupper(removed)
[18:04:13.403]                 for (kk in seq_along(NAMES)) {
[18:04:13.403]                   name <- removed[[kk]]
[18:04:13.403]                   NAME <- NAMES[[kk]]
[18:04:13.403]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:13.403]                     next
[18:04:13.403]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:13.403]                 }
[18:04:13.403]                 if (length(args) > 0) 
[18:04:13.403]                   base::do.call(base::Sys.setenv, args = args)
[18:04:13.403]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:13.403]             }
[18:04:13.403]             else {
[18:04:13.403]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:13.403]             }
[18:04:13.403]             {
[18:04:13.403]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:13.403]                   0L) {
[18:04:13.403]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:13.403]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:13.403]                   base::options(opts)
[18:04:13.403]                 }
[18:04:13.403]                 {
[18:04:13.403]                   {
[18:04:13.403]                     NULL
[18:04:13.403]                     RNGkind("Mersenne-Twister")
[18:04:13.403]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:04:13.403]                       inherits = FALSE)
[18:04:13.403]                   }
[18:04:13.403]                   options(future.plan = NULL)
[18:04:13.403]                   if (is.na(NA_character_)) 
[18:04:13.403]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:13.403]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:13.403]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:13.403]                     .init = FALSE)
[18:04:13.403]                 }
[18:04:13.403]             }
[18:04:13.403]         }
[18:04:13.403]     })
[18:04:13.403]     if (TRUE) {
[18:04:13.403]         base::sink(type = "output", split = FALSE)
[18:04:13.403]         if (TRUE) {
[18:04:13.403]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:13.403]         }
[18:04:13.403]         else {
[18:04:13.403]             ...future.result["stdout"] <- base::list(NULL)
[18:04:13.403]         }
[18:04:13.403]         base::close(...future.stdout)
[18:04:13.403]         ...future.stdout <- NULL
[18:04:13.403]     }
[18:04:13.403]     ...future.result$conditions <- ...future.conditions
[18:04:13.403]     ...future.result$finished <- base::Sys.time()
[18:04:13.403]     ...future.result
[18:04:13.403] }
[18:04:13.407] plan(): Setting new future strategy stack:
[18:04:13.407] List of future strategies:
[18:04:13.407] 1. sequential:
[18:04:13.407]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:13.407]    - tweaked: FALSE
[18:04:13.407]    - call: NULL
[18:04:13.408] plan(): nbrOfWorkers() = 1
[18:04:13.410] plan(): Setting new future strategy stack:
[18:04:13.410] List of future strategies:
[18:04:13.410] 1. sequential:
[18:04:13.410]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:13.410]    - tweaked: FALSE
[18:04:13.410]    - call: future::plan("sequential")
[18:04:13.411] plan(): nbrOfWorkers() = 1
[18:04:13.412] SequentialFuture started (and completed)
[18:04:13.412] - Launch lazy future ... done
[18:04:13.412] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 841684e4-6005-644e-b912-57f4ff3ac333
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'reset') ...
*** FutureRegistry('rscript', 'list') ...
list()
> 
> 
> message("*** FutureRegistry() - exceptions ...")
*** FutureRegistry() - exceptions ...
> 
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> f <- future(1)
[18:04:13.415] getGlobalsAndPackages() ...
[18:04:13.415] Searching for globals...
[18:04:13.415] 
[18:04:13.416] Searching for globals ... DONE
[18:04:13.416] - globals: [0] <none>
[18:04:13.416] getGlobalsAndPackages() ... DONE
[18:04:13.417] run() for ‘Future’ ...
[18:04:13.417] - state: ‘created’
[18:04:13.417] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:04:13.418] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:04:13.418] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:04:13.418]   - Field: ‘label’
[18:04:13.418]   - Field: ‘local’
[18:04:13.418]   - Field: ‘owner’
[18:04:13.419]   - Field: ‘envir’
[18:04:13.419]   - Field: ‘packages’
[18:04:13.419]   - Field: ‘gc’
[18:04:13.419]   - Field: ‘conditions’
[18:04:13.419]   - Field: ‘expr’
[18:04:13.420]   - Field: ‘uuid’
[18:04:13.420]   - Field: ‘seed’
[18:04:13.420]   - Field: ‘version’
[18:04:13.420]   - Field: ‘result’
[18:04:13.420]   - Field: ‘asynchronous’
[18:04:13.421]   - Field: ‘calls’
[18:04:13.421]   - Field: ‘globals’
[18:04:13.421]   - Field: ‘stdout’
[18:04:13.421]   - Field: ‘earlySignal’
[18:04:13.421]   - Field: ‘lazy’
[18:04:13.422]   - Field: ‘state’
[18:04:13.422] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:04:13.422] - Launch lazy future ...
[18:04:13.422] Packages needed by the future expression (n = 0): <none>
[18:04:13.423] Packages needed by future strategies (n = 0): <none>
[18:04:13.424] {
[18:04:13.424]     {
[18:04:13.424]         {
[18:04:13.424]             ...future.startTime <- base::Sys.time()
[18:04:13.424]             {
[18:04:13.424]                 {
[18:04:13.424]                   {
[18:04:13.424]                     base::local({
[18:04:13.424]                       has_future <- base::requireNamespace("future", 
[18:04:13.424]                         quietly = TRUE)
[18:04:13.424]                       if (has_future) {
[18:04:13.424]                         ns <- base::getNamespace("future")
[18:04:13.424]                         version <- ns[[".package"]][["version"]]
[18:04:13.424]                         if (is.null(version)) 
[18:04:13.424]                           version <- utils::packageVersion("future")
[18:04:13.424]                       }
[18:04:13.424]                       else {
[18:04:13.424]                         version <- NULL
[18:04:13.424]                       }
[18:04:13.424]                       if (!has_future || version < "1.8.0") {
[18:04:13.424]                         info <- base::c(r_version = base::gsub("R version ", 
[18:04:13.424]                           "", base::R.version$version.string), 
[18:04:13.424]                           platform = base::sprintf("%s (%s-bit)", 
[18:04:13.424]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:13.424]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:13.424]                             "release", "version")], collapse = " "), 
[18:04:13.424]                           hostname = base::Sys.info()[["nodename"]])
[18:04:13.424]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:04:13.424]                           info)
[18:04:13.424]                         info <- base::paste(info, collapse = "; ")
[18:04:13.424]                         if (!has_future) {
[18:04:13.424]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:13.424]                             info)
[18:04:13.424]                         }
[18:04:13.424]                         else {
[18:04:13.424]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:13.424]                             info, version)
[18:04:13.424]                         }
[18:04:13.424]                         base::stop(msg)
[18:04:13.424]                       }
[18:04:13.424]                     })
[18:04:13.424]                   }
[18:04:13.424]                   ...future.strategy.old <- future::plan("list")
[18:04:13.424]                   options(future.plan = NULL)
[18:04:13.424]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:13.424]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:13.424]                 }
[18:04:13.424]                 ...future.workdir <- getwd()
[18:04:13.424]             }
[18:04:13.424]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:13.424]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:13.424]         }
[18:04:13.424]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:13.424]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:13.424]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:13.424]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:13.424]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:13.424]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:13.424]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:13.424]             base::names(...future.oldOptions))
[18:04:13.424]     }
[18:04:13.424]     if (FALSE) {
[18:04:13.424]     }
[18:04:13.424]     else {
[18:04:13.424]         if (TRUE) {
[18:04:13.424]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:13.424]                 open = "w")
[18:04:13.424]         }
[18:04:13.424]         else {
[18:04:13.424]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:13.424]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:13.424]         }
[18:04:13.424]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:13.424]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:13.424]             base::sink(type = "output", split = FALSE)
[18:04:13.424]             base::close(...future.stdout)
[18:04:13.424]         }, add = TRUE)
[18:04:13.424]     }
[18:04:13.424]     ...future.frame <- base::sys.nframe()
[18:04:13.424]     ...future.conditions <- base::list()
[18:04:13.424]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:13.424]     if (FALSE) {
[18:04:13.424]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:13.424]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:13.424]     }
[18:04:13.424]     ...future.result <- base::tryCatch({
[18:04:13.424]         base::withCallingHandlers({
[18:04:13.424]             ...future.value <- base::withVisible(base::local(1))
[18:04:13.424]             future::FutureResult(value = ...future.value$value, 
[18:04:13.424]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:13.424]                   ...future.rng), globalenv = if (FALSE) 
[18:04:13.424]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:13.424]                     ...future.globalenv.names))
[18:04:13.424]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:13.424]         }, condition = base::local({
[18:04:13.424]             c <- base::c
[18:04:13.424]             inherits <- base::inherits
[18:04:13.424]             invokeRestart <- base::invokeRestart
[18:04:13.424]             length <- base::length
[18:04:13.424]             list <- base::list
[18:04:13.424]             seq.int <- base::seq.int
[18:04:13.424]             signalCondition <- base::signalCondition
[18:04:13.424]             sys.calls <- base::sys.calls
[18:04:13.424]             `[[` <- base::`[[`
[18:04:13.424]             `+` <- base::`+`
[18:04:13.424]             `<<-` <- base::`<<-`
[18:04:13.424]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:13.424]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:13.424]                   3L)]
[18:04:13.424]             }
[18:04:13.424]             function(cond) {
[18:04:13.424]                 is_error <- inherits(cond, "error")
[18:04:13.424]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:13.424]                   NULL)
[18:04:13.424]                 if (is_error) {
[18:04:13.424]                   sessionInformation <- function() {
[18:04:13.424]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:13.424]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:13.424]                       search = base::search(), system = base::Sys.info())
[18:04:13.424]                   }
[18:04:13.424]                   ...future.conditions[[length(...future.conditions) + 
[18:04:13.424]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:13.424]                     cond$call), session = sessionInformation(), 
[18:04:13.424]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:13.424]                   signalCondition(cond)
[18:04:13.424]                 }
[18:04:13.424]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:13.424]                 "immediateCondition"))) {
[18:04:13.424]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:13.424]                   ...future.conditions[[length(...future.conditions) + 
[18:04:13.424]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:13.424]                   if (TRUE && !signal) {
[18:04:13.424]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:13.424]                     {
[18:04:13.424]                       inherits <- base::inherits
[18:04:13.424]                       invokeRestart <- base::invokeRestart
[18:04:13.424]                       is.null <- base::is.null
[18:04:13.424]                       muffled <- FALSE
[18:04:13.424]                       if (inherits(cond, "message")) {
[18:04:13.424]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:13.424]                         if (muffled) 
[18:04:13.424]                           invokeRestart("muffleMessage")
[18:04:13.424]                       }
[18:04:13.424]                       else if (inherits(cond, "warning")) {
[18:04:13.424]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:13.424]                         if (muffled) 
[18:04:13.424]                           invokeRestart("muffleWarning")
[18:04:13.424]                       }
[18:04:13.424]                       else if (inherits(cond, "condition")) {
[18:04:13.424]                         if (!is.null(pattern)) {
[18:04:13.424]                           computeRestarts <- base::computeRestarts
[18:04:13.424]                           grepl <- base::grepl
[18:04:13.424]                           restarts <- computeRestarts(cond)
[18:04:13.424]                           for (restart in restarts) {
[18:04:13.424]                             name <- restart$name
[18:04:13.424]                             if (is.null(name)) 
[18:04:13.424]                               next
[18:04:13.424]                             if (!grepl(pattern, name)) 
[18:04:13.424]                               next
[18:04:13.424]                             invokeRestart(restart)
[18:04:13.424]                             muffled <- TRUE
[18:04:13.424]                             break
[18:04:13.424]                           }
[18:04:13.424]                         }
[18:04:13.424]                       }
[18:04:13.424]                       invisible(muffled)
[18:04:13.424]                     }
[18:04:13.424]                     muffleCondition(cond, pattern = "^muffle")
[18:04:13.424]                   }
[18:04:13.424]                 }
[18:04:13.424]                 else {
[18:04:13.424]                   if (TRUE) {
[18:04:13.424]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:13.424]                     {
[18:04:13.424]                       inherits <- base::inherits
[18:04:13.424]                       invokeRestart <- base::invokeRestart
[18:04:13.424]                       is.null <- base::is.null
[18:04:13.424]                       muffled <- FALSE
[18:04:13.424]                       if (inherits(cond, "message")) {
[18:04:13.424]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:13.424]                         if (muffled) 
[18:04:13.424]                           invokeRestart("muffleMessage")
[18:04:13.424]                       }
[18:04:13.424]                       else if (inherits(cond, "warning")) {
[18:04:13.424]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:13.424]                         if (muffled) 
[18:04:13.424]                           invokeRestart("muffleWarning")
[18:04:13.424]                       }
[18:04:13.424]                       else if (inherits(cond, "condition")) {
[18:04:13.424]                         if (!is.null(pattern)) {
[18:04:13.424]                           computeRestarts <- base::computeRestarts
[18:04:13.424]                           grepl <- base::grepl
[18:04:13.424]                           restarts <- computeRestarts(cond)
[18:04:13.424]                           for (restart in restarts) {
[18:04:13.424]                             name <- restart$name
[18:04:13.424]                             if (is.null(name)) 
[18:04:13.424]                               next
[18:04:13.424]                             if (!grepl(pattern, name)) 
[18:04:13.424]                               next
[18:04:13.424]                             invokeRestart(restart)
[18:04:13.424]                             muffled <- TRUE
[18:04:13.424]                             break
[18:04:13.424]                           }
[18:04:13.424]                         }
[18:04:13.424]                       }
[18:04:13.424]                       invisible(muffled)
[18:04:13.424]                     }
[18:04:13.424]                     muffleCondition(cond, pattern = "^muffle")
[18:04:13.424]                   }
[18:04:13.424]                 }
[18:04:13.424]             }
[18:04:13.424]         }))
[18:04:13.424]     }, error = function(ex) {
[18:04:13.424]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:13.424]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:13.424]                 ...future.rng), started = ...future.startTime, 
[18:04:13.424]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:13.424]             version = "1.8"), class = "FutureResult")
[18:04:13.424]     }, finally = {
[18:04:13.424]         if (!identical(...future.workdir, getwd())) 
[18:04:13.424]             setwd(...future.workdir)
[18:04:13.424]         {
[18:04:13.424]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:13.424]                 ...future.oldOptions$nwarnings <- NULL
[18:04:13.424]             }
[18:04:13.424]             base::options(...future.oldOptions)
[18:04:13.424]             if (.Platform$OS.type == "windows") {
[18:04:13.424]                 old_names <- names(...future.oldEnvVars)
[18:04:13.424]                 envs <- base::Sys.getenv()
[18:04:13.424]                 names <- names(envs)
[18:04:13.424]                 common <- intersect(names, old_names)
[18:04:13.424]                 added <- setdiff(names, old_names)
[18:04:13.424]                 removed <- setdiff(old_names, names)
[18:04:13.424]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:13.424]                   envs[common]]
[18:04:13.424]                 NAMES <- toupper(changed)
[18:04:13.424]                 args <- list()
[18:04:13.424]                 for (kk in seq_along(NAMES)) {
[18:04:13.424]                   name <- changed[[kk]]
[18:04:13.424]                   NAME <- NAMES[[kk]]
[18:04:13.424]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:13.424]                     next
[18:04:13.424]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:13.424]                 }
[18:04:13.424]                 NAMES <- toupper(added)
[18:04:13.424]                 for (kk in seq_along(NAMES)) {
[18:04:13.424]                   name <- added[[kk]]
[18:04:13.424]                   NAME <- NAMES[[kk]]
[18:04:13.424]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:13.424]                     next
[18:04:13.424]                   args[[name]] <- ""
[18:04:13.424]                 }
[18:04:13.424]                 NAMES <- toupper(removed)
[18:04:13.424]                 for (kk in seq_along(NAMES)) {
[18:04:13.424]                   name <- removed[[kk]]
[18:04:13.424]                   NAME <- NAMES[[kk]]
[18:04:13.424]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:13.424]                     next
[18:04:13.424]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:13.424]                 }
[18:04:13.424]                 if (length(args) > 0) 
[18:04:13.424]                   base::do.call(base::Sys.setenv, args = args)
[18:04:13.424]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:13.424]             }
[18:04:13.424]             else {
[18:04:13.424]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:13.424]             }
[18:04:13.424]             {
[18:04:13.424]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:13.424]                   0L) {
[18:04:13.424]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:13.424]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:13.424]                   base::options(opts)
[18:04:13.424]                 }
[18:04:13.424]                 {
[18:04:13.424]                   {
[18:04:13.424]                     NULL
[18:04:13.424]                     RNGkind("Mersenne-Twister")
[18:04:13.424]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:04:13.424]                       inherits = FALSE)
[18:04:13.424]                   }
[18:04:13.424]                   options(future.plan = NULL)
[18:04:13.424]                   if (is.na(NA_character_)) 
[18:04:13.424]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:13.424]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:13.424]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:13.424]                     .init = FALSE)
[18:04:13.424]                 }
[18:04:13.424]             }
[18:04:13.424]         }
[18:04:13.424]     })
[18:04:13.424]     if (TRUE) {
[18:04:13.424]         base::sink(type = "output", split = FALSE)
[18:04:13.424]         if (TRUE) {
[18:04:13.424]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:13.424]         }
[18:04:13.424]         else {
[18:04:13.424]             ...future.result["stdout"] <- base::list(NULL)
[18:04:13.424]         }
[18:04:13.424]         base::close(...future.stdout)
[18:04:13.424]         ...future.stdout <- NULL
[18:04:13.424]     }
[18:04:13.424]     ...future.result$conditions <- ...future.conditions
[18:04:13.424]     ...future.result$finished <- base::Sys.time()
[18:04:13.424]     ...future.result
[18:04:13.424] }
[18:04:13.427] plan(): Setting new future strategy stack:
[18:04:13.427] List of future strategies:
[18:04:13.427] 1. sequential:
[18:04:13.427]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:13.427]    - tweaked: FALSE
[18:04:13.427]    - call: NULL
[18:04:13.428] plan(): nbrOfWorkers() = 1
[18:04:13.429] plan(): Setting new future strategy stack:
[18:04:13.430] List of future strategies:
[18:04:13.430] 1. sequential:
[18:04:13.430]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:13.430]    - tweaked: FALSE
[18:04:13.430]    - call: future::plan("sequential")
[18:04:13.431] plan(): nbrOfWorkers() = 1
[18:04:13.431] SequentialFuture started (and completed)
[18:04:13.431] - Launch lazy future ... done
[18:04:13.431] run() for ‘SequentialFuture’ ... done
> FutureRegistry(where = "test", action = "add", future = f)
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 1
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 841684e4-6005-644e-b912-57f4ff3ac333
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "add", future = f), error = identity)
[18:04:13.433] ERROR: Cannot add to ‘test’ registry. SequentialFuture is already registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> 
> FutureRegistry(where = "test", action = "remove", future = f)
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "remove", future = f), error = identity)
[18:04:13.433] ERROR: Cannot remove from ‘test’ registry. SequentialFuture not registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> FutureRegistry(where = "test", action = "reset")
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "<unknown>"), error = identity)
[18:04:13.434] INTERNAL ERROR: Unknown action to ‘test’ registry: <unknown>
> stopifnot(inherits(res, "error"))
> 
> message("*** FutureRegistry() - exceptions ... DONE")
*** FutureRegistry() - exceptions ... DONE
> 
> 
> message("*** FutureRegistry() ... DONE")
*** FutureRegistry() ... DONE
> 
> source("incl/end.R")
[18:04:13.435] plan(): Setting new future strategy stack:
[18:04:13.435] List of future strategies:
[18:04:13.435] 1. FutureStrategy:
[18:04:13.435]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:13.435]    - tweaked: FALSE
[18:04:13.435]    - call: future::plan(oplan)
[18:04:13.459] plan(): nbrOfWorkers() = 1
> 
