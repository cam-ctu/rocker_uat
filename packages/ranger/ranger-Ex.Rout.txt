
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ranger"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ranger')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("csrf")
> ### * csrf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: csrf
> ### Title: Case-specific random forests.
> ### Aliases: csrf
> 
> ### ** Examples
> 
> ## Split in training and test data
> train.idx <- sample(nrow(iris), 2/3 * nrow(iris))
> iris.train <- iris[train.idx, ]
> iris.test <- iris[-train.idx, ]
> 
> ## Run case-specific RF
> csrf(Species ~ ., training_data = iris.train, test_data = iris.test, 
+      params1 = list(num.trees = 50, mtry = 4), 
+      params2 = list(num.trees = 5))
 [1] setosa     setosa     setosa     setosa     setosa     setosa    
 [7] setosa     setosa     setosa     setosa     setosa     setosa    
[13] setosa     setosa     setosa     setosa     versicolor versicolor
[19] versicolor versicolor versicolor versicolor versicolor versicolor
[25] versicolor versicolor virginica  versicolor versicolor versicolor
[31] versicolor versicolor versicolor versicolor versicolor virginica 
[37] virginica  versicolor virginica  virginica  virginica  virginica 
[43] virginica  virginica  virginica  virginica  virginica  virginica 
[49] virginica  virginica 
Levels: setosa versicolor virginica
> 
> 
> 
> 
> cleanEx()
> nameEx("deforest")
> ### * deforest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: deforest
> ### Title: Deforesting a random forest
> ### Aliases: deforest deforest.ranger
> 
> ### ** Examples
> 
> ## Example of deforesting a random forest
> rfo <- ranger(Species ~ ., data = iris, probability = TRUE, num.trees = 100)
> dfo <- deforest(rfo, which.trees = c(1, 3, 5))
Warning: Many of the components of a typical "ranger" object are not available after deforestation and are instead replaced with `NA` (e.g., out-of-bag (OOB) predictions, variable importance scores (if requested), and OOB-based error metrics).
> dfo  # same as `rfo` but with trees 1, 3, and 5 removed
Ranger (deforested) result

Note that many of the components of a typical "ranger" object are not available after deforestation and are instead replaced with `NA` (e.g., out-of-bag (OOB) predictions, variable importance scores (if requested), and OOB-based error metrics) 

Type:                             Probability estimation 
Number of trees:                  97 
Sample size:                      150 
Number of independent variables:  4 
Mtry:                             2 
Target node size:                 10 
Variable importance mode:         none 
Splitrule:                        gini 
OOB prediction error (Brier s.):  NA 
> 
> ## Sanity check
> preds.rfo <- predict(rfo, data = iris, predict.all = TRUE)$predictions
> preds.dfo <- predict(dfo, data = iris, predict.all = TRUE)$predictions
> identical(preds.rfo[, , -c(1, 3, 5)], y = preds.dfo)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("getTerminalNodeIDs")
> ### * getTerminalNodeIDs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getTerminalNodeIDs
> ### Title: Get terminal node IDs (deprecated)
> ### Aliases: getTerminalNodeIDs
> 
> ### ** Examples
> 
> rf <- ranger(Species ~ ., data = iris, num.trees = 5, write.forest = TRUE)
> getTerminalNodeIDs(rf, iris)
Warning in getTerminalNodeIDs(rf, iris) :
  Function getTerminalNodeIDs() deprecated, calling predict().
       [,1] [,2] [,3] [,4] [,5]
  [1,]    1    1    1    1    1
  [2,]    1    1    1    1    1
  [3,]    1    1    1    1    1
  [4,]    1    1    1    1    1
  [5,]    1    1    1    1    1
  [6,]    1    1    1    1    1
  [7,]    1    1    1    1    1
  [8,]    1    1    1    1    1
  [9,]    1    1    1    1    1
 [10,]    1    1    1    1    1
 [11,]    1    1    1    1    1
 [12,]    1    1    1    1    1
 [13,]    1    1    1    1    1
 [14,]    1    1    1    1    1
 [15,]    1    1    1    1    1
 [16,]    1    1    1    1    1
 [17,]    1    1    1    1    1
 [18,]    1    1    1    1    1
 [19,]    1    1    1    1    1
 [20,]    1    1    1    1    1
 [21,]    1    1    1    1    1
 [22,]    1    1    1    1    1
 [23,]    1    1    1    1    1
 [24,]    1    1    1    1    1
 [25,]    1    1    1    1    1
 [26,]    1    1    1    1    1
 [27,]    1    1    1    1    1
 [28,]    1    1    1    1    1
 [29,]    1    1    1    1    1
 [30,]    1    1    1    1    1
 [31,]    1    1    1    1    1
 [32,]    1    1    1    1    1
 [33,]    1    1    1    1    1
 [34,]    1    1    1    1    1
 [35,]    1    1    1    1    1
 [36,]    1    1    1    1    1
 [37,]    1    1    1    1    1
 [38,]    1    1    1    1    1
 [39,]    1    1    1    1    1
 [40,]    1    1    1    1    1
 [41,]    1    1    1    1    1
 [42,]    1    1    1    1    1
 [43,]    1    1    1    1    1
 [44,]    1    1    1    1    1
 [45,]    1    1    1    1    1
 [46,]    1    1    1    1    1
 [47,]    1    1    1    1    1
 [48,]    1    1    1    1    1
 [49,]    1    1    1    1    1
 [50,]    1    1    1    1    1
 [51,]   13    7    7    5    5
 [52,]   13    9    7    5    5
 [53,]   13    7   15    5    9
 [54,]   13    9    5    5    5
 [55,]   13    9    7    5    5
 [56,]   13    9    5    5    5
 [57,]   13    9    7    5    5
 [58,]   13    9    5    5    5
 [59,]   13    9    7    5    5
 [60,]   13    9    5    5    5
 [61,]   13    9    5    5    5
 [62,]   13    9    5    5    5
 [63,]   13    9    5    5    5
 [64,]   13    9    5    5    5
 [65,]   13    9    5    5    5
 [66,]   13    9    7    5    5
 [67,]   13    9    5    5    5
 [68,]   13    9    5    5    5
 [69,]   13    9    5    5    5
 [70,]   13    9    5    5    5
 [71,]   11   19   13    9    8
 [72,]   13    9    5    5    5
 [73,]   13   13   15    5    9
 [74,]   13    9    5    5    5
 [75,]   13    9    7    5    5
 [76,]   13    9    7    5    5
 [77,]   13    7    7    5    9
 [78,]   16   13   16    6    8
 [79,]   13    9    5    5    5
 [80,]   13    9    5    5    5
 [81,]   13    9    5    5    5
 [82,]   13    9    5    5    5
 [83,]   13    9    5    5    5
 [84,]   13   17    5    6    8
 [85,]   13    9    5    5    5
 [86,]   13    9    5    5    5
 [87,]   13    9    7    5    5
 [88,]   13    9    7    5    5
 [89,]   13    9    5    5    5
 [90,]   13    9    5    5    5
 [91,]   13    9    5    5    5
 [92,]   13    9    5    5    5
 [93,]   13    9    5    5    5
 [94,]   13    9    5    5    5
 [95,]   13    9    5    5    5
 [96,]   13    9    5    5    5
 [97,]   13    9    5    5    5
 [98,]   13    9    5    5    5
 [99,]   13    9    5    5    5
[100,]   13    9    5    5    5
[101,]    8   20   12    8    8
[102,]   12   15    9    8    8
[103,]    8    8   12    8    8
[104,]    8   15   12   10    8
[105,]    8   15   12    8    8
[106,]    8    8   12    8    8
[107,]   15   10    9    5    6
[108,]    8    8   12   10    8
[109,]    8   15   12   10    8
[110,]    8    8   12    8    8
[111,]    8   20   12    8    8
[112,]    8   15   12    8    8
[113,]    8    8   12    8    8
[114,]   12   15    9    8    8
[115,]   12   15    9    8    8
[116,]    8   20   12    8    8
[117,]    8   15   12   10    8
[118,]    8    8   12    8    8
[119,]    8    8   12    8    8
[120,]   13   13    5    6    9
[121,]    8    8   12    8    8
[122,]   11   15    9    8    8
[123,]    8    8   12    8    8
[124,]    8   15   12   10    8
[125,]    8   20   12    8    8
[126,]    8    8   12   10    8
[127,]    8   15    9   10    8
[128,]    8   15    9   10    8
[129,]    8   15   12    8    8
[130,]    6    8   15    6    8
[131,]    8    8   12    8    8
[132,]    8    8   12    8    8
[133,]    8   15   12    8    8
[134,]   13   18   15    6   10
[135,]   10   17    5    6   10
[136,]    8    8   12    8    8
[137,]    8   20   12    8    8
[138,]    8   15   12   10    8
[139,]   11   15    9    9    8
[140,]    8    8   12    8    8
[141,]    8   15   12    8    8
[142,]    8    8   12    8    8
[143,]   12   15    9    8    8
[144,]    8    8   12    8    8
[145,]    8   20   12    8    8
[146,]    8   15   12    8    8
[147,]    8   15   12    8    8
[148,]    8   15   12    8    8
[149,]    8   20   14    8    8
[150,]   12   15    9    9    8
> 
> 
> 
> cleanEx()
> nameEx("importance_pvalues")
> ### * importance_pvalues
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: importance_pvalues
> ### Title: ranger variable importance p-values
> ### Aliases: importance_pvalues
> 
> ### ** Examples
> 
> ## Janitza's p-values with corrected Gini importance
> n <- 50
> p <- 400
> dat <- data.frame(y = factor(rbinom(n, 1, .5)), replicate(p, runif(n)))
> rf.sim <- ranger(y ~ ., dat, importance = "impurity_corrected")
> importance_pvalues(rf.sim, method = "janitza")
        importance      pvalue
X1   -2.396082e-02 0.760663507
X2   -1.839638e-02 0.715639810
X3    1.577673e-02 0.305687204
X4   -2.632188e-02 0.798578199
X5    1.051018e-02 0.367298578
X6   -5.291823e-02 0.931279621
X7   -3.707733e-03 0.552132701
X8   -1.177327e-02 0.654028436
X9   -3.601711e-02 0.869668246
X10   3.857143e-03 0.447867299
X11   3.058299e-02 0.165876777
X12  -4.156974e-02 0.895734597
X13  -6.378871e-02 0.950236967
X14  -6.517802e-03 0.582938389
X15   1.022949e-02 0.369668246
X16  -6.139988e-03 0.578199052
X17   1.171495e-02 0.348341232
X18  -3.171139e-02 0.843601896
X19   2.355776e-02 0.248815166
X20   1.740578e-02 0.296208531
X21   1.025322e-01 0.016587678
X22  -2.401808e-02 0.765402844
X23  -4.936667e-03 0.563981043
X24  -1.117992e-02 0.644549763
X25  -2.079272e-03 0.528436019
X26  -4.326716e-02 0.902843602
X27   1.665726e-01 0.002369668
X28  -4.730616e-02 0.919431280
X29   3.465694e-03 0.457345972
X30   2.231113e-02 0.251184834
X31  -1.162252e-02 0.649289100
X32   2.524224e-02 0.225118483
X33  -2.395446e-02 0.758293839
X34  -1.135572e-02 0.646919431
X35  -1.952226e-02 0.722748815
X36   1.468865e-01 0.002369668
X37   4.886580e-02 0.080568720
X38  -6.582329e-02 0.954976303
X39   3.646274e-03 0.450236967
X40  -2.914636e-02 0.829383886
X41  -6.094566e-02 0.943127962
X42  -3.555182e-03 0.547393365
X43   7.296483e-03 0.407582938
X44   6.627252e-02 0.045023697
X45   1.899046e-02 0.284360190
X46   2.154380e-02 0.253554502
X47  -3.336835e-02 0.853080569
X48   1.174277e-02 0.348341232
X49  -5.010418e-03 0.568720379
X50   1.792110e-03 0.473933649
X51  -9.950134e-02 0.981042654
X52   2.456394e-02 0.229857820
X53  -2.075744e-02 0.732227488
X54  -3.068702e-03 0.542654028
X55   3.826087e-03 0.447867299
X56  -2.566169e-02 0.786729858
X57  -5.558125e-02 0.936018957
X58  -3.805350e-02 0.883886256
X59  -4.392865e-02 0.907582938
X60   4.219289e-03 0.447867299
X61  -4.456970e-03 0.556872038
X62   5.214228e-02 0.071090047
X63  -1.272092e-01 0.988151659
X64   2.364488e-02 0.248815166
X65   1.161023e-02 0.353080569
X66  -2.143688e-02 0.746445498
X67  -7.005494e-03 0.587677725
X68   1.758490e-02 0.293838863
X69  -2.666605e-03 0.535545024
X70   2.962250e-02 0.168246445
X71   1.064005e-02 0.367298578
X72   3.320589e-02 0.149289100
X73  -1.354592e-03 0.523696682
X74   3.266540e-02 0.151658768
X75   6.782051e-03 0.417061611
X76  -3.926500e-02 0.886255924
X77  -2.810575e-02 0.822274882
X78  -2.120444e-02 0.744075829
X79  -8.667273e-03 0.613744076
X80   1.757857e-02 0.293838863
X81   2.979068e-03 0.459715640
X82   7.232788e-02 0.035545024
X83  -3.173854e-02 0.845971564
X84   3.907877e-02 0.116113744
X85  -7.181092e-02 0.964454976
X86   2.960074e-02 0.168246445
X87  -1.233300e-02 0.656398104
X88   1.003663e-03 0.485781991
X89  -3.316999e-02 0.850710900
X90   6.510046e-03 0.419431280
X91  -7.511190e-03 0.599526066
X92  -2.448399e-02 0.767772512
X93  -2.540770e-02 0.779620853
X94   1.953117e-02 0.277251185
X95   8.432777e-03 0.393364929
X96  -2.928540e-02 0.831753555
X97  -4.580972e-02 0.914691943
X98   1.793683e-03 0.473933649
X99   1.540704e-02 0.305687204
X100  1.524587e-02 0.308056872
X101  4.572307e-02 0.087677725
X102 -2.679559e-02 0.803317536
X103  6.311418e-02 0.056872038
X104 -1.072222e-02 0.635071090
X105 -1.746369e-02 0.706161137
X106 -4.307311e-03 0.554502370
X107  7.596014e-02 0.030805687
X108 -2.748490e-02 0.810426540
X109  2.362837e-02 0.248815166
X110  3.984561e-03 0.447867299
X111 -8.940325e-03 0.616113744
X112 -1.640063e-02 0.696682464
X113 -8.604507e-03 0.611374408
X114  7.256381e-03 0.409952607
X115 -6.336601e-02 0.945497630
X116 -7.292868e-02 0.966824645
X117  6.370926e-03 0.419431280
X118  2.101233e-02 0.263033175
X119  1.642784e-02 0.303317536
X120 -2.639664e-02 0.800947867
X121 -2.555786e-02 0.784360190
X122  4.778084e-03 0.440758294
X123 -2.225296e-02 0.748815166
X124  1.377630e-01 0.004739336
X125 -3.085896e-02 0.836492891
X126 -3.725572e-02 0.881516588
X127  6.378931e-02 0.049763033
X128  5.793197e-03 0.424170616
X129  2.005810e-02 0.274881517
X130  4.214289e-02 0.101895735
X131 -2.101608e-03 0.533175355
X132  2.079209e-02 0.267772512
X133 -1.415639e-02 0.677725118
X134 -2.773559e-02 0.815165877
X135 -3.122811e-02 0.838862559
X136  2.166845e-02 0.253554502
X137  1.274978e-01 0.011848341
X138 -3.124579e-04 0.507109005
X139 -1.514475e-02 0.687203791
X140  3.404109e-02 0.144549763
X141 -3.355131e-02 0.855450237
X142  5.721161e-02 0.063981043
X143 -4.757236e-03 0.559241706
X144  1.555556e-03 0.473933649
X145 -3.573842e-02 0.867298578
X146 -4.519944e-02 0.912322275
X147 -2.879845e-02 0.827014218
X148  6.106606e-02 0.056872038
X149 -3.510840e-02 0.864928910
X150  6.404233e-03 0.419431280
X151  9.619048e-03 0.376777251
X152 -4.271280e-02 0.900473934
X153  1.304850e-01 0.004739336
X154  7.169063e-03 0.409952607
X155 -2.587449e-02 0.791469194
X156 -2.727124e-02 0.808056872
X157  4.780415e-02 0.080568720
X158 -6.773588e-02 0.962085308
X159 -5.919119e-02 0.938388626
X160 -3.491275e-02 0.860189573
X161 -2.795238e-03 0.540284360
X162  1.123955e-02 0.355450237
X163  4.717949e-03 0.443127962
X164  4.238990e-02 0.101895735
X165 -9.572950e-03 0.623222749
X166 -9.450938e-03 0.618483412
X167 -1.404372e-02 0.675355450
X168  4.518026e-03 0.443127962
X169  3.930476e-03 0.447867299
X170 -7.502485e-02 0.969194313
X171 -1.274363e-02 0.663507109
X172  1.124031e-02 0.355450237
X173  1.772231e-02 0.293838863
X174 -2.038933e-04 0.502369668
X175 -2.087140e-03 0.530805687
X176 -2.782171e-03 0.537914692
X177  9.587308e-03 0.376777251
X178  1.269964e-02 0.338862559
X179  1.956015e-02 0.277251185
X180  1.301515e-02 0.336492891
X181  3.776748e-03 0.447867299
X182 -4.448280e-02 0.909952607
X183  2.528109e-02 0.225118483
X184 -9.777427e-03 0.625592417
X185  7.135867e-02 0.037914692
X186 -6.382319e-04 0.509478673
X187  3.362975e-02 0.144549763
X188 -3.504896e-02 0.862559242
X189  4.462422e-02 0.090047393
X190 -1.719370e-02 0.703791469
X191  2.035912e-04 0.500000000
X192 -2.086575e-02 0.734597156
X193 -1.527505e-02 0.694312796
X194 -1.087364e-02 0.637440758
X195 -8.370426e-03 0.606635071
X196  6.114912e-02 0.056872038
X197  7.819600e-03 0.398104265
X198 -1.696104e-02 0.701421801
X199 -3.637476e-02 0.874407583
X200  1.443706e-02 0.322274882
X201  2.449123e-02 0.232227488
X202  6.060606e-03 0.424170616
X203  3.114114e-02 0.163507109
X204  9.400753e-02 0.023696682
X205 -9.696657e-02 0.978672986
X206  2.147062e-02 0.253554502
X207 -1.164107e-02 0.651658768
X208  8.528889e-03 0.390995261
X209  1.025455e-01 0.016587678
X210  2.047619e-03 0.473933649
X211 -3.088235e-04 0.504739336
X212 -2.838390e-02 0.824644550
X213 -1.269390e-02 0.661137441
X214 -9.560879e-03 0.620853081
X215  1.931928e-02 0.281990521
X216  2.735084e-02 0.191943128
X217  3.478615e-02 0.142180095
X218 -2.754702e-02 0.812796209
X219  6.857143e-03 0.417061611
X220  1.566605e-02 0.305687204
X221  1.642963e-02 0.303317536
X222 -7.123237e-03 0.590047393
X223 -9.373795e-02 0.976303318
X224 -1.930688e-02 0.718009479
X225 -1.390332e-01 0.997630332
X226 -2.571331e-02 0.789099526
X227  2.382857e-03 0.466824645
X228  3.032356e-03 0.459715640
X229  1.245913e-01 0.014218009
X230  2.538458e-02 0.225118483
X231  1.969566e-02 0.277251185
X232 -2.392695e-02 0.755924171
X233  3.821244e-02 0.116113744
X234  7.836533e-02 0.030805687
X235 -2.101453e-02 0.739336493
X236 -2.369446e-02 0.753554502
X237  6.857143e-03 0.417061611
X238  1.681522e-03 0.473933649
X239  2.353023e-02 0.248815166
X240  3.855977e-02 0.116113744
X241 -3.413195e-02 0.857819905
X242  9.650476e-02 0.023696682
X243  1.841003e-02 0.284360190
X244 -5.997735e-02 0.940758294
X245 -2.622707e-02 0.796208531
X246  2.503045e-02 0.225118483
X247 -1.017572e-01 0.983412322
X248 -5.318823e-03 0.571090047
X249 -9.798413e-03 0.630331754
X250 -5.120488e-02 0.926540284
X251  4.206104e-02 0.101895735
X252 -7.983977e-03 0.604265403
X253 -3.598890e-03 0.549763033
X254 -2.704332e-02 0.805687204
X255 -1.161214e-01 0.985781991
X256  3.281059e-02 0.151658768
X257 -2.455344e-02 0.770142180
X258 -2.039444e-02 0.729857820
X259 -1.518751e-02 0.689573460
X260 -1.391869e-02 0.670616114
X261  7.436658e-03 0.402843602
X262  7.532468e-03 0.400473934
X263 -6.356489e-02 0.947867299
X264  1.531590e-02 0.305687204
X265 -2.602797e-02 0.793838863
X266 -6.755935e-02 0.959715640
X267  1.594373e-02 0.305687204
X268 -6.648909e-02 0.957345972
X269 -2.542500e-02 0.781990521
X270 -4.935580e-02 0.921800948
X271  6.527354e-03 0.417061611
X272  2.988831e-02 0.168246445
X273 -9.289731e-02 0.973933649
X274  2.761060e-02 0.187203791
X275 -1.242391e-02 0.658767773
X276 -6.227725e-03 0.580568720
X277 -1.506795e-02 0.684834123
X278  7.713693e-03 0.400473934
X279 -3.608299e-02 0.872037915
X280 -1.797870e-02 0.710900474
X281  2.722244e-02 0.194312796
X282  9.190476e-03 0.383886256
X283 -1.349961e-03 0.521327014
X284  1.159254e-02 0.353080569
X285  2.472506e-02 0.227488152
X286  2.106250e-02 0.260663507
X287 -3.505429e-03 0.545023697
X288  3.337632e-02 0.146919431
X289 -2.256167e-02 0.751184834
X290 -1.031009e-02 0.632701422
X291  1.011494e-02 0.369668246
X292  2.394965e-02 0.244075829
X293 -7.285714e-03 0.592417062
X294 -5.082885e-02 0.924170616
X295 -4.004197e-02 0.888625592
X296  1.216291e-02 0.345971564
X297  3.213870e-02 0.151658768
X298 -4.945714e-03 0.566350711
X299 -3.154856e-02 0.841232227
X300  1.173164e-02 0.348341232
X301  2.159514e-02 0.253554502
X302 -1.287700e-01 0.995260664
X303  2.434336e-03 0.466824645
X304 -1.506270e-02 0.682464455
X305  4.594748e-02 0.085308057
X306 -3.213064e-02 0.848341232
X307 -1.275181e-01 0.990521327
X308  3.760013e-02 0.118483412
X309 -7.717647e-03 0.601895735
X310 -6.981858e-04 0.511848341
X311 -2.005770e-02 0.725118483
X312 -1.111833e-02 0.642180095
X313 -1.777137e-02 0.708530806
X314  1.107824e-01 0.016587678
X315  5.607093e-03 0.428909953
X316  3.805568e-02 0.116113744
X317 -2.459587e-02 0.772511848
X318  7.188939e-02 0.035545024
X319  7.100078e-02 0.037914692
X320  1.820168e-02 0.286729858
X321 -3.001499e-02 0.834123223
X322 -4.079655e-02 0.893364929
X323 -4.670462e-02 0.917061611
X324  2.560208e-02 0.215639810
X325  1.046837e-01 0.016587678
X326 -1.524493e-02 0.691943128
X327  3.566740e-02 0.135071090
X328 -6.440644e-02 0.952606635
X329 -2.538537e-02 0.777251185
X330 -3.647513e-02 0.876777251
X331 -2.776602e-02 0.817535545
X332 -4.173012e-02 0.898104265
X333 -7.397403e-03 0.597156398
X334  3.055863e-02 0.165876777
X335 -9.235808e-02 0.971563981
X336  4.361964e-03 0.445497630
X337  5.462862e-02 0.068720379
X338  1.159978e-02 0.353080569
X339  3.292010e-02 0.151658768
X340 -5.697934e-03 0.575829384
X341 -3.683282e-02 0.879146919
X342 -4.015723e-02 0.890995261
X343  1.675201e-01 0.002369668
X344 -5.536205e-02 0.933649289
X345 -9.796171e-03 0.627962085
X346  1.369389e-02 0.334123223
X347 -2.098545e-02 0.736966825
X348 -1.096225e-02 0.639810427
X349 -1.475701e-03 0.526066351
X350  3.436518e-02 0.142180095
X351 -1.188630e-03 0.518957346
X352  2.147377e-02 0.253554502
X353 -8.475979e-03 0.609004739
X354  7.790183e-03 0.398104265
X355  5.239676e-02 0.071090047
X356  5.714286e-03 0.424170616
X357  4.164530e-03 0.447867299
X358 -1.377435e-02 0.668246445
X359 -1.275713e-01 0.992890995
X360 -1.948997e-01 1.000000000
X361  2.863344e-02 0.175355450
X362 -1.343136e-02 0.665876777
X363 -1.487952e-02 0.680094787
X364  1.966863e-02 0.277251185
X365  1.766667e-03 0.473933649
X366 -8.385470e-04 0.514218009
X367 -2.777884e-02 0.819905213
X368 -1.146425e-03 0.516587678
X369 -5.648485e-03 0.573459716
X370  1.871426e-02 0.284360190
X371 -1.652359e-02 0.699052133
X372  2.267406e-02 0.248815166
X373 -7.350188e-03 0.594786730
X374 -4.808261e-03 0.561611374
X375  2.098522e-02 0.265402844
X376 -4.387133e-02 0.905213270
X377  1.806996e-02 0.289099526
X378  1.648782e-02 0.303317536
X379  1.488512e-02 0.319905213
X380  5.475048e-02 0.068720379
X381 -6.868132e-03 0.585308057
X382  1.172477e-05 0.500000000
X383  1.724415e-02 0.296208531
X384  1.541639e-02 0.305687204
X385 -2.398828e-02 0.763033175
X386 -2.109387e-02 0.741706161
X387  1.576094e-02 0.305687204
X388  6.687833e-02 0.042654028
X389  1.746061e-02 0.296208531
X390  3.888512e-02 0.116113744
X391 -1.935634e-02 0.720379147
X392 -1.813661e-02 0.713270142
X393 -2.025326e-02 0.727488152
X394 -5.131340e-02 0.928909953
X395  3.481991e-02 0.142180095
X396 -2.497079e-02 0.774881517
X397  4.582000e-02 0.085308057
X398 -1.398903e-02 0.672985782
X399  3.867888e-02 0.116113744
X400  4.163721e-02 0.104265403
> 
> ## Permutation p-values 
> ## Not run: 
> ##D rf.iris <- ranger(Species ~ ., data = iris, importance = 'permutation')
> ##D importance_pvalues(rf.iris, method = "altmann", formula = Species ~ ., data = iris)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("predict.ranger")
> ### * predict.ranger
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict.ranger
> ### Title: Ranger prediction
> ### Aliases: predict.ranger
> 
> ### ** Examples
> 
> ## Classification forest
> ranger(Species ~ ., data = iris)
Ranger result

Call:
 ranger(Species ~ ., data = iris) 

Type:                             Classification 
Number of trees:                  500 
Sample size:                      150 
Number of independent variables:  4 
Mtry:                             2 
Target node size:                 1 
Variable importance mode:         none 
Splitrule:                        gini 
OOB prediction error:             4.00 % 
> train.idx <- sample(nrow(iris), 2/3 * nrow(iris))
> iris.train <- iris[train.idx, ]
> iris.test <- iris[-train.idx, ]
> rg.iris <- ranger(Species ~ ., data = iris.train)
> pred.iris <- predict(rg.iris, data = iris.test)
> table(iris.test$Species, pred.iris$predictions)
            
             setosa versicolor virginica
  setosa         16          0         0
  versicolor      0         18         1
  virginica       0          1        14
> 
> ## Quantile regression forest
> rf <- ranger(mpg ~ ., mtcars[1:26, ], quantreg = TRUE)
> pred <- predict(rf, mtcars[27:32, ], type = "quantiles", quantiles = c(0.1, 0.5, 0.9))
> pred$predictions
     quantile= 0.1 quantile= 0.5 quantile= 0.9
[1,]          21.0          22.8         32.40
[2,]          21.0          22.8         32.40
[3,]          13.3          17.8         27.61
[4,]          15.2          21.0         22.80
[5,]          13.3          14.3         21.00
[6,]          21.0          22.8         32.40
> 
> ## Quantile regression forest with user-specified function
> rf <- ranger(mpg ~ ., mtcars[1:26, ], quantreg = TRUE)
> pred <- predict(rf, mtcars[27:32, ], type = "quantiles", 
+                 what = function(x) sample(x, 10, replace = TRUE))
> pred$predictions
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
[1,] 21.0 27.3 21.5 32.4 30.4 30.4 21.5 33.9 32.4  30.4
[2,] 27.3 21.5 21.0 24.4 32.4 21.0 22.8 30.4 22.8  21.0
[3,] 18.7 14.7 27.3 14.7 13.3 17.3 13.3 21.5 19.2  22.8
[4,] 14.3 14.3 17.8 24.4 21.0 21.0 22.8 19.2 21.4  21.0
[5,] 15.2 21.5 15.2 13.3 13.3 17.8 10.4 14.7 13.3  14.3
[6,] 22.8 21.0 21.0 32.4 32.4 13.3 22.8 27.3 19.2  22.8
> 
> 
> 
> 
> cleanEx()
> nameEx("ranger")
> ### * ranger
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ranger
> ### Title: Ranger
> ### Aliases: ranger
> 
> ### ** Examples
> 
> ## Classification forest with default settings
> ranger(Species ~ ., data = iris)
Ranger result

Call:
 ranger(Species ~ ., data = iris) 

Type:                             Classification 
Number of trees:                  500 
Sample size:                      150 
Number of independent variables:  4 
Mtry:                             2 
Target node size:                 1 
Variable importance mode:         none 
Splitrule:                        gini 
OOB prediction error:             4.00 % 
> 
> ## Prediction
> train.idx <- sample(nrow(iris), 2/3 * nrow(iris))
> iris.train <- iris[train.idx, ]
> iris.test <- iris[-train.idx, ]
> rg.iris <- ranger(Species ~ ., data = iris.train)
> pred.iris <- predict(rg.iris, data = iris.test)
> table(iris.test$Species, pred.iris$predictions)
            
             setosa versicolor virginica
  setosa         16          0         0
  versicolor      0         18         1
  virginica       0          1        14
> 
> ## Quantile regression forest
> rf <- ranger(mpg ~ ., mtcars[1:26, ], quantreg = TRUE)
> pred <- predict(rf, mtcars[27:32, ], type = "quantiles")
> pred$predictions
     quantile= 0.1 quantile= 0.5 quantile= 0.9
[1,]          21.0          22.8         32.40
[2,]          21.0          22.8         32.40
[3,]          13.3          17.8         27.61
[4,]          15.2          21.0         22.80
[5,]          13.3          14.3         21.00
[6,]          21.0          22.8         32.40
> 
> ## Variable importance
> rg.iris <- ranger(Species ~ ., data = iris, importance = "impurity")
> rg.iris$variable.importance
Sepal.Length  Sepal.Width Petal.Length  Petal.Width 
   10.076342     2.338404    43.735248    43.036379 
> 
> ## Survival forest
> require(survival)
Loading required package: survival
> rg.veteran <- ranger(Surv(time, status) ~ ., data = veteran)
> plot(rg.veteran$unique.death.times, rg.veteran$survival[1,])
> 
> ## Alternative interfaces (same results)
> ranger(dependent.variable.name = "Species", data = iris)
Ranger result

Call:
 ranger(dependent.variable.name = "Species", data = iris) 

Type:                             Classification 
Number of trees:                  500 
Sample size:                      150 
Number of independent variables:  4 
Mtry:                             2 
Target node size:                 1 
Variable importance mode:         none 
Splitrule:                        gini 
OOB prediction error:             4.00 % 
> ranger(y = iris[, 5], x = iris[, -5])
Ranger result

Call:
 ranger(y = iris[, 5], x = iris[, -5]) 

Type:                             Classification 
Number of trees:                  500 
Sample size:                      150 
Number of independent variables:  4 
Mtry:                             2 
Target node size:                 1 
Variable importance mode:         none 
Splitrule:                        gini 
OOB prediction error:             4.67 % 
> 
> ## Not run: 
> ##D ## Use GenABEL interface to read Plink data into R and grow a classification forest
> ##D ## The ped and map files are not included
> ##D library(GenABEL)
> ##D convert.snp.ped("data.ped", "data.map", "data.raw")
> ##D dat.gwaa <- load.gwaa.data("data.pheno", "data.raw")
> ##D phdata(dat.gwaa)$trait <- factor(phdata(dat.gwaa)$trait)
> ##D ranger(trait ~ ., data = dat.gwaa)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:survival’

> nameEx("treeInfo")
> ### * treeInfo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: treeInfo
> ### Title: Tree information in human readable format
> ### Aliases: treeInfo
> 
> ### ** Examples
> 
> rf <- ranger(Species ~ ., data = iris)
> treeInfo(rf, 1)
   nodeID leftChild rightChild splitvarID splitvarName splitval terminal
1       0         1          2          3  Petal.Width     0.80    FALSE
2       1        NA         NA         NA         <NA>       NA     TRUE
3       2         3          4          3  Petal.Width     1.75    FALSE
4       3         5          6          0 Sepal.Length     7.05    FALSE
5       4         7          8          0 Sepal.Length     6.00    FALSE
6       5         9         10          2 Petal.Length     5.35    FALSE
7       6        NA         NA         NA         <NA>       NA     TRUE
8       7        11         12          2 Petal.Length     4.90    FALSE
9       8        NA         NA         NA         <NA>       NA     TRUE
10      9        13         14          3  Petal.Width     1.65    FALSE
11     10        NA         NA         NA         <NA>       NA     TRUE
12     11        NA         NA         NA         <NA>       NA     TRUE
13     12        NA         NA         NA         <NA>       NA     TRUE
14     13        NA         NA         NA         <NA>       NA     TRUE
15     14        15         16          2 Petal.Length     4.75    FALSE
16     15        NA         NA         NA         <NA>       NA     TRUE
17     16        NA         NA         NA         <NA>       NA     TRUE
   prediction
1        <NA>
2      setosa
3        <NA>
4        <NA>
5        <NA>
6        <NA>
7   virginica
8        <NA>
9   virginica
10       <NA>
11  virginica
12 versicolor
13  virginica
14 versicolor
15       <NA>
16  virginica
17 versicolor
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.35 0.283 1.332 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
