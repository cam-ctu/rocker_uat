
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "tidyselect"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('tidyselect')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("eval_relocate")
> ### * eval_relocate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: eval_relocate
> ### Title: Evaluate an expression to relocate variables
> ### Aliases: eval_relocate
> 
> ### ** Examples
> 
> library(rlang)
> 
> # Interpret defused code as a request to relocate
> x <- expr(c(mpg, disp))
> after <- expr(wt)
> eval_relocate(x, mtcars, after = after)
 cyl   hp drat   wt  mpg disp qsec   vs   am gear carb 
   2    4    5    6    1    3    7    8    9   10   11 
> 
> # Supplying neither `before` nor `after` will move the selection to the
> # left-hand side
> eval_relocate(x, mtcars)
 mpg disp  cyl   hp drat   wt qsec   vs   am gear carb 
   1    3    2    4    5    6    7    8    9   10   11 
> 
> # Within a function, use `enquo()` to defuse a single argument.
> # Note that `before` and `after` must also be defused with `enquo()`.
> my_relocator <- function(x, expr, before = NULL, after = NULL) {
+   eval_relocate(enquo(expr), x, before = enquo(before), after = enquo(after))
+ }
> 
> my_relocator(mtcars, vs, before = hp)
 mpg  cyl disp   vs   hp drat   wt qsec   am gear carb 
   1    2    3    8    4    5    6    7    9   10   11 
> 
> # Here is an example of using `eval_relocate()` to implement `relocate()`.
> # Note that the dots are passed on as a defused call to `c(...)`.
> relocate <- function(.x, ..., .before = NULL, .after = NULL) {
+   pos <- eval_relocate(
+     expr(c(...)),
+     .x,
+     before = enquo(.before),
+     after = enquo(.after)
+   )
+   set_names(.x[pos], names(pos))
+ }
> 
> relocate(mtcars, vs, .before = hp)
                     mpg cyl  disp vs  hp drat    wt  qsec am gear carb
Mazda RX4           21.0   6 160.0  0 110 3.90 2.620 16.46  1    4    4
Mazda RX4 Wag       21.0   6 160.0  0 110 3.90 2.875 17.02  1    4    4
Datsun 710          22.8   4 108.0  1  93 3.85 2.320 18.61  1    4    1
Hornet 4 Drive      21.4   6 258.0  1 110 3.08 3.215 19.44  0    3    1
Hornet Sportabout   18.7   8 360.0  0 175 3.15 3.440 17.02  0    3    2
Valiant             18.1   6 225.0  1 105 2.76 3.460 20.22  0    3    1
Duster 360          14.3   8 360.0  0 245 3.21 3.570 15.84  0    3    4
Merc 240D           24.4   4 146.7  1  62 3.69 3.190 20.00  0    4    2
Merc 230            22.8   4 140.8  1  95 3.92 3.150 22.90  0    4    2
Merc 280            19.2   6 167.6  1 123 3.92 3.440 18.30  0    4    4
Merc 280C           17.8   6 167.6  1 123 3.92 3.440 18.90  0    4    4
Merc 450SE          16.4   8 275.8  0 180 3.07 4.070 17.40  0    3    3
Merc 450SL          17.3   8 275.8  0 180 3.07 3.730 17.60  0    3    3
Merc 450SLC         15.2   8 275.8  0 180 3.07 3.780 18.00  0    3    3
Cadillac Fleetwood  10.4   8 472.0  0 205 2.93 5.250 17.98  0    3    4
Lincoln Continental 10.4   8 460.0  0 215 3.00 5.424 17.82  0    3    4
Chrysler Imperial   14.7   8 440.0  0 230 3.23 5.345 17.42  0    3    4
Fiat 128            32.4   4  78.7  1  66 4.08 2.200 19.47  1    4    1
Honda Civic         30.4   4  75.7  1  52 4.93 1.615 18.52  1    4    2
Toyota Corolla      33.9   4  71.1  1  65 4.22 1.835 19.90  1    4    1
Toyota Corona       21.5   4 120.1  1  97 3.70 2.465 20.01  0    3    1
Dodge Challenger    15.5   8 318.0  0 150 2.76 3.520 16.87  0    3    2
AMC Javelin         15.2   8 304.0  0 150 3.15 3.435 17.30  0    3    2
Camaro Z28          13.3   8 350.0  0 245 3.73 3.840 15.41  0    3    4
Pontiac Firebird    19.2   8 400.0  0 175 3.08 3.845 17.05  0    3    2
Fiat X1-9           27.3   4  79.0  1  66 4.08 1.935 18.90  1    4    1
Porsche 914-2       26.0   4 120.3  0  91 4.43 2.140 16.70  1    5    2
Lotus Europa        30.4   4  95.1  1 113 3.77 1.513 16.90  1    5    2
Ford Pantera L      15.8   8 351.0  0 264 4.22 3.170 14.50  1    5    4
Ferrari Dino        19.7   6 145.0  0 175 3.62 2.770 15.50  1    5    6
Maserati Bora       15.0   8 301.0  0 335 3.54 3.570 14.60  1    5    8
Volvo 142E          21.4   4 121.0  1 109 4.11 2.780 18.60  1    4    2
> relocate(mtcars, starts_with("d"), .after = last_col())
                     mpg cyl  hp    wt  qsec vs am gear carb  disp drat
Mazda RX4           21.0   6 110 2.620 16.46  0  1    4    4 160.0 3.90
Mazda RX4 Wag       21.0   6 110 2.875 17.02  0  1    4    4 160.0 3.90
Datsun 710          22.8   4  93 2.320 18.61  1  1    4    1 108.0 3.85
Hornet 4 Drive      21.4   6 110 3.215 19.44  1  0    3    1 258.0 3.08
Hornet Sportabout   18.7   8 175 3.440 17.02  0  0    3    2 360.0 3.15
Valiant             18.1   6 105 3.460 20.22  1  0    3    1 225.0 2.76
Duster 360          14.3   8 245 3.570 15.84  0  0    3    4 360.0 3.21
Merc 240D           24.4   4  62 3.190 20.00  1  0    4    2 146.7 3.69
Merc 230            22.8   4  95 3.150 22.90  1  0    4    2 140.8 3.92
Merc 280            19.2   6 123 3.440 18.30  1  0    4    4 167.6 3.92
Merc 280C           17.8   6 123 3.440 18.90  1  0    4    4 167.6 3.92
Merc 450SE          16.4   8 180 4.070 17.40  0  0    3    3 275.8 3.07
Merc 450SL          17.3   8 180 3.730 17.60  0  0    3    3 275.8 3.07
Merc 450SLC         15.2   8 180 3.780 18.00  0  0    3    3 275.8 3.07
Cadillac Fleetwood  10.4   8 205 5.250 17.98  0  0    3    4 472.0 2.93
Lincoln Continental 10.4   8 215 5.424 17.82  0  0    3    4 460.0 3.00
Chrysler Imperial   14.7   8 230 5.345 17.42  0  0    3    4 440.0 3.23
Fiat 128            32.4   4  66 2.200 19.47  1  1    4    1  78.7 4.08
Honda Civic         30.4   4  52 1.615 18.52  1  1    4    2  75.7 4.93
Toyota Corolla      33.9   4  65 1.835 19.90  1  1    4    1  71.1 4.22
Toyota Corona       21.5   4  97 2.465 20.01  1  0    3    1 120.1 3.70
Dodge Challenger    15.5   8 150 3.520 16.87  0  0    3    2 318.0 2.76
AMC Javelin         15.2   8 150 3.435 17.30  0  0    3    2 304.0 3.15
Camaro Z28          13.3   8 245 3.840 15.41  0  0    3    4 350.0 3.73
Pontiac Firebird    19.2   8 175 3.845 17.05  0  0    3    2 400.0 3.08
Fiat X1-9           27.3   4  66 1.935 18.90  1  1    4    1  79.0 4.08
Porsche 914-2       26.0   4  91 2.140 16.70  0  1    5    2 120.3 4.43
Lotus Europa        30.4   4 113 1.513 16.90  1  1    5    2  95.1 3.77
Ford Pantera L      15.8   8 264 3.170 14.50  0  1    5    4 351.0 4.22
Ferrari Dino        19.7   6 175 2.770 15.50  0  1    5    6 145.0 3.62
Maserati Bora       15.0   8 335 3.570 14.60  0  1    5    8 301.0 3.54
Volvo 142E          21.4   4 109 2.780 18.60  1  1    4    2 121.0 4.11
> 
> 
> 
> cleanEx()

detaching ‘package:rlang’

> nameEx("eval_select")
> ### * eval_select
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: eval_rename
> ### Title: Evaluate an expression with tidyselect semantics
> ### Aliases: eval_rename eval_select
> 
> ### ** Examples
> 
> library(rlang)
> 
> # Interpret defused code as selection:
> x <- expr(mpg:cyl)
> eval_select(x, mtcars)
mpg cyl 
  1   2 
> 
> # Interpret defused code as a renaming selection. All inputs must
> # be named within `c()`:
> try(eval_rename(expr(mpg), mtcars))
Error : All renaming inputs must be named.
> eval_rename(expr(c(foo = mpg)), mtcars)
foo 
  1 
> 
> 
> # Within a function, use `enquo()` to defuse one argument:
> my_function <- function(x, expr) {
+   eval_select(enquo(expr), x)
+ }
> 
> # If your function takes dots, evaluate a defused call to `c(...)`
> # with `expr(c(...))`:
> my_function <- function(.x, ...) {
+   eval_select(expr(c(...)), .x)
+ }
> 
> # If your function takes dots and a named argument, use `{{ }}`
> # inside the defused expression to tunnel it inside the tidyselect DSL:
> my_function <- function(.x, .expr, ...) {
+   eval_select(expr(c({{ .expr }}, ...)), .x)
+ }
> 
> # Note that the trick above works because `expr({{ arg }})` is the
> # same as `enquo(arg)`.
> 
> 
> # The evaluators return a named vector of locations. Here are
> # examples of using these location vectors to implement `select()`
> # and `rename()`:
> select <- function(.x, ...) {
+   pos <- eval_select(expr(c(...)), .x)
+   set_names(.x[pos], names(pos))
+ }
> rename <- function(.x, ...) {
+   pos <- eval_rename(expr(c(...)), .x)
+   names(.x)[pos] <- names(pos)
+   .x
+ }
> 
> select(mtcars, mpg:cyl)
                     mpg cyl
Mazda RX4           21.0   6
Mazda RX4 Wag       21.0   6
Datsun 710          22.8   4
Hornet 4 Drive      21.4   6
Hornet Sportabout   18.7   8
Valiant             18.1   6
Duster 360          14.3   8
Merc 240D           24.4   4
Merc 230            22.8   4
Merc 280            19.2   6
Merc 280C           17.8   6
Merc 450SE          16.4   8
Merc 450SL          17.3   8
Merc 450SLC         15.2   8
Cadillac Fleetwood  10.4   8
Lincoln Continental 10.4   8
Chrysler Imperial   14.7   8
Fiat 128            32.4   4
Honda Civic         30.4   4
Toyota Corolla      33.9   4
Toyota Corona       21.5   4
Dodge Challenger    15.5   8
AMC Javelin         15.2   8
Camaro Z28          13.3   8
Pontiac Firebird    19.2   8
Fiat X1-9           27.3   4
Porsche 914-2       26.0   4
Lotus Europa        30.4   4
Ford Pantera L      15.8   8
Ferrari Dino        19.7   6
Maserati Bora       15.0   8
Volvo 142E          21.4   4
> rename(mtcars, foo = mpg)
                     foo cyl  disp  hp drat    wt  qsec vs am gear carb
Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
> 
> 
> 
> cleanEx()

detaching ‘package:rlang’

> nameEx("poke_vars")
> ### * poke_vars
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: poke_vars
> ### Title: Replace or get current variables
> ### Aliases: poke_vars scoped_vars with_vars has_vars
> ### Keywords: internal
> 
> ### ** Examples
> 
> poke_vars(letters)
> peek_vars()
 [1] "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s"
[20] "t" "u" "v" "w" "x" "y" "z"
> 
> # Now that the variables are registered, the helpers can figure out
> # the locations of elements within the variable vector:
> all_of(c("d", "z"))
[1]  4 26
> 
> # In a function be sure to restore the previous variables. An exit
> # hook is the best way to do it:
> fn <- function(vars) {
+   old <- poke_vars(vars)
+   on.exit(poke_vars(old))
+ 
+   all_of("d")
+ }
> fn(letters)
[1] 4
> fn(letters[3:5])
[1] 2
> 
> # The previous variables are still registered after fn() was
> # called:
> peek_vars()
 [1] "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s"
[20] "t" "u" "v" "w" "x" "y" "z"
> 
> 
> # It is recommended to use the scoped variant as it restores the
> # state automatically when the function returns:
> fn <- function(vars) {
+   scoped_vars(vars)
+   starts_with("r")
+ }
> fn(c("red", "blue", "rose"))
[1] 1 3
> 
> # The with_vars() helper makes it easy to pass an expression that
> # should be evaluated in a variable context. Thanks to lazy
> # evaluation, you can just pass the expression argument from your
> # wrapper to with_vars():
> fn <- function(expr) {
+   vars <- c("red", "blue", "rose")
+   with_vars(vars, expr)
+ }
> fn(starts_with("r"))
[1] 1 3
> 
> 
> 
> cleanEx()
> nameEx("vars_pull")
> ### * vars_pull
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vars_pull
> ### Title: Select variable
> ### Aliases: vars_pull
> ### Keywords: internal
> 
> ### ** Examples
> 
> # It takes its argument by expression:
> vars_pull(letters, c)
[1] "c"
> 
> # Negative numbers select from the end:
> vars_pull(letters, -3)
[1] "x"
> 
> # You can unquote variables:
> var <- 10
> vars_pull(letters, !!var)
[1] "j"
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.759 0.029 0.819 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
