
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start,load-only.R")
[19:05:31.672] Set package option ‘parallelly.availableCores.methods’
[19:05:31.674] Environment variable ‘R_PARALLELLY_AVAILABLECORES_METHODS’ not set
[19:05:31.675] Set package option ‘parallelly.availableCores.fallback’
[19:05:31.675] Environment variable ‘R_PARALLELLY_AVAILABLECORES_FALLBACK’ not set
[19:05:31.675] Set package option ‘parallelly.availableCores.min’
[19:05:31.676] Environment variable ‘R_PARALLELLY_AVAILABLECORES_MIN’ not set
[19:05:31.676] Set package option ‘parallelly.availableCores.system’
[19:05:31.677] Environment variable ‘R_PARALLELLY_AVAILABLECORES_SYSTEM’ not set
[19:05:31.677] Set package option ‘parallelly.availableCores.logical’
[19:05:31.677] Environment variable ‘R_PARALLELLY_AVAILABLECORES_LOGICAL’ not set
[19:05:31.678] Set package option ‘parallelly.availableCores.omit’
[19:05:31.678] Environment variable ‘R_PARALLELLY_AVAILABLECORES_OMIT’ not set
[19:05:31.678] Set package option ‘parallelly.availableWorkers.methods’
[19:05:31.679] Environment variable ‘R_PARALLELLY_AVAILABLEWORKERS_METHODS’ not set
[19:05:31.679] Set package option ‘parallelly.maxWorkers.localhost’
[19:05:31.680] Environment variable ‘R_PARALLELLY_MAXWORKERS_LOCALHOST’ not set
[19:05:31.680] Set package option ‘parallelly.maxWorkers.localhost.ignore’
[19:05:31.680] Environment variable ‘R_PARALLELLY_MAXWORKERS_LOCALHOST_IGNORE’ not set
[19:05:31.681] Set package option ‘parallelly.fork.enable’
[19:05:31.681] Environment variable ‘R_PARALLELLY_FORK_ENABLE’ not set
[19:05:31.681] Set package option ‘parallelly.supportsMulticore.disableOn’
[19:05:31.682] Environment variable ‘R_PARALLELLY_SUPPORTSMULTICORE_DISABLEON’ not set
[19:05:31.682] Set package option ‘parallelly.supportsMulticore.unstable’
[19:05:31.683] Environment variable ‘R_PARALLELLY_SUPPORTSMULTICORE_UNSTABLE’ not set
[19:05:31.683] Set package option ‘parallelly.makeNodePSOCK.setup_strategy’
[19:05:31.683] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_SETUP_STRATEGY’ not set
[19:05:31.684] Set package option ‘parallelly.makeNodePSOCK.validate’
[19:05:31.684] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_VALIDATE’ not set
[19:05:31.685] Set package option ‘parallelly.makeNodePSOCK.connectTimeout’
[19:05:31.685] R_PARALLELLY_MAKENODEPSOCK_CONNECTTIMEOUT=‘120’
[19:05:31.685] Coercing from character to numeric: ‘120’
[19:05:31.686] => options(“parallelly.makeNodePSOCK.connectTimeout” = ‘120’) [n=1, mode=double]
[19:05:31.686] Set package option ‘parallelly.makeNodePSOCK.timeout’
[19:05:31.687] R_PARALLELLY_MAKENODEPSOCK_TIMEOUT=‘120’
[19:05:31.687] Coercing from character to numeric: ‘120’
[19:05:31.687] => options(“parallelly.makeNodePSOCK.timeout” = ‘120’) [n=1, mode=double]
[19:05:31.688] Set package option ‘parallelly.makeNodePSOCK.useXDR’
[19:05:31.688] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_USEXDR’ not set
[19:05:31.688] Set package option ‘parallelly.makeNodePSOCK.socketOptions’
[19:05:31.689] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_SOCKETOPTIONS’ not set
[19:05:31.689] Set package option ‘parallelly.makeNodePSOCK.rshcmd’
[19:05:31.690] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_RSHCMD’ not set
[19:05:31.690] Set package option ‘parallelly.makeNodePSOCK.rshopts’
[19:05:31.691] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_RSHOPTS’ not set
[19:05:31.691] Set package option ‘parallelly.makeNodePSOCK.tries’
[19:05:31.691] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_TRIES’ not set
[19:05:31.692] Set package option ‘parallelly.makeNodePSOCK.tries.delay’
[19:05:31.692] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_TRIES_DELAY’ not set
[19:05:31.692] Set package option ‘parallelly.makeNodePSOCK.rscript_label’
[19:05:31.693] R_PARALLELLY_MAKENODEPSOCK_RSCRIPT_LABEL=‘parallelly/tests/utils.R:99adafdbb12a:rstudio:354396’
[19:05:31.693] => options(“parallelly.makeNodePSOCK.rscript_label” = ‘parallelly/tests/utils.R:99adafdbb12a:rstudio:354396’) [n=1, mode=character]
[19:05:31.693] Set package option ‘parallelly.makeNodePSOCK.sessionInfo.pkgs’
[19:05:31.694] R_PARALLELLY_MAKENODEPSOCK_SESSIONINFO_PKGS=‘TRUE’
[19:05:31.694] => options(“parallelly.makeNodePSOCK.sessionInfo.pkgs” = ‘TRUE’) [n=1, mode=character]
[19:05:31.694] Set package option ‘parallelly.makeNodePSOCK.autoKill’
[19:05:31.695] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_AUTOKILL’ not set
[19:05:31.695] Set package option ‘parallelly.makeNodePSOCK.master.localhost.hostname’
[19:05:31.696] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_MASTER_LOCALHOST_HOSTNAME’ not set
[19:05:31.696] Set package option ‘parallelly.makeNodePSOCK.port.increment’
[19:05:31.696] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_PORT_INCREMENT’ not set
[19:05:31.698] parallelly-specific environment variables:
- R_PARALLELLY_MAKENODEPSOCK_CONNECTTIMEOUT=‘120’
- R_PARALLELLY_MAKENODEPSOCK_RSCRIPT_LABEL=‘parallelly/tests/utils.R:99adafdbb12a:rstudio:354396’
- R_PARALLELLY_MAKENODEPSOCK_SESSIONINFO_PKGS=‘TRUE’
- R_PARALLELLY_MAKENODEPSOCK_TIMEOUT=‘120’
> 
> message("*** utils ...")
*** utils ...
> 
> message("*** hpaste() ...")
*** hpaste() ...
> 
> # Some vectors
> x <- 1:6
> y <- 10:1
> z <- LETTERS[x]
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Abbreviation of output vector
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> printf("x = %s.\n", hpaste(x))
x = 1, 2, 3, 4, 5, 6.
> ## x = 1, 2, 3, ..., 6.
> 
> printf("x = %s.\n", hpaste(x, maxHead = 2))
x = 1, 2, ..., 6.
> ## x = 1, 2, ..., 6.
> 
> printf("x = %s.\n", hpaste(x, maxHead = 3)) # Default
x = 1, 2, 3, ..., 6.
> ## x = 1, 2, 3, ..., 6.
> 
> # It will never output 1, 2, 3, 4, ..., 6
> printf("x = %s.\n", hpaste(x, maxHead = 4))
x = 1, 2, 3, 4, 5, 6.
> ## x = 1, 2, 3, 4, 5 and 6.
> 
> # Showing the tail
> printf("x = %s.\n", hpaste(x, maxHead = 1, maxTail = 2))
x = 1, ..., 5, 6.
> ## x = 1, ..., 5, 6.
> 
> # Turning off abbreviation
> printf("y = %s.\n", hpaste(y, maxHead = Inf))
y = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1.
> ## y = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
> 
> ## ...or simply
> printf("y = %s.\n", paste(y, collapse = ", "))
y = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1.
> ## y = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
> 
> # Change last separator
> printf("x = %s.\n", hpaste(x, lastCollapse = " and "))
x = 1, 2, 3, 4, 5 and 6.
> ## x = 1, 2, 3, 4, 5 and 6.
> 
> # No collapse
> stopifnot(all(hpaste(x, collapse = NULL) == x))
> 
> # Empty input
> stopifnot(identical(hpaste(character(0)), character(0)))
> 
> message("*** hpaste() ... DONE")
*** hpaste() ... DONE
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # debug()
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> message("*** mdebug() ...")
*** mdebug() ...
> 
> mdebug("Hello #", 1)
[19:05:31.728] Hello #1
> mdebugf("Hello #%d", 1)
[19:05:31.728] Hello #1
> options(parallelly.debug = TRUE)
> 
> mdebug("Hello #", 2)
[19:05:31.728] Hello #2
> mdebugf("Hello #%d", 2)
[19:05:31.729] Hello #2
> options(parallelly.debug = FALSE)
> 
> mdebug("Hello #", 3)
> mdebugf("Hello #%d", 3)
> 
> message("*** mdebug() ... DONE")
*** mdebug() ... DONE
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # pid_exists()
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> message("*** pid_exists() ...")
*** pid_exists() ...
> options(parallelly.debug = TRUE)
> 
> pid <- Sys.getpid()
> printf("Current PID: %d\n", pid)
Current PID: 354396
> 
> exists <- pid_exists(pid)
[19:05:31.729] Attempting to find a working pid_exists_*() function ...
Call: tools::pskill(354396, signal = 0L)
[1] TRUE
Call: tools::pskill(354396, signal = 0L)
[1] TRUE
[19:05:31.730] - success
[19:05:31.730] Attempting to find a working pid_exists_*() function ... done
> printf("Does it exist: %s\n", exists)
Does it exist: TRUE
> 
> ## Either pid_exists() works and return TRUE here, or it fails
> ## to query the process information at all in case it returns NA
> ## However, it should never return FALSE.
> stopifnot(is.logical(exists), length(exists) == 1L,
+           isTRUE(exists) || is.na(exists))
> 
> message("*** pid_exists() ... DONE")
*** pid_exists() ... DONE
> 
> message("*** inRCmdCheck() ...")
*** inRCmdCheck() ...
> cat(sprintf("R CMD check is running: %s\n", inRCmdCheck()))
R CMD check is running: FALSE
> message("*** inRCmdCheck() ... DONE")
*** inRCmdCheck() ... DONE
> 
> message("*** utils ... DONE")
*** utils ... DONE
> 
> source("incl/end.R")
> 
