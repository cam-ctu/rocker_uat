
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "covr"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('covr')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("code_coverage")
> ### * code_coverage
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: code_coverage
> ### Title: Calculate coverage of code directly
> ### Aliases: code_coverage
> 
> ### ** Examples
> 
> source <- "add <- function(x, y) { x + y }"
> test <- "add(1, 2) == 3"
> code_coverage(source, test)
Coverage: 100.00%
/tmp/RtmpEMjmAi/source.R1abf161fca89: 100.00%
> 
> 
> 
> cleanEx()
> nameEx("codecov")
> ### * codecov
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: codecov
> ### Title: Run covr on a package and upload the result to codecov.io
> ### Aliases: codecov
> 
> ### ** Examples
> 
> ## Not run: 
> ##D codecov(path = "test")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("covr.record_tests")
> ### * covr.record_tests
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: covr.record_tests
> ### Title: Record Test Traces During Coverage Execution
> ### Aliases: covr.record_tests
> 
> ### ** Examples
> 
> fcode <- '
+ f <- function(x) {
+   if (x)
+     f(!x)
+   else
+     FALSE
+ }'
> 
> options(covr.record_tests = TRUE)
> cov <- code_coverage(fcode, "f(TRUE)")
> 
> # extract executed test code for the first test
> tail(attr(cov, "tests")[[1L]], 1L)
[[1]]
f(TRUE)

> # [[1]]
> # f(TRUE)
> 
> # extract test itemization per trace
> cov[[3]][c("srcref", "tests")]
$srcref
f(!x)

$tests
     test depth i
[1,]    1     1 2

> # $srcref
> # f(!x)
> #
> # $tests
> #      test depth i
> # [1,]    1     2 4
> 
> # reconstruct the code path of a test by ordering test traces by [,"i"]
> lapply(cov, `[[`, "tests")
$`source.R1abf1b479f1d:3:7:3:7:7:7:3:3`
     test depth i
[1,]    1     1 1
[2,]    1     2 3

$`source.R1abf1b479f1d:6:5:6:9:5:9:6:6`
     test depth i
[1,]    1     2 4

$`source.R1abf1b479f1d:4:5:4:9:5:9:4:4`
     test depth i
[1,]    1     1 2

> # $`source.Ref2326138c55:4:6:4:10:6:10:4:4`
> #      test depth i
> # [1,]    1     1 2
> #
> # $`source.Ref2326138c55:3:8:3:8:8:8:3:3`
> #      test depth i
> # [1,]    1     1 1
> # [2,]    1     2 3
> #
> # $`source.Ref2326138c55:6:6:6:10:6:10:6:6`
> #      test depth i
> # [1,]    1     2 4
> 
> 
> 
> 
> cleanEx()
> nameEx("exclusions")
> ### * exclusions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: exclusions
> ### Title: Exclusions
> ### Aliases: exclusions
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # exclude whole file of R/test.R
> ##D package_coverage(exclusions = "R/test.R")
> ##D 
> ##D # exclude lines 1 to 10 and 15 from R/test.R
> ##D package_coverage(line_exclusions = list("R/test.R" = c(1:10, 15)))
> ##D 
> ##D # exclude lines 1 to 10 from R/test.R, all of R/test2.R
> ##D package_coverage(line_exclusions = list("R/test.R" = 1:10, "R/test2.R"))
> ##D 
> ##D # exclude all print and format methods from the package.
> ##D package_coverage(function_exclusions = c("print\\.", "format\\."))
> ##D 
> ##D # single line exclusions
> ##D f1 <- function(x) {
> ##D   x + 1 # nocov
> ##D }
> ##D 
> ##D # ranged exclusions
> ##D f2 <- function(x) { # nocov start
> ##D   x + 2
> ##D } # nocov end
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("file_coverage")
> ### * file_coverage
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: file_coverage
> ### Title: Calculate test coverage for sets of files
> ### Aliases: file_coverage
> 
> ### ** Examples
> 
> # For the purpose of this example, save code containing code and tests to files
> cat("add <- function(x, y) { x + y }", file="add.R")
> cat("add(1, 2) == 3", file="add_test.R")
> 
> # Use file_coverage() to calculate test coverage
> file_coverage(source_files = "add.R", test_files = "add_test.R")
Coverage: 100.00%
add.R: 100.00%
> 
> # cleanup
> file.remove(c("add.R", "add_test.R"))
[1] TRUE TRUE
> 
> 
> 
> cleanEx()
> nameEx("function_coverage")
> ### * function_coverage
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: function_coverage
> ### Title: Calculate test coverage for a specific function.
> ### Aliases: function_coverage
> 
> ### ** Examples
> 
> add <- function(x, y) { x + y }
> function_coverage(fun = add, code = NULL) # 0% coverage
> function_coverage(fun = add, code = add(1, 2) == 3) # 100% coverage
> 
> 
> 
> cleanEx()
> nameEx("in_covr")
> ### * in_covr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: in_covr
> ### Title: Determine if code is being run in covr
> ### Aliases: in_covr
> 
> ### ** Examples
> 
> if (require(testthat)) {
+   testthat::skip_if(in_covr())
+ }
Loading required package: testthat
> 
> 
> 
> cleanEx()

detaching ‘package:testthat’

> nameEx("report")
> ### * report
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: report
> ### Title: Display covr results using a standalone report
> ### Aliases: report
> 
> ### ** Examples
> 
> ## Not run: 
> ##D x <- package_coverage()
> ##D report(x)
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.2 0.04 0.247 0.004 0.001 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
