
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "png"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('png')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("readPNG")
> ### * readPNG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readPNG
> ### Title: Read a bitmap image stored in the PNG format
> ### Aliases: readPNG
> ### Keywords: IO
> 
> ### ** Examples
> 
> # read a sample file (R logo)
> img <- readPNG(system.file("img", "Rlogo.png", package="png"))
> 
> # read it also in native format
> img.n <- readPNG(system.file("img", "Rlogo.png", package="png"), TRUE)
> 
> # if your R supports it, we'll plot it
> if (exists("rasterImage")) { # can plot only in R 2.11.0 and higher
+   plot(1:2, type='n')
+ 
+   if (names(dev.cur()) == "windows") {
+     # windows device doesn't support semi-transparency so we'll need
+     # to flatten the image
+     transparent <- img[,,4] == 0
+     img <- as.raster(img[,,1:3])
+     img[transparent] <- NA
+ 
+     # interpolate must be FALSE on Windows, otherwise R will
+     # try to interpolate transparency and fail
+     rasterImage(img, 1.2, 1.27, 1.8, 1.73, interpolate=FALSE)
+ 
+   } else {
+     # any reasonable device will be fine using alpha
+     rasterImage(img, 1.2, 1.27, 1.8, 1.73)
+     rasterImage(img.n, 1.5, 1.5, 1.9, 1.8)
+ 
+   }
+ }
> 
> 
> 
> cleanEx()
> nameEx("writePNG")
> ### * writePNG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writePNG
> ### Title: Write a bitmap image in PNG format
> ### Aliases: writePNG
> ### Keywords: IO
> 
> ### ** Examples
> 
> # read a sample file (R logo)
> img <- readPNG(system.file("img","Rlogo.png",package="png"))
> # write the image into a raw vector
> r <- writePNG(img)
> # read it back again
> img2 <- readPNG(r)
> # it better be the same
> identical(img, img2)
[1] TRUE
> # try to write a native raster
> img3 <- readPNG(system.file("img","Rlogo.png",package="png"), TRUE)
> r2 <- writePNG(img3)
> img4 <- readPNG(r2, TRUE)
> identical(img3, img4)
[1] TRUE
> 
> ## text and metadata
> r <- writePNG(img, text=c(source=R.version.string),
+      metadata=sessionInfo())
> img5 <- readPNG(r, info=TRUE)
> attr(img5, "info")
$dim
[1] 100  76

$bit.depth
[1] 8

$color.type
[1] "RGBA"

$text
                        source 
"R version 4.4.0 (2024-04-24)" 

> attr(img5, "metadata")
R version 4.4.0 (2024-04-24)
Platform: x86_64-pc-linux-gnu
Running under: Ubuntu 22.04.4 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 
LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

time zone: Etc/UTC
tzcode source: system (glibc)

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] png_0.1-8

loaded via a namespace (and not attached):
[1] compiler_4.4.0
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.069 0.012 0.081 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
