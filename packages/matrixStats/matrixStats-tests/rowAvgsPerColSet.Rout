
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
             a           b           c           d           e            f
A  0.460185182  0.82625738  0.63771283  1.53743590  0.06350540  0.642656294
B -1.374655523 -0.68551783 -0.25755274 -0.25775723 -0.79312789 -0.180074712
C -0.812662409  0.19990049 -0.62760288  0.11759082  1.23078559 -1.120796255
D -0.663034132  1.72772754 -0.02168911  0.04543036 -1.38961856  0.977396931
E -0.109235390  1.91844769 -0.52316869 -0.46651296  0.09969509  1.302845093
F -1.166602755 -1.72868355  0.10655394 -2.56562565  0.84478582 -0.709861463
G -0.166753184  1.00007984  1.33610304 -0.81272092 -1.07096179  0.179075241
H  0.001632334  0.22374979 -1.21068822 -1.37937485 -0.73230982 -0.022012078
I  0.828435427 -0.44128155  0.39653042 -0.34932109  1.75112293 -0.438033520
J -0.804347734 -1.19510197 -0.06124620 -2.36119721  1.61898030 -1.887597250
K -0.867697557 -1.06881376 -0.17247312 -1.00916306  1.71409560 -1.392631045
L  0.622321977  1.11885985  0.35402629 -0.50450166 -2.01995890  1.031624643
M -0.085997209  0.01925553 -0.72552638 -0.51221927 -0.14166420 -0.349673618
N  0.875326286  1.04305095  0.13308500 -1.19772141 -0.36885503 -0.003133064
O -1.518804205  0.82910501  0.53508155  1.16576622 -0.52003883  0.815435895
P -2.137431348 -1.04973002 -0.04611609 -0.20641098 -1.76533081 -0.795843110
Q  1.933968033 -0.33377681  0.20950801  0.91880327 -0.08866884  0.002274184
R -0.460962995  0.50683724 -0.88246642  0.16957586 -1.19257754 -2.660532725
S  0.398835349  0.18946757 -0.69772764 -0.54115497  1.50015115 -0.531000182
T -0.347193520 -0.20700482  0.30589456 -0.54395886 -0.39687554 -0.463922612
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
           s1          s2          s3
A  0.64322128  1.08757437  0.35308085
B -1.03008668 -0.25765499 -0.48660130
C -0.30638096 -0.25500603  0.05499467
D  0.53234670  0.01187062 -0.20611081
E  0.90460615 -0.49484082  0.70127009
F -1.44764315 -1.22953586  0.06746218
G  0.41666333  0.26169106 -0.44594328
H  0.11269106 -1.29503153 -0.37716095
I  0.19357694  0.02360467  0.65654471
J -0.99972485 -1.21122171 -0.13430847
K -0.96825566 -0.59081809  0.16073228
L  0.87059091 -0.07523768 -0.49416713
M -0.03337084 -0.61887282 -0.24566891
N  0.95918862 -0.53231820 -0.18599405
O -0.34484960  0.85042389  0.14769853
P -1.59358069 -0.12626354 -1.28058696
Q  0.80009561  0.56415564 -0.04319733
R  0.02293712 -0.35644528 -1.92655513
S  0.29415146 -0.61944131  0.48457548
T -0.27709917 -0.11903215 -0.43039908
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
             a           b           c             d           e           f
s1 -0.59754172  0.51709189 -0.06728298  0.3606749635 -0.22211386  0.07979556
s2 -0.36023975  0.35339844 -0.07279998 -1.3060585939 -0.21469768  0.18751170
s3 -0.05532197 -0.39658436  0.12920935 -1.0560457517  0.76605998 -0.67165929
s4 -0.71672662  0.21042037 -0.02586898 -0.1876463578 -0.69897222 -0.08330347
s5  0.38116172  0.03888079 -0.26619787  0.0008163248 -0.04449269 -0.91329533
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A  0.69462550
B -0.59144766
C -0.16879744
D  0.11270217
E  0.37034514
F -0.86990561
G  0.07747037
H -0.51983381
I  0.29124210
J -0.78175168
K -0.46611382
L  0.10039537
M -0.29930419
N  0.08029212
O  0.21775761
P -1.00014373
Q  0.44035131
R -0.75335443
S  0.05309521
T -0.27551013
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
            a         b           c          d           e          f
s1 -0.2697337 0.1446414 -0.06058809 -0.4376519 -0.08284329 -0.2801902
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
           s1          s2          s3
A  0.64322128  1.08757437  0.35308085
B -1.03008668 -0.25765499 -0.48660130
C -0.30638096 -0.25500603  0.05499467
D  0.53234670  0.01187062 -0.20611081
E  0.90460615 -0.49484082  0.70127009
F -1.44764315 -1.22953586  0.06746218
G  0.41666333  0.26169106 -0.44594328
H  0.11269106 -1.29503153 -0.37716095
I  0.19357694  0.02360467  0.65654471
J -0.99972485 -1.21122171 -0.13430847
K -0.96825566 -0.59081809  0.16073228
L  0.87059091 -0.07523768 -0.49416713
M -0.03337084 -0.61887282 -0.24566891
N  0.95918862 -0.53231820 -0.18599405
O -0.34484960  0.85042389  0.14769853
P -1.59358069 -0.12626354 -1.28058696
Q  0.80009561  0.56415564 -0.04319733
R  0.02293712 -0.35644528 -1.92655513
S  0.29415146 -0.61944131  0.48457548
T -0.27709917 -0.11903215 -0.43039908
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a          b          c           d           e           f
s1 -0.4572352 0.07036977  0.1900800  0.63983933 -0.36481124  0.23129079
s2 -0.7378483 0.96381401 -0.3246460  0.08151059 -0.07941648 -0.07169966
s3 -0.6379191 0.09488207 -0.2083074 -1.51606931  0.47224045  0.29649182
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
