
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
           a           b          c           d          e           f
A -0.4963040 -0.47544601 -0.8224510  2.22344039  1.8001780  0.71581557
B  1.0630053 -0.81925355 -0.2284531  0.21817295 -0.7350944  0.38128805
C  0.2493753 -0.23177321 -0.2562142  0.89803108 -0.2141734 -0.64136492
D  0.2128150 -0.33639620  0.4184427 -0.34279081 -0.2483565  1.47052060
E -0.2333080  0.46507585 -0.5226053  0.65576520  0.6802828  0.79228567
F -0.1512175  2.34382939  1.3335011 -1.00782206 -0.9267875 -0.18483865
G -0.6960039 -0.64385886 -0.1481321  0.13835775 -2.2402954 -1.37328867
H -1.6662848 -1.28609070  1.9565736 -1.07983917 -0.4508421 -0.06491567
I -0.5324211 -0.44702377  0.0848974 -1.58685501  0.6183821 -0.67433990
J -0.9473291  0.85994987  0.5965194 -1.86992756  2.0721596  1.39072199
K -1.0988521 -0.23201709  0.1689795  0.04883489  0.2392105 -0.52590703
L  1.0582243 -0.33992504  0.6633651 -0.38811387  0.9454283 -0.97003736
M -0.1135357 -0.84909795 -2.7591381  0.13610928 -2.1514092 -1.10113708
N  1.1583472  0.73737709 -0.1245701  0.44352291  0.5656397  0.01068351
O -0.4624614 -0.39013656  0.1511002 -0.20130476 -0.5888150  0.14955890
P  1.0192228  0.50137062 -1.1880329  1.13210497 -1.0906546  0.46467054
Q  0.9457306 -0.65291594  1.3963980 -0.94283236 -1.5728897 -0.78756822
R -1.8480899 -0.02610196  0.3051731  0.41023367  1.4011349  0.26497989
S  1.6393744 -0.34963353 -1.2391587  0.03360810  0.6012366 -1.96588811
T  2.0920217  0.59335778  0.8354575 -1.07466312 -0.6685440  1.22644866
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
            s1           s2          s3
A -0.485874999  0.700494690  1.25799679
B  0.121875887 -0.005140067 -0.17690319
C  0.008801048  0.320908434 -0.42776915
D -0.061790600  0.037825928  0.61108207
E  0.115883914  0.066579934  0.73628421
F  1.096305936  0.162839504 -0.55581308
G -0.669931382 -0.004887177 -1.80679205
H -1.476187773  0.438367196 -0.25787889
I -0.489722456 -0.750978804 -0.02797890
J -0.043689604 -0.636704072  1.73144079
K -0.665434597  0.108907203 -0.14334826
L  0.359149630  0.137625612 -0.01230453
M -0.481316820 -1.311514386 -1.62627314
N  0.947862146  0.159476389  0.28816158
O -0.426298994 -0.025102296 -0.21962805
P  0.760296700 -0.027963987 -0.31299204
Q  0.146407336  0.226782803 -1.18022895
R -0.937095925  0.357703367  0.83305737
S  0.644870441 -0.602775302 -0.68232576
T  1.342689721 -0.119602824  0.27895232
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
            a             b          c          d           e          f
s1  0.2572229 -0.4657172415 -0.2221689  0.7492134  0.15063843  0.4815648
s2 -0.6867036  0.2197389221  0.6548343 -0.3233846 -0.73441057 -0.2076893
s3 -0.3800945 -0.0397540091  0.3784404 -0.9490154  0.96879513 -0.1948906
s4  0.4003932 -0.0001217002 -0.9801602  0.3776081 -0.81630980 -0.1190560
s5  0.7072592 -0.1088234107  0.3244674 -0.3934134 -0.05976557 -0.3155069
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A  0.49087216
B -0.02005579
C -0.03268656
D  0.19570580
E  0.30624935
F  0.23444412
G -0.82720354
H -0.43189982
I -0.42289339
J  0.35034904
K -0.23329189
L  0.16149024
M -1.13970145
N  0.46516671
O -0.22367645
P  0.13978022
Q -0.26901294
R  0.08455494
S -0.21341021
T  0.50067974
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
            a           b          c          d           e           f
s1 0.05961545 -0.07893549 0.03108259 -0.1077984 -0.09821048 -0.07111561
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
            s1           s2          s3
A -0.485874999  0.700494690  1.25799679
B  0.121875887 -0.005140067 -0.17690319
C  0.008801048  0.320908434 -0.42776915
D -0.061790600  0.037825928  0.61108207
E  0.115883914  0.066579934  0.73628421
F  1.096305936  0.162839504 -0.55581308
G -0.669931382 -0.004887177 -1.80679205
H -1.476187773  0.438367196 -0.25787889
I -0.489722456 -0.750978804 -0.02797890
J -0.043689604 -0.636704072  1.73144079
K -0.665434597  0.108907203 -0.14334826
L  0.359149630  0.137625612 -0.01230453
M -0.481316820 -1.311514386 -1.62627314
N  0.947862146  0.159476389  0.28816158
O -0.426298994 -0.025102296 -0.21962805
P  0.760296700 -0.027963987 -0.31299204
Q  0.146407336  0.226782803 -1.18022895
R -0.937095925  0.357703367  0.83305737
S  0.644870441 -0.602775302 -0.68232576
T  1.342689721 -0.119602824  0.27895232
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a          b           c          d          e         f
s1  0.2833507 -0.6473498 -0.52545205  1.2208067  0.5325418 0.5485518
s2  0.2310951 -0.2840847  0.08111423  0.2776201 -0.2312649 0.4145778
s3 -0.1922628  1.4044526  0.40544787 -0.1760284 -0.1232524 0.3037235
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
