
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
             a           b           c           d           e           f
A  1.427050760 -1.64891545  0.12862681  1.11730894  0.84993983 -0.30141947
B  1.237205631 -0.57959595 -0.05282731 -0.89130701  1.45217675  1.48758526
C -1.176350689 -1.19211505  0.10381723  0.70865198  0.58316108  1.83633993
D -1.547613875 -0.28626524  0.24916873 -0.61230031 -0.11536797  1.65443909
E -1.696557354  1.52711711  0.26986563 -0.59657158  0.49456346 -0.44696033
F -0.776422312  1.67272292  0.69705222 -0.96931988  0.29186409 -1.80871933
G -2.244460860  0.40799485 -1.39673796  0.10451942  2.00346660  1.87448657
H  2.078581380 -1.09922423 -0.21618975  1.51087639 -0.48577050 -1.93183915
I  0.635744961  0.12012569  0.31416289  0.51027480 -1.28893198  2.05234219
J -0.008552418  0.72463519 -1.11632729  0.99984176 -0.85600431 -0.43634914
K -1.426633121  0.99332663 -0.04806405  0.82345218 -0.45129052  1.03596454
L -0.678285686  0.17881103 -1.12037263  0.13276878 -1.34668918  1.04224566
M  0.654379560 -1.42371207 -0.54586754 -0.20904500 -0.45004834  0.17580683
N  0.813912144  1.10811584 -0.24313411  0.41589020  0.03962474  1.13029147
O  2.119130804  0.46778139 -0.95922790  0.49208876  0.57872235 -1.13963522
P  0.978310686  1.18613390  0.72392591  0.11924668 -1.17581625  0.06706021
Q  0.300306612  0.45631237 -1.67102707 -0.20758003  1.51069095 -1.24439675
R -0.553325457 -0.06179375 -1.62426610  0.93200009  1.45557946 -0.66953188
S -0.151189756  0.65243746  1.91697047  0.04225471  0.12011685 -1.06436185
T -2.015523903 -1.68583409  1.02232143  0.32054949 -0.79022583  0.83089688
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
           s1          s2          s3
A -0.11093235  0.62296787  0.27426018
B  0.32880484 -0.47206716  1.46988101
C -1.18423287  0.40623461  1.20975050
D -0.91693956 -0.18156579  0.76953556
E -0.08472012 -0.16335298  0.02380157
F  0.44815030 -0.13613383 -0.75842762
G -0.91823300 -0.64610927  1.93897659
H  0.48967858  0.64734332 -1.20880482
I  0.37793533  0.41221884  0.38170510
J  0.35804139 -0.05824277 -0.64617673
K -0.21665325  0.38769406  0.29233701
L -0.24973733 -0.49380192 -0.15222176
M -0.38466625 -0.37745627 -0.13712075
N  0.96101399  0.08637805  0.58495810
O  1.29345610 -0.23356957 -0.28045643
P  1.08222229  0.42158629 -0.55437802
Q  0.37830949 -0.93930355  0.13314710
R -0.30755960 -0.34613301  0.39302379
S  0.25062385  0.97961259 -0.47212250
T -1.85067900  0.67143546  0.02033552
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
             a          b           c          d          e           f
s1 -0.01492704 -0.9267229  0.10719637 0.08058840  0.6924774  1.16923620
s2 -0.65971479  0.6271527 -0.16150247 0.01237609  0.5760309 -0.57825806
s3 -0.36943157  0.5042246 -0.49265027 0.61658438 -0.9857290  0.92355081
s4  1.14143330  0.3345798 -0.25607591 0.20454516 -0.2518794  0.05838083
s5 -0.60493313 -0.1597195 -0.08900032 0.27180606  0.5740404 -0.53684840
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A  0.26209857
B  0.44220623
C  0.14391741
D -0.10965660
E -0.07475718
F -0.14880372
G  0.12487810
H -0.02392764
I  0.39061976
J -0.11545937
K  0.15445927
L -0.29858701
M -0.29974776
N  0.54411671
O  0.25981003
P  0.31647686
Q -0.14261566
R -0.08688961
S  0.25270465
T -0.38630267
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
            a          b          c       d         e         f
s1 -0.1015146 0.07590293 -0.1784065 0.23718 0.1209881 0.2072123
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
           s1          s2          s3
A -0.11093235  0.62296787  0.27426018
B  0.32880484 -0.47206716  1.46988101
C -1.18423287  0.40623461  1.20975050
D -0.91693956 -0.18156579  0.76953556
E -0.08472012 -0.16335298  0.02380157
F  0.44815030 -0.13613383 -0.75842762
G -0.91823300 -0.64610927  1.93897659
H  0.48967858  0.64734332 -1.20880482
I  0.37793533  0.41221884  0.38170510
J  0.35804139 -0.05824277 -0.64617673
K -0.21665325  0.38769406  0.29233701
L -0.24973733 -0.49380192 -0.15222176
M -0.38466625 -0.37745627 -0.13712075
N  0.96101399  0.08637805  0.58495810
O  1.29345610 -0.23356957 -0.28045643
P  1.08222229  0.42158629 -0.55437802
Q  0.37830949 -0.93930355  0.13314710
R -0.30755960 -0.34613301  0.39302379
S  0.25062385  0.97961259 -0.47212250
T -1.85067900  0.67143546  0.02033552
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
           a          b          c           d         e          f
s1  1.332128 -1.1142557 0.03789975  0.11300097 1.1510583  0.5930829
s2 -1.361982 -0.7391901 0.17649298  0.04817584 0.2338966  1.7453895
s3 -1.236490  1.5999200 0.48345892 -0.78294573 0.3932138 -1.1278398
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
