
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "furrr"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('furrr')
Loading required package: future
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("furrr_options")
> ### * furrr_options
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: furrr_options
> ### Title: Options to fine tune furrr
> ### Aliases: furrr_options
> 
> ### ** Examples
> 
> furrr_options()
<furrr_options>
> 
> 
> 
> cleanEx()
> nameEx("future_imap")
> ### * future_imap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: future_imap
> ### Title: Apply a function to each element of a vector, and its index via
> ###   futures
> ### Aliases: future_imap future_imap_chr future_imap_dbl future_imap_int
> ###   future_imap_lgl future_imap_raw future_imap_dfr future_imap_dfc
> ###   future_iwalk
> 
> ### ** Examples
> 
> 
> future_imap_chr(sample(10), ~ paste0(.y, ": ", .x))
 [1] "1: 9"  "2: 4"  "3: 7"  "4: 1"  "5: 2"  "6: 5"  "7: 3"  "8: 10" "9: 6" 
[10] "10: 8"
> 
> ## Don't show: 
> # Close open connections for R CMD Check
> if (!inherits(plan(), "sequential")) plan(sequential)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:purrr’

> nameEx("future_invoke_map")
> ### * future_invoke_map
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: future_invoke_map
> ### Title: Invoke functions via futures
> ### Aliases: future_invoke_map future_invoke_map_chr future_invoke_map_dbl
> ###   future_invoke_map_int future_invoke_map_lgl future_invoke_map_raw
> ###   future_invoke_map_dfr future_invoke_map_dfc
> 
> ### ** Examples
> 
> 
> df <- dplyr::tibble(
+   f = c("runif", "rpois", "rnorm"),
+   params = list(
+     list(n = 10),
+     list(n = 5, lambda = 10),
+     list(n = 10, mean = -3, sd = 10)
+   )
+ )
> 
> future_invoke_map(df$f, df$params, .options = furrr_options(seed = 123))
Warning: `invoke()` was deprecated in purrr 1.0.0.
ℹ Please use `exec()` instead.
[[1]]
 [1] 0.15523168 0.13489836 0.77349355 0.06467378 0.72312291 0.34779719
 [7] 0.76720626 0.90894692 0.94261388 0.47246904

[[2]]
[1]  9 10  9  9  8

[[3]]
 [1]  -2.171833 -18.032800 -10.719393  15.365090   9.164918  -4.410979
 [7] -10.297802 -15.180494   1.718361  -4.452757

> 
> ## Don't show: 
> # Close open connections for R CMD Check
> if (!inherits(plan(), "sequential")) plan(sequential)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:purrr’

> nameEx("future_map")
> ### * future_map
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: future_map
> ### Title: Apply a function to each element of a vector via futures
> ### Aliases: future_map future_map_chr future_map_dbl future_map_int
> ###   future_map_lgl future_map_raw future_map_dfr future_map_dfc
> ###   future_walk
> 
> ### ** Examples
> 
> library(magrittr)
> 
> 1:10 %>%
+   future_map(rnorm, n = 10, .options = furrr_options(seed = 123)) %>%
+   future_map_dbl(mean)

Attaching package: ‘purrr’

The following object is masked from ‘package:magrittr’:

    set_names

 [1] 1.180279 2.140442 2.909823 3.692207 5.058100 6.653926 7.065630 7.960713
 [9] 9.105674 9.766827
> 
> # If each element of the output is a data frame, use
> # `future_map_dfr()` to row-bind them together:
> mtcars %>%
+   split(.$cyl) %>%
+   future_map(~ lm(mpg ~ wt, data = .x)) %>%
+   future_map_dfr(~ as.data.frame(t(as.matrix(coef(.)))))
  (Intercept)        wt
1    39.57120 -5.647025
2    28.40884 -2.780106
3    23.86803 -2.192438
> 
> 
> # You can be explicit about what gets exported to the workers.
> # To see this, use multisession (not multicore as the forked workers
> # still have access to this environment)
> x <- 1
> y <- 2
> 
> # This will fail, y is not exported (no black magic occurs)
> try(future_map(1, ~y, .options = furrr_options(globals = "x")))
[[1]]
[1] 2

> 
> # y is exported
> future_map(1, ~y, .options = furrr_options(globals = "y"))
[[1]]
[1] 2

> 
> ## Don't show: 
> # Close open connections for R CMD Check
> if (!inherits(plan(), "sequential")) plan(sequential)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:purrr’, ‘package:magrittr’

> nameEx("future_map2")
> ### * future_map2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: future_map2
> ### Title: Map over multiple inputs simultaneously via futures
> ### Aliases: future_map2 future_map2_chr future_map2_dbl future_map2_int
> ###   future_map2_lgl future_map2_raw future_map2_dfr future_map2_dfc
> ###   future_pmap future_pmap_chr future_pmap_dbl future_pmap_int
> ###   future_pmap_lgl future_pmap_raw future_pmap_dfr future_pmap_dfc
> ###   future_walk2 future_pwalk
> 
> ### ** Examples
> 
> 
> x <- list(1, 10, 100)
> y <- list(1, 2, 3)
> z <- list(5, 50, 500)
> 
> future_map2(x, y, ~ .x + .y)
[[1]]
[1] 2

[[2]]
[1] 12

[[3]]
[1] 103

> 
> # Split into pieces, fit model to each piece, then predict
> by_cyl <- split(mtcars, mtcars$cyl)
> mods <- future_map(by_cyl, ~ lm(mpg ~ wt, data = .))
> future_map2(mods, by_cyl, predict)
$`4`
    Datsun 710      Merc 240D       Merc 230       Fiat 128    Honda Civic 
      26.47010       21.55719       21.78307       27.14774       30.45125 
Toyota Corolla  Toyota Corona      Fiat X1-9  Porsche 914-2   Lotus Europa 
      29.20890       25.65128       28.64420       27.48656       31.02725 
    Volvo 142E 
      23.87247 

$`6`
     Mazda RX4  Mazda RX4 Wag Hornet 4 Drive        Valiant       Merc 280 
      21.12497       20.41604       19.47080       18.78968       18.84528 
     Merc 280C   Ferrari Dino 
      18.84528       20.70795 

$`8`
  Hornet Sportabout          Duster 360          Merc 450SE          Merc 450SL 
           16.32604            16.04103            14.94481            15.69024 
        Merc 450SLC  Cadillac Fleetwood Lincoln Continental   Chrysler Imperial 
           15.58061            12.35773            11.97625            12.14945 
   Dodge Challenger         AMC Javelin          Camaro Z28    Pontiac Firebird 
           16.15065            16.33700            15.44907            15.43811 
     Ford Pantera L       Maserati Bora 
           16.91800            16.04103 

> 
> future_pmap(list(x, y, z), sum)
[[1]]
[1] 7

[[2]]
[1] 62

[[3]]
[1] 603

> 
> # Matching arguments by position
> future_pmap(list(x, y, z), function(a, b ,c) a / (b + c))
[[1]]
[1] 0.1666667

[[2]]
[1] 0.1923077

[[3]]
[1] 0.1988072

> 
> # Vectorizing a function over multiple arguments
> df <- data.frame(
+   x = c("apple", "banana", "cherry"),
+   pattern = c("p", "n", "h"),
+   replacement = c("x", "f", "q"),
+   stringsAsFactors = FALSE
+ )
> 
> future_pmap(df, gsub)
[[1]]
[1] "axxle"

[[2]]
[1] "bafafa"

[[3]]
[1] "cqerry"

> future_pmap_chr(df, gsub)
[1] "axxle"  "bafafa" "cqerry"
> 
> ## Don't show: 
> # Close open connections for R CMD Check
> if (!inherits(plan(), "sequential")) plan(sequential)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:purrr’

> nameEx("future_map_if")
> ### * future_map_if
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: future_map_if
> ### Title: Apply a function to each element of a vector conditionally via
> ###   futures
> ### Aliases: future_map_if future_map_at
> 
> ### ** Examples
> 
> 
> # Modify the even elements
> future_map_if(1:5, ~.x %% 2 == 0L, ~ -1)
[[1]]
[1] 1

[[2]]
[1] -1

[[3]]
[1] 3

[[4]]
[1] -1

[[5]]
[1] 5

> 
> future_map_at(1:5, c(1, 5), ~ -1)
[[1]]
[1] -1

[[2]]
[1] 2

[[3]]
[1] 3

[[4]]
[1] 4

[[5]]
[1] -1

> ## Don't show: 
> # Close open connections for R CMD Check
> if (!inherits(plan(), "sequential")) plan(sequential)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:purrr’

> nameEx("future_modify")
> ### * future_modify
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: future_modify
> ### Title: Modify elements selectively via futures
> ### Aliases: future_modify future_modify_at future_modify_if
> 
> ### ** Examples
> 
> library(magrittr)
> 
> # Convert each col to character, in parallel
> future_modify(mtcars, as.character)

Attaching package: ‘purrr’

The following object is masked from ‘package:magrittr’:

    set_names

                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Mazda RX4             21   6   160 110  3.9  2.62 16.46  0  1    4    4
Mazda RX4 Wag         21   6   160 110  3.9 2.875 17.02  0  1    4    4
Datsun 710          22.8   4   108  93 3.85  2.32 18.61  1  1    4    1
Hornet 4 Drive      21.4   6   258 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout   18.7   8   360 175 3.15  3.44 17.02  0  0    3    2
Valiant             18.1   6   225 105 2.76  3.46 20.22  1  0    3    1
Duster 360          14.3   8   360 245 3.21  3.57 15.84  0  0    3    4
Merc 240D           24.4   4 146.7  62 3.69  3.19    20  1  0    4    2
Merc 230            22.8   4 140.8  95 3.92  3.15  22.9  1  0    4    2
Merc 280            19.2   6 167.6 123 3.92  3.44  18.3  1  0    4    4
Merc 280C           17.8   6 167.6 123 3.92  3.44  18.9  1  0    4    4
Merc 450SE          16.4   8 275.8 180 3.07  4.07  17.4  0  0    3    3
Merc 450SL          17.3   8 275.8 180 3.07  3.73  17.6  0  0    3    3
Merc 450SLC         15.2   8 275.8 180 3.07  3.78    18  0  0    3    3
Cadillac Fleetwood  10.4   8   472 205 2.93  5.25 17.98  0  0    3    4
Lincoln Continental 10.4   8   460 215    3 5.424 17.82  0  0    3    4
Chrysler Imperial   14.7   8   440 230 3.23 5.345 17.42  0  0    3    4
Fiat 128            32.4   4  78.7  66 4.08   2.2 19.47  1  1    4    1
Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
Toyota Corolla      33.9   4  71.1  65 4.22 1.835  19.9  1  1    4    1
Toyota Corona       21.5   4 120.1  97  3.7 2.465 20.01  1  0    3    1
Dodge Challenger    15.5   8   318 150 2.76  3.52 16.87  0  0    3    2
AMC Javelin         15.2   8   304 150 3.15 3.435  17.3  0  0    3    2
Camaro Z28          13.3   8   350 245 3.73  3.84 15.41  0  0    3    4
Pontiac Firebird    19.2   8   400 175 3.08 3.845 17.05  0  0    3    2
Fiat X1-9           27.3   4    79  66 4.08 1.935  18.9  1  1    4    1
Porsche 914-2         26   4 120.3  91 4.43  2.14  16.7  0  1    5    2
Lotus Europa        30.4   4  95.1 113 3.77 1.513  16.9  1  1    5    2
Ford Pantera L      15.8   8   351 264 4.22  3.17  14.5  0  1    5    4
Ferrari Dino        19.7   6   145 175 3.62  2.77  15.5  0  1    5    6
Maserati Bora         15   8   301 335 3.54  3.57  14.6  0  1    5    8
Volvo 142E          21.4   4   121 109 4.11  2.78  18.6  1  1    4    2
> 
> iris %>%
+  future_modify_if(is.factor, as.character) %>%
+  str()
'data.frame':	150 obs. of  5 variables:
 $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
 $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
 $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
 $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
 $ Species     : chr  "setosa" "setosa" "setosa" "setosa" ...
> 
> mtcars %>%
+   future_modify_at(c(1, 4, 5), as.character) %>%
+   str()
'data.frame':	32 obs. of  11 variables:
 $ mpg : chr  "21" "21" "22.8" "21.4" ...
 $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...
 $ disp: num  160 160 108 258 360 ...
 $ hp  : chr  "110" "110" "93" "110" ...
 $ drat: chr  "3.9" "3.9" "3.85" "3.08" ...
 $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...
 $ qsec: num  16.5 17 18.6 19.4 17 ...
 $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...
 $ am  : num  1 1 1 0 0 0 0 0 0 0 ...
 $ gear: num  4 4 4 3 3 3 3 4 4 4 ...
 $ carb: num  4 4 1 1 2 1 4 2 2 4 ...
> 
> ## Don't show: 
> # Close open connections for R CMD Check
> if (!inherits(plan(), "sequential")) plan(sequential)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:purrr’, ‘package:magrittr’

> nameEx("future_options")
> ### * future_options
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: future_options
> ### Title: Deprecated furrr options
> ### Aliases: future_options
> ### Keywords: internal
> 
> ### ** Examples
> 
> try(future_options())
Error : `future_options()` was deprecated in furrr 0.3.0 and is now defunct.
ℹ Please use `furrr_options()` instead.
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.715 0.057 0.772 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
