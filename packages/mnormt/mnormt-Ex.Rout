
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "mnormt"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('mnormt')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("mnorm")
> ### * mnorm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mnorm
> ### Title: The multivariate normal distribution
> ### Aliases: dmnorm pmnorm rmnorm sadmvn
> ### Keywords: distribution multivariate
> 
> ### ** Examples
> 
> x <- seq(-2, 4, length=21)
> y <- cos(2*x) + 10
> z <- x + sin(3*y) 
> mu <- c(1,12,2)
> Sigma <- matrix(c(1,2,0,2,5,0.5,0,0.5,3), 3, 3)
> f <- dmnorm(cbind(x,y,z), mu, Sigma)
> f0 <- dmnorm(mu, mu, Sigma)
> p1 <- pmnorm(c(2,11,3), mu, Sigma)
> p2 <- pmnorm(c(2,11,3), mu, Sigma, maxpts=10000, abseps=1e-10)
> p <- pmnorm(cbind(x,y,z), mu, Sigma)
> #
> set.seed(123)
> x1 <- rmnorm(5, mu, Sigma)
> set.seed(123)
> x2 <- rmnorm(5, mu, sqrt=chol(Sigma)) # x1=x2
> eig <- eigen(Sigma, symmetric = TRUE)
> R <- t(eig$vectors %*% diag(sqrt(eig$values)))
> for(i in 1:50) x <- rmnorm(5, mu, sqrt=R)
> #
> p <- sadmvn(lower=c(2,11,3), upper=rep(Inf,3), mu, Sigma) # upper tail
> #
> p0 <- pmnorm(c(2,11), mu[1:2], Sigma[1:2,1:2])
> p1 <- biv.nt.prob(0, lower=rep(-Inf,2), upper=c(2, 11), mu[1:2], Sigma[1:2,1:2])
> p2 <- sadmvn(lower=rep(-Inf,2), upper=c(2, 11), mu[1:2], Sigma[1:2,1:2]) 
> c(p0, p1, p2, p0-p1, p0-p2)
[1] 0.3273202 0.3273202 0.3273202 0.0000000 0.0000000
> #
> p1 <- pnorm(0, 1, 3)
> p2 <- pmnorm(0, 1, 3^2)
> 
> 
> 
> cleanEx()
> nameEx("mom.mtruncnorm")
> ### * mom.mtruncnorm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mom.mtruncnorm
> ### Title: Moments and other quantities of a (possibly) truncated
> ###   multivariate normal distribution
> ### Aliases: mom.mtruncnorm
> ### Keywords: distribution multivariate
> 
> ### ** Examples
> 
> mu <- c(1, -0.5, 0)
> Sigma <- toeplitz(1/(1:3))
> lower <- c(-Inf, -3, -4)
> upper <- c(1.5, Inf, 2)
> m <- mom.mtruncnorm(1, mu, Sigma, lower, upper)
> print(m$cum1)
[1]  0.4948696 -0.7449601 -0.1902981
> # 
> m <- mom.mtruncnorm(3, mu, Sigma, lower, upper)
> print(m$order3$gamma1.marginal)
[1] -0.78354394  0.08130701 -0.15224695
> print(m$order3$gamma1.Mardia)
[1] 0.6513498
> #
> #--
> # Example 2 of Leppard & Tallis (1989, Appl.Stat. vol.38, p.547)
> truncp <- c(0, 1, 2)
> U <- c(0, 0, 0)
> V <- 0.5*(diag(3) + matrix(1, 3, 3))
> m <- mom.mtruncnorm(2, U, V, truncp)
> print(m$cum1, digits=9)
[1] 1.48850857 1.78906548 2.42007685
> print(m$order2$cum2, digits=9)
             [,1]         [,2]         [,3]
[1,] 0.5886940196 0.1008819835 0.0468289242
[2,] 0.1008819835 0.3267236934 0.0302286943
[3,] 0.0468289242 0.0302286943 0.1346786022
> 
> 
> 
> cleanEx()
> nameEx("mom2cum")
> ### * mom2cum
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mom2cum
> ### Title: Conversion of an array of moments to cumulants
> ### Aliases: mom2cum
> ### Keywords: distribution multivariate
> 
> ### ** Examples
> 
> mu <- c(1, -0.5)
> Sigma <- toeplitz(1/(1:2))
> low <- c(-Inf, -3)
> hi <- c(1.5, Inf)
> mom <- recintab(c(3,3), low, hi, mu, Sigma)
> cum <- mom2cum(mom)
> print(cum$order3$gamma1.marginal)
NULL
> print(cum$order3$gamma1.Mardia)
NULL
> 
> 
> 
> cleanEx()
> nameEx("mt")
> ### * mt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mt
> ### Title: The multivariate Student's _t_ distribution
> ### Aliases: dmt pmt rmt sadmvt biv.nt.prob ptriv.nt
> ### Keywords: distribution multivariate
> 
> ### ** Examples
> 
> x <- seq(-2,4,length=21)
> y <- 2*x+10
> z <- x+cos(y) 
> mu <- c(1,12,2)
> Sigma <- matrix(c(1,2,0,2,5,0.5,0,0.5,3), 3, 3)
> df <- 4
> f  <- dmt(cbind(x,y,z), mu, Sigma,df)
> p1 <- pmt(c(2,11,3), mu, Sigma, df)
> p2 <- pmt(c(2,11,3), mu, Sigma, df, maxpts=10000, abseps=1e-8)
> x  <- rmt(10, mu, Sigma, df)
> p  <- sadmvt(df, lower=c(2,11,3), upper=rep(Inf,3), mu, Sigma) # upper tail
> #
> p0 <- pmt(c(2,11), mu[1:2], Sigma[1:2,1:2], df=5)
> p1 <- biv.nt.prob(5, lower=rep(-Inf,2), upper=c(2, 11), mu[1:2], Sigma[1:2,1:2])
> p2 <- sadmvt(5, lower=rep(-Inf,2), upper=c(2, 11), mu[1:2], Sigma[1:2,1:2]) 
> c(p0, p1, p2, p0-p1, p0-p2)
[1] 0.3356944 0.3356944 0.3356944 0.0000000 0.0000000
> 
> 
> 
> cleanEx()
> nameEx("mtruncnorm")
> ### * mtruncnorm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mtruncnorm
> ### Title: The multivariate truncated normal distribution
> ### Aliases: dmtruncnorm pmtruncnorm rmtruncnorm
> ### Keywords: distribution multivariate
> 
> ### ** Examples
> 
> # example with d=2
> m2 <- c(0.5, -1)
> V2 <- matrix(c(3, 3, 3, 6), 2, 2)
> low <- c(-1, -2.8)
> up <- c(1.5, 1.5)
> # plotting truncated normal density using 'dmtruncnorm' and 'contour' functions 
> plot_fxy(dmtruncnorm, xlim=c(-2, 2), ylim=c(-3, 2), mean=m2, varcov=V2, 
+       lower=low, upper=up,  npt=101)   
> set.seed(1)    
> x <-  rmtruncnorm(n=500, mean=m2, varcov=V2, lower=low, upper=up) 
> points(x, cex=0.2, col="red")
> #------
> # example with d=1
> set.seed(1) 
> low <- -4
> hi <- 3
> x <- rmtruncnorm(1e5, mean=2, varcov=5, lower=low, upper=hi)
> hist(x, prob=TRUE, xlim=c(-8, 12), main="Truncated univariate N(2, sqrt(5))")
> rug(c(low, hi), col=2)
> x0 <- seq(-8, 12, length=251)
> pdf <- dnorm(x0, 2, sqrt(5))
> p <- pnorm(c(low, hi), 2, sqrt(5))
> lines(x0, pdf/diff(p), col=4, lty=2)
> lines(x0, dmtruncnorm(x0, 2, 5, low, hi), col=2, lwd=2)
> 
> 
> 
> cleanEx()
> nameEx("mtrunct")
> ### * mtrunct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mtrunct
> ### Title: The multivariate truncated Student's _t_ distribution
> ### Aliases: dmtrunct pmtrunct
> ### Keywords: distribution multivariate
> 
> ### ** Examples
> 
> m2 <- c(0.5, -1)
> V2 <- matrix(c(1.5, -1.75, -1.75, 3), 2, 2)
> lower <- a <- c(-1, -2.5)
> upper <- b <- c(2, 1)
> set.seed(1) 
> points <- matrix(runif(10, -3, 3), nrow=5, ncol=2)
> pdf <- dmtrunct(points, mean=m2, S=V2, df=4, lower, upper) 
> cdf <- pmtrunct(points, mean=m2, S=V2, df=4, lower, upper) 
> 
> 
> 
> cleanEx()
> nameEx("pd.solve")
> ### * pd.solve
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pd.solve
> ### Title: Inverse of a symmetric positive-definite matrix
> ### Aliases: pd.solve
> ### Keywords: algebra array
> 
> ### ** Examples
> 
>   x <- toeplitz(rev(1:4))
>   x.inv <- pd.solve(x)
>   print(x.inv %*% x)
              [,1]          [,2]          [,3]          [,4]
[1,]  1.000000e+00  1.110223e-16 -1.110223e-16 -5.551115e-17
[2,]  1.554312e-16  1.000000e+00  2.442491e-16 -4.440892e-17
[3,]  3.330669e-16  6.661338e-16  1.000000e+00  0.000000e+00
[4,] -2.220446e-16 -4.440892e-16 -4.440892e-16  1.000000e+00
>   x.inv <- pd.solve(x, log.det=TRUE)
>   logDet <- attr(x.inv, "log.det")
>   print(abs(logDet - determinant(x, logarithm=TRUE)$modulus))
[1] 0
attr(,"logarithm")
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("plot_fxy")
> ### * plot_fxy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_fxy
> ### Title: Plotting a function of two variables
> ### Aliases: plot_fxy
> ### Keywords: multivariate hplot
> 
> ### ** Examples
> 
> Sigma <- matrix(c(1,1,1,2), 2, 2)
> mean <- c(0, -1)
> xlim <- c(-3, 5) 
> ylim <- c(-5, 3)
> #
> # multivariate normal density, contour-level plot
> gp <- 'col="blue", nlevels=6, main="bivariate normal density"'
> u <- plot_fxy(dmnorm, xlim, ylim, mean=mean, varcov=Sigma,  grpar=gp)
> cat(str(u))
List of 4
 $ x       : num [1:51] -3 -2.84 -2.68 -2.52 -2.36 -2.2 -2.04 -1.88 -1.72 -1.56 ...
 $ y       : num [1:51] -5 -4.84 -4.68 -4.52 -4.36 -4.2 -4.04 -3.88 -3.72 -3.56 ...
 $ pts     : num [1:2601, 1:2] -3 -2.84 -2.68 -2.52 -2.36 -2.2 -2.04 -1.88 -1.72 -1.56 ...
 $ f.values: num [1:51, 1:51] 0.00107 0.00144 0.00184 0.00222 0.00256 ...
> #---
> # multivariate normal density, filled-contour plot
> plot_fxy(dmnorm,  xlim, ylim, mean=mean, varcov=Sigma,grf="filled.contour")
> #---
> # multivariate normal density, perspective plot
> gp <- "theta = 10, phi = 25, r = 2.5"
> plot_fxy(dmnorm, xlim, ylim, mean=mean, varcov=Sigma, grf="persp", grpar=gp)
> #---
> # multivariate Student's "t" density;
> # the xlim argument passed to function 'grf' overrides the earlier xlim;
> # xlim and ylim can be placed after the arguments of 'f', if one prefers so
> grp <- 'xlim=c(-1, 3)'
> plot_fxy(dmt, mean=mean, S=Sigma, df=8, xlim, ylim, npt=101, 
+         grf="filled.contour", grpar=grp)
> #---
> # multivariate truncated normal density, 'image' plot
> low <- c(-3, -5)
> hi <- c(1, 0)
> plot_fxy(dmtruncnorm, mean=mean, varcov=Sigma, lower=low, upper=hi,
+         xlim, ylim, npt=81, grf="image")
> #---
> # multivariate truncated normal distribution function, 'image' plot;
> # hence not a density function 
> low <- c(-3, -5)
> hi <- c(1, 0)
> v <- plot_fxy(pmtruncnorm, mean=mean, varcov=Sigma, lower=low, upper=hi, 
+               xlim, ylim, npt=c(61, 81), grf="image")        
> #---
> # a different sort of 'f' function (lbeta), not a component of this package
> funct <- function(z) lbeta(a=z[,1], b=z[,2])
> plot_fxy(funct, xlim=c(0.1, 2), ylim=c(0.1, 2), npt=41, 
+          grpar='main="function log-beta(a,b)", xlab="a", ylab="b"')
> 
> 
> 
> cleanEx()
> nameEx("recintab")
> ### * recintab
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: recintab
> ### Title: Moments of arbitrary order of a (possibly) truncated
> ###   multivariate normal variable
> ### Aliases: recintab
> ### Keywords: distribution multivariate
> 
> ### ** Examples
> 
> mu <- c(1, -0.5, 0)
> Sigma <- toeplitz(1/(1:3))
> low <- c(-Inf, -3, -4)
> hi <- c(1.5, Inf, 2)
> M <- recintab(c(2,3,1), low, hi, mu, Sigma)
> M/M[1]
, , 1

          [,1]       [,2]      [,3]       [,4]
[1,] 1.0000000 -0.7449601 1.3615927 -2.1572393
[2,] 0.4948696 -0.1485475 0.3172392 -0.1564845
[3,] 0.7223036 -0.4329163 0.8815405 -1.2852227

, , 2

            [,1]       [,2]        [,3]         [,4]
[1,] -0.19029810 0.50115916 -0.78944146  1.788477282
[2,]  0.04874188 0.07006476  0.04883831 -0.006422894
[3,] -0.07242256 0.32602484 -0.46282489  1.168039589

> # cross-moments up to order 2 for X1, up to the 3 for X2, up to 1 for X3,
> # if the components of the trivariate variable are denoted (X1,X2,X3)
> #--
> # Example 2 of Leppard & Tallis (1989, Appl.Stat. vol.38, p.547)
> truncp <- c(0, 1, 2)
> U <- c(0, 0, 0)
> V <- 0.5*(diag(3) + matrix(1, 3, 3))
> M <- recintab(c(2,2,2), truncp, rep(Inf,3), U, V)
> mom <- M/M[1]
> EX <-  c(mom[2,1,1], mom[1,2,1], mom[1,1,2])
> print(EX, digits=9)
[1] 1.48850857 1.78906548 2.42007685
> EX2 <- matrix(c(
+           mom[3,1,1], mom[2,2,1], mom[2,1,2],
+           mom[2,2,1], mom[1,3,1], mom[1,2,2],
+           mom[2,1,2], mom[1,2,2], mom[1,1,3]), 
+           3, 3, byrow=TRUE)
> varX <- EX2 - outer(EX ,EX)       
> print(varX, digits=9)
             [,1]         [,2]         [,3]
[1,] 0.5886940196 0.1008819835 0.0468289242
[2,] 0.1008819835 0.3267236934 0.0302286943
[3,] 0.0468289242 0.0302286943 0.1346786022
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("sample_Mardia_measures")
> ### * sample_Mardia_measures
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_Mardia_measures
> ### Title: The Mardia measures of multivariate skewness and kurtosis for a
> ###   given sample
> ### Aliases: sample_Mardia_measures
> ### Keywords: distribution multivariate
> 
> ### ** Examples
> 
> set.seed(1)
> x <- rmnorm(100, mean=1:3, varcov=toeplitz(1/(1:3)))
> sample_Mardia_measures(x)
         b1          b2          g1          g2        p.b1        p.b2 
  0.3567825  14.9484650   0.3677787   0.2582266   0.7967055   0.9998121 
          n 
100.0000000 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.338 0.033 1.391 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
