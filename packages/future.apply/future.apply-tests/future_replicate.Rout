
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[17:44:52.897] plan(): Setting new future strategy stack:
[17:44:52.897] List of future strategies:
[17:44:52.897] 1. sequential:
[17:44:52.897]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:52.897]    - tweaked: FALSE
[17:44:52.897]    - call: future::plan("sequential")
[17:44:52.911] plan(): nbrOfWorkers() = 1
> 
> message("*** future_replicate() ...")
*** future_replicate() ...
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+   
+   y0 <- replicate(5L, sample(10L, size = 1L))
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(length(y0) == length(y1))
+   
+   set.seed(0xBEEF)
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   set.seed(0xBEEF)
+   y2 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(all.equal(y2, y1))
+   
+   y3 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   y4 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   stopifnot(all.equal(y4, y3))
+   
+   
+   message("- example(replicate) ...")
+   
+   foo <- function(x = 1, y = 2) c(x, y)
+   bar0 <- function(n, x) replicate(n, foo(x = x))
+   y0 <- bar0(5, x = 3)
+   
+   bar1 <- function(n, x) future_replicate(n, foo(x = x))
+   y1 <- bar1(5, x = 3)
+   stopifnot(all.equal(y1, y0))
+   
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[17:44:52.935] plan(): Setting new future strategy stack:
[17:44:52.935] List of future strategies:
[17:44:52.935] 1. sequential:
[17:44:52.935]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:52.935]    - tweaked: FALSE
[17:44:52.935]    - call: plan(strategy)
[17:44:52.947] plan(): nbrOfWorkers() = 1
[17:44:52.949] future_lapply() ...
[17:44:52.952] Generating random seeds ...
[17:44:52.952] Generating random seed streams for 5 elements ...
[17:44:52.953] Generating random seed streams for 5 elements ... DONE
[17:44:52.953] Generating random seeds ... DONE
[17:44:52.953] Will set RNG state on exit: 10403, 8, -346376158, 1159811709, -576505993, 2032683166, -89385128, -1829150021, 1046211673, 627906536, -1153244650, 311403921, 1022025283, 919539026, -1748422172, 76525607, -287228803, 58442100, -1963504294, 1375677349, 1815919551, -1975146426, 2003085008, -823873293, -668162543, 1173299264, -1674533858, -1054715159, 1643145243, -1011458006, 283222860, 1221439759, 711722053, 1680000508, -213982126, -1053530675, 536401799, -159382930, 1738527304, 80512075, -1840712279, 1656244472, 1984408614, -1692308159, 1975925459, 1845437058, 1135184052, 1265567799, -1737939, -1740623804, -1524376214, 602057173, -1733460113, -1562343818, 430098848, -1749545373, 1461548801, 1853498992, -526253554, -738260359, 406115851, -1070414022, -1002185156, 1782400383, -283056427, -1751832852, -1409517502, -364748899, 1635290647, -1824943234, 176693560, 1874038299, 6098809, -1854752312, 1894712822, -651311055, -345333149, 1755110962, 368642948, -1518294585, 562135197, -1425106924, -812560710, 1923383045, -1604129569, 2030263654, -948627216, 1152949267, -1481289295, 1107135584, 2013014526, -969757303, -1557534021, 851818122, 634052972, 1197668079, 979104037, -154284068, 1405525426, -1339233107, 345377895, 1768919950, 802387048, -1571704725, 29571593, -1442806632, -1064904762, -571397343, 473671603, 1267306274, 468951316, 1438044567, -1030205043, 1691244708, 1002680970, 228485365, 1432706895, 1939130454, -1134562560, -1479580093, -1308230175, -2135357104, 1494908846, -1057393319, 126849899, -1296854310, -2138864740, -1798078561, 354944501, -816076660, -968218270, 55076157, 1589339575, 1126871646, 502862744, 1731705595, 746189465, 1439021864, 2022943190, -1570875823, -1120709373, 45762706, -376635868, -1637441305, 1232598333, 586813876, -1925239270, -232895131, -1764101121, 923193990, 1611207184, -1294735181, 752001873, 1958825728, -1335108130, 727148073, 1030147547, -1080241430, 1468268684, -792416305, 1322559365, 563528764, 1818404114, 1418736141, 187271495, -33268946, 649311880, -550895733, 1681813353, -1116724936, -740942874, 806685569, 307766035, 1295207618, -260675724, -1239741577, 123374701, -1149164796, 2008529450, 1980290965, -1251091409, -1190791882, -1423721120, -534119517, -2062607167, 1857658032, 1550826446, 357441337, 1566474059, -229929734, 608572924, 228656703, 1169881877, 146036780, 1549617410, 1432396253, 1598554327, -574469186, 1440923128, 1262709211, -1983256519, 1149227400, 627637558, 2026080113, -1016728157, -1292621582, -1173384124, 169987847, 759430877, -1687994412, -195678470, -1350405563, -1410604385, -1946873818, 1593242800, -1740532397, -1900097423, 172469664, 2007867710, 1096372297, -1407707909, -794772278, -1322925524, 959591983, 1868199653, 1240316828, -306557454, 677091437, -326340185, -271661332, -1476271532, -1867972974, -172575456, -2113438260, 1269829344, 1462713538, -1915204568, -563641428, -1927764292, 554842098, -1574591952, -1364935772, -1954810440, -660334758, -1178011504, -1500043396, -800492268, 492024130, 389725440, 1001734588, 1135529296, -1287194334, -690929080, -1790710772, 740377180, 86980050, 1725210112, 116953428, -99265304, 353147130, -1204272432, -950055124, 1263889652, 1006224786, 1532180832, 572901388, -26982176, -134027678, -1884368728, 444786764, 552793980, 1079471410, -364028304, 1737017156, -1110733864, -515141766, 697406512, -173137988, -1915356588, -1195499454, 1903015584, 1842563772, 1260050384, 1293949282, -413271320, -362621748, 887253500, 2124710386, 389898368, -1426014732, -1679426936, -1582737606, 447088976, -238663572, 1450313108, 2083519570, 673718752, 1609400524, -1691669856, 563143042, 2122061032, 1082424044, 2055627068, -36209550, -1980309904, 1332078116, 164851768, 640406810, 1833136336, -1483915972, -276783212, -2017712254, -1458405440, -1357451716, -1076833904, -1773124574, -1259831032, 601265292, 275800860, -428703598, -217312896, 492932116, -584612056, 594652730, 52740560, 898404716, 1375063988, 747431442, -980577312, 659125708, 1280681184, 1544509474, 752484136, -314391028, 675945276, 1982979058, -59444496, 952091204, -2076641704, -2112151750, -551896080, 1442565820, -1990791916, 532156610, -715938720, -1194675844, 1017470928, -2128041694, 1156349608, 390497164, 747922620, 1262683954, 1544516160, -750859084, 1998496840, 1420206522, 934514192, -1728616212, -516988588, 1743527698, -1932618336, 733620940, -1456658848, 2120785858, -1961870552, 1089033644, 245283132, -483367054, -14493392, -753447132, 13086008, 2012359386, -964122736, -114101508, 1797353364, -943515582, -766886656, 2063103036, 275797328, 674269346, -58558648, -2006429940, -1367545124, 856234834, 896049792, 1080100948, 1165956072, 517351162, -1937092272, 870148908, -170406028, 1731242898, 1589010016, 234815372, 616424288, 2086109154, 1459412904, -370531124, -645919236, 896279474, -579448336, -494882364, 542335320, 463766906, 1148445104, 394211260, -355598252, -1110555710, 975068192, -666379076, 1528283728, -1228896286, -722325912, 2040871500, -2122718980, 2089766898, 1341478144, 1992855412, -533000184, 929762746, -1008433712, 1193343980, -725332076, 2116281298, 607909728, 1061588300, -1092354784, -111762558, -816561432, 1473979628, -198921668, -1018358926, 1891035760, -288997340, -353464520, 1886663834, 122821328, -977106756, 273315476, -295137662, 1344646336, 355254588, 155834512, -58756574, -1880150520, 1978689804, -1474020708, -2006665710, 1733641600, -1241266668, -874856920, 286487866, -1989384240, -1214733716, -1835937996, -589837678, 737012802, -986574288, 1334893145, -180966453, 471497788, 2084422250, -1302445921, -1531598551, 567107006, -745010004, -408913411, -1000701625, 465533488, -219808946, 954654587, -670127907, 1370530058, -931687384, -1185060719, 1304362115, -704451196, 231189426, 1640797447, -282103983, 161890006, 53872564, -1238349883, 1248278287, -1955396216, -1009856346, -1295335341, -842208843, 324116242, 1790829792, -1665103543, 142914427, -1533374900, -1978507302, 972217807, -434099303, -956564562, 1685430460, -825632467, -1402123561, -1545309408, -539278210, 165972555, 350869581, 219297402, -810836296, 787766369, 412012051, -467647436, 1803782722, -703922601, -1396951647, 2043205222, 1294743140, -1021741675, 157320895, 1311350360, -1254716810, 1437435523, 1340390085, 903063522, 1004532304, -2070997127, 878292139, -1635728356, -265055414, -960523457, 1935949193, -967260770, 735034444, 1359662621, -426753113, -546699568, 1674287214, -1657336037, 333844605, 1333902954, -989569272, 335986609, -1397147613, 1923893540, -632717870, 424197671, -1118107535, -689496394, 482816596, 1884196581, -1432376593, -215382488, -1643040122, -1244771149, 880087573, -1534544782, 981856448, -838081239, -1214792805, -449155988, 1064571002, -641427025, 1246531769, 1605354190, 1836982300, -1547005043, -2014687753, -311549696, -488984738, 1642018859, -834455763, -246842470, -278193832, -1075782463, -302773389, 1895573652, 1555238178, 2133371959, 739452161, -1451046906, 799702596, -1990621323, 1454267103, 277538360, 1613755926, -341464541, 2090698213, 395303938, -1925955984, -1442796519, -564933109, -1276670724, -753917654, -454576289, -981272855, -199002626, 1479330284, 391524669, -1791581945, 2125066480, 56528014, -453597509, -1591183715, 1464357450, 1790218344, 1037197393, -504458429, -972343740, 2026570994, -1006657337, -640470383, 1494813718, -2135796108, -574082811, 1991937871, -1340569272, 1703957734, -1969550829, -915862155, -1271500462, -1018390112, -1969663863, 2138142907, -2068286708, 1621840538, -93325297, 1969265753, 1197748462, -332574227
[17:44:52.953] Number of chunks: 1
[17:44:52.954] getGlobalsAndPackagesXApply() ...
[17:44:52.954]  - future.globals: TRUE
[17:44:52.954] getGlobalsAndPackages() ...
[17:44:52.954] Searching for globals...
[17:44:52.956] - globals found: [2] ‘FUN’, ‘sample’
[17:44:52.957] Searching for globals ... DONE
[17:44:52.957] Resolving globals: FALSE
[17:44:52.958] The total size of the 1 globals is 616 bytes (616 bytes)
[17:44:52.958] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:44:52.958] - globals: [1] ‘FUN’
[17:44:52.958] 
[17:44:52.958] getGlobalsAndPackages() ... DONE
[17:44:52.958]  - globals found/used: [n=1] ‘FUN’
[17:44:52.959]  - needed namespaces: [n=0] 
[17:44:52.959] Finding globals ... DONE
[17:44:52.959]  - use_args: TRUE
[17:44:52.959]  - Getting '...' globals ...
[17:44:52.960] resolve() on list ...
[17:44:52.960]  recursive: 0
[17:44:52.960]  length: 1
[17:44:52.960]  elements: ‘...’
[17:44:52.960]  length: 0 (resolved future 1)
[17:44:52.960] resolve() on list ... DONE
[17:44:52.960]    - '...' content: [n=0] 
[17:44:52.961] List of 1
[17:44:52.961]  $ ...: list()
[17:44:52.961]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:52.961]  - attr(*, "where")=List of 1
[17:44:52.961]   ..$ ...:<environment: 0x558385ac17e8> 
[17:44:52.961]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:52.961]  - attr(*, "resolved")= logi TRUE
[17:44:52.961]  - attr(*, "total_size")= num NA
[17:44:52.965]  - Getting '...' globals ... DONE
[17:44:52.965] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:44:52.965] List of 2
[17:44:52.965]  $ ...future.FUN:function (...)  
[17:44:52.965]  $ ...          : list()
[17:44:52.965]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:52.965]  - attr(*, "where")=List of 2
[17:44:52.965]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:44:52.965]   ..$ ...          :<environment: 0x558385ac17e8> 
[17:44:52.965]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:52.965]  - attr(*, "resolved")= logi FALSE
[17:44:52.965]  - attr(*, "total_size")= num 616
[17:44:52.968] Packages to be attached in all futures: [n=0] 
[17:44:52.968] getGlobalsAndPackagesXApply() ... DONE
[17:44:52.968] Number of futures (= number of chunks): 1
[17:44:52.968] Launching 1 futures (chunks) ...
[17:44:52.968] Chunk #1 of 1 ...
[17:44:52.969]  - Finding globals in 'X' for chunk #1 ...
[17:44:52.969] getGlobalsAndPackages() ...
[17:44:52.969] Searching for globals...
[17:44:52.969] 
[17:44:52.969] Searching for globals ... DONE
[17:44:52.969] - globals: [0] <none>
[17:44:52.969] getGlobalsAndPackages() ... DONE
[17:44:52.970]    + additional globals found: [n=0] 
[17:44:52.970]    + additional namespaces needed: [n=0] 
[17:44:52.970]  - Finding globals in 'X' for chunk #1 ... DONE
[17:44:52.970]  - seeds: [5] <seeds>
[17:44:52.970]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:52.970] getGlobalsAndPackages() ...
[17:44:52.970] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:52.970] Resolving globals: FALSE
[17:44:52.970] Tweak future expression to call with '...' arguments ...
[17:44:52.971] {
[17:44:52.971]     do.call(function(...) {
[17:44:52.971]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:52.971]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:52.971]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:52.971]             on.exit(options(oopts), add = TRUE)
[17:44:52.971]         }
[17:44:52.971]         {
[17:44:52.971]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:52.971]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:52.971]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:52.971]                   envir = globalenv(), inherits = FALSE)
[17:44:52.971]                 ...future.FUN(...future.X_jj, ...)
[17:44:52.971]             })
[17:44:52.971]         }
[17:44:52.971]     }, args = future.call.arguments)
[17:44:52.971] }
[17:44:52.971] Tweak future expression to call with '...' arguments ... DONE
[17:44:52.971] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:52.971] 
[17:44:52.971] getGlobalsAndPackages() ... DONE
[17:44:52.972] run() for ‘Future’ ...
[17:44:52.972] - state: ‘created’
[17:44:52.972] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:44:52.973] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:44:52.973] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:44:52.973]   - Field: ‘label’
[17:44:52.973]   - Field: ‘local’
[17:44:52.973]   - Field: ‘owner’
[17:44:52.973]   - Field: ‘envir’
[17:44:52.973]   - Field: ‘packages’
[17:44:52.973]   - Field: ‘gc’
[17:44:52.973]   - Field: ‘conditions’
[17:44:52.973]   - Field: ‘expr’
[17:44:52.974]   - Field: ‘uuid’
[17:44:52.974]   - Field: ‘seed’
[17:44:52.974]   - Field: ‘version’
[17:44:52.974]   - Field: ‘result’
[17:44:52.974]   - Field: ‘asynchronous’
[17:44:52.974]   - Field: ‘calls’
[17:44:52.974]   - Field: ‘globals’
[17:44:52.974]   - Field: ‘stdout’
[17:44:52.974]   - Field: ‘earlySignal’
[17:44:52.974]   - Field: ‘lazy’
[17:44:52.974]   - Field: ‘state’
[17:44:52.974] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:44:52.975] - Launch lazy future ...
[17:44:52.975] Packages needed by the future expression (n = 0): <none>
[17:44:52.978] Packages needed by future strategies (n = 0): <none>
[17:44:52.978] {
[17:44:52.978]     {
[17:44:52.978]         {
[17:44:52.978]             ...future.startTime <- base::Sys.time()
[17:44:52.978]             {
[17:44:52.978]                 {
[17:44:52.978]                   {
[17:44:52.978]                     base::local({
[17:44:52.978]                       has_future <- base::requireNamespace("future", 
[17:44:52.978]                         quietly = TRUE)
[17:44:52.978]                       if (has_future) {
[17:44:52.978]                         ns <- base::getNamespace("future")
[17:44:52.978]                         version <- ns[[".package"]][["version"]]
[17:44:52.978]                         if (is.null(version)) 
[17:44:52.978]                           version <- utils::packageVersion("future")
[17:44:52.978]                       }
[17:44:52.978]                       else {
[17:44:52.978]                         version <- NULL
[17:44:52.978]                       }
[17:44:52.978]                       if (!has_future || version < "1.8.0") {
[17:44:52.978]                         info <- base::c(r_version = base::gsub("R version ", 
[17:44:52.978]                           "", base::R.version$version.string), 
[17:44:52.978]                           platform = base::sprintf("%s (%s-bit)", 
[17:44:52.978]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:52.978]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:52.978]                             "release", "version")], collapse = " "), 
[17:44:52.978]                           hostname = base::Sys.info()[["nodename"]])
[17:44:52.978]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:44:52.978]                           info)
[17:44:52.978]                         info <- base::paste(info, collapse = "; ")
[17:44:52.978]                         if (!has_future) {
[17:44:52.978]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:52.978]                             info)
[17:44:52.978]                         }
[17:44:52.978]                         else {
[17:44:52.978]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:52.978]                             info, version)
[17:44:52.978]                         }
[17:44:52.978]                         base::stop(msg)
[17:44:52.978]                       }
[17:44:52.978]                     })
[17:44:52.978]                   }
[17:44:52.978]                   ...future.strategy.old <- future::plan("list")
[17:44:52.978]                   options(future.plan = NULL)
[17:44:52.978]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:52.978]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:52.978]                 }
[17:44:52.978]                 ...future.workdir <- getwd()
[17:44:52.978]             }
[17:44:52.978]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:52.978]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:52.978]         }
[17:44:52.978]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:52.978]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:52.978]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:52.978]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:52.978]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:52.978]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:52.978]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:52.978]             base::names(...future.oldOptions))
[17:44:52.978]     }
[17:44:52.978]     if (FALSE) {
[17:44:52.978]     }
[17:44:52.978]     else {
[17:44:52.978]         if (TRUE) {
[17:44:52.978]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:52.978]                 open = "w")
[17:44:52.978]         }
[17:44:52.978]         else {
[17:44:52.978]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:52.978]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:52.978]         }
[17:44:52.978]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:52.978]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:52.978]             base::sink(type = "output", split = FALSE)
[17:44:52.978]             base::close(...future.stdout)
[17:44:52.978]         }, add = TRUE)
[17:44:52.978]     }
[17:44:52.978]     ...future.frame <- base::sys.nframe()
[17:44:52.978]     ...future.conditions <- base::list()
[17:44:52.978]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:52.978]     if (FALSE) {
[17:44:52.978]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:52.978]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:52.978]     }
[17:44:52.978]     ...future.result <- base::tryCatch({
[17:44:52.978]         base::withCallingHandlers({
[17:44:52.978]             ...future.value <- base::withVisible(base::local({
[17:44:52.978]                 do.call(function(...) {
[17:44:52.978]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:52.978]                   if (!identical(...future.globals.maxSize.org, 
[17:44:52.978]                     ...future.globals.maxSize)) {
[17:44:52.978]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:52.978]                     on.exit(options(oopts), add = TRUE)
[17:44:52.978]                   }
[17:44:52.978]                   {
[17:44:52.978]                     lapply(seq_along(...future.elements_ii), 
[17:44:52.978]                       FUN = function(jj) {
[17:44:52.978]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:52.978]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:52.978]                           envir = globalenv(), inherits = FALSE)
[17:44:52.978]                         ...future.FUN(...future.X_jj, ...)
[17:44:52.978]                       })
[17:44:52.978]                   }
[17:44:52.978]                 }, args = future.call.arguments)
[17:44:52.978]             }))
[17:44:52.978]             future::FutureResult(value = ...future.value$value, 
[17:44:52.978]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:52.978]                   ...future.rng), globalenv = if (FALSE) 
[17:44:52.978]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:52.978]                     ...future.globalenv.names))
[17:44:52.978]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:52.978]         }, condition = base::local({
[17:44:52.978]             c <- base::c
[17:44:52.978]             inherits <- base::inherits
[17:44:52.978]             invokeRestart <- base::invokeRestart
[17:44:52.978]             length <- base::length
[17:44:52.978]             list <- base::list
[17:44:52.978]             seq.int <- base::seq.int
[17:44:52.978]             signalCondition <- base::signalCondition
[17:44:52.978]             sys.calls <- base::sys.calls
[17:44:52.978]             `[[` <- base::`[[`
[17:44:52.978]             `+` <- base::`+`
[17:44:52.978]             `<<-` <- base::`<<-`
[17:44:52.978]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:52.978]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:52.978]                   3L)]
[17:44:52.978]             }
[17:44:52.978]             function(cond) {
[17:44:52.978]                 is_error <- inherits(cond, "error")
[17:44:52.978]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:52.978]                   NULL)
[17:44:52.978]                 if (is_error) {
[17:44:52.978]                   sessionInformation <- function() {
[17:44:52.978]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:52.978]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:52.978]                       search = base::search(), system = base::Sys.info())
[17:44:52.978]                   }
[17:44:52.978]                   ...future.conditions[[length(...future.conditions) + 
[17:44:52.978]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:52.978]                     cond$call), session = sessionInformation(), 
[17:44:52.978]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:52.978]                   signalCondition(cond)
[17:44:52.978]                 }
[17:44:52.978]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:52.978]                 "immediateCondition"))) {
[17:44:52.978]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:52.978]                   ...future.conditions[[length(...future.conditions) + 
[17:44:52.978]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:52.978]                   if (TRUE && !signal) {
[17:44:52.978]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:52.978]                     {
[17:44:52.978]                       inherits <- base::inherits
[17:44:52.978]                       invokeRestart <- base::invokeRestart
[17:44:52.978]                       is.null <- base::is.null
[17:44:52.978]                       muffled <- FALSE
[17:44:52.978]                       if (inherits(cond, "message")) {
[17:44:52.978]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:52.978]                         if (muffled) 
[17:44:52.978]                           invokeRestart("muffleMessage")
[17:44:52.978]                       }
[17:44:52.978]                       else if (inherits(cond, "warning")) {
[17:44:52.978]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:52.978]                         if (muffled) 
[17:44:52.978]                           invokeRestart("muffleWarning")
[17:44:52.978]                       }
[17:44:52.978]                       else if (inherits(cond, "condition")) {
[17:44:52.978]                         if (!is.null(pattern)) {
[17:44:52.978]                           computeRestarts <- base::computeRestarts
[17:44:52.978]                           grepl <- base::grepl
[17:44:52.978]                           restarts <- computeRestarts(cond)
[17:44:52.978]                           for (restart in restarts) {
[17:44:52.978]                             name <- restart$name
[17:44:52.978]                             if (is.null(name)) 
[17:44:52.978]                               next
[17:44:52.978]                             if (!grepl(pattern, name)) 
[17:44:52.978]                               next
[17:44:52.978]                             invokeRestart(restart)
[17:44:52.978]                             muffled <- TRUE
[17:44:52.978]                             break
[17:44:52.978]                           }
[17:44:52.978]                         }
[17:44:52.978]                       }
[17:44:52.978]                       invisible(muffled)
[17:44:52.978]                     }
[17:44:52.978]                     muffleCondition(cond, pattern = "^muffle")
[17:44:52.978]                   }
[17:44:52.978]                 }
[17:44:52.978]                 else {
[17:44:52.978]                   if (TRUE) {
[17:44:52.978]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:52.978]                     {
[17:44:52.978]                       inherits <- base::inherits
[17:44:52.978]                       invokeRestart <- base::invokeRestart
[17:44:52.978]                       is.null <- base::is.null
[17:44:52.978]                       muffled <- FALSE
[17:44:52.978]                       if (inherits(cond, "message")) {
[17:44:52.978]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:52.978]                         if (muffled) 
[17:44:52.978]                           invokeRestart("muffleMessage")
[17:44:52.978]                       }
[17:44:52.978]                       else if (inherits(cond, "warning")) {
[17:44:52.978]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:52.978]                         if (muffled) 
[17:44:52.978]                           invokeRestart("muffleWarning")
[17:44:52.978]                       }
[17:44:52.978]                       else if (inherits(cond, "condition")) {
[17:44:52.978]                         if (!is.null(pattern)) {
[17:44:52.978]                           computeRestarts <- base::computeRestarts
[17:44:52.978]                           grepl <- base::grepl
[17:44:52.978]                           restarts <- computeRestarts(cond)
[17:44:52.978]                           for (restart in restarts) {
[17:44:52.978]                             name <- restart$name
[17:44:52.978]                             if (is.null(name)) 
[17:44:52.978]                               next
[17:44:52.978]                             if (!grepl(pattern, name)) 
[17:44:52.978]                               next
[17:44:52.978]                             invokeRestart(restart)
[17:44:52.978]                             muffled <- TRUE
[17:44:52.978]                             break
[17:44:52.978]                           }
[17:44:52.978]                         }
[17:44:52.978]                       }
[17:44:52.978]                       invisible(muffled)
[17:44:52.978]                     }
[17:44:52.978]                     muffleCondition(cond, pattern = "^muffle")
[17:44:52.978]                   }
[17:44:52.978]                 }
[17:44:52.978]             }
[17:44:52.978]         }))
[17:44:52.978]     }, error = function(ex) {
[17:44:52.978]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:52.978]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:52.978]                 ...future.rng), started = ...future.startTime, 
[17:44:52.978]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:52.978]             version = "1.8"), class = "FutureResult")
[17:44:52.978]     }, finally = {
[17:44:52.978]         if (!identical(...future.workdir, getwd())) 
[17:44:52.978]             setwd(...future.workdir)
[17:44:52.978]         {
[17:44:52.978]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:52.978]                 ...future.oldOptions$nwarnings <- NULL
[17:44:52.978]             }
[17:44:52.978]             base::options(...future.oldOptions)
[17:44:52.978]             if (.Platform$OS.type == "windows") {
[17:44:52.978]                 old_names <- names(...future.oldEnvVars)
[17:44:52.978]                 envs <- base::Sys.getenv()
[17:44:52.978]                 names <- names(envs)
[17:44:52.978]                 common <- intersect(names, old_names)
[17:44:52.978]                 added <- setdiff(names, old_names)
[17:44:52.978]                 removed <- setdiff(old_names, names)
[17:44:52.978]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:52.978]                   envs[common]]
[17:44:52.978]                 NAMES <- toupper(changed)
[17:44:52.978]                 args <- list()
[17:44:52.978]                 for (kk in seq_along(NAMES)) {
[17:44:52.978]                   name <- changed[[kk]]
[17:44:52.978]                   NAME <- NAMES[[kk]]
[17:44:52.978]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:52.978]                     next
[17:44:52.978]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:52.978]                 }
[17:44:52.978]                 NAMES <- toupper(added)
[17:44:52.978]                 for (kk in seq_along(NAMES)) {
[17:44:52.978]                   name <- added[[kk]]
[17:44:52.978]                   NAME <- NAMES[[kk]]
[17:44:52.978]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:52.978]                     next
[17:44:52.978]                   args[[name]] <- ""
[17:44:52.978]                 }
[17:44:52.978]                 NAMES <- toupper(removed)
[17:44:52.978]                 for (kk in seq_along(NAMES)) {
[17:44:52.978]                   name <- removed[[kk]]
[17:44:52.978]                   NAME <- NAMES[[kk]]
[17:44:52.978]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:52.978]                     next
[17:44:52.978]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:52.978]                 }
[17:44:52.978]                 if (length(args) > 0) 
[17:44:52.978]                   base::do.call(base::Sys.setenv, args = args)
[17:44:52.978]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:52.978]             }
[17:44:52.978]             else {
[17:44:52.978]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:52.978]             }
[17:44:52.978]             {
[17:44:52.978]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:52.978]                   0L) {
[17:44:52.978]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:52.978]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:52.978]                   base::options(opts)
[17:44:52.978]                 }
[17:44:52.978]                 {
[17:44:52.978]                   {
[17:44:52.978]                     base::assign(".Random.seed", c(10403L, 8L, 
[17:44:52.978]                     -346376158L, 1159811709L, -576505993L, 2032683166L, 
[17:44:52.978]                     -89385128L, -1829150021L, 1046211673L, 627906536L, 
[17:44:52.978]                     -1153244650L, 311403921L, 1022025283L, 919539026L, 
[17:44:52.978]                     -1748422172L, 76525607L, -287228803L, 58442100L, 
[17:44:52.978]                     -1963504294L, 1375677349L, 1815919551L, -1975146426L, 
[17:44:52.978]                     2003085008L, -823873293L, -668162543L, 1173299264L, 
[17:44:52.978]                     -1674533858L, -1054715159L, 1643145243L, 
[17:44:52.978]                     -1011458006L, 283222860L, 1221439759L, 711722053L, 
[17:44:52.978]                     1680000508L, -213982126L, -1053530675L, 536401799L, 
[17:44:52.978]                     -159382930L, 1738527304L, 80512075L, -1840712279L, 
[17:44:52.978]                     1656244472L, 1984408614L, -1692308159L, 1975925459L, 
[17:44:52.978]                     1845437058L, 1135184052L, 1265567799L, -1737939L, 
[17:44:52.978]                     -1740623804L, -1524376214L, 602057173L, -1733460113L, 
[17:44:52.978]                     -1562343818L, 430098848L, -1749545373L, 1461548801L, 
[17:44:52.978]                     1853498992L, -526253554L, -738260359L, 406115851L, 
[17:44:52.978]                     -1070414022L, -1002185156L, 1782400383L, 
[17:44:52.978]                     -283056427L, -1751832852L, -1409517502L, 
[17:44:52.978]                     -364748899L, 1635290647L, -1824943234L, 176693560L, 
[17:44:52.978]                     1874038299L, 6098809L, -1854752312L, 1894712822L, 
[17:44:52.978]                     -651311055L, -345333149L, 1755110962L, 368642948L, 
[17:44:52.978]                     -1518294585L, 562135197L, -1425106924L, -812560710L, 
[17:44:52.978]                     1923383045L, -1604129569L, 2030263654L, -948627216L, 
[17:44:52.978]                     1152949267L, -1481289295L, 1107135584L, 2013014526L, 
[17:44:52.978]                     -969757303L, -1557534021L, 851818122L, 634052972L, 
[17:44:52.978]                     1197668079L, 979104037L, -154284068L, 1405525426L, 
[17:44:52.978]                     -1339233107L, 345377895L, 1768919950L, 802387048L, 
[17:44:52.978]                     -1571704725L, 29571593L, -1442806632L, -1064904762L, 
[17:44:52.978]                     -571397343L, 473671603L, 1267306274L, 468951316L, 
[17:44:52.978]                     1438044567L, -1030205043L, 1691244708L, 1002680970L, 
[17:44:52.978]                     228485365L, 1432706895L, 1939130454L, -1134562560L, 
[17:44:52.978]                     -1479580093L, -1308230175L, -2135357104L, 
[17:44:52.978]                     1494908846L, -1057393319L, 126849899L, -1296854310L, 
[17:44:52.978]                     -2138864740L, -1798078561L, 354944501L, -816076660L, 
[17:44:52.978]                     -968218270L, 55076157L, 1589339575L, 1126871646L, 
[17:44:52.978]                     502862744L, 1731705595L, 746189465L, 1439021864L, 
[17:44:52.978]                     2022943190L, -1570875823L, -1120709373L, 
[17:44:52.978]                     45762706L, -376635868L, -1637441305L, 1232598333L, 
[17:44:52.978]                     586813876L, -1925239270L, -232895131L, -1764101121L, 
[17:44:52.978]                     923193990L, 1611207184L, -1294735181L, 752001873L, 
[17:44:52.978]                     1958825728L, -1335108130L, 727148073L, 1030147547L, 
[17:44:52.978]                     -1080241430L, 1468268684L, -792416305L, 1322559365L, 
[17:44:52.978]                     563528764L, 1818404114L, 1418736141L, 187271495L, 
[17:44:52.978]                     -33268946L, 649311880L, -550895733L, 1681813353L, 
[17:44:52.978]                     -1116724936L, -740942874L, 806685569L, 307766035L, 
[17:44:52.978]                     1295207618L, -260675724L, -1239741577L, 123374701L, 
[17:44:52.978]                     -1149164796L, 2008529450L, 1980290965L, -1251091409L, 
[17:44:52.978]                     -1190791882L, -1423721120L, -534119517L, 
[17:44:52.978]                     -2062607167L, 1857658032L, 1550826446L, 357441337L, 
[17:44:52.978]                     1566474059L, -229929734L, 608572924L, 228656703L, 
[17:44:52.978]                     1169881877L, 146036780L, 1549617410L, 1432396253L, 
[17:44:52.978]                     1598554327L, -574469186L, 1440923128L, 1262709211L, 
[17:44:52.978]                     -1983256519L, 1149227400L, 627637558L, 2026080113L, 
[17:44:52.978]                     -1016728157L, -1292621582L, -1173384124L, 
[17:44:52.978]                     169987847L, 759430877L, -1687994412L, -195678470L, 
[17:44:52.978]                     -1350405563L, -1410604385L, -1946873818L, 
[17:44:52.978]                     1593242800L, -1740532397L, -1900097423L, 
[17:44:52.978]                     172469664L, 2007867710L, 1096372297L, -1407707909L, 
[17:44:52.978]                     -794772278L, -1322925524L, 959591983L, 1868199653L, 
[17:44:52.978]                     1240316828L, -306557454L, 677091437L, -326340185L, 
[17:44:52.978]                     -271661332L, -1476271532L, -1867972974L, 
[17:44:52.978]                     -172575456L, -2113438260L, 1269829344L, 1462713538L, 
[17:44:52.978]                     -1915204568L, -563641428L, -1927764292L, 
[17:44:52.978]                     554842098L, -1574591952L, -1364935772L, -1954810440L, 
[17:44:52.978]                     -660334758L, -1178011504L, -1500043396L, 
[17:44:52.978]                     -800492268L, 492024130L, 389725440L, 1001734588L, 
[17:44:52.978]                     1135529296L, -1287194334L, -690929080L, -1790710772L, 
[17:44:52.978]                     740377180L, 86980050L, 1725210112L, 116953428L, 
[17:44:52.978]                     -99265304L, 353147130L, -1204272432L, -950055124L, 
[17:44:52.978]                     1263889652L, 1006224786L, 1532180832L, 572901388L, 
[17:44:52.978]                     -26982176L, -134027678L, -1884368728L, 444786764L, 
[17:44:52.978]                     552793980L, 1079471410L, -364028304L, 1737017156L, 
[17:44:52.978]                     -1110733864L, -515141766L, 697406512L, -173137988L, 
[17:44:52.978]                     -1915356588L, -1195499454L, 1903015584L, 
[17:44:52.978]                     1842563772L, 1260050384L, 1293949282L, -413271320L, 
[17:44:52.978]                     -362621748L, 887253500L, 2124710386L, 389898368L, 
[17:44:52.978]                     -1426014732L, -1679426936L, -1582737606L, 
[17:44:52.978]                     447088976L, -238663572L, 1450313108L, 2083519570L, 
[17:44:52.978]                     673718752L, 1609400524L, -1691669856L, 563143042L, 
[17:44:52.978]                     2122061032L, 1082424044L, 2055627068L, -36209550L, 
[17:44:52.978]                     -1980309904L, 1332078116L, 164851768L, 640406810L, 
[17:44:52.978]                     1833136336L, -1483915972L, -276783212L, -2017712254L, 
[17:44:52.978]                     -1458405440L, -1357451716L, -1076833904L, 
[17:44:52.978]                     -1773124574L, -1259831032L, 601265292L, 275800860L, 
[17:44:52.978]                     -428703598L, -217312896L, 492932116L, -584612056L, 
[17:44:52.978]                     594652730L, 52740560L, 898404716L, 1375063988L, 
[17:44:52.978]                     747431442L, -980577312L, 659125708L, 1280681184L, 
[17:44:52.978]                     1544509474L, 752484136L, -314391028L, 675945276L, 
[17:44:52.978]                     1982979058L, -59444496L, 952091204L, -2076641704L, 
[17:44:52.978]                     -2112151750L, -551896080L, 1442565820L, -1990791916L, 
[17:44:52.978]                     532156610L, -715938720L, -1194675844L, 1017470928L, 
[17:44:52.978]                     -2128041694L, 1156349608L, 390497164L, 747922620L, 
[17:44:52.978]                     1262683954L, 1544516160L, -750859084L, 1998496840L, 
[17:44:52.978]                     1420206522L, 934514192L, -1728616212L, -516988588L, 
[17:44:52.978]                     1743527698L, -1932618336L, 733620940L, -1456658848L, 
[17:44:52.978]                     2120785858L, -1961870552L, 1089033644L, 245283132L, 
[17:44:52.978]                     -483367054L, -14493392L, -753447132L, 13086008L, 
[17:44:52.978]                     2012359386L, -964122736L, -114101508L, 1797353364L, 
[17:44:52.978]                     -943515582L, -766886656L, 2063103036L, 275797328L, 
[17:44:52.978]                     674269346L, -58558648L, -2006429940L, -1367545124L, 
[17:44:52.978]                     856234834L, 896049792L, 1080100948L, 1165956072L, 
[17:44:52.978]                     517351162L, -1937092272L, 870148908L, -170406028L, 
[17:44:52.978]                     1731242898L, 1589010016L, 234815372L, 616424288L, 
[17:44:52.978]                     2086109154L, 1459412904L, -370531124L, -645919236L, 
[17:44:52.978]                     896279474L, -579448336L, -494882364L, 542335320L, 
[17:44:52.978]                     463766906L, 1148445104L, 394211260L, -355598252L, 
[17:44:52.978]                     -1110555710L, 975068192L, -666379076L, 1528283728L, 
[17:44:52.978]                     -1228896286L, -722325912L, 2040871500L, -2122718980L, 
[17:44:52.978]                     2089766898L, 1341478144L, 1992855412L, -533000184L, 
[17:44:52.978]                     929762746L, -1008433712L, 1193343980L, -725332076L, 
[17:44:52.978]                     2116281298L, 607909728L, 1061588300L, -1092354784L, 
[17:44:52.978]                     -111762558L, -816561432L, 1473979628L, -198921668L, 
[17:44:52.978]                     -1018358926L, 1891035760L, -288997340L, -353464520L, 
[17:44:52.978]                     1886663834L, 122821328L, -977106756L, 273315476L, 
[17:44:52.978]                     -295137662L, 1344646336L, 355254588L, 155834512L, 
[17:44:52.978]                     -58756574L, -1880150520L, 1978689804L, -1474020708L, 
[17:44:52.978]                     -2006665710L, 1733641600L, -1241266668L, 
[17:44:52.978]                     -874856920L, 286487866L, -1989384240L, -1214733716L, 
[17:44:52.978]                     -1835937996L, -589837678L, 737012802L, -986574288L, 
[17:44:52.978]                     1334893145L, -180966453L, 471497788L, 2084422250L, 
[17:44:52.978]                     -1302445921L, -1531598551L, 567107006L, -745010004L, 
[17:44:52.978]                     -408913411L, -1000701625L, 465533488L, -219808946L, 
[17:44:52.978]                     954654587L, -670127907L, 1370530058L, -931687384L, 
[17:44:52.978]                     -1185060719L, 1304362115L, -704451196L, 231189426L, 
[17:44:52.978]                     1640797447L, -282103983L, 161890006L, 53872564L, 
[17:44:52.978]                     -1238349883L, 1248278287L, -1955396216L, 
[17:44:52.978]                     -1009856346L, -1295335341L, -842208843L, 
[17:44:52.978]                     324116242L, 1790829792L, -1665103543L, 142914427L, 
[17:44:52.978]                     -1533374900L, -1978507302L, 972217807L, -434099303L, 
[17:44:52.978]                     -956564562L, 1685430460L, -825632467L, -1402123561L, 
[17:44:52.978]                     -1545309408L, -539278210L, 165972555L, 350869581L, 
[17:44:52.978]                     219297402L, -810836296L, 787766369L, 412012051L, 
[17:44:52.978]                     -467647436L, 1803782722L, -703922601L, -1396951647L, 
[17:44:52.978]                     2043205222L, 1294743140L, -1021741675L, 157320895L, 
[17:44:52.978]                     1311350360L, -1254716810L, 1437435523L, 1340390085L, 
[17:44:52.978]                     903063522L, 1004532304L, -2070997127L, 878292139L, 
[17:44:52.978]                     -1635728356L, -265055414L, -960523457L, 1935949193L, 
[17:44:52.978]                     -967260770L, 735034444L, 1359662621L, -426753113L, 
[17:44:52.978]                     -546699568L, 1674287214L, -1657336037L, 333844605L, 
[17:44:52.978]                     1333902954L, -989569272L, 335986609L, -1397147613L, 
[17:44:52.978]                     1923893540L, -632717870L, 424197671L, -1118107535L, 
[17:44:52.978]                     -689496394L, 482816596L, 1884196581L, -1432376593L, 
[17:44:52.978]                     -215382488L, -1643040122L, -1244771149L, 
[17:44:52.978]                     880087573L, -1534544782L, 981856448L, -838081239L, 
[17:44:52.978]                     -1214792805L, -449155988L, 1064571002L, -641427025L, 
[17:44:52.978]                     1246531769L, 1605354190L, 1836982300L, -1547005043L, 
[17:44:52.978]                     -2014687753L, -311549696L, -488984738L, 1642018859L, 
[17:44:52.978]                     -834455763L, -246842470L, -278193832L, -1075782463L, 
[17:44:52.978]                     -302773389L, 1895573652L, 1555238178L, 2133371959L, 
[17:44:52.978]                     739452161L, -1451046906L, 799702596L, -1990621323L, 
[17:44:52.978]                     1454267103L, 277538360L, 1613755926L, -341464541L, 
[17:44:52.978]                     2090698213L, 395303938L, -1925955984L, -1442796519L, 
[17:44:52.978]                     -564933109L, -1276670724L, -753917654L, -454576289L, 
[17:44:52.978]                     -981272855L, -199002626L, 1479330284L, 391524669L, 
[17:44:52.978]                     -1791581945L, 2125066480L, 56528014L, -453597509L, 
[17:44:52.978]                     -1591183715L, 1464357450L, 1790218344L, 1037197393L, 
[17:44:52.978]                     -504458429L, -972343740L, 2026570994L, -1006657337L, 
[17:44:52.978]                     -640470383L, 1494813718L, -2135796108L, -574082811L, 
[17:44:52.978]                     1991937871L, -1340569272L, 1703957734L, -1969550829L, 
[17:44:52.978]                     -915862155L, -1271500462L, -1018390112L, 
[17:44:52.978]                     -1969663863L, 2138142907L, -2068286708L, 
[17:44:52.978]                     1621840538L, -93325297L, 1969265753L, 1197748462L, 
[17:44:52.978]                     -332574227L), envir = base::globalenv(), 
[17:44:52.978]                       inherits = FALSE)
[17:44:52.978]                     NULL
[17:44:52.978]                   }
[17:44:52.978]                   options(future.plan = NULL)
[17:44:52.978]                   if (is.na(NA_character_)) 
[17:44:52.978]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:52.978]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:52.978]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:52.978]                     .init = FALSE)
[17:44:52.978]                 }
[17:44:52.978]             }
[17:44:52.978]         }
[17:44:52.978]     })
[17:44:52.978]     if (TRUE) {
[17:44:52.978]         base::sink(type = "output", split = FALSE)
[17:44:52.978]         if (TRUE) {
[17:44:52.978]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:52.978]         }
[17:44:52.978]         else {
[17:44:52.978]             ...future.result["stdout"] <- base::list(NULL)
[17:44:52.978]         }
[17:44:52.978]         base::close(...future.stdout)
[17:44:52.978]         ...future.stdout <- NULL
[17:44:52.978]     }
[17:44:52.978]     ...future.result$conditions <- ...future.conditions
[17:44:52.978]     ...future.result$finished <- base::Sys.time()
[17:44:52.978]     ...future.result
[17:44:52.978] }
[17:44:52.981] assign_globals() ...
[17:44:52.981] List of 5
[17:44:52.981]  $ ...future.FUN            :function (...)  
[17:44:52.981]  $ future.call.arguments    : list()
[17:44:52.981]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:52.981]  $ ...future.elements_ii    :List of 5
[17:44:52.981]   ..$ : int 0
[17:44:52.981]   ..$ : int 0
[17:44:52.981]   ..$ : int 0
[17:44:52.981]   ..$ : int 0
[17:44:52.981]   ..$ : int 0
[17:44:52.981]  $ ...future.seeds_ii       :List of 5
[17:44:52.981]   ..$ : int [1:7] 10407 1467514845 -1329317400 -612686554 -2026003816 -12999239 1977205398
[17:44:52.981]   ..$ : int [1:7] 10407 -340802966 1507384829 -716779005 612832267 -1069245887 706479732
[17:44:52.981]   ..$ : int [1:7] 10407 1817033692 1791143132 -1657158669 -1207210441 1265023266 178918602
[17:44:52.981]   ..$ : int [1:7] 10407 -1214934091 -901648415 -190333120 126566659 657754517 1255975235
[17:44:52.981]   ..$ : int [1:7] 10407 -989100041 -143201215 -2134165350 -1591478667 -1455166167 348155833
[17:44:52.981]  $ ...future.globals.maxSize: NULL
[17:44:52.981]  - attr(*, "where")=List of 5
[17:44:52.981]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:44:52.981]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:44:52.981]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:44:52.981]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:44:52.981]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:44:52.981]  - attr(*, "resolved")= logi FALSE
[17:44:52.981]  - attr(*, "total_size")= num 616
[17:44:52.981]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:52.981]  - attr(*, "already-done")= logi TRUE
[17:44:52.988] - reassign environment for ‘...future.FUN’
[17:44:52.988] - copied ‘...future.FUN’ to environment
[17:44:52.988] - copied ‘future.call.arguments’ to environment
[17:44:52.989] - copied ‘...future.elements_ii’ to environment
[17:44:52.989] - copied ‘...future.seeds_ii’ to environment
[17:44:52.989] - copied ‘...future.globals.maxSize’ to environment
[17:44:52.989] assign_globals() ... done
[17:44:52.989] plan(): Setting new future strategy stack:
[17:44:52.989] List of future strategies:
[17:44:52.989] 1. sequential:
[17:44:52.989]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:52.989]    - tweaked: FALSE
[17:44:52.989]    - call: NULL
[17:44:52.990] plan(): nbrOfWorkers() = 1
[17:44:52.991] plan(): Setting new future strategy stack:
[17:44:52.991] List of future strategies:
[17:44:52.991] 1. sequential:
[17:44:52.991]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:52.991]    - tweaked: FALSE
[17:44:52.991]    - call: plan(strategy)
[17:44:52.991] plan(): nbrOfWorkers() = 1
[17:44:52.991] SequentialFuture started (and completed)
[17:44:52.992] - Launch lazy future ... done
[17:44:52.992] run() for ‘SequentialFuture’ ... done
[17:44:52.992] Created future:
[17:44:52.992] SequentialFuture:
[17:44:52.992] Label: ‘future_replicate-1’
[17:44:52.992] Expression:
[17:44:52.992] {
[17:44:52.992]     do.call(function(...) {
[17:44:52.992]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:52.992]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:52.992]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:52.992]             on.exit(options(oopts), add = TRUE)
[17:44:52.992]         }
[17:44:52.992]         {
[17:44:52.992]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:52.992]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:52.992]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:52.992]                   envir = globalenv(), inherits = FALSE)
[17:44:52.992]                 ...future.FUN(...future.X_jj, ...)
[17:44:52.992]             })
[17:44:52.992]         }
[17:44:52.992]     }, args = future.call.arguments)
[17:44:52.992] }
[17:44:52.992] Lazy evaluation: FALSE
[17:44:52.992] Asynchronous evaluation: FALSE
[17:44:52.992] Local evaluation: TRUE
[17:44:52.992] Environment: R_GlobalEnv
[17:44:52.992] Capture standard output: TRUE
[17:44:52.992] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:52.992] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:52.992] Packages: <none>
[17:44:52.992] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:52.992] Resolved: TRUE
[17:44:52.992] Value: 280 bytes of class ‘list’
[17:44:52.992] Early signaling: FALSE
[17:44:52.992] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:52.992] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:44:52.994] Chunk #1 of 1 ... DONE
[17:44:52.994] Launching 1 futures (chunks) ... DONE
[17:44:52.994] Resolving 1 futures (chunks) ...
[17:44:52.994] resolve() on list ...
[17:44:52.994]  recursive: 0
[17:44:52.994]  length: 1
[17:44:52.994] 
[17:44:52.994] resolved() for ‘SequentialFuture’ ...
[17:44:52.994] - state: ‘finished’
[17:44:52.995] - run: TRUE
[17:44:52.995] - result: ‘FutureResult’
[17:44:52.995] resolved() for ‘SequentialFuture’ ... done
[17:44:52.995] Future #1
[17:44:52.995] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:44:52.995] - nx: 1
[17:44:52.995] - relay: TRUE
[17:44:52.995] - stdout: TRUE
[17:44:52.996] - signal: TRUE
[17:44:52.996] - resignal: FALSE
[17:44:52.996] - force: TRUE
[17:44:52.996] - relayed: [n=1] FALSE
[17:44:52.996] - queued futures: [n=1] FALSE
[17:44:52.996]  - until=1
[17:44:52.996]  - relaying element #1
[17:44:52.996] - relayed: [n=1] TRUE
[17:44:52.996] - queued futures: [n=1] TRUE
[17:44:52.996] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:44:52.997]  length: 0 (resolved future 1)
[17:44:52.997] Relaying remaining futures
[17:44:52.997] signalConditionsASAP(NULL, pos=0) ...
[17:44:52.997] - nx: 1
[17:44:52.997] - relay: TRUE
[17:44:52.997] - stdout: TRUE
[17:44:52.997] - signal: TRUE
[17:44:52.997] - resignal: FALSE
[17:44:52.997] - force: TRUE
[17:44:52.997] - relayed: [n=1] TRUE
[17:44:52.997] - queued futures: [n=1] TRUE
 - flush all
[17:44:52.998] - relayed: [n=1] TRUE
[17:44:52.998] - queued futures: [n=1] TRUE
[17:44:52.998] signalConditionsASAP(NULL, pos=0) ... done
[17:44:52.998] resolve() on list ... DONE
[17:44:52.998]  - Number of value chunks collected: 1
[17:44:52.998] Resolving 1 futures (chunks) ... DONE
[17:44:52.998] Reducing values from 1 chunks ...
[17:44:52.998]  - Number of values collected after concatenation: 5
[17:44:52.998]  - Number of values expected: 5
[17:44:52.998] Reducing values from 1 chunks ... DONE
[17:44:52.998] future_lapply() ... DONE
[17:44:52.999] future_lapply() ...
[17:44:52.999] Generating random seeds ...
[17:44:52.999] Generating random seed streams for 5 elements ...
[17:44:52.999] Generating random seed streams for 5 elements ... DONE
[17:44:52.999] Generating random seeds ... DONE
[17:44:52.999] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:44:53.000] Number of chunks: 1
[17:44:53.000] getGlobalsAndPackagesXApply() ...
[17:44:53.000]  - future.globals: TRUE
[17:44:53.000] getGlobalsAndPackages() ...
[17:44:53.000] Searching for globals...
[17:44:53.001] - globals found: [2] ‘FUN’, ‘sample’
[17:44:53.001] Searching for globals ... DONE
[17:44:53.002] Resolving globals: FALSE
[17:44:53.002] The total size of the 1 globals is 616 bytes (616 bytes)
[17:44:53.002] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:44:53.002] - globals: [1] ‘FUN’
[17:44:53.002] 
[17:44:53.002] getGlobalsAndPackages() ... DONE
[17:44:53.003]  - globals found/used: [n=1] ‘FUN’
[17:44:53.003]  - needed namespaces: [n=0] 
[17:44:53.003] Finding globals ... DONE
[17:44:53.003]  - use_args: TRUE
[17:44:53.003]  - Getting '...' globals ...
[17:44:53.003] resolve() on list ...
[17:44:53.003]  recursive: 0
[17:44:53.003]  length: 1
[17:44:53.003]  elements: ‘...’
[17:44:53.004]  length: 0 (resolved future 1)
[17:44:53.004] resolve() on list ... DONE
[17:44:53.004]    - '...' content: [n=0] 
[17:44:53.004] List of 1
[17:44:53.004]  $ ...: list()
[17:44:53.004]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.004]  - attr(*, "where")=List of 1
[17:44:53.004]   ..$ ...:<environment: 0x558387fb5af0> 
[17:44:53.004]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.004]  - attr(*, "resolved")= logi TRUE
[17:44:53.004]  - attr(*, "total_size")= num NA
[17:44:53.008]  - Getting '...' globals ... DONE
[17:44:53.008] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:44:53.008] List of 2
[17:44:53.008]  $ ...future.FUN:function (...)  
[17:44:53.008]  $ ...          : list()
[17:44:53.008]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.008]  - attr(*, "where")=List of 2
[17:44:53.008]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:44:53.008]   ..$ ...          :<environment: 0x558387fb5af0> 
[17:44:53.008]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.008]  - attr(*, "resolved")= logi FALSE
[17:44:53.008]  - attr(*, "total_size")= num 616
[17:44:53.011] Packages to be attached in all futures: [n=0] 
[17:44:53.011] getGlobalsAndPackagesXApply() ... DONE
[17:44:53.011] Number of futures (= number of chunks): 1
[17:44:53.011] Launching 1 futures (chunks) ...
[17:44:53.011] Chunk #1 of 1 ...
[17:44:53.011]  - Finding globals in 'X' for chunk #1 ...
[17:44:53.011] getGlobalsAndPackages() ...
[17:44:53.011] Searching for globals...
[17:44:53.012] 
[17:44:53.012] Searching for globals ... DONE
[17:44:53.012] - globals: [0] <none>
[17:44:53.012] getGlobalsAndPackages() ... DONE
[17:44:53.012]    + additional globals found: [n=0] 
[17:44:53.012]    + additional namespaces needed: [n=0] 
[17:44:53.012]  - Finding globals in 'X' for chunk #1 ... DONE
[17:44:53.012]  - seeds: [5] <seeds>
[17:44:53.012]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.012] getGlobalsAndPackages() ...
[17:44:53.012] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.013] Resolving globals: FALSE
[17:44:53.013] Tweak future expression to call with '...' arguments ...
[17:44:53.013] {
[17:44:53.013]     do.call(function(...) {
[17:44:53.013]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.013]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.013]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.013]             on.exit(options(oopts), add = TRUE)
[17:44:53.013]         }
[17:44:53.013]         {
[17:44:53.013]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.013]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.013]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.013]                   envir = globalenv(), inherits = FALSE)
[17:44:53.013]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.013]             })
[17:44:53.013]         }
[17:44:53.013]     }, args = future.call.arguments)
[17:44:53.013] }
[17:44:53.013] Tweak future expression to call with '...' arguments ... DONE
[17:44:53.013] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.013] 
[17:44:53.014] getGlobalsAndPackages() ... DONE
[17:44:53.014] run() for ‘Future’ ...
[17:44:53.014] - state: ‘created’
[17:44:53.014] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:44:53.014] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:44:53.014] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:44:53.014]   - Field: ‘label’
[17:44:53.015]   - Field: ‘local’
[17:44:53.015]   - Field: ‘owner’
[17:44:53.015]   - Field: ‘envir’
[17:44:53.015]   - Field: ‘packages’
[17:44:53.015]   - Field: ‘gc’
[17:44:53.015]   - Field: ‘conditions’
[17:44:53.015]   - Field: ‘expr’
[17:44:53.015]   - Field: ‘uuid’
[17:44:53.015]   - Field: ‘seed’
[17:44:53.015]   - Field: ‘version’
[17:44:53.016]   - Field: ‘result’
[17:44:53.016]   - Field: ‘asynchronous’
[17:44:53.016]   - Field: ‘calls’
[17:44:53.016]   - Field: ‘globals’
[17:44:53.016]   - Field: ‘stdout’
[17:44:53.016]   - Field: ‘earlySignal’
[17:44:53.016]   - Field: ‘lazy’
[17:44:53.016]   - Field: ‘state’
[17:44:53.016] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:44:53.016] - Launch lazy future ...
[17:44:53.016] Packages needed by the future expression (n = 0): <none>
[17:44:53.017] Packages needed by future strategies (n = 0): <none>
[17:44:53.017] {
[17:44:53.017]     {
[17:44:53.017]         {
[17:44:53.017]             ...future.startTime <- base::Sys.time()
[17:44:53.017]             {
[17:44:53.017]                 {
[17:44:53.017]                   {
[17:44:53.017]                     base::local({
[17:44:53.017]                       has_future <- base::requireNamespace("future", 
[17:44:53.017]                         quietly = TRUE)
[17:44:53.017]                       if (has_future) {
[17:44:53.017]                         ns <- base::getNamespace("future")
[17:44:53.017]                         version <- ns[[".package"]][["version"]]
[17:44:53.017]                         if (is.null(version)) 
[17:44:53.017]                           version <- utils::packageVersion("future")
[17:44:53.017]                       }
[17:44:53.017]                       else {
[17:44:53.017]                         version <- NULL
[17:44:53.017]                       }
[17:44:53.017]                       if (!has_future || version < "1.8.0") {
[17:44:53.017]                         info <- base::c(r_version = base::gsub("R version ", 
[17:44:53.017]                           "", base::R.version$version.string), 
[17:44:53.017]                           platform = base::sprintf("%s (%s-bit)", 
[17:44:53.017]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:53.017]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:53.017]                             "release", "version")], collapse = " "), 
[17:44:53.017]                           hostname = base::Sys.info()[["nodename"]])
[17:44:53.017]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:44:53.017]                           info)
[17:44:53.017]                         info <- base::paste(info, collapse = "; ")
[17:44:53.017]                         if (!has_future) {
[17:44:53.017]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:53.017]                             info)
[17:44:53.017]                         }
[17:44:53.017]                         else {
[17:44:53.017]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:53.017]                             info, version)
[17:44:53.017]                         }
[17:44:53.017]                         base::stop(msg)
[17:44:53.017]                       }
[17:44:53.017]                     })
[17:44:53.017]                   }
[17:44:53.017]                   ...future.strategy.old <- future::plan("list")
[17:44:53.017]                   options(future.plan = NULL)
[17:44:53.017]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.017]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:53.017]                 }
[17:44:53.017]                 ...future.workdir <- getwd()
[17:44:53.017]             }
[17:44:53.017]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:53.017]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:53.017]         }
[17:44:53.017]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:53.017]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:53.017]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:53.017]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:53.017]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:53.017]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:53.017]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:53.017]             base::names(...future.oldOptions))
[17:44:53.017]     }
[17:44:53.017]     if (FALSE) {
[17:44:53.017]     }
[17:44:53.017]     else {
[17:44:53.017]         if (TRUE) {
[17:44:53.017]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:53.017]                 open = "w")
[17:44:53.017]         }
[17:44:53.017]         else {
[17:44:53.017]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:53.017]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:53.017]         }
[17:44:53.017]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:53.017]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:53.017]             base::sink(type = "output", split = FALSE)
[17:44:53.017]             base::close(...future.stdout)
[17:44:53.017]         }, add = TRUE)
[17:44:53.017]     }
[17:44:53.017]     ...future.frame <- base::sys.nframe()
[17:44:53.017]     ...future.conditions <- base::list()
[17:44:53.017]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:53.017]     if (FALSE) {
[17:44:53.017]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:53.017]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:53.017]     }
[17:44:53.017]     ...future.result <- base::tryCatch({
[17:44:53.017]         base::withCallingHandlers({
[17:44:53.017]             ...future.value <- base::withVisible(base::local({
[17:44:53.017]                 do.call(function(...) {
[17:44:53.017]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.017]                   if (!identical(...future.globals.maxSize.org, 
[17:44:53.017]                     ...future.globals.maxSize)) {
[17:44:53.017]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.017]                     on.exit(options(oopts), add = TRUE)
[17:44:53.017]                   }
[17:44:53.017]                   {
[17:44:53.017]                     lapply(seq_along(...future.elements_ii), 
[17:44:53.017]                       FUN = function(jj) {
[17:44:53.017]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.017]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.017]                           envir = globalenv(), inherits = FALSE)
[17:44:53.017]                         ...future.FUN(...future.X_jj, ...)
[17:44:53.017]                       })
[17:44:53.017]                   }
[17:44:53.017]                 }, args = future.call.arguments)
[17:44:53.017]             }))
[17:44:53.017]             future::FutureResult(value = ...future.value$value, 
[17:44:53.017]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.017]                   ...future.rng), globalenv = if (FALSE) 
[17:44:53.017]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:53.017]                     ...future.globalenv.names))
[17:44:53.017]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:53.017]         }, condition = base::local({
[17:44:53.017]             c <- base::c
[17:44:53.017]             inherits <- base::inherits
[17:44:53.017]             invokeRestart <- base::invokeRestart
[17:44:53.017]             length <- base::length
[17:44:53.017]             list <- base::list
[17:44:53.017]             seq.int <- base::seq.int
[17:44:53.017]             signalCondition <- base::signalCondition
[17:44:53.017]             sys.calls <- base::sys.calls
[17:44:53.017]             `[[` <- base::`[[`
[17:44:53.017]             `+` <- base::`+`
[17:44:53.017]             `<<-` <- base::`<<-`
[17:44:53.017]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:53.017]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:53.017]                   3L)]
[17:44:53.017]             }
[17:44:53.017]             function(cond) {
[17:44:53.017]                 is_error <- inherits(cond, "error")
[17:44:53.017]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:53.017]                   NULL)
[17:44:53.017]                 if (is_error) {
[17:44:53.017]                   sessionInformation <- function() {
[17:44:53.017]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:53.017]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:53.017]                       search = base::search(), system = base::Sys.info())
[17:44:53.017]                   }
[17:44:53.017]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.017]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:53.017]                     cond$call), session = sessionInformation(), 
[17:44:53.017]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:53.017]                   signalCondition(cond)
[17:44:53.017]                 }
[17:44:53.017]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:53.017]                 "immediateCondition"))) {
[17:44:53.017]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:53.017]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.017]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:53.017]                   if (TRUE && !signal) {
[17:44:53.017]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.017]                     {
[17:44:53.017]                       inherits <- base::inherits
[17:44:53.017]                       invokeRestart <- base::invokeRestart
[17:44:53.017]                       is.null <- base::is.null
[17:44:53.017]                       muffled <- FALSE
[17:44:53.017]                       if (inherits(cond, "message")) {
[17:44:53.017]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.017]                         if (muffled) 
[17:44:53.017]                           invokeRestart("muffleMessage")
[17:44:53.017]                       }
[17:44:53.017]                       else if (inherits(cond, "warning")) {
[17:44:53.017]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.017]                         if (muffled) 
[17:44:53.017]                           invokeRestart("muffleWarning")
[17:44:53.017]                       }
[17:44:53.017]                       else if (inherits(cond, "condition")) {
[17:44:53.017]                         if (!is.null(pattern)) {
[17:44:53.017]                           computeRestarts <- base::computeRestarts
[17:44:53.017]                           grepl <- base::grepl
[17:44:53.017]                           restarts <- computeRestarts(cond)
[17:44:53.017]                           for (restart in restarts) {
[17:44:53.017]                             name <- restart$name
[17:44:53.017]                             if (is.null(name)) 
[17:44:53.017]                               next
[17:44:53.017]                             if (!grepl(pattern, name)) 
[17:44:53.017]                               next
[17:44:53.017]                             invokeRestart(restart)
[17:44:53.017]                             muffled <- TRUE
[17:44:53.017]                             break
[17:44:53.017]                           }
[17:44:53.017]                         }
[17:44:53.017]                       }
[17:44:53.017]                       invisible(muffled)
[17:44:53.017]                     }
[17:44:53.017]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.017]                   }
[17:44:53.017]                 }
[17:44:53.017]                 else {
[17:44:53.017]                   if (TRUE) {
[17:44:53.017]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.017]                     {
[17:44:53.017]                       inherits <- base::inherits
[17:44:53.017]                       invokeRestart <- base::invokeRestart
[17:44:53.017]                       is.null <- base::is.null
[17:44:53.017]                       muffled <- FALSE
[17:44:53.017]                       if (inherits(cond, "message")) {
[17:44:53.017]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.017]                         if (muffled) 
[17:44:53.017]                           invokeRestart("muffleMessage")
[17:44:53.017]                       }
[17:44:53.017]                       else if (inherits(cond, "warning")) {
[17:44:53.017]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.017]                         if (muffled) 
[17:44:53.017]                           invokeRestart("muffleWarning")
[17:44:53.017]                       }
[17:44:53.017]                       else if (inherits(cond, "condition")) {
[17:44:53.017]                         if (!is.null(pattern)) {
[17:44:53.017]                           computeRestarts <- base::computeRestarts
[17:44:53.017]                           grepl <- base::grepl
[17:44:53.017]                           restarts <- computeRestarts(cond)
[17:44:53.017]                           for (restart in restarts) {
[17:44:53.017]                             name <- restart$name
[17:44:53.017]                             if (is.null(name)) 
[17:44:53.017]                               next
[17:44:53.017]                             if (!grepl(pattern, name)) 
[17:44:53.017]                               next
[17:44:53.017]                             invokeRestart(restart)
[17:44:53.017]                             muffled <- TRUE
[17:44:53.017]                             break
[17:44:53.017]                           }
[17:44:53.017]                         }
[17:44:53.017]                       }
[17:44:53.017]                       invisible(muffled)
[17:44:53.017]                     }
[17:44:53.017]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.017]                   }
[17:44:53.017]                 }
[17:44:53.017]             }
[17:44:53.017]         }))
[17:44:53.017]     }, error = function(ex) {
[17:44:53.017]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:53.017]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.017]                 ...future.rng), started = ...future.startTime, 
[17:44:53.017]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:53.017]             version = "1.8"), class = "FutureResult")
[17:44:53.017]     }, finally = {
[17:44:53.017]         if (!identical(...future.workdir, getwd())) 
[17:44:53.017]             setwd(...future.workdir)
[17:44:53.017]         {
[17:44:53.017]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:53.017]                 ...future.oldOptions$nwarnings <- NULL
[17:44:53.017]             }
[17:44:53.017]             base::options(...future.oldOptions)
[17:44:53.017]             if (.Platform$OS.type == "windows") {
[17:44:53.017]                 old_names <- names(...future.oldEnvVars)
[17:44:53.017]                 envs <- base::Sys.getenv()
[17:44:53.017]                 names <- names(envs)
[17:44:53.017]                 common <- intersect(names, old_names)
[17:44:53.017]                 added <- setdiff(names, old_names)
[17:44:53.017]                 removed <- setdiff(old_names, names)
[17:44:53.017]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:53.017]                   envs[common]]
[17:44:53.017]                 NAMES <- toupper(changed)
[17:44:53.017]                 args <- list()
[17:44:53.017]                 for (kk in seq_along(NAMES)) {
[17:44:53.017]                   name <- changed[[kk]]
[17:44:53.017]                   NAME <- NAMES[[kk]]
[17:44:53.017]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.017]                     next
[17:44:53.017]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.017]                 }
[17:44:53.017]                 NAMES <- toupper(added)
[17:44:53.017]                 for (kk in seq_along(NAMES)) {
[17:44:53.017]                   name <- added[[kk]]
[17:44:53.017]                   NAME <- NAMES[[kk]]
[17:44:53.017]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.017]                     next
[17:44:53.017]                   args[[name]] <- ""
[17:44:53.017]                 }
[17:44:53.017]                 NAMES <- toupper(removed)
[17:44:53.017]                 for (kk in seq_along(NAMES)) {
[17:44:53.017]                   name <- removed[[kk]]
[17:44:53.017]                   NAME <- NAMES[[kk]]
[17:44:53.017]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.017]                     next
[17:44:53.017]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.017]                 }
[17:44:53.017]                 if (length(args) > 0) 
[17:44:53.017]                   base::do.call(base::Sys.setenv, args = args)
[17:44:53.017]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:53.017]             }
[17:44:53.017]             else {
[17:44:53.017]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:53.017]             }
[17:44:53.017]             {
[17:44:53.017]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:53.017]                   0L) {
[17:44:53.017]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:53.017]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:53.017]                   base::options(opts)
[17:44:53.017]                 }
[17:44:53.017]                 {
[17:44:53.017]                   {
[17:44:53.017]                     base::assign(".Random.seed", c(10403L, 2L, 
[17:44:53.017]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[17:44:53.017]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[17:44:53.017]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[17:44:53.017]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[17:44:53.017]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[17:44:53.017]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[17:44:53.017]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[17:44:53.017]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[17:44:53.017]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[17:44:53.017]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[17:44:53.017]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[17:44:53.017]                     -1512233174L, -1985955764L, -425390065L, 
[17:44:53.017]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[17:44:53.017]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[17:44:53.017]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[17:44:53.017]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[17:44:53.017]                     1818328109L, -1284085436L, -1981489558L, 
[17:44:53.017]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[17:44:53.017]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[17:44:53.017]                     -1718567047L, -793788661L, -1133789126L, 
[17:44:53.017]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[17:44:53.017]                     -1823521982L, -1345991523L, -1672661737L, 
[17:44:53.017]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[17:44:53.017]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[17:44:53.017]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[17:44:53.017]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[17:44:53.017]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[17:44:53.017]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[17:44:53.017]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[17:44:53.017]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[17:44:53.017]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[17:44:53.017]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[17:44:53.017]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[17:44:53.017]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[17:44:53.017]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[17:44:53.017]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[17:44:53.017]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[17:44:53.017]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[17:44:53.017]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[17:44:53.017]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[17:44:53.017]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[17:44:53.017]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[17:44:53.017]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[17:44:53.017]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[17:44:53.017]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[17:44:53.017]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[17:44:53.017]                     -1119334354L, -1521015416L, -2041922421L, 
[17:44:53.017]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[17:44:53.017]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[17:44:53.017]                     1232111981L, -1801753084L, -1608606422L, 
[17:44:53.017]                     -1172096363L, 1420874031L, -1210473418L, 
[17:44:53.017]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[17:44:53.017]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[17:44:53.017]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[17:44:53.017]                     679371266L, -591318819L, -104578089L, -172818754L, 
[17:44:53.017]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[17:44:53.017]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[17:44:53.017]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[17:44:53.017]                     -332493318L, -1978392251L, -1691039632L, 
[17:44:53.017]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[17:44:53.017]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[17:44:53.017]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[17:44:53.017]                     87560756L, -87565624L, 426345146L, -699970416L, 
[17:44:53.017]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[17:44:53.017]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[17:44:53.017]                     -1178330196L, -687617348L, -1701912078L, 
[17:44:53.017]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[17:44:53.017]                     -1345416048L, 1816730492L, -1570431212L, 
[17:44:53.017]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[17:44:53.017]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[17:44:53.017]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[17:44:53.017]                     -1493184262L, -1943836976L, -590788308L, 
[17:44:53.017]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[17:44:53.017]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[17:44:53.017]                     1274857340L, -1205842638L, -1938479504L, 
[17:44:53.017]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[17:44:53.017]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[17:44:53.017]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[17:44:53.017]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[17:44:53.017]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[17:44:53.017]                     -1460751252L, 1201879444L, -1459788718L, 
[17:44:53.017]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[17:44:53.017]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[17:44:53.017]                     -420945808L, -1997735900L, -1838404552L, 
[17:44:53.017]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[17:44:53.017]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[17:44:53.017]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[17:44:53.017]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[17:44:53.017]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[17:44:53.017]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[17:44:53.017]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[17:44:53.017]                     942193650L, 751741680L, 689743428L, -18455976L, 
[17:44:53.017]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[17:44:53.017]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[17:44:53.017]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[17:44:53.017]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[17:44:53.017]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[17:44:53.017]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[17:44:53.017]                     -1357570110L, 1896595240L, -2066952276L, 
[17:44:53.017]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[17:44:53.017]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[17:44:53.017]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[17:44:53.017]                     769655120L, 236357794L, 181393736L, -13334772L, 
[17:44:53.017]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[17:44:53.017]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[17:44:53.017]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[17:44:53.017]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[17:44:53.017]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[17:44:53.017]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[17:44:53.017]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[17:44:53.017]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[17:44:53.017]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[17:44:53.017]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[17:44:53.017]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[17:44:53.017]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[17:44:53.017]                     -1365842884L, -438961294L, -1851472272L, 
[17:44:53.017]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[17:44:53.017]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[17:44:53.017]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[17:44:53.017]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[17:44:53.017]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[17:44:53.017]                     -594809770L, -2146766621L, -2013964635L, 
[17:44:53.017]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[17:44:53.017]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[17:44:53.017]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[17:44:53.017]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[17:44:53.017]                     -1426021878L, -1285634264L, 1507547537L, 
[17:44:53.017]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[17:44:53.017]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[17:44:53.017]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[17:44:53.017]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[17:44:53.017]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[17:44:53.017]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[17:44:53.017]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[17:44:53.017]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[17:44:53.017]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[17:44:53.017]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[17:44:53.017]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[17:44:53.017]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[17:44:53.017]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[17:44:53.017]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[17:44:53.017]                     -1604604761L, 1421229008L, -1268333714L, 
[17:44:53.017]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[17:44:53.017]                     -2070476623L, -2099222749L, 1141171236L, 
[17:44:53.017]                     -146426158L, -1797385433L, -1129376399L, 
[17:44:53.017]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[17:44:53.017]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[17:44:53.017]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[17:44:53.017]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[17:44:53.017]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[17:44:53.017]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[17:44:53.017]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[17:44:53.017]                     -1092079724L, -1765622238L, -1882554057L, 
[17:44:53.017]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[17:44:53.017]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[17:44:53.017]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[17:44:53.017]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[17:44:53.017]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[17:44:53.017]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[17:44:53.017]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[17:44:53.017]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[17:44:53.017]                     865377681L, -1127426242L), envir = base::globalenv(), 
[17:44:53.017]                       inherits = FALSE)
[17:44:53.017]                     NULL
[17:44:53.017]                   }
[17:44:53.017]                   options(future.plan = NULL)
[17:44:53.017]                   if (is.na(NA_character_)) 
[17:44:53.017]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.017]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:53.017]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:53.017]                     .init = FALSE)
[17:44:53.017]                 }
[17:44:53.017]             }
[17:44:53.017]         }
[17:44:53.017]     })
[17:44:53.017]     if (TRUE) {
[17:44:53.017]         base::sink(type = "output", split = FALSE)
[17:44:53.017]         if (TRUE) {
[17:44:53.017]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:53.017]         }
[17:44:53.017]         else {
[17:44:53.017]             ...future.result["stdout"] <- base::list(NULL)
[17:44:53.017]         }
[17:44:53.017]         base::close(...future.stdout)
[17:44:53.017]         ...future.stdout <- NULL
[17:44:53.017]     }
[17:44:53.017]     ...future.result$conditions <- ...future.conditions
[17:44:53.017]     ...future.result$finished <- base::Sys.time()
[17:44:53.017]     ...future.result
[17:44:53.017] }
[17:44:53.019] assign_globals() ...
[17:44:53.020] List of 5
[17:44:53.020]  $ ...future.FUN            :function (...)  
[17:44:53.020]  $ future.call.arguments    : list()
[17:44:53.020]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.020]  $ ...future.elements_ii    :List of 5
[17:44:53.020]   ..$ : int 0
[17:44:53.020]   ..$ : int 0
[17:44:53.020]   ..$ : int 0
[17:44:53.020]   ..$ : int 0
[17:44:53.020]   ..$ : int 0
[17:44:53.020]  $ ...future.seeds_ii       :List of 5
[17:44:53.020]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[17:44:53.020]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[17:44:53.020]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[17:44:53.020]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[17:44:53.020]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[17:44:53.020]  $ ...future.globals.maxSize: NULL
[17:44:53.020]  - attr(*, "where")=List of 5
[17:44:53.020]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:44:53.020]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:44:53.020]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:44:53.020]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:44:53.020]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:44:53.020]  - attr(*, "resolved")= logi FALSE
[17:44:53.020]  - attr(*, "total_size")= num 616
[17:44:53.020]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.020]  - attr(*, "already-done")= logi TRUE
[17:44:53.026] - reassign environment for ‘...future.FUN’
[17:44:53.026] - copied ‘...future.FUN’ to environment
[17:44:53.026] - copied ‘future.call.arguments’ to environment
[17:44:53.027] - copied ‘...future.elements_ii’ to environment
[17:44:53.027] - copied ‘...future.seeds_ii’ to environment
[17:44:53.027] - copied ‘...future.globals.maxSize’ to environment
[17:44:53.027] assign_globals() ... done
[17:44:53.027] plan(): Setting new future strategy stack:
[17:44:53.027] List of future strategies:
[17:44:53.027] 1. sequential:
[17:44:53.027]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.027]    - tweaked: FALSE
[17:44:53.027]    - call: NULL
[17:44:53.028] plan(): nbrOfWorkers() = 1
[17:44:53.028] plan(): Setting new future strategy stack:
[17:44:53.028] List of future strategies:
[17:44:53.028] 1. sequential:
[17:44:53.028]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.028]    - tweaked: FALSE
[17:44:53.028]    - call: plan(strategy)
[17:44:53.029] plan(): nbrOfWorkers() = 1
[17:44:53.029] SequentialFuture started (and completed)
[17:44:53.029] - Launch lazy future ... done
[17:44:53.029] run() for ‘SequentialFuture’ ... done
[17:44:53.029] Created future:
[17:44:53.029] SequentialFuture:
[17:44:53.029] Label: ‘future_replicate-1’
[17:44:53.029] Expression:
[17:44:53.029] {
[17:44:53.029]     do.call(function(...) {
[17:44:53.029]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.029]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.029]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.029]             on.exit(options(oopts), add = TRUE)
[17:44:53.029]         }
[17:44:53.029]         {
[17:44:53.029]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.029]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.029]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.029]                   envir = globalenv(), inherits = FALSE)
[17:44:53.029]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.029]             })
[17:44:53.029]         }
[17:44:53.029]     }, args = future.call.arguments)
[17:44:53.029] }
[17:44:53.029] Lazy evaluation: FALSE
[17:44:53.029] Asynchronous evaluation: FALSE
[17:44:53.029] Local evaluation: TRUE
[17:44:53.029] Environment: R_GlobalEnv
[17:44:53.029] Capture standard output: TRUE
[17:44:53.029] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:53.029] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:53.029] Packages: <none>
[17:44:53.029] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:53.029] Resolved: TRUE
[17:44:53.029] Value: 280 bytes of class ‘list’
[17:44:53.029] Early signaling: FALSE
[17:44:53.029] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:53.029] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:44:53.030] Chunk #1 of 1 ... DONE
[17:44:53.030] Launching 1 futures (chunks) ... DONE
[17:44:53.030] Resolving 1 futures (chunks) ...
[17:44:53.031] resolve() on list ...
[17:44:53.031]  recursive: 0
[17:44:53.031]  length: 1
[17:44:53.031] 
[17:44:53.031] resolved() for ‘SequentialFuture’ ...
[17:44:53.031] - state: ‘finished’
[17:44:53.031] - run: TRUE
[17:44:53.031] - result: ‘FutureResult’
[17:44:53.031] resolved() for ‘SequentialFuture’ ... done
[17:44:53.031] Future #1
[17:44:53.032] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:44:53.032] - nx: 1
[17:44:53.032] - relay: TRUE
[17:44:53.032] - stdout: TRUE
[17:44:53.032] - signal: TRUE
[17:44:53.032] - resignal: FALSE
[17:44:53.032] - force: TRUE
[17:44:53.032] - relayed: [n=1] FALSE
[17:44:53.032] - queued futures: [n=1] FALSE
[17:44:53.032]  - until=1
[17:44:53.034]  - relaying element #1
[17:44:53.034] - relayed: [n=1] TRUE
[17:44:53.034] - queued futures: [n=1] TRUE
[17:44:53.034] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:44:53.034]  length: 0 (resolved future 1)
[17:44:53.034] Relaying remaining futures
[17:44:53.034] signalConditionsASAP(NULL, pos=0) ...
[17:44:53.034] - nx: 1
[17:44:53.034] - relay: TRUE
[17:44:53.034] - stdout: TRUE
[17:44:53.035] - signal: TRUE
[17:44:53.035] - resignal: FALSE
[17:44:53.035] - force: TRUE
[17:44:53.035] - relayed: [n=1] TRUE
[17:44:53.035] - queued futures: [n=1] TRUE
 - flush all
[17:44:53.035] - relayed: [n=1] TRUE
[17:44:53.035] - queued futures: [n=1] TRUE
[17:44:53.035] signalConditionsASAP(NULL, pos=0) ... done
[17:44:53.035] resolve() on list ... DONE
[17:44:53.035]  - Number of value chunks collected: 1
[17:44:53.036] Resolving 1 futures (chunks) ... DONE
[17:44:53.036] Reducing values from 1 chunks ...
[17:44:53.036]  - Number of values collected after concatenation: 5
[17:44:53.036]  - Number of values expected: 5
[17:44:53.036] Reducing values from 1 chunks ... DONE
[17:44:53.036] future_lapply() ... DONE
[17:44:53.036] future_lapply() ...
[17:44:53.036] Generating random seeds ...
[17:44:53.037] Generating random seed streams for 5 elements ...
[17:44:53.037] Generating random seed streams for 5 elements ... DONE
[17:44:53.037] Generating random seeds ... DONE
[17:44:53.037] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:44:53.037] Number of chunks: 1
[17:44:53.037] getGlobalsAndPackagesXApply() ...
[17:44:53.038]  - future.globals: TRUE
[17:44:53.038] getGlobalsAndPackages() ...
[17:44:53.038] Searching for globals...
[17:44:53.039] - globals found: [2] ‘FUN’, ‘sample’
[17:44:53.039] Searching for globals ... DONE
[17:44:53.039] Resolving globals: FALSE
[17:44:53.039] The total size of the 1 globals is 616 bytes (616 bytes)
[17:44:53.040] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:44:53.040] - globals: [1] ‘FUN’
[17:44:53.040] 
[17:44:53.040] getGlobalsAndPackages() ... DONE
[17:44:53.040]  - globals found/used: [n=1] ‘FUN’
[17:44:53.040]  - needed namespaces: [n=0] 
[17:44:53.040] Finding globals ... DONE
[17:44:53.040]  - use_args: TRUE
[17:44:53.040]  - Getting '...' globals ...
[17:44:53.041] resolve() on list ...
[17:44:53.041]  recursive: 0
[17:44:53.041]  length: 1
[17:44:53.041]  elements: ‘...’
[17:44:53.041]  length: 0 (resolved future 1)
[17:44:53.041] resolve() on list ... DONE
[17:44:53.041]    - '...' content: [n=0] 
[17:44:53.041] List of 1
[17:44:53.041]  $ ...: list()
[17:44:53.041]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.041]  - attr(*, "where")=List of 1
[17:44:53.041]   ..$ ...:<environment: 0x558386648d28> 
[17:44:53.041]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.041]  - attr(*, "resolved")= logi TRUE
[17:44:53.041]  - attr(*, "total_size")= num NA
[17:44:53.044]  - Getting '...' globals ... DONE
[17:44:53.044] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:44:53.044] List of 2
[17:44:53.044]  $ ...future.FUN:function (...)  
[17:44:53.044]  $ ...          : list()
[17:44:53.044]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.044]  - attr(*, "where")=List of 2
[17:44:53.044]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:44:53.044]   ..$ ...          :<environment: 0x558386648d28> 
[17:44:53.044]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.044]  - attr(*, "resolved")= logi FALSE
[17:44:53.044]  - attr(*, "total_size")= num 616
[17:44:53.046] Packages to be attached in all futures: [n=0] 
[17:44:53.046] getGlobalsAndPackagesXApply() ... DONE
[17:44:53.047] Number of futures (= number of chunks): 1
[17:44:53.047] Launching 1 futures (chunks) ...
[17:44:53.047] Chunk #1 of 1 ...
[17:44:53.047]  - Finding globals in 'X' for chunk #1 ...
[17:44:53.047] getGlobalsAndPackages() ...
[17:44:53.047] Searching for globals...
[17:44:53.047] 
[17:44:53.047] Searching for globals ... DONE
[17:44:53.047] - globals: [0] <none>
[17:44:53.048] getGlobalsAndPackages() ... DONE
[17:44:53.048]    + additional globals found: [n=0] 
[17:44:53.048]    + additional namespaces needed: [n=0] 
[17:44:53.048]  - Finding globals in 'X' for chunk #1 ... DONE
[17:44:53.048]  - seeds: [5] <seeds>
[17:44:53.048]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.048] getGlobalsAndPackages() ...
[17:44:53.048] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.048] Resolving globals: FALSE
[17:44:53.048] Tweak future expression to call with '...' arguments ...
[17:44:53.048] {
[17:44:53.048]     do.call(function(...) {
[17:44:53.048]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.048]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.048]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.048]             on.exit(options(oopts), add = TRUE)
[17:44:53.048]         }
[17:44:53.048]         {
[17:44:53.048]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.048]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.048]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.048]                   envir = globalenv(), inherits = FALSE)
[17:44:53.048]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.048]             })
[17:44:53.048]         }
[17:44:53.048]     }, args = future.call.arguments)
[17:44:53.048] }
[17:44:53.049] Tweak future expression to call with '...' arguments ... DONE
[17:44:53.049] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.049] 
[17:44:53.049] getGlobalsAndPackages() ... DONE
[17:44:53.049] run() for ‘Future’ ...
[17:44:53.050] - state: ‘created’
[17:44:53.050] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:44:53.050] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:44:53.050] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:44:53.050]   - Field: ‘label’
[17:44:53.050]   - Field: ‘local’
[17:44:53.050]   - Field: ‘owner’
[17:44:53.050]   - Field: ‘envir’
[17:44:53.051]   - Field: ‘packages’
[17:44:53.051]   - Field: ‘gc’
[17:44:53.051]   - Field: ‘conditions’
[17:44:53.051]   - Field: ‘expr’
[17:44:53.051]   - Field: ‘uuid’
[17:44:53.051]   - Field: ‘seed’
[17:44:53.051]   - Field: ‘version’
[17:44:53.051]   - Field: ‘result’
[17:44:53.051]   - Field: ‘asynchronous’
[17:44:53.051]   - Field: ‘calls’
[17:44:53.051]   - Field: ‘globals’
[17:44:53.052]   - Field: ‘stdout’
[17:44:53.052]   - Field: ‘earlySignal’
[17:44:53.052]   - Field: ‘lazy’
[17:44:53.052]   - Field: ‘state’
[17:44:53.052] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:44:53.052] - Launch lazy future ...
[17:44:53.052] Packages needed by the future expression (n = 0): <none>
[17:44:53.052] Packages needed by future strategies (n = 0): <none>
[17:44:53.053] {
[17:44:53.053]     {
[17:44:53.053]         {
[17:44:53.053]             ...future.startTime <- base::Sys.time()
[17:44:53.053]             {
[17:44:53.053]                 {
[17:44:53.053]                   {
[17:44:53.053]                     base::local({
[17:44:53.053]                       has_future <- base::requireNamespace("future", 
[17:44:53.053]                         quietly = TRUE)
[17:44:53.053]                       if (has_future) {
[17:44:53.053]                         ns <- base::getNamespace("future")
[17:44:53.053]                         version <- ns[[".package"]][["version"]]
[17:44:53.053]                         if (is.null(version)) 
[17:44:53.053]                           version <- utils::packageVersion("future")
[17:44:53.053]                       }
[17:44:53.053]                       else {
[17:44:53.053]                         version <- NULL
[17:44:53.053]                       }
[17:44:53.053]                       if (!has_future || version < "1.8.0") {
[17:44:53.053]                         info <- base::c(r_version = base::gsub("R version ", 
[17:44:53.053]                           "", base::R.version$version.string), 
[17:44:53.053]                           platform = base::sprintf("%s (%s-bit)", 
[17:44:53.053]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:53.053]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:53.053]                             "release", "version")], collapse = " "), 
[17:44:53.053]                           hostname = base::Sys.info()[["nodename"]])
[17:44:53.053]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:44:53.053]                           info)
[17:44:53.053]                         info <- base::paste(info, collapse = "; ")
[17:44:53.053]                         if (!has_future) {
[17:44:53.053]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:53.053]                             info)
[17:44:53.053]                         }
[17:44:53.053]                         else {
[17:44:53.053]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:53.053]                             info, version)
[17:44:53.053]                         }
[17:44:53.053]                         base::stop(msg)
[17:44:53.053]                       }
[17:44:53.053]                     })
[17:44:53.053]                   }
[17:44:53.053]                   ...future.strategy.old <- future::plan("list")
[17:44:53.053]                   options(future.plan = NULL)
[17:44:53.053]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.053]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:53.053]                 }
[17:44:53.053]                 ...future.workdir <- getwd()
[17:44:53.053]             }
[17:44:53.053]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:53.053]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:53.053]         }
[17:44:53.053]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:53.053]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:53.053]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:53.053]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:53.053]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:53.053]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:53.053]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:53.053]             base::names(...future.oldOptions))
[17:44:53.053]     }
[17:44:53.053]     if (FALSE) {
[17:44:53.053]     }
[17:44:53.053]     else {
[17:44:53.053]         if (TRUE) {
[17:44:53.053]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:53.053]                 open = "w")
[17:44:53.053]         }
[17:44:53.053]         else {
[17:44:53.053]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:53.053]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:53.053]         }
[17:44:53.053]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:53.053]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:53.053]             base::sink(type = "output", split = FALSE)
[17:44:53.053]             base::close(...future.stdout)
[17:44:53.053]         }, add = TRUE)
[17:44:53.053]     }
[17:44:53.053]     ...future.frame <- base::sys.nframe()
[17:44:53.053]     ...future.conditions <- base::list()
[17:44:53.053]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:53.053]     if (FALSE) {
[17:44:53.053]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:53.053]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:53.053]     }
[17:44:53.053]     ...future.result <- base::tryCatch({
[17:44:53.053]         base::withCallingHandlers({
[17:44:53.053]             ...future.value <- base::withVisible(base::local({
[17:44:53.053]                 do.call(function(...) {
[17:44:53.053]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.053]                   if (!identical(...future.globals.maxSize.org, 
[17:44:53.053]                     ...future.globals.maxSize)) {
[17:44:53.053]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.053]                     on.exit(options(oopts), add = TRUE)
[17:44:53.053]                   }
[17:44:53.053]                   {
[17:44:53.053]                     lapply(seq_along(...future.elements_ii), 
[17:44:53.053]                       FUN = function(jj) {
[17:44:53.053]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.053]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.053]                           envir = globalenv(), inherits = FALSE)
[17:44:53.053]                         ...future.FUN(...future.X_jj, ...)
[17:44:53.053]                       })
[17:44:53.053]                   }
[17:44:53.053]                 }, args = future.call.arguments)
[17:44:53.053]             }))
[17:44:53.053]             future::FutureResult(value = ...future.value$value, 
[17:44:53.053]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.053]                   ...future.rng), globalenv = if (FALSE) 
[17:44:53.053]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:53.053]                     ...future.globalenv.names))
[17:44:53.053]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:53.053]         }, condition = base::local({
[17:44:53.053]             c <- base::c
[17:44:53.053]             inherits <- base::inherits
[17:44:53.053]             invokeRestart <- base::invokeRestart
[17:44:53.053]             length <- base::length
[17:44:53.053]             list <- base::list
[17:44:53.053]             seq.int <- base::seq.int
[17:44:53.053]             signalCondition <- base::signalCondition
[17:44:53.053]             sys.calls <- base::sys.calls
[17:44:53.053]             `[[` <- base::`[[`
[17:44:53.053]             `+` <- base::`+`
[17:44:53.053]             `<<-` <- base::`<<-`
[17:44:53.053]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:53.053]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:53.053]                   3L)]
[17:44:53.053]             }
[17:44:53.053]             function(cond) {
[17:44:53.053]                 is_error <- inherits(cond, "error")
[17:44:53.053]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:53.053]                   NULL)
[17:44:53.053]                 if (is_error) {
[17:44:53.053]                   sessionInformation <- function() {
[17:44:53.053]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:53.053]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:53.053]                       search = base::search(), system = base::Sys.info())
[17:44:53.053]                   }
[17:44:53.053]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.053]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:53.053]                     cond$call), session = sessionInformation(), 
[17:44:53.053]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:53.053]                   signalCondition(cond)
[17:44:53.053]                 }
[17:44:53.053]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:53.053]                 "immediateCondition"))) {
[17:44:53.053]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:53.053]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.053]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:53.053]                   if (TRUE && !signal) {
[17:44:53.053]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.053]                     {
[17:44:53.053]                       inherits <- base::inherits
[17:44:53.053]                       invokeRestart <- base::invokeRestart
[17:44:53.053]                       is.null <- base::is.null
[17:44:53.053]                       muffled <- FALSE
[17:44:53.053]                       if (inherits(cond, "message")) {
[17:44:53.053]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.053]                         if (muffled) 
[17:44:53.053]                           invokeRestart("muffleMessage")
[17:44:53.053]                       }
[17:44:53.053]                       else if (inherits(cond, "warning")) {
[17:44:53.053]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.053]                         if (muffled) 
[17:44:53.053]                           invokeRestart("muffleWarning")
[17:44:53.053]                       }
[17:44:53.053]                       else if (inherits(cond, "condition")) {
[17:44:53.053]                         if (!is.null(pattern)) {
[17:44:53.053]                           computeRestarts <- base::computeRestarts
[17:44:53.053]                           grepl <- base::grepl
[17:44:53.053]                           restarts <- computeRestarts(cond)
[17:44:53.053]                           for (restart in restarts) {
[17:44:53.053]                             name <- restart$name
[17:44:53.053]                             if (is.null(name)) 
[17:44:53.053]                               next
[17:44:53.053]                             if (!grepl(pattern, name)) 
[17:44:53.053]                               next
[17:44:53.053]                             invokeRestart(restart)
[17:44:53.053]                             muffled <- TRUE
[17:44:53.053]                             break
[17:44:53.053]                           }
[17:44:53.053]                         }
[17:44:53.053]                       }
[17:44:53.053]                       invisible(muffled)
[17:44:53.053]                     }
[17:44:53.053]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.053]                   }
[17:44:53.053]                 }
[17:44:53.053]                 else {
[17:44:53.053]                   if (TRUE) {
[17:44:53.053]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.053]                     {
[17:44:53.053]                       inherits <- base::inherits
[17:44:53.053]                       invokeRestart <- base::invokeRestart
[17:44:53.053]                       is.null <- base::is.null
[17:44:53.053]                       muffled <- FALSE
[17:44:53.053]                       if (inherits(cond, "message")) {
[17:44:53.053]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.053]                         if (muffled) 
[17:44:53.053]                           invokeRestart("muffleMessage")
[17:44:53.053]                       }
[17:44:53.053]                       else if (inherits(cond, "warning")) {
[17:44:53.053]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.053]                         if (muffled) 
[17:44:53.053]                           invokeRestart("muffleWarning")
[17:44:53.053]                       }
[17:44:53.053]                       else if (inherits(cond, "condition")) {
[17:44:53.053]                         if (!is.null(pattern)) {
[17:44:53.053]                           computeRestarts <- base::computeRestarts
[17:44:53.053]                           grepl <- base::grepl
[17:44:53.053]                           restarts <- computeRestarts(cond)
[17:44:53.053]                           for (restart in restarts) {
[17:44:53.053]                             name <- restart$name
[17:44:53.053]                             if (is.null(name)) 
[17:44:53.053]                               next
[17:44:53.053]                             if (!grepl(pattern, name)) 
[17:44:53.053]                               next
[17:44:53.053]                             invokeRestart(restart)
[17:44:53.053]                             muffled <- TRUE
[17:44:53.053]                             break
[17:44:53.053]                           }
[17:44:53.053]                         }
[17:44:53.053]                       }
[17:44:53.053]                       invisible(muffled)
[17:44:53.053]                     }
[17:44:53.053]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.053]                   }
[17:44:53.053]                 }
[17:44:53.053]             }
[17:44:53.053]         }))
[17:44:53.053]     }, error = function(ex) {
[17:44:53.053]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:53.053]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.053]                 ...future.rng), started = ...future.startTime, 
[17:44:53.053]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:53.053]             version = "1.8"), class = "FutureResult")
[17:44:53.053]     }, finally = {
[17:44:53.053]         if (!identical(...future.workdir, getwd())) 
[17:44:53.053]             setwd(...future.workdir)
[17:44:53.053]         {
[17:44:53.053]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:53.053]                 ...future.oldOptions$nwarnings <- NULL
[17:44:53.053]             }
[17:44:53.053]             base::options(...future.oldOptions)
[17:44:53.053]             if (.Platform$OS.type == "windows") {
[17:44:53.053]                 old_names <- names(...future.oldEnvVars)
[17:44:53.053]                 envs <- base::Sys.getenv()
[17:44:53.053]                 names <- names(envs)
[17:44:53.053]                 common <- intersect(names, old_names)
[17:44:53.053]                 added <- setdiff(names, old_names)
[17:44:53.053]                 removed <- setdiff(old_names, names)
[17:44:53.053]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:53.053]                   envs[common]]
[17:44:53.053]                 NAMES <- toupper(changed)
[17:44:53.053]                 args <- list()
[17:44:53.053]                 for (kk in seq_along(NAMES)) {
[17:44:53.053]                   name <- changed[[kk]]
[17:44:53.053]                   NAME <- NAMES[[kk]]
[17:44:53.053]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.053]                     next
[17:44:53.053]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.053]                 }
[17:44:53.053]                 NAMES <- toupper(added)
[17:44:53.053]                 for (kk in seq_along(NAMES)) {
[17:44:53.053]                   name <- added[[kk]]
[17:44:53.053]                   NAME <- NAMES[[kk]]
[17:44:53.053]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.053]                     next
[17:44:53.053]                   args[[name]] <- ""
[17:44:53.053]                 }
[17:44:53.053]                 NAMES <- toupper(removed)
[17:44:53.053]                 for (kk in seq_along(NAMES)) {
[17:44:53.053]                   name <- removed[[kk]]
[17:44:53.053]                   NAME <- NAMES[[kk]]
[17:44:53.053]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.053]                     next
[17:44:53.053]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.053]                 }
[17:44:53.053]                 if (length(args) > 0) 
[17:44:53.053]                   base::do.call(base::Sys.setenv, args = args)
[17:44:53.053]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:53.053]             }
[17:44:53.053]             else {
[17:44:53.053]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:53.053]             }
[17:44:53.053]             {
[17:44:53.053]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:53.053]                   0L) {
[17:44:53.053]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:53.053]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:53.053]                   base::options(opts)
[17:44:53.053]                 }
[17:44:53.053]                 {
[17:44:53.053]                   {
[17:44:53.053]                     base::assign(".Random.seed", c(10403L, 2L, 
[17:44:53.053]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[17:44:53.053]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[17:44:53.053]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[17:44:53.053]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[17:44:53.053]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[17:44:53.053]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[17:44:53.053]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[17:44:53.053]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[17:44:53.053]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[17:44:53.053]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[17:44:53.053]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[17:44:53.053]                     -1512233174L, -1985955764L, -425390065L, 
[17:44:53.053]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[17:44:53.053]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[17:44:53.053]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[17:44:53.053]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[17:44:53.053]                     1818328109L, -1284085436L, -1981489558L, 
[17:44:53.053]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[17:44:53.053]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[17:44:53.053]                     -1718567047L, -793788661L, -1133789126L, 
[17:44:53.053]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[17:44:53.053]                     -1823521982L, -1345991523L, -1672661737L, 
[17:44:53.053]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[17:44:53.053]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[17:44:53.053]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[17:44:53.053]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[17:44:53.053]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[17:44:53.053]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[17:44:53.053]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[17:44:53.053]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[17:44:53.053]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[17:44:53.053]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[17:44:53.053]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[17:44:53.053]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[17:44:53.053]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[17:44:53.053]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[17:44:53.053]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[17:44:53.053]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[17:44:53.053]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[17:44:53.053]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[17:44:53.053]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[17:44:53.053]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[17:44:53.053]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[17:44:53.053]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[17:44:53.053]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[17:44:53.053]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[17:44:53.053]                     -1119334354L, -1521015416L, -2041922421L, 
[17:44:53.053]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[17:44:53.053]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[17:44:53.053]                     1232111981L, -1801753084L, -1608606422L, 
[17:44:53.053]                     -1172096363L, 1420874031L, -1210473418L, 
[17:44:53.053]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[17:44:53.053]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[17:44:53.053]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[17:44:53.053]                     679371266L, -591318819L, -104578089L, -172818754L, 
[17:44:53.053]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[17:44:53.053]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[17:44:53.053]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[17:44:53.053]                     -332493318L, -1978392251L, -1691039632L, 
[17:44:53.053]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[17:44:53.053]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[17:44:53.053]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[17:44:53.053]                     87560756L, -87565624L, 426345146L, -699970416L, 
[17:44:53.053]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[17:44:53.053]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[17:44:53.053]                     -1178330196L, -687617348L, -1701912078L, 
[17:44:53.053]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[17:44:53.053]                     -1345416048L, 1816730492L, -1570431212L, 
[17:44:53.053]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[17:44:53.053]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[17:44:53.053]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[17:44:53.053]                     -1493184262L, -1943836976L, -590788308L, 
[17:44:53.053]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[17:44:53.053]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[17:44:53.053]                     1274857340L, -1205842638L, -1938479504L, 
[17:44:53.053]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[17:44:53.053]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[17:44:53.053]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[17:44:53.053]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[17:44:53.053]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[17:44:53.053]                     -1460751252L, 1201879444L, -1459788718L, 
[17:44:53.053]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[17:44:53.053]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[17:44:53.053]                     -420945808L, -1997735900L, -1838404552L, 
[17:44:53.053]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[17:44:53.053]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[17:44:53.053]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[17:44:53.053]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[17:44:53.053]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[17:44:53.053]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[17:44:53.053]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[17:44:53.053]                     942193650L, 751741680L, 689743428L, -18455976L, 
[17:44:53.053]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[17:44:53.053]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[17:44:53.053]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[17:44:53.053]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[17:44:53.053]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[17:44:53.053]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[17:44:53.053]                     -1357570110L, 1896595240L, -2066952276L, 
[17:44:53.053]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[17:44:53.053]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[17:44:53.053]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[17:44:53.053]                     769655120L, 236357794L, 181393736L, -13334772L, 
[17:44:53.053]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[17:44:53.053]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[17:44:53.053]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[17:44:53.053]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[17:44:53.053]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[17:44:53.053]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[17:44:53.053]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[17:44:53.053]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[17:44:53.053]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[17:44:53.053]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[17:44:53.053]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[17:44:53.053]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[17:44:53.053]                     -1365842884L, -438961294L, -1851472272L, 
[17:44:53.053]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[17:44:53.053]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[17:44:53.053]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[17:44:53.053]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[17:44:53.053]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[17:44:53.053]                     -594809770L, -2146766621L, -2013964635L, 
[17:44:53.053]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[17:44:53.053]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[17:44:53.053]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[17:44:53.053]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[17:44:53.053]                     -1426021878L, -1285634264L, 1507547537L, 
[17:44:53.053]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[17:44:53.053]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[17:44:53.053]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[17:44:53.053]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[17:44:53.053]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[17:44:53.053]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[17:44:53.053]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[17:44:53.053]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[17:44:53.053]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[17:44:53.053]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[17:44:53.053]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[17:44:53.053]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[17:44:53.053]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[17:44:53.053]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[17:44:53.053]                     -1604604761L, 1421229008L, -1268333714L, 
[17:44:53.053]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[17:44:53.053]                     -2070476623L, -2099222749L, 1141171236L, 
[17:44:53.053]                     -146426158L, -1797385433L, -1129376399L, 
[17:44:53.053]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[17:44:53.053]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[17:44:53.053]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[17:44:53.053]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[17:44:53.053]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[17:44:53.053]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[17:44:53.053]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[17:44:53.053]                     -1092079724L, -1765622238L, -1882554057L, 
[17:44:53.053]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[17:44:53.053]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[17:44:53.053]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[17:44:53.053]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[17:44:53.053]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[17:44:53.053]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[17:44:53.053]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[17:44:53.053]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[17:44:53.053]                     865377681L, -1127426242L), envir = base::globalenv(), 
[17:44:53.053]                       inherits = FALSE)
[17:44:53.053]                     NULL
[17:44:53.053]                   }
[17:44:53.053]                   options(future.plan = NULL)
[17:44:53.053]                   if (is.na(NA_character_)) 
[17:44:53.053]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.053]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:53.053]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:53.053]                     .init = FALSE)
[17:44:53.053]                 }
[17:44:53.053]             }
[17:44:53.053]         }
[17:44:53.053]     })
[17:44:53.053]     if (TRUE) {
[17:44:53.053]         base::sink(type = "output", split = FALSE)
[17:44:53.053]         if (TRUE) {
[17:44:53.053]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:53.053]         }
[17:44:53.053]         else {
[17:44:53.053]             ...future.result["stdout"] <- base::list(NULL)
[17:44:53.053]         }
[17:44:53.053]         base::close(...future.stdout)
[17:44:53.053]         ...future.stdout <- NULL
[17:44:53.053]     }
[17:44:53.053]     ...future.result$conditions <- ...future.conditions
[17:44:53.053]     ...future.result$finished <- base::Sys.time()
[17:44:53.053]     ...future.result
[17:44:53.053] }
[17:44:53.055] assign_globals() ...
[17:44:53.055] List of 5
[17:44:53.055]  $ ...future.FUN            :function (...)  
[17:44:53.055]  $ future.call.arguments    : list()
[17:44:53.055]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.055]  $ ...future.elements_ii    :List of 5
[17:44:53.055]   ..$ : int 0
[17:44:53.055]   ..$ : int 0
[17:44:53.055]   ..$ : int 0
[17:44:53.055]   ..$ : int 0
[17:44:53.055]   ..$ : int 0
[17:44:53.055]  $ ...future.seeds_ii       :List of 5
[17:44:53.055]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[17:44:53.055]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[17:44:53.055]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[17:44:53.055]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[17:44:53.055]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[17:44:53.055]  $ ...future.globals.maxSize: NULL
[17:44:53.055]  - attr(*, "where")=List of 5
[17:44:53.055]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:44:53.055]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:44:53.055]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:44:53.055]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:44:53.055]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:44:53.055]  - attr(*, "resolved")= logi FALSE
[17:44:53.055]  - attr(*, "total_size")= num 616
[17:44:53.055]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.055]  - attr(*, "already-done")= logi TRUE
[17:44:53.064] - reassign environment for ‘...future.FUN’
[17:44:53.064] - copied ‘...future.FUN’ to environment
[17:44:53.064] - copied ‘future.call.arguments’ to environment
[17:44:53.064] - copied ‘...future.elements_ii’ to environment
[17:44:53.064] - copied ‘...future.seeds_ii’ to environment
[17:44:53.064] - copied ‘...future.globals.maxSize’ to environment
[17:44:53.064] assign_globals() ... done
[17:44:53.065] plan(): Setting new future strategy stack:
[17:44:53.065] List of future strategies:
[17:44:53.065] 1. sequential:
[17:44:53.065]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.065]    - tweaked: FALSE
[17:44:53.065]    - call: NULL
[17:44:53.065] plan(): nbrOfWorkers() = 1
[17:44:53.066] plan(): Setting new future strategy stack:
[17:44:53.066] List of future strategies:
[17:44:53.066] 1. sequential:
[17:44:53.066]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.066]    - tweaked: FALSE
[17:44:53.066]    - call: plan(strategy)
[17:44:53.066] plan(): nbrOfWorkers() = 1
[17:44:53.067] SequentialFuture started (and completed)
[17:44:53.067] - Launch lazy future ... done
[17:44:53.067] run() for ‘SequentialFuture’ ... done
[17:44:53.067] Created future:
[17:44:53.067] SequentialFuture:
[17:44:53.067] Label: ‘future_replicate-1’
[17:44:53.067] Expression:
[17:44:53.067] {
[17:44:53.067]     do.call(function(...) {
[17:44:53.067]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.067]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.067]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.067]             on.exit(options(oopts), add = TRUE)
[17:44:53.067]         }
[17:44:53.067]         {
[17:44:53.067]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.067]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.067]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.067]                   envir = globalenv(), inherits = FALSE)
[17:44:53.067]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.067]             })
[17:44:53.067]         }
[17:44:53.067]     }, args = future.call.arguments)
[17:44:53.067] }
[17:44:53.067] Lazy evaluation: FALSE
[17:44:53.067] Asynchronous evaluation: FALSE
[17:44:53.067] Local evaluation: TRUE
[17:44:53.067] Environment: R_GlobalEnv
[17:44:53.067] Capture standard output: TRUE
[17:44:53.067] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:53.067] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:53.067] Packages: <none>
[17:44:53.067] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:53.067] Resolved: TRUE
[17:44:53.067] Value: 280 bytes of class ‘list’
[17:44:53.067] Early signaling: FALSE
[17:44:53.067] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:53.067] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:44:53.068] Chunk #1 of 1 ... DONE
[17:44:53.068] Launching 1 futures (chunks) ... DONE
[17:44:53.068] Resolving 1 futures (chunks) ...
[17:44:53.068] resolve() on list ...
[17:44:53.068]  recursive: 0
[17:44:53.069]  length: 1
[17:44:53.069] 
[17:44:53.069] resolved() for ‘SequentialFuture’ ...
[17:44:53.069] - state: ‘finished’
[17:44:53.069] - run: TRUE
[17:44:53.069] - result: ‘FutureResult’
[17:44:53.069] resolved() for ‘SequentialFuture’ ... done
[17:44:53.069] Future #1
[17:44:53.069] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:44:53.069] - nx: 1
[17:44:53.070] - relay: TRUE
[17:44:53.070] - stdout: TRUE
[17:44:53.070] - signal: TRUE
[17:44:53.070] - resignal: FALSE
[17:44:53.070] - force: TRUE
[17:44:53.070] - relayed: [n=1] FALSE
[17:44:53.070] - queued futures: [n=1] FALSE
[17:44:53.070]  - until=1
[17:44:53.070]  - relaying element #1
[17:44:53.070] - relayed: [n=1] TRUE
[17:44:53.071] - queued futures: [n=1] TRUE
[17:44:53.071] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:44:53.071]  length: 0 (resolved future 1)
[17:44:53.071] Relaying remaining futures
[17:44:53.071] signalConditionsASAP(NULL, pos=0) ...
[17:44:53.071] - nx: 1
[17:44:53.071] - relay: TRUE
[17:44:53.071] - stdout: TRUE
[17:44:53.071] - signal: TRUE
[17:44:53.071] - resignal: FALSE
[17:44:53.071] - force: TRUE
[17:44:53.072] - relayed: [n=1] TRUE
[17:44:53.072] - queued futures: [n=1] TRUE
 - flush all
[17:44:53.072] - relayed: [n=1] TRUE
[17:44:53.072] - queued futures: [n=1] TRUE
[17:44:53.072] signalConditionsASAP(NULL, pos=0) ... done
[17:44:53.072] resolve() on list ... DONE
[17:44:53.072]  - Number of value chunks collected: 1
[17:44:53.072] Resolving 1 futures (chunks) ... DONE
[17:44:53.072] Reducing values from 1 chunks ...
[17:44:53.072]  - Number of values collected after concatenation: 5
[17:44:53.073]  - Number of values expected: 5
[17:44:53.073] Reducing values from 1 chunks ... DONE
[17:44:53.073] future_lapply() ... DONE
[17:44:53.073] future_lapply() ...
[17:44:53.074] Generating random seeds ...
[17:44:53.074] Generating random seed streams for 5 elements ...
[17:44:53.074] Generating random seed streams for 5 elements ... DONE
[17:44:53.074] Generating random seeds ... DONE
[17:44:53.074] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:44:53.075] Number of chunks: 1
[17:44:53.075] getGlobalsAndPackagesXApply() ...
[17:44:53.075]  - future.globals: TRUE
[17:44:53.075] getGlobalsAndPackages() ...
[17:44:53.075] Searching for globals...
[17:44:53.076] - globals found: [2] ‘FUN’, ‘sample’
[17:44:53.076] Searching for globals ... DONE
[17:44:53.076] Resolving globals: FALSE
[17:44:53.077] The total size of the 1 globals is 616 bytes (616 bytes)
[17:44:53.077] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:44:53.077] - globals: [1] ‘FUN’
[17:44:53.077] 
[17:44:53.077] getGlobalsAndPackages() ... DONE
[17:44:53.077]  - globals found/used: [n=1] ‘FUN’
[17:44:53.077]  - needed namespaces: [n=0] 
[17:44:53.077] Finding globals ... DONE
[17:44:53.078]  - use_args: TRUE
[17:44:53.078]  - Getting '...' globals ...
[17:44:53.078] resolve() on list ...
[17:44:53.078]  recursive: 0
[17:44:53.078]  length: 1
[17:44:53.078]  elements: ‘...’
[17:44:53.078]  length: 0 (resolved future 1)
[17:44:53.078] resolve() on list ... DONE
[17:44:53.079]    - '...' content: [n=0] 
[17:44:53.079] List of 1
[17:44:53.079]  $ ...: list()
[17:44:53.079]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.079]  - attr(*, "where")=List of 1
[17:44:53.079]   ..$ ...:<environment: 0x558387c3a528> 
[17:44:53.079]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.079]  - attr(*, "resolved")= logi TRUE
[17:44:53.079]  - attr(*, "total_size")= num NA
[17:44:53.081]  - Getting '...' globals ... DONE
[17:44:53.081] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:44:53.081] List of 2
[17:44:53.081]  $ ...future.FUN:function (...)  
[17:44:53.081]  $ ...          : list()
[17:44:53.081]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.081]  - attr(*, "where")=List of 2
[17:44:53.081]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:44:53.081]   ..$ ...          :<environment: 0x558387c3a528> 
[17:44:53.081]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.081]  - attr(*, "resolved")= logi FALSE
[17:44:53.081]  - attr(*, "total_size")= num 616
[17:44:53.084] Packages to be attached in all futures: [n=0] 
[17:44:53.084] getGlobalsAndPackagesXApply() ... DONE
[17:44:53.084] Number of futures (= number of chunks): 1
[17:44:53.084] Launching 1 futures (chunks) ...
[17:44:53.084] Chunk #1 of 1 ...
[17:44:53.084]  - Finding globals in 'X' for chunk #1 ...
[17:44:53.086] getGlobalsAndPackages() ...
[17:44:53.086] Searching for globals...
[17:44:53.087] 
[17:44:53.087] Searching for globals ... DONE
[17:44:53.087] - globals: [0] <none>
[17:44:53.087] getGlobalsAndPackages() ... DONE
[17:44:53.087]    + additional globals found: [n=0] 
[17:44:53.087]    + additional namespaces needed: [n=0] 
[17:44:53.087]  - Finding globals in 'X' for chunk #1 ... DONE
[17:44:53.087]  - seeds: [5] <seeds>
[17:44:53.087]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.088] getGlobalsAndPackages() ...
[17:44:53.088] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.088] Resolving globals: FALSE
[17:44:53.088] Tweak future expression to call with '...' arguments ...
[17:44:53.088] {
[17:44:53.088]     do.call(function(...) {
[17:44:53.088]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.088]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.088]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.088]             on.exit(options(oopts), add = TRUE)
[17:44:53.088]         }
[17:44:53.088]         {
[17:44:53.088]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.088]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.088]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.088]                   envir = globalenv(), inherits = FALSE)
[17:44:53.088]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.088]             })
[17:44:53.088]         }
[17:44:53.088]     }, args = future.call.arguments)
[17:44:53.088] }
[17:44:53.088] Tweak future expression to call with '...' arguments ... DONE
[17:44:53.089] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.089] 
[17:44:53.089] getGlobalsAndPackages() ... DONE
[17:44:53.089] run() for ‘Future’ ...
[17:44:53.089] - state: ‘created’
[17:44:53.089] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:44:53.090] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:44:53.090] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:44:53.090]   - Field: ‘label’
[17:44:53.090]   - Field: ‘local’
[17:44:53.090]   - Field: ‘owner’
[17:44:53.090]   - Field: ‘envir’
[17:44:53.090]   - Field: ‘packages’
[17:44:53.090]   - Field: ‘gc’
[17:44:53.090]   - Field: ‘conditions’
[17:44:53.090]   - Field: ‘expr’
[17:44:53.090]   - Field: ‘uuid’
[17:44:53.091]   - Field: ‘seed’
[17:44:53.091]   - Field: ‘version’
[17:44:53.091]   - Field: ‘result’
[17:44:53.091]   - Field: ‘asynchronous’
[17:44:53.091]   - Field: ‘calls’
[17:44:53.091]   - Field: ‘globals’
[17:44:53.091]   - Field: ‘stdout’
[17:44:53.091]   - Field: ‘earlySignal’
[17:44:53.091]   - Field: ‘lazy’
[17:44:53.091]   - Field: ‘state’
[17:44:53.091] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:44:53.092] - Launch lazy future ...
[17:44:53.092] Packages needed by the future expression (n = 0): <none>
[17:44:53.092] Packages needed by future strategies (n = 0): <none>
[17:44:53.092] {
[17:44:53.092]     {
[17:44:53.092]         {
[17:44:53.092]             ...future.startTime <- base::Sys.time()
[17:44:53.092]             {
[17:44:53.092]                 {
[17:44:53.092]                   {
[17:44:53.092]                     base::local({
[17:44:53.092]                       has_future <- base::requireNamespace("future", 
[17:44:53.092]                         quietly = TRUE)
[17:44:53.092]                       if (has_future) {
[17:44:53.092]                         ns <- base::getNamespace("future")
[17:44:53.092]                         version <- ns[[".package"]][["version"]]
[17:44:53.092]                         if (is.null(version)) 
[17:44:53.092]                           version <- utils::packageVersion("future")
[17:44:53.092]                       }
[17:44:53.092]                       else {
[17:44:53.092]                         version <- NULL
[17:44:53.092]                       }
[17:44:53.092]                       if (!has_future || version < "1.8.0") {
[17:44:53.092]                         info <- base::c(r_version = base::gsub("R version ", 
[17:44:53.092]                           "", base::R.version$version.string), 
[17:44:53.092]                           platform = base::sprintf("%s (%s-bit)", 
[17:44:53.092]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:53.092]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:53.092]                             "release", "version")], collapse = " "), 
[17:44:53.092]                           hostname = base::Sys.info()[["nodename"]])
[17:44:53.092]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:44:53.092]                           info)
[17:44:53.092]                         info <- base::paste(info, collapse = "; ")
[17:44:53.092]                         if (!has_future) {
[17:44:53.092]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:53.092]                             info)
[17:44:53.092]                         }
[17:44:53.092]                         else {
[17:44:53.092]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:53.092]                             info, version)
[17:44:53.092]                         }
[17:44:53.092]                         base::stop(msg)
[17:44:53.092]                       }
[17:44:53.092]                     })
[17:44:53.092]                   }
[17:44:53.092]                   ...future.strategy.old <- future::plan("list")
[17:44:53.092]                   options(future.plan = NULL)
[17:44:53.092]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.092]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:53.092]                 }
[17:44:53.092]                 ...future.workdir <- getwd()
[17:44:53.092]             }
[17:44:53.092]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:53.092]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:53.092]         }
[17:44:53.092]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:53.092]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:53.092]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:53.092]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:53.092]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:53.092]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:53.092]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:53.092]             base::names(...future.oldOptions))
[17:44:53.092]     }
[17:44:53.092]     if (FALSE) {
[17:44:53.092]     }
[17:44:53.092]     else {
[17:44:53.092]         if (TRUE) {
[17:44:53.092]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:53.092]                 open = "w")
[17:44:53.092]         }
[17:44:53.092]         else {
[17:44:53.092]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:53.092]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:53.092]         }
[17:44:53.092]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:53.092]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:53.092]             base::sink(type = "output", split = FALSE)
[17:44:53.092]             base::close(...future.stdout)
[17:44:53.092]         }, add = TRUE)
[17:44:53.092]     }
[17:44:53.092]     ...future.frame <- base::sys.nframe()
[17:44:53.092]     ...future.conditions <- base::list()
[17:44:53.092]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:53.092]     if (FALSE) {
[17:44:53.092]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:53.092]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:53.092]     }
[17:44:53.092]     ...future.result <- base::tryCatch({
[17:44:53.092]         base::withCallingHandlers({
[17:44:53.092]             ...future.value <- base::withVisible(base::local({
[17:44:53.092]                 do.call(function(...) {
[17:44:53.092]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.092]                   if (!identical(...future.globals.maxSize.org, 
[17:44:53.092]                     ...future.globals.maxSize)) {
[17:44:53.092]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.092]                     on.exit(options(oopts), add = TRUE)
[17:44:53.092]                   }
[17:44:53.092]                   {
[17:44:53.092]                     lapply(seq_along(...future.elements_ii), 
[17:44:53.092]                       FUN = function(jj) {
[17:44:53.092]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.092]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.092]                           envir = globalenv(), inherits = FALSE)
[17:44:53.092]                         ...future.FUN(...future.X_jj, ...)
[17:44:53.092]                       })
[17:44:53.092]                   }
[17:44:53.092]                 }, args = future.call.arguments)
[17:44:53.092]             }))
[17:44:53.092]             future::FutureResult(value = ...future.value$value, 
[17:44:53.092]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.092]                   ...future.rng), globalenv = if (FALSE) 
[17:44:53.092]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:53.092]                     ...future.globalenv.names))
[17:44:53.092]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:53.092]         }, condition = base::local({
[17:44:53.092]             c <- base::c
[17:44:53.092]             inherits <- base::inherits
[17:44:53.092]             invokeRestart <- base::invokeRestart
[17:44:53.092]             length <- base::length
[17:44:53.092]             list <- base::list
[17:44:53.092]             seq.int <- base::seq.int
[17:44:53.092]             signalCondition <- base::signalCondition
[17:44:53.092]             sys.calls <- base::sys.calls
[17:44:53.092]             `[[` <- base::`[[`
[17:44:53.092]             `+` <- base::`+`
[17:44:53.092]             `<<-` <- base::`<<-`
[17:44:53.092]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:53.092]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:53.092]                   3L)]
[17:44:53.092]             }
[17:44:53.092]             function(cond) {
[17:44:53.092]                 is_error <- inherits(cond, "error")
[17:44:53.092]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:53.092]                   NULL)
[17:44:53.092]                 if (is_error) {
[17:44:53.092]                   sessionInformation <- function() {
[17:44:53.092]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:53.092]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:53.092]                       search = base::search(), system = base::Sys.info())
[17:44:53.092]                   }
[17:44:53.092]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.092]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:53.092]                     cond$call), session = sessionInformation(), 
[17:44:53.092]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:53.092]                   signalCondition(cond)
[17:44:53.092]                 }
[17:44:53.092]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:53.092]                 "immediateCondition"))) {
[17:44:53.092]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:53.092]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.092]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:53.092]                   if (TRUE && !signal) {
[17:44:53.092]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.092]                     {
[17:44:53.092]                       inherits <- base::inherits
[17:44:53.092]                       invokeRestart <- base::invokeRestart
[17:44:53.092]                       is.null <- base::is.null
[17:44:53.092]                       muffled <- FALSE
[17:44:53.092]                       if (inherits(cond, "message")) {
[17:44:53.092]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.092]                         if (muffled) 
[17:44:53.092]                           invokeRestart("muffleMessage")
[17:44:53.092]                       }
[17:44:53.092]                       else if (inherits(cond, "warning")) {
[17:44:53.092]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.092]                         if (muffled) 
[17:44:53.092]                           invokeRestart("muffleWarning")
[17:44:53.092]                       }
[17:44:53.092]                       else if (inherits(cond, "condition")) {
[17:44:53.092]                         if (!is.null(pattern)) {
[17:44:53.092]                           computeRestarts <- base::computeRestarts
[17:44:53.092]                           grepl <- base::grepl
[17:44:53.092]                           restarts <- computeRestarts(cond)
[17:44:53.092]                           for (restart in restarts) {
[17:44:53.092]                             name <- restart$name
[17:44:53.092]                             if (is.null(name)) 
[17:44:53.092]                               next
[17:44:53.092]                             if (!grepl(pattern, name)) 
[17:44:53.092]                               next
[17:44:53.092]                             invokeRestart(restart)
[17:44:53.092]                             muffled <- TRUE
[17:44:53.092]                             break
[17:44:53.092]                           }
[17:44:53.092]                         }
[17:44:53.092]                       }
[17:44:53.092]                       invisible(muffled)
[17:44:53.092]                     }
[17:44:53.092]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.092]                   }
[17:44:53.092]                 }
[17:44:53.092]                 else {
[17:44:53.092]                   if (TRUE) {
[17:44:53.092]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.092]                     {
[17:44:53.092]                       inherits <- base::inherits
[17:44:53.092]                       invokeRestart <- base::invokeRestart
[17:44:53.092]                       is.null <- base::is.null
[17:44:53.092]                       muffled <- FALSE
[17:44:53.092]                       if (inherits(cond, "message")) {
[17:44:53.092]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.092]                         if (muffled) 
[17:44:53.092]                           invokeRestart("muffleMessage")
[17:44:53.092]                       }
[17:44:53.092]                       else if (inherits(cond, "warning")) {
[17:44:53.092]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.092]                         if (muffled) 
[17:44:53.092]                           invokeRestart("muffleWarning")
[17:44:53.092]                       }
[17:44:53.092]                       else if (inherits(cond, "condition")) {
[17:44:53.092]                         if (!is.null(pattern)) {
[17:44:53.092]                           computeRestarts <- base::computeRestarts
[17:44:53.092]                           grepl <- base::grepl
[17:44:53.092]                           restarts <- computeRestarts(cond)
[17:44:53.092]                           for (restart in restarts) {
[17:44:53.092]                             name <- restart$name
[17:44:53.092]                             if (is.null(name)) 
[17:44:53.092]                               next
[17:44:53.092]                             if (!grepl(pattern, name)) 
[17:44:53.092]                               next
[17:44:53.092]                             invokeRestart(restart)
[17:44:53.092]                             muffled <- TRUE
[17:44:53.092]                             break
[17:44:53.092]                           }
[17:44:53.092]                         }
[17:44:53.092]                       }
[17:44:53.092]                       invisible(muffled)
[17:44:53.092]                     }
[17:44:53.092]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.092]                   }
[17:44:53.092]                 }
[17:44:53.092]             }
[17:44:53.092]         }))
[17:44:53.092]     }, error = function(ex) {
[17:44:53.092]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:53.092]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.092]                 ...future.rng), started = ...future.startTime, 
[17:44:53.092]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:53.092]             version = "1.8"), class = "FutureResult")
[17:44:53.092]     }, finally = {
[17:44:53.092]         if (!identical(...future.workdir, getwd())) 
[17:44:53.092]             setwd(...future.workdir)
[17:44:53.092]         {
[17:44:53.092]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:53.092]                 ...future.oldOptions$nwarnings <- NULL
[17:44:53.092]             }
[17:44:53.092]             base::options(...future.oldOptions)
[17:44:53.092]             if (.Platform$OS.type == "windows") {
[17:44:53.092]                 old_names <- names(...future.oldEnvVars)
[17:44:53.092]                 envs <- base::Sys.getenv()
[17:44:53.092]                 names <- names(envs)
[17:44:53.092]                 common <- intersect(names, old_names)
[17:44:53.092]                 added <- setdiff(names, old_names)
[17:44:53.092]                 removed <- setdiff(old_names, names)
[17:44:53.092]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:53.092]                   envs[common]]
[17:44:53.092]                 NAMES <- toupper(changed)
[17:44:53.092]                 args <- list()
[17:44:53.092]                 for (kk in seq_along(NAMES)) {
[17:44:53.092]                   name <- changed[[kk]]
[17:44:53.092]                   NAME <- NAMES[[kk]]
[17:44:53.092]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.092]                     next
[17:44:53.092]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.092]                 }
[17:44:53.092]                 NAMES <- toupper(added)
[17:44:53.092]                 for (kk in seq_along(NAMES)) {
[17:44:53.092]                   name <- added[[kk]]
[17:44:53.092]                   NAME <- NAMES[[kk]]
[17:44:53.092]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.092]                     next
[17:44:53.092]                   args[[name]] <- ""
[17:44:53.092]                 }
[17:44:53.092]                 NAMES <- toupper(removed)
[17:44:53.092]                 for (kk in seq_along(NAMES)) {
[17:44:53.092]                   name <- removed[[kk]]
[17:44:53.092]                   NAME <- NAMES[[kk]]
[17:44:53.092]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.092]                     next
[17:44:53.092]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.092]                 }
[17:44:53.092]                 if (length(args) > 0) 
[17:44:53.092]                   base::do.call(base::Sys.setenv, args = args)
[17:44:53.092]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:53.092]             }
[17:44:53.092]             else {
[17:44:53.092]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:53.092]             }
[17:44:53.092]             {
[17:44:53.092]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:53.092]                   0L) {
[17:44:53.092]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:53.092]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:53.092]                   base::options(opts)
[17:44:53.092]                 }
[17:44:53.092]                 {
[17:44:53.092]                   {
[17:44:53.092]                     base::assign(".Random.seed", c(10403L, 4L, 
[17:44:53.092]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[17:44:53.092]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[17:44:53.092]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[17:44:53.092]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[17:44:53.092]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[17:44:53.092]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[17:44:53.092]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[17:44:53.092]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[17:44:53.092]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[17:44:53.092]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[17:44:53.092]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[17:44:53.092]                     -1512233174L, -1985955764L, -425390065L, 
[17:44:53.092]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[17:44:53.092]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[17:44:53.092]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[17:44:53.092]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[17:44:53.092]                     1818328109L, -1284085436L, -1981489558L, 
[17:44:53.092]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[17:44:53.092]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[17:44:53.092]                     -1718567047L, -793788661L, -1133789126L, 
[17:44:53.092]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[17:44:53.092]                     -1823521982L, -1345991523L, -1672661737L, 
[17:44:53.092]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[17:44:53.092]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[17:44:53.092]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[17:44:53.092]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[17:44:53.092]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[17:44:53.092]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[17:44:53.092]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[17:44:53.092]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[17:44:53.092]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[17:44:53.092]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[17:44:53.092]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[17:44:53.092]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[17:44:53.092]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[17:44:53.092]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[17:44:53.092]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[17:44:53.092]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[17:44:53.092]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[17:44:53.092]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[17:44:53.092]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[17:44:53.092]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[17:44:53.092]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[17:44:53.092]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[17:44:53.092]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[17:44:53.092]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[17:44:53.092]                     -1119334354L, -1521015416L, -2041922421L, 
[17:44:53.092]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[17:44:53.092]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[17:44:53.092]                     1232111981L, -1801753084L, -1608606422L, 
[17:44:53.092]                     -1172096363L, 1420874031L, -1210473418L, 
[17:44:53.092]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[17:44:53.092]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[17:44:53.092]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[17:44:53.092]                     679371266L, -591318819L, -104578089L, -172818754L, 
[17:44:53.092]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[17:44:53.092]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[17:44:53.092]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[17:44:53.092]                     -332493318L, -1978392251L, -1691039632L, 
[17:44:53.092]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[17:44:53.092]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[17:44:53.092]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[17:44:53.092]                     87560756L, -87565624L, 426345146L, -699970416L, 
[17:44:53.092]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[17:44:53.092]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[17:44:53.092]                     -1178330196L, -687617348L, -1701912078L, 
[17:44:53.092]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[17:44:53.092]                     -1345416048L, 1816730492L, -1570431212L, 
[17:44:53.092]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[17:44:53.092]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[17:44:53.092]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[17:44:53.092]                     -1493184262L, -1943836976L, -590788308L, 
[17:44:53.092]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[17:44:53.092]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[17:44:53.092]                     1274857340L, -1205842638L, -1938479504L, 
[17:44:53.092]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[17:44:53.092]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[17:44:53.092]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[17:44:53.092]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[17:44:53.092]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[17:44:53.092]                     -1460751252L, 1201879444L, -1459788718L, 
[17:44:53.092]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[17:44:53.092]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[17:44:53.092]                     -420945808L, -1997735900L, -1838404552L, 
[17:44:53.092]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[17:44:53.092]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[17:44:53.092]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[17:44:53.092]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[17:44:53.092]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[17:44:53.092]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[17:44:53.092]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[17:44:53.092]                     942193650L, 751741680L, 689743428L, -18455976L, 
[17:44:53.092]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[17:44:53.092]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[17:44:53.092]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[17:44:53.092]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[17:44:53.092]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[17:44:53.092]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[17:44:53.092]                     -1357570110L, 1896595240L, -2066952276L, 
[17:44:53.092]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[17:44:53.092]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[17:44:53.092]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[17:44:53.092]                     769655120L, 236357794L, 181393736L, -13334772L, 
[17:44:53.092]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[17:44:53.092]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[17:44:53.092]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[17:44:53.092]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[17:44:53.092]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[17:44:53.092]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[17:44:53.092]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[17:44:53.092]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[17:44:53.092]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[17:44:53.092]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[17:44:53.092]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[17:44:53.092]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[17:44:53.092]                     -1365842884L, -438961294L, -1851472272L, 
[17:44:53.092]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[17:44:53.092]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[17:44:53.092]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[17:44:53.092]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[17:44:53.092]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[17:44:53.092]                     -594809770L, -2146766621L, -2013964635L, 
[17:44:53.092]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[17:44:53.092]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[17:44:53.092]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[17:44:53.092]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[17:44:53.092]                     -1426021878L, -1285634264L, 1507547537L, 
[17:44:53.092]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[17:44:53.092]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[17:44:53.092]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[17:44:53.092]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[17:44:53.092]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[17:44:53.092]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[17:44:53.092]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[17:44:53.092]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[17:44:53.092]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[17:44:53.092]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[17:44:53.092]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[17:44:53.092]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[17:44:53.092]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[17:44:53.092]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[17:44:53.092]                     -1604604761L, 1421229008L, -1268333714L, 
[17:44:53.092]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[17:44:53.092]                     -2070476623L, -2099222749L, 1141171236L, 
[17:44:53.092]                     -146426158L, -1797385433L, -1129376399L, 
[17:44:53.092]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[17:44:53.092]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[17:44:53.092]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[17:44:53.092]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[17:44:53.092]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[17:44:53.092]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[17:44:53.092]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[17:44:53.092]                     -1092079724L, -1765622238L, -1882554057L, 
[17:44:53.092]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[17:44:53.092]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[17:44:53.092]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[17:44:53.092]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[17:44:53.092]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[17:44:53.092]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[17:44:53.092]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[17:44:53.092]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[17:44:53.092]                     865377681L, -1127426242L), envir = base::globalenv(), 
[17:44:53.092]                       inherits = FALSE)
[17:44:53.092]                     NULL
[17:44:53.092]                   }
[17:44:53.092]                   options(future.plan = NULL)
[17:44:53.092]                   if (is.na(NA_character_)) 
[17:44:53.092]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.092]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:53.092]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:53.092]                     .init = FALSE)
[17:44:53.092]                 }
[17:44:53.092]             }
[17:44:53.092]         }
[17:44:53.092]     })
[17:44:53.092]     if (TRUE) {
[17:44:53.092]         base::sink(type = "output", split = FALSE)
[17:44:53.092]         if (TRUE) {
[17:44:53.092]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:53.092]         }
[17:44:53.092]         else {
[17:44:53.092]             ...future.result["stdout"] <- base::list(NULL)
[17:44:53.092]         }
[17:44:53.092]         base::close(...future.stdout)
[17:44:53.092]         ...future.stdout <- NULL
[17:44:53.092]     }
[17:44:53.092]     ...future.result$conditions <- ...future.conditions
[17:44:53.092]     ...future.result$finished <- base::Sys.time()
[17:44:53.092]     ...future.result
[17:44:53.092] }
[17:44:53.095] assign_globals() ...
[17:44:53.095] List of 5
[17:44:53.095]  $ ...future.FUN            :function (...)  
[17:44:53.095]  $ future.call.arguments    : list()
[17:44:53.095]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.095]  $ ...future.elements_ii    :List of 5
[17:44:53.095]   ..$ : int 0
[17:44:53.095]   ..$ : int 0
[17:44:53.095]   ..$ : int 0
[17:44:53.095]   ..$ : int 0
[17:44:53.095]   ..$ : int 0
[17:44:53.095]  $ ...future.seeds_ii       :List of 5
[17:44:53.095]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[17:44:53.095]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[17:44:53.095]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[17:44:53.095]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[17:44:53.095]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[17:44:53.095]  $ ...future.globals.maxSize: NULL
[17:44:53.095]  - attr(*, "where")=List of 5
[17:44:53.095]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:44:53.095]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:44:53.095]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:44:53.095]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:44:53.095]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:44:53.095]  - attr(*, "resolved")= logi FALSE
[17:44:53.095]  - attr(*, "total_size")= num 616
[17:44:53.095]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.095]  - attr(*, "already-done")= logi TRUE
[17:44:53.102] - reassign environment for ‘...future.FUN’
[17:44:53.102] - copied ‘...future.FUN’ to environment
[17:44:53.102] - copied ‘future.call.arguments’ to environment
[17:44:53.102] - copied ‘...future.elements_ii’ to environment
[17:44:53.102] - copied ‘...future.seeds_ii’ to environment
[17:44:53.102] - copied ‘...future.globals.maxSize’ to environment
[17:44:53.103] assign_globals() ... done
[17:44:53.103] plan(): Setting new future strategy stack:
[17:44:53.103] List of future strategies:
[17:44:53.103] 1. sequential:
[17:44:53.103]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.103]    - tweaked: FALSE
[17:44:53.103]    - call: NULL
[17:44:53.103] plan(): nbrOfWorkers() = 1
[17:44:53.104] plan(): Setting new future strategy stack:
[17:44:53.104] List of future strategies:
[17:44:53.104] 1. sequential:
[17:44:53.104]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.104]    - tweaked: FALSE
[17:44:53.104]    - call: plan(strategy)
[17:44:53.105] plan(): nbrOfWorkers() = 1
[17:44:53.105] SequentialFuture started (and completed)
[17:44:53.105] - Launch lazy future ... done
[17:44:53.105] run() for ‘SequentialFuture’ ... done
[17:44:53.105] Created future:
[17:44:53.105] SequentialFuture:
[17:44:53.105] Label: ‘future_replicate-1’
[17:44:53.105] Expression:
[17:44:53.105] {
[17:44:53.105]     do.call(function(...) {
[17:44:53.105]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.105]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.105]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.105]             on.exit(options(oopts), add = TRUE)
[17:44:53.105]         }
[17:44:53.105]         {
[17:44:53.105]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.105]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.105]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.105]                   envir = globalenv(), inherits = FALSE)
[17:44:53.105]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.105]             })
[17:44:53.105]         }
[17:44:53.105]     }, args = future.call.arguments)
[17:44:53.105] }
[17:44:53.105] Lazy evaluation: FALSE
[17:44:53.105] Asynchronous evaluation: FALSE
[17:44:53.105] Local evaluation: TRUE
[17:44:53.105] Environment: R_GlobalEnv
[17:44:53.105] Capture standard output: TRUE
[17:44:53.105] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:53.105] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:53.105] Packages: <none>
[17:44:53.105] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:53.105] Resolved: TRUE
[17:44:53.105] Value: 280 bytes of class ‘list’
[17:44:53.105] Early signaling: FALSE
[17:44:53.105] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:53.105] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:44:53.106] Chunk #1 of 1 ... DONE
[17:44:53.106] Launching 1 futures (chunks) ... DONE
[17:44:53.106] Resolving 1 futures (chunks) ...
[17:44:53.107] resolve() on list ...
[17:44:53.107]  recursive: 0
[17:44:53.107]  length: 1
[17:44:53.107] 
[17:44:53.107] resolved() for ‘SequentialFuture’ ...
[17:44:53.107] - state: ‘finished’
[17:44:53.107] - run: TRUE
[17:44:53.107] - result: ‘FutureResult’
[17:44:53.107] resolved() for ‘SequentialFuture’ ... done
[17:44:53.107] Future #1
[17:44:53.108] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:44:53.108] - nx: 1
[17:44:53.108] - relay: TRUE
[17:44:53.108] - stdout: TRUE
[17:44:53.108] - signal: TRUE
[17:44:53.108] - resignal: FALSE
[17:44:53.108] - force: TRUE
[17:44:53.108] - relayed: [n=1] FALSE
[17:44:53.108] - queued futures: [n=1] FALSE
[17:44:53.108]  - until=1
[17:44:53.108]  - relaying element #1
[17:44:53.109] - relayed: [n=1] TRUE
[17:44:53.109] - queued futures: [n=1] TRUE
[17:44:53.109] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:44:53.109]  length: 0 (resolved future 1)
[17:44:53.109] Relaying remaining futures
[17:44:53.109] signalConditionsASAP(NULL, pos=0) ...
[17:44:53.109] - nx: 1
[17:44:53.109] - relay: TRUE
[17:44:53.109] - stdout: TRUE
[17:44:53.109] - signal: TRUE
[17:44:53.109] - resignal: FALSE
[17:44:53.109] - force: TRUE
[17:44:53.110] - relayed: [n=1] TRUE
[17:44:53.110] - queued futures: [n=1] TRUE
 - flush all
[17:44:53.110] - relayed: [n=1] TRUE
[17:44:53.110] - queued futures: [n=1] TRUE
[17:44:53.110] signalConditionsASAP(NULL, pos=0) ... done
[17:44:53.110] resolve() on list ... DONE
[17:44:53.110]  - Number of value chunks collected: 1
[17:44:53.110] Resolving 1 futures (chunks) ... DONE
[17:44:53.110] Reducing values from 1 chunks ...
[17:44:53.110]  - Number of values collected after concatenation: 5
[17:44:53.110]  - Number of values expected: 5
[17:44:53.111] Reducing values from 1 chunks ... DONE
[17:44:53.111] future_lapply() ... DONE
[17:44:53.111] future_lapply() ...
[17:44:53.111] Generating random seeds ...
[17:44:53.111] Generating random seed streams for 5 elements ...
[17:44:53.111] Generating random seed streams for 5 elements ... DONE
[17:44:53.112] Generating random seeds ... DONE
[17:44:53.113] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:44:53.114] Number of chunks: 1
[17:44:53.114] getGlobalsAndPackagesXApply() ...
[17:44:53.114]  - future.globals: TRUE
[17:44:53.114] getGlobalsAndPackages() ...
[17:44:53.114] Searching for globals...
[17:44:53.115] - globals found: [2] ‘FUN’, ‘sample’
[17:44:53.115] Searching for globals ... DONE
[17:44:53.115] Resolving globals: FALSE
[17:44:53.116] The total size of the 1 globals is 616 bytes (616 bytes)
[17:44:53.116] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:44:53.116] - globals: [1] ‘FUN’
[17:44:53.116] 
[17:44:53.116] getGlobalsAndPackages() ... DONE
[17:44:53.116]  - globals found/used: [n=1] ‘FUN’
[17:44:53.117]  - needed namespaces: [n=0] 
[17:44:53.117] Finding globals ... DONE
[17:44:53.117]  - use_args: TRUE
[17:44:53.117]  - Getting '...' globals ...
[17:44:53.117] resolve() on list ...
[17:44:53.117]  recursive: 0
[17:44:53.117]  length: 1
[17:44:53.117]  elements: ‘...’
[17:44:53.118]  length: 0 (resolved future 1)
[17:44:53.118] resolve() on list ... DONE
[17:44:53.118]    - '...' content: [n=0] 
[17:44:53.118] List of 1
[17:44:53.118]  $ ...: list()
[17:44:53.118]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.118]  - attr(*, "where")=List of 1
[17:44:53.118]   ..$ ...:<environment: 0x5583885dcff8> 
[17:44:53.118]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.118]  - attr(*, "resolved")= logi TRUE
[17:44:53.118]  - attr(*, "total_size")= num NA
[17:44:53.120]  - Getting '...' globals ... DONE
[17:44:53.120] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:44:53.120] List of 2
[17:44:53.120]  $ ...future.FUN:function (...)  
[17:44:53.120]  $ ...          : list()
[17:44:53.120]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.120]  - attr(*, "where")=List of 2
[17:44:53.120]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:44:53.120]   ..$ ...          :<environment: 0x5583885dcff8> 
[17:44:53.120]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.120]  - attr(*, "resolved")= logi FALSE
[17:44:53.120]  - attr(*, "total_size")= num 616
[17:44:53.123] Packages to be attached in all futures: [n=0] 
[17:44:53.123] getGlobalsAndPackagesXApply() ... DONE
[17:44:53.123] Number of futures (= number of chunks): 1
[17:44:53.123] Launching 1 futures (chunks) ...
[17:44:53.123] Chunk #1 of 1 ...
[17:44:53.124]  - Finding globals in 'X' for chunk #1 ...
[17:44:53.124] getGlobalsAndPackages() ...
[17:44:53.124] Searching for globals...
[17:44:53.124] 
[17:44:53.124] Searching for globals ... DONE
[17:44:53.124] - globals: [0] <none>
[17:44:53.124] getGlobalsAndPackages() ... DONE
[17:44:53.124]    + additional globals found: [n=0] 
[17:44:53.124]    + additional namespaces needed: [n=0] 
[17:44:53.125]  - Finding globals in 'X' for chunk #1 ... DONE
[17:44:53.125]  - seeds: [5] <seeds>
[17:44:53.125]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.125] getGlobalsAndPackages() ...
[17:44:53.125] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.125] Resolving globals: FALSE
[17:44:53.125] Tweak future expression to call with '...' arguments ...
[17:44:53.125] {
[17:44:53.125]     do.call(function(...) {
[17:44:53.125]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.125]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.125]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.125]             on.exit(options(oopts), add = TRUE)
[17:44:53.125]         }
[17:44:53.125]         {
[17:44:53.125]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.125]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.125]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.125]                   envir = globalenv(), inherits = FALSE)
[17:44:53.125]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.125]             })
[17:44:53.125]         }
[17:44:53.125]     }, args = future.call.arguments)
[17:44:53.125] }
[17:44:53.125] Tweak future expression to call with '...' arguments ... DONE
[17:44:53.126] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.126] 
[17:44:53.126] getGlobalsAndPackages() ... DONE
[17:44:53.126] run() for ‘Future’ ...
[17:44:53.126] - state: ‘created’
[17:44:53.126] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:44:53.127] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:44:53.127] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:44:53.127]   - Field: ‘label’
[17:44:53.127]   - Field: ‘local’
[17:44:53.127]   - Field: ‘owner’
[17:44:53.127]   - Field: ‘envir’
[17:44:53.127]   - Field: ‘packages’
[17:44:53.127]   - Field: ‘gc’
[17:44:53.128]   - Field: ‘conditions’
[17:44:53.128]   - Field: ‘expr’
[17:44:53.128]   - Field: ‘uuid’
[17:44:53.128]   - Field: ‘seed’
[17:44:53.128]   - Field: ‘version’
[17:44:53.128]   - Field: ‘result’
[17:44:53.128]   - Field: ‘asynchronous’
[17:44:53.128]   - Field: ‘calls’
[17:44:53.128]   - Field: ‘globals’
[17:44:53.128]   - Field: ‘stdout’
[17:44:53.128]   - Field: ‘earlySignal’
[17:44:53.128]   - Field: ‘lazy’
[17:44:53.129]   - Field: ‘state’
[17:44:53.129] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:44:53.129] - Launch lazy future ...
[17:44:53.129] Packages needed by the future expression (n = 0): <none>
[17:44:53.129] Packages needed by future strategies (n = 0): <none>
[17:44:53.129] {
[17:44:53.129]     {
[17:44:53.129]         {
[17:44:53.129]             ...future.startTime <- base::Sys.time()
[17:44:53.129]             {
[17:44:53.129]                 {
[17:44:53.129]                   {
[17:44:53.129]                     base::local({
[17:44:53.129]                       has_future <- base::requireNamespace("future", 
[17:44:53.129]                         quietly = TRUE)
[17:44:53.129]                       if (has_future) {
[17:44:53.129]                         ns <- base::getNamespace("future")
[17:44:53.129]                         version <- ns[[".package"]][["version"]]
[17:44:53.129]                         if (is.null(version)) 
[17:44:53.129]                           version <- utils::packageVersion("future")
[17:44:53.129]                       }
[17:44:53.129]                       else {
[17:44:53.129]                         version <- NULL
[17:44:53.129]                       }
[17:44:53.129]                       if (!has_future || version < "1.8.0") {
[17:44:53.129]                         info <- base::c(r_version = base::gsub("R version ", 
[17:44:53.129]                           "", base::R.version$version.string), 
[17:44:53.129]                           platform = base::sprintf("%s (%s-bit)", 
[17:44:53.129]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:53.129]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:53.129]                             "release", "version")], collapse = " "), 
[17:44:53.129]                           hostname = base::Sys.info()[["nodename"]])
[17:44:53.129]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:44:53.129]                           info)
[17:44:53.129]                         info <- base::paste(info, collapse = "; ")
[17:44:53.129]                         if (!has_future) {
[17:44:53.129]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:53.129]                             info)
[17:44:53.129]                         }
[17:44:53.129]                         else {
[17:44:53.129]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:53.129]                             info, version)
[17:44:53.129]                         }
[17:44:53.129]                         base::stop(msg)
[17:44:53.129]                       }
[17:44:53.129]                     })
[17:44:53.129]                   }
[17:44:53.129]                   ...future.strategy.old <- future::plan("list")
[17:44:53.129]                   options(future.plan = NULL)
[17:44:53.129]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.129]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:53.129]                 }
[17:44:53.129]                 ...future.workdir <- getwd()
[17:44:53.129]             }
[17:44:53.129]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:53.129]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:53.129]         }
[17:44:53.129]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:53.129]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:53.129]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:53.129]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:53.129]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:53.129]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:53.129]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:53.129]             base::names(...future.oldOptions))
[17:44:53.129]     }
[17:44:53.129]     if (FALSE) {
[17:44:53.129]     }
[17:44:53.129]     else {
[17:44:53.129]         if (TRUE) {
[17:44:53.129]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:53.129]                 open = "w")
[17:44:53.129]         }
[17:44:53.129]         else {
[17:44:53.129]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:53.129]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:53.129]         }
[17:44:53.129]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:53.129]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:53.129]             base::sink(type = "output", split = FALSE)
[17:44:53.129]             base::close(...future.stdout)
[17:44:53.129]         }, add = TRUE)
[17:44:53.129]     }
[17:44:53.129]     ...future.frame <- base::sys.nframe()
[17:44:53.129]     ...future.conditions <- base::list()
[17:44:53.129]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:53.129]     if (FALSE) {
[17:44:53.129]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:53.129]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:53.129]     }
[17:44:53.129]     ...future.result <- base::tryCatch({
[17:44:53.129]         base::withCallingHandlers({
[17:44:53.129]             ...future.value <- base::withVisible(base::local({
[17:44:53.129]                 do.call(function(...) {
[17:44:53.129]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.129]                   if (!identical(...future.globals.maxSize.org, 
[17:44:53.129]                     ...future.globals.maxSize)) {
[17:44:53.129]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.129]                     on.exit(options(oopts), add = TRUE)
[17:44:53.129]                   }
[17:44:53.129]                   {
[17:44:53.129]                     lapply(seq_along(...future.elements_ii), 
[17:44:53.129]                       FUN = function(jj) {
[17:44:53.129]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.129]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.129]                           envir = globalenv(), inherits = FALSE)
[17:44:53.129]                         ...future.FUN(...future.X_jj, ...)
[17:44:53.129]                       })
[17:44:53.129]                   }
[17:44:53.129]                 }, args = future.call.arguments)
[17:44:53.129]             }))
[17:44:53.129]             future::FutureResult(value = ...future.value$value, 
[17:44:53.129]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.129]                   ...future.rng), globalenv = if (FALSE) 
[17:44:53.129]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:53.129]                     ...future.globalenv.names))
[17:44:53.129]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:53.129]         }, condition = base::local({
[17:44:53.129]             c <- base::c
[17:44:53.129]             inherits <- base::inherits
[17:44:53.129]             invokeRestart <- base::invokeRestart
[17:44:53.129]             length <- base::length
[17:44:53.129]             list <- base::list
[17:44:53.129]             seq.int <- base::seq.int
[17:44:53.129]             signalCondition <- base::signalCondition
[17:44:53.129]             sys.calls <- base::sys.calls
[17:44:53.129]             `[[` <- base::`[[`
[17:44:53.129]             `+` <- base::`+`
[17:44:53.129]             `<<-` <- base::`<<-`
[17:44:53.129]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:53.129]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:53.129]                   3L)]
[17:44:53.129]             }
[17:44:53.129]             function(cond) {
[17:44:53.129]                 is_error <- inherits(cond, "error")
[17:44:53.129]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:53.129]                   NULL)
[17:44:53.129]                 if (is_error) {
[17:44:53.129]                   sessionInformation <- function() {
[17:44:53.129]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:53.129]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:53.129]                       search = base::search(), system = base::Sys.info())
[17:44:53.129]                   }
[17:44:53.129]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.129]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:53.129]                     cond$call), session = sessionInformation(), 
[17:44:53.129]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:53.129]                   signalCondition(cond)
[17:44:53.129]                 }
[17:44:53.129]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:53.129]                 "immediateCondition"))) {
[17:44:53.129]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:53.129]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.129]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:53.129]                   if (TRUE && !signal) {
[17:44:53.129]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.129]                     {
[17:44:53.129]                       inherits <- base::inherits
[17:44:53.129]                       invokeRestart <- base::invokeRestart
[17:44:53.129]                       is.null <- base::is.null
[17:44:53.129]                       muffled <- FALSE
[17:44:53.129]                       if (inherits(cond, "message")) {
[17:44:53.129]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.129]                         if (muffled) 
[17:44:53.129]                           invokeRestart("muffleMessage")
[17:44:53.129]                       }
[17:44:53.129]                       else if (inherits(cond, "warning")) {
[17:44:53.129]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.129]                         if (muffled) 
[17:44:53.129]                           invokeRestart("muffleWarning")
[17:44:53.129]                       }
[17:44:53.129]                       else if (inherits(cond, "condition")) {
[17:44:53.129]                         if (!is.null(pattern)) {
[17:44:53.129]                           computeRestarts <- base::computeRestarts
[17:44:53.129]                           grepl <- base::grepl
[17:44:53.129]                           restarts <- computeRestarts(cond)
[17:44:53.129]                           for (restart in restarts) {
[17:44:53.129]                             name <- restart$name
[17:44:53.129]                             if (is.null(name)) 
[17:44:53.129]                               next
[17:44:53.129]                             if (!grepl(pattern, name)) 
[17:44:53.129]                               next
[17:44:53.129]                             invokeRestart(restart)
[17:44:53.129]                             muffled <- TRUE
[17:44:53.129]                             break
[17:44:53.129]                           }
[17:44:53.129]                         }
[17:44:53.129]                       }
[17:44:53.129]                       invisible(muffled)
[17:44:53.129]                     }
[17:44:53.129]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.129]                   }
[17:44:53.129]                 }
[17:44:53.129]                 else {
[17:44:53.129]                   if (TRUE) {
[17:44:53.129]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.129]                     {
[17:44:53.129]                       inherits <- base::inherits
[17:44:53.129]                       invokeRestart <- base::invokeRestart
[17:44:53.129]                       is.null <- base::is.null
[17:44:53.129]                       muffled <- FALSE
[17:44:53.129]                       if (inherits(cond, "message")) {
[17:44:53.129]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.129]                         if (muffled) 
[17:44:53.129]                           invokeRestart("muffleMessage")
[17:44:53.129]                       }
[17:44:53.129]                       else if (inherits(cond, "warning")) {
[17:44:53.129]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.129]                         if (muffled) 
[17:44:53.129]                           invokeRestart("muffleWarning")
[17:44:53.129]                       }
[17:44:53.129]                       else if (inherits(cond, "condition")) {
[17:44:53.129]                         if (!is.null(pattern)) {
[17:44:53.129]                           computeRestarts <- base::computeRestarts
[17:44:53.129]                           grepl <- base::grepl
[17:44:53.129]                           restarts <- computeRestarts(cond)
[17:44:53.129]                           for (restart in restarts) {
[17:44:53.129]                             name <- restart$name
[17:44:53.129]                             if (is.null(name)) 
[17:44:53.129]                               next
[17:44:53.129]                             if (!grepl(pattern, name)) 
[17:44:53.129]                               next
[17:44:53.129]                             invokeRestart(restart)
[17:44:53.129]                             muffled <- TRUE
[17:44:53.129]                             break
[17:44:53.129]                           }
[17:44:53.129]                         }
[17:44:53.129]                       }
[17:44:53.129]                       invisible(muffled)
[17:44:53.129]                     }
[17:44:53.129]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.129]                   }
[17:44:53.129]                 }
[17:44:53.129]             }
[17:44:53.129]         }))
[17:44:53.129]     }, error = function(ex) {
[17:44:53.129]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:53.129]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.129]                 ...future.rng), started = ...future.startTime, 
[17:44:53.129]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:53.129]             version = "1.8"), class = "FutureResult")
[17:44:53.129]     }, finally = {
[17:44:53.129]         if (!identical(...future.workdir, getwd())) 
[17:44:53.129]             setwd(...future.workdir)
[17:44:53.129]         {
[17:44:53.129]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:53.129]                 ...future.oldOptions$nwarnings <- NULL
[17:44:53.129]             }
[17:44:53.129]             base::options(...future.oldOptions)
[17:44:53.129]             if (.Platform$OS.type == "windows") {
[17:44:53.129]                 old_names <- names(...future.oldEnvVars)
[17:44:53.129]                 envs <- base::Sys.getenv()
[17:44:53.129]                 names <- names(envs)
[17:44:53.129]                 common <- intersect(names, old_names)
[17:44:53.129]                 added <- setdiff(names, old_names)
[17:44:53.129]                 removed <- setdiff(old_names, names)
[17:44:53.129]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:53.129]                   envs[common]]
[17:44:53.129]                 NAMES <- toupper(changed)
[17:44:53.129]                 args <- list()
[17:44:53.129]                 for (kk in seq_along(NAMES)) {
[17:44:53.129]                   name <- changed[[kk]]
[17:44:53.129]                   NAME <- NAMES[[kk]]
[17:44:53.129]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.129]                     next
[17:44:53.129]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.129]                 }
[17:44:53.129]                 NAMES <- toupper(added)
[17:44:53.129]                 for (kk in seq_along(NAMES)) {
[17:44:53.129]                   name <- added[[kk]]
[17:44:53.129]                   NAME <- NAMES[[kk]]
[17:44:53.129]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.129]                     next
[17:44:53.129]                   args[[name]] <- ""
[17:44:53.129]                 }
[17:44:53.129]                 NAMES <- toupper(removed)
[17:44:53.129]                 for (kk in seq_along(NAMES)) {
[17:44:53.129]                   name <- removed[[kk]]
[17:44:53.129]                   NAME <- NAMES[[kk]]
[17:44:53.129]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.129]                     next
[17:44:53.129]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.129]                 }
[17:44:53.129]                 if (length(args) > 0) 
[17:44:53.129]                   base::do.call(base::Sys.setenv, args = args)
[17:44:53.129]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:53.129]             }
[17:44:53.129]             else {
[17:44:53.129]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:53.129]             }
[17:44:53.129]             {
[17:44:53.129]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:53.129]                   0L) {
[17:44:53.129]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:53.129]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:53.129]                   base::options(opts)
[17:44:53.129]                 }
[17:44:53.129]                 {
[17:44:53.129]                   {
[17:44:53.129]                     base::assign(".Random.seed", c(10403L, 6L, 
[17:44:53.129]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[17:44:53.129]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[17:44:53.129]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[17:44:53.129]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[17:44:53.129]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[17:44:53.129]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[17:44:53.129]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[17:44:53.129]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[17:44:53.129]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[17:44:53.129]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[17:44:53.129]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[17:44:53.129]                     -1512233174L, -1985955764L, -425390065L, 
[17:44:53.129]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[17:44:53.129]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[17:44:53.129]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[17:44:53.129]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[17:44:53.129]                     1818328109L, -1284085436L, -1981489558L, 
[17:44:53.129]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[17:44:53.129]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[17:44:53.129]                     -1718567047L, -793788661L, -1133789126L, 
[17:44:53.129]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[17:44:53.129]                     -1823521982L, -1345991523L, -1672661737L, 
[17:44:53.129]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[17:44:53.129]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[17:44:53.129]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[17:44:53.129]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[17:44:53.129]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[17:44:53.129]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[17:44:53.129]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[17:44:53.129]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[17:44:53.129]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[17:44:53.129]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[17:44:53.129]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[17:44:53.129]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[17:44:53.129]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[17:44:53.129]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[17:44:53.129]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[17:44:53.129]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[17:44:53.129]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[17:44:53.129]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[17:44:53.129]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[17:44:53.129]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[17:44:53.129]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[17:44:53.129]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[17:44:53.129]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[17:44:53.129]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[17:44:53.129]                     -1119334354L, -1521015416L, -2041922421L, 
[17:44:53.129]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[17:44:53.129]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[17:44:53.129]                     1232111981L, -1801753084L, -1608606422L, 
[17:44:53.129]                     -1172096363L, 1420874031L, -1210473418L, 
[17:44:53.129]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[17:44:53.129]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[17:44:53.129]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[17:44:53.129]                     679371266L, -591318819L, -104578089L, -172818754L, 
[17:44:53.129]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[17:44:53.129]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[17:44:53.129]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[17:44:53.129]                     -332493318L, -1978392251L, -1691039632L, 
[17:44:53.129]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[17:44:53.129]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[17:44:53.129]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[17:44:53.129]                     87560756L, -87565624L, 426345146L, -699970416L, 
[17:44:53.129]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[17:44:53.129]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[17:44:53.129]                     -1178330196L, -687617348L, -1701912078L, 
[17:44:53.129]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[17:44:53.129]                     -1345416048L, 1816730492L, -1570431212L, 
[17:44:53.129]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[17:44:53.129]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[17:44:53.129]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[17:44:53.129]                     -1493184262L, -1943836976L, -590788308L, 
[17:44:53.129]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[17:44:53.129]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[17:44:53.129]                     1274857340L, -1205842638L, -1938479504L, 
[17:44:53.129]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[17:44:53.129]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[17:44:53.129]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[17:44:53.129]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[17:44:53.129]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[17:44:53.129]                     -1460751252L, 1201879444L, -1459788718L, 
[17:44:53.129]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[17:44:53.129]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[17:44:53.129]                     -420945808L, -1997735900L, -1838404552L, 
[17:44:53.129]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[17:44:53.129]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[17:44:53.129]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[17:44:53.129]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[17:44:53.129]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[17:44:53.129]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[17:44:53.129]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[17:44:53.129]                     942193650L, 751741680L, 689743428L, -18455976L, 
[17:44:53.129]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[17:44:53.129]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[17:44:53.129]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[17:44:53.129]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[17:44:53.129]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[17:44:53.129]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[17:44:53.129]                     -1357570110L, 1896595240L, -2066952276L, 
[17:44:53.129]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[17:44:53.129]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[17:44:53.129]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[17:44:53.129]                     769655120L, 236357794L, 181393736L, -13334772L, 
[17:44:53.129]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[17:44:53.129]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[17:44:53.129]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[17:44:53.129]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[17:44:53.129]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[17:44:53.129]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[17:44:53.129]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[17:44:53.129]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[17:44:53.129]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[17:44:53.129]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[17:44:53.129]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[17:44:53.129]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[17:44:53.129]                     -1365842884L, -438961294L, -1851472272L, 
[17:44:53.129]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[17:44:53.129]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[17:44:53.129]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[17:44:53.129]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[17:44:53.129]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[17:44:53.129]                     -594809770L, -2146766621L, -2013964635L, 
[17:44:53.129]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[17:44:53.129]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[17:44:53.129]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[17:44:53.129]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[17:44:53.129]                     -1426021878L, -1285634264L, 1507547537L, 
[17:44:53.129]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[17:44:53.129]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[17:44:53.129]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[17:44:53.129]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[17:44:53.129]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[17:44:53.129]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[17:44:53.129]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[17:44:53.129]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[17:44:53.129]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[17:44:53.129]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[17:44:53.129]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[17:44:53.129]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[17:44:53.129]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[17:44:53.129]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[17:44:53.129]                     -1604604761L, 1421229008L, -1268333714L, 
[17:44:53.129]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[17:44:53.129]                     -2070476623L, -2099222749L, 1141171236L, 
[17:44:53.129]                     -146426158L, -1797385433L, -1129376399L, 
[17:44:53.129]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[17:44:53.129]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[17:44:53.129]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[17:44:53.129]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[17:44:53.129]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[17:44:53.129]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[17:44:53.129]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[17:44:53.129]                     -1092079724L, -1765622238L, -1882554057L, 
[17:44:53.129]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[17:44:53.129]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[17:44:53.129]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[17:44:53.129]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[17:44:53.129]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[17:44:53.129]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[17:44:53.129]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[17:44:53.129]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[17:44:53.129]                     865377681L, -1127426242L), envir = base::globalenv(), 
[17:44:53.129]                       inherits = FALSE)
[17:44:53.129]                     NULL
[17:44:53.129]                   }
[17:44:53.129]                   options(future.plan = NULL)
[17:44:53.129]                   if (is.na(NA_character_)) 
[17:44:53.129]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.129]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:53.129]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:53.129]                     .init = FALSE)
[17:44:53.129]                 }
[17:44:53.129]             }
[17:44:53.129]         }
[17:44:53.129]     })
[17:44:53.129]     if (TRUE) {
[17:44:53.129]         base::sink(type = "output", split = FALSE)
[17:44:53.129]         if (TRUE) {
[17:44:53.129]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:53.129]         }
[17:44:53.129]         else {
[17:44:53.129]             ...future.result["stdout"] <- base::list(NULL)
[17:44:53.129]         }
[17:44:53.129]         base::close(...future.stdout)
[17:44:53.129]         ...future.stdout <- NULL
[17:44:53.129]     }
[17:44:53.129]     ...future.result$conditions <- ...future.conditions
[17:44:53.129]     ...future.result$finished <- base::Sys.time()
[17:44:53.129]     ...future.result
[17:44:53.129] }
[17:44:53.132] assign_globals() ...
[17:44:53.132] List of 5
[17:44:53.132]  $ ...future.FUN            :function (...)  
[17:44:53.132]  $ future.call.arguments    : list()
[17:44:53.132]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.132]  $ ...future.elements_ii    :List of 5
[17:44:53.132]   ..$ : int 0
[17:44:53.132]   ..$ : int 0
[17:44:53.132]   ..$ : int 0
[17:44:53.132]   ..$ : int 0
[17:44:53.132]   ..$ : int 0
[17:44:53.132]  $ ...future.seeds_ii       :List of 5
[17:44:53.132]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[17:44:53.132]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[17:44:53.132]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[17:44:53.132]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[17:44:53.132]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[17:44:53.132]  $ ...future.globals.maxSize: NULL
[17:44:53.132]  - attr(*, "where")=List of 5
[17:44:53.132]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:44:53.132]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:44:53.132]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:44:53.132]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:44:53.132]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:44:53.132]  - attr(*, "resolved")= logi FALSE
[17:44:53.132]  - attr(*, "total_size")= num 616
[17:44:53.132]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.132]  - attr(*, "already-done")= logi TRUE
[17:44:53.140] - reassign environment for ‘...future.FUN’
[17:44:53.141] - copied ‘...future.FUN’ to environment
[17:44:53.141] - copied ‘future.call.arguments’ to environment
[17:44:53.141] - copied ‘...future.elements_ii’ to environment
[17:44:53.141] - copied ‘...future.seeds_ii’ to environment
[17:44:53.141] - copied ‘...future.globals.maxSize’ to environment
[17:44:53.141] assign_globals() ... done
[17:44:53.141] plan(): Setting new future strategy stack:
[17:44:53.141] List of future strategies:
[17:44:53.141] 1. sequential:
[17:44:53.141]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.141]    - tweaked: FALSE
[17:44:53.141]    - call: NULL
[17:44:53.142] plan(): nbrOfWorkers() = 1
[17:44:53.143] plan(): Setting new future strategy stack:
[17:44:53.143] List of future strategies:
[17:44:53.143] 1. sequential:
[17:44:53.143]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.143]    - tweaked: FALSE
[17:44:53.143]    - call: plan(strategy)
[17:44:53.143] plan(): nbrOfWorkers() = 1
[17:44:53.143] SequentialFuture started (and completed)
[17:44:53.143] - Launch lazy future ... done
[17:44:53.143] run() for ‘SequentialFuture’ ... done
[17:44:53.144] Created future:
[17:44:53.144] SequentialFuture:
[17:44:53.144] Label: ‘future_replicate-1’
[17:44:53.144] Expression:
[17:44:53.144] {
[17:44:53.144]     do.call(function(...) {
[17:44:53.144]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.144]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.144]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.144]             on.exit(options(oopts), add = TRUE)
[17:44:53.144]         }
[17:44:53.144]         {
[17:44:53.144]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.144]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.144]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.144]                   envir = globalenv(), inherits = FALSE)
[17:44:53.144]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.144]             })
[17:44:53.144]         }
[17:44:53.144]     }, args = future.call.arguments)
[17:44:53.144] }
[17:44:53.144] Lazy evaluation: FALSE
[17:44:53.144] Asynchronous evaluation: FALSE
[17:44:53.144] Local evaluation: TRUE
[17:44:53.144] Environment: R_GlobalEnv
[17:44:53.144] Capture standard output: TRUE
[17:44:53.144] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:53.144] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:53.144] Packages: <none>
[17:44:53.144] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:53.144] Resolved: TRUE
[17:44:53.144] Value: 280 bytes of class ‘list’
[17:44:53.144] Early signaling: FALSE
[17:44:53.144] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:53.144] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:44:53.145] Chunk #1 of 1 ... DONE
[17:44:53.145] Launching 1 futures (chunks) ... DONE
[17:44:53.145] Resolving 1 futures (chunks) ...
[17:44:53.145] resolve() on list ...
[17:44:53.145]  recursive: 0
[17:44:53.145]  length: 1
[17:44:53.145] 
[17:44:53.145] resolved() for ‘SequentialFuture’ ...
[17:44:53.145] - state: ‘finished’
[17:44:53.145] - run: TRUE
[17:44:53.146] - result: ‘FutureResult’
[17:44:53.146] resolved() for ‘SequentialFuture’ ... done
[17:44:53.146] Future #1
[17:44:53.146] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:44:53.146] - nx: 1
[17:44:53.146] - relay: TRUE
[17:44:53.146] - stdout: TRUE
[17:44:53.146] - signal: TRUE
[17:44:53.146] - resignal: FALSE
[17:44:53.146] - force: TRUE
[17:44:53.146] - relayed: [n=1] FALSE
[17:44:53.147] - queued futures: [n=1] FALSE
[17:44:53.147]  - until=1
[17:44:53.147]  - relaying element #1
[17:44:53.147] - relayed: [n=1] TRUE
[17:44:53.147] - queued futures: [n=1] TRUE
[17:44:53.147] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:44:53.147]  length: 0 (resolved future 1)
[17:44:53.147] Relaying remaining futures
[17:44:53.147] signalConditionsASAP(NULL, pos=0) ...
[17:44:53.147] - nx: 1
[17:44:53.148] - relay: TRUE
[17:44:53.148] - stdout: TRUE
[17:44:53.148] - signal: TRUE
[17:44:53.148] - resignal: FALSE
[17:44:53.148] - force: TRUE
[17:44:53.148] - relayed: [n=1] TRUE
[17:44:53.148] - queued futures: [n=1] TRUE
 - flush all
[17:44:53.148] - relayed: [n=1] TRUE
[17:44:53.148] - queued futures: [n=1] TRUE
[17:44:53.148] signalConditionsASAP(NULL, pos=0) ... done
[17:44:53.148] resolve() on list ... DONE
[17:44:53.149]  - Number of value chunks collected: 1
[17:44:53.149] Resolving 1 futures (chunks) ... DONE
[17:44:53.149] Reducing values from 1 chunks ...
[17:44:53.149]  - Number of values collected after concatenation: 5
[17:44:53.149]  - Number of values expected: 5
[17:44:53.149] Reducing values from 1 chunks ... DONE
[17:44:53.149] future_lapply() ... DONE
- example(replicate) ...
[17:44:53.149] future_lapply() ...
[17:44:53.150] Generating random seeds ...
[17:44:53.150] Generating random seed streams for 5 elements ...
[17:44:53.150] Generating random seed streams for 5 elements ... DONE
[17:44:53.150] Generating random seeds ... DONE
[17:44:53.150] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:44:53.151] Number of chunks: 1
[17:44:53.151] getGlobalsAndPackagesXApply() ...
[17:44:53.151]  - future.globals: TRUE
[17:44:53.151] getGlobalsAndPackages() ...
[17:44:53.151] Searching for globals...
[17:44:53.153] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[17:44:53.153] Searching for globals ... DONE
[17:44:53.153] Resolving globals: FALSE
[17:44:53.153] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[17:44:53.154] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[17:44:53.154] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[17:44:53.154] 
[17:44:53.154] getGlobalsAndPackages() ... DONE
[17:44:53.154]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[17:44:53.154]  - needed namespaces: [n=0] 
[17:44:53.154] Finding globals ... DONE
[17:44:53.154]  - use_args: TRUE
[17:44:53.155]  - Getting '...' globals ...
[17:44:53.155] resolve() on list ...
[17:44:53.155]  recursive: 0
[17:44:53.155]  length: 1
[17:44:53.155]  elements: ‘...’
[17:44:53.155]  length: 0 (resolved future 1)
[17:44:53.155] resolve() on list ... DONE
[17:44:53.155]    - '...' content: [n=0] 
[17:44:53.156] List of 1
[17:44:53.156]  $ ...: list()
[17:44:53.156]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.156]  - attr(*, "where")=List of 1
[17:44:53.156]   ..$ ...:<environment: 0x5583875d6878> 
[17:44:53.156]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.156]  - attr(*, "resolved")= logi TRUE
[17:44:53.156]  - attr(*, "total_size")= num NA
[17:44:53.158]  - Getting '...' globals ... DONE
[17:44:53.158] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[17:44:53.158] List of 4
[17:44:53.158]  $ ...future.FUN:function (...)  
[17:44:53.158]  $ foo          :function (x = 1, y = 2)  
[17:44:53.158]  $ x            : num 3
[17:44:53.158]  $ ...          : list()
[17:44:53.158]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.158]  - attr(*, "where")=List of 4
[17:44:53.158]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:44:53.158]   ..$ foo          :<environment: R_EmptyEnv> 
[17:44:53.158]   ..$ x            :<environment: R_EmptyEnv> 
[17:44:53.158]   ..$ ...          :<environment: 0x5583875d6878> 
[17:44:53.158]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.158]  - attr(*, "resolved")= logi FALSE
[17:44:53.158]  - attr(*, "total_size")= num 2200
[17:44:53.162] Packages to be attached in all futures: [n=0] 
[17:44:53.162] getGlobalsAndPackagesXApply() ... DONE
[17:44:53.162] Number of futures (= number of chunks): 1
[17:44:53.162] Launching 1 futures (chunks) ...
[17:44:53.162] Chunk #1 of 1 ...
[17:44:53.162]  - Finding globals in 'X' for chunk #1 ...
[17:44:53.162] getGlobalsAndPackages() ...
[17:44:53.164] Searching for globals...
[17:44:53.164] 
[17:44:53.164] Searching for globals ... DONE
[17:44:53.164] - globals: [0] <none>
[17:44:53.164] getGlobalsAndPackages() ... DONE
[17:44:53.164]    + additional globals found: [n=0] 
[17:44:53.164]    + additional namespaces needed: [n=0] 
[17:44:53.165]  - Finding globals in 'X' for chunk #1 ... DONE
[17:44:53.165]  - seeds: [5] <seeds>
[17:44:53.165]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.165] getGlobalsAndPackages() ...
[17:44:53.165] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.165] Resolving globals: FALSE
[17:44:53.165] Tweak future expression to call with '...' arguments ...
[17:44:53.165] {
[17:44:53.165]     do.call(function(...) {
[17:44:53.165]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.165]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.165]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.165]             on.exit(options(oopts), add = TRUE)
[17:44:53.165]         }
[17:44:53.165]         {
[17:44:53.165]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.165]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.165]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.165]                   envir = globalenv(), inherits = FALSE)
[17:44:53.165]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.165]             })
[17:44:53.165]         }
[17:44:53.165]     }, args = future.call.arguments)
[17:44:53.165] }
[17:44:53.166] Tweak future expression to call with '...' arguments ... DONE
[17:44:53.166] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.166] 
[17:44:53.166] getGlobalsAndPackages() ... DONE
[17:44:53.166] run() for ‘Future’ ...
[17:44:53.166] - state: ‘created’
[17:44:53.167] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:44:53.167] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:44:53.167] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:44:53.167]   - Field: ‘label’
[17:44:53.167]   - Field: ‘local’
[17:44:53.167]   - Field: ‘owner’
[17:44:53.167]   - Field: ‘envir’
[17:44:53.167]   - Field: ‘packages’
[17:44:53.168]   - Field: ‘gc’
[17:44:53.168]   - Field: ‘conditions’
[17:44:53.168]   - Field: ‘expr’
[17:44:53.168]   - Field: ‘uuid’
[17:44:53.168]   - Field: ‘seed’
[17:44:53.168]   - Field: ‘version’
[17:44:53.168]   - Field: ‘result’
[17:44:53.168]   - Field: ‘asynchronous’
[17:44:53.168]   - Field: ‘calls’
[17:44:53.168]   - Field: ‘globals’
[17:44:53.168]   - Field: ‘stdout’
[17:44:53.169]   - Field: ‘earlySignal’
[17:44:53.169]   - Field: ‘lazy’
[17:44:53.169]   - Field: ‘state’
[17:44:53.169] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:44:53.169] - Launch lazy future ...
[17:44:53.169] Packages needed by the future expression (n = 0): <none>
[17:44:53.169] Packages needed by future strategies (n = 0): <none>
[17:44:53.170] {
[17:44:53.170]     {
[17:44:53.170]         {
[17:44:53.170]             ...future.startTime <- base::Sys.time()
[17:44:53.170]             {
[17:44:53.170]                 {
[17:44:53.170]                   {
[17:44:53.170]                     base::local({
[17:44:53.170]                       has_future <- base::requireNamespace("future", 
[17:44:53.170]                         quietly = TRUE)
[17:44:53.170]                       if (has_future) {
[17:44:53.170]                         ns <- base::getNamespace("future")
[17:44:53.170]                         version <- ns[[".package"]][["version"]]
[17:44:53.170]                         if (is.null(version)) 
[17:44:53.170]                           version <- utils::packageVersion("future")
[17:44:53.170]                       }
[17:44:53.170]                       else {
[17:44:53.170]                         version <- NULL
[17:44:53.170]                       }
[17:44:53.170]                       if (!has_future || version < "1.8.0") {
[17:44:53.170]                         info <- base::c(r_version = base::gsub("R version ", 
[17:44:53.170]                           "", base::R.version$version.string), 
[17:44:53.170]                           platform = base::sprintf("%s (%s-bit)", 
[17:44:53.170]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:53.170]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:53.170]                             "release", "version")], collapse = " "), 
[17:44:53.170]                           hostname = base::Sys.info()[["nodename"]])
[17:44:53.170]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:44:53.170]                           info)
[17:44:53.170]                         info <- base::paste(info, collapse = "; ")
[17:44:53.170]                         if (!has_future) {
[17:44:53.170]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:53.170]                             info)
[17:44:53.170]                         }
[17:44:53.170]                         else {
[17:44:53.170]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:53.170]                             info, version)
[17:44:53.170]                         }
[17:44:53.170]                         base::stop(msg)
[17:44:53.170]                       }
[17:44:53.170]                     })
[17:44:53.170]                   }
[17:44:53.170]                   ...future.strategy.old <- future::plan("list")
[17:44:53.170]                   options(future.plan = NULL)
[17:44:53.170]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.170]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:53.170]                 }
[17:44:53.170]                 ...future.workdir <- getwd()
[17:44:53.170]             }
[17:44:53.170]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:53.170]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:53.170]         }
[17:44:53.170]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:53.170]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:53.170]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:53.170]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:53.170]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:53.170]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:53.170]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:53.170]             base::names(...future.oldOptions))
[17:44:53.170]     }
[17:44:53.170]     if (FALSE) {
[17:44:53.170]     }
[17:44:53.170]     else {
[17:44:53.170]         if (TRUE) {
[17:44:53.170]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:53.170]                 open = "w")
[17:44:53.170]         }
[17:44:53.170]         else {
[17:44:53.170]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:53.170]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:53.170]         }
[17:44:53.170]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:53.170]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:53.170]             base::sink(type = "output", split = FALSE)
[17:44:53.170]             base::close(...future.stdout)
[17:44:53.170]         }, add = TRUE)
[17:44:53.170]     }
[17:44:53.170]     ...future.frame <- base::sys.nframe()
[17:44:53.170]     ...future.conditions <- base::list()
[17:44:53.170]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:53.170]     if (FALSE) {
[17:44:53.170]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:53.170]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:53.170]     }
[17:44:53.170]     ...future.result <- base::tryCatch({
[17:44:53.170]         base::withCallingHandlers({
[17:44:53.170]             ...future.value <- base::withVisible(base::local({
[17:44:53.170]                 do.call(function(...) {
[17:44:53.170]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.170]                   if (!identical(...future.globals.maxSize.org, 
[17:44:53.170]                     ...future.globals.maxSize)) {
[17:44:53.170]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.170]                     on.exit(options(oopts), add = TRUE)
[17:44:53.170]                   }
[17:44:53.170]                   {
[17:44:53.170]                     lapply(seq_along(...future.elements_ii), 
[17:44:53.170]                       FUN = function(jj) {
[17:44:53.170]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.170]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.170]                           envir = globalenv(), inherits = FALSE)
[17:44:53.170]                         ...future.FUN(...future.X_jj, ...)
[17:44:53.170]                       })
[17:44:53.170]                   }
[17:44:53.170]                 }, args = future.call.arguments)
[17:44:53.170]             }))
[17:44:53.170]             future::FutureResult(value = ...future.value$value, 
[17:44:53.170]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.170]                   ...future.rng), globalenv = if (FALSE) 
[17:44:53.170]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:53.170]                     ...future.globalenv.names))
[17:44:53.170]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:53.170]         }, condition = base::local({
[17:44:53.170]             c <- base::c
[17:44:53.170]             inherits <- base::inherits
[17:44:53.170]             invokeRestart <- base::invokeRestart
[17:44:53.170]             length <- base::length
[17:44:53.170]             list <- base::list
[17:44:53.170]             seq.int <- base::seq.int
[17:44:53.170]             signalCondition <- base::signalCondition
[17:44:53.170]             sys.calls <- base::sys.calls
[17:44:53.170]             `[[` <- base::`[[`
[17:44:53.170]             `+` <- base::`+`
[17:44:53.170]             `<<-` <- base::`<<-`
[17:44:53.170]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:53.170]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:53.170]                   3L)]
[17:44:53.170]             }
[17:44:53.170]             function(cond) {
[17:44:53.170]                 is_error <- inherits(cond, "error")
[17:44:53.170]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:53.170]                   NULL)
[17:44:53.170]                 if (is_error) {
[17:44:53.170]                   sessionInformation <- function() {
[17:44:53.170]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:53.170]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:53.170]                       search = base::search(), system = base::Sys.info())
[17:44:53.170]                   }
[17:44:53.170]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.170]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:53.170]                     cond$call), session = sessionInformation(), 
[17:44:53.170]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:53.170]                   signalCondition(cond)
[17:44:53.170]                 }
[17:44:53.170]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:53.170]                 "immediateCondition"))) {
[17:44:53.170]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:53.170]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.170]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:53.170]                   if (TRUE && !signal) {
[17:44:53.170]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.170]                     {
[17:44:53.170]                       inherits <- base::inherits
[17:44:53.170]                       invokeRestart <- base::invokeRestart
[17:44:53.170]                       is.null <- base::is.null
[17:44:53.170]                       muffled <- FALSE
[17:44:53.170]                       if (inherits(cond, "message")) {
[17:44:53.170]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.170]                         if (muffled) 
[17:44:53.170]                           invokeRestart("muffleMessage")
[17:44:53.170]                       }
[17:44:53.170]                       else if (inherits(cond, "warning")) {
[17:44:53.170]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.170]                         if (muffled) 
[17:44:53.170]                           invokeRestart("muffleWarning")
[17:44:53.170]                       }
[17:44:53.170]                       else if (inherits(cond, "condition")) {
[17:44:53.170]                         if (!is.null(pattern)) {
[17:44:53.170]                           computeRestarts <- base::computeRestarts
[17:44:53.170]                           grepl <- base::grepl
[17:44:53.170]                           restarts <- computeRestarts(cond)
[17:44:53.170]                           for (restart in restarts) {
[17:44:53.170]                             name <- restart$name
[17:44:53.170]                             if (is.null(name)) 
[17:44:53.170]                               next
[17:44:53.170]                             if (!grepl(pattern, name)) 
[17:44:53.170]                               next
[17:44:53.170]                             invokeRestart(restart)
[17:44:53.170]                             muffled <- TRUE
[17:44:53.170]                             break
[17:44:53.170]                           }
[17:44:53.170]                         }
[17:44:53.170]                       }
[17:44:53.170]                       invisible(muffled)
[17:44:53.170]                     }
[17:44:53.170]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.170]                   }
[17:44:53.170]                 }
[17:44:53.170]                 else {
[17:44:53.170]                   if (TRUE) {
[17:44:53.170]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.170]                     {
[17:44:53.170]                       inherits <- base::inherits
[17:44:53.170]                       invokeRestart <- base::invokeRestart
[17:44:53.170]                       is.null <- base::is.null
[17:44:53.170]                       muffled <- FALSE
[17:44:53.170]                       if (inherits(cond, "message")) {
[17:44:53.170]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.170]                         if (muffled) 
[17:44:53.170]                           invokeRestart("muffleMessage")
[17:44:53.170]                       }
[17:44:53.170]                       else if (inherits(cond, "warning")) {
[17:44:53.170]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.170]                         if (muffled) 
[17:44:53.170]                           invokeRestart("muffleWarning")
[17:44:53.170]                       }
[17:44:53.170]                       else if (inherits(cond, "condition")) {
[17:44:53.170]                         if (!is.null(pattern)) {
[17:44:53.170]                           computeRestarts <- base::computeRestarts
[17:44:53.170]                           grepl <- base::grepl
[17:44:53.170]                           restarts <- computeRestarts(cond)
[17:44:53.170]                           for (restart in restarts) {
[17:44:53.170]                             name <- restart$name
[17:44:53.170]                             if (is.null(name)) 
[17:44:53.170]                               next
[17:44:53.170]                             if (!grepl(pattern, name)) 
[17:44:53.170]                               next
[17:44:53.170]                             invokeRestart(restart)
[17:44:53.170]                             muffled <- TRUE
[17:44:53.170]                             break
[17:44:53.170]                           }
[17:44:53.170]                         }
[17:44:53.170]                       }
[17:44:53.170]                       invisible(muffled)
[17:44:53.170]                     }
[17:44:53.170]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.170]                   }
[17:44:53.170]                 }
[17:44:53.170]             }
[17:44:53.170]         }))
[17:44:53.170]     }, error = function(ex) {
[17:44:53.170]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:53.170]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.170]                 ...future.rng), started = ...future.startTime, 
[17:44:53.170]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:53.170]             version = "1.8"), class = "FutureResult")
[17:44:53.170]     }, finally = {
[17:44:53.170]         if (!identical(...future.workdir, getwd())) 
[17:44:53.170]             setwd(...future.workdir)
[17:44:53.170]         {
[17:44:53.170]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:53.170]                 ...future.oldOptions$nwarnings <- NULL
[17:44:53.170]             }
[17:44:53.170]             base::options(...future.oldOptions)
[17:44:53.170]             if (.Platform$OS.type == "windows") {
[17:44:53.170]                 old_names <- names(...future.oldEnvVars)
[17:44:53.170]                 envs <- base::Sys.getenv()
[17:44:53.170]                 names <- names(envs)
[17:44:53.170]                 common <- intersect(names, old_names)
[17:44:53.170]                 added <- setdiff(names, old_names)
[17:44:53.170]                 removed <- setdiff(old_names, names)
[17:44:53.170]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:53.170]                   envs[common]]
[17:44:53.170]                 NAMES <- toupper(changed)
[17:44:53.170]                 args <- list()
[17:44:53.170]                 for (kk in seq_along(NAMES)) {
[17:44:53.170]                   name <- changed[[kk]]
[17:44:53.170]                   NAME <- NAMES[[kk]]
[17:44:53.170]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.170]                     next
[17:44:53.170]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.170]                 }
[17:44:53.170]                 NAMES <- toupper(added)
[17:44:53.170]                 for (kk in seq_along(NAMES)) {
[17:44:53.170]                   name <- added[[kk]]
[17:44:53.170]                   NAME <- NAMES[[kk]]
[17:44:53.170]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.170]                     next
[17:44:53.170]                   args[[name]] <- ""
[17:44:53.170]                 }
[17:44:53.170]                 NAMES <- toupper(removed)
[17:44:53.170]                 for (kk in seq_along(NAMES)) {
[17:44:53.170]                   name <- removed[[kk]]
[17:44:53.170]                   NAME <- NAMES[[kk]]
[17:44:53.170]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.170]                     next
[17:44:53.170]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.170]                 }
[17:44:53.170]                 if (length(args) > 0) 
[17:44:53.170]                   base::do.call(base::Sys.setenv, args = args)
[17:44:53.170]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:53.170]             }
[17:44:53.170]             else {
[17:44:53.170]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:53.170]             }
[17:44:53.170]             {
[17:44:53.170]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:53.170]                   0L) {
[17:44:53.170]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:53.170]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:53.170]                   base::options(opts)
[17:44:53.170]                 }
[17:44:53.170]                 {
[17:44:53.170]                   {
[17:44:53.170]                     base::assign(".Random.seed", c(10403L, 8L, 
[17:44:53.170]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[17:44:53.170]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[17:44:53.170]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[17:44:53.170]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[17:44:53.170]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[17:44:53.170]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[17:44:53.170]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[17:44:53.170]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[17:44:53.170]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[17:44:53.170]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[17:44:53.170]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[17:44:53.170]                     -1512233174L, -1985955764L, -425390065L, 
[17:44:53.170]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[17:44:53.170]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[17:44:53.170]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[17:44:53.170]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[17:44:53.170]                     1818328109L, -1284085436L, -1981489558L, 
[17:44:53.170]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[17:44:53.170]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[17:44:53.170]                     -1718567047L, -793788661L, -1133789126L, 
[17:44:53.170]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[17:44:53.170]                     -1823521982L, -1345991523L, -1672661737L, 
[17:44:53.170]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[17:44:53.170]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[17:44:53.170]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[17:44:53.170]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[17:44:53.170]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[17:44:53.170]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[17:44:53.170]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[17:44:53.170]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[17:44:53.170]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[17:44:53.170]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[17:44:53.170]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[17:44:53.170]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[17:44:53.170]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[17:44:53.170]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[17:44:53.170]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[17:44:53.170]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[17:44:53.170]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[17:44:53.170]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[17:44:53.170]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[17:44:53.170]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[17:44:53.170]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[17:44:53.170]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[17:44:53.170]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[17:44:53.170]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[17:44:53.170]                     -1119334354L, -1521015416L, -2041922421L, 
[17:44:53.170]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[17:44:53.170]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[17:44:53.170]                     1232111981L, -1801753084L, -1608606422L, 
[17:44:53.170]                     -1172096363L, 1420874031L, -1210473418L, 
[17:44:53.170]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[17:44:53.170]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[17:44:53.170]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[17:44:53.170]                     679371266L, -591318819L, -104578089L, -172818754L, 
[17:44:53.170]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[17:44:53.170]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[17:44:53.170]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[17:44:53.170]                     -332493318L, -1978392251L, -1691039632L, 
[17:44:53.170]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[17:44:53.170]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[17:44:53.170]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[17:44:53.170]                     87560756L, -87565624L, 426345146L, -699970416L, 
[17:44:53.170]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[17:44:53.170]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[17:44:53.170]                     -1178330196L, -687617348L, -1701912078L, 
[17:44:53.170]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[17:44:53.170]                     -1345416048L, 1816730492L, -1570431212L, 
[17:44:53.170]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[17:44:53.170]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[17:44:53.170]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[17:44:53.170]                     -1493184262L, -1943836976L, -590788308L, 
[17:44:53.170]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[17:44:53.170]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[17:44:53.170]                     1274857340L, -1205842638L, -1938479504L, 
[17:44:53.170]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[17:44:53.170]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[17:44:53.170]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[17:44:53.170]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[17:44:53.170]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[17:44:53.170]                     -1460751252L, 1201879444L, -1459788718L, 
[17:44:53.170]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[17:44:53.170]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[17:44:53.170]                     -420945808L, -1997735900L, -1838404552L, 
[17:44:53.170]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[17:44:53.170]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[17:44:53.170]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[17:44:53.170]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[17:44:53.170]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[17:44:53.170]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[17:44:53.170]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[17:44:53.170]                     942193650L, 751741680L, 689743428L, -18455976L, 
[17:44:53.170]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[17:44:53.170]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[17:44:53.170]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[17:44:53.170]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[17:44:53.170]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[17:44:53.170]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[17:44:53.170]                     -1357570110L, 1896595240L, -2066952276L, 
[17:44:53.170]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[17:44:53.170]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[17:44:53.170]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[17:44:53.170]                     769655120L, 236357794L, 181393736L, -13334772L, 
[17:44:53.170]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[17:44:53.170]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[17:44:53.170]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[17:44:53.170]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[17:44:53.170]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[17:44:53.170]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[17:44:53.170]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[17:44:53.170]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[17:44:53.170]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[17:44:53.170]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[17:44:53.170]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[17:44:53.170]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[17:44:53.170]                     -1365842884L, -438961294L, -1851472272L, 
[17:44:53.170]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[17:44:53.170]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[17:44:53.170]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[17:44:53.170]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[17:44:53.170]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[17:44:53.170]                     -594809770L, -2146766621L, -2013964635L, 
[17:44:53.170]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[17:44:53.170]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[17:44:53.170]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[17:44:53.170]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[17:44:53.170]                     -1426021878L, -1285634264L, 1507547537L, 
[17:44:53.170]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[17:44:53.170]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[17:44:53.170]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[17:44:53.170]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[17:44:53.170]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[17:44:53.170]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[17:44:53.170]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[17:44:53.170]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[17:44:53.170]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[17:44:53.170]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[17:44:53.170]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[17:44:53.170]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[17:44:53.170]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[17:44:53.170]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[17:44:53.170]                     -1604604761L, 1421229008L, -1268333714L, 
[17:44:53.170]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[17:44:53.170]                     -2070476623L, -2099222749L, 1141171236L, 
[17:44:53.170]                     -146426158L, -1797385433L, -1129376399L, 
[17:44:53.170]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[17:44:53.170]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[17:44:53.170]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[17:44:53.170]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[17:44:53.170]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[17:44:53.170]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[17:44:53.170]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[17:44:53.170]                     -1092079724L, -1765622238L, -1882554057L, 
[17:44:53.170]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[17:44:53.170]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[17:44:53.170]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[17:44:53.170]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[17:44:53.170]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[17:44:53.170]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[17:44:53.170]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[17:44:53.170]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[17:44:53.170]                     865377681L, -1127426242L), envir = base::globalenv(), 
[17:44:53.170]                       inherits = FALSE)
[17:44:53.170]                     NULL
[17:44:53.170]                   }
[17:44:53.170]                   options(future.plan = NULL)
[17:44:53.170]                   if (is.na(NA_character_)) 
[17:44:53.170]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.170]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:53.170]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:53.170]                     .init = FALSE)
[17:44:53.170]                 }
[17:44:53.170]             }
[17:44:53.170]         }
[17:44:53.170]     })
[17:44:53.170]     if (TRUE) {
[17:44:53.170]         base::sink(type = "output", split = FALSE)
[17:44:53.170]         if (TRUE) {
[17:44:53.170]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:53.170]         }
[17:44:53.170]         else {
[17:44:53.170]             ...future.result["stdout"] <- base::list(NULL)
[17:44:53.170]         }
[17:44:53.170]         base::close(...future.stdout)
[17:44:53.170]         ...future.stdout <- NULL
[17:44:53.170]     }
[17:44:53.170]     ...future.result$conditions <- ...future.conditions
[17:44:53.170]     ...future.result$finished <- base::Sys.time()
[17:44:53.170]     ...future.result
[17:44:53.170] }
[17:44:53.172] assign_globals() ...
[17:44:53.172] List of 7
[17:44:53.172]  $ ...future.FUN            :function (...)  
[17:44:53.172]  $ foo                      :function (x = 1, y = 2)  
[17:44:53.172]  $ x                        : num 3
[17:44:53.172]  $ future.call.arguments    : list()
[17:44:53.172]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.172]  $ ...future.elements_ii    :List of 5
[17:44:53.172]   ..$ : int 0
[17:44:53.172]   ..$ : int 0
[17:44:53.172]   ..$ : int 0
[17:44:53.172]   ..$ : int 0
[17:44:53.172]   ..$ : int 0
[17:44:53.172]  $ ...future.seeds_ii       :List of 5
[17:44:53.172]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[17:44:53.172]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[17:44:53.172]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[17:44:53.172]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[17:44:53.172]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[17:44:53.172]  $ ...future.globals.maxSize: NULL
[17:44:53.172]  - attr(*, "where")=List of 7
[17:44:53.172]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:44:53.172]   ..$ foo                      :<environment: R_EmptyEnv> 
[17:44:53.172]   ..$ x                        :<environment: R_EmptyEnv> 
[17:44:53.172]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:44:53.172]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:44:53.172]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:44:53.172]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:44:53.172]  - attr(*, "resolved")= logi FALSE
[17:44:53.172]  - attr(*, "total_size")= num 2200
[17:44:53.172]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.172]  - attr(*, "already-done")= logi TRUE
[17:44:53.180] - reassign environment for ‘...future.FUN’
[17:44:53.180] - copied ‘...future.FUN’ to environment
[17:44:53.180] - reassign environment for ‘foo’
[17:44:53.180] - copied ‘foo’ to environment
[17:44:53.180] - copied ‘x’ to environment
[17:44:53.180] - copied ‘future.call.arguments’ to environment
[17:44:53.181] - copied ‘...future.elements_ii’ to environment
[17:44:53.181] - copied ‘...future.seeds_ii’ to environment
[17:44:53.181] - copied ‘...future.globals.maxSize’ to environment
[17:44:53.181] assign_globals() ... done
[17:44:53.181] plan(): Setting new future strategy stack:
[17:44:53.181] List of future strategies:
[17:44:53.181] 1. sequential:
[17:44:53.181]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.181]    - tweaked: FALSE
[17:44:53.181]    - call: NULL
[17:44:53.182] plan(): nbrOfWorkers() = 1
[17:44:53.182] plan(): Setting new future strategy stack:
[17:44:53.182] List of future strategies:
[17:44:53.182] 1. sequential:
[17:44:53.182]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.182]    - tweaked: FALSE
[17:44:53.182]    - call: plan(strategy)
[17:44:53.183] plan(): nbrOfWorkers() = 1
[17:44:53.183] SequentialFuture started (and completed)
[17:44:53.183] - Launch lazy future ... done
[17:44:53.183] run() for ‘SequentialFuture’ ... done
[17:44:53.183] Created future:
[17:44:53.183] SequentialFuture:
[17:44:53.183] Label: ‘future_replicate-1’
[17:44:53.183] Expression:
[17:44:53.183] {
[17:44:53.183]     do.call(function(...) {
[17:44:53.183]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.183]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.183]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.183]             on.exit(options(oopts), add = TRUE)
[17:44:53.183]         }
[17:44:53.183]         {
[17:44:53.183]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.183]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.183]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.183]                   envir = globalenv(), inherits = FALSE)
[17:44:53.183]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.183]             })
[17:44:53.183]         }
[17:44:53.183]     }, args = future.call.arguments)
[17:44:53.183] }
[17:44:53.183] Lazy evaluation: FALSE
[17:44:53.183] Asynchronous evaluation: FALSE
[17:44:53.183] Local evaluation: TRUE
[17:44:53.183] Environment: 0x5583875d4418
[17:44:53.183] Capture standard output: TRUE
[17:44:53.183] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:53.183] Globals: 7 objects totaling 2.81 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, ...)
[17:44:53.183] Packages: <none>
[17:44:53.183] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:53.183] Resolved: TRUE
[17:44:53.183] Value: 320 bytes of class ‘list’
[17:44:53.183] Early signaling: FALSE
[17:44:53.183] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:53.183] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:44:53.185] Chunk #1 of 1 ... DONE
[17:44:53.185] Launching 1 futures (chunks) ... DONE
[17:44:53.185] Resolving 1 futures (chunks) ...
[17:44:53.185] resolve() on list ...
[17:44:53.185]  recursive: 0
[17:44:53.185]  length: 1
[17:44:53.185] 
[17:44:53.185] resolved() for ‘SequentialFuture’ ...
[17:44:53.185] - state: ‘finished’
[17:44:53.185] - run: TRUE
[17:44:53.185] - result: ‘FutureResult’
[17:44:53.186] resolved() for ‘SequentialFuture’ ... done
[17:44:53.186] Future #1
[17:44:53.186] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:44:53.186] - nx: 1
[17:44:53.186] - relay: TRUE
[17:44:53.186] - stdout: TRUE
[17:44:53.186] - signal: TRUE
[17:44:53.186] - resignal: FALSE
[17:44:53.186] - force: TRUE
[17:44:53.186] - relayed: [n=1] FALSE
[17:44:53.186] - queued futures: [n=1] FALSE
[17:44:53.186]  - until=1
[17:44:53.187]  - relaying element #1
[17:44:53.187] - relayed: [n=1] TRUE
[17:44:53.187] - queued futures: [n=1] TRUE
[17:44:53.187] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:44:53.187]  length: 0 (resolved future 1)
[17:44:53.187] Relaying remaining futures
[17:44:53.187] signalConditionsASAP(NULL, pos=0) ...
[17:44:53.187] - nx: 1
[17:44:53.187] - relay: TRUE
[17:44:53.187] - stdout: TRUE
[17:44:53.188] - signal: TRUE
[17:44:53.188] - resignal: FALSE
[17:44:53.188] - force: TRUE
[17:44:53.188] - relayed: [n=1] TRUE
[17:44:53.188] - queued futures: [n=1] TRUE
 - flush all
[17:44:53.188] - relayed: [n=1] TRUE
[17:44:53.190] - queued futures: [n=1] TRUE
[17:44:53.190] signalConditionsASAP(NULL, pos=0) ... done
[17:44:53.190] resolve() on list ... DONE
[17:44:53.190]  - Number of value chunks collected: 1
[17:44:53.190] Resolving 1 futures (chunks) ... DONE
[17:44:53.190] Reducing values from 1 chunks ...
[17:44:53.190]  - Number of values collected after concatenation: 5
[17:44:53.190]  - Number of values expected: 5
[17:44:53.190] Reducing values from 1 chunks ... DONE
[17:44:53.190] future_lapply() ... DONE
[17:44:53.191] plan(): Setting new future strategy stack:
[17:44:53.191] List of future strategies:
[17:44:53.191] 1. sequential:
[17:44:53.191]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.191]    - tweaked: FALSE
[17:44:53.191]    - call: plan(sequential)
[17:44:53.192] plan(): nbrOfWorkers() = 1
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[17:44:53.192] plan(): Setting new future strategy stack:
[17:44:53.192] List of future strategies:
[17:44:53.192] 1. multicore:
[17:44:53.192]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:53.192]    - tweaked: FALSE
[17:44:53.192]    - call: plan(strategy)
[17:44:53.196] plan(): nbrOfWorkers() = 2
[17:44:53.197] future_lapply() ...
[17:44:53.197] Generating random seeds ...
[17:44:53.197] Generating random seed streams for 5 elements ...
[17:44:53.197] Generating random seed streams for 5 elements ... DONE
[17:44:53.197] Generating random seeds ... DONE
[17:44:53.198] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:44:53.203] Number of chunks: 2
[17:44:53.203] getGlobalsAndPackagesXApply() ...
[17:44:53.203]  - future.globals: TRUE
[17:44:53.203] getGlobalsAndPackages() ...
[17:44:53.203] Searching for globals...
[17:44:53.204] - globals found: [2] ‘FUN’, ‘sample’
[17:44:53.204] Searching for globals ... DONE
[17:44:53.204] Resolving globals: FALSE
[17:44:53.205] The total size of the 1 globals is 616 bytes (616 bytes)
[17:44:53.205] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:44:53.205] - globals: [1] ‘FUN’
[17:44:53.205] 
[17:44:53.205] getGlobalsAndPackages() ... DONE
[17:44:53.206]  - globals found/used: [n=1] ‘FUN’
[17:44:53.206]  - needed namespaces: [n=0] 
[17:44:53.206] Finding globals ... DONE
[17:44:53.206]  - use_args: TRUE
[17:44:53.206]  - Getting '...' globals ...
[17:44:53.206] resolve() on list ...
[17:44:53.206]  recursive: 0
[17:44:53.206]  length: 1
[17:44:53.206]  elements: ‘...’
[17:44:53.207]  length: 0 (resolved future 1)
[17:44:53.207] resolve() on list ... DONE
[17:44:53.207]    - '...' content: [n=0] 
[17:44:53.207] List of 1
[17:44:53.207]  $ ...: list()
[17:44:53.207]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.207]  - attr(*, "where")=List of 1
[17:44:53.207]   ..$ ...:<environment: 0x558386313138> 
[17:44:53.207]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.207]  - attr(*, "resolved")= logi TRUE
[17:44:53.207]  - attr(*, "total_size")= num NA
[17:44:53.209]  - Getting '...' globals ... DONE
[17:44:53.209] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:44:53.210] List of 2
[17:44:53.210]  $ ...future.FUN:function (...)  
[17:44:53.210]  $ ...          : list()
[17:44:53.210]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.210]  - attr(*, "where")=List of 2
[17:44:53.210]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:44:53.210]   ..$ ...          :<environment: 0x558386313138> 
[17:44:53.210]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.210]  - attr(*, "resolved")= logi FALSE
[17:44:53.210]  - attr(*, "total_size")= num 616
[17:44:53.212] Packages to be attached in all futures: [n=0] 
[17:44:53.212] getGlobalsAndPackagesXApply() ... DONE
[17:44:53.212] Number of futures (= number of chunks): 2
[17:44:53.213] Launching 2 futures (chunks) ...
[17:44:53.213] Chunk #1 of 2 ...
[17:44:53.213]  - Finding globals in 'X' for chunk #1 ...
[17:44:53.213] getGlobalsAndPackages() ...
[17:44:53.213] Searching for globals...
[17:44:53.213] 
[17:44:53.213] Searching for globals ... DONE
[17:44:53.213] - globals: [0] <none>
[17:44:53.213] getGlobalsAndPackages() ... DONE
[17:44:53.213]    + additional globals found: [n=0] 
[17:44:53.214]    + additional namespaces needed: [n=0] 
[17:44:53.214]  - Finding globals in 'X' for chunk #1 ... DONE
[17:44:53.214]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:53.214]  - seeds: [2] <seeds>
[17:44:53.214]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.214] getGlobalsAndPackages() ...
[17:44:53.214] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.214] Resolving globals: FALSE
[17:44:53.214] Tweak future expression to call with '...' arguments ...
[17:44:53.214] {
[17:44:53.214]     do.call(function(...) {
[17:44:53.214]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.214]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.214]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.214]             on.exit(options(oopts), add = TRUE)
[17:44:53.214]         }
[17:44:53.214]         {
[17:44:53.214]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.214]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.214]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.214]                   envir = globalenv(), inherits = FALSE)
[17:44:53.214]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.214]             })
[17:44:53.214]         }
[17:44:53.214]     }, args = future.call.arguments)
[17:44:53.214] }
[17:44:53.215] Tweak future expression to call with '...' arguments ... DONE
[17:44:53.215] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.215] 
[17:44:53.215] getGlobalsAndPackages() ... DONE
[17:44:53.216] run() for ‘Future’ ...
[17:44:53.216] - state: ‘created’
[17:44:53.216] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:44:53.219] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.219] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:44:53.220]   - Field: ‘label’
[17:44:53.220]   - Field: ‘local’
[17:44:53.220]   - Field: ‘owner’
[17:44:53.220]   - Field: ‘envir’
[17:44:53.220]   - Field: ‘workers’
[17:44:53.220]   - Field: ‘packages’
[17:44:53.220]   - Field: ‘gc’
[17:44:53.220]   - Field: ‘job’
[17:44:53.220]   - Field: ‘conditions’
[17:44:53.220]   - Field: ‘expr’
[17:44:53.221]   - Field: ‘uuid’
[17:44:53.221]   - Field: ‘seed’
[17:44:53.221]   - Field: ‘version’
[17:44:53.221]   - Field: ‘result’
[17:44:53.221]   - Field: ‘asynchronous’
[17:44:53.221]   - Field: ‘calls’
[17:44:53.221]   - Field: ‘globals’
[17:44:53.221]   - Field: ‘stdout’
[17:44:53.223]   - Field: ‘earlySignal’
[17:44:53.223]   - Field: ‘lazy’
[17:44:53.223]   - Field: ‘state’
[17:44:53.223] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:44:53.223] - Launch lazy future ...
[17:44:53.224] Packages needed by the future expression (n = 0): <none>
[17:44:53.225] Packages needed by future strategies (n = 0): <none>
[17:44:53.225] {
[17:44:53.225]     {
[17:44:53.225]         {
[17:44:53.225]             ...future.startTime <- base::Sys.time()
[17:44:53.225]             {
[17:44:53.225]                 {
[17:44:53.225]                   {
[17:44:53.225]                     {
[17:44:53.225]                       base::local({
[17:44:53.225]                         has_future <- base::requireNamespace("future", 
[17:44:53.225]                           quietly = TRUE)
[17:44:53.225]                         if (has_future) {
[17:44:53.225]                           ns <- base::getNamespace("future")
[17:44:53.225]                           version <- ns[[".package"]][["version"]]
[17:44:53.225]                           if (is.null(version)) 
[17:44:53.225]                             version <- utils::packageVersion("future")
[17:44:53.225]                         }
[17:44:53.225]                         else {
[17:44:53.225]                           version <- NULL
[17:44:53.225]                         }
[17:44:53.225]                         if (!has_future || version < "1.8.0") {
[17:44:53.225]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:53.225]                             "", base::R.version$version.string), 
[17:44:53.225]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:53.225]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:53.225]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:53.225]                               "release", "version")], collapse = " "), 
[17:44:53.225]                             hostname = base::Sys.info()[["nodename"]])
[17:44:53.225]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:53.225]                             info)
[17:44:53.225]                           info <- base::paste(info, collapse = "; ")
[17:44:53.225]                           if (!has_future) {
[17:44:53.225]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:53.225]                               info)
[17:44:53.225]                           }
[17:44:53.225]                           else {
[17:44:53.225]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:53.225]                               info, version)
[17:44:53.225]                           }
[17:44:53.225]                           base::stop(msg)
[17:44:53.225]                         }
[17:44:53.225]                       })
[17:44:53.225]                     }
[17:44:53.225]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:53.225]                     base::options(mc.cores = 1L)
[17:44:53.225]                   }
[17:44:53.225]                   ...future.strategy.old <- future::plan("list")
[17:44:53.225]                   options(future.plan = NULL)
[17:44:53.225]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.225]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:53.225]                 }
[17:44:53.225]                 ...future.workdir <- getwd()
[17:44:53.225]             }
[17:44:53.225]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:53.225]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:53.225]         }
[17:44:53.225]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:53.225]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:53.225]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:53.225]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:53.225]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:53.225]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:53.225]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:53.225]             base::names(...future.oldOptions))
[17:44:53.225]     }
[17:44:53.225]     if (FALSE) {
[17:44:53.225]     }
[17:44:53.225]     else {
[17:44:53.225]         if (TRUE) {
[17:44:53.225]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:53.225]                 open = "w")
[17:44:53.225]         }
[17:44:53.225]         else {
[17:44:53.225]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:53.225]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:53.225]         }
[17:44:53.225]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:53.225]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:53.225]             base::sink(type = "output", split = FALSE)
[17:44:53.225]             base::close(...future.stdout)
[17:44:53.225]         }, add = TRUE)
[17:44:53.225]     }
[17:44:53.225]     ...future.frame <- base::sys.nframe()
[17:44:53.225]     ...future.conditions <- base::list()
[17:44:53.225]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:53.225]     if (FALSE) {
[17:44:53.225]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:53.225]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:53.225]     }
[17:44:53.225]     ...future.result <- base::tryCatch({
[17:44:53.225]         base::withCallingHandlers({
[17:44:53.225]             ...future.value <- base::withVisible(base::local({
[17:44:53.225]                 withCallingHandlers({
[17:44:53.225]                   {
[17:44:53.225]                     do.call(function(...) {
[17:44:53.225]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.225]                       if (!identical(...future.globals.maxSize.org, 
[17:44:53.225]                         ...future.globals.maxSize)) {
[17:44:53.225]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.225]                         on.exit(options(oopts), add = TRUE)
[17:44:53.225]                       }
[17:44:53.225]                       {
[17:44:53.225]                         lapply(seq_along(...future.elements_ii), 
[17:44:53.225]                           FUN = function(jj) {
[17:44:53.225]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.225]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.225]                               envir = globalenv(), inherits = FALSE)
[17:44:53.225]                             ...future.FUN(...future.X_jj, ...)
[17:44:53.225]                           })
[17:44:53.225]                       }
[17:44:53.225]                     }, args = future.call.arguments)
[17:44:53.225]                   }
[17:44:53.225]                 }, immediateCondition = function(cond) {
[17:44:53.225]                   save_rds <- function (object, pathname, ...) 
[17:44:53.225]                   {
[17:44:53.225]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:44:53.225]                     if (file_test("-f", pathname_tmp)) {
[17:44:53.225]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.225]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:44:53.225]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.225]                         fi_tmp[["mtime"]])
[17:44:53.225]                     }
[17:44:53.225]                     tryCatch({
[17:44:53.225]                       saveRDS(object, file = pathname_tmp, ...)
[17:44:53.225]                     }, error = function(ex) {
[17:44:53.225]                       msg <- conditionMessage(ex)
[17:44:53.225]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.225]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:44:53.225]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.225]                         fi_tmp[["mtime"]], msg)
[17:44:53.225]                       ex$message <- msg
[17:44:53.225]                       stop(ex)
[17:44:53.225]                     })
[17:44:53.225]                     stopifnot(file_test("-f", pathname_tmp))
[17:44:53.225]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:44:53.225]                     if (!res || file_test("-f", pathname_tmp)) {
[17:44:53.225]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.225]                       fi <- file.info(pathname)
[17:44:53.225]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:44:53.225]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.225]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:44:53.225]                         fi[["size"]], fi[["mtime"]])
[17:44:53.225]                       stop(msg)
[17:44:53.225]                     }
[17:44:53.225]                     invisible(pathname)
[17:44:53.225]                   }
[17:44:53.225]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:44:53.225]                     rootPath = tempdir()) 
[17:44:53.225]                   {
[17:44:53.225]                     obj <- list(time = Sys.time(), condition = cond)
[17:44:53.225]                     file <- tempfile(pattern = class(cond)[1], 
[17:44:53.225]                       tmpdir = path, fileext = ".rds")
[17:44:53.225]                     save_rds(obj, file)
[17:44:53.225]                   }
[17:44:53.225]                   saveImmediateCondition(cond, path = "/tmp/RtmpYaox9w/.future/immediateConditions")
[17:44:53.225]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.225]                   {
[17:44:53.225]                     inherits <- base::inherits
[17:44:53.225]                     invokeRestart <- base::invokeRestart
[17:44:53.225]                     is.null <- base::is.null
[17:44:53.225]                     muffled <- FALSE
[17:44:53.225]                     if (inherits(cond, "message")) {
[17:44:53.225]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:53.225]                       if (muffled) 
[17:44:53.225]                         invokeRestart("muffleMessage")
[17:44:53.225]                     }
[17:44:53.225]                     else if (inherits(cond, "warning")) {
[17:44:53.225]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:53.225]                       if (muffled) 
[17:44:53.225]                         invokeRestart("muffleWarning")
[17:44:53.225]                     }
[17:44:53.225]                     else if (inherits(cond, "condition")) {
[17:44:53.225]                       if (!is.null(pattern)) {
[17:44:53.225]                         computeRestarts <- base::computeRestarts
[17:44:53.225]                         grepl <- base::grepl
[17:44:53.225]                         restarts <- computeRestarts(cond)
[17:44:53.225]                         for (restart in restarts) {
[17:44:53.225]                           name <- restart$name
[17:44:53.225]                           if (is.null(name)) 
[17:44:53.225]                             next
[17:44:53.225]                           if (!grepl(pattern, name)) 
[17:44:53.225]                             next
[17:44:53.225]                           invokeRestart(restart)
[17:44:53.225]                           muffled <- TRUE
[17:44:53.225]                           break
[17:44:53.225]                         }
[17:44:53.225]                       }
[17:44:53.225]                     }
[17:44:53.225]                     invisible(muffled)
[17:44:53.225]                   }
[17:44:53.225]                   muffleCondition(cond)
[17:44:53.225]                 })
[17:44:53.225]             }))
[17:44:53.225]             future::FutureResult(value = ...future.value$value, 
[17:44:53.225]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.225]                   ...future.rng), globalenv = if (FALSE) 
[17:44:53.225]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:53.225]                     ...future.globalenv.names))
[17:44:53.225]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:53.225]         }, condition = base::local({
[17:44:53.225]             c <- base::c
[17:44:53.225]             inherits <- base::inherits
[17:44:53.225]             invokeRestart <- base::invokeRestart
[17:44:53.225]             length <- base::length
[17:44:53.225]             list <- base::list
[17:44:53.225]             seq.int <- base::seq.int
[17:44:53.225]             signalCondition <- base::signalCondition
[17:44:53.225]             sys.calls <- base::sys.calls
[17:44:53.225]             `[[` <- base::`[[`
[17:44:53.225]             `+` <- base::`+`
[17:44:53.225]             `<<-` <- base::`<<-`
[17:44:53.225]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:53.225]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:53.225]                   3L)]
[17:44:53.225]             }
[17:44:53.225]             function(cond) {
[17:44:53.225]                 is_error <- inherits(cond, "error")
[17:44:53.225]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:53.225]                   NULL)
[17:44:53.225]                 if (is_error) {
[17:44:53.225]                   sessionInformation <- function() {
[17:44:53.225]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:53.225]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:53.225]                       search = base::search(), system = base::Sys.info())
[17:44:53.225]                   }
[17:44:53.225]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.225]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:53.225]                     cond$call), session = sessionInformation(), 
[17:44:53.225]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:53.225]                   signalCondition(cond)
[17:44:53.225]                 }
[17:44:53.225]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:53.225]                 "immediateCondition"))) {
[17:44:53.225]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:53.225]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.225]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:53.225]                   if (TRUE && !signal) {
[17:44:53.225]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.225]                     {
[17:44:53.225]                       inherits <- base::inherits
[17:44:53.225]                       invokeRestart <- base::invokeRestart
[17:44:53.225]                       is.null <- base::is.null
[17:44:53.225]                       muffled <- FALSE
[17:44:53.225]                       if (inherits(cond, "message")) {
[17:44:53.225]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.225]                         if (muffled) 
[17:44:53.225]                           invokeRestart("muffleMessage")
[17:44:53.225]                       }
[17:44:53.225]                       else if (inherits(cond, "warning")) {
[17:44:53.225]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.225]                         if (muffled) 
[17:44:53.225]                           invokeRestart("muffleWarning")
[17:44:53.225]                       }
[17:44:53.225]                       else if (inherits(cond, "condition")) {
[17:44:53.225]                         if (!is.null(pattern)) {
[17:44:53.225]                           computeRestarts <- base::computeRestarts
[17:44:53.225]                           grepl <- base::grepl
[17:44:53.225]                           restarts <- computeRestarts(cond)
[17:44:53.225]                           for (restart in restarts) {
[17:44:53.225]                             name <- restart$name
[17:44:53.225]                             if (is.null(name)) 
[17:44:53.225]                               next
[17:44:53.225]                             if (!grepl(pattern, name)) 
[17:44:53.225]                               next
[17:44:53.225]                             invokeRestart(restart)
[17:44:53.225]                             muffled <- TRUE
[17:44:53.225]                             break
[17:44:53.225]                           }
[17:44:53.225]                         }
[17:44:53.225]                       }
[17:44:53.225]                       invisible(muffled)
[17:44:53.225]                     }
[17:44:53.225]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.225]                   }
[17:44:53.225]                 }
[17:44:53.225]                 else {
[17:44:53.225]                   if (TRUE) {
[17:44:53.225]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.225]                     {
[17:44:53.225]                       inherits <- base::inherits
[17:44:53.225]                       invokeRestart <- base::invokeRestart
[17:44:53.225]                       is.null <- base::is.null
[17:44:53.225]                       muffled <- FALSE
[17:44:53.225]                       if (inherits(cond, "message")) {
[17:44:53.225]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.225]                         if (muffled) 
[17:44:53.225]                           invokeRestart("muffleMessage")
[17:44:53.225]                       }
[17:44:53.225]                       else if (inherits(cond, "warning")) {
[17:44:53.225]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.225]                         if (muffled) 
[17:44:53.225]                           invokeRestart("muffleWarning")
[17:44:53.225]                       }
[17:44:53.225]                       else if (inherits(cond, "condition")) {
[17:44:53.225]                         if (!is.null(pattern)) {
[17:44:53.225]                           computeRestarts <- base::computeRestarts
[17:44:53.225]                           grepl <- base::grepl
[17:44:53.225]                           restarts <- computeRestarts(cond)
[17:44:53.225]                           for (restart in restarts) {
[17:44:53.225]                             name <- restart$name
[17:44:53.225]                             if (is.null(name)) 
[17:44:53.225]                               next
[17:44:53.225]                             if (!grepl(pattern, name)) 
[17:44:53.225]                               next
[17:44:53.225]                             invokeRestart(restart)
[17:44:53.225]                             muffled <- TRUE
[17:44:53.225]                             break
[17:44:53.225]                           }
[17:44:53.225]                         }
[17:44:53.225]                       }
[17:44:53.225]                       invisible(muffled)
[17:44:53.225]                     }
[17:44:53.225]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.225]                   }
[17:44:53.225]                 }
[17:44:53.225]             }
[17:44:53.225]         }))
[17:44:53.225]     }, error = function(ex) {
[17:44:53.225]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:53.225]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.225]                 ...future.rng), started = ...future.startTime, 
[17:44:53.225]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:53.225]             version = "1.8"), class = "FutureResult")
[17:44:53.225]     }, finally = {
[17:44:53.225]         if (!identical(...future.workdir, getwd())) 
[17:44:53.225]             setwd(...future.workdir)
[17:44:53.225]         {
[17:44:53.225]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:53.225]                 ...future.oldOptions$nwarnings <- NULL
[17:44:53.225]             }
[17:44:53.225]             base::options(...future.oldOptions)
[17:44:53.225]             if (.Platform$OS.type == "windows") {
[17:44:53.225]                 old_names <- names(...future.oldEnvVars)
[17:44:53.225]                 envs <- base::Sys.getenv()
[17:44:53.225]                 names <- names(envs)
[17:44:53.225]                 common <- intersect(names, old_names)
[17:44:53.225]                 added <- setdiff(names, old_names)
[17:44:53.225]                 removed <- setdiff(old_names, names)
[17:44:53.225]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:53.225]                   envs[common]]
[17:44:53.225]                 NAMES <- toupper(changed)
[17:44:53.225]                 args <- list()
[17:44:53.225]                 for (kk in seq_along(NAMES)) {
[17:44:53.225]                   name <- changed[[kk]]
[17:44:53.225]                   NAME <- NAMES[[kk]]
[17:44:53.225]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.225]                     next
[17:44:53.225]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.225]                 }
[17:44:53.225]                 NAMES <- toupper(added)
[17:44:53.225]                 for (kk in seq_along(NAMES)) {
[17:44:53.225]                   name <- added[[kk]]
[17:44:53.225]                   NAME <- NAMES[[kk]]
[17:44:53.225]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.225]                     next
[17:44:53.225]                   args[[name]] <- ""
[17:44:53.225]                 }
[17:44:53.225]                 NAMES <- toupper(removed)
[17:44:53.225]                 for (kk in seq_along(NAMES)) {
[17:44:53.225]                   name <- removed[[kk]]
[17:44:53.225]                   NAME <- NAMES[[kk]]
[17:44:53.225]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.225]                     next
[17:44:53.225]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.225]                 }
[17:44:53.225]                 if (length(args) > 0) 
[17:44:53.225]                   base::do.call(base::Sys.setenv, args = args)
[17:44:53.225]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:53.225]             }
[17:44:53.225]             else {
[17:44:53.225]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:53.225]             }
[17:44:53.225]             {
[17:44:53.225]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:53.225]                   0L) {
[17:44:53.225]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:53.225]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:53.225]                   base::options(opts)
[17:44:53.225]                 }
[17:44:53.225]                 {
[17:44:53.225]                   {
[17:44:53.225]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:53.225]                     NULL
[17:44:53.225]                   }
[17:44:53.225]                   options(future.plan = NULL)
[17:44:53.225]                   if (is.na(NA_character_)) 
[17:44:53.225]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.225]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:53.225]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:53.225]                     .init = FALSE)
[17:44:53.225]                 }
[17:44:53.225]             }
[17:44:53.225]         }
[17:44:53.225]     })
[17:44:53.225]     if (TRUE) {
[17:44:53.225]         base::sink(type = "output", split = FALSE)
[17:44:53.225]         if (TRUE) {
[17:44:53.225]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:53.225]         }
[17:44:53.225]         else {
[17:44:53.225]             ...future.result["stdout"] <- base::list(NULL)
[17:44:53.225]         }
[17:44:53.225]         base::close(...future.stdout)
[17:44:53.225]         ...future.stdout <- NULL
[17:44:53.225]     }
[17:44:53.225]     ...future.result$conditions <- ...future.conditions
[17:44:53.225]     ...future.result$finished <- base::Sys.time()
[17:44:53.225]     ...future.result
[17:44:53.225] }
[17:44:53.227] assign_globals() ...
[17:44:53.227] List of 5
[17:44:53.227]  $ ...future.FUN            :function (...)  
[17:44:53.227]  $ future.call.arguments    : list()
[17:44:53.227]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.227]  $ ...future.elements_ii    :List of 2
[17:44:53.227]   ..$ : int 0
[17:44:53.227]   ..$ : int 0
[17:44:53.227]  $ ...future.seeds_ii       :List of 2
[17:44:53.227]   ..$ : int [1:7] 10407 800596211 191202253 -1245543361 -1911991084 -470201595 630973807
[17:44:53.227]   ..$ : int [1:7] 10407 336362669 -1847432762 -712550016 1068830663 1731026700 1489470838
[17:44:53.227]  $ ...future.globals.maxSize: NULL
[17:44:53.227]  - attr(*, "where")=List of 5
[17:44:53.227]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:44:53.227]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:44:53.227]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:44:53.227]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:44:53.227]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:44:53.227]  - attr(*, "resolved")= logi FALSE
[17:44:53.227]  - attr(*, "total_size")= num 616
[17:44:53.227]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.227]  - attr(*, "already-done")= logi TRUE
[17:44:53.233] - reassign environment for ‘...future.FUN’
[17:44:53.233] - copied ‘...future.FUN’ to environment
[17:44:53.233] - copied ‘future.call.arguments’ to environment
[17:44:53.233] - copied ‘...future.elements_ii’ to environment
[17:44:53.233] - copied ‘...future.seeds_ii’ to environment
[17:44:53.233] - copied ‘...future.globals.maxSize’ to environment
[17:44:53.233] assign_globals() ... done
[17:44:53.234] requestCore(): workers = 2
[17:44:53.237] MulticoreFuture started
[17:44:53.237] - Launch lazy future ... done
[17:44:53.237] run() for ‘MulticoreFuture’ ... done
[17:44:53.237] plan(): Setting new future strategy stack:
[17:44:53.238] Created future:
[17:44:53.238] List of future strategies:
[17:44:53.238] 1. sequential:
[17:44:53.238]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.238]    - tweaked: FALSE
[17:44:53.238]    - call: NULL
[17:44:53.239] plan(): nbrOfWorkers() = 1
[17:44:53.241] plan(): Setting new future strategy stack:
[17:44:53.241] List of future strategies:
[17:44:53.241] 1. multicore:
[17:44:53.241]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:53.241]    - tweaked: FALSE
[17:44:53.241]    - call: plan(strategy)
[17:44:53.246] plan(): nbrOfWorkers() = 2
[17:44:53.238] MulticoreFuture:
[17:44:53.238] Label: ‘future_replicate-1’
[17:44:53.238] Expression:
[17:44:53.238] {
[17:44:53.238]     do.call(function(...) {
[17:44:53.238]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.238]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.238]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.238]             on.exit(options(oopts), add = TRUE)
[17:44:53.238]         }
[17:44:53.238]         {
[17:44:53.238]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.238]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.238]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.238]                   envir = globalenv(), inherits = FALSE)
[17:44:53.238]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.238]             })
[17:44:53.238]         }
[17:44:53.238]     }, args = future.call.arguments)
[17:44:53.238] }
[17:44:53.238] Lazy evaluation: FALSE
[17:44:53.238] Asynchronous evaluation: TRUE
[17:44:53.238] Local evaluation: TRUE
[17:44:53.238] Environment: R_GlobalEnv
[17:44:53.238] Capture standard output: TRUE
[17:44:53.238] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:53.238] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:53.238] Packages: <none>
[17:44:53.238] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:53.238] Resolved: TRUE
[17:44:53.238] Value: <not collected>
[17:44:53.238] Conditions captured: <none>
[17:44:53.238] Early signaling: FALSE
[17:44:53.238] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:53.238] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.248] Chunk #1 of 2 ... DONE
[17:44:53.248] Chunk #2 of 2 ...
[17:44:53.248]  - Finding globals in 'X' for chunk #2 ...
[17:44:53.249] getGlobalsAndPackages() ...
[17:44:53.249] Searching for globals...
[17:44:53.249] 
[17:44:53.249] Searching for globals ... DONE
[17:44:53.249] - globals: [0] <none>
[17:44:53.250] getGlobalsAndPackages() ... DONE
[17:44:53.250]    + additional globals found: [n=0] 
[17:44:53.250]    + additional namespaces needed: [n=0] 
[17:44:53.250]  - Finding globals in 'X' for chunk #2 ... DONE
[17:44:53.250]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:53.250]  - seeds: [3] <seeds>
[17:44:53.251]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.251] getGlobalsAndPackages() ...
[17:44:53.251] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.251] Resolving globals: FALSE
[17:44:53.251] Tweak future expression to call with '...' arguments ...
[17:44:53.252] {
[17:44:53.252]     do.call(function(...) {
[17:44:53.252]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.252]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.252]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.252]             on.exit(options(oopts), add = TRUE)
[17:44:53.252]         }
[17:44:53.252]         {
[17:44:53.252]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.252]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.252]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.252]                   envir = globalenv(), inherits = FALSE)
[17:44:53.252]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.252]             })
[17:44:53.252]         }
[17:44:53.252]     }, args = future.call.arguments)
[17:44:53.252] }
[17:44:53.252] Tweak future expression to call with '...' arguments ... DONE
[17:44:53.253] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.253] 
[17:44:53.253] getGlobalsAndPackages() ... DONE
[17:44:53.254] run() for ‘Future’ ...
[17:44:53.254] - state: ‘created’
[17:44:53.254] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:44:53.259] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.259] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:44:53.259]   - Field: ‘label’
[17:44:53.260]   - Field: ‘local’
[17:44:53.260]   - Field: ‘owner’
[17:44:53.260]   - Field: ‘envir’
[17:44:53.260]   - Field: ‘workers’
[17:44:53.260]   - Field: ‘packages’
[17:44:53.260]   - Field: ‘gc’
[17:44:53.261]   - Field: ‘job’
[17:44:53.261]   - Field: ‘conditions’
[17:44:53.261]   - Field: ‘expr’
[17:44:53.261]   - Field: ‘uuid’
[17:44:53.261]   - Field: ‘seed’
[17:44:53.261]   - Field: ‘version’
[17:44:53.262]   - Field: ‘result’
[17:44:53.262]   - Field: ‘asynchronous’
[17:44:53.262]   - Field: ‘calls’
[17:44:53.262]   - Field: ‘globals’
[17:44:53.262]   - Field: ‘stdout’
[17:44:53.262]   - Field: ‘earlySignal’
[17:44:53.262]   - Field: ‘lazy’
[17:44:53.263]   - Field: ‘state’
[17:44:53.263] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:44:53.263] - Launch lazy future ...
[17:44:53.263] Packages needed by the future expression (n = 0): <none>
[17:44:53.264] Packages needed by future strategies (n = 0): <none>
[17:44:53.264] {
[17:44:53.264]     {
[17:44:53.264]         {
[17:44:53.264]             ...future.startTime <- base::Sys.time()
[17:44:53.264]             {
[17:44:53.264]                 {
[17:44:53.264]                   {
[17:44:53.264]                     {
[17:44:53.264]                       base::local({
[17:44:53.264]                         has_future <- base::requireNamespace("future", 
[17:44:53.264]                           quietly = TRUE)
[17:44:53.264]                         if (has_future) {
[17:44:53.264]                           ns <- base::getNamespace("future")
[17:44:53.264]                           version <- ns[[".package"]][["version"]]
[17:44:53.264]                           if (is.null(version)) 
[17:44:53.264]                             version <- utils::packageVersion("future")
[17:44:53.264]                         }
[17:44:53.264]                         else {
[17:44:53.264]                           version <- NULL
[17:44:53.264]                         }
[17:44:53.264]                         if (!has_future || version < "1.8.0") {
[17:44:53.264]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:53.264]                             "", base::R.version$version.string), 
[17:44:53.264]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:53.264]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:53.264]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:53.264]                               "release", "version")], collapse = " "), 
[17:44:53.264]                             hostname = base::Sys.info()[["nodename"]])
[17:44:53.264]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:53.264]                             info)
[17:44:53.264]                           info <- base::paste(info, collapse = "; ")
[17:44:53.264]                           if (!has_future) {
[17:44:53.264]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:53.264]                               info)
[17:44:53.264]                           }
[17:44:53.264]                           else {
[17:44:53.264]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:53.264]                               info, version)
[17:44:53.264]                           }
[17:44:53.264]                           base::stop(msg)
[17:44:53.264]                         }
[17:44:53.264]                       })
[17:44:53.264]                     }
[17:44:53.264]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:53.264]                     base::options(mc.cores = 1L)
[17:44:53.264]                   }
[17:44:53.264]                   ...future.strategy.old <- future::plan("list")
[17:44:53.264]                   options(future.plan = NULL)
[17:44:53.264]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.264]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:53.264]                 }
[17:44:53.264]                 ...future.workdir <- getwd()
[17:44:53.264]             }
[17:44:53.264]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:53.264]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:53.264]         }
[17:44:53.264]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:53.264]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:53.264]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:53.264]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:53.264]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:53.264]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:53.264]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:53.264]             base::names(...future.oldOptions))
[17:44:53.264]     }
[17:44:53.264]     if (FALSE) {
[17:44:53.264]     }
[17:44:53.264]     else {
[17:44:53.264]         if (TRUE) {
[17:44:53.264]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:53.264]                 open = "w")
[17:44:53.264]         }
[17:44:53.264]         else {
[17:44:53.264]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:53.264]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:53.264]         }
[17:44:53.264]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:53.264]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:53.264]             base::sink(type = "output", split = FALSE)
[17:44:53.264]             base::close(...future.stdout)
[17:44:53.264]         }, add = TRUE)
[17:44:53.264]     }
[17:44:53.264]     ...future.frame <- base::sys.nframe()
[17:44:53.264]     ...future.conditions <- base::list()
[17:44:53.264]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:53.264]     if (FALSE) {
[17:44:53.264]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:53.264]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:53.264]     }
[17:44:53.264]     ...future.result <- base::tryCatch({
[17:44:53.264]         base::withCallingHandlers({
[17:44:53.264]             ...future.value <- base::withVisible(base::local({
[17:44:53.264]                 withCallingHandlers({
[17:44:53.264]                   {
[17:44:53.264]                     do.call(function(...) {
[17:44:53.264]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.264]                       if (!identical(...future.globals.maxSize.org, 
[17:44:53.264]                         ...future.globals.maxSize)) {
[17:44:53.264]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.264]                         on.exit(options(oopts), add = TRUE)
[17:44:53.264]                       }
[17:44:53.264]                       {
[17:44:53.264]                         lapply(seq_along(...future.elements_ii), 
[17:44:53.264]                           FUN = function(jj) {
[17:44:53.264]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.264]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.264]                               envir = globalenv(), inherits = FALSE)
[17:44:53.264]                             ...future.FUN(...future.X_jj, ...)
[17:44:53.264]                           })
[17:44:53.264]                       }
[17:44:53.264]                     }, args = future.call.arguments)
[17:44:53.264]                   }
[17:44:53.264]                 }, immediateCondition = function(cond) {
[17:44:53.264]                   save_rds <- function (object, pathname, ...) 
[17:44:53.264]                   {
[17:44:53.264]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:44:53.264]                     if (file_test("-f", pathname_tmp)) {
[17:44:53.264]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.264]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:44:53.264]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.264]                         fi_tmp[["mtime"]])
[17:44:53.264]                     }
[17:44:53.264]                     tryCatch({
[17:44:53.264]                       saveRDS(object, file = pathname_tmp, ...)
[17:44:53.264]                     }, error = function(ex) {
[17:44:53.264]                       msg <- conditionMessage(ex)
[17:44:53.264]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.264]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:44:53.264]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.264]                         fi_tmp[["mtime"]], msg)
[17:44:53.264]                       ex$message <- msg
[17:44:53.264]                       stop(ex)
[17:44:53.264]                     })
[17:44:53.264]                     stopifnot(file_test("-f", pathname_tmp))
[17:44:53.264]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:44:53.264]                     if (!res || file_test("-f", pathname_tmp)) {
[17:44:53.264]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.264]                       fi <- file.info(pathname)
[17:44:53.264]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:44:53.264]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.264]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:44:53.264]                         fi[["size"]], fi[["mtime"]])
[17:44:53.264]                       stop(msg)
[17:44:53.264]                     }
[17:44:53.264]                     invisible(pathname)
[17:44:53.264]                   }
[17:44:53.264]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:44:53.264]                     rootPath = tempdir()) 
[17:44:53.264]                   {
[17:44:53.264]                     obj <- list(time = Sys.time(), condition = cond)
[17:44:53.264]                     file <- tempfile(pattern = class(cond)[1], 
[17:44:53.264]                       tmpdir = path, fileext = ".rds")
[17:44:53.264]                     save_rds(obj, file)
[17:44:53.264]                   }
[17:44:53.264]                   saveImmediateCondition(cond, path = "/tmp/RtmpYaox9w/.future/immediateConditions")
[17:44:53.264]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.264]                   {
[17:44:53.264]                     inherits <- base::inherits
[17:44:53.264]                     invokeRestart <- base::invokeRestart
[17:44:53.264]                     is.null <- base::is.null
[17:44:53.264]                     muffled <- FALSE
[17:44:53.264]                     if (inherits(cond, "message")) {
[17:44:53.264]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:53.264]                       if (muffled) 
[17:44:53.264]                         invokeRestart("muffleMessage")
[17:44:53.264]                     }
[17:44:53.264]                     else if (inherits(cond, "warning")) {
[17:44:53.264]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:53.264]                       if (muffled) 
[17:44:53.264]                         invokeRestart("muffleWarning")
[17:44:53.264]                     }
[17:44:53.264]                     else if (inherits(cond, "condition")) {
[17:44:53.264]                       if (!is.null(pattern)) {
[17:44:53.264]                         computeRestarts <- base::computeRestarts
[17:44:53.264]                         grepl <- base::grepl
[17:44:53.264]                         restarts <- computeRestarts(cond)
[17:44:53.264]                         for (restart in restarts) {
[17:44:53.264]                           name <- restart$name
[17:44:53.264]                           if (is.null(name)) 
[17:44:53.264]                             next
[17:44:53.264]                           if (!grepl(pattern, name)) 
[17:44:53.264]                             next
[17:44:53.264]                           invokeRestart(restart)
[17:44:53.264]                           muffled <- TRUE
[17:44:53.264]                           break
[17:44:53.264]                         }
[17:44:53.264]                       }
[17:44:53.264]                     }
[17:44:53.264]                     invisible(muffled)
[17:44:53.264]                   }
[17:44:53.264]                   muffleCondition(cond)
[17:44:53.264]                 })
[17:44:53.264]             }))
[17:44:53.264]             future::FutureResult(value = ...future.value$value, 
[17:44:53.264]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.264]                   ...future.rng), globalenv = if (FALSE) 
[17:44:53.264]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:53.264]                     ...future.globalenv.names))
[17:44:53.264]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:53.264]         }, condition = base::local({
[17:44:53.264]             c <- base::c
[17:44:53.264]             inherits <- base::inherits
[17:44:53.264]             invokeRestart <- base::invokeRestart
[17:44:53.264]             length <- base::length
[17:44:53.264]             list <- base::list
[17:44:53.264]             seq.int <- base::seq.int
[17:44:53.264]             signalCondition <- base::signalCondition
[17:44:53.264]             sys.calls <- base::sys.calls
[17:44:53.264]             `[[` <- base::`[[`
[17:44:53.264]             `+` <- base::`+`
[17:44:53.264]             `<<-` <- base::`<<-`
[17:44:53.264]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:53.264]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:53.264]                   3L)]
[17:44:53.264]             }
[17:44:53.264]             function(cond) {
[17:44:53.264]                 is_error <- inherits(cond, "error")
[17:44:53.264]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:53.264]                   NULL)
[17:44:53.264]                 if (is_error) {
[17:44:53.264]                   sessionInformation <- function() {
[17:44:53.264]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:53.264]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:53.264]                       search = base::search(), system = base::Sys.info())
[17:44:53.264]                   }
[17:44:53.264]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.264]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:53.264]                     cond$call), session = sessionInformation(), 
[17:44:53.264]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:53.264]                   signalCondition(cond)
[17:44:53.264]                 }
[17:44:53.264]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:53.264]                 "immediateCondition"))) {
[17:44:53.264]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:53.264]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.264]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:53.264]                   if (TRUE && !signal) {
[17:44:53.264]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.264]                     {
[17:44:53.264]                       inherits <- base::inherits
[17:44:53.264]                       invokeRestart <- base::invokeRestart
[17:44:53.264]                       is.null <- base::is.null
[17:44:53.264]                       muffled <- FALSE
[17:44:53.264]                       if (inherits(cond, "message")) {
[17:44:53.264]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.264]                         if (muffled) 
[17:44:53.264]                           invokeRestart("muffleMessage")
[17:44:53.264]                       }
[17:44:53.264]                       else if (inherits(cond, "warning")) {
[17:44:53.264]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.264]                         if (muffled) 
[17:44:53.264]                           invokeRestart("muffleWarning")
[17:44:53.264]                       }
[17:44:53.264]                       else if (inherits(cond, "condition")) {
[17:44:53.264]                         if (!is.null(pattern)) {
[17:44:53.264]                           computeRestarts <- base::computeRestarts
[17:44:53.264]                           grepl <- base::grepl
[17:44:53.264]                           restarts <- computeRestarts(cond)
[17:44:53.264]                           for (restart in restarts) {
[17:44:53.264]                             name <- restart$name
[17:44:53.264]                             if (is.null(name)) 
[17:44:53.264]                               next
[17:44:53.264]                             if (!grepl(pattern, name)) 
[17:44:53.264]                               next
[17:44:53.264]                             invokeRestart(restart)
[17:44:53.264]                             muffled <- TRUE
[17:44:53.264]                             break
[17:44:53.264]                           }
[17:44:53.264]                         }
[17:44:53.264]                       }
[17:44:53.264]                       invisible(muffled)
[17:44:53.264]                     }
[17:44:53.264]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.264]                   }
[17:44:53.264]                 }
[17:44:53.264]                 else {
[17:44:53.264]                   if (TRUE) {
[17:44:53.264]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.264]                     {
[17:44:53.264]                       inherits <- base::inherits
[17:44:53.264]                       invokeRestart <- base::invokeRestart
[17:44:53.264]                       is.null <- base::is.null
[17:44:53.264]                       muffled <- FALSE
[17:44:53.264]                       if (inherits(cond, "message")) {
[17:44:53.264]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.264]                         if (muffled) 
[17:44:53.264]                           invokeRestart("muffleMessage")
[17:44:53.264]                       }
[17:44:53.264]                       else if (inherits(cond, "warning")) {
[17:44:53.264]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.264]                         if (muffled) 
[17:44:53.264]                           invokeRestart("muffleWarning")
[17:44:53.264]                       }
[17:44:53.264]                       else if (inherits(cond, "condition")) {
[17:44:53.264]                         if (!is.null(pattern)) {
[17:44:53.264]                           computeRestarts <- base::computeRestarts
[17:44:53.264]                           grepl <- base::grepl
[17:44:53.264]                           restarts <- computeRestarts(cond)
[17:44:53.264]                           for (restart in restarts) {
[17:44:53.264]                             name <- restart$name
[17:44:53.264]                             if (is.null(name)) 
[17:44:53.264]                               next
[17:44:53.264]                             if (!grepl(pattern, name)) 
[17:44:53.264]                               next
[17:44:53.264]                             invokeRestart(restart)
[17:44:53.264]                             muffled <- TRUE
[17:44:53.264]                             break
[17:44:53.264]                           }
[17:44:53.264]                         }
[17:44:53.264]                       }
[17:44:53.264]                       invisible(muffled)
[17:44:53.264]                     }
[17:44:53.264]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.264]                   }
[17:44:53.264]                 }
[17:44:53.264]             }
[17:44:53.264]         }))
[17:44:53.264]     }, error = function(ex) {
[17:44:53.264]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:53.264]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.264]                 ...future.rng), started = ...future.startTime, 
[17:44:53.264]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:53.264]             version = "1.8"), class = "FutureResult")
[17:44:53.264]     }, finally = {
[17:44:53.264]         if (!identical(...future.workdir, getwd())) 
[17:44:53.264]             setwd(...future.workdir)
[17:44:53.264]         {
[17:44:53.264]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:53.264]                 ...future.oldOptions$nwarnings <- NULL
[17:44:53.264]             }
[17:44:53.264]             base::options(...future.oldOptions)
[17:44:53.264]             if (.Platform$OS.type == "windows") {
[17:44:53.264]                 old_names <- names(...future.oldEnvVars)
[17:44:53.264]                 envs <- base::Sys.getenv()
[17:44:53.264]                 names <- names(envs)
[17:44:53.264]                 common <- intersect(names, old_names)
[17:44:53.264]                 added <- setdiff(names, old_names)
[17:44:53.264]                 removed <- setdiff(old_names, names)
[17:44:53.264]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:53.264]                   envs[common]]
[17:44:53.264]                 NAMES <- toupper(changed)
[17:44:53.264]                 args <- list()
[17:44:53.264]                 for (kk in seq_along(NAMES)) {
[17:44:53.264]                   name <- changed[[kk]]
[17:44:53.264]                   NAME <- NAMES[[kk]]
[17:44:53.264]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.264]                     next
[17:44:53.264]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.264]                 }
[17:44:53.264]                 NAMES <- toupper(added)
[17:44:53.264]                 for (kk in seq_along(NAMES)) {
[17:44:53.264]                   name <- added[[kk]]
[17:44:53.264]                   NAME <- NAMES[[kk]]
[17:44:53.264]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.264]                     next
[17:44:53.264]                   args[[name]] <- ""
[17:44:53.264]                 }
[17:44:53.264]                 NAMES <- toupper(removed)
[17:44:53.264]                 for (kk in seq_along(NAMES)) {
[17:44:53.264]                   name <- removed[[kk]]
[17:44:53.264]                   NAME <- NAMES[[kk]]
[17:44:53.264]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.264]                     next
[17:44:53.264]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.264]                 }
[17:44:53.264]                 if (length(args) > 0) 
[17:44:53.264]                   base::do.call(base::Sys.setenv, args = args)
[17:44:53.264]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:53.264]             }
[17:44:53.264]             else {
[17:44:53.264]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:53.264]             }
[17:44:53.264]             {
[17:44:53.264]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:53.264]                   0L) {
[17:44:53.264]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:53.264]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:53.264]                   base::options(opts)
[17:44:53.264]                 }
[17:44:53.264]                 {
[17:44:53.264]                   {
[17:44:53.264]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:53.264]                     NULL
[17:44:53.264]                   }
[17:44:53.264]                   options(future.plan = NULL)
[17:44:53.264]                   if (is.na(NA_character_)) 
[17:44:53.264]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.264]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:53.264]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:53.264]                     .init = FALSE)
[17:44:53.264]                 }
[17:44:53.264]             }
[17:44:53.264]         }
[17:44:53.264]     })
[17:44:53.264]     if (TRUE) {
[17:44:53.264]         base::sink(type = "output", split = FALSE)
[17:44:53.264]         if (TRUE) {
[17:44:53.264]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:53.264]         }
[17:44:53.264]         else {
[17:44:53.264]             ...future.result["stdout"] <- base::list(NULL)
[17:44:53.264]         }
[17:44:53.264]         base::close(...future.stdout)
[17:44:53.264]         ...future.stdout <- NULL
[17:44:53.264]     }
[17:44:53.264]     ...future.result$conditions <- ...future.conditions
[17:44:53.264]     ...future.result$finished <- base::Sys.time()
[17:44:53.264]     ...future.result
[17:44:53.264] }
[17:44:53.268] assign_globals() ...
[17:44:53.268] List of 5
[17:44:53.268]  $ ...future.FUN            :function (...)  
[17:44:53.268]  $ future.call.arguments    : list()
[17:44:53.268]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.268]  $ ...future.elements_ii    :List of 3
[17:44:53.268]   ..$ : int 0
[17:44:53.268]   ..$ : int 0
[17:44:53.268]   ..$ : int 0
[17:44:53.268]  $ ...future.seeds_ii       :List of 3
[17:44:53.268]   ..$ : int [1:7] 10407 2000585943 1277356830 -2089408352 -860958827 226502925 99834792
[17:44:53.268]   ..$ : int [1:7] 10407 -1366366742 -1587533199 -987670999 1146693195 -372746989 -1779846945
[17:44:53.268]   ..$ : int [1:7] 10407 -1326244930 -121340665 862160877 1069041468 -111293265 1245428870
[17:44:53.268]  $ ...future.globals.maxSize: NULL
[17:44:53.268]  - attr(*, "where")=List of 5
[17:44:53.268]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:44:53.268]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:44:53.268]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:44:53.268]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:44:53.268]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:44:53.268]  - attr(*, "resolved")= logi FALSE
[17:44:53.268]  - attr(*, "total_size")= num 616
[17:44:53.268]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.268]  - attr(*, "already-done")= logi TRUE
[17:44:53.281] - reassign environment for ‘...future.FUN’
[17:44:53.281] - copied ‘...future.FUN’ to environment
[17:44:53.281] - copied ‘future.call.arguments’ to environment
[17:44:53.281] - copied ‘...future.elements_ii’ to environment
[17:44:53.281] - copied ‘...future.seeds_ii’ to environment
[17:44:53.282] - copied ‘...future.globals.maxSize’ to environment
[17:44:53.282] assign_globals() ... done
[17:44:53.282] requestCore(): workers = 2
[17:44:53.288] MulticoreFuture started
[17:44:53.288] - Launch lazy future ... done
[17:44:53.288] run() for ‘MulticoreFuture’ ... done
[17:44:53.288] Created future:
[17:44:53.289] plan(): Setting new future strategy stack:
[17:44:53.289] List of future strategies:
[17:44:53.289] 1. sequential:
[17:44:53.289]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.289]    - tweaked: FALSE
[17:44:53.289]    - call: NULL
[17:44:53.290] plan(): nbrOfWorkers() = 1
[17:44:53.292] plan(): Setting new future strategy stack:
[17:44:53.293] List of future strategies:
[17:44:53.293] 1. multicore:
[17:44:53.293]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:53.293]    - tweaked: FALSE
[17:44:53.293]    - call: plan(strategy)
[17:44:53.298] plan(): nbrOfWorkers() = 2
[17:44:53.289] MulticoreFuture:
[17:44:53.289] Label: ‘future_replicate-2’
[17:44:53.289] Expression:
[17:44:53.289] {
[17:44:53.289]     do.call(function(...) {
[17:44:53.289]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.289]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.289]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.289]             on.exit(options(oopts), add = TRUE)
[17:44:53.289]         }
[17:44:53.289]         {
[17:44:53.289]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.289]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.289]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.289]                   envir = globalenv(), inherits = FALSE)
[17:44:53.289]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.289]             })
[17:44:53.289]         }
[17:44:53.289]     }, args = future.call.arguments)
[17:44:53.289] }
[17:44:53.289] Lazy evaluation: FALSE
[17:44:53.289] Asynchronous evaluation: TRUE
[17:44:53.289] Local evaluation: TRUE
[17:44:53.289] Environment: R_GlobalEnv
[17:44:53.289] Capture standard output: TRUE
[17:44:53.289] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:53.289] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:53.289] Packages: <none>
[17:44:53.289] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:53.289] Resolved: TRUE
[17:44:53.289] Value: <not collected>
[17:44:53.289] Conditions captured: <none>
[17:44:53.289] Early signaling: FALSE
[17:44:53.289] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:53.289] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.299] Chunk #2 of 2 ... DONE
[17:44:53.299] Launching 2 futures (chunks) ... DONE
[17:44:53.299] Resolving 2 futures (chunks) ...
[17:44:53.300] resolve() on list ...
[17:44:53.300]  recursive: 0
[17:44:53.300]  length: 2
[17:44:53.300] 
[17:44:53.300] Future #1
[17:44:53.301] result() for MulticoreFuture ...
[17:44:53.303] result() for MulticoreFuture ...
[17:44:53.303] result() for MulticoreFuture ... done
[17:44:53.303] result() for MulticoreFuture ... done
[17:44:53.303] result() for MulticoreFuture ...
[17:44:53.303] result() for MulticoreFuture ... done
[17:44:53.303] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:44:53.304] - nx: 2
[17:44:53.304] - relay: TRUE
[17:44:53.304] - stdout: TRUE
[17:44:53.304] - signal: TRUE
[17:44:53.304] - resignal: FALSE
[17:44:53.304] - force: TRUE
[17:44:53.304] - relayed: [n=2] FALSE, FALSE
[17:44:53.304] - queued futures: [n=2] FALSE, FALSE
[17:44:53.305]  - until=1
[17:44:53.305]  - relaying element #1
[17:44:53.305] result() for MulticoreFuture ...
[17:44:53.305] result() for MulticoreFuture ... done
[17:44:53.305] result() for MulticoreFuture ...
[17:44:53.305] result() for MulticoreFuture ... done
[17:44:53.306] result() for MulticoreFuture ...
[17:44:53.306] result() for MulticoreFuture ... done
[17:44:53.306] result() for MulticoreFuture ...
[17:44:53.306] result() for MulticoreFuture ... done
[17:44:53.306] - relayed: [n=2] TRUE, FALSE
[17:44:53.306] - queued futures: [n=2] TRUE, FALSE
[17:44:53.306] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:44:53.307]  length: 1 (resolved future 1)
[17:44:53.307] Future #2
[17:44:53.307] result() for MulticoreFuture ...
[17:44:53.308] result() for MulticoreFuture ...
[17:44:53.308] result() for MulticoreFuture ... done
[17:44:53.308] result() for MulticoreFuture ... done
[17:44:53.308] result() for MulticoreFuture ...
[17:44:53.308] result() for MulticoreFuture ... done
[17:44:53.308] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:44:53.309] - nx: 2
[17:44:53.309] - relay: TRUE
[17:44:53.309] - stdout: TRUE
[17:44:53.309] - signal: TRUE
[17:44:53.309] - resignal: FALSE
[17:44:53.309] - force: TRUE
[17:44:53.309] - relayed: [n=2] TRUE, FALSE
[17:44:53.309] - queued futures: [n=2] TRUE, FALSE
[17:44:53.310]  - until=2
[17:44:53.310]  - relaying element #2
[17:44:53.310] result() for MulticoreFuture ...
[17:44:53.310] result() for MulticoreFuture ... done
[17:44:53.310] result() for MulticoreFuture ...
[17:44:53.310] result() for MulticoreFuture ... done
[17:44:53.310] result() for MulticoreFuture ...
[17:44:53.310] result() for MulticoreFuture ... done
[17:44:53.311] result() for MulticoreFuture ...
[17:44:53.311] result() for MulticoreFuture ... done
[17:44:53.311] - relayed: [n=2] TRUE, TRUE
[17:44:53.311] - queued futures: [n=2] TRUE, TRUE
[17:44:53.311] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:44:53.311]  length: 0 (resolved future 2)
[17:44:53.311] Relaying remaining futures
[17:44:53.311] signalConditionsASAP(NULL, pos=0) ...
[17:44:53.311] - nx: 2
[17:44:53.312] - relay: TRUE
[17:44:53.312] - stdout: TRUE
[17:44:53.312] - signal: TRUE
[17:44:53.312] - resignal: FALSE
[17:44:53.312] - force: TRUE
[17:44:53.312] - relayed: [n=2] TRUE, TRUE
[17:44:53.312] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:44:53.312] - relayed: [n=2] TRUE, TRUE
[17:44:53.312] - queued futures: [n=2] TRUE, TRUE
[17:44:53.312] signalConditionsASAP(NULL, pos=0) ... done
[17:44:53.313] resolve() on list ... DONE
[17:44:53.313] result() for MulticoreFuture ...
[17:44:53.313] result() for MulticoreFuture ... done
[17:44:53.313] result() for MulticoreFuture ...
[17:44:53.313] result() for MulticoreFuture ... done
[17:44:53.313] result() for MulticoreFuture ...
[17:44:53.313] result() for MulticoreFuture ... done
[17:44:53.313] result() for MulticoreFuture ...
[17:44:53.313] result() for MulticoreFuture ... done
[17:44:53.314]  - Number of value chunks collected: 2
[17:44:53.314] Resolving 2 futures (chunks) ... DONE
[17:44:53.314] Reducing values from 2 chunks ...
[17:44:53.314]  - Number of values collected after concatenation: 5
[17:44:53.314]  - Number of values expected: 5
[17:44:53.314] Reducing values from 2 chunks ... DONE
[17:44:53.314] future_lapply() ... DONE
[17:44:53.314] future_lapply() ...
[17:44:53.315] Generating random seeds ...
[17:44:53.315] Generating random seed streams for 5 elements ...
[17:44:53.315] Generating random seed streams for 5 elements ... DONE
[17:44:53.315] Generating random seeds ... DONE
[17:44:53.316] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:44:53.320] Number of chunks: 2
[17:44:53.321] getGlobalsAndPackagesXApply() ...
[17:44:53.321]  - future.globals: TRUE
[17:44:53.321] getGlobalsAndPackages() ...
[17:44:53.321] Searching for globals...
[17:44:53.324] - globals found: [2] ‘FUN’, ‘sample’
[17:44:53.325] Searching for globals ... DONE
[17:44:53.325] Resolving globals: FALSE
[17:44:53.325] The total size of the 1 globals is 616 bytes (616 bytes)
[17:44:53.326] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:44:53.326] - globals: [1] ‘FUN’
[17:44:53.326] 
[17:44:53.326] getGlobalsAndPackages() ... DONE
[17:44:53.326]  - globals found/used: [n=1] ‘FUN’
[17:44:53.326]  - needed namespaces: [n=0] 
[17:44:53.327] Finding globals ... DONE
[17:44:53.327]  - use_args: TRUE
[17:44:53.327]  - Getting '...' globals ...
[17:44:53.327] resolve() on list ...
[17:44:53.327]  recursive: 0
[17:44:53.328]  length: 1
[17:44:53.328]  elements: ‘...’
[17:44:53.328]  length: 0 (resolved future 1)
[17:44:53.328] resolve() on list ... DONE
[17:44:53.328]    - '...' content: [n=0] 
[17:44:53.328] List of 1
[17:44:53.328]  $ ...: list()
[17:44:53.328]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.328]  - attr(*, "where")=List of 1
[17:44:53.328]   ..$ ...:<environment: 0x558388129cf0> 
[17:44:53.328]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.328]  - attr(*, "resolved")= logi TRUE
[17:44:53.328]  - attr(*, "total_size")= num NA
[17:44:53.331]  - Getting '...' globals ... DONE
[17:44:53.331] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:44:53.332] List of 2
[17:44:53.332]  $ ...future.FUN:function (...)  
[17:44:53.332]  $ ...          : list()
[17:44:53.332]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.332]  - attr(*, "where")=List of 2
[17:44:53.332]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:44:53.332]   ..$ ...          :<environment: 0x558388129cf0> 
[17:44:53.332]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.332]  - attr(*, "resolved")= logi FALSE
[17:44:53.332]  - attr(*, "total_size")= num 616
[17:44:53.334] Packages to be attached in all futures: [n=0] 
[17:44:53.334] getGlobalsAndPackagesXApply() ... DONE
[17:44:53.335] Number of futures (= number of chunks): 2
[17:44:53.335] Launching 2 futures (chunks) ...
[17:44:53.335] Chunk #1 of 2 ...
[17:44:53.335]  - Finding globals in 'X' for chunk #1 ...
[17:44:53.335] getGlobalsAndPackages() ...
[17:44:53.335] Searching for globals...
[17:44:53.335] 
[17:44:53.336] Searching for globals ... DONE
[17:44:53.336] - globals: [0] <none>
[17:44:53.336] getGlobalsAndPackages() ... DONE
[17:44:53.336]    + additional globals found: [n=0] 
[17:44:53.336]    + additional namespaces needed: [n=0] 
[17:44:53.336]  - Finding globals in 'X' for chunk #1 ... DONE
[17:44:53.336]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:53.336]  - seeds: [2] <seeds>
[17:44:53.336]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.336] getGlobalsAndPackages() ...
[17:44:53.336] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.337] Resolving globals: FALSE
[17:44:53.337] Tweak future expression to call with '...' arguments ...
[17:44:53.337] {
[17:44:53.337]     do.call(function(...) {
[17:44:53.337]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.337]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.337]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.337]             on.exit(options(oopts), add = TRUE)
[17:44:53.337]         }
[17:44:53.337]         {
[17:44:53.337]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.337]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.337]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.337]                   envir = globalenv(), inherits = FALSE)
[17:44:53.337]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.337]             })
[17:44:53.337]         }
[17:44:53.337]     }, args = future.call.arguments)
[17:44:53.337] }
[17:44:53.337] Tweak future expression to call with '...' arguments ... DONE
[17:44:53.337] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.337] 
[17:44:53.338] getGlobalsAndPackages() ... DONE
[17:44:53.338] run() for ‘Future’ ...
[17:44:53.338] - state: ‘created’
[17:44:53.338] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:44:53.342] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.342] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:44:53.342]   - Field: ‘label’
[17:44:53.342]   - Field: ‘local’
[17:44:53.342]   - Field: ‘owner’
[17:44:53.342]   - Field: ‘envir’
[17:44:53.342]   - Field: ‘workers’
[17:44:53.342]   - Field: ‘packages’
[17:44:53.342]   - Field: ‘gc’
[17:44:53.343]   - Field: ‘job’
[17:44:53.343]   - Field: ‘conditions’
[17:44:53.343]   - Field: ‘expr’
[17:44:53.343]   - Field: ‘uuid’
[17:44:53.343]   - Field: ‘seed’
[17:44:53.343]   - Field: ‘version’
[17:44:53.343]   - Field: ‘result’
[17:44:53.343]   - Field: ‘asynchronous’
[17:44:53.343]   - Field: ‘calls’
[17:44:53.343]   - Field: ‘globals’
[17:44:53.344]   - Field: ‘stdout’
[17:44:53.344]   - Field: ‘earlySignal’
[17:44:53.344]   - Field: ‘lazy’
[17:44:53.344]   - Field: ‘state’
[17:44:53.344] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:44:53.344] - Launch lazy future ...
[17:44:53.344] Packages needed by the future expression (n = 0): <none>
[17:44:53.344] Packages needed by future strategies (n = 0): <none>
[17:44:53.345] {
[17:44:53.345]     {
[17:44:53.345]         {
[17:44:53.345]             ...future.startTime <- base::Sys.time()
[17:44:53.345]             {
[17:44:53.345]                 {
[17:44:53.345]                   {
[17:44:53.345]                     {
[17:44:53.345]                       base::local({
[17:44:53.345]                         has_future <- base::requireNamespace("future", 
[17:44:53.345]                           quietly = TRUE)
[17:44:53.345]                         if (has_future) {
[17:44:53.345]                           ns <- base::getNamespace("future")
[17:44:53.345]                           version <- ns[[".package"]][["version"]]
[17:44:53.345]                           if (is.null(version)) 
[17:44:53.345]                             version <- utils::packageVersion("future")
[17:44:53.345]                         }
[17:44:53.345]                         else {
[17:44:53.345]                           version <- NULL
[17:44:53.345]                         }
[17:44:53.345]                         if (!has_future || version < "1.8.0") {
[17:44:53.345]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:53.345]                             "", base::R.version$version.string), 
[17:44:53.345]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:53.345]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:53.345]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:53.345]                               "release", "version")], collapse = " "), 
[17:44:53.345]                             hostname = base::Sys.info()[["nodename"]])
[17:44:53.345]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:53.345]                             info)
[17:44:53.345]                           info <- base::paste(info, collapse = "; ")
[17:44:53.345]                           if (!has_future) {
[17:44:53.345]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:53.345]                               info)
[17:44:53.345]                           }
[17:44:53.345]                           else {
[17:44:53.345]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:53.345]                               info, version)
[17:44:53.345]                           }
[17:44:53.345]                           base::stop(msg)
[17:44:53.345]                         }
[17:44:53.345]                       })
[17:44:53.345]                     }
[17:44:53.345]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:53.345]                     base::options(mc.cores = 1L)
[17:44:53.345]                   }
[17:44:53.345]                   ...future.strategy.old <- future::plan("list")
[17:44:53.345]                   options(future.plan = NULL)
[17:44:53.345]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.345]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:53.345]                 }
[17:44:53.345]                 ...future.workdir <- getwd()
[17:44:53.345]             }
[17:44:53.345]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:53.345]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:53.345]         }
[17:44:53.345]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:53.345]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:53.345]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:53.345]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:53.345]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:53.345]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:53.345]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:53.345]             base::names(...future.oldOptions))
[17:44:53.345]     }
[17:44:53.345]     if (FALSE) {
[17:44:53.345]     }
[17:44:53.345]     else {
[17:44:53.345]         if (TRUE) {
[17:44:53.345]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:53.345]                 open = "w")
[17:44:53.345]         }
[17:44:53.345]         else {
[17:44:53.345]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:53.345]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:53.345]         }
[17:44:53.345]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:53.345]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:53.345]             base::sink(type = "output", split = FALSE)
[17:44:53.345]             base::close(...future.stdout)
[17:44:53.345]         }, add = TRUE)
[17:44:53.345]     }
[17:44:53.345]     ...future.frame <- base::sys.nframe()
[17:44:53.345]     ...future.conditions <- base::list()
[17:44:53.345]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:53.345]     if (FALSE) {
[17:44:53.345]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:53.345]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:53.345]     }
[17:44:53.345]     ...future.result <- base::tryCatch({
[17:44:53.345]         base::withCallingHandlers({
[17:44:53.345]             ...future.value <- base::withVisible(base::local({
[17:44:53.345]                 withCallingHandlers({
[17:44:53.345]                   {
[17:44:53.345]                     do.call(function(...) {
[17:44:53.345]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.345]                       if (!identical(...future.globals.maxSize.org, 
[17:44:53.345]                         ...future.globals.maxSize)) {
[17:44:53.345]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.345]                         on.exit(options(oopts), add = TRUE)
[17:44:53.345]                       }
[17:44:53.345]                       {
[17:44:53.345]                         lapply(seq_along(...future.elements_ii), 
[17:44:53.345]                           FUN = function(jj) {
[17:44:53.345]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.345]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.345]                               envir = globalenv(), inherits = FALSE)
[17:44:53.345]                             ...future.FUN(...future.X_jj, ...)
[17:44:53.345]                           })
[17:44:53.345]                       }
[17:44:53.345]                     }, args = future.call.arguments)
[17:44:53.345]                   }
[17:44:53.345]                 }, immediateCondition = function(cond) {
[17:44:53.345]                   save_rds <- function (object, pathname, ...) 
[17:44:53.345]                   {
[17:44:53.345]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:44:53.345]                     if (file_test("-f", pathname_tmp)) {
[17:44:53.345]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.345]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:44:53.345]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.345]                         fi_tmp[["mtime"]])
[17:44:53.345]                     }
[17:44:53.345]                     tryCatch({
[17:44:53.345]                       saveRDS(object, file = pathname_tmp, ...)
[17:44:53.345]                     }, error = function(ex) {
[17:44:53.345]                       msg <- conditionMessage(ex)
[17:44:53.345]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.345]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:44:53.345]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.345]                         fi_tmp[["mtime"]], msg)
[17:44:53.345]                       ex$message <- msg
[17:44:53.345]                       stop(ex)
[17:44:53.345]                     })
[17:44:53.345]                     stopifnot(file_test("-f", pathname_tmp))
[17:44:53.345]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:44:53.345]                     if (!res || file_test("-f", pathname_tmp)) {
[17:44:53.345]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.345]                       fi <- file.info(pathname)
[17:44:53.345]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:44:53.345]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.345]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:44:53.345]                         fi[["size"]], fi[["mtime"]])
[17:44:53.345]                       stop(msg)
[17:44:53.345]                     }
[17:44:53.345]                     invisible(pathname)
[17:44:53.345]                   }
[17:44:53.345]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:44:53.345]                     rootPath = tempdir()) 
[17:44:53.345]                   {
[17:44:53.345]                     obj <- list(time = Sys.time(), condition = cond)
[17:44:53.345]                     file <- tempfile(pattern = class(cond)[1], 
[17:44:53.345]                       tmpdir = path, fileext = ".rds")
[17:44:53.345]                     save_rds(obj, file)
[17:44:53.345]                   }
[17:44:53.345]                   saveImmediateCondition(cond, path = "/tmp/RtmpYaox9w/.future/immediateConditions")
[17:44:53.345]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.345]                   {
[17:44:53.345]                     inherits <- base::inherits
[17:44:53.345]                     invokeRestart <- base::invokeRestart
[17:44:53.345]                     is.null <- base::is.null
[17:44:53.345]                     muffled <- FALSE
[17:44:53.345]                     if (inherits(cond, "message")) {
[17:44:53.345]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:53.345]                       if (muffled) 
[17:44:53.345]                         invokeRestart("muffleMessage")
[17:44:53.345]                     }
[17:44:53.345]                     else if (inherits(cond, "warning")) {
[17:44:53.345]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:53.345]                       if (muffled) 
[17:44:53.345]                         invokeRestart("muffleWarning")
[17:44:53.345]                     }
[17:44:53.345]                     else if (inherits(cond, "condition")) {
[17:44:53.345]                       if (!is.null(pattern)) {
[17:44:53.345]                         computeRestarts <- base::computeRestarts
[17:44:53.345]                         grepl <- base::grepl
[17:44:53.345]                         restarts <- computeRestarts(cond)
[17:44:53.345]                         for (restart in restarts) {
[17:44:53.345]                           name <- restart$name
[17:44:53.345]                           if (is.null(name)) 
[17:44:53.345]                             next
[17:44:53.345]                           if (!grepl(pattern, name)) 
[17:44:53.345]                             next
[17:44:53.345]                           invokeRestart(restart)
[17:44:53.345]                           muffled <- TRUE
[17:44:53.345]                           break
[17:44:53.345]                         }
[17:44:53.345]                       }
[17:44:53.345]                     }
[17:44:53.345]                     invisible(muffled)
[17:44:53.345]                   }
[17:44:53.345]                   muffleCondition(cond)
[17:44:53.345]                 })
[17:44:53.345]             }))
[17:44:53.345]             future::FutureResult(value = ...future.value$value, 
[17:44:53.345]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.345]                   ...future.rng), globalenv = if (FALSE) 
[17:44:53.345]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:53.345]                     ...future.globalenv.names))
[17:44:53.345]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:53.345]         }, condition = base::local({
[17:44:53.345]             c <- base::c
[17:44:53.345]             inherits <- base::inherits
[17:44:53.345]             invokeRestart <- base::invokeRestart
[17:44:53.345]             length <- base::length
[17:44:53.345]             list <- base::list
[17:44:53.345]             seq.int <- base::seq.int
[17:44:53.345]             signalCondition <- base::signalCondition
[17:44:53.345]             sys.calls <- base::sys.calls
[17:44:53.345]             `[[` <- base::`[[`
[17:44:53.345]             `+` <- base::`+`
[17:44:53.345]             `<<-` <- base::`<<-`
[17:44:53.345]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:53.345]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:53.345]                   3L)]
[17:44:53.345]             }
[17:44:53.345]             function(cond) {
[17:44:53.345]                 is_error <- inherits(cond, "error")
[17:44:53.345]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:53.345]                   NULL)
[17:44:53.345]                 if (is_error) {
[17:44:53.345]                   sessionInformation <- function() {
[17:44:53.345]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:53.345]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:53.345]                       search = base::search(), system = base::Sys.info())
[17:44:53.345]                   }
[17:44:53.345]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.345]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:53.345]                     cond$call), session = sessionInformation(), 
[17:44:53.345]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:53.345]                   signalCondition(cond)
[17:44:53.345]                 }
[17:44:53.345]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:53.345]                 "immediateCondition"))) {
[17:44:53.345]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:53.345]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.345]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:53.345]                   if (TRUE && !signal) {
[17:44:53.345]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.345]                     {
[17:44:53.345]                       inherits <- base::inherits
[17:44:53.345]                       invokeRestart <- base::invokeRestart
[17:44:53.345]                       is.null <- base::is.null
[17:44:53.345]                       muffled <- FALSE
[17:44:53.345]                       if (inherits(cond, "message")) {
[17:44:53.345]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.345]                         if (muffled) 
[17:44:53.345]                           invokeRestart("muffleMessage")
[17:44:53.345]                       }
[17:44:53.345]                       else if (inherits(cond, "warning")) {
[17:44:53.345]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.345]                         if (muffled) 
[17:44:53.345]                           invokeRestart("muffleWarning")
[17:44:53.345]                       }
[17:44:53.345]                       else if (inherits(cond, "condition")) {
[17:44:53.345]                         if (!is.null(pattern)) {
[17:44:53.345]                           computeRestarts <- base::computeRestarts
[17:44:53.345]                           grepl <- base::grepl
[17:44:53.345]                           restarts <- computeRestarts(cond)
[17:44:53.345]                           for (restart in restarts) {
[17:44:53.345]                             name <- restart$name
[17:44:53.345]                             if (is.null(name)) 
[17:44:53.345]                               next
[17:44:53.345]                             if (!grepl(pattern, name)) 
[17:44:53.345]                               next
[17:44:53.345]                             invokeRestart(restart)
[17:44:53.345]                             muffled <- TRUE
[17:44:53.345]                             break
[17:44:53.345]                           }
[17:44:53.345]                         }
[17:44:53.345]                       }
[17:44:53.345]                       invisible(muffled)
[17:44:53.345]                     }
[17:44:53.345]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.345]                   }
[17:44:53.345]                 }
[17:44:53.345]                 else {
[17:44:53.345]                   if (TRUE) {
[17:44:53.345]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.345]                     {
[17:44:53.345]                       inherits <- base::inherits
[17:44:53.345]                       invokeRestart <- base::invokeRestart
[17:44:53.345]                       is.null <- base::is.null
[17:44:53.345]                       muffled <- FALSE
[17:44:53.345]                       if (inherits(cond, "message")) {
[17:44:53.345]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.345]                         if (muffled) 
[17:44:53.345]                           invokeRestart("muffleMessage")
[17:44:53.345]                       }
[17:44:53.345]                       else if (inherits(cond, "warning")) {
[17:44:53.345]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.345]                         if (muffled) 
[17:44:53.345]                           invokeRestart("muffleWarning")
[17:44:53.345]                       }
[17:44:53.345]                       else if (inherits(cond, "condition")) {
[17:44:53.345]                         if (!is.null(pattern)) {
[17:44:53.345]                           computeRestarts <- base::computeRestarts
[17:44:53.345]                           grepl <- base::grepl
[17:44:53.345]                           restarts <- computeRestarts(cond)
[17:44:53.345]                           for (restart in restarts) {
[17:44:53.345]                             name <- restart$name
[17:44:53.345]                             if (is.null(name)) 
[17:44:53.345]                               next
[17:44:53.345]                             if (!grepl(pattern, name)) 
[17:44:53.345]                               next
[17:44:53.345]                             invokeRestart(restart)
[17:44:53.345]                             muffled <- TRUE
[17:44:53.345]                             break
[17:44:53.345]                           }
[17:44:53.345]                         }
[17:44:53.345]                       }
[17:44:53.345]                       invisible(muffled)
[17:44:53.345]                     }
[17:44:53.345]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.345]                   }
[17:44:53.345]                 }
[17:44:53.345]             }
[17:44:53.345]         }))
[17:44:53.345]     }, error = function(ex) {
[17:44:53.345]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:53.345]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.345]                 ...future.rng), started = ...future.startTime, 
[17:44:53.345]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:53.345]             version = "1.8"), class = "FutureResult")
[17:44:53.345]     }, finally = {
[17:44:53.345]         if (!identical(...future.workdir, getwd())) 
[17:44:53.345]             setwd(...future.workdir)
[17:44:53.345]         {
[17:44:53.345]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:53.345]                 ...future.oldOptions$nwarnings <- NULL
[17:44:53.345]             }
[17:44:53.345]             base::options(...future.oldOptions)
[17:44:53.345]             if (.Platform$OS.type == "windows") {
[17:44:53.345]                 old_names <- names(...future.oldEnvVars)
[17:44:53.345]                 envs <- base::Sys.getenv()
[17:44:53.345]                 names <- names(envs)
[17:44:53.345]                 common <- intersect(names, old_names)
[17:44:53.345]                 added <- setdiff(names, old_names)
[17:44:53.345]                 removed <- setdiff(old_names, names)
[17:44:53.345]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:53.345]                   envs[common]]
[17:44:53.345]                 NAMES <- toupper(changed)
[17:44:53.345]                 args <- list()
[17:44:53.345]                 for (kk in seq_along(NAMES)) {
[17:44:53.345]                   name <- changed[[kk]]
[17:44:53.345]                   NAME <- NAMES[[kk]]
[17:44:53.345]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.345]                     next
[17:44:53.345]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.345]                 }
[17:44:53.345]                 NAMES <- toupper(added)
[17:44:53.345]                 for (kk in seq_along(NAMES)) {
[17:44:53.345]                   name <- added[[kk]]
[17:44:53.345]                   NAME <- NAMES[[kk]]
[17:44:53.345]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.345]                     next
[17:44:53.345]                   args[[name]] <- ""
[17:44:53.345]                 }
[17:44:53.345]                 NAMES <- toupper(removed)
[17:44:53.345]                 for (kk in seq_along(NAMES)) {
[17:44:53.345]                   name <- removed[[kk]]
[17:44:53.345]                   NAME <- NAMES[[kk]]
[17:44:53.345]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.345]                     next
[17:44:53.345]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.345]                 }
[17:44:53.345]                 if (length(args) > 0) 
[17:44:53.345]                   base::do.call(base::Sys.setenv, args = args)
[17:44:53.345]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:53.345]             }
[17:44:53.345]             else {
[17:44:53.345]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:53.345]             }
[17:44:53.345]             {
[17:44:53.345]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:53.345]                   0L) {
[17:44:53.345]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:53.345]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:53.345]                   base::options(opts)
[17:44:53.345]                 }
[17:44:53.345]                 {
[17:44:53.345]                   {
[17:44:53.345]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:53.345]                     NULL
[17:44:53.345]                   }
[17:44:53.345]                   options(future.plan = NULL)
[17:44:53.345]                   if (is.na(NA_character_)) 
[17:44:53.345]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.345]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:53.345]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:53.345]                     .init = FALSE)
[17:44:53.345]                 }
[17:44:53.345]             }
[17:44:53.345]         }
[17:44:53.345]     })
[17:44:53.345]     if (TRUE) {
[17:44:53.345]         base::sink(type = "output", split = FALSE)
[17:44:53.345]         if (TRUE) {
[17:44:53.345]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:53.345]         }
[17:44:53.345]         else {
[17:44:53.345]             ...future.result["stdout"] <- base::list(NULL)
[17:44:53.345]         }
[17:44:53.345]         base::close(...future.stdout)
[17:44:53.345]         ...future.stdout <- NULL
[17:44:53.345]     }
[17:44:53.345]     ...future.result$conditions <- ...future.conditions
[17:44:53.345]     ...future.result$finished <- base::Sys.time()
[17:44:53.345]     ...future.result
[17:44:53.345] }
[17:44:53.347] assign_globals() ...
[17:44:53.347] List of 5
[17:44:53.347]  $ ...future.FUN            :function (...)  
[17:44:53.347]  $ future.call.arguments    : list()
[17:44:53.347]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.347]  $ ...future.elements_ii    :List of 2
[17:44:53.347]   ..$ : int 0
[17:44:53.347]   ..$ : int 0
[17:44:53.347]  $ ...future.seeds_ii       :List of 2
[17:44:53.347]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[17:44:53.347]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[17:44:53.347]  $ ...future.globals.maxSize: NULL
[17:44:53.347]  - attr(*, "where")=List of 5
[17:44:53.347]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:44:53.347]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:44:53.347]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:44:53.347]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:44:53.347]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:44:53.347]  - attr(*, "resolved")= logi FALSE
[17:44:53.347]  - attr(*, "total_size")= num 616
[17:44:53.347]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.347]  - attr(*, "already-done")= logi TRUE
[17:44:53.354] - reassign environment for ‘...future.FUN’
[17:44:53.355] - copied ‘...future.FUN’ to environment
[17:44:53.355] - copied ‘future.call.arguments’ to environment
[17:44:53.355] - copied ‘...future.elements_ii’ to environment
[17:44:53.355] - copied ‘...future.seeds_ii’ to environment
[17:44:53.355] - copied ‘...future.globals.maxSize’ to environment
[17:44:53.355] assign_globals() ... done
[17:44:53.355] requestCore(): workers = 2
[17:44:53.357] MulticoreFuture started
[17:44:53.358] - Launch lazy future ... done
[17:44:53.358] run() for ‘MulticoreFuture’ ... done
[17:44:53.358] Created future:
[17:44:53.358] plan(): Setting new future strategy stack:
[17:44:53.359] List of future strategies:
[17:44:53.359] 1. sequential:
[17:44:53.359]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.359]    - tweaked: FALSE
[17:44:53.359]    - call: NULL
[17:44:53.360] plan(): nbrOfWorkers() = 1
[17:44:53.362] plan(): Setting new future strategy stack:
[17:44:53.362] List of future strategies:
[17:44:53.362] 1. multicore:
[17:44:53.362]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:53.362]    - tweaked: FALSE
[17:44:53.362]    - call: plan(strategy)
[17:44:53.367] plan(): nbrOfWorkers() = 2
[17:44:53.358] MulticoreFuture:
[17:44:53.358] Label: ‘future_replicate-1’
[17:44:53.358] Expression:
[17:44:53.358] {
[17:44:53.358]     do.call(function(...) {
[17:44:53.358]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.358]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.358]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.358]             on.exit(options(oopts), add = TRUE)
[17:44:53.358]         }
[17:44:53.358]         {
[17:44:53.358]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.358]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.358]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.358]                   envir = globalenv(), inherits = FALSE)
[17:44:53.358]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.358]             })
[17:44:53.358]         }
[17:44:53.358]     }, args = future.call.arguments)
[17:44:53.358] }
[17:44:53.358] Lazy evaluation: FALSE
[17:44:53.358] Asynchronous evaluation: TRUE
[17:44:53.358] Local evaluation: TRUE
[17:44:53.358] Environment: R_GlobalEnv
[17:44:53.358] Capture standard output: TRUE
[17:44:53.358] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:53.358] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:53.358] Packages: <none>
[17:44:53.358] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:53.358] Resolved: TRUE
[17:44:53.358] Value: <not collected>
[17:44:53.358] Conditions captured: <none>
[17:44:53.358] Early signaling: FALSE
[17:44:53.358] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:53.358] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.368] Chunk #1 of 2 ... DONE
[17:44:53.369] Chunk #2 of 2 ...
[17:44:53.369]  - Finding globals in 'X' for chunk #2 ...
[17:44:53.369] getGlobalsAndPackages() ...
[17:44:53.369] Searching for globals...
[17:44:53.369] 
[17:44:53.370] Searching for globals ... DONE
[17:44:53.370] - globals: [0] <none>
[17:44:53.370] getGlobalsAndPackages() ... DONE
[17:44:53.370]    + additional globals found: [n=0] 
[17:44:53.370]    + additional namespaces needed: [n=0] 
[17:44:53.370]  - Finding globals in 'X' for chunk #2 ... DONE
[17:44:53.370]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:53.370]  - seeds: [3] <seeds>
[17:44:53.371]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.371] getGlobalsAndPackages() ...
[17:44:53.371] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.371] Resolving globals: FALSE
[17:44:53.371] Tweak future expression to call with '...' arguments ...
[17:44:53.372] {
[17:44:53.372]     do.call(function(...) {
[17:44:53.372]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.372]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.372]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.372]             on.exit(options(oopts), add = TRUE)
[17:44:53.372]         }
[17:44:53.372]         {
[17:44:53.372]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.372]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.372]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.372]                   envir = globalenv(), inherits = FALSE)
[17:44:53.372]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.372]             })
[17:44:53.372]         }
[17:44:53.372]     }, args = future.call.arguments)
[17:44:53.372] }
[17:44:53.372] Tweak future expression to call with '...' arguments ... DONE
[17:44:53.373] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.373] 
[17:44:53.373] getGlobalsAndPackages() ... DONE
[17:44:53.373] run() for ‘Future’ ...
[17:44:53.374] - state: ‘created’
[17:44:53.374] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:44:53.378] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.378] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:44:53.379]   - Field: ‘label’
[17:44:53.379]   - Field: ‘local’
[17:44:53.379]   - Field: ‘owner’
[17:44:53.379]   - Field: ‘envir’
[17:44:53.379]   - Field: ‘workers’
[17:44:53.379]   - Field: ‘packages’
[17:44:53.380]   - Field: ‘gc’
[17:44:53.380]   - Field: ‘job’
[17:44:53.380]   - Field: ‘conditions’
[17:44:53.380]   - Field: ‘expr’
[17:44:53.380]   - Field: ‘uuid’
[17:44:53.380]   - Field: ‘seed’
[17:44:53.380]   - Field: ‘version’
[17:44:53.380]   - Field: ‘result’
[17:44:53.381]   - Field: ‘asynchronous’
[17:44:53.381]   - Field: ‘calls’
[17:44:53.381]   - Field: ‘globals’
[17:44:53.381]   - Field: ‘stdout’
[17:44:53.381]   - Field: ‘earlySignal’
[17:44:53.381]   - Field: ‘lazy’
[17:44:53.381]   - Field: ‘state’
[17:44:53.382] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:44:53.382] - Launch lazy future ...
[17:44:53.382] Packages needed by the future expression (n = 0): <none>
[17:44:53.382] Packages needed by future strategies (n = 0): <none>
[17:44:53.383] {
[17:44:53.383]     {
[17:44:53.383]         {
[17:44:53.383]             ...future.startTime <- base::Sys.time()
[17:44:53.383]             {
[17:44:53.383]                 {
[17:44:53.383]                   {
[17:44:53.383]                     {
[17:44:53.383]                       base::local({
[17:44:53.383]                         has_future <- base::requireNamespace("future", 
[17:44:53.383]                           quietly = TRUE)
[17:44:53.383]                         if (has_future) {
[17:44:53.383]                           ns <- base::getNamespace("future")
[17:44:53.383]                           version <- ns[[".package"]][["version"]]
[17:44:53.383]                           if (is.null(version)) 
[17:44:53.383]                             version <- utils::packageVersion("future")
[17:44:53.383]                         }
[17:44:53.383]                         else {
[17:44:53.383]                           version <- NULL
[17:44:53.383]                         }
[17:44:53.383]                         if (!has_future || version < "1.8.0") {
[17:44:53.383]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:53.383]                             "", base::R.version$version.string), 
[17:44:53.383]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:53.383]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:53.383]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:53.383]                               "release", "version")], collapse = " "), 
[17:44:53.383]                             hostname = base::Sys.info()[["nodename"]])
[17:44:53.383]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:53.383]                             info)
[17:44:53.383]                           info <- base::paste(info, collapse = "; ")
[17:44:53.383]                           if (!has_future) {
[17:44:53.383]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:53.383]                               info)
[17:44:53.383]                           }
[17:44:53.383]                           else {
[17:44:53.383]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:53.383]                               info, version)
[17:44:53.383]                           }
[17:44:53.383]                           base::stop(msg)
[17:44:53.383]                         }
[17:44:53.383]                       })
[17:44:53.383]                     }
[17:44:53.383]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:53.383]                     base::options(mc.cores = 1L)
[17:44:53.383]                   }
[17:44:53.383]                   ...future.strategy.old <- future::plan("list")
[17:44:53.383]                   options(future.plan = NULL)
[17:44:53.383]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.383]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:53.383]                 }
[17:44:53.383]                 ...future.workdir <- getwd()
[17:44:53.383]             }
[17:44:53.383]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:53.383]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:53.383]         }
[17:44:53.383]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:53.383]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:53.383]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:53.383]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:53.383]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:53.383]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:53.383]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:53.383]             base::names(...future.oldOptions))
[17:44:53.383]     }
[17:44:53.383]     if (FALSE) {
[17:44:53.383]     }
[17:44:53.383]     else {
[17:44:53.383]         if (TRUE) {
[17:44:53.383]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:53.383]                 open = "w")
[17:44:53.383]         }
[17:44:53.383]         else {
[17:44:53.383]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:53.383]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:53.383]         }
[17:44:53.383]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:53.383]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:53.383]             base::sink(type = "output", split = FALSE)
[17:44:53.383]             base::close(...future.stdout)
[17:44:53.383]         }, add = TRUE)
[17:44:53.383]     }
[17:44:53.383]     ...future.frame <- base::sys.nframe()
[17:44:53.383]     ...future.conditions <- base::list()
[17:44:53.383]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:53.383]     if (FALSE) {
[17:44:53.383]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:53.383]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:53.383]     }
[17:44:53.383]     ...future.result <- base::tryCatch({
[17:44:53.383]         base::withCallingHandlers({
[17:44:53.383]             ...future.value <- base::withVisible(base::local({
[17:44:53.383]                 withCallingHandlers({
[17:44:53.383]                   {
[17:44:53.383]                     do.call(function(...) {
[17:44:53.383]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.383]                       if (!identical(...future.globals.maxSize.org, 
[17:44:53.383]                         ...future.globals.maxSize)) {
[17:44:53.383]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.383]                         on.exit(options(oopts), add = TRUE)
[17:44:53.383]                       }
[17:44:53.383]                       {
[17:44:53.383]                         lapply(seq_along(...future.elements_ii), 
[17:44:53.383]                           FUN = function(jj) {
[17:44:53.383]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.383]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.383]                               envir = globalenv(), inherits = FALSE)
[17:44:53.383]                             ...future.FUN(...future.X_jj, ...)
[17:44:53.383]                           })
[17:44:53.383]                       }
[17:44:53.383]                     }, args = future.call.arguments)
[17:44:53.383]                   }
[17:44:53.383]                 }, immediateCondition = function(cond) {
[17:44:53.383]                   save_rds <- function (object, pathname, ...) 
[17:44:53.383]                   {
[17:44:53.383]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:44:53.383]                     if (file_test("-f", pathname_tmp)) {
[17:44:53.383]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.383]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:44:53.383]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.383]                         fi_tmp[["mtime"]])
[17:44:53.383]                     }
[17:44:53.383]                     tryCatch({
[17:44:53.383]                       saveRDS(object, file = pathname_tmp, ...)
[17:44:53.383]                     }, error = function(ex) {
[17:44:53.383]                       msg <- conditionMessage(ex)
[17:44:53.383]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.383]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:44:53.383]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.383]                         fi_tmp[["mtime"]], msg)
[17:44:53.383]                       ex$message <- msg
[17:44:53.383]                       stop(ex)
[17:44:53.383]                     })
[17:44:53.383]                     stopifnot(file_test("-f", pathname_tmp))
[17:44:53.383]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:44:53.383]                     if (!res || file_test("-f", pathname_tmp)) {
[17:44:53.383]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.383]                       fi <- file.info(pathname)
[17:44:53.383]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:44:53.383]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.383]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:44:53.383]                         fi[["size"]], fi[["mtime"]])
[17:44:53.383]                       stop(msg)
[17:44:53.383]                     }
[17:44:53.383]                     invisible(pathname)
[17:44:53.383]                   }
[17:44:53.383]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:44:53.383]                     rootPath = tempdir()) 
[17:44:53.383]                   {
[17:44:53.383]                     obj <- list(time = Sys.time(), condition = cond)
[17:44:53.383]                     file <- tempfile(pattern = class(cond)[1], 
[17:44:53.383]                       tmpdir = path, fileext = ".rds")
[17:44:53.383]                     save_rds(obj, file)
[17:44:53.383]                   }
[17:44:53.383]                   saveImmediateCondition(cond, path = "/tmp/RtmpYaox9w/.future/immediateConditions")
[17:44:53.383]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.383]                   {
[17:44:53.383]                     inherits <- base::inherits
[17:44:53.383]                     invokeRestart <- base::invokeRestart
[17:44:53.383]                     is.null <- base::is.null
[17:44:53.383]                     muffled <- FALSE
[17:44:53.383]                     if (inherits(cond, "message")) {
[17:44:53.383]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:53.383]                       if (muffled) 
[17:44:53.383]                         invokeRestart("muffleMessage")
[17:44:53.383]                     }
[17:44:53.383]                     else if (inherits(cond, "warning")) {
[17:44:53.383]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:53.383]                       if (muffled) 
[17:44:53.383]                         invokeRestart("muffleWarning")
[17:44:53.383]                     }
[17:44:53.383]                     else if (inherits(cond, "condition")) {
[17:44:53.383]                       if (!is.null(pattern)) {
[17:44:53.383]                         computeRestarts <- base::computeRestarts
[17:44:53.383]                         grepl <- base::grepl
[17:44:53.383]                         restarts <- computeRestarts(cond)
[17:44:53.383]                         for (restart in restarts) {
[17:44:53.383]                           name <- restart$name
[17:44:53.383]                           if (is.null(name)) 
[17:44:53.383]                             next
[17:44:53.383]                           if (!grepl(pattern, name)) 
[17:44:53.383]                             next
[17:44:53.383]                           invokeRestart(restart)
[17:44:53.383]                           muffled <- TRUE
[17:44:53.383]                           break
[17:44:53.383]                         }
[17:44:53.383]                       }
[17:44:53.383]                     }
[17:44:53.383]                     invisible(muffled)
[17:44:53.383]                   }
[17:44:53.383]                   muffleCondition(cond)
[17:44:53.383]                 })
[17:44:53.383]             }))
[17:44:53.383]             future::FutureResult(value = ...future.value$value, 
[17:44:53.383]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.383]                   ...future.rng), globalenv = if (FALSE) 
[17:44:53.383]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:53.383]                     ...future.globalenv.names))
[17:44:53.383]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:53.383]         }, condition = base::local({
[17:44:53.383]             c <- base::c
[17:44:53.383]             inherits <- base::inherits
[17:44:53.383]             invokeRestart <- base::invokeRestart
[17:44:53.383]             length <- base::length
[17:44:53.383]             list <- base::list
[17:44:53.383]             seq.int <- base::seq.int
[17:44:53.383]             signalCondition <- base::signalCondition
[17:44:53.383]             sys.calls <- base::sys.calls
[17:44:53.383]             `[[` <- base::`[[`
[17:44:53.383]             `+` <- base::`+`
[17:44:53.383]             `<<-` <- base::`<<-`
[17:44:53.383]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:53.383]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:53.383]                   3L)]
[17:44:53.383]             }
[17:44:53.383]             function(cond) {
[17:44:53.383]                 is_error <- inherits(cond, "error")
[17:44:53.383]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:53.383]                   NULL)
[17:44:53.383]                 if (is_error) {
[17:44:53.383]                   sessionInformation <- function() {
[17:44:53.383]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:53.383]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:53.383]                       search = base::search(), system = base::Sys.info())
[17:44:53.383]                   }
[17:44:53.383]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.383]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:53.383]                     cond$call), session = sessionInformation(), 
[17:44:53.383]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:53.383]                   signalCondition(cond)
[17:44:53.383]                 }
[17:44:53.383]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:53.383]                 "immediateCondition"))) {
[17:44:53.383]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:53.383]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.383]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:53.383]                   if (TRUE && !signal) {
[17:44:53.383]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.383]                     {
[17:44:53.383]                       inherits <- base::inherits
[17:44:53.383]                       invokeRestart <- base::invokeRestart
[17:44:53.383]                       is.null <- base::is.null
[17:44:53.383]                       muffled <- FALSE
[17:44:53.383]                       if (inherits(cond, "message")) {
[17:44:53.383]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.383]                         if (muffled) 
[17:44:53.383]                           invokeRestart("muffleMessage")
[17:44:53.383]                       }
[17:44:53.383]                       else if (inherits(cond, "warning")) {
[17:44:53.383]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.383]                         if (muffled) 
[17:44:53.383]                           invokeRestart("muffleWarning")
[17:44:53.383]                       }
[17:44:53.383]                       else if (inherits(cond, "condition")) {
[17:44:53.383]                         if (!is.null(pattern)) {
[17:44:53.383]                           computeRestarts <- base::computeRestarts
[17:44:53.383]                           grepl <- base::grepl
[17:44:53.383]                           restarts <- computeRestarts(cond)
[17:44:53.383]                           for (restart in restarts) {
[17:44:53.383]                             name <- restart$name
[17:44:53.383]                             if (is.null(name)) 
[17:44:53.383]                               next
[17:44:53.383]                             if (!grepl(pattern, name)) 
[17:44:53.383]                               next
[17:44:53.383]                             invokeRestart(restart)
[17:44:53.383]                             muffled <- TRUE
[17:44:53.383]                             break
[17:44:53.383]                           }
[17:44:53.383]                         }
[17:44:53.383]                       }
[17:44:53.383]                       invisible(muffled)
[17:44:53.383]                     }
[17:44:53.383]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.383]                   }
[17:44:53.383]                 }
[17:44:53.383]                 else {
[17:44:53.383]                   if (TRUE) {
[17:44:53.383]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.383]                     {
[17:44:53.383]                       inherits <- base::inherits
[17:44:53.383]                       invokeRestart <- base::invokeRestart
[17:44:53.383]                       is.null <- base::is.null
[17:44:53.383]                       muffled <- FALSE
[17:44:53.383]                       if (inherits(cond, "message")) {
[17:44:53.383]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.383]                         if (muffled) 
[17:44:53.383]                           invokeRestart("muffleMessage")
[17:44:53.383]                       }
[17:44:53.383]                       else if (inherits(cond, "warning")) {
[17:44:53.383]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.383]                         if (muffled) 
[17:44:53.383]                           invokeRestart("muffleWarning")
[17:44:53.383]                       }
[17:44:53.383]                       else if (inherits(cond, "condition")) {
[17:44:53.383]                         if (!is.null(pattern)) {
[17:44:53.383]                           computeRestarts <- base::computeRestarts
[17:44:53.383]                           grepl <- base::grepl
[17:44:53.383]                           restarts <- computeRestarts(cond)
[17:44:53.383]                           for (restart in restarts) {
[17:44:53.383]                             name <- restart$name
[17:44:53.383]                             if (is.null(name)) 
[17:44:53.383]                               next
[17:44:53.383]                             if (!grepl(pattern, name)) 
[17:44:53.383]                               next
[17:44:53.383]                             invokeRestart(restart)
[17:44:53.383]                             muffled <- TRUE
[17:44:53.383]                             break
[17:44:53.383]                           }
[17:44:53.383]                         }
[17:44:53.383]                       }
[17:44:53.383]                       invisible(muffled)
[17:44:53.383]                     }
[17:44:53.383]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.383]                   }
[17:44:53.383]                 }
[17:44:53.383]             }
[17:44:53.383]         }))
[17:44:53.383]     }, error = function(ex) {
[17:44:53.383]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:53.383]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.383]                 ...future.rng), started = ...future.startTime, 
[17:44:53.383]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:53.383]             version = "1.8"), class = "FutureResult")
[17:44:53.383]     }, finally = {
[17:44:53.383]         if (!identical(...future.workdir, getwd())) 
[17:44:53.383]             setwd(...future.workdir)
[17:44:53.383]         {
[17:44:53.383]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:53.383]                 ...future.oldOptions$nwarnings <- NULL
[17:44:53.383]             }
[17:44:53.383]             base::options(...future.oldOptions)
[17:44:53.383]             if (.Platform$OS.type == "windows") {
[17:44:53.383]                 old_names <- names(...future.oldEnvVars)
[17:44:53.383]                 envs <- base::Sys.getenv()
[17:44:53.383]                 names <- names(envs)
[17:44:53.383]                 common <- intersect(names, old_names)
[17:44:53.383]                 added <- setdiff(names, old_names)
[17:44:53.383]                 removed <- setdiff(old_names, names)
[17:44:53.383]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:53.383]                   envs[common]]
[17:44:53.383]                 NAMES <- toupper(changed)
[17:44:53.383]                 args <- list()
[17:44:53.383]                 for (kk in seq_along(NAMES)) {
[17:44:53.383]                   name <- changed[[kk]]
[17:44:53.383]                   NAME <- NAMES[[kk]]
[17:44:53.383]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.383]                     next
[17:44:53.383]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.383]                 }
[17:44:53.383]                 NAMES <- toupper(added)
[17:44:53.383]                 for (kk in seq_along(NAMES)) {
[17:44:53.383]                   name <- added[[kk]]
[17:44:53.383]                   NAME <- NAMES[[kk]]
[17:44:53.383]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.383]                     next
[17:44:53.383]                   args[[name]] <- ""
[17:44:53.383]                 }
[17:44:53.383]                 NAMES <- toupper(removed)
[17:44:53.383]                 for (kk in seq_along(NAMES)) {
[17:44:53.383]                   name <- removed[[kk]]
[17:44:53.383]                   NAME <- NAMES[[kk]]
[17:44:53.383]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.383]                     next
[17:44:53.383]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.383]                 }
[17:44:53.383]                 if (length(args) > 0) 
[17:44:53.383]                   base::do.call(base::Sys.setenv, args = args)
[17:44:53.383]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:53.383]             }
[17:44:53.383]             else {
[17:44:53.383]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:53.383]             }
[17:44:53.383]             {
[17:44:53.383]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:53.383]                   0L) {
[17:44:53.383]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:53.383]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:53.383]                   base::options(opts)
[17:44:53.383]                 }
[17:44:53.383]                 {
[17:44:53.383]                   {
[17:44:53.383]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:53.383]                     NULL
[17:44:53.383]                   }
[17:44:53.383]                   options(future.plan = NULL)
[17:44:53.383]                   if (is.na(NA_character_)) 
[17:44:53.383]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.383]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:53.383]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:53.383]                     .init = FALSE)
[17:44:53.383]                 }
[17:44:53.383]             }
[17:44:53.383]         }
[17:44:53.383]     })
[17:44:53.383]     if (TRUE) {
[17:44:53.383]         base::sink(type = "output", split = FALSE)
[17:44:53.383]         if (TRUE) {
[17:44:53.383]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:53.383]         }
[17:44:53.383]         else {
[17:44:53.383]             ...future.result["stdout"] <- base::list(NULL)
[17:44:53.383]         }
[17:44:53.383]         base::close(...future.stdout)
[17:44:53.383]         ...future.stdout <- NULL
[17:44:53.383]     }
[17:44:53.383]     ...future.result$conditions <- ...future.conditions
[17:44:53.383]     ...future.result$finished <- base::Sys.time()
[17:44:53.383]     ...future.result
[17:44:53.383] }
[17:44:53.386] assign_globals() ...
[17:44:53.386] List of 5
[17:44:53.386]  $ ...future.FUN            :function (...)  
[17:44:53.386]  $ future.call.arguments    : list()
[17:44:53.386]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.386]  $ ...future.elements_ii    :List of 3
[17:44:53.386]   ..$ : int 0
[17:44:53.386]   ..$ : int 0
[17:44:53.386]   ..$ : int 0
[17:44:53.386]  $ ...future.seeds_ii       :List of 3
[17:44:53.386]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[17:44:53.386]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[17:44:53.386]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[17:44:53.386]  $ ...future.globals.maxSize: NULL
[17:44:53.386]  - attr(*, "where")=List of 5
[17:44:53.386]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:44:53.386]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:44:53.386]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:44:53.386]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:44:53.386]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:44:53.386]  - attr(*, "resolved")= logi FALSE
[17:44:53.386]  - attr(*, "total_size")= num 616
[17:44:53.386]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.386]  - attr(*, "already-done")= logi TRUE
[17:44:53.395] - reassign environment for ‘...future.FUN’
[17:44:53.395] - copied ‘...future.FUN’ to environment
[17:44:53.395] - copied ‘future.call.arguments’ to environment
[17:44:53.396] - copied ‘...future.elements_ii’ to environment
[17:44:53.396] - copied ‘...future.seeds_ii’ to environment
[17:44:53.396] - copied ‘...future.globals.maxSize’ to environment
[17:44:53.396] assign_globals() ... done
[17:44:53.396] requestCore(): workers = 2
[17:44:53.398] MulticoreFuture started
[17:44:53.399] - Launch lazy future ... done
[17:44:53.399] run() for ‘MulticoreFuture’ ... done
[17:44:53.399] Created future:
[17:44:53.399] plan(): Setting new future strategy stack:
[17:44:53.400] List of future strategies:
[17:44:53.400] 1. sequential:
[17:44:53.400]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.400]    - tweaked: FALSE
[17:44:53.400]    - call: NULL
[17:44:53.401] plan(): nbrOfWorkers() = 1
[17:44:53.406] plan(): Setting new future strategy stack:
[17:44:53.406] List of future strategies:
[17:44:53.406] 1. multicore:
[17:44:53.406]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:53.406]    - tweaked: FALSE
[17:44:53.406]    - call: plan(strategy)
[17:44:53.412] plan(): nbrOfWorkers() = 2
[17:44:53.399] MulticoreFuture:
[17:44:53.399] Label: ‘future_replicate-2’
[17:44:53.399] Expression:
[17:44:53.399] {
[17:44:53.399]     do.call(function(...) {
[17:44:53.399]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.399]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.399]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.399]             on.exit(options(oopts), add = TRUE)
[17:44:53.399]         }
[17:44:53.399]         {
[17:44:53.399]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.399]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.399]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.399]                   envir = globalenv(), inherits = FALSE)
[17:44:53.399]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.399]             })
[17:44:53.399]         }
[17:44:53.399]     }, args = future.call.arguments)
[17:44:53.399] }
[17:44:53.399] Lazy evaluation: FALSE
[17:44:53.399] Asynchronous evaluation: TRUE
[17:44:53.399] Local evaluation: TRUE
[17:44:53.399] Environment: R_GlobalEnv
[17:44:53.399] Capture standard output: TRUE
[17:44:53.399] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:53.399] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:53.399] Packages: <none>
[17:44:53.399] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:53.399] Resolved: TRUE
[17:44:53.399] Value: <not collected>
[17:44:53.399] Conditions captured: <none>
[17:44:53.399] Early signaling: FALSE
[17:44:53.399] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:53.399] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.413] Chunk #2 of 2 ... DONE
[17:44:53.413] Launching 2 futures (chunks) ... DONE
[17:44:53.413] Resolving 2 futures (chunks) ...
[17:44:53.413] resolve() on list ...
[17:44:53.414]  recursive: 0
[17:44:53.414]  length: 2
[17:44:53.414] 
[17:44:53.415] Future #1
[17:44:53.415] result() for MulticoreFuture ...
[17:44:53.416] result() for MulticoreFuture ...
[17:44:53.416] result() for MulticoreFuture ... done
[17:44:53.416] result() for MulticoreFuture ... done
[17:44:53.416] result() for MulticoreFuture ...
[17:44:53.417] result() for MulticoreFuture ... done
[17:44:53.417] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:44:53.417] - nx: 2
[17:44:53.417] - relay: TRUE
[17:44:53.417] - stdout: TRUE
[17:44:53.418] - signal: TRUE
[17:44:53.418] - resignal: FALSE
[17:44:53.418] - force: TRUE
[17:44:53.418] - relayed: [n=2] FALSE, FALSE
[17:44:53.418] - queued futures: [n=2] FALSE, FALSE
[17:44:53.418]  - until=1
[17:44:53.418]  - relaying element #1
[17:44:53.419] result() for MulticoreFuture ...
[17:44:53.419] result() for MulticoreFuture ... done
[17:44:53.419] result() for MulticoreFuture ...
[17:44:53.419] result() for MulticoreFuture ... done
[17:44:53.419] result() for MulticoreFuture ...
[17:44:53.420] result() for MulticoreFuture ... done
[17:44:53.420] result() for MulticoreFuture ...
[17:44:53.420] result() for MulticoreFuture ... done
[17:44:53.420] - relayed: [n=2] TRUE, FALSE
[17:44:53.420] - queued futures: [n=2] TRUE, FALSE
[17:44:53.420] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:44:53.420]  length: 1 (resolved future 1)
[17:44:53.421] Future #2
[17:44:53.421] result() for MulticoreFuture ...
[17:44:53.421] result() for MulticoreFuture ...
[17:44:53.422] result() for MulticoreFuture ... done
[17:44:53.422] result() for MulticoreFuture ... done
[17:44:53.422] result() for MulticoreFuture ...
[17:44:53.422] result() for MulticoreFuture ... done
[17:44:53.422] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:44:53.422] - nx: 2
[17:44:53.423] - relay: TRUE
[17:44:53.423] - stdout: TRUE
[17:44:53.423] - signal: TRUE
[17:44:53.423] - resignal: FALSE
[17:44:53.423] - force: TRUE
[17:44:53.423] - relayed: [n=2] TRUE, FALSE
[17:44:53.423] - queued futures: [n=2] TRUE, FALSE
[17:44:53.423]  - until=2
[17:44:53.424]  - relaying element #2
[17:44:53.424] result() for MulticoreFuture ...
[17:44:53.424] result() for MulticoreFuture ... done
[17:44:53.424] result() for MulticoreFuture ...
[17:44:53.424] result() for MulticoreFuture ... done
[17:44:53.424] result() for MulticoreFuture ...
[17:44:53.424] result() for MulticoreFuture ... done
[17:44:53.424] result() for MulticoreFuture ...
[17:44:53.424] result() for MulticoreFuture ... done
[17:44:53.425] - relayed: [n=2] TRUE, TRUE
[17:44:53.425] - queued futures: [n=2] TRUE, TRUE
[17:44:53.425] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:44:53.425]  length: 0 (resolved future 2)
[17:44:53.425] Relaying remaining futures
[17:44:53.425] signalConditionsASAP(NULL, pos=0) ...
[17:44:53.425] - nx: 2
[17:44:53.425] - relay: TRUE
[17:44:53.425] - stdout: TRUE
[17:44:53.426] - signal: TRUE
[17:44:53.426] - resignal: FALSE
[17:44:53.426] - force: TRUE
[17:44:53.426] - relayed: [n=2] TRUE, TRUE
[17:44:53.426] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:44:53.426] - relayed: [n=2] TRUE, TRUE
[17:44:53.426] - queued futures: [n=2] TRUE, TRUE
[17:44:53.426] signalConditionsASAP(NULL, pos=0) ... done
[17:44:53.426] resolve() on list ... DONE
[17:44:53.427] result() for MulticoreFuture ...
[17:44:53.427] result() for MulticoreFuture ... done
[17:44:53.427] result() for MulticoreFuture ...
[17:44:53.427] result() for MulticoreFuture ... done
[17:44:53.427] result() for MulticoreFuture ...
[17:44:53.427] result() for MulticoreFuture ... done
[17:44:53.427] result() for MulticoreFuture ...
[17:44:53.427] result() for MulticoreFuture ... done
[17:44:53.428]  - Number of value chunks collected: 2
[17:44:53.428] Resolving 2 futures (chunks) ... DONE
[17:44:53.428] Reducing values from 2 chunks ...
[17:44:53.428]  - Number of values collected after concatenation: 5
[17:44:53.428]  - Number of values expected: 5
[17:44:53.428] Reducing values from 2 chunks ... DONE
[17:44:53.428] future_lapply() ... DONE
[17:44:53.428] future_lapply() ...
[17:44:53.429] Generating random seeds ...
[17:44:53.429] Generating random seed streams for 5 elements ...
[17:44:53.429] Generating random seed streams for 5 elements ... DONE
[17:44:53.429] Generating random seeds ... DONE
[17:44:53.430] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:44:53.434] Number of chunks: 2
[17:44:53.434] getGlobalsAndPackagesXApply() ...
[17:44:53.434]  - future.globals: TRUE
[17:44:53.434] getGlobalsAndPackages() ...
[17:44:53.435] Searching for globals...
[17:44:53.436] - globals found: [2] ‘FUN’, ‘sample’
[17:44:53.436] Searching for globals ... DONE
[17:44:53.436] Resolving globals: FALSE
[17:44:53.437] The total size of the 1 globals is 616 bytes (616 bytes)
[17:44:53.437] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:44:53.437] - globals: [1] ‘FUN’
[17:44:53.437] 
[17:44:53.437] getGlobalsAndPackages() ... DONE
[17:44:53.437]  - globals found/used: [n=1] ‘FUN’
[17:44:53.437]  - needed namespaces: [n=0] 
[17:44:53.438] Finding globals ... DONE
[17:44:53.438]  - use_args: TRUE
[17:44:53.438]  - Getting '...' globals ...
[17:44:53.438] resolve() on list ...
[17:44:53.438]  recursive: 0
[17:44:53.438]  length: 1
[17:44:53.438]  elements: ‘...’
[17:44:53.439]  length: 0 (resolved future 1)
[17:44:53.439] resolve() on list ... DONE
[17:44:53.439]    - '...' content: [n=0] 
[17:44:53.439] List of 1
[17:44:53.439]  $ ...: list()
[17:44:53.439]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.439]  - attr(*, "where")=List of 1
[17:44:53.439]   ..$ ...:<environment: 0x558387b9c648> 
[17:44:53.439]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.439]  - attr(*, "resolved")= logi TRUE
[17:44:53.439]  - attr(*, "total_size")= num NA
[17:44:53.442]  - Getting '...' globals ... DONE
[17:44:53.442] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:44:53.442] List of 2
[17:44:53.442]  $ ...future.FUN:function (...)  
[17:44:53.442]  $ ...          : list()
[17:44:53.442]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.442]  - attr(*, "where")=List of 2
[17:44:53.442]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:44:53.442]   ..$ ...          :<environment: 0x558387b9c648> 
[17:44:53.442]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.442]  - attr(*, "resolved")= logi FALSE
[17:44:53.442]  - attr(*, "total_size")= num 616
[17:44:53.447] Packages to be attached in all futures: [n=0] 
[17:44:53.447] getGlobalsAndPackagesXApply() ... DONE
[17:44:53.447] Number of futures (= number of chunks): 2
[17:44:53.447] Launching 2 futures (chunks) ...
[17:44:53.447] Chunk #1 of 2 ...
[17:44:53.448]  - Finding globals in 'X' for chunk #1 ...
[17:44:53.448] getGlobalsAndPackages() ...
[17:44:53.448] Searching for globals...
[17:44:53.448] 
[17:44:53.448] Searching for globals ... DONE
[17:44:53.448] - globals: [0] <none>
[17:44:53.448] getGlobalsAndPackages() ... DONE
[17:44:53.448]    + additional globals found: [n=0] 
[17:44:53.448]    + additional namespaces needed: [n=0] 
[17:44:53.449]  - Finding globals in 'X' for chunk #1 ... DONE
[17:44:53.449]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:53.449]  - seeds: [2] <seeds>
[17:44:53.449]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.449] getGlobalsAndPackages() ...
[17:44:53.449] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.449] Resolving globals: FALSE
[17:44:53.449] Tweak future expression to call with '...' arguments ...
[17:44:53.449] {
[17:44:53.449]     do.call(function(...) {
[17:44:53.449]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.449]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.449]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.449]             on.exit(options(oopts), add = TRUE)
[17:44:53.449]         }
[17:44:53.449]         {
[17:44:53.449]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.449]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.449]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.449]                   envir = globalenv(), inherits = FALSE)
[17:44:53.449]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.449]             })
[17:44:53.449]         }
[17:44:53.449]     }, args = future.call.arguments)
[17:44:53.449] }
[17:44:53.450] Tweak future expression to call with '...' arguments ... DONE
[17:44:53.450] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.450] 
[17:44:53.450] getGlobalsAndPackages() ... DONE
[17:44:53.451] run() for ‘Future’ ...
[17:44:53.451] - state: ‘created’
[17:44:53.451] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:44:53.454] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.454] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:44:53.455]   - Field: ‘label’
[17:44:53.455]   - Field: ‘local’
[17:44:53.455]   - Field: ‘owner’
[17:44:53.455]   - Field: ‘envir’
[17:44:53.455]   - Field: ‘workers’
[17:44:53.455]   - Field: ‘packages’
[17:44:53.455]   - Field: ‘gc’
[17:44:53.455]   - Field: ‘job’
[17:44:53.455]   - Field: ‘conditions’
[17:44:53.455]   - Field: ‘expr’
[17:44:53.455]   - Field: ‘uuid’
[17:44:53.456]   - Field: ‘seed’
[17:44:53.456]   - Field: ‘version’
[17:44:53.456]   - Field: ‘result’
[17:44:53.456]   - Field: ‘asynchronous’
[17:44:53.456]   - Field: ‘calls’
[17:44:53.456]   - Field: ‘globals’
[17:44:53.456]   - Field: ‘stdout’
[17:44:53.456]   - Field: ‘earlySignal’
[17:44:53.456]   - Field: ‘lazy’
[17:44:53.456]   - Field: ‘state’
[17:44:53.456] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:44:53.457] - Launch lazy future ...
[17:44:53.457] Packages needed by the future expression (n = 0): <none>
[17:44:53.457] Packages needed by future strategies (n = 0): <none>
[17:44:53.457] {
[17:44:53.457]     {
[17:44:53.457]         {
[17:44:53.457]             ...future.startTime <- base::Sys.time()
[17:44:53.457]             {
[17:44:53.457]                 {
[17:44:53.457]                   {
[17:44:53.457]                     {
[17:44:53.457]                       base::local({
[17:44:53.457]                         has_future <- base::requireNamespace("future", 
[17:44:53.457]                           quietly = TRUE)
[17:44:53.457]                         if (has_future) {
[17:44:53.457]                           ns <- base::getNamespace("future")
[17:44:53.457]                           version <- ns[[".package"]][["version"]]
[17:44:53.457]                           if (is.null(version)) 
[17:44:53.457]                             version <- utils::packageVersion("future")
[17:44:53.457]                         }
[17:44:53.457]                         else {
[17:44:53.457]                           version <- NULL
[17:44:53.457]                         }
[17:44:53.457]                         if (!has_future || version < "1.8.0") {
[17:44:53.457]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:53.457]                             "", base::R.version$version.string), 
[17:44:53.457]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:53.457]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:53.457]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:53.457]                               "release", "version")], collapse = " "), 
[17:44:53.457]                             hostname = base::Sys.info()[["nodename"]])
[17:44:53.457]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:53.457]                             info)
[17:44:53.457]                           info <- base::paste(info, collapse = "; ")
[17:44:53.457]                           if (!has_future) {
[17:44:53.457]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:53.457]                               info)
[17:44:53.457]                           }
[17:44:53.457]                           else {
[17:44:53.457]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:53.457]                               info, version)
[17:44:53.457]                           }
[17:44:53.457]                           base::stop(msg)
[17:44:53.457]                         }
[17:44:53.457]                       })
[17:44:53.457]                     }
[17:44:53.457]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:53.457]                     base::options(mc.cores = 1L)
[17:44:53.457]                   }
[17:44:53.457]                   ...future.strategy.old <- future::plan("list")
[17:44:53.457]                   options(future.plan = NULL)
[17:44:53.457]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.457]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:53.457]                 }
[17:44:53.457]                 ...future.workdir <- getwd()
[17:44:53.457]             }
[17:44:53.457]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:53.457]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:53.457]         }
[17:44:53.457]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:53.457]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:53.457]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:53.457]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:53.457]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:53.457]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:53.457]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:53.457]             base::names(...future.oldOptions))
[17:44:53.457]     }
[17:44:53.457]     if (FALSE) {
[17:44:53.457]     }
[17:44:53.457]     else {
[17:44:53.457]         if (TRUE) {
[17:44:53.457]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:53.457]                 open = "w")
[17:44:53.457]         }
[17:44:53.457]         else {
[17:44:53.457]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:53.457]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:53.457]         }
[17:44:53.457]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:53.457]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:53.457]             base::sink(type = "output", split = FALSE)
[17:44:53.457]             base::close(...future.stdout)
[17:44:53.457]         }, add = TRUE)
[17:44:53.457]     }
[17:44:53.457]     ...future.frame <- base::sys.nframe()
[17:44:53.457]     ...future.conditions <- base::list()
[17:44:53.457]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:53.457]     if (FALSE) {
[17:44:53.457]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:53.457]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:53.457]     }
[17:44:53.457]     ...future.result <- base::tryCatch({
[17:44:53.457]         base::withCallingHandlers({
[17:44:53.457]             ...future.value <- base::withVisible(base::local({
[17:44:53.457]                 withCallingHandlers({
[17:44:53.457]                   {
[17:44:53.457]                     do.call(function(...) {
[17:44:53.457]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.457]                       if (!identical(...future.globals.maxSize.org, 
[17:44:53.457]                         ...future.globals.maxSize)) {
[17:44:53.457]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.457]                         on.exit(options(oopts), add = TRUE)
[17:44:53.457]                       }
[17:44:53.457]                       {
[17:44:53.457]                         lapply(seq_along(...future.elements_ii), 
[17:44:53.457]                           FUN = function(jj) {
[17:44:53.457]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.457]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.457]                               envir = globalenv(), inherits = FALSE)
[17:44:53.457]                             ...future.FUN(...future.X_jj, ...)
[17:44:53.457]                           })
[17:44:53.457]                       }
[17:44:53.457]                     }, args = future.call.arguments)
[17:44:53.457]                   }
[17:44:53.457]                 }, immediateCondition = function(cond) {
[17:44:53.457]                   save_rds <- function (object, pathname, ...) 
[17:44:53.457]                   {
[17:44:53.457]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:44:53.457]                     if (file_test("-f", pathname_tmp)) {
[17:44:53.457]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.457]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:44:53.457]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.457]                         fi_tmp[["mtime"]])
[17:44:53.457]                     }
[17:44:53.457]                     tryCatch({
[17:44:53.457]                       saveRDS(object, file = pathname_tmp, ...)
[17:44:53.457]                     }, error = function(ex) {
[17:44:53.457]                       msg <- conditionMessage(ex)
[17:44:53.457]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.457]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:44:53.457]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.457]                         fi_tmp[["mtime"]], msg)
[17:44:53.457]                       ex$message <- msg
[17:44:53.457]                       stop(ex)
[17:44:53.457]                     })
[17:44:53.457]                     stopifnot(file_test("-f", pathname_tmp))
[17:44:53.457]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:44:53.457]                     if (!res || file_test("-f", pathname_tmp)) {
[17:44:53.457]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.457]                       fi <- file.info(pathname)
[17:44:53.457]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:44:53.457]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.457]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:44:53.457]                         fi[["size"]], fi[["mtime"]])
[17:44:53.457]                       stop(msg)
[17:44:53.457]                     }
[17:44:53.457]                     invisible(pathname)
[17:44:53.457]                   }
[17:44:53.457]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:44:53.457]                     rootPath = tempdir()) 
[17:44:53.457]                   {
[17:44:53.457]                     obj <- list(time = Sys.time(), condition = cond)
[17:44:53.457]                     file <- tempfile(pattern = class(cond)[1], 
[17:44:53.457]                       tmpdir = path, fileext = ".rds")
[17:44:53.457]                     save_rds(obj, file)
[17:44:53.457]                   }
[17:44:53.457]                   saveImmediateCondition(cond, path = "/tmp/RtmpYaox9w/.future/immediateConditions")
[17:44:53.457]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.457]                   {
[17:44:53.457]                     inherits <- base::inherits
[17:44:53.457]                     invokeRestart <- base::invokeRestart
[17:44:53.457]                     is.null <- base::is.null
[17:44:53.457]                     muffled <- FALSE
[17:44:53.457]                     if (inherits(cond, "message")) {
[17:44:53.457]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:53.457]                       if (muffled) 
[17:44:53.457]                         invokeRestart("muffleMessage")
[17:44:53.457]                     }
[17:44:53.457]                     else if (inherits(cond, "warning")) {
[17:44:53.457]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:53.457]                       if (muffled) 
[17:44:53.457]                         invokeRestart("muffleWarning")
[17:44:53.457]                     }
[17:44:53.457]                     else if (inherits(cond, "condition")) {
[17:44:53.457]                       if (!is.null(pattern)) {
[17:44:53.457]                         computeRestarts <- base::computeRestarts
[17:44:53.457]                         grepl <- base::grepl
[17:44:53.457]                         restarts <- computeRestarts(cond)
[17:44:53.457]                         for (restart in restarts) {
[17:44:53.457]                           name <- restart$name
[17:44:53.457]                           if (is.null(name)) 
[17:44:53.457]                             next
[17:44:53.457]                           if (!grepl(pattern, name)) 
[17:44:53.457]                             next
[17:44:53.457]                           invokeRestart(restart)
[17:44:53.457]                           muffled <- TRUE
[17:44:53.457]                           break
[17:44:53.457]                         }
[17:44:53.457]                       }
[17:44:53.457]                     }
[17:44:53.457]                     invisible(muffled)
[17:44:53.457]                   }
[17:44:53.457]                   muffleCondition(cond)
[17:44:53.457]                 })
[17:44:53.457]             }))
[17:44:53.457]             future::FutureResult(value = ...future.value$value, 
[17:44:53.457]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.457]                   ...future.rng), globalenv = if (FALSE) 
[17:44:53.457]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:53.457]                     ...future.globalenv.names))
[17:44:53.457]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:53.457]         }, condition = base::local({
[17:44:53.457]             c <- base::c
[17:44:53.457]             inherits <- base::inherits
[17:44:53.457]             invokeRestart <- base::invokeRestart
[17:44:53.457]             length <- base::length
[17:44:53.457]             list <- base::list
[17:44:53.457]             seq.int <- base::seq.int
[17:44:53.457]             signalCondition <- base::signalCondition
[17:44:53.457]             sys.calls <- base::sys.calls
[17:44:53.457]             `[[` <- base::`[[`
[17:44:53.457]             `+` <- base::`+`
[17:44:53.457]             `<<-` <- base::`<<-`
[17:44:53.457]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:53.457]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:53.457]                   3L)]
[17:44:53.457]             }
[17:44:53.457]             function(cond) {
[17:44:53.457]                 is_error <- inherits(cond, "error")
[17:44:53.457]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:53.457]                   NULL)
[17:44:53.457]                 if (is_error) {
[17:44:53.457]                   sessionInformation <- function() {
[17:44:53.457]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:53.457]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:53.457]                       search = base::search(), system = base::Sys.info())
[17:44:53.457]                   }
[17:44:53.457]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.457]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:53.457]                     cond$call), session = sessionInformation(), 
[17:44:53.457]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:53.457]                   signalCondition(cond)
[17:44:53.457]                 }
[17:44:53.457]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:53.457]                 "immediateCondition"))) {
[17:44:53.457]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:53.457]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.457]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:53.457]                   if (TRUE && !signal) {
[17:44:53.457]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.457]                     {
[17:44:53.457]                       inherits <- base::inherits
[17:44:53.457]                       invokeRestart <- base::invokeRestart
[17:44:53.457]                       is.null <- base::is.null
[17:44:53.457]                       muffled <- FALSE
[17:44:53.457]                       if (inherits(cond, "message")) {
[17:44:53.457]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.457]                         if (muffled) 
[17:44:53.457]                           invokeRestart("muffleMessage")
[17:44:53.457]                       }
[17:44:53.457]                       else if (inherits(cond, "warning")) {
[17:44:53.457]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.457]                         if (muffled) 
[17:44:53.457]                           invokeRestart("muffleWarning")
[17:44:53.457]                       }
[17:44:53.457]                       else if (inherits(cond, "condition")) {
[17:44:53.457]                         if (!is.null(pattern)) {
[17:44:53.457]                           computeRestarts <- base::computeRestarts
[17:44:53.457]                           grepl <- base::grepl
[17:44:53.457]                           restarts <- computeRestarts(cond)
[17:44:53.457]                           for (restart in restarts) {
[17:44:53.457]                             name <- restart$name
[17:44:53.457]                             if (is.null(name)) 
[17:44:53.457]                               next
[17:44:53.457]                             if (!grepl(pattern, name)) 
[17:44:53.457]                               next
[17:44:53.457]                             invokeRestart(restart)
[17:44:53.457]                             muffled <- TRUE
[17:44:53.457]                             break
[17:44:53.457]                           }
[17:44:53.457]                         }
[17:44:53.457]                       }
[17:44:53.457]                       invisible(muffled)
[17:44:53.457]                     }
[17:44:53.457]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.457]                   }
[17:44:53.457]                 }
[17:44:53.457]                 else {
[17:44:53.457]                   if (TRUE) {
[17:44:53.457]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.457]                     {
[17:44:53.457]                       inherits <- base::inherits
[17:44:53.457]                       invokeRestart <- base::invokeRestart
[17:44:53.457]                       is.null <- base::is.null
[17:44:53.457]                       muffled <- FALSE
[17:44:53.457]                       if (inherits(cond, "message")) {
[17:44:53.457]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.457]                         if (muffled) 
[17:44:53.457]                           invokeRestart("muffleMessage")
[17:44:53.457]                       }
[17:44:53.457]                       else if (inherits(cond, "warning")) {
[17:44:53.457]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.457]                         if (muffled) 
[17:44:53.457]                           invokeRestart("muffleWarning")
[17:44:53.457]                       }
[17:44:53.457]                       else if (inherits(cond, "condition")) {
[17:44:53.457]                         if (!is.null(pattern)) {
[17:44:53.457]                           computeRestarts <- base::computeRestarts
[17:44:53.457]                           grepl <- base::grepl
[17:44:53.457]                           restarts <- computeRestarts(cond)
[17:44:53.457]                           for (restart in restarts) {
[17:44:53.457]                             name <- restart$name
[17:44:53.457]                             if (is.null(name)) 
[17:44:53.457]                               next
[17:44:53.457]                             if (!grepl(pattern, name)) 
[17:44:53.457]                               next
[17:44:53.457]                             invokeRestart(restart)
[17:44:53.457]                             muffled <- TRUE
[17:44:53.457]                             break
[17:44:53.457]                           }
[17:44:53.457]                         }
[17:44:53.457]                       }
[17:44:53.457]                       invisible(muffled)
[17:44:53.457]                     }
[17:44:53.457]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.457]                   }
[17:44:53.457]                 }
[17:44:53.457]             }
[17:44:53.457]         }))
[17:44:53.457]     }, error = function(ex) {
[17:44:53.457]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:53.457]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.457]                 ...future.rng), started = ...future.startTime, 
[17:44:53.457]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:53.457]             version = "1.8"), class = "FutureResult")
[17:44:53.457]     }, finally = {
[17:44:53.457]         if (!identical(...future.workdir, getwd())) 
[17:44:53.457]             setwd(...future.workdir)
[17:44:53.457]         {
[17:44:53.457]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:53.457]                 ...future.oldOptions$nwarnings <- NULL
[17:44:53.457]             }
[17:44:53.457]             base::options(...future.oldOptions)
[17:44:53.457]             if (.Platform$OS.type == "windows") {
[17:44:53.457]                 old_names <- names(...future.oldEnvVars)
[17:44:53.457]                 envs <- base::Sys.getenv()
[17:44:53.457]                 names <- names(envs)
[17:44:53.457]                 common <- intersect(names, old_names)
[17:44:53.457]                 added <- setdiff(names, old_names)
[17:44:53.457]                 removed <- setdiff(old_names, names)
[17:44:53.457]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:53.457]                   envs[common]]
[17:44:53.457]                 NAMES <- toupper(changed)
[17:44:53.457]                 args <- list()
[17:44:53.457]                 for (kk in seq_along(NAMES)) {
[17:44:53.457]                   name <- changed[[kk]]
[17:44:53.457]                   NAME <- NAMES[[kk]]
[17:44:53.457]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.457]                     next
[17:44:53.457]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.457]                 }
[17:44:53.457]                 NAMES <- toupper(added)
[17:44:53.457]                 for (kk in seq_along(NAMES)) {
[17:44:53.457]                   name <- added[[kk]]
[17:44:53.457]                   NAME <- NAMES[[kk]]
[17:44:53.457]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.457]                     next
[17:44:53.457]                   args[[name]] <- ""
[17:44:53.457]                 }
[17:44:53.457]                 NAMES <- toupper(removed)
[17:44:53.457]                 for (kk in seq_along(NAMES)) {
[17:44:53.457]                   name <- removed[[kk]]
[17:44:53.457]                   NAME <- NAMES[[kk]]
[17:44:53.457]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.457]                     next
[17:44:53.457]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.457]                 }
[17:44:53.457]                 if (length(args) > 0) 
[17:44:53.457]                   base::do.call(base::Sys.setenv, args = args)
[17:44:53.457]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:53.457]             }
[17:44:53.457]             else {
[17:44:53.457]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:53.457]             }
[17:44:53.457]             {
[17:44:53.457]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:53.457]                   0L) {
[17:44:53.457]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:53.457]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:53.457]                   base::options(opts)
[17:44:53.457]                 }
[17:44:53.457]                 {
[17:44:53.457]                   {
[17:44:53.457]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:53.457]                     NULL
[17:44:53.457]                   }
[17:44:53.457]                   options(future.plan = NULL)
[17:44:53.457]                   if (is.na(NA_character_)) 
[17:44:53.457]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.457]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:53.457]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:53.457]                     .init = FALSE)
[17:44:53.457]                 }
[17:44:53.457]             }
[17:44:53.457]         }
[17:44:53.457]     })
[17:44:53.457]     if (TRUE) {
[17:44:53.457]         base::sink(type = "output", split = FALSE)
[17:44:53.457]         if (TRUE) {
[17:44:53.457]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:53.457]         }
[17:44:53.457]         else {
[17:44:53.457]             ...future.result["stdout"] <- base::list(NULL)
[17:44:53.457]         }
[17:44:53.457]         base::close(...future.stdout)
[17:44:53.457]         ...future.stdout <- NULL
[17:44:53.457]     }
[17:44:53.457]     ...future.result$conditions <- ...future.conditions
[17:44:53.457]     ...future.result$finished <- base::Sys.time()
[17:44:53.457]     ...future.result
[17:44:53.457] }
[17:44:53.460] assign_globals() ...
[17:44:53.460] List of 5
[17:44:53.460]  $ ...future.FUN            :function (...)  
[17:44:53.460]  $ future.call.arguments    : list()
[17:44:53.460]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.460]  $ ...future.elements_ii    :List of 2
[17:44:53.460]   ..$ : int 0
[17:44:53.460]   ..$ : int 0
[17:44:53.460]  $ ...future.seeds_ii       :List of 2
[17:44:53.460]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[17:44:53.460]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[17:44:53.460]  $ ...future.globals.maxSize: NULL
[17:44:53.460]  - attr(*, "where")=List of 5
[17:44:53.460]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:44:53.460]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:44:53.460]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:44:53.460]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:44:53.460]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:44:53.460]  - attr(*, "resolved")= logi FALSE
[17:44:53.460]  - attr(*, "total_size")= num 616
[17:44:53.460]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.460]  - attr(*, "already-done")= logi TRUE
[17:44:53.465] - reassign environment for ‘...future.FUN’
[17:44:53.465] - copied ‘...future.FUN’ to environment
[17:44:53.465] - copied ‘future.call.arguments’ to environment
[17:44:53.465] - copied ‘...future.elements_ii’ to environment
[17:44:53.465] - copied ‘...future.seeds_ii’ to environment
[17:44:53.466] - copied ‘...future.globals.maxSize’ to environment
[17:44:53.466] assign_globals() ... done
[17:44:53.466] requestCore(): workers = 2
[17:44:53.468] MulticoreFuture started
[17:44:53.468] - Launch lazy future ... done
[17:44:53.468] run() for ‘MulticoreFuture’ ... done
[17:44:53.469] Created future:
[17:44:53.469] plan(): Setting new future strategy stack:
[17:44:53.469] List of future strategies:
[17:44:53.469] 1. sequential:
[17:44:53.469]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.469]    - tweaked: FALSE
[17:44:53.469]    - call: NULL
[17:44:53.470] plan(): nbrOfWorkers() = 1
[17:44:53.472] plan(): Setting new future strategy stack:
[17:44:53.472] List of future strategies:
[17:44:53.472] 1. multicore:
[17:44:53.472]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:53.472]    - tweaked: FALSE
[17:44:53.472]    - call: plan(strategy)
[17:44:53.478] plan(): nbrOfWorkers() = 2
[17:44:53.469] MulticoreFuture:
[17:44:53.469] Label: ‘future_replicate-1’
[17:44:53.469] Expression:
[17:44:53.469] {
[17:44:53.469]     do.call(function(...) {
[17:44:53.469]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.469]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.469]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.469]             on.exit(options(oopts), add = TRUE)
[17:44:53.469]         }
[17:44:53.469]         {
[17:44:53.469]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.469]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.469]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.469]                   envir = globalenv(), inherits = FALSE)
[17:44:53.469]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.469]             })
[17:44:53.469]         }
[17:44:53.469]     }, args = future.call.arguments)
[17:44:53.469] }
[17:44:53.469] Lazy evaluation: FALSE
[17:44:53.469] Asynchronous evaluation: TRUE
[17:44:53.469] Local evaluation: TRUE
[17:44:53.469] Environment: R_GlobalEnv
[17:44:53.469] Capture standard output: TRUE
[17:44:53.469] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:53.469] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:53.469] Packages: <none>
[17:44:53.469] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:53.469] Resolved: TRUE
[17:44:53.469] Value: <not collected>
[17:44:53.469] Conditions captured: <none>
[17:44:53.469] Early signaling: FALSE
[17:44:53.469] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:53.469] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.479] Chunk #1 of 2 ... DONE
[17:44:53.479] Chunk #2 of 2 ...
[17:44:53.479]  - Finding globals in 'X' for chunk #2 ...
[17:44:53.479] getGlobalsAndPackages() ...
[17:44:53.479] Searching for globals...
[17:44:53.480] 
[17:44:53.480] Searching for globals ... DONE
[17:44:53.480] - globals: [0] <none>
[17:44:53.480] getGlobalsAndPackages() ... DONE
[17:44:53.480]    + additional globals found: [n=0] 
[17:44:53.480]    + additional namespaces needed: [n=0] 
[17:44:53.481]  - Finding globals in 'X' for chunk #2 ... DONE
[17:44:53.481]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:53.481]  - seeds: [3] <seeds>
[17:44:53.481]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.481] getGlobalsAndPackages() ...
[17:44:53.481] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.481] Resolving globals: FALSE
[17:44:53.482] Tweak future expression to call with '...' arguments ...
[17:44:53.482] {
[17:44:53.482]     do.call(function(...) {
[17:44:53.482]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.482]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.482]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.482]             on.exit(options(oopts), add = TRUE)
[17:44:53.482]         }
[17:44:53.482]         {
[17:44:53.482]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.482]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.482]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.482]                   envir = globalenv(), inherits = FALSE)
[17:44:53.482]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.482]             })
[17:44:53.482]         }
[17:44:53.482]     }, args = future.call.arguments)
[17:44:53.482] }
[17:44:53.485] Tweak future expression to call with '...' arguments ... DONE
[17:44:53.486] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.486] 
[17:44:53.486] getGlobalsAndPackages() ... DONE
[17:44:53.487] run() for ‘Future’ ...
[17:44:53.487] - state: ‘created’
[17:44:53.487] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:44:53.492] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.493] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:44:53.493]   - Field: ‘label’
[17:44:53.493]   - Field: ‘local’
[17:44:53.493]   - Field: ‘owner’
[17:44:53.493]   - Field: ‘envir’
[17:44:53.493]   - Field: ‘workers’
[17:44:53.494]   - Field: ‘packages’
[17:44:53.494]   - Field: ‘gc’
[17:44:53.494]   - Field: ‘job’
[17:44:53.494]   - Field: ‘conditions’
[17:44:53.494]   - Field: ‘expr’
[17:44:53.494]   - Field: ‘uuid’
[17:44:53.494]   - Field: ‘seed’
[17:44:53.495]   - Field: ‘version’
[17:44:53.495]   - Field: ‘result’
[17:44:53.495]   - Field: ‘asynchronous’
[17:44:53.495]   - Field: ‘calls’
[17:44:53.495]   - Field: ‘globals’
[17:44:53.495]   - Field: ‘stdout’
[17:44:53.496]   - Field: ‘earlySignal’
[17:44:53.496]   - Field: ‘lazy’
[17:44:53.496]   - Field: ‘state’
[17:44:53.496] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:44:53.496] - Launch lazy future ...
[17:44:53.496] Packages needed by the future expression (n = 0): <none>
[17:44:53.497] Packages needed by future strategies (n = 0): <none>
[17:44:53.497] {
[17:44:53.497]     {
[17:44:53.497]         {
[17:44:53.497]             ...future.startTime <- base::Sys.time()
[17:44:53.497]             {
[17:44:53.497]                 {
[17:44:53.497]                   {
[17:44:53.497]                     {
[17:44:53.497]                       base::local({
[17:44:53.497]                         has_future <- base::requireNamespace("future", 
[17:44:53.497]                           quietly = TRUE)
[17:44:53.497]                         if (has_future) {
[17:44:53.497]                           ns <- base::getNamespace("future")
[17:44:53.497]                           version <- ns[[".package"]][["version"]]
[17:44:53.497]                           if (is.null(version)) 
[17:44:53.497]                             version <- utils::packageVersion("future")
[17:44:53.497]                         }
[17:44:53.497]                         else {
[17:44:53.497]                           version <- NULL
[17:44:53.497]                         }
[17:44:53.497]                         if (!has_future || version < "1.8.0") {
[17:44:53.497]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:53.497]                             "", base::R.version$version.string), 
[17:44:53.497]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:53.497]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:53.497]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:53.497]                               "release", "version")], collapse = " "), 
[17:44:53.497]                             hostname = base::Sys.info()[["nodename"]])
[17:44:53.497]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:53.497]                             info)
[17:44:53.497]                           info <- base::paste(info, collapse = "; ")
[17:44:53.497]                           if (!has_future) {
[17:44:53.497]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:53.497]                               info)
[17:44:53.497]                           }
[17:44:53.497]                           else {
[17:44:53.497]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:53.497]                               info, version)
[17:44:53.497]                           }
[17:44:53.497]                           base::stop(msg)
[17:44:53.497]                         }
[17:44:53.497]                       })
[17:44:53.497]                     }
[17:44:53.497]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:53.497]                     base::options(mc.cores = 1L)
[17:44:53.497]                   }
[17:44:53.497]                   ...future.strategy.old <- future::plan("list")
[17:44:53.497]                   options(future.plan = NULL)
[17:44:53.497]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.497]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:53.497]                 }
[17:44:53.497]                 ...future.workdir <- getwd()
[17:44:53.497]             }
[17:44:53.497]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:53.497]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:53.497]         }
[17:44:53.497]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:53.497]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:53.497]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:53.497]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:53.497]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:53.497]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:53.497]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:53.497]             base::names(...future.oldOptions))
[17:44:53.497]     }
[17:44:53.497]     if (FALSE) {
[17:44:53.497]     }
[17:44:53.497]     else {
[17:44:53.497]         if (TRUE) {
[17:44:53.497]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:53.497]                 open = "w")
[17:44:53.497]         }
[17:44:53.497]         else {
[17:44:53.497]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:53.497]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:53.497]         }
[17:44:53.497]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:53.497]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:53.497]             base::sink(type = "output", split = FALSE)
[17:44:53.497]             base::close(...future.stdout)
[17:44:53.497]         }, add = TRUE)
[17:44:53.497]     }
[17:44:53.497]     ...future.frame <- base::sys.nframe()
[17:44:53.497]     ...future.conditions <- base::list()
[17:44:53.497]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:53.497]     if (FALSE) {
[17:44:53.497]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:53.497]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:53.497]     }
[17:44:53.497]     ...future.result <- base::tryCatch({
[17:44:53.497]         base::withCallingHandlers({
[17:44:53.497]             ...future.value <- base::withVisible(base::local({
[17:44:53.497]                 withCallingHandlers({
[17:44:53.497]                   {
[17:44:53.497]                     do.call(function(...) {
[17:44:53.497]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.497]                       if (!identical(...future.globals.maxSize.org, 
[17:44:53.497]                         ...future.globals.maxSize)) {
[17:44:53.497]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.497]                         on.exit(options(oopts), add = TRUE)
[17:44:53.497]                       }
[17:44:53.497]                       {
[17:44:53.497]                         lapply(seq_along(...future.elements_ii), 
[17:44:53.497]                           FUN = function(jj) {
[17:44:53.497]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.497]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.497]                               envir = globalenv(), inherits = FALSE)
[17:44:53.497]                             ...future.FUN(...future.X_jj, ...)
[17:44:53.497]                           })
[17:44:53.497]                       }
[17:44:53.497]                     }, args = future.call.arguments)
[17:44:53.497]                   }
[17:44:53.497]                 }, immediateCondition = function(cond) {
[17:44:53.497]                   save_rds <- function (object, pathname, ...) 
[17:44:53.497]                   {
[17:44:53.497]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:44:53.497]                     if (file_test("-f", pathname_tmp)) {
[17:44:53.497]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.497]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:44:53.497]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.497]                         fi_tmp[["mtime"]])
[17:44:53.497]                     }
[17:44:53.497]                     tryCatch({
[17:44:53.497]                       saveRDS(object, file = pathname_tmp, ...)
[17:44:53.497]                     }, error = function(ex) {
[17:44:53.497]                       msg <- conditionMessage(ex)
[17:44:53.497]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.497]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:44:53.497]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.497]                         fi_tmp[["mtime"]], msg)
[17:44:53.497]                       ex$message <- msg
[17:44:53.497]                       stop(ex)
[17:44:53.497]                     })
[17:44:53.497]                     stopifnot(file_test("-f", pathname_tmp))
[17:44:53.497]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:44:53.497]                     if (!res || file_test("-f", pathname_tmp)) {
[17:44:53.497]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.497]                       fi <- file.info(pathname)
[17:44:53.497]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:44:53.497]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.497]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:44:53.497]                         fi[["size"]], fi[["mtime"]])
[17:44:53.497]                       stop(msg)
[17:44:53.497]                     }
[17:44:53.497]                     invisible(pathname)
[17:44:53.497]                   }
[17:44:53.497]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:44:53.497]                     rootPath = tempdir()) 
[17:44:53.497]                   {
[17:44:53.497]                     obj <- list(time = Sys.time(), condition = cond)
[17:44:53.497]                     file <- tempfile(pattern = class(cond)[1], 
[17:44:53.497]                       tmpdir = path, fileext = ".rds")
[17:44:53.497]                     save_rds(obj, file)
[17:44:53.497]                   }
[17:44:53.497]                   saveImmediateCondition(cond, path = "/tmp/RtmpYaox9w/.future/immediateConditions")
[17:44:53.497]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.497]                   {
[17:44:53.497]                     inherits <- base::inherits
[17:44:53.497]                     invokeRestart <- base::invokeRestart
[17:44:53.497]                     is.null <- base::is.null
[17:44:53.497]                     muffled <- FALSE
[17:44:53.497]                     if (inherits(cond, "message")) {
[17:44:53.497]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:53.497]                       if (muffled) 
[17:44:53.497]                         invokeRestart("muffleMessage")
[17:44:53.497]                     }
[17:44:53.497]                     else if (inherits(cond, "warning")) {
[17:44:53.497]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:53.497]                       if (muffled) 
[17:44:53.497]                         invokeRestart("muffleWarning")
[17:44:53.497]                     }
[17:44:53.497]                     else if (inherits(cond, "condition")) {
[17:44:53.497]                       if (!is.null(pattern)) {
[17:44:53.497]                         computeRestarts <- base::computeRestarts
[17:44:53.497]                         grepl <- base::grepl
[17:44:53.497]                         restarts <- computeRestarts(cond)
[17:44:53.497]                         for (restart in restarts) {
[17:44:53.497]                           name <- restart$name
[17:44:53.497]                           if (is.null(name)) 
[17:44:53.497]                             next
[17:44:53.497]                           if (!grepl(pattern, name)) 
[17:44:53.497]                             next
[17:44:53.497]                           invokeRestart(restart)
[17:44:53.497]                           muffled <- TRUE
[17:44:53.497]                           break
[17:44:53.497]                         }
[17:44:53.497]                       }
[17:44:53.497]                     }
[17:44:53.497]                     invisible(muffled)
[17:44:53.497]                   }
[17:44:53.497]                   muffleCondition(cond)
[17:44:53.497]                 })
[17:44:53.497]             }))
[17:44:53.497]             future::FutureResult(value = ...future.value$value, 
[17:44:53.497]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.497]                   ...future.rng), globalenv = if (FALSE) 
[17:44:53.497]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:53.497]                     ...future.globalenv.names))
[17:44:53.497]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:53.497]         }, condition = base::local({
[17:44:53.497]             c <- base::c
[17:44:53.497]             inherits <- base::inherits
[17:44:53.497]             invokeRestart <- base::invokeRestart
[17:44:53.497]             length <- base::length
[17:44:53.497]             list <- base::list
[17:44:53.497]             seq.int <- base::seq.int
[17:44:53.497]             signalCondition <- base::signalCondition
[17:44:53.497]             sys.calls <- base::sys.calls
[17:44:53.497]             `[[` <- base::`[[`
[17:44:53.497]             `+` <- base::`+`
[17:44:53.497]             `<<-` <- base::`<<-`
[17:44:53.497]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:53.497]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:53.497]                   3L)]
[17:44:53.497]             }
[17:44:53.497]             function(cond) {
[17:44:53.497]                 is_error <- inherits(cond, "error")
[17:44:53.497]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:53.497]                   NULL)
[17:44:53.497]                 if (is_error) {
[17:44:53.497]                   sessionInformation <- function() {
[17:44:53.497]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:53.497]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:53.497]                       search = base::search(), system = base::Sys.info())
[17:44:53.497]                   }
[17:44:53.497]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.497]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:53.497]                     cond$call), session = sessionInformation(), 
[17:44:53.497]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:53.497]                   signalCondition(cond)
[17:44:53.497]                 }
[17:44:53.497]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:53.497]                 "immediateCondition"))) {
[17:44:53.497]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:53.497]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.497]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:53.497]                   if (TRUE && !signal) {
[17:44:53.497]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.497]                     {
[17:44:53.497]                       inherits <- base::inherits
[17:44:53.497]                       invokeRestart <- base::invokeRestart
[17:44:53.497]                       is.null <- base::is.null
[17:44:53.497]                       muffled <- FALSE
[17:44:53.497]                       if (inherits(cond, "message")) {
[17:44:53.497]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.497]                         if (muffled) 
[17:44:53.497]                           invokeRestart("muffleMessage")
[17:44:53.497]                       }
[17:44:53.497]                       else if (inherits(cond, "warning")) {
[17:44:53.497]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.497]                         if (muffled) 
[17:44:53.497]                           invokeRestart("muffleWarning")
[17:44:53.497]                       }
[17:44:53.497]                       else if (inherits(cond, "condition")) {
[17:44:53.497]                         if (!is.null(pattern)) {
[17:44:53.497]                           computeRestarts <- base::computeRestarts
[17:44:53.497]                           grepl <- base::grepl
[17:44:53.497]                           restarts <- computeRestarts(cond)
[17:44:53.497]                           for (restart in restarts) {
[17:44:53.497]                             name <- restart$name
[17:44:53.497]                             if (is.null(name)) 
[17:44:53.497]                               next
[17:44:53.497]                             if (!grepl(pattern, name)) 
[17:44:53.497]                               next
[17:44:53.497]                             invokeRestart(restart)
[17:44:53.497]                             muffled <- TRUE
[17:44:53.497]                             break
[17:44:53.497]                           }
[17:44:53.497]                         }
[17:44:53.497]                       }
[17:44:53.497]                       invisible(muffled)
[17:44:53.497]                     }
[17:44:53.497]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.497]                   }
[17:44:53.497]                 }
[17:44:53.497]                 else {
[17:44:53.497]                   if (TRUE) {
[17:44:53.497]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.497]                     {
[17:44:53.497]                       inherits <- base::inherits
[17:44:53.497]                       invokeRestart <- base::invokeRestart
[17:44:53.497]                       is.null <- base::is.null
[17:44:53.497]                       muffled <- FALSE
[17:44:53.497]                       if (inherits(cond, "message")) {
[17:44:53.497]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.497]                         if (muffled) 
[17:44:53.497]                           invokeRestart("muffleMessage")
[17:44:53.497]                       }
[17:44:53.497]                       else if (inherits(cond, "warning")) {
[17:44:53.497]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.497]                         if (muffled) 
[17:44:53.497]                           invokeRestart("muffleWarning")
[17:44:53.497]                       }
[17:44:53.497]                       else if (inherits(cond, "condition")) {
[17:44:53.497]                         if (!is.null(pattern)) {
[17:44:53.497]                           computeRestarts <- base::computeRestarts
[17:44:53.497]                           grepl <- base::grepl
[17:44:53.497]                           restarts <- computeRestarts(cond)
[17:44:53.497]                           for (restart in restarts) {
[17:44:53.497]                             name <- restart$name
[17:44:53.497]                             if (is.null(name)) 
[17:44:53.497]                               next
[17:44:53.497]                             if (!grepl(pattern, name)) 
[17:44:53.497]                               next
[17:44:53.497]                             invokeRestart(restart)
[17:44:53.497]                             muffled <- TRUE
[17:44:53.497]                             break
[17:44:53.497]                           }
[17:44:53.497]                         }
[17:44:53.497]                       }
[17:44:53.497]                       invisible(muffled)
[17:44:53.497]                     }
[17:44:53.497]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.497]                   }
[17:44:53.497]                 }
[17:44:53.497]             }
[17:44:53.497]         }))
[17:44:53.497]     }, error = function(ex) {
[17:44:53.497]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:53.497]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.497]                 ...future.rng), started = ...future.startTime, 
[17:44:53.497]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:53.497]             version = "1.8"), class = "FutureResult")
[17:44:53.497]     }, finally = {
[17:44:53.497]         if (!identical(...future.workdir, getwd())) 
[17:44:53.497]             setwd(...future.workdir)
[17:44:53.497]         {
[17:44:53.497]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:53.497]                 ...future.oldOptions$nwarnings <- NULL
[17:44:53.497]             }
[17:44:53.497]             base::options(...future.oldOptions)
[17:44:53.497]             if (.Platform$OS.type == "windows") {
[17:44:53.497]                 old_names <- names(...future.oldEnvVars)
[17:44:53.497]                 envs <- base::Sys.getenv()
[17:44:53.497]                 names <- names(envs)
[17:44:53.497]                 common <- intersect(names, old_names)
[17:44:53.497]                 added <- setdiff(names, old_names)
[17:44:53.497]                 removed <- setdiff(old_names, names)
[17:44:53.497]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:53.497]                   envs[common]]
[17:44:53.497]                 NAMES <- toupper(changed)
[17:44:53.497]                 args <- list()
[17:44:53.497]                 for (kk in seq_along(NAMES)) {
[17:44:53.497]                   name <- changed[[kk]]
[17:44:53.497]                   NAME <- NAMES[[kk]]
[17:44:53.497]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.497]                     next
[17:44:53.497]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.497]                 }
[17:44:53.497]                 NAMES <- toupper(added)
[17:44:53.497]                 for (kk in seq_along(NAMES)) {
[17:44:53.497]                   name <- added[[kk]]
[17:44:53.497]                   NAME <- NAMES[[kk]]
[17:44:53.497]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.497]                     next
[17:44:53.497]                   args[[name]] <- ""
[17:44:53.497]                 }
[17:44:53.497]                 NAMES <- toupper(removed)
[17:44:53.497]                 for (kk in seq_along(NAMES)) {
[17:44:53.497]                   name <- removed[[kk]]
[17:44:53.497]                   NAME <- NAMES[[kk]]
[17:44:53.497]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.497]                     next
[17:44:53.497]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.497]                 }
[17:44:53.497]                 if (length(args) > 0) 
[17:44:53.497]                   base::do.call(base::Sys.setenv, args = args)
[17:44:53.497]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:53.497]             }
[17:44:53.497]             else {
[17:44:53.497]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:53.497]             }
[17:44:53.497]             {
[17:44:53.497]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:53.497]                   0L) {
[17:44:53.497]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:53.497]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:53.497]                   base::options(opts)
[17:44:53.497]                 }
[17:44:53.497]                 {
[17:44:53.497]                   {
[17:44:53.497]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:53.497]                     NULL
[17:44:53.497]                   }
[17:44:53.497]                   options(future.plan = NULL)
[17:44:53.497]                   if (is.na(NA_character_)) 
[17:44:53.497]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.497]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:53.497]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:53.497]                     .init = FALSE)
[17:44:53.497]                 }
[17:44:53.497]             }
[17:44:53.497]         }
[17:44:53.497]     })
[17:44:53.497]     if (TRUE) {
[17:44:53.497]         base::sink(type = "output", split = FALSE)
[17:44:53.497]         if (TRUE) {
[17:44:53.497]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:53.497]         }
[17:44:53.497]         else {
[17:44:53.497]             ...future.result["stdout"] <- base::list(NULL)
[17:44:53.497]         }
[17:44:53.497]         base::close(...future.stdout)
[17:44:53.497]         ...future.stdout <- NULL
[17:44:53.497]     }
[17:44:53.497]     ...future.result$conditions <- ...future.conditions
[17:44:53.497]     ...future.result$finished <- base::Sys.time()
[17:44:53.497]     ...future.result
[17:44:53.497] }
[17:44:53.500] assign_globals() ...
[17:44:53.500] List of 5
[17:44:53.500]  $ ...future.FUN            :function (...)  
[17:44:53.500]  $ future.call.arguments    : list()
[17:44:53.500]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.500]  $ ...future.elements_ii    :List of 3
[17:44:53.500]   ..$ : int 0
[17:44:53.500]   ..$ : int 0
[17:44:53.500]   ..$ : int 0
[17:44:53.500]  $ ...future.seeds_ii       :List of 3
[17:44:53.500]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[17:44:53.500]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[17:44:53.500]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[17:44:53.500]  $ ...future.globals.maxSize: NULL
[17:44:53.500]  - attr(*, "where")=List of 5
[17:44:53.500]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:44:53.500]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:44:53.500]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:44:53.500]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:44:53.500]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:44:53.500]  - attr(*, "resolved")= logi FALSE
[17:44:53.500]  - attr(*, "total_size")= num 616
[17:44:53.500]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.500]  - attr(*, "already-done")= logi TRUE
[17:44:53.509] - reassign environment for ‘...future.FUN’
[17:44:53.509] - copied ‘...future.FUN’ to environment
[17:44:53.510] - copied ‘future.call.arguments’ to environment
[17:44:53.510] - copied ‘...future.elements_ii’ to environment
[17:44:53.510] - copied ‘...future.seeds_ii’ to environment
[17:44:53.510] - copied ‘...future.globals.maxSize’ to environment
[17:44:53.510] assign_globals() ... done
[17:44:53.510] requestCore(): workers = 2
[17:44:53.512] MulticoreFuture started
[17:44:53.513] - Launch lazy future ... done
[17:44:53.513] run() for ‘MulticoreFuture’ ... done
[17:44:53.513] Created future:
[17:44:53.514] plan(): Setting new future strategy stack:
[17:44:53.514] List of future strategies:
[17:44:53.514] 1. sequential:
[17:44:53.514]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.514]    - tweaked: FALSE
[17:44:53.514]    - call: NULL
[17:44:53.515] plan(): nbrOfWorkers() = 1
[17:44:53.517] plan(): Setting new future strategy stack:
[17:44:53.517] List of future strategies:
[17:44:53.517] 1. multicore:
[17:44:53.517]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:53.517]    - tweaked: FALSE
[17:44:53.517]    - call: plan(strategy)
[17:44:53.522] plan(): nbrOfWorkers() = 2
[17:44:53.513] MulticoreFuture:
[17:44:53.513] Label: ‘future_replicate-2’
[17:44:53.513] Expression:
[17:44:53.513] {
[17:44:53.513]     do.call(function(...) {
[17:44:53.513]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.513]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.513]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.513]             on.exit(options(oopts), add = TRUE)
[17:44:53.513]         }
[17:44:53.513]         {
[17:44:53.513]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.513]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.513]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.513]                   envir = globalenv(), inherits = FALSE)
[17:44:53.513]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.513]             })
[17:44:53.513]         }
[17:44:53.513]     }, args = future.call.arguments)
[17:44:53.513] }
[17:44:53.513] Lazy evaluation: FALSE
[17:44:53.513] Asynchronous evaluation: TRUE
[17:44:53.513] Local evaluation: TRUE
[17:44:53.513] Environment: R_GlobalEnv
[17:44:53.513] Capture standard output: TRUE
[17:44:53.513] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:53.513] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:53.513] Packages: <none>
[17:44:53.513] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:53.513] Resolved: TRUE
[17:44:53.513] Value: <not collected>
[17:44:53.513] Conditions captured: <none>
[17:44:53.513] Early signaling: FALSE
[17:44:53.513] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:53.513] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.523] Chunk #2 of 2 ... DONE
[17:44:53.523] Launching 2 futures (chunks) ... DONE
[17:44:53.523] Resolving 2 futures (chunks) ...
[17:44:53.524] resolve() on list ...
[17:44:53.524]  recursive: 0
[17:44:53.524]  length: 2
[17:44:53.524] 
[17:44:53.524] Future #1
[17:44:53.525] result() for MulticoreFuture ...
[17:44:53.525] result() for MulticoreFuture ...
[17:44:53.526] result() for MulticoreFuture ... done
[17:44:53.526] result() for MulticoreFuture ... done
[17:44:53.526] result() for MulticoreFuture ...
[17:44:53.526] result() for MulticoreFuture ... done
[17:44:53.526] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:44:53.526] - nx: 2
[17:44:53.526] - relay: TRUE
[17:44:53.526] - stdout: TRUE
[17:44:53.527] - signal: TRUE
[17:44:53.527] - resignal: FALSE
[17:44:53.527] - force: TRUE
[17:44:53.527] - relayed: [n=2] FALSE, FALSE
[17:44:53.527] - queued futures: [n=2] FALSE, FALSE
[17:44:53.527]  - until=1
[17:44:53.527]  - relaying element #1
[17:44:53.528] result() for MulticoreFuture ...
[17:44:53.528] result() for MulticoreFuture ... done
[17:44:53.528] result() for MulticoreFuture ...
[17:44:53.528] result() for MulticoreFuture ... done
[17:44:53.528] result() for MulticoreFuture ...
[17:44:53.528] result() for MulticoreFuture ... done
[17:44:53.528] result() for MulticoreFuture ...
[17:44:53.529] result() for MulticoreFuture ... done
[17:44:53.529] - relayed: [n=2] TRUE, FALSE
[17:44:53.529] - queued futures: [n=2] TRUE, FALSE
[17:44:53.529] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:44:53.529]  length: 1 (resolved future 1)
[17:44:53.529] Future #2
[17:44:53.530] result() for MulticoreFuture ...
[17:44:53.530] result() for MulticoreFuture ...
[17:44:53.530] result() for MulticoreFuture ... done
[17:44:53.530] result() for MulticoreFuture ... done
[17:44:53.531] result() for MulticoreFuture ...
[17:44:53.531] result() for MulticoreFuture ... done
[17:44:53.531] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:44:53.531] - nx: 2
[17:44:53.531] - relay: TRUE
[17:44:53.531] - stdout: TRUE
[17:44:53.531] - signal: TRUE
[17:44:53.532] - resignal: FALSE
[17:44:53.532] - force: TRUE
[17:44:53.532] - relayed: [n=2] TRUE, FALSE
[17:44:53.532] - queued futures: [n=2] TRUE, FALSE
[17:44:53.532]  - until=2
[17:44:53.535]  - relaying element #2
[17:44:53.535] result() for MulticoreFuture ...
[17:44:53.535] result() for MulticoreFuture ... done
[17:44:53.535] result() for MulticoreFuture ...
[17:44:53.535] result() for MulticoreFuture ... done
[17:44:53.535] result() for MulticoreFuture ...
[17:44:53.536] result() for MulticoreFuture ... done
[17:44:53.536] result() for MulticoreFuture ...
[17:44:53.536] result() for MulticoreFuture ... done
[17:44:53.536] - relayed: [n=2] TRUE, TRUE
[17:44:53.536] - queued futures: [n=2] TRUE, TRUE
[17:44:53.536] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:44:53.536]  length: 0 (resolved future 2)
[17:44:53.537] Relaying remaining futures
[17:44:53.537] signalConditionsASAP(NULL, pos=0) ...
[17:44:53.537] - nx: 2
[17:44:53.537] - relay: TRUE
[17:44:53.537] - stdout: TRUE
[17:44:53.537] - signal: TRUE
[17:44:53.537] - resignal: FALSE
[17:44:53.537] - force: TRUE
[17:44:53.537] - relayed: [n=2] TRUE, TRUE
[17:44:53.537] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:44:53.538] - relayed: [n=2] TRUE, TRUE
[17:44:53.538] - queued futures: [n=2] TRUE, TRUE
[17:44:53.538] signalConditionsASAP(NULL, pos=0) ... done
[17:44:53.538] resolve() on list ... DONE
[17:44:53.538] result() for MulticoreFuture ...
[17:44:53.538] result() for MulticoreFuture ... done
[17:44:53.538] result() for MulticoreFuture ...
[17:44:53.539] result() for MulticoreFuture ... done
[17:44:53.539] result() for MulticoreFuture ...
[17:44:53.539] result() for MulticoreFuture ... done
[17:44:53.539] result() for MulticoreFuture ...
[17:44:53.539] result() for MulticoreFuture ... done
[17:44:53.539]  - Number of value chunks collected: 2
[17:44:53.539] Resolving 2 futures (chunks) ... DONE
[17:44:53.539] Reducing values from 2 chunks ...
[17:44:53.540]  - Number of values collected after concatenation: 5
[17:44:53.540]  - Number of values expected: 5
[17:44:53.540] Reducing values from 2 chunks ... DONE
[17:44:53.540] future_lapply() ... DONE
[17:44:53.540] future_lapply() ...
[17:44:53.541] Generating random seeds ...
[17:44:53.541] Generating random seed streams for 5 elements ...
[17:44:53.541] Generating random seed streams for 5 elements ... DONE
[17:44:53.541] Generating random seeds ... DONE
[17:44:53.541] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:44:53.546] Number of chunks: 2
[17:44:53.546] getGlobalsAndPackagesXApply() ...
[17:44:53.546]  - future.globals: TRUE
[17:44:53.546] getGlobalsAndPackages() ...
[17:44:53.546] Searching for globals...
[17:44:53.548] - globals found: [2] ‘FUN’, ‘sample’
[17:44:53.548] Searching for globals ... DONE
[17:44:53.548] Resolving globals: FALSE
[17:44:53.548] The total size of the 1 globals is 616 bytes (616 bytes)
[17:44:53.549] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:44:53.549] - globals: [1] ‘FUN’
[17:44:53.549] 
[17:44:53.549] getGlobalsAndPackages() ... DONE
[17:44:53.549]  - globals found/used: [n=1] ‘FUN’
[17:44:53.549]  - needed namespaces: [n=0] 
[17:44:53.549] Finding globals ... DONE
[17:44:53.549]  - use_args: TRUE
[17:44:53.550]  - Getting '...' globals ...
[17:44:53.550] resolve() on list ...
[17:44:53.550]  recursive: 0
[17:44:53.550]  length: 1
[17:44:53.550]  elements: ‘...’
[17:44:53.550]  length: 0 (resolved future 1)
[17:44:53.551] resolve() on list ... DONE
[17:44:53.551]    - '...' content: [n=0] 
[17:44:53.551] List of 1
[17:44:53.551]  $ ...: list()
[17:44:53.551]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.551]  - attr(*, "where")=List of 1
[17:44:53.551]   ..$ ...:<environment: 0x558385daec98> 
[17:44:53.551]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.551]  - attr(*, "resolved")= logi TRUE
[17:44:53.551]  - attr(*, "total_size")= num NA
[17:44:53.554]  - Getting '...' globals ... DONE
[17:44:53.554] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:44:53.554] List of 2
[17:44:53.554]  $ ...future.FUN:function (...)  
[17:44:53.554]  $ ...          : list()
[17:44:53.554]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.554]  - attr(*, "where")=List of 2
[17:44:53.554]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:44:53.554]   ..$ ...          :<environment: 0x558385daec98> 
[17:44:53.554]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.554]  - attr(*, "resolved")= logi FALSE
[17:44:53.554]  - attr(*, "total_size")= num 616
[17:44:53.557] Packages to be attached in all futures: [n=0] 
[17:44:53.557] getGlobalsAndPackagesXApply() ... DONE
[17:44:53.557] Number of futures (= number of chunks): 2
[17:44:53.557] Launching 2 futures (chunks) ...
[17:44:53.557] Chunk #1 of 2 ...
[17:44:53.557]  - Finding globals in 'X' for chunk #1 ...
[17:44:53.557] getGlobalsAndPackages() ...
[17:44:53.558] Searching for globals...
[17:44:53.558] 
[17:44:53.558] Searching for globals ... DONE
[17:44:53.558] - globals: [0] <none>
[17:44:53.558] getGlobalsAndPackages() ... DONE
[17:44:53.558]    + additional globals found: [n=0] 
[17:44:53.558]    + additional namespaces needed: [n=0] 
[17:44:53.558]  - Finding globals in 'X' for chunk #1 ... DONE
[17:44:53.558]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:53.558]  - seeds: [2] <seeds>
[17:44:53.559]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.559] getGlobalsAndPackages() ...
[17:44:53.559] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.559] Resolving globals: FALSE
[17:44:53.559] Tweak future expression to call with '...' arguments ...
[17:44:53.559] {
[17:44:53.559]     do.call(function(...) {
[17:44:53.559]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.559]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.559]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.559]             on.exit(options(oopts), add = TRUE)
[17:44:53.559]         }
[17:44:53.559]         {
[17:44:53.559]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.559]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.559]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.559]                   envir = globalenv(), inherits = FALSE)
[17:44:53.559]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.559]             })
[17:44:53.559]         }
[17:44:53.559]     }, args = future.call.arguments)
[17:44:53.559] }
[17:44:53.559] Tweak future expression to call with '...' arguments ... DONE
[17:44:53.560] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.560] 
[17:44:53.560] getGlobalsAndPackages() ... DONE
[17:44:53.560] run() for ‘Future’ ...
[17:44:53.560] - state: ‘created’
[17:44:53.561] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:44:53.596] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.596] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:44:53.596]   - Field: ‘label’
[17:44:53.596]   - Field: ‘local’
[17:44:53.596]   - Field: ‘owner’
[17:44:53.596]   - Field: ‘envir’
[17:44:53.596]   - Field: ‘workers’
[17:44:53.596]   - Field: ‘packages’
[17:44:53.597]   - Field: ‘gc’
[17:44:53.597]   - Field: ‘job’
[17:44:53.597]   - Field: ‘conditions’
[17:44:53.597]   - Field: ‘expr’
[17:44:53.597]   - Field: ‘uuid’
[17:44:53.597]   - Field: ‘seed’
[17:44:53.597]   - Field: ‘version’
[17:44:53.597]   - Field: ‘result’
[17:44:53.597]   - Field: ‘asynchronous’
[17:44:53.598]   - Field: ‘calls’
[17:44:53.598]   - Field: ‘globals’
[17:44:53.598]   - Field: ‘stdout’
[17:44:53.598]   - Field: ‘earlySignal’
[17:44:53.598]   - Field: ‘lazy’
[17:44:53.598]   - Field: ‘state’
[17:44:53.598] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:44:53.598] - Launch lazy future ...
[17:44:53.598] Packages needed by the future expression (n = 0): <none>
[17:44:53.599] Packages needed by future strategies (n = 0): <none>
[17:44:53.599] {
[17:44:53.599]     {
[17:44:53.599]         {
[17:44:53.599]             ...future.startTime <- base::Sys.time()
[17:44:53.599]             {
[17:44:53.599]                 {
[17:44:53.599]                   {
[17:44:53.599]                     {
[17:44:53.599]                       base::local({
[17:44:53.599]                         has_future <- base::requireNamespace("future", 
[17:44:53.599]                           quietly = TRUE)
[17:44:53.599]                         if (has_future) {
[17:44:53.599]                           ns <- base::getNamespace("future")
[17:44:53.599]                           version <- ns[[".package"]][["version"]]
[17:44:53.599]                           if (is.null(version)) 
[17:44:53.599]                             version <- utils::packageVersion("future")
[17:44:53.599]                         }
[17:44:53.599]                         else {
[17:44:53.599]                           version <- NULL
[17:44:53.599]                         }
[17:44:53.599]                         if (!has_future || version < "1.8.0") {
[17:44:53.599]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:53.599]                             "", base::R.version$version.string), 
[17:44:53.599]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:53.599]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:53.599]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:53.599]                               "release", "version")], collapse = " "), 
[17:44:53.599]                             hostname = base::Sys.info()[["nodename"]])
[17:44:53.599]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:53.599]                             info)
[17:44:53.599]                           info <- base::paste(info, collapse = "; ")
[17:44:53.599]                           if (!has_future) {
[17:44:53.599]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:53.599]                               info)
[17:44:53.599]                           }
[17:44:53.599]                           else {
[17:44:53.599]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:53.599]                               info, version)
[17:44:53.599]                           }
[17:44:53.599]                           base::stop(msg)
[17:44:53.599]                         }
[17:44:53.599]                       })
[17:44:53.599]                     }
[17:44:53.599]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:53.599]                     base::options(mc.cores = 1L)
[17:44:53.599]                   }
[17:44:53.599]                   ...future.strategy.old <- future::plan("list")
[17:44:53.599]                   options(future.plan = NULL)
[17:44:53.599]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.599]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:53.599]                 }
[17:44:53.599]                 ...future.workdir <- getwd()
[17:44:53.599]             }
[17:44:53.599]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:53.599]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:53.599]         }
[17:44:53.599]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:53.599]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:53.599]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:53.599]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:53.599]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:53.599]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:53.599]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:53.599]             base::names(...future.oldOptions))
[17:44:53.599]     }
[17:44:53.599]     if (FALSE) {
[17:44:53.599]     }
[17:44:53.599]     else {
[17:44:53.599]         if (TRUE) {
[17:44:53.599]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:53.599]                 open = "w")
[17:44:53.599]         }
[17:44:53.599]         else {
[17:44:53.599]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:53.599]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:53.599]         }
[17:44:53.599]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:53.599]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:53.599]             base::sink(type = "output", split = FALSE)
[17:44:53.599]             base::close(...future.stdout)
[17:44:53.599]         }, add = TRUE)
[17:44:53.599]     }
[17:44:53.599]     ...future.frame <- base::sys.nframe()
[17:44:53.599]     ...future.conditions <- base::list()
[17:44:53.599]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:53.599]     if (FALSE) {
[17:44:53.599]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:53.599]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:53.599]     }
[17:44:53.599]     ...future.result <- base::tryCatch({
[17:44:53.599]         base::withCallingHandlers({
[17:44:53.599]             ...future.value <- base::withVisible(base::local({
[17:44:53.599]                 withCallingHandlers({
[17:44:53.599]                   {
[17:44:53.599]                     do.call(function(...) {
[17:44:53.599]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.599]                       if (!identical(...future.globals.maxSize.org, 
[17:44:53.599]                         ...future.globals.maxSize)) {
[17:44:53.599]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.599]                         on.exit(options(oopts), add = TRUE)
[17:44:53.599]                       }
[17:44:53.599]                       {
[17:44:53.599]                         lapply(seq_along(...future.elements_ii), 
[17:44:53.599]                           FUN = function(jj) {
[17:44:53.599]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.599]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.599]                               envir = globalenv(), inherits = FALSE)
[17:44:53.599]                             ...future.FUN(...future.X_jj, ...)
[17:44:53.599]                           })
[17:44:53.599]                       }
[17:44:53.599]                     }, args = future.call.arguments)
[17:44:53.599]                   }
[17:44:53.599]                 }, immediateCondition = function(cond) {
[17:44:53.599]                   save_rds <- function (object, pathname, ...) 
[17:44:53.599]                   {
[17:44:53.599]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:44:53.599]                     if (file_test("-f", pathname_tmp)) {
[17:44:53.599]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.599]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:44:53.599]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.599]                         fi_tmp[["mtime"]])
[17:44:53.599]                     }
[17:44:53.599]                     tryCatch({
[17:44:53.599]                       saveRDS(object, file = pathname_tmp, ...)
[17:44:53.599]                     }, error = function(ex) {
[17:44:53.599]                       msg <- conditionMessage(ex)
[17:44:53.599]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.599]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:44:53.599]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.599]                         fi_tmp[["mtime"]], msg)
[17:44:53.599]                       ex$message <- msg
[17:44:53.599]                       stop(ex)
[17:44:53.599]                     })
[17:44:53.599]                     stopifnot(file_test("-f", pathname_tmp))
[17:44:53.599]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:44:53.599]                     if (!res || file_test("-f", pathname_tmp)) {
[17:44:53.599]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.599]                       fi <- file.info(pathname)
[17:44:53.599]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:44:53.599]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.599]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:44:53.599]                         fi[["size"]], fi[["mtime"]])
[17:44:53.599]                       stop(msg)
[17:44:53.599]                     }
[17:44:53.599]                     invisible(pathname)
[17:44:53.599]                   }
[17:44:53.599]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:44:53.599]                     rootPath = tempdir()) 
[17:44:53.599]                   {
[17:44:53.599]                     obj <- list(time = Sys.time(), condition = cond)
[17:44:53.599]                     file <- tempfile(pattern = class(cond)[1], 
[17:44:53.599]                       tmpdir = path, fileext = ".rds")
[17:44:53.599]                     save_rds(obj, file)
[17:44:53.599]                   }
[17:44:53.599]                   saveImmediateCondition(cond, path = "/tmp/RtmpYaox9w/.future/immediateConditions")
[17:44:53.599]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.599]                   {
[17:44:53.599]                     inherits <- base::inherits
[17:44:53.599]                     invokeRestart <- base::invokeRestart
[17:44:53.599]                     is.null <- base::is.null
[17:44:53.599]                     muffled <- FALSE
[17:44:53.599]                     if (inherits(cond, "message")) {
[17:44:53.599]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:53.599]                       if (muffled) 
[17:44:53.599]                         invokeRestart("muffleMessage")
[17:44:53.599]                     }
[17:44:53.599]                     else if (inherits(cond, "warning")) {
[17:44:53.599]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:53.599]                       if (muffled) 
[17:44:53.599]                         invokeRestart("muffleWarning")
[17:44:53.599]                     }
[17:44:53.599]                     else if (inherits(cond, "condition")) {
[17:44:53.599]                       if (!is.null(pattern)) {
[17:44:53.599]                         computeRestarts <- base::computeRestarts
[17:44:53.599]                         grepl <- base::grepl
[17:44:53.599]                         restarts <- computeRestarts(cond)
[17:44:53.599]                         for (restart in restarts) {
[17:44:53.599]                           name <- restart$name
[17:44:53.599]                           if (is.null(name)) 
[17:44:53.599]                             next
[17:44:53.599]                           if (!grepl(pattern, name)) 
[17:44:53.599]                             next
[17:44:53.599]                           invokeRestart(restart)
[17:44:53.599]                           muffled <- TRUE
[17:44:53.599]                           break
[17:44:53.599]                         }
[17:44:53.599]                       }
[17:44:53.599]                     }
[17:44:53.599]                     invisible(muffled)
[17:44:53.599]                   }
[17:44:53.599]                   muffleCondition(cond)
[17:44:53.599]                 })
[17:44:53.599]             }))
[17:44:53.599]             future::FutureResult(value = ...future.value$value, 
[17:44:53.599]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.599]                   ...future.rng), globalenv = if (FALSE) 
[17:44:53.599]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:53.599]                     ...future.globalenv.names))
[17:44:53.599]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:53.599]         }, condition = base::local({
[17:44:53.599]             c <- base::c
[17:44:53.599]             inherits <- base::inherits
[17:44:53.599]             invokeRestart <- base::invokeRestart
[17:44:53.599]             length <- base::length
[17:44:53.599]             list <- base::list
[17:44:53.599]             seq.int <- base::seq.int
[17:44:53.599]             signalCondition <- base::signalCondition
[17:44:53.599]             sys.calls <- base::sys.calls
[17:44:53.599]             `[[` <- base::`[[`
[17:44:53.599]             `+` <- base::`+`
[17:44:53.599]             `<<-` <- base::`<<-`
[17:44:53.599]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:53.599]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:53.599]                   3L)]
[17:44:53.599]             }
[17:44:53.599]             function(cond) {
[17:44:53.599]                 is_error <- inherits(cond, "error")
[17:44:53.599]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:53.599]                   NULL)
[17:44:53.599]                 if (is_error) {
[17:44:53.599]                   sessionInformation <- function() {
[17:44:53.599]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:53.599]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:53.599]                       search = base::search(), system = base::Sys.info())
[17:44:53.599]                   }
[17:44:53.599]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.599]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:53.599]                     cond$call), session = sessionInformation(), 
[17:44:53.599]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:53.599]                   signalCondition(cond)
[17:44:53.599]                 }
[17:44:53.599]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:53.599]                 "immediateCondition"))) {
[17:44:53.599]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:53.599]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.599]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:53.599]                   if (TRUE && !signal) {
[17:44:53.599]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.599]                     {
[17:44:53.599]                       inherits <- base::inherits
[17:44:53.599]                       invokeRestart <- base::invokeRestart
[17:44:53.599]                       is.null <- base::is.null
[17:44:53.599]                       muffled <- FALSE
[17:44:53.599]                       if (inherits(cond, "message")) {
[17:44:53.599]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.599]                         if (muffled) 
[17:44:53.599]                           invokeRestart("muffleMessage")
[17:44:53.599]                       }
[17:44:53.599]                       else if (inherits(cond, "warning")) {
[17:44:53.599]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.599]                         if (muffled) 
[17:44:53.599]                           invokeRestart("muffleWarning")
[17:44:53.599]                       }
[17:44:53.599]                       else if (inherits(cond, "condition")) {
[17:44:53.599]                         if (!is.null(pattern)) {
[17:44:53.599]                           computeRestarts <- base::computeRestarts
[17:44:53.599]                           grepl <- base::grepl
[17:44:53.599]                           restarts <- computeRestarts(cond)
[17:44:53.599]                           for (restart in restarts) {
[17:44:53.599]                             name <- restart$name
[17:44:53.599]                             if (is.null(name)) 
[17:44:53.599]                               next
[17:44:53.599]                             if (!grepl(pattern, name)) 
[17:44:53.599]                               next
[17:44:53.599]                             invokeRestart(restart)
[17:44:53.599]                             muffled <- TRUE
[17:44:53.599]                             break
[17:44:53.599]                           }
[17:44:53.599]                         }
[17:44:53.599]                       }
[17:44:53.599]                       invisible(muffled)
[17:44:53.599]                     }
[17:44:53.599]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.599]                   }
[17:44:53.599]                 }
[17:44:53.599]                 else {
[17:44:53.599]                   if (TRUE) {
[17:44:53.599]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.599]                     {
[17:44:53.599]                       inherits <- base::inherits
[17:44:53.599]                       invokeRestart <- base::invokeRestart
[17:44:53.599]                       is.null <- base::is.null
[17:44:53.599]                       muffled <- FALSE
[17:44:53.599]                       if (inherits(cond, "message")) {
[17:44:53.599]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.599]                         if (muffled) 
[17:44:53.599]                           invokeRestart("muffleMessage")
[17:44:53.599]                       }
[17:44:53.599]                       else if (inherits(cond, "warning")) {
[17:44:53.599]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.599]                         if (muffled) 
[17:44:53.599]                           invokeRestart("muffleWarning")
[17:44:53.599]                       }
[17:44:53.599]                       else if (inherits(cond, "condition")) {
[17:44:53.599]                         if (!is.null(pattern)) {
[17:44:53.599]                           computeRestarts <- base::computeRestarts
[17:44:53.599]                           grepl <- base::grepl
[17:44:53.599]                           restarts <- computeRestarts(cond)
[17:44:53.599]                           for (restart in restarts) {
[17:44:53.599]                             name <- restart$name
[17:44:53.599]                             if (is.null(name)) 
[17:44:53.599]                               next
[17:44:53.599]                             if (!grepl(pattern, name)) 
[17:44:53.599]                               next
[17:44:53.599]                             invokeRestart(restart)
[17:44:53.599]                             muffled <- TRUE
[17:44:53.599]                             break
[17:44:53.599]                           }
[17:44:53.599]                         }
[17:44:53.599]                       }
[17:44:53.599]                       invisible(muffled)
[17:44:53.599]                     }
[17:44:53.599]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.599]                   }
[17:44:53.599]                 }
[17:44:53.599]             }
[17:44:53.599]         }))
[17:44:53.599]     }, error = function(ex) {
[17:44:53.599]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:53.599]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.599]                 ...future.rng), started = ...future.startTime, 
[17:44:53.599]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:53.599]             version = "1.8"), class = "FutureResult")
[17:44:53.599]     }, finally = {
[17:44:53.599]         if (!identical(...future.workdir, getwd())) 
[17:44:53.599]             setwd(...future.workdir)
[17:44:53.599]         {
[17:44:53.599]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:53.599]                 ...future.oldOptions$nwarnings <- NULL
[17:44:53.599]             }
[17:44:53.599]             base::options(...future.oldOptions)
[17:44:53.599]             if (.Platform$OS.type == "windows") {
[17:44:53.599]                 old_names <- names(...future.oldEnvVars)
[17:44:53.599]                 envs <- base::Sys.getenv()
[17:44:53.599]                 names <- names(envs)
[17:44:53.599]                 common <- intersect(names, old_names)
[17:44:53.599]                 added <- setdiff(names, old_names)
[17:44:53.599]                 removed <- setdiff(old_names, names)
[17:44:53.599]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:53.599]                   envs[common]]
[17:44:53.599]                 NAMES <- toupper(changed)
[17:44:53.599]                 args <- list()
[17:44:53.599]                 for (kk in seq_along(NAMES)) {
[17:44:53.599]                   name <- changed[[kk]]
[17:44:53.599]                   NAME <- NAMES[[kk]]
[17:44:53.599]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.599]                     next
[17:44:53.599]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.599]                 }
[17:44:53.599]                 NAMES <- toupper(added)
[17:44:53.599]                 for (kk in seq_along(NAMES)) {
[17:44:53.599]                   name <- added[[kk]]
[17:44:53.599]                   NAME <- NAMES[[kk]]
[17:44:53.599]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.599]                     next
[17:44:53.599]                   args[[name]] <- ""
[17:44:53.599]                 }
[17:44:53.599]                 NAMES <- toupper(removed)
[17:44:53.599]                 for (kk in seq_along(NAMES)) {
[17:44:53.599]                   name <- removed[[kk]]
[17:44:53.599]                   NAME <- NAMES[[kk]]
[17:44:53.599]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.599]                     next
[17:44:53.599]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.599]                 }
[17:44:53.599]                 if (length(args) > 0) 
[17:44:53.599]                   base::do.call(base::Sys.setenv, args = args)
[17:44:53.599]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:53.599]             }
[17:44:53.599]             else {
[17:44:53.599]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:53.599]             }
[17:44:53.599]             {
[17:44:53.599]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:53.599]                   0L) {
[17:44:53.599]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:53.599]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:53.599]                   base::options(opts)
[17:44:53.599]                 }
[17:44:53.599]                 {
[17:44:53.599]                   {
[17:44:53.599]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:53.599]                     NULL
[17:44:53.599]                   }
[17:44:53.599]                   options(future.plan = NULL)
[17:44:53.599]                   if (is.na(NA_character_)) 
[17:44:53.599]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.599]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:53.599]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:53.599]                     .init = FALSE)
[17:44:53.599]                 }
[17:44:53.599]             }
[17:44:53.599]         }
[17:44:53.599]     })
[17:44:53.599]     if (TRUE) {
[17:44:53.599]         base::sink(type = "output", split = FALSE)
[17:44:53.599]         if (TRUE) {
[17:44:53.599]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:53.599]         }
[17:44:53.599]         else {
[17:44:53.599]             ...future.result["stdout"] <- base::list(NULL)
[17:44:53.599]         }
[17:44:53.599]         base::close(...future.stdout)
[17:44:53.599]         ...future.stdout <- NULL
[17:44:53.599]     }
[17:44:53.599]     ...future.result$conditions <- ...future.conditions
[17:44:53.599]     ...future.result$finished <- base::Sys.time()
[17:44:53.599]     ...future.result
[17:44:53.599] }
[17:44:53.601] assign_globals() ...
[17:44:53.601] List of 5
[17:44:53.601]  $ ...future.FUN            :function (...)  
[17:44:53.601]  $ future.call.arguments    : list()
[17:44:53.601]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.601]  $ ...future.elements_ii    :List of 2
[17:44:53.601]   ..$ : int 0
[17:44:53.601]   ..$ : int 0
[17:44:53.601]  $ ...future.seeds_ii       :List of 2
[17:44:53.601]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[17:44:53.601]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[17:44:53.601]  $ ...future.globals.maxSize: NULL
[17:44:53.601]  - attr(*, "where")=List of 5
[17:44:53.601]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:44:53.601]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:44:53.601]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:44:53.601]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:44:53.601]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:44:53.601]  - attr(*, "resolved")= logi FALSE
[17:44:53.601]  - attr(*, "total_size")= num 616
[17:44:53.601]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.601]  - attr(*, "already-done")= logi TRUE
[17:44:53.607] - reassign environment for ‘...future.FUN’
[17:44:53.607] - copied ‘...future.FUN’ to environment
[17:44:53.607] - copied ‘future.call.arguments’ to environment
[17:44:53.607] - copied ‘...future.elements_ii’ to environment
[17:44:53.607] - copied ‘...future.seeds_ii’ to environment
[17:44:53.607] - copied ‘...future.globals.maxSize’ to environment
[17:44:53.607] assign_globals() ... done
[17:44:53.607] requestCore(): workers = 2
[17:44:53.610] MulticoreFuture started
[17:44:53.610] - Launch lazy future ... done
[17:44:53.610] run() for ‘MulticoreFuture’ ... done
[17:44:53.610] Created future:
[17:44:53.611] plan(): Setting new future strategy stack:
[17:44:53.611] List of future strategies:
[17:44:53.611] 1. sequential:
[17:44:53.611]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.611]    - tweaked: FALSE
[17:44:53.611]    - call: NULL
[17:44:53.612] plan(): nbrOfWorkers() = 1
[17:44:53.614] plan(): Setting new future strategy stack:
[17:44:53.615] List of future strategies:
[17:44:53.615] 1. multicore:
[17:44:53.615]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:53.615]    - tweaked: FALSE
[17:44:53.615]    - call: plan(strategy)
[17:44:53.620] plan(): nbrOfWorkers() = 2
[17:44:53.611] MulticoreFuture:
[17:44:53.611] Label: ‘future_replicate-1’
[17:44:53.611] Expression:
[17:44:53.611] {
[17:44:53.611]     do.call(function(...) {
[17:44:53.611]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.611]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.611]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.611]             on.exit(options(oopts), add = TRUE)
[17:44:53.611]         }
[17:44:53.611]         {
[17:44:53.611]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.611]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.611]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.611]                   envir = globalenv(), inherits = FALSE)
[17:44:53.611]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.611]             })
[17:44:53.611]         }
[17:44:53.611]     }, args = future.call.arguments)
[17:44:53.611] }
[17:44:53.611] Lazy evaluation: FALSE
[17:44:53.611] Asynchronous evaluation: TRUE
[17:44:53.611] Local evaluation: TRUE
[17:44:53.611] Environment: R_GlobalEnv
[17:44:53.611] Capture standard output: TRUE
[17:44:53.611] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:53.611] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:53.611] Packages: <none>
[17:44:53.611] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:53.611] Resolved: TRUE
[17:44:53.611] Value: <not collected>
[17:44:53.611] Conditions captured: <none>
[17:44:53.611] Early signaling: FALSE
[17:44:53.611] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:53.611] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.621] Chunk #1 of 2 ... DONE
[17:44:53.622] Chunk #2 of 2 ...
[17:44:53.622]  - Finding globals in 'X' for chunk #2 ...
[17:44:53.622] getGlobalsAndPackages() ...
[17:44:53.622] Searching for globals...
[17:44:53.623] 
[17:44:53.623] Searching for globals ... DONE
[17:44:53.623] - globals: [0] <none>
[17:44:53.623] getGlobalsAndPackages() ... DONE
[17:44:53.623]    + additional globals found: [n=0] 
[17:44:53.623]    + additional namespaces needed: [n=0] 
[17:44:53.624]  - Finding globals in 'X' for chunk #2 ... DONE
[17:44:53.624]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:53.624]  - seeds: [3] <seeds>
[17:44:53.624]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.624] getGlobalsAndPackages() ...
[17:44:53.624] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.625] Resolving globals: FALSE
[17:44:53.625] Tweak future expression to call with '...' arguments ...
[17:44:53.625] {
[17:44:53.625]     do.call(function(...) {
[17:44:53.625]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.625]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.625]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.625]             on.exit(options(oopts), add = TRUE)
[17:44:53.625]         }
[17:44:53.625]         {
[17:44:53.625]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.625]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.625]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.625]                   envir = globalenv(), inherits = FALSE)
[17:44:53.625]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.625]             })
[17:44:53.625]         }
[17:44:53.625]     }, args = future.call.arguments)
[17:44:53.625] }
[17:44:53.625] Tweak future expression to call with '...' arguments ... DONE
[17:44:53.626] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.626] 
[17:44:53.626] getGlobalsAndPackages() ... DONE
[17:44:53.627] run() for ‘Future’ ...
[17:44:53.627] - state: ‘created’
[17:44:53.627] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:44:53.632] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.632] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:44:53.632]   - Field: ‘label’
[17:44:53.632]   - Field: ‘local’
[17:44:53.632]   - Field: ‘owner’
[17:44:53.632]   - Field: ‘envir’
[17:44:53.633]   - Field: ‘workers’
[17:44:53.633]   - Field: ‘packages’
[17:44:53.633]   - Field: ‘gc’
[17:44:53.633]   - Field: ‘job’
[17:44:53.633]   - Field: ‘conditions’
[17:44:53.633]   - Field: ‘expr’
[17:44:53.633]   - Field: ‘uuid’
[17:44:53.634]   - Field: ‘seed’
[17:44:53.634]   - Field: ‘version’
[17:44:53.634]   - Field: ‘result’
[17:44:53.634]   - Field: ‘asynchronous’
[17:44:53.634]   - Field: ‘calls’
[17:44:53.634]   - Field: ‘globals’
[17:44:53.634]   - Field: ‘stdout’
[17:44:53.634]   - Field: ‘earlySignal’
[17:44:53.635]   - Field: ‘lazy’
[17:44:53.635]   - Field: ‘state’
[17:44:53.635] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:44:53.635] - Launch lazy future ...
[17:44:53.635] Packages needed by the future expression (n = 0): <none>
[17:44:53.636] Packages needed by future strategies (n = 0): <none>
[17:44:53.636] {
[17:44:53.636]     {
[17:44:53.636]         {
[17:44:53.636]             ...future.startTime <- base::Sys.time()
[17:44:53.636]             {
[17:44:53.636]                 {
[17:44:53.636]                   {
[17:44:53.636]                     {
[17:44:53.636]                       base::local({
[17:44:53.636]                         has_future <- base::requireNamespace("future", 
[17:44:53.636]                           quietly = TRUE)
[17:44:53.636]                         if (has_future) {
[17:44:53.636]                           ns <- base::getNamespace("future")
[17:44:53.636]                           version <- ns[[".package"]][["version"]]
[17:44:53.636]                           if (is.null(version)) 
[17:44:53.636]                             version <- utils::packageVersion("future")
[17:44:53.636]                         }
[17:44:53.636]                         else {
[17:44:53.636]                           version <- NULL
[17:44:53.636]                         }
[17:44:53.636]                         if (!has_future || version < "1.8.0") {
[17:44:53.636]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:53.636]                             "", base::R.version$version.string), 
[17:44:53.636]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:53.636]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:53.636]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:53.636]                               "release", "version")], collapse = " "), 
[17:44:53.636]                             hostname = base::Sys.info()[["nodename"]])
[17:44:53.636]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:53.636]                             info)
[17:44:53.636]                           info <- base::paste(info, collapse = "; ")
[17:44:53.636]                           if (!has_future) {
[17:44:53.636]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:53.636]                               info)
[17:44:53.636]                           }
[17:44:53.636]                           else {
[17:44:53.636]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:53.636]                               info, version)
[17:44:53.636]                           }
[17:44:53.636]                           base::stop(msg)
[17:44:53.636]                         }
[17:44:53.636]                       })
[17:44:53.636]                     }
[17:44:53.636]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:53.636]                     base::options(mc.cores = 1L)
[17:44:53.636]                   }
[17:44:53.636]                   ...future.strategy.old <- future::plan("list")
[17:44:53.636]                   options(future.plan = NULL)
[17:44:53.636]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.636]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:53.636]                 }
[17:44:53.636]                 ...future.workdir <- getwd()
[17:44:53.636]             }
[17:44:53.636]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:53.636]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:53.636]         }
[17:44:53.636]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:53.636]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:53.636]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:53.636]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:53.636]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:53.636]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:53.636]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:53.636]             base::names(...future.oldOptions))
[17:44:53.636]     }
[17:44:53.636]     if (FALSE) {
[17:44:53.636]     }
[17:44:53.636]     else {
[17:44:53.636]         if (TRUE) {
[17:44:53.636]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:53.636]                 open = "w")
[17:44:53.636]         }
[17:44:53.636]         else {
[17:44:53.636]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:53.636]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:53.636]         }
[17:44:53.636]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:53.636]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:53.636]             base::sink(type = "output", split = FALSE)
[17:44:53.636]             base::close(...future.stdout)
[17:44:53.636]         }, add = TRUE)
[17:44:53.636]     }
[17:44:53.636]     ...future.frame <- base::sys.nframe()
[17:44:53.636]     ...future.conditions <- base::list()
[17:44:53.636]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:53.636]     if (FALSE) {
[17:44:53.636]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:53.636]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:53.636]     }
[17:44:53.636]     ...future.result <- base::tryCatch({
[17:44:53.636]         base::withCallingHandlers({
[17:44:53.636]             ...future.value <- base::withVisible(base::local({
[17:44:53.636]                 withCallingHandlers({
[17:44:53.636]                   {
[17:44:53.636]                     do.call(function(...) {
[17:44:53.636]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.636]                       if (!identical(...future.globals.maxSize.org, 
[17:44:53.636]                         ...future.globals.maxSize)) {
[17:44:53.636]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.636]                         on.exit(options(oopts), add = TRUE)
[17:44:53.636]                       }
[17:44:53.636]                       {
[17:44:53.636]                         lapply(seq_along(...future.elements_ii), 
[17:44:53.636]                           FUN = function(jj) {
[17:44:53.636]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.636]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.636]                               envir = globalenv(), inherits = FALSE)
[17:44:53.636]                             ...future.FUN(...future.X_jj, ...)
[17:44:53.636]                           })
[17:44:53.636]                       }
[17:44:53.636]                     }, args = future.call.arguments)
[17:44:53.636]                   }
[17:44:53.636]                 }, immediateCondition = function(cond) {
[17:44:53.636]                   save_rds <- function (object, pathname, ...) 
[17:44:53.636]                   {
[17:44:53.636]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:44:53.636]                     if (file_test("-f", pathname_tmp)) {
[17:44:53.636]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.636]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:44:53.636]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.636]                         fi_tmp[["mtime"]])
[17:44:53.636]                     }
[17:44:53.636]                     tryCatch({
[17:44:53.636]                       saveRDS(object, file = pathname_tmp, ...)
[17:44:53.636]                     }, error = function(ex) {
[17:44:53.636]                       msg <- conditionMessage(ex)
[17:44:53.636]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.636]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:44:53.636]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.636]                         fi_tmp[["mtime"]], msg)
[17:44:53.636]                       ex$message <- msg
[17:44:53.636]                       stop(ex)
[17:44:53.636]                     })
[17:44:53.636]                     stopifnot(file_test("-f", pathname_tmp))
[17:44:53.636]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:44:53.636]                     if (!res || file_test("-f", pathname_tmp)) {
[17:44:53.636]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.636]                       fi <- file.info(pathname)
[17:44:53.636]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:44:53.636]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.636]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:44:53.636]                         fi[["size"]], fi[["mtime"]])
[17:44:53.636]                       stop(msg)
[17:44:53.636]                     }
[17:44:53.636]                     invisible(pathname)
[17:44:53.636]                   }
[17:44:53.636]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:44:53.636]                     rootPath = tempdir()) 
[17:44:53.636]                   {
[17:44:53.636]                     obj <- list(time = Sys.time(), condition = cond)
[17:44:53.636]                     file <- tempfile(pattern = class(cond)[1], 
[17:44:53.636]                       tmpdir = path, fileext = ".rds")
[17:44:53.636]                     save_rds(obj, file)
[17:44:53.636]                   }
[17:44:53.636]                   saveImmediateCondition(cond, path = "/tmp/RtmpYaox9w/.future/immediateConditions")
[17:44:53.636]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.636]                   {
[17:44:53.636]                     inherits <- base::inherits
[17:44:53.636]                     invokeRestart <- base::invokeRestart
[17:44:53.636]                     is.null <- base::is.null
[17:44:53.636]                     muffled <- FALSE
[17:44:53.636]                     if (inherits(cond, "message")) {
[17:44:53.636]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:53.636]                       if (muffled) 
[17:44:53.636]                         invokeRestart("muffleMessage")
[17:44:53.636]                     }
[17:44:53.636]                     else if (inherits(cond, "warning")) {
[17:44:53.636]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:53.636]                       if (muffled) 
[17:44:53.636]                         invokeRestart("muffleWarning")
[17:44:53.636]                     }
[17:44:53.636]                     else if (inherits(cond, "condition")) {
[17:44:53.636]                       if (!is.null(pattern)) {
[17:44:53.636]                         computeRestarts <- base::computeRestarts
[17:44:53.636]                         grepl <- base::grepl
[17:44:53.636]                         restarts <- computeRestarts(cond)
[17:44:53.636]                         for (restart in restarts) {
[17:44:53.636]                           name <- restart$name
[17:44:53.636]                           if (is.null(name)) 
[17:44:53.636]                             next
[17:44:53.636]                           if (!grepl(pattern, name)) 
[17:44:53.636]                             next
[17:44:53.636]                           invokeRestart(restart)
[17:44:53.636]                           muffled <- TRUE
[17:44:53.636]                           break
[17:44:53.636]                         }
[17:44:53.636]                       }
[17:44:53.636]                     }
[17:44:53.636]                     invisible(muffled)
[17:44:53.636]                   }
[17:44:53.636]                   muffleCondition(cond)
[17:44:53.636]                 })
[17:44:53.636]             }))
[17:44:53.636]             future::FutureResult(value = ...future.value$value, 
[17:44:53.636]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.636]                   ...future.rng), globalenv = if (FALSE) 
[17:44:53.636]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:53.636]                     ...future.globalenv.names))
[17:44:53.636]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:53.636]         }, condition = base::local({
[17:44:53.636]             c <- base::c
[17:44:53.636]             inherits <- base::inherits
[17:44:53.636]             invokeRestart <- base::invokeRestart
[17:44:53.636]             length <- base::length
[17:44:53.636]             list <- base::list
[17:44:53.636]             seq.int <- base::seq.int
[17:44:53.636]             signalCondition <- base::signalCondition
[17:44:53.636]             sys.calls <- base::sys.calls
[17:44:53.636]             `[[` <- base::`[[`
[17:44:53.636]             `+` <- base::`+`
[17:44:53.636]             `<<-` <- base::`<<-`
[17:44:53.636]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:53.636]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:53.636]                   3L)]
[17:44:53.636]             }
[17:44:53.636]             function(cond) {
[17:44:53.636]                 is_error <- inherits(cond, "error")
[17:44:53.636]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:53.636]                   NULL)
[17:44:53.636]                 if (is_error) {
[17:44:53.636]                   sessionInformation <- function() {
[17:44:53.636]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:53.636]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:53.636]                       search = base::search(), system = base::Sys.info())
[17:44:53.636]                   }
[17:44:53.636]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.636]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:53.636]                     cond$call), session = sessionInformation(), 
[17:44:53.636]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:53.636]                   signalCondition(cond)
[17:44:53.636]                 }
[17:44:53.636]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:53.636]                 "immediateCondition"))) {
[17:44:53.636]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:53.636]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.636]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:53.636]                   if (TRUE && !signal) {
[17:44:53.636]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.636]                     {
[17:44:53.636]                       inherits <- base::inherits
[17:44:53.636]                       invokeRestart <- base::invokeRestart
[17:44:53.636]                       is.null <- base::is.null
[17:44:53.636]                       muffled <- FALSE
[17:44:53.636]                       if (inherits(cond, "message")) {
[17:44:53.636]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.636]                         if (muffled) 
[17:44:53.636]                           invokeRestart("muffleMessage")
[17:44:53.636]                       }
[17:44:53.636]                       else if (inherits(cond, "warning")) {
[17:44:53.636]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.636]                         if (muffled) 
[17:44:53.636]                           invokeRestart("muffleWarning")
[17:44:53.636]                       }
[17:44:53.636]                       else if (inherits(cond, "condition")) {
[17:44:53.636]                         if (!is.null(pattern)) {
[17:44:53.636]                           computeRestarts <- base::computeRestarts
[17:44:53.636]                           grepl <- base::grepl
[17:44:53.636]                           restarts <- computeRestarts(cond)
[17:44:53.636]                           for (restart in restarts) {
[17:44:53.636]                             name <- restart$name
[17:44:53.636]                             if (is.null(name)) 
[17:44:53.636]                               next
[17:44:53.636]                             if (!grepl(pattern, name)) 
[17:44:53.636]                               next
[17:44:53.636]                             invokeRestart(restart)
[17:44:53.636]                             muffled <- TRUE
[17:44:53.636]                             break
[17:44:53.636]                           }
[17:44:53.636]                         }
[17:44:53.636]                       }
[17:44:53.636]                       invisible(muffled)
[17:44:53.636]                     }
[17:44:53.636]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.636]                   }
[17:44:53.636]                 }
[17:44:53.636]                 else {
[17:44:53.636]                   if (TRUE) {
[17:44:53.636]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.636]                     {
[17:44:53.636]                       inherits <- base::inherits
[17:44:53.636]                       invokeRestart <- base::invokeRestart
[17:44:53.636]                       is.null <- base::is.null
[17:44:53.636]                       muffled <- FALSE
[17:44:53.636]                       if (inherits(cond, "message")) {
[17:44:53.636]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.636]                         if (muffled) 
[17:44:53.636]                           invokeRestart("muffleMessage")
[17:44:53.636]                       }
[17:44:53.636]                       else if (inherits(cond, "warning")) {
[17:44:53.636]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.636]                         if (muffled) 
[17:44:53.636]                           invokeRestart("muffleWarning")
[17:44:53.636]                       }
[17:44:53.636]                       else if (inherits(cond, "condition")) {
[17:44:53.636]                         if (!is.null(pattern)) {
[17:44:53.636]                           computeRestarts <- base::computeRestarts
[17:44:53.636]                           grepl <- base::grepl
[17:44:53.636]                           restarts <- computeRestarts(cond)
[17:44:53.636]                           for (restart in restarts) {
[17:44:53.636]                             name <- restart$name
[17:44:53.636]                             if (is.null(name)) 
[17:44:53.636]                               next
[17:44:53.636]                             if (!grepl(pattern, name)) 
[17:44:53.636]                               next
[17:44:53.636]                             invokeRestart(restart)
[17:44:53.636]                             muffled <- TRUE
[17:44:53.636]                             break
[17:44:53.636]                           }
[17:44:53.636]                         }
[17:44:53.636]                       }
[17:44:53.636]                       invisible(muffled)
[17:44:53.636]                     }
[17:44:53.636]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.636]                   }
[17:44:53.636]                 }
[17:44:53.636]             }
[17:44:53.636]         }))
[17:44:53.636]     }, error = function(ex) {
[17:44:53.636]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:53.636]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.636]                 ...future.rng), started = ...future.startTime, 
[17:44:53.636]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:53.636]             version = "1.8"), class = "FutureResult")
[17:44:53.636]     }, finally = {
[17:44:53.636]         if (!identical(...future.workdir, getwd())) 
[17:44:53.636]             setwd(...future.workdir)
[17:44:53.636]         {
[17:44:53.636]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:53.636]                 ...future.oldOptions$nwarnings <- NULL
[17:44:53.636]             }
[17:44:53.636]             base::options(...future.oldOptions)
[17:44:53.636]             if (.Platform$OS.type == "windows") {
[17:44:53.636]                 old_names <- names(...future.oldEnvVars)
[17:44:53.636]                 envs <- base::Sys.getenv()
[17:44:53.636]                 names <- names(envs)
[17:44:53.636]                 common <- intersect(names, old_names)
[17:44:53.636]                 added <- setdiff(names, old_names)
[17:44:53.636]                 removed <- setdiff(old_names, names)
[17:44:53.636]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:53.636]                   envs[common]]
[17:44:53.636]                 NAMES <- toupper(changed)
[17:44:53.636]                 args <- list()
[17:44:53.636]                 for (kk in seq_along(NAMES)) {
[17:44:53.636]                   name <- changed[[kk]]
[17:44:53.636]                   NAME <- NAMES[[kk]]
[17:44:53.636]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.636]                     next
[17:44:53.636]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.636]                 }
[17:44:53.636]                 NAMES <- toupper(added)
[17:44:53.636]                 for (kk in seq_along(NAMES)) {
[17:44:53.636]                   name <- added[[kk]]
[17:44:53.636]                   NAME <- NAMES[[kk]]
[17:44:53.636]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.636]                     next
[17:44:53.636]                   args[[name]] <- ""
[17:44:53.636]                 }
[17:44:53.636]                 NAMES <- toupper(removed)
[17:44:53.636]                 for (kk in seq_along(NAMES)) {
[17:44:53.636]                   name <- removed[[kk]]
[17:44:53.636]                   NAME <- NAMES[[kk]]
[17:44:53.636]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.636]                     next
[17:44:53.636]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.636]                 }
[17:44:53.636]                 if (length(args) > 0) 
[17:44:53.636]                   base::do.call(base::Sys.setenv, args = args)
[17:44:53.636]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:53.636]             }
[17:44:53.636]             else {
[17:44:53.636]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:53.636]             }
[17:44:53.636]             {
[17:44:53.636]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:53.636]                   0L) {
[17:44:53.636]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:53.636]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:53.636]                   base::options(opts)
[17:44:53.636]                 }
[17:44:53.636]                 {
[17:44:53.636]                   {
[17:44:53.636]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:53.636]                     NULL
[17:44:53.636]                   }
[17:44:53.636]                   options(future.plan = NULL)
[17:44:53.636]                   if (is.na(NA_character_)) 
[17:44:53.636]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.636]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:53.636]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:53.636]                     .init = FALSE)
[17:44:53.636]                 }
[17:44:53.636]             }
[17:44:53.636]         }
[17:44:53.636]     })
[17:44:53.636]     if (TRUE) {
[17:44:53.636]         base::sink(type = "output", split = FALSE)
[17:44:53.636]         if (TRUE) {
[17:44:53.636]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:53.636]         }
[17:44:53.636]         else {
[17:44:53.636]             ...future.result["stdout"] <- base::list(NULL)
[17:44:53.636]         }
[17:44:53.636]         base::close(...future.stdout)
[17:44:53.636]         ...future.stdout <- NULL
[17:44:53.636]     }
[17:44:53.636]     ...future.result$conditions <- ...future.conditions
[17:44:53.636]     ...future.result$finished <- base::Sys.time()
[17:44:53.636]     ...future.result
[17:44:53.636] }
[17:44:53.640] assign_globals() ...
[17:44:53.640] List of 5
[17:44:53.640]  $ ...future.FUN            :function (...)  
[17:44:53.640]  $ future.call.arguments    : list()
[17:44:53.640]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.640]  $ ...future.elements_ii    :List of 3
[17:44:53.640]   ..$ : int 0
[17:44:53.640]   ..$ : int 0
[17:44:53.640]   ..$ : int 0
[17:44:53.640]  $ ...future.seeds_ii       :List of 3
[17:44:53.640]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[17:44:53.640]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[17:44:53.640]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[17:44:53.640]  $ ...future.globals.maxSize: NULL
[17:44:53.640]  - attr(*, "where")=List of 5
[17:44:53.640]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:44:53.640]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:44:53.640]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:44:53.640]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:44:53.640]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:44:53.640]  - attr(*, "resolved")= logi FALSE
[17:44:53.640]  - attr(*, "total_size")= num 616
[17:44:53.640]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.640]  - attr(*, "already-done")= logi TRUE
[17:44:53.653] - reassign environment for ‘...future.FUN’
[17:44:53.653] - copied ‘...future.FUN’ to environment
[17:44:53.653] - copied ‘future.call.arguments’ to environment
[17:44:53.654] - copied ‘...future.elements_ii’ to environment
[17:44:53.654] - copied ‘...future.seeds_ii’ to environment
[17:44:53.654] - copied ‘...future.globals.maxSize’ to environment
[17:44:53.654] assign_globals() ... done
[17:44:53.654] requestCore(): workers = 2
[17:44:53.657] MulticoreFuture started
[17:44:53.657] - Launch lazy future ... done
[17:44:53.657] run() for ‘MulticoreFuture’ ... done
[17:44:53.658] Created future:
[17:44:53.658] plan(): Setting new future strategy stack:
[17:44:53.658] List of future strategies:
[17:44:53.658] 1. sequential:
[17:44:53.658]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.658]    - tweaked: FALSE
[17:44:53.658]    - call: NULL
[17:44:53.659] plan(): nbrOfWorkers() = 1
[17:44:53.662] plan(): Setting new future strategy stack:
[17:44:53.662] List of future strategies:
[17:44:53.662] 1. multicore:
[17:44:53.662]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:53.662]    - tweaked: FALSE
[17:44:53.662]    - call: plan(strategy)
[17:44:53.667] plan(): nbrOfWorkers() = 2
[17:44:53.658] MulticoreFuture:
[17:44:53.658] Label: ‘future_replicate-2’
[17:44:53.658] Expression:
[17:44:53.658] {
[17:44:53.658]     do.call(function(...) {
[17:44:53.658]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.658]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.658]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.658]             on.exit(options(oopts), add = TRUE)
[17:44:53.658]         }
[17:44:53.658]         {
[17:44:53.658]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.658]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.658]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.658]                   envir = globalenv(), inherits = FALSE)
[17:44:53.658]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.658]             })
[17:44:53.658]         }
[17:44:53.658]     }, args = future.call.arguments)
[17:44:53.658] }
[17:44:53.658] Lazy evaluation: FALSE
[17:44:53.658] Asynchronous evaluation: TRUE
[17:44:53.658] Local evaluation: TRUE
[17:44:53.658] Environment: R_GlobalEnv
[17:44:53.658] Capture standard output: TRUE
[17:44:53.658] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:53.658] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:53.658] Packages: <none>
[17:44:53.658] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:53.658] Resolved: TRUE
[17:44:53.658] Value: <not collected>
[17:44:53.658] Conditions captured: <none>
[17:44:53.658] Early signaling: FALSE
[17:44:53.658] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:53.658] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.668] Chunk #2 of 2 ... DONE
[17:44:53.668] Launching 2 futures (chunks) ... DONE
[17:44:53.668] Resolving 2 futures (chunks) ...
[17:44:53.669] resolve() on list ...
[17:44:53.669]  recursive: 0
[17:44:53.669]  length: 2
[17:44:53.669] 
[17:44:53.670] Future #1
[17:44:53.670] result() for MulticoreFuture ...
[17:44:53.671] result() for MulticoreFuture ...
[17:44:53.671] result() for MulticoreFuture ... done
[17:44:53.671] result() for MulticoreFuture ... done
[17:44:53.671] result() for MulticoreFuture ...
[17:44:53.671] result() for MulticoreFuture ... done
[17:44:53.672] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:44:53.672] - nx: 2
[17:44:53.672] - relay: TRUE
[17:44:53.672] - stdout: TRUE
[17:44:53.672] - signal: TRUE
[17:44:53.672] - resignal: FALSE
[17:44:53.672] - force: TRUE
[17:44:53.673] - relayed: [n=2] FALSE, FALSE
[17:44:53.673] - queued futures: [n=2] FALSE, FALSE
[17:44:53.673]  - until=1
[17:44:53.673]  - relaying element #1
[17:44:53.673] result() for MulticoreFuture ...
[17:44:53.673] result() for MulticoreFuture ... done
[17:44:53.673] result() for MulticoreFuture ...
[17:44:53.674] result() for MulticoreFuture ... done
[17:44:53.674] result() for MulticoreFuture ...
[17:44:53.674] result() for MulticoreFuture ... done
[17:44:53.674] result() for MulticoreFuture ...
[17:44:53.674] result() for MulticoreFuture ... done
[17:44:53.674] - relayed: [n=2] TRUE, FALSE
[17:44:53.674] - queued futures: [n=2] TRUE, FALSE
[17:44:53.675] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:44:53.675]  length: 1 (resolved future 1)
[17:44:53.675] Future #2
[17:44:53.675] result() for MulticoreFuture ...
[17:44:53.676] result() for MulticoreFuture ...
[17:44:53.676] result() for MulticoreFuture ... done
[17:44:53.676] result() for MulticoreFuture ... done
[17:44:53.677] result() for MulticoreFuture ...
[17:44:53.677] result() for MulticoreFuture ... done
[17:44:53.677] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:44:53.677] - nx: 2
[17:44:53.677] - relay: TRUE
[17:44:53.677] - stdout: TRUE
[17:44:53.678] - signal: TRUE
[17:44:53.678] - resignal: FALSE
[17:44:53.678] - force: TRUE
[17:44:53.678] - relayed: [n=2] TRUE, FALSE
[17:44:53.678] - queued futures: [n=2] TRUE, FALSE
[17:44:53.678]  - until=2
[17:44:53.678]  - relaying element #2
[17:44:53.678] result() for MulticoreFuture ...
[17:44:53.678] result() for MulticoreFuture ... done
[17:44:53.679] result() for MulticoreFuture ...
[17:44:53.679] result() for MulticoreFuture ... done
[17:44:53.679] result() for MulticoreFuture ...
[17:44:53.679] result() for MulticoreFuture ... done
[17:44:53.679] result() for MulticoreFuture ...
[17:44:53.679] result() for MulticoreFuture ... done
[17:44:53.679] - relayed: [n=2] TRUE, TRUE
[17:44:53.680] - queued futures: [n=2] TRUE, TRUE
[17:44:53.680] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:44:53.680]  length: 0 (resolved future 2)
[17:44:53.680] Relaying remaining futures
[17:44:53.680] signalConditionsASAP(NULL, pos=0) ...
[17:44:53.680] - nx: 2
[17:44:53.680] - relay: TRUE
[17:44:53.680] - stdout: TRUE
[17:44:53.680] - signal: TRUE
[17:44:53.681] - resignal: FALSE
[17:44:53.681] - force: TRUE
[17:44:53.681] - relayed: [n=2] TRUE, TRUE
[17:44:53.681] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:44:53.681] - relayed: [n=2] TRUE, TRUE
[17:44:53.681] - queued futures: [n=2] TRUE, TRUE
[17:44:53.681] signalConditionsASAP(NULL, pos=0) ... done
[17:44:53.681] resolve() on list ... DONE
[17:44:53.681] result() for MulticoreFuture ...
[17:44:53.682] result() for MulticoreFuture ... done
[17:44:53.682] result() for MulticoreFuture ...
[17:44:53.682] result() for MulticoreFuture ... done
[17:44:53.682] result() for MulticoreFuture ...
[17:44:53.682] result() for MulticoreFuture ... done
[17:44:53.682] result() for MulticoreFuture ...
[17:44:53.682] result() for MulticoreFuture ... done
[17:44:53.682]  - Number of value chunks collected: 2
[17:44:53.682] Resolving 2 futures (chunks) ... DONE
[17:44:53.683] Reducing values from 2 chunks ...
[17:44:53.683]  - Number of values collected after concatenation: 5
[17:44:53.683]  - Number of values expected: 5
[17:44:53.683] Reducing values from 2 chunks ... DONE
[17:44:53.683] future_lapply() ... DONE
[17:44:53.683] future_lapply() ...
[17:44:53.684] Generating random seeds ...
[17:44:53.684] Generating random seed streams for 5 elements ...
[17:44:53.684] Generating random seed streams for 5 elements ... DONE
[17:44:53.684] Generating random seeds ... DONE
[17:44:53.684] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:44:53.689] Number of chunks: 2
[17:44:53.689] getGlobalsAndPackagesXApply() ...
[17:44:53.689]  - future.globals: TRUE
[17:44:53.689] getGlobalsAndPackages() ...
[17:44:53.689] Searching for globals...
[17:44:53.691] - globals found: [2] ‘FUN’, ‘sample’
[17:44:53.691] Searching for globals ... DONE
[17:44:53.691] Resolving globals: FALSE
[17:44:53.691] The total size of the 1 globals is 616 bytes (616 bytes)
[17:44:53.692] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:44:53.692] - globals: [1] ‘FUN’
[17:44:53.692] 
[17:44:53.692] getGlobalsAndPackages() ... DONE
[17:44:53.692]  - globals found/used: [n=1] ‘FUN’
[17:44:53.692]  - needed namespaces: [n=0] 
[17:44:53.693] Finding globals ... DONE
[17:44:53.693]  - use_args: TRUE
[17:44:53.693]  - Getting '...' globals ...
[17:44:53.693] resolve() on list ...
[17:44:53.693]  recursive: 0
[17:44:53.693]  length: 1
[17:44:53.693]  elements: ‘...’
[17:44:53.694]  length: 0 (resolved future 1)
[17:44:53.694] resolve() on list ... DONE
[17:44:53.694]    - '...' content: [n=0] 
[17:44:53.694] List of 1
[17:44:53.694]  $ ...: list()
[17:44:53.694]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.694]  - attr(*, "where")=List of 1
[17:44:53.694]   ..$ ...:<environment: 0x558387eb9798> 
[17:44:53.694]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.694]  - attr(*, "resolved")= logi TRUE
[17:44:53.694]  - attr(*, "total_size")= num NA
[17:44:53.699]  - Getting '...' globals ... DONE
[17:44:53.699] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:44:53.700] List of 2
[17:44:53.700]  $ ...future.FUN:function (...)  
[17:44:53.700]  $ ...          : list()
[17:44:53.700]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.700]  - attr(*, "where")=List of 2
[17:44:53.700]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:44:53.700]   ..$ ...          :<environment: 0x558387eb9798> 
[17:44:53.700]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.700]  - attr(*, "resolved")= logi FALSE
[17:44:53.700]  - attr(*, "total_size")= num 616
[17:44:53.703] Packages to be attached in all futures: [n=0] 
[17:44:53.703] getGlobalsAndPackagesXApply() ... DONE
[17:44:53.703] Number of futures (= number of chunks): 2
[17:44:53.703] Launching 2 futures (chunks) ...
[17:44:53.704] Chunk #1 of 2 ...
[17:44:53.704]  - Finding globals in 'X' for chunk #1 ...
[17:44:53.704] getGlobalsAndPackages() ...
[17:44:53.704] Searching for globals...
[17:44:53.704] 
[17:44:53.704] Searching for globals ... DONE
[17:44:53.704] - globals: [0] <none>
[17:44:53.704] getGlobalsAndPackages() ... DONE
[17:44:53.704]    + additional globals found: [n=0] 
[17:44:53.705]    + additional namespaces needed: [n=0] 
[17:44:53.705]  - Finding globals in 'X' for chunk #1 ... DONE
[17:44:53.705]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:53.705]  - seeds: [2] <seeds>
[17:44:53.705]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.705] getGlobalsAndPackages() ...
[17:44:53.705] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.705] Resolving globals: FALSE
[17:44:53.705] Tweak future expression to call with '...' arguments ...
[17:44:53.706] {
[17:44:53.706]     do.call(function(...) {
[17:44:53.706]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.706]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.706]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.706]             on.exit(options(oopts), add = TRUE)
[17:44:53.706]         }
[17:44:53.706]         {
[17:44:53.706]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.706]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.706]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.706]                   envir = globalenv(), inherits = FALSE)
[17:44:53.706]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.706]             })
[17:44:53.706]         }
[17:44:53.706]     }, args = future.call.arguments)
[17:44:53.706] }
[17:44:53.706] Tweak future expression to call with '...' arguments ... DONE
[17:44:53.706] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.706] 
[17:44:53.706] getGlobalsAndPackages() ... DONE
[17:44:53.707] run() for ‘Future’ ...
[17:44:53.707] - state: ‘created’
[17:44:53.707] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:44:53.711] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.711] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:44:53.711]   - Field: ‘label’
[17:44:53.711]   - Field: ‘local’
[17:44:53.711]   - Field: ‘owner’
[17:44:53.711]   - Field: ‘envir’
[17:44:53.711]   - Field: ‘workers’
[17:44:53.711]   - Field: ‘packages’
[17:44:53.711]   - Field: ‘gc’
[17:44:53.712]   - Field: ‘job’
[17:44:53.712]   - Field: ‘conditions’
[17:44:53.712]   - Field: ‘expr’
[17:44:53.712]   - Field: ‘uuid’
[17:44:53.712]   - Field: ‘seed’
[17:44:53.712]   - Field: ‘version’
[17:44:53.712]   - Field: ‘result’
[17:44:53.712]   - Field: ‘asynchronous’
[17:44:53.712]   - Field: ‘calls’
[17:44:53.712]   - Field: ‘globals’
[17:44:53.712]   - Field: ‘stdout’
[17:44:53.713]   - Field: ‘earlySignal’
[17:44:53.713]   - Field: ‘lazy’
[17:44:53.713]   - Field: ‘state’
[17:44:53.713] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:44:53.713] - Launch lazy future ...
[17:44:53.713] Packages needed by the future expression (n = 0): <none>
[17:44:53.713] Packages needed by future strategies (n = 0): <none>
[17:44:53.714] {
[17:44:53.714]     {
[17:44:53.714]         {
[17:44:53.714]             ...future.startTime <- base::Sys.time()
[17:44:53.714]             {
[17:44:53.714]                 {
[17:44:53.714]                   {
[17:44:53.714]                     {
[17:44:53.714]                       base::local({
[17:44:53.714]                         has_future <- base::requireNamespace("future", 
[17:44:53.714]                           quietly = TRUE)
[17:44:53.714]                         if (has_future) {
[17:44:53.714]                           ns <- base::getNamespace("future")
[17:44:53.714]                           version <- ns[[".package"]][["version"]]
[17:44:53.714]                           if (is.null(version)) 
[17:44:53.714]                             version <- utils::packageVersion("future")
[17:44:53.714]                         }
[17:44:53.714]                         else {
[17:44:53.714]                           version <- NULL
[17:44:53.714]                         }
[17:44:53.714]                         if (!has_future || version < "1.8.0") {
[17:44:53.714]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:53.714]                             "", base::R.version$version.string), 
[17:44:53.714]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:53.714]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:53.714]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:53.714]                               "release", "version")], collapse = " "), 
[17:44:53.714]                             hostname = base::Sys.info()[["nodename"]])
[17:44:53.714]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:53.714]                             info)
[17:44:53.714]                           info <- base::paste(info, collapse = "; ")
[17:44:53.714]                           if (!has_future) {
[17:44:53.714]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:53.714]                               info)
[17:44:53.714]                           }
[17:44:53.714]                           else {
[17:44:53.714]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:53.714]                               info, version)
[17:44:53.714]                           }
[17:44:53.714]                           base::stop(msg)
[17:44:53.714]                         }
[17:44:53.714]                       })
[17:44:53.714]                     }
[17:44:53.714]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:53.714]                     base::options(mc.cores = 1L)
[17:44:53.714]                   }
[17:44:53.714]                   ...future.strategy.old <- future::plan("list")
[17:44:53.714]                   options(future.plan = NULL)
[17:44:53.714]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.714]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:53.714]                 }
[17:44:53.714]                 ...future.workdir <- getwd()
[17:44:53.714]             }
[17:44:53.714]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:53.714]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:53.714]         }
[17:44:53.714]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:53.714]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:53.714]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:53.714]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:53.714]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:53.714]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:53.714]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:53.714]             base::names(...future.oldOptions))
[17:44:53.714]     }
[17:44:53.714]     if (FALSE) {
[17:44:53.714]     }
[17:44:53.714]     else {
[17:44:53.714]         if (TRUE) {
[17:44:53.714]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:53.714]                 open = "w")
[17:44:53.714]         }
[17:44:53.714]         else {
[17:44:53.714]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:53.714]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:53.714]         }
[17:44:53.714]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:53.714]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:53.714]             base::sink(type = "output", split = FALSE)
[17:44:53.714]             base::close(...future.stdout)
[17:44:53.714]         }, add = TRUE)
[17:44:53.714]     }
[17:44:53.714]     ...future.frame <- base::sys.nframe()
[17:44:53.714]     ...future.conditions <- base::list()
[17:44:53.714]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:53.714]     if (FALSE) {
[17:44:53.714]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:53.714]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:53.714]     }
[17:44:53.714]     ...future.result <- base::tryCatch({
[17:44:53.714]         base::withCallingHandlers({
[17:44:53.714]             ...future.value <- base::withVisible(base::local({
[17:44:53.714]                 withCallingHandlers({
[17:44:53.714]                   {
[17:44:53.714]                     do.call(function(...) {
[17:44:53.714]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.714]                       if (!identical(...future.globals.maxSize.org, 
[17:44:53.714]                         ...future.globals.maxSize)) {
[17:44:53.714]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.714]                         on.exit(options(oopts), add = TRUE)
[17:44:53.714]                       }
[17:44:53.714]                       {
[17:44:53.714]                         lapply(seq_along(...future.elements_ii), 
[17:44:53.714]                           FUN = function(jj) {
[17:44:53.714]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.714]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.714]                               envir = globalenv(), inherits = FALSE)
[17:44:53.714]                             ...future.FUN(...future.X_jj, ...)
[17:44:53.714]                           })
[17:44:53.714]                       }
[17:44:53.714]                     }, args = future.call.arguments)
[17:44:53.714]                   }
[17:44:53.714]                 }, immediateCondition = function(cond) {
[17:44:53.714]                   save_rds <- function (object, pathname, ...) 
[17:44:53.714]                   {
[17:44:53.714]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:44:53.714]                     if (file_test("-f", pathname_tmp)) {
[17:44:53.714]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.714]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:44:53.714]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.714]                         fi_tmp[["mtime"]])
[17:44:53.714]                     }
[17:44:53.714]                     tryCatch({
[17:44:53.714]                       saveRDS(object, file = pathname_tmp, ...)
[17:44:53.714]                     }, error = function(ex) {
[17:44:53.714]                       msg <- conditionMessage(ex)
[17:44:53.714]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.714]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:44:53.714]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.714]                         fi_tmp[["mtime"]], msg)
[17:44:53.714]                       ex$message <- msg
[17:44:53.714]                       stop(ex)
[17:44:53.714]                     })
[17:44:53.714]                     stopifnot(file_test("-f", pathname_tmp))
[17:44:53.714]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:44:53.714]                     if (!res || file_test("-f", pathname_tmp)) {
[17:44:53.714]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.714]                       fi <- file.info(pathname)
[17:44:53.714]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:44:53.714]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.714]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:44:53.714]                         fi[["size"]], fi[["mtime"]])
[17:44:53.714]                       stop(msg)
[17:44:53.714]                     }
[17:44:53.714]                     invisible(pathname)
[17:44:53.714]                   }
[17:44:53.714]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:44:53.714]                     rootPath = tempdir()) 
[17:44:53.714]                   {
[17:44:53.714]                     obj <- list(time = Sys.time(), condition = cond)
[17:44:53.714]                     file <- tempfile(pattern = class(cond)[1], 
[17:44:53.714]                       tmpdir = path, fileext = ".rds")
[17:44:53.714]                     save_rds(obj, file)
[17:44:53.714]                   }
[17:44:53.714]                   saveImmediateCondition(cond, path = "/tmp/RtmpYaox9w/.future/immediateConditions")
[17:44:53.714]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.714]                   {
[17:44:53.714]                     inherits <- base::inherits
[17:44:53.714]                     invokeRestart <- base::invokeRestart
[17:44:53.714]                     is.null <- base::is.null
[17:44:53.714]                     muffled <- FALSE
[17:44:53.714]                     if (inherits(cond, "message")) {
[17:44:53.714]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:53.714]                       if (muffled) 
[17:44:53.714]                         invokeRestart("muffleMessage")
[17:44:53.714]                     }
[17:44:53.714]                     else if (inherits(cond, "warning")) {
[17:44:53.714]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:53.714]                       if (muffled) 
[17:44:53.714]                         invokeRestart("muffleWarning")
[17:44:53.714]                     }
[17:44:53.714]                     else if (inherits(cond, "condition")) {
[17:44:53.714]                       if (!is.null(pattern)) {
[17:44:53.714]                         computeRestarts <- base::computeRestarts
[17:44:53.714]                         grepl <- base::grepl
[17:44:53.714]                         restarts <- computeRestarts(cond)
[17:44:53.714]                         for (restart in restarts) {
[17:44:53.714]                           name <- restart$name
[17:44:53.714]                           if (is.null(name)) 
[17:44:53.714]                             next
[17:44:53.714]                           if (!grepl(pattern, name)) 
[17:44:53.714]                             next
[17:44:53.714]                           invokeRestart(restart)
[17:44:53.714]                           muffled <- TRUE
[17:44:53.714]                           break
[17:44:53.714]                         }
[17:44:53.714]                       }
[17:44:53.714]                     }
[17:44:53.714]                     invisible(muffled)
[17:44:53.714]                   }
[17:44:53.714]                   muffleCondition(cond)
[17:44:53.714]                 })
[17:44:53.714]             }))
[17:44:53.714]             future::FutureResult(value = ...future.value$value, 
[17:44:53.714]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.714]                   ...future.rng), globalenv = if (FALSE) 
[17:44:53.714]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:53.714]                     ...future.globalenv.names))
[17:44:53.714]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:53.714]         }, condition = base::local({
[17:44:53.714]             c <- base::c
[17:44:53.714]             inherits <- base::inherits
[17:44:53.714]             invokeRestart <- base::invokeRestart
[17:44:53.714]             length <- base::length
[17:44:53.714]             list <- base::list
[17:44:53.714]             seq.int <- base::seq.int
[17:44:53.714]             signalCondition <- base::signalCondition
[17:44:53.714]             sys.calls <- base::sys.calls
[17:44:53.714]             `[[` <- base::`[[`
[17:44:53.714]             `+` <- base::`+`
[17:44:53.714]             `<<-` <- base::`<<-`
[17:44:53.714]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:53.714]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:53.714]                   3L)]
[17:44:53.714]             }
[17:44:53.714]             function(cond) {
[17:44:53.714]                 is_error <- inherits(cond, "error")
[17:44:53.714]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:53.714]                   NULL)
[17:44:53.714]                 if (is_error) {
[17:44:53.714]                   sessionInformation <- function() {
[17:44:53.714]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:53.714]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:53.714]                       search = base::search(), system = base::Sys.info())
[17:44:53.714]                   }
[17:44:53.714]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.714]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:53.714]                     cond$call), session = sessionInformation(), 
[17:44:53.714]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:53.714]                   signalCondition(cond)
[17:44:53.714]                 }
[17:44:53.714]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:53.714]                 "immediateCondition"))) {
[17:44:53.714]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:53.714]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.714]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:53.714]                   if (TRUE && !signal) {
[17:44:53.714]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.714]                     {
[17:44:53.714]                       inherits <- base::inherits
[17:44:53.714]                       invokeRestart <- base::invokeRestart
[17:44:53.714]                       is.null <- base::is.null
[17:44:53.714]                       muffled <- FALSE
[17:44:53.714]                       if (inherits(cond, "message")) {
[17:44:53.714]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.714]                         if (muffled) 
[17:44:53.714]                           invokeRestart("muffleMessage")
[17:44:53.714]                       }
[17:44:53.714]                       else if (inherits(cond, "warning")) {
[17:44:53.714]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.714]                         if (muffled) 
[17:44:53.714]                           invokeRestart("muffleWarning")
[17:44:53.714]                       }
[17:44:53.714]                       else if (inherits(cond, "condition")) {
[17:44:53.714]                         if (!is.null(pattern)) {
[17:44:53.714]                           computeRestarts <- base::computeRestarts
[17:44:53.714]                           grepl <- base::grepl
[17:44:53.714]                           restarts <- computeRestarts(cond)
[17:44:53.714]                           for (restart in restarts) {
[17:44:53.714]                             name <- restart$name
[17:44:53.714]                             if (is.null(name)) 
[17:44:53.714]                               next
[17:44:53.714]                             if (!grepl(pattern, name)) 
[17:44:53.714]                               next
[17:44:53.714]                             invokeRestart(restart)
[17:44:53.714]                             muffled <- TRUE
[17:44:53.714]                             break
[17:44:53.714]                           }
[17:44:53.714]                         }
[17:44:53.714]                       }
[17:44:53.714]                       invisible(muffled)
[17:44:53.714]                     }
[17:44:53.714]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.714]                   }
[17:44:53.714]                 }
[17:44:53.714]                 else {
[17:44:53.714]                   if (TRUE) {
[17:44:53.714]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.714]                     {
[17:44:53.714]                       inherits <- base::inherits
[17:44:53.714]                       invokeRestart <- base::invokeRestart
[17:44:53.714]                       is.null <- base::is.null
[17:44:53.714]                       muffled <- FALSE
[17:44:53.714]                       if (inherits(cond, "message")) {
[17:44:53.714]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.714]                         if (muffled) 
[17:44:53.714]                           invokeRestart("muffleMessage")
[17:44:53.714]                       }
[17:44:53.714]                       else if (inherits(cond, "warning")) {
[17:44:53.714]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.714]                         if (muffled) 
[17:44:53.714]                           invokeRestart("muffleWarning")
[17:44:53.714]                       }
[17:44:53.714]                       else if (inherits(cond, "condition")) {
[17:44:53.714]                         if (!is.null(pattern)) {
[17:44:53.714]                           computeRestarts <- base::computeRestarts
[17:44:53.714]                           grepl <- base::grepl
[17:44:53.714]                           restarts <- computeRestarts(cond)
[17:44:53.714]                           for (restart in restarts) {
[17:44:53.714]                             name <- restart$name
[17:44:53.714]                             if (is.null(name)) 
[17:44:53.714]                               next
[17:44:53.714]                             if (!grepl(pattern, name)) 
[17:44:53.714]                               next
[17:44:53.714]                             invokeRestart(restart)
[17:44:53.714]                             muffled <- TRUE
[17:44:53.714]                             break
[17:44:53.714]                           }
[17:44:53.714]                         }
[17:44:53.714]                       }
[17:44:53.714]                       invisible(muffled)
[17:44:53.714]                     }
[17:44:53.714]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.714]                   }
[17:44:53.714]                 }
[17:44:53.714]             }
[17:44:53.714]         }))
[17:44:53.714]     }, error = function(ex) {
[17:44:53.714]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:53.714]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.714]                 ...future.rng), started = ...future.startTime, 
[17:44:53.714]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:53.714]             version = "1.8"), class = "FutureResult")
[17:44:53.714]     }, finally = {
[17:44:53.714]         if (!identical(...future.workdir, getwd())) 
[17:44:53.714]             setwd(...future.workdir)
[17:44:53.714]         {
[17:44:53.714]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:53.714]                 ...future.oldOptions$nwarnings <- NULL
[17:44:53.714]             }
[17:44:53.714]             base::options(...future.oldOptions)
[17:44:53.714]             if (.Platform$OS.type == "windows") {
[17:44:53.714]                 old_names <- names(...future.oldEnvVars)
[17:44:53.714]                 envs <- base::Sys.getenv()
[17:44:53.714]                 names <- names(envs)
[17:44:53.714]                 common <- intersect(names, old_names)
[17:44:53.714]                 added <- setdiff(names, old_names)
[17:44:53.714]                 removed <- setdiff(old_names, names)
[17:44:53.714]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:53.714]                   envs[common]]
[17:44:53.714]                 NAMES <- toupper(changed)
[17:44:53.714]                 args <- list()
[17:44:53.714]                 for (kk in seq_along(NAMES)) {
[17:44:53.714]                   name <- changed[[kk]]
[17:44:53.714]                   NAME <- NAMES[[kk]]
[17:44:53.714]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.714]                     next
[17:44:53.714]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.714]                 }
[17:44:53.714]                 NAMES <- toupper(added)
[17:44:53.714]                 for (kk in seq_along(NAMES)) {
[17:44:53.714]                   name <- added[[kk]]
[17:44:53.714]                   NAME <- NAMES[[kk]]
[17:44:53.714]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.714]                     next
[17:44:53.714]                   args[[name]] <- ""
[17:44:53.714]                 }
[17:44:53.714]                 NAMES <- toupper(removed)
[17:44:53.714]                 for (kk in seq_along(NAMES)) {
[17:44:53.714]                   name <- removed[[kk]]
[17:44:53.714]                   NAME <- NAMES[[kk]]
[17:44:53.714]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.714]                     next
[17:44:53.714]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.714]                 }
[17:44:53.714]                 if (length(args) > 0) 
[17:44:53.714]                   base::do.call(base::Sys.setenv, args = args)
[17:44:53.714]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:53.714]             }
[17:44:53.714]             else {
[17:44:53.714]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:53.714]             }
[17:44:53.714]             {
[17:44:53.714]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:53.714]                   0L) {
[17:44:53.714]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:53.714]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:53.714]                   base::options(opts)
[17:44:53.714]                 }
[17:44:53.714]                 {
[17:44:53.714]                   {
[17:44:53.714]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:53.714]                     NULL
[17:44:53.714]                   }
[17:44:53.714]                   options(future.plan = NULL)
[17:44:53.714]                   if (is.na(NA_character_)) 
[17:44:53.714]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.714]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:53.714]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:53.714]                     .init = FALSE)
[17:44:53.714]                 }
[17:44:53.714]             }
[17:44:53.714]         }
[17:44:53.714]     })
[17:44:53.714]     if (TRUE) {
[17:44:53.714]         base::sink(type = "output", split = FALSE)
[17:44:53.714]         if (TRUE) {
[17:44:53.714]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:53.714]         }
[17:44:53.714]         else {
[17:44:53.714]             ...future.result["stdout"] <- base::list(NULL)
[17:44:53.714]         }
[17:44:53.714]         base::close(...future.stdout)
[17:44:53.714]         ...future.stdout <- NULL
[17:44:53.714]     }
[17:44:53.714]     ...future.result$conditions <- ...future.conditions
[17:44:53.714]     ...future.result$finished <- base::Sys.time()
[17:44:53.714]     ...future.result
[17:44:53.714] }
[17:44:53.716] assign_globals() ...
[17:44:53.716] List of 5
[17:44:53.716]  $ ...future.FUN            :function (...)  
[17:44:53.716]  $ future.call.arguments    : list()
[17:44:53.716]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.716]  $ ...future.elements_ii    :List of 2
[17:44:53.716]   ..$ : int 0
[17:44:53.716]   ..$ : int 0
[17:44:53.716]  $ ...future.seeds_ii       :List of 2
[17:44:53.716]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[17:44:53.716]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[17:44:53.716]  $ ...future.globals.maxSize: NULL
[17:44:53.716]  - attr(*, "where")=List of 5
[17:44:53.716]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:44:53.716]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:44:53.716]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:44:53.716]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:44:53.716]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:44:53.716]  - attr(*, "resolved")= logi FALSE
[17:44:53.716]  - attr(*, "total_size")= num 616
[17:44:53.716]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.716]  - attr(*, "already-done")= logi TRUE
[17:44:53.722] - reassign environment for ‘...future.FUN’
[17:44:53.722] - copied ‘...future.FUN’ to environment
[17:44:53.722] - copied ‘future.call.arguments’ to environment
[17:44:53.722] - copied ‘...future.elements_ii’ to environment
[17:44:53.722] - copied ‘...future.seeds_ii’ to environment
[17:44:53.723] - copied ‘...future.globals.maxSize’ to environment
[17:44:53.723] assign_globals() ... done
[17:44:53.723] requestCore(): workers = 2
[17:44:53.725] MulticoreFuture started
[17:44:53.725] - Launch lazy future ... done
[17:44:53.725] run() for ‘MulticoreFuture’ ... done
[17:44:53.726] Created future:
[17:44:53.726] plan(): Setting new future strategy stack:
[17:44:53.726] List of future strategies:
[17:44:53.726] 1. sequential:
[17:44:53.726]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.726]    - tweaked: FALSE
[17:44:53.726]    - call: NULL
[17:44:53.727] plan(): nbrOfWorkers() = 1
[17:44:53.730] plan(): Setting new future strategy stack:
[17:44:53.730] List of future strategies:
[17:44:53.730] 1. multicore:
[17:44:53.730]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:53.730]    - tweaked: FALSE
[17:44:53.730]    - call: plan(strategy)
[17:44:53.735] plan(): nbrOfWorkers() = 2
[17:44:53.726] MulticoreFuture:
[17:44:53.726] Label: ‘future_replicate-1’
[17:44:53.726] Expression:
[17:44:53.726] {
[17:44:53.726]     do.call(function(...) {
[17:44:53.726]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.726]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.726]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.726]             on.exit(options(oopts), add = TRUE)
[17:44:53.726]         }
[17:44:53.726]         {
[17:44:53.726]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.726]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.726]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.726]                   envir = globalenv(), inherits = FALSE)
[17:44:53.726]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.726]             })
[17:44:53.726]         }
[17:44:53.726]     }, args = future.call.arguments)
[17:44:53.726] }
[17:44:53.726] Lazy evaluation: FALSE
[17:44:53.726] Asynchronous evaluation: TRUE
[17:44:53.726] Local evaluation: TRUE
[17:44:53.726] Environment: R_GlobalEnv
[17:44:53.726] Capture standard output: TRUE
[17:44:53.726] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:53.726] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:53.726] Packages: <none>
[17:44:53.726] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:53.726] Resolved: TRUE
[17:44:53.726] Value: <not collected>
[17:44:53.726] Conditions captured: <none>
[17:44:53.726] Early signaling: FALSE
[17:44:53.726] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:53.726] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.736] Chunk #1 of 2 ... DONE
[17:44:53.736] Chunk #2 of 2 ...
[17:44:53.736]  - Finding globals in 'X' for chunk #2 ...
[17:44:53.737] getGlobalsAndPackages() ...
[17:44:53.737] Searching for globals...
[17:44:53.737] 
[17:44:53.737] Searching for globals ... DONE
[17:44:53.737] - globals: [0] <none>
[17:44:53.738] getGlobalsAndPackages() ... DONE
[17:44:53.738]    + additional globals found: [n=0] 
[17:44:53.738]    + additional namespaces needed: [n=0] 
[17:44:53.738]  - Finding globals in 'X' for chunk #2 ... DONE
[17:44:53.738]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:53.738]  - seeds: [3] <seeds>
[17:44:53.738]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.739] getGlobalsAndPackages() ...
[17:44:53.739] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.739] Resolving globals: FALSE
[17:44:53.739] Tweak future expression to call with '...' arguments ...
[17:44:53.739] {
[17:44:53.739]     do.call(function(...) {
[17:44:53.739]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.739]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.739]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.739]             on.exit(options(oopts), add = TRUE)
[17:44:53.739]         }
[17:44:53.739]         {
[17:44:53.739]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.739]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.739]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.739]                   envir = globalenv(), inherits = FALSE)
[17:44:53.739]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.739]             })
[17:44:53.739]         }
[17:44:53.739]     }, args = future.call.arguments)
[17:44:53.739] }
[17:44:53.740] Tweak future expression to call with '...' arguments ... DONE
[17:44:53.740] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.741] 
[17:44:53.741] getGlobalsAndPackages() ... DONE
[17:44:53.745] run() for ‘Future’ ...
[17:44:53.746] - state: ‘created’
[17:44:53.746] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:44:53.752] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.752] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:44:53.753]   - Field: ‘label’
[17:44:53.753]   - Field: ‘local’
[17:44:53.753]   - Field: ‘owner’
[17:44:53.753]   - Field: ‘envir’
[17:44:53.753]   - Field: ‘workers’
[17:44:53.753]   - Field: ‘packages’
[17:44:53.754]   - Field: ‘gc’
[17:44:53.754]   - Field: ‘job’
[17:44:53.754]   - Field: ‘conditions’
[17:44:53.754]   - Field: ‘expr’
[17:44:53.754]   - Field: ‘uuid’
[17:44:53.754]   - Field: ‘seed’
[17:44:53.754]   - Field: ‘version’
[17:44:53.755]   - Field: ‘result’
[17:44:53.755]   - Field: ‘asynchronous’
[17:44:53.755]   - Field: ‘calls’
[17:44:53.755]   - Field: ‘globals’
[17:44:53.755]   - Field: ‘stdout’
[17:44:53.755]   - Field: ‘earlySignal’
[17:44:53.756]   - Field: ‘lazy’
[17:44:53.756]   - Field: ‘state’
[17:44:53.756] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:44:53.756] - Launch lazy future ...
[17:44:53.756] Packages needed by the future expression (n = 0): <none>
[17:44:53.757] Packages needed by future strategies (n = 0): <none>
[17:44:53.757] {
[17:44:53.757]     {
[17:44:53.757]         {
[17:44:53.757]             ...future.startTime <- base::Sys.time()
[17:44:53.757]             {
[17:44:53.757]                 {
[17:44:53.757]                   {
[17:44:53.757]                     {
[17:44:53.757]                       base::local({
[17:44:53.757]                         has_future <- base::requireNamespace("future", 
[17:44:53.757]                           quietly = TRUE)
[17:44:53.757]                         if (has_future) {
[17:44:53.757]                           ns <- base::getNamespace("future")
[17:44:53.757]                           version <- ns[[".package"]][["version"]]
[17:44:53.757]                           if (is.null(version)) 
[17:44:53.757]                             version <- utils::packageVersion("future")
[17:44:53.757]                         }
[17:44:53.757]                         else {
[17:44:53.757]                           version <- NULL
[17:44:53.757]                         }
[17:44:53.757]                         if (!has_future || version < "1.8.0") {
[17:44:53.757]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:53.757]                             "", base::R.version$version.string), 
[17:44:53.757]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:53.757]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:53.757]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:53.757]                               "release", "version")], collapse = " "), 
[17:44:53.757]                             hostname = base::Sys.info()[["nodename"]])
[17:44:53.757]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:53.757]                             info)
[17:44:53.757]                           info <- base::paste(info, collapse = "; ")
[17:44:53.757]                           if (!has_future) {
[17:44:53.757]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:53.757]                               info)
[17:44:53.757]                           }
[17:44:53.757]                           else {
[17:44:53.757]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:53.757]                               info, version)
[17:44:53.757]                           }
[17:44:53.757]                           base::stop(msg)
[17:44:53.757]                         }
[17:44:53.757]                       })
[17:44:53.757]                     }
[17:44:53.757]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:53.757]                     base::options(mc.cores = 1L)
[17:44:53.757]                   }
[17:44:53.757]                   ...future.strategy.old <- future::plan("list")
[17:44:53.757]                   options(future.plan = NULL)
[17:44:53.757]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.757]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:53.757]                 }
[17:44:53.757]                 ...future.workdir <- getwd()
[17:44:53.757]             }
[17:44:53.757]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:53.757]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:53.757]         }
[17:44:53.757]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:53.757]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:53.757]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:53.757]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:53.757]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:53.757]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:53.757]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:53.757]             base::names(...future.oldOptions))
[17:44:53.757]     }
[17:44:53.757]     if (FALSE) {
[17:44:53.757]     }
[17:44:53.757]     else {
[17:44:53.757]         if (TRUE) {
[17:44:53.757]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:53.757]                 open = "w")
[17:44:53.757]         }
[17:44:53.757]         else {
[17:44:53.757]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:53.757]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:53.757]         }
[17:44:53.757]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:53.757]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:53.757]             base::sink(type = "output", split = FALSE)
[17:44:53.757]             base::close(...future.stdout)
[17:44:53.757]         }, add = TRUE)
[17:44:53.757]     }
[17:44:53.757]     ...future.frame <- base::sys.nframe()
[17:44:53.757]     ...future.conditions <- base::list()
[17:44:53.757]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:53.757]     if (FALSE) {
[17:44:53.757]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:53.757]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:53.757]     }
[17:44:53.757]     ...future.result <- base::tryCatch({
[17:44:53.757]         base::withCallingHandlers({
[17:44:53.757]             ...future.value <- base::withVisible(base::local({
[17:44:53.757]                 withCallingHandlers({
[17:44:53.757]                   {
[17:44:53.757]                     do.call(function(...) {
[17:44:53.757]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.757]                       if (!identical(...future.globals.maxSize.org, 
[17:44:53.757]                         ...future.globals.maxSize)) {
[17:44:53.757]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.757]                         on.exit(options(oopts), add = TRUE)
[17:44:53.757]                       }
[17:44:53.757]                       {
[17:44:53.757]                         lapply(seq_along(...future.elements_ii), 
[17:44:53.757]                           FUN = function(jj) {
[17:44:53.757]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.757]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.757]                               envir = globalenv(), inherits = FALSE)
[17:44:53.757]                             ...future.FUN(...future.X_jj, ...)
[17:44:53.757]                           })
[17:44:53.757]                       }
[17:44:53.757]                     }, args = future.call.arguments)
[17:44:53.757]                   }
[17:44:53.757]                 }, immediateCondition = function(cond) {
[17:44:53.757]                   save_rds <- function (object, pathname, ...) 
[17:44:53.757]                   {
[17:44:53.757]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:44:53.757]                     if (file_test("-f", pathname_tmp)) {
[17:44:53.757]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.757]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:44:53.757]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.757]                         fi_tmp[["mtime"]])
[17:44:53.757]                     }
[17:44:53.757]                     tryCatch({
[17:44:53.757]                       saveRDS(object, file = pathname_tmp, ...)
[17:44:53.757]                     }, error = function(ex) {
[17:44:53.757]                       msg <- conditionMessage(ex)
[17:44:53.757]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.757]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:44:53.757]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.757]                         fi_tmp[["mtime"]], msg)
[17:44:53.757]                       ex$message <- msg
[17:44:53.757]                       stop(ex)
[17:44:53.757]                     })
[17:44:53.757]                     stopifnot(file_test("-f", pathname_tmp))
[17:44:53.757]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:44:53.757]                     if (!res || file_test("-f", pathname_tmp)) {
[17:44:53.757]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.757]                       fi <- file.info(pathname)
[17:44:53.757]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:44:53.757]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.757]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:44:53.757]                         fi[["size"]], fi[["mtime"]])
[17:44:53.757]                       stop(msg)
[17:44:53.757]                     }
[17:44:53.757]                     invisible(pathname)
[17:44:53.757]                   }
[17:44:53.757]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:44:53.757]                     rootPath = tempdir()) 
[17:44:53.757]                   {
[17:44:53.757]                     obj <- list(time = Sys.time(), condition = cond)
[17:44:53.757]                     file <- tempfile(pattern = class(cond)[1], 
[17:44:53.757]                       tmpdir = path, fileext = ".rds")
[17:44:53.757]                     save_rds(obj, file)
[17:44:53.757]                   }
[17:44:53.757]                   saveImmediateCondition(cond, path = "/tmp/RtmpYaox9w/.future/immediateConditions")
[17:44:53.757]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.757]                   {
[17:44:53.757]                     inherits <- base::inherits
[17:44:53.757]                     invokeRestart <- base::invokeRestart
[17:44:53.757]                     is.null <- base::is.null
[17:44:53.757]                     muffled <- FALSE
[17:44:53.757]                     if (inherits(cond, "message")) {
[17:44:53.757]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:53.757]                       if (muffled) 
[17:44:53.757]                         invokeRestart("muffleMessage")
[17:44:53.757]                     }
[17:44:53.757]                     else if (inherits(cond, "warning")) {
[17:44:53.757]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:53.757]                       if (muffled) 
[17:44:53.757]                         invokeRestart("muffleWarning")
[17:44:53.757]                     }
[17:44:53.757]                     else if (inherits(cond, "condition")) {
[17:44:53.757]                       if (!is.null(pattern)) {
[17:44:53.757]                         computeRestarts <- base::computeRestarts
[17:44:53.757]                         grepl <- base::grepl
[17:44:53.757]                         restarts <- computeRestarts(cond)
[17:44:53.757]                         for (restart in restarts) {
[17:44:53.757]                           name <- restart$name
[17:44:53.757]                           if (is.null(name)) 
[17:44:53.757]                             next
[17:44:53.757]                           if (!grepl(pattern, name)) 
[17:44:53.757]                             next
[17:44:53.757]                           invokeRestart(restart)
[17:44:53.757]                           muffled <- TRUE
[17:44:53.757]                           break
[17:44:53.757]                         }
[17:44:53.757]                       }
[17:44:53.757]                     }
[17:44:53.757]                     invisible(muffled)
[17:44:53.757]                   }
[17:44:53.757]                   muffleCondition(cond)
[17:44:53.757]                 })
[17:44:53.757]             }))
[17:44:53.757]             future::FutureResult(value = ...future.value$value, 
[17:44:53.757]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.757]                   ...future.rng), globalenv = if (FALSE) 
[17:44:53.757]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:53.757]                     ...future.globalenv.names))
[17:44:53.757]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:53.757]         }, condition = base::local({
[17:44:53.757]             c <- base::c
[17:44:53.757]             inherits <- base::inherits
[17:44:53.757]             invokeRestart <- base::invokeRestart
[17:44:53.757]             length <- base::length
[17:44:53.757]             list <- base::list
[17:44:53.757]             seq.int <- base::seq.int
[17:44:53.757]             signalCondition <- base::signalCondition
[17:44:53.757]             sys.calls <- base::sys.calls
[17:44:53.757]             `[[` <- base::`[[`
[17:44:53.757]             `+` <- base::`+`
[17:44:53.757]             `<<-` <- base::`<<-`
[17:44:53.757]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:53.757]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:53.757]                   3L)]
[17:44:53.757]             }
[17:44:53.757]             function(cond) {
[17:44:53.757]                 is_error <- inherits(cond, "error")
[17:44:53.757]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:53.757]                   NULL)
[17:44:53.757]                 if (is_error) {
[17:44:53.757]                   sessionInformation <- function() {
[17:44:53.757]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:53.757]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:53.757]                       search = base::search(), system = base::Sys.info())
[17:44:53.757]                   }
[17:44:53.757]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.757]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:53.757]                     cond$call), session = sessionInformation(), 
[17:44:53.757]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:53.757]                   signalCondition(cond)
[17:44:53.757]                 }
[17:44:53.757]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:53.757]                 "immediateCondition"))) {
[17:44:53.757]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:53.757]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.757]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:53.757]                   if (TRUE && !signal) {
[17:44:53.757]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.757]                     {
[17:44:53.757]                       inherits <- base::inherits
[17:44:53.757]                       invokeRestart <- base::invokeRestart
[17:44:53.757]                       is.null <- base::is.null
[17:44:53.757]                       muffled <- FALSE
[17:44:53.757]                       if (inherits(cond, "message")) {
[17:44:53.757]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.757]                         if (muffled) 
[17:44:53.757]                           invokeRestart("muffleMessage")
[17:44:53.757]                       }
[17:44:53.757]                       else if (inherits(cond, "warning")) {
[17:44:53.757]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.757]                         if (muffled) 
[17:44:53.757]                           invokeRestart("muffleWarning")
[17:44:53.757]                       }
[17:44:53.757]                       else if (inherits(cond, "condition")) {
[17:44:53.757]                         if (!is.null(pattern)) {
[17:44:53.757]                           computeRestarts <- base::computeRestarts
[17:44:53.757]                           grepl <- base::grepl
[17:44:53.757]                           restarts <- computeRestarts(cond)
[17:44:53.757]                           for (restart in restarts) {
[17:44:53.757]                             name <- restart$name
[17:44:53.757]                             if (is.null(name)) 
[17:44:53.757]                               next
[17:44:53.757]                             if (!grepl(pattern, name)) 
[17:44:53.757]                               next
[17:44:53.757]                             invokeRestart(restart)
[17:44:53.757]                             muffled <- TRUE
[17:44:53.757]                             break
[17:44:53.757]                           }
[17:44:53.757]                         }
[17:44:53.757]                       }
[17:44:53.757]                       invisible(muffled)
[17:44:53.757]                     }
[17:44:53.757]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.757]                   }
[17:44:53.757]                 }
[17:44:53.757]                 else {
[17:44:53.757]                   if (TRUE) {
[17:44:53.757]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.757]                     {
[17:44:53.757]                       inherits <- base::inherits
[17:44:53.757]                       invokeRestart <- base::invokeRestart
[17:44:53.757]                       is.null <- base::is.null
[17:44:53.757]                       muffled <- FALSE
[17:44:53.757]                       if (inherits(cond, "message")) {
[17:44:53.757]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.757]                         if (muffled) 
[17:44:53.757]                           invokeRestart("muffleMessage")
[17:44:53.757]                       }
[17:44:53.757]                       else if (inherits(cond, "warning")) {
[17:44:53.757]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.757]                         if (muffled) 
[17:44:53.757]                           invokeRestart("muffleWarning")
[17:44:53.757]                       }
[17:44:53.757]                       else if (inherits(cond, "condition")) {
[17:44:53.757]                         if (!is.null(pattern)) {
[17:44:53.757]                           computeRestarts <- base::computeRestarts
[17:44:53.757]                           grepl <- base::grepl
[17:44:53.757]                           restarts <- computeRestarts(cond)
[17:44:53.757]                           for (restart in restarts) {
[17:44:53.757]                             name <- restart$name
[17:44:53.757]                             if (is.null(name)) 
[17:44:53.757]                               next
[17:44:53.757]                             if (!grepl(pattern, name)) 
[17:44:53.757]                               next
[17:44:53.757]                             invokeRestart(restart)
[17:44:53.757]                             muffled <- TRUE
[17:44:53.757]                             break
[17:44:53.757]                           }
[17:44:53.757]                         }
[17:44:53.757]                       }
[17:44:53.757]                       invisible(muffled)
[17:44:53.757]                     }
[17:44:53.757]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.757]                   }
[17:44:53.757]                 }
[17:44:53.757]             }
[17:44:53.757]         }))
[17:44:53.757]     }, error = function(ex) {
[17:44:53.757]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:53.757]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.757]                 ...future.rng), started = ...future.startTime, 
[17:44:53.757]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:53.757]             version = "1.8"), class = "FutureResult")
[17:44:53.757]     }, finally = {
[17:44:53.757]         if (!identical(...future.workdir, getwd())) 
[17:44:53.757]             setwd(...future.workdir)
[17:44:53.757]         {
[17:44:53.757]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:53.757]                 ...future.oldOptions$nwarnings <- NULL
[17:44:53.757]             }
[17:44:53.757]             base::options(...future.oldOptions)
[17:44:53.757]             if (.Platform$OS.type == "windows") {
[17:44:53.757]                 old_names <- names(...future.oldEnvVars)
[17:44:53.757]                 envs <- base::Sys.getenv()
[17:44:53.757]                 names <- names(envs)
[17:44:53.757]                 common <- intersect(names, old_names)
[17:44:53.757]                 added <- setdiff(names, old_names)
[17:44:53.757]                 removed <- setdiff(old_names, names)
[17:44:53.757]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:53.757]                   envs[common]]
[17:44:53.757]                 NAMES <- toupper(changed)
[17:44:53.757]                 args <- list()
[17:44:53.757]                 for (kk in seq_along(NAMES)) {
[17:44:53.757]                   name <- changed[[kk]]
[17:44:53.757]                   NAME <- NAMES[[kk]]
[17:44:53.757]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.757]                     next
[17:44:53.757]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.757]                 }
[17:44:53.757]                 NAMES <- toupper(added)
[17:44:53.757]                 for (kk in seq_along(NAMES)) {
[17:44:53.757]                   name <- added[[kk]]
[17:44:53.757]                   NAME <- NAMES[[kk]]
[17:44:53.757]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.757]                     next
[17:44:53.757]                   args[[name]] <- ""
[17:44:53.757]                 }
[17:44:53.757]                 NAMES <- toupper(removed)
[17:44:53.757]                 for (kk in seq_along(NAMES)) {
[17:44:53.757]                   name <- removed[[kk]]
[17:44:53.757]                   NAME <- NAMES[[kk]]
[17:44:53.757]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.757]                     next
[17:44:53.757]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.757]                 }
[17:44:53.757]                 if (length(args) > 0) 
[17:44:53.757]                   base::do.call(base::Sys.setenv, args = args)
[17:44:53.757]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:53.757]             }
[17:44:53.757]             else {
[17:44:53.757]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:53.757]             }
[17:44:53.757]             {
[17:44:53.757]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:53.757]                   0L) {
[17:44:53.757]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:53.757]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:53.757]                   base::options(opts)
[17:44:53.757]                 }
[17:44:53.757]                 {
[17:44:53.757]                   {
[17:44:53.757]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:53.757]                     NULL
[17:44:53.757]                   }
[17:44:53.757]                   options(future.plan = NULL)
[17:44:53.757]                   if (is.na(NA_character_)) 
[17:44:53.757]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.757]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:53.757]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:53.757]                     .init = FALSE)
[17:44:53.757]                 }
[17:44:53.757]             }
[17:44:53.757]         }
[17:44:53.757]     })
[17:44:53.757]     if (TRUE) {
[17:44:53.757]         base::sink(type = "output", split = FALSE)
[17:44:53.757]         if (TRUE) {
[17:44:53.757]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:53.757]         }
[17:44:53.757]         else {
[17:44:53.757]             ...future.result["stdout"] <- base::list(NULL)
[17:44:53.757]         }
[17:44:53.757]         base::close(...future.stdout)
[17:44:53.757]         ...future.stdout <- NULL
[17:44:53.757]     }
[17:44:53.757]     ...future.result$conditions <- ...future.conditions
[17:44:53.757]     ...future.result$finished <- base::Sys.time()
[17:44:53.757]     ...future.result
[17:44:53.757] }
[17:44:53.760] assign_globals() ...
[17:44:53.760] List of 5
[17:44:53.760]  $ ...future.FUN            :function (...)  
[17:44:53.760]  $ future.call.arguments    : list()
[17:44:53.760]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.760]  $ ...future.elements_ii    :List of 3
[17:44:53.760]   ..$ : int 0
[17:44:53.760]   ..$ : int 0
[17:44:53.760]   ..$ : int 0
[17:44:53.760]  $ ...future.seeds_ii       :List of 3
[17:44:53.760]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[17:44:53.760]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[17:44:53.760]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[17:44:53.760]  $ ...future.globals.maxSize: NULL
[17:44:53.760]  - attr(*, "where")=List of 5
[17:44:53.760]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:44:53.760]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:44:53.760]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:44:53.760]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:44:53.760]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:44:53.760]  - attr(*, "resolved")= logi FALSE
[17:44:53.760]  - attr(*, "total_size")= num 616
[17:44:53.760]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.760]  - attr(*, "already-done")= logi TRUE
[17:44:53.769] - reassign environment for ‘...future.FUN’
[17:44:53.769] - copied ‘...future.FUN’ to environment
[17:44:53.769] - copied ‘future.call.arguments’ to environment
[17:44:53.769] - copied ‘...future.elements_ii’ to environment
[17:44:53.769] - copied ‘...future.seeds_ii’ to environment
[17:44:53.769] - copied ‘...future.globals.maxSize’ to environment
[17:44:53.770] assign_globals() ... done
[17:44:53.770] requestCore(): workers = 2
[17:44:53.772] MulticoreFuture started
[17:44:53.772] - Launch lazy future ... done
[17:44:53.773] run() for ‘MulticoreFuture’ ... done
[17:44:53.773] Created future:
[17:44:53.773] plan(): Setting new future strategy stack:
[17:44:53.773] List of future strategies:
[17:44:53.773] 1. sequential:
[17:44:53.773]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.773]    - tweaked: FALSE
[17:44:53.773]    - call: NULL
[17:44:53.774] plan(): nbrOfWorkers() = 1
[17:44:53.777] plan(): Setting new future strategy stack:
[17:44:53.777] List of future strategies:
[17:44:53.777] 1. multicore:
[17:44:53.777]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:53.777]    - tweaked: FALSE
[17:44:53.777]    - call: plan(strategy)
[17:44:53.782] plan(): nbrOfWorkers() = 2
[17:44:53.773] MulticoreFuture:
[17:44:53.773] Label: ‘future_replicate-2’
[17:44:53.773] Expression:
[17:44:53.773] {
[17:44:53.773]     do.call(function(...) {
[17:44:53.773]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.773]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.773]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.773]             on.exit(options(oopts), add = TRUE)
[17:44:53.773]         }
[17:44:53.773]         {
[17:44:53.773]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.773]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.773]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.773]                   envir = globalenv(), inherits = FALSE)
[17:44:53.773]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.773]             })
[17:44:53.773]         }
[17:44:53.773]     }, args = future.call.arguments)
[17:44:53.773] }
[17:44:53.773] Lazy evaluation: FALSE
[17:44:53.773] Asynchronous evaluation: TRUE
[17:44:53.773] Local evaluation: TRUE
[17:44:53.773] Environment: R_GlobalEnv
[17:44:53.773] Capture standard output: TRUE
[17:44:53.773] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:53.773] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:53.773] Packages: <none>
[17:44:53.773] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:53.773] Resolved: TRUE
[17:44:53.773] Value: <not collected>
[17:44:53.773] Conditions captured: <none>
[17:44:53.773] Early signaling: FALSE
[17:44:53.773] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:53.773] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.784] Chunk #2 of 2 ... DONE
[17:44:53.784] Launching 2 futures (chunks) ... DONE
[17:44:53.784] Resolving 2 futures (chunks) ...
[17:44:53.784] resolve() on list ...
[17:44:53.784]  recursive: 0
[17:44:53.784]  length: 2
[17:44:53.784] 
[17:44:53.785] Future #1
[17:44:53.785] result() for MulticoreFuture ...
[17:44:53.786] result() for MulticoreFuture ...
[17:44:53.786] result() for MulticoreFuture ... done
[17:44:53.786] result() for MulticoreFuture ... done
[17:44:53.786] result() for MulticoreFuture ...
[17:44:53.787] result() for MulticoreFuture ... done
[17:44:53.787] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:44:53.787] - nx: 2
[17:44:53.787] - relay: TRUE
[17:44:53.787] - stdout: TRUE
[17:44:53.787] - signal: TRUE
[17:44:53.787] - resignal: FALSE
[17:44:53.788] - force: TRUE
[17:44:53.788] - relayed: [n=2] FALSE, FALSE
[17:44:53.788] - queued futures: [n=2] FALSE, FALSE
[17:44:53.788]  - until=1
[17:44:53.788]  - relaying element #1
[17:44:53.788] result() for MulticoreFuture ...
[17:44:53.788] result() for MulticoreFuture ... done
[17:44:53.789] result() for MulticoreFuture ...
[17:44:53.789] result() for MulticoreFuture ... done
[17:44:53.789] result() for MulticoreFuture ...
[17:44:53.789] result() for MulticoreFuture ... done
[17:44:53.789] result() for MulticoreFuture ...
[17:44:53.789] result() for MulticoreFuture ... done
[17:44:53.790] - relayed: [n=2] TRUE, FALSE
[17:44:53.790] - queued futures: [n=2] TRUE, FALSE
[17:44:53.790] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:44:53.790]  length: 1 (resolved future 1)
[17:44:53.790] Future #2
[17:44:53.790] result() for MulticoreFuture ...
[17:44:53.791] result() for MulticoreFuture ...
[17:44:53.791] result() for MulticoreFuture ... done
[17:44:53.791] result() for MulticoreFuture ... done
[17:44:53.792] result() for MulticoreFuture ...
[17:44:53.792] result() for MulticoreFuture ... done
[17:44:53.792] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:44:53.792] - nx: 2
[17:44:53.792] - relay: TRUE
[17:44:53.792] - stdout: TRUE
[17:44:53.792] - signal: TRUE
[17:44:53.793] - resignal: FALSE
[17:44:53.793] - force: TRUE
[17:44:53.793] - relayed: [n=2] TRUE, FALSE
[17:44:53.793] - queued futures: [n=2] TRUE, FALSE
[17:44:53.793]  - until=2
[17:44:53.793]  - relaying element #2
[17:44:53.793] result() for MulticoreFuture ...
[17:44:53.793] result() for MulticoreFuture ... done
[17:44:53.794] result() for MulticoreFuture ...
[17:44:53.794] result() for MulticoreFuture ... done
[17:44:53.794] result() for MulticoreFuture ...
[17:44:53.794] result() for MulticoreFuture ... done
[17:44:53.794] result() for MulticoreFuture ...
[17:44:53.794] result() for MulticoreFuture ... done
[17:44:53.794] - relayed: [n=2] TRUE, TRUE
[17:44:53.794] - queued futures: [n=2] TRUE, TRUE
[17:44:53.794] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:44:53.795]  length: 0 (resolved future 2)
[17:44:53.795] Relaying remaining futures
[17:44:53.795] signalConditionsASAP(NULL, pos=0) ...
[17:44:53.795] - nx: 2
[17:44:53.795] - relay: TRUE
[17:44:53.795] - stdout: TRUE
[17:44:53.795] - signal: TRUE
[17:44:53.795] - resignal: FALSE
[17:44:53.795] - force: TRUE
[17:44:53.796] - relayed: [n=2] TRUE, TRUE
[17:44:53.796] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:44:53.796] - relayed: [n=2] TRUE, TRUE
[17:44:53.796] - queued futures: [n=2] TRUE, TRUE
[17:44:53.796] signalConditionsASAP(NULL, pos=0) ... done
[17:44:53.796] resolve() on list ... DONE
[17:44:53.796] result() for MulticoreFuture ...
[17:44:53.796] result() for MulticoreFuture ... done
[17:44:53.796] result() for MulticoreFuture ...
[17:44:53.797] result() for MulticoreFuture ... done
[17:44:53.797] result() for MulticoreFuture ...
[17:44:53.797] result() for MulticoreFuture ... done
[17:44:53.799] result() for MulticoreFuture ...
[17:44:53.799] result() for MulticoreFuture ... done
[17:44:53.800]  - Number of value chunks collected: 2
[17:44:53.800] Resolving 2 futures (chunks) ... DONE
[17:44:53.800] Reducing values from 2 chunks ...
[17:44:53.800]  - Number of values collected after concatenation: 5
[17:44:53.800]  - Number of values expected: 5
[17:44:53.800] Reducing values from 2 chunks ... DONE
[17:44:53.801] future_lapply() ... DONE
- example(replicate) ...
[17:44:53.801] future_lapply() ...
[17:44:53.802] Generating random seeds ...
[17:44:53.802] Generating random seed streams for 5 elements ...
[17:44:53.802] Generating random seed streams for 5 elements ... DONE
[17:44:53.802] Generating random seeds ... DONE
[17:44:53.803] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:44:53.807] Number of chunks: 2
[17:44:53.807] getGlobalsAndPackagesXApply() ...
[17:44:53.807]  - future.globals: TRUE
[17:44:53.807] getGlobalsAndPackages() ...
[17:44:53.807] Searching for globals...
[17:44:53.810] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[17:44:53.810] Searching for globals ... DONE
[17:44:53.810] Resolving globals: FALSE
[17:44:53.810] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[17:44:53.811] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[17:44:53.811] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[17:44:53.811] 
[17:44:53.811] getGlobalsAndPackages() ... DONE
[17:44:53.811]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[17:44:53.811]  - needed namespaces: [n=0] 
[17:44:53.811] Finding globals ... DONE
[17:44:53.812]  - use_args: TRUE
[17:44:53.812]  - Getting '...' globals ...
[17:44:53.812] resolve() on list ...
[17:44:53.812]  recursive: 0
[17:44:53.812]  length: 1
[17:44:53.812]  elements: ‘...’
[17:44:53.813]  length: 0 (resolved future 1)
[17:44:53.813] resolve() on list ... DONE
[17:44:53.813]    - '...' content: [n=0] 
[17:44:53.813] List of 1
[17:44:53.813]  $ ...: list()
[17:44:53.813]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.813]  - attr(*, "where")=List of 1
[17:44:53.813]   ..$ ...:<environment: 0x558388606cb0> 
[17:44:53.813]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.813]  - attr(*, "resolved")= logi TRUE
[17:44:53.813]  - attr(*, "total_size")= num NA
[17:44:53.816]  - Getting '...' globals ... DONE
[17:44:53.816] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[17:44:53.816] List of 4
[17:44:53.816]  $ ...future.FUN:function (...)  
[17:44:53.816]  $ foo          :function (x = 1, y = 2)  
[17:44:53.816]  $ x            : num 3
[17:44:53.816]  $ ...          : list()
[17:44:53.816]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.816]  - attr(*, "where")=List of 4
[17:44:53.816]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:44:53.816]   ..$ foo          :<environment: R_EmptyEnv> 
[17:44:53.816]   ..$ x            :<environment: R_EmptyEnv> 
[17:44:53.816]   ..$ ...          :<environment: 0x558388606cb0> 
[17:44:53.816]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.816]  - attr(*, "resolved")= logi FALSE
[17:44:53.816]  - attr(*, "total_size")= num 2200
[17:44:53.820] Packages to be attached in all futures: [n=0] 
[17:44:53.820] getGlobalsAndPackagesXApply() ... DONE
[17:44:53.820] Number of futures (= number of chunks): 2
[17:44:53.820] Launching 2 futures (chunks) ...
[17:44:53.820] Chunk #1 of 2 ...
[17:44:53.821]  - Finding globals in 'X' for chunk #1 ...
[17:44:53.821] getGlobalsAndPackages() ...
[17:44:53.821] Searching for globals...
[17:44:53.821] 
[17:44:53.821] Searching for globals ... DONE
[17:44:53.821] - globals: [0] <none>
[17:44:53.821] getGlobalsAndPackages() ... DONE
[17:44:53.821]    + additional globals found: [n=0] 
[17:44:53.821]    + additional namespaces needed: [n=0] 
[17:44:53.821]  - Finding globals in 'X' for chunk #1 ... DONE
[17:44:53.822]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:53.822]  - seeds: [2] <seeds>
[17:44:53.822]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.822] getGlobalsAndPackages() ...
[17:44:53.822] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.822] Resolving globals: FALSE
[17:44:53.822] Tweak future expression to call with '...' arguments ...
[17:44:53.822] {
[17:44:53.822]     do.call(function(...) {
[17:44:53.822]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.822]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.822]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.822]             on.exit(options(oopts), add = TRUE)
[17:44:53.822]         }
[17:44:53.822]         {
[17:44:53.822]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.822]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.822]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.822]                   envir = globalenv(), inherits = FALSE)
[17:44:53.822]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.822]             })
[17:44:53.822]         }
[17:44:53.822]     }, args = future.call.arguments)
[17:44:53.822] }
[17:44:53.823] Tweak future expression to call with '...' arguments ... DONE
[17:44:53.823] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.823] 
[17:44:53.823] getGlobalsAndPackages() ... DONE
[17:44:53.823] run() for ‘Future’ ...
[17:44:53.824] - state: ‘created’
[17:44:53.824] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:44:53.827] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.827] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:44:53.827]   - Field: ‘label’
[17:44:53.828]   - Field: ‘local’
[17:44:53.828]   - Field: ‘owner’
[17:44:53.828]   - Field: ‘envir’
[17:44:53.828]   - Field: ‘workers’
[17:44:53.828]   - Field: ‘packages’
[17:44:53.828]   - Field: ‘gc’
[17:44:53.828]   - Field: ‘job’
[17:44:53.828]   - Field: ‘conditions’
[17:44:53.828]   - Field: ‘expr’
[17:44:53.828]   - Field: ‘uuid’
[17:44:53.829]   - Field: ‘seed’
[17:44:53.829]   - Field: ‘version’
[17:44:53.829]   - Field: ‘result’
[17:44:53.829]   - Field: ‘asynchronous’
[17:44:53.829]   - Field: ‘calls’
[17:44:53.829]   - Field: ‘globals’
[17:44:53.829]   - Field: ‘stdout’
[17:44:53.829]   - Field: ‘earlySignal’
[17:44:53.829]   - Field: ‘lazy’
[17:44:53.829]   - Field: ‘state’
[17:44:53.829] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:44:53.830] - Launch lazy future ...
[17:44:53.830] Packages needed by the future expression (n = 0): <none>
[17:44:53.830] Packages needed by future strategies (n = 0): <none>
[17:44:53.832] {
[17:44:53.832]     {
[17:44:53.832]         {
[17:44:53.832]             ...future.startTime <- base::Sys.time()
[17:44:53.832]             {
[17:44:53.832]                 {
[17:44:53.832]                   {
[17:44:53.832]                     {
[17:44:53.832]                       base::local({
[17:44:53.832]                         has_future <- base::requireNamespace("future", 
[17:44:53.832]                           quietly = TRUE)
[17:44:53.832]                         if (has_future) {
[17:44:53.832]                           ns <- base::getNamespace("future")
[17:44:53.832]                           version <- ns[[".package"]][["version"]]
[17:44:53.832]                           if (is.null(version)) 
[17:44:53.832]                             version <- utils::packageVersion("future")
[17:44:53.832]                         }
[17:44:53.832]                         else {
[17:44:53.832]                           version <- NULL
[17:44:53.832]                         }
[17:44:53.832]                         if (!has_future || version < "1.8.0") {
[17:44:53.832]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:53.832]                             "", base::R.version$version.string), 
[17:44:53.832]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:53.832]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:53.832]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:53.832]                               "release", "version")], collapse = " "), 
[17:44:53.832]                             hostname = base::Sys.info()[["nodename"]])
[17:44:53.832]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:53.832]                             info)
[17:44:53.832]                           info <- base::paste(info, collapse = "; ")
[17:44:53.832]                           if (!has_future) {
[17:44:53.832]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:53.832]                               info)
[17:44:53.832]                           }
[17:44:53.832]                           else {
[17:44:53.832]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:53.832]                               info, version)
[17:44:53.832]                           }
[17:44:53.832]                           base::stop(msg)
[17:44:53.832]                         }
[17:44:53.832]                       })
[17:44:53.832]                     }
[17:44:53.832]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:53.832]                     base::options(mc.cores = 1L)
[17:44:53.832]                   }
[17:44:53.832]                   ...future.strategy.old <- future::plan("list")
[17:44:53.832]                   options(future.plan = NULL)
[17:44:53.832]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.832]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:53.832]                 }
[17:44:53.832]                 ...future.workdir <- getwd()
[17:44:53.832]             }
[17:44:53.832]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:53.832]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:53.832]         }
[17:44:53.832]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:53.832]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:53.832]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:53.832]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:53.832]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:53.832]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:53.832]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:53.832]             base::names(...future.oldOptions))
[17:44:53.832]     }
[17:44:53.832]     if (FALSE) {
[17:44:53.832]     }
[17:44:53.832]     else {
[17:44:53.832]         if (TRUE) {
[17:44:53.832]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:53.832]                 open = "w")
[17:44:53.832]         }
[17:44:53.832]         else {
[17:44:53.832]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:53.832]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:53.832]         }
[17:44:53.832]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:53.832]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:53.832]             base::sink(type = "output", split = FALSE)
[17:44:53.832]             base::close(...future.stdout)
[17:44:53.832]         }, add = TRUE)
[17:44:53.832]     }
[17:44:53.832]     ...future.frame <- base::sys.nframe()
[17:44:53.832]     ...future.conditions <- base::list()
[17:44:53.832]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:53.832]     if (FALSE) {
[17:44:53.832]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:53.832]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:53.832]     }
[17:44:53.832]     ...future.result <- base::tryCatch({
[17:44:53.832]         base::withCallingHandlers({
[17:44:53.832]             ...future.value <- base::withVisible(base::local({
[17:44:53.832]                 withCallingHandlers({
[17:44:53.832]                   {
[17:44:53.832]                     do.call(function(...) {
[17:44:53.832]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.832]                       if (!identical(...future.globals.maxSize.org, 
[17:44:53.832]                         ...future.globals.maxSize)) {
[17:44:53.832]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.832]                         on.exit(options(oopts), add = TRUE)
[17:44:53.832]                       }
[17:44:53.832]                       {
[17:44:53.832]                         lapply(seq_along(...future.elements_ii), 
[17:44:53.832]                           FUN = function(jj) {
[17:44:53.832]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.832]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.832]                               envir = globalenv(), inherits = FALSE)
[17:44:53.832]                             ...future.FUN(...future.X_jj, ...)
[17:44:53.832]                           })
[17:44:53.832]                       }
[17:44:53.832]                     }, args = future.call.arguments)
[17:44:53.832]                   }
[17:44:53.832]                 }, immediateCondition = function(cond) {
[17:44:53.832]                   save_rds <- function (object, pathname, ...) 
[17:44:53.832]                   {
[17:44:53.832]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:44:53.832]                     if (file_test("-f", pathname_tmp)) {
[17:44:53.832]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.832]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:44:53.832]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.832]                         fi_tmp[["mtime"]])
[17:44:53.832]                     }
[17:44:53.832]                     tryCatch({
[17:44:53.832]                       saveRDS(object, file = pathname_tmp, ...)
[17:44:53.832]                     }, error = function(ex) {
[17:44:53.832]                       msg <- conditionMessage(ex)
[17:44:53.832]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.832]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:44:53.832]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.832]                         fi_tmp[["mtime"]], msg)
[17:44:53.832]                       ex$message <- msg
[17:44:53.832]                       stop(ex)
[17:44:53.832]                     })
[17:44:53.832]                     stopifnot(file_test("-f", pathname_tmp))
[17:44:53.832]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:44:53.832]                     if (!res || file_test("-f", pathname_tmp)) {
[17:44:53.832]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.832]                       fi <- file.info(pathname)
[17:44:53.832]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:44:53.832]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.832]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:44:53.832]                         fi[["size"]], fi[["mtime"]])
[17:44:53.832]                       stop(msg)
[17:44:53.832]                     }
[17:44:53.832]                     invisible(pathname)
[17:44:53.832]                   }
[17:44:53.832]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:44:53.832]                     rootPath = tempdir()) 
[17:44:53.832]                   {
[17:44:53.832]                     obj <- list(time = Sys.time(), condition = cond)
[17:44:53.832]                     file <- tempfile(pattern = class(cond)[1], 
[17:44:53.832]                       tmpdir = path, fileext = ".rds")
[17:44:53.832]                     save_rds(obj, file)
[17:44:53.832]                   }
[17:44:53.832]                   saveImmediateCondition(cond, path = "/tmp/RtmpYaox9w/.future/immediateConditions")
[17:44:53.832]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.832]                   {
[17:44:53.832]                     inherits <- base::inherits
[17:44:53.832]                     invokeRestart <- base::invokeRestart
[17:44:53.832]                     is.null <- base::is.null
[17:44:53.832]                     muffled <- FALSE
[17:44:53.832]                     if (inherits(cond, "message")) {
[17:44:53.832]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:53.832]                       if (muffled) 
[17:44:53.832]                         invokeRestart("muffleMessage")
[17:44:53.832]                     }
[17:44:53.832]                     else if (inherits(cond, "warning")) {
[17:44:53.832]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:53.832]                       if (muffled) 
[17:44:53.832]                         invokeRestart("muffleWarning")
[17:44:53.832]                     }
[17:44:53.832]                     else if (inherits(cond, "condition")) {
[17:44:53.832]                       if (!is.null(pattern)) {
[17:44:53.832]                         computeRestarts <- base::computeRestarts
[17:44:53.832]                         grepl <- base::grepl
[17:44:53.832]                         restarts <- computeRestarts(cond)
[17:44:53.832]                         for (restart in restarts) {
[17:44:53.832]                           name <- restart$name
[17:44:53.832]                           if (is.null(name)) 
[17:44:53.832]                             next
[17:44:53.832]                           if (!grepl(pattern, name)) 
[17:44:53.832]                             next
[17:44:53.832]                           invokeRestart(restart)
[17:44:53.832]                           muffled <- TRUE
[17:44:53.832]                           break
[17:44:53.832]                         }
[17:44:53.832]                       }
[17:44:53.832]                     }
[17:44:53.832]                     invisible(muffled)
[17:44:53.832]                   }
[17:44:53.832]                   muffleCondition(cond)
[17:44:53.832]                 })
[17:44:53.832]             }))
[17:44:53.832]             future::FutureResult(value = ...future.value$value, 
[17:44:53.832]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.832]                   ...future.rng), globalenv = if (FALSE) 
[17:44:53.832]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:53.832]                     ...future.globalenv.names))
[17:44:53.832]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:53.832]         }, condition = base::local({
[17:44:53.832]             c <- base::c
[17:44:53.832]             inherits <- base::inherits
[17:44:53.832]             invokeRestart <- base::invokeRestart
[17:44:53.832]             length <- base::length
[17:44:53.832]             list <- base::list
[17:44:53.832]             seq.int <- base::seq.int
[17:44:53.832]             signalCondition <- base::signalCondition
[17:44:53.832]             sys.calls <- base::sys.calls
[17:44:53.832]             `[[` <- base::`[[`
[17:44:53.832]             `+` <- base::`+`
[17:44:53.832]             `<<-` <- base::`<<-`
[17:44:53.832]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:53.832]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:53.832]                   3L)]
[17:44:53.832]             }
[17:44:53.832]             function(cond) {
[17:44:53.832]                 is_error <- inherits(cond, "error")
[17:44:53.832]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:53.832]                   NULL)
[17:44:53.832]                 if (is_error) {
[17:44:53.832]                   sessionInformation <- function() {
[17:44:53.832]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:53.832]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:53.832]                       search = base::search(), system = base::Sys.info())
[17:44:53.832]                   }
[17:44:53.832]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.832]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:53.832]                     cond$call), session = sessionInformation(), 
[17:44:53.832]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:53.832]                   signalCondition(cond)
[17:44:53.832]                 }
[17:44:53.832]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:53.832]                 "immediateCondition"))) {
[17:44:53.832]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:53.832]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.832]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:53.832]                   if (TRUE && !signal) {
[17:44:53.832]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.832]                     {
[17:44:53.832]                       inherits <- base::inherits
[17:44:53.832]                       invokeRestart <- base::invokeRestart
[17:44:53.832]                       is.null <- base::is.null
[17:44:53.832]                       muffled <- FALSE
[17:44:53.832]                       if (inherits(cond, "message")) {
[17:44:53.832]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.832]                         if (muffled) 
[17:44:53.832]                           invokeRestart("muffleMessage")
[17:44:53.832]                       }
[17:44:53.832]                       else if (inherits(cond, "warning")) {
[17:44:53.832]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.832]                         if (muffled) 
[17:44:53.832]                           invokeRestart("muffleWarning")
[17:44:53.832]                       }
[17:44:53.832]                       else if (inherits(cond, "condition")) {
[17:44:53.832]                         if (!is.null(pattern)) {
[17:44:53.832]                           computeRestarts <- base::computeRestarts
[17:44:53.832]                           grepl <- base::grepl
[17:44:53.832]                           restarts <- computeRestarts(cond)
[17:44:53.832]                           for (restart in restarts) {
[17:44:53.832]                             name <- restart$name
[17:44:53.832]                             if (is.null(name)) 
[17:44:53.832]                               next
[17:44:53.832]                             if (!grepl(pattern, name)) 
[17:44:53.832]                               next
[17:44:53.832]                             invokeRestart(restart)
[17:44:53.832]                             muffled <- TRUE
[17:44:53.832]                             break
[17:44:53.832]                           }
[17:44:53.832]                         }
[17:44:53.832]                       }
[17:44:53.832]                       invisible(muffled)
[17:44:53.832]                     }
[17:44:53.832]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.832]                   }
[17:44:53.832]                 }
[17:44:53.832]                 else {
[17:44:53.832]                   if (TRUE) {
[17:44:53.832]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.832]                     {
[17:44:53.832]                       inherits <- base::inherits
[17:44:53.832]                       invokeRestart <- base::invokeRestart
[17:44:53.832]                       is.null <- base::is.null
[17:44:53.832]                       muffled <- FALSE
[17:44:53.832]                       if (inherits(cond, "message")) {
[17:44:53.832]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.832]                         if (muffled) 
[17:44:53.832]                           invokeRestart("muffleMessage")
[17:44:53.832]                       }
[17:44:53.832]                       else if (inherits(cond, "warning")) {
[17:44:53.832]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.832]                         if (muffled) 
[17:44:53.832]                           invokeRestart("muffleWarning")
[17:44:53.832]                       }
[17:44:53.832]                       else if (inherits(cond, "condition")) {
[17:44:53.832]                         if (!is.null(pattern)) {
[17:44:53.832]                           computeRestarts <- base::computeRestarts
[17:44:53.832]                           grepl <- base::grepl
[17:44:53.832]                           restarts <- computeRestarts(cond)
[17:44:53.832]                           for (restart in restarts) {
[17:44:53.832]                             name <- restart$name
[17:44:53.832]                             if (is.null(name)) 
[17:44:53.832]                               next
[17:44:53.832]                             if (!grepl(pattern, name)) 
[17:44:53.832]                               next
[17:44:53.832]                             invokeRestart(restart)
[17:44:53.832]                             muffled <- TRUE
[17:44:53.832]                             break
[17:44:53.832]                           }
[17:44:53.832]                         }
[17:44:53.832]                       }
[17:44:53.832]                       invisible(muffled)
[17:44:53.832]                     }
[17:44:53.832]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.832]                   }
[17:44:53.832]                 }
[17:44:53.832]             }
[17:44:53.832]         }))
[17:44:53.832]     }, error = function(ex) {
[17:44:53.832]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:53.832]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.832]                 ...future.rng), started = ...future.startTime, 
[17:44:53.832]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:53.832]             version = "1.8"), class = "FutureResult")
[17:44:53.832]     }, finally = {
[17:44:53.832]         if (!identical(...future.workdir, getwd())) 
[17:44:53.832]             setwd(...future.workdir)
[17:44:53.832]         {
[17:44:53.832]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:53.832]                 ...future.oldOptions$nwarnings <- NULL
[17:44:53.832]             }
[17:44:53.832]             base::options(...future.oldOptions)
[17:44:53.832]             if (.Platform$OS.type == "windows") {
[17:44:53.832]                 old_names <- names(...future.oldEnvVars)
[17:44:53.832]                 envs <- base::Sys.getenv()
[17:44:53.832]                 names <- names(envs)
[17:44:53.832]                 common <- intersect(names, old_names)
[17:44:53.832]                 added <- setdiff(names, old_names)
[17:44:53.832]                 removed <- setdiff(old_names, names)
[17:44:53.832]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:53.832]                   envs[common]]
[17:44:53.832]                 NAMES <- toupper(changed)
[17:44:53.832]                 args <- list()
[17:44:53.832]                 for (kk in seq_along(NAMES)) {
[17:44:53.832]                   name <- changed[[kk]]
[17:44:53.832]                   NAME <- NAMES[[kk]]
[17:44:53.832]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.832]                     next
[17:44:53.832]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.832]                 }
[17:44:53.832]                 NAMES <- toupper(added)
[17:44:53.832]                 for (kk in seq_along(NAMES)) {
[17:44:53.832]                   name <- added[[kk]]
[17:44:53.832]                   NAME <- NAMES[[kk]]
[17:44:53.832]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.832]                     next
[17:44:53.832]                   args[[name]] <- ""
[17:44:53.832]                 }
[17:44:53.832]                 NAMES <- toupper(removed)
[17:44:53.832]                 for (kk in seq_along(NAMES)) {
[17:44:53.832]                   name <- removed[[kk]]
[17:44:53.832]                   NAME <- NAMES[[kk]]
[17:44:53.832]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.832]                     next
[17:44:53.832]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.832]                 }
[17:44:53.832]                 if (length(args) > 0) 
[17:44:53.832]                   base::do.call(base::Sys.setenv, args = args)
[17:44:53.832]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:53.832]             }
[17:44:53.832]             else {
[17:44:53.832]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:53.832]             }
[17:44:53.832]             {
[17:44:53.832]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:53.832]                   0L) {
[17:44:53.832]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:53.832]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:53.832]                   base::options(opts)
[17:44:53.832]                 }
[17:44:53.832]                 {
[17:44:53.832]                   {
[17:44:53.832]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:53.832]                     NULL
[17:44:53.832]                   }
[17:44:53.832]                   options(future.plan = NULL)
[17:44:53.832]                   if (is.na(NA_character_)) 
[17:44:53.832]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.832]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:53.832]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:53.832]                     .init = FALSE)
[17:44:53.832]                 }
[17:44:53.832]             }
[17:44:53.832]         }
[17:44:53.832]     })
[17:44:53.832]     if (TRUE) {
[17:44:53.832]         base::sink(type = "output", split = FALSE)
[17:44:53.832]         if (TRUE) {
[17:44:53.832]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:53.832]         }
[17:44:53.832]         else {
[17:44:53.832]             ...future.result["stdout"] <- base::list(NULL)
[17:44:53.832]         }
[17:44:53.832]         base::close(...future.stdout)
[17:44:53.832]         ...future.stdout <- NULL
[17:44:53.832]     }
[17:44:53.832]     ...future.result$conditions <- ...future.conditions
[17:44:53.832]     ...future.result$finished <- base::Sys.time()
[17:44:53.832]     ...future.result
[17:44:53.832] }
[17:44:53.834] assign_globals() ...
[17:44:53.834] List of 7
[17:44:53.834]  $ ...future.FUN            :function (...)  
[17:44:53.834]  $ foo                      :function (x = 1, y = 2)  
[17:44:53.834]  $ x                        : num 3
[17:44:53.834]  $ future.call.arguments    : list()
[17:44:53.834]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.834]  $ ...future.elements_ii    :List of 2
[17:44:53.834]   ..$ : int 0
[17:44:53.834]   ..$ : int 0
[17:44:53.834]  $ ...future.seeds_ii       :List of 2
[17:44:53.834]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[17:44:53.834]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[17:44:53.834]  $ ...future.globals.maxSize: NULL
[17:44:53.834]  - attr(*, "where")=List of 7
[17:44:53.834]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:44:53.834]   ..$ foo                      :<environment: R_EmptyEnv> 
[17:44:53.834]   ..$ x                        :<environment: R_EmptyEnv> 
[17:44:53.834]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:44:53.834]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:44:53.834]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:44:53.834]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:44:53.834]  - attr(*, "resolved")= logi FALSE
[17:44:53.834]  - attr(*, "total_size")= num 2200
[17:44:53.834]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.834]  - attr(*, "already-done")= logi TRUE
[17:44:53.841] - reassign environment for ‘...future.FUN’
[17:44:53.841] - copied ‘...future.FUN’ to environment
[17:44:53.841] - reassign environment for ‘foo’
[17:44:53.841] - copied ‘foo’ to environment
[17:44:53.841] - copied ‘x’ to environment
[17:44:53.841] - copied ‘future.call.arguments’ to environment
[17:44:53.841] - copied ‘...future.elements_ii’ to environment
[17:44:53.841] - copied ‘...future.seeds_ii’ to environment
[17:44:53.842] - copied ‘...future.globals.maxSize’ to environment
[17:44:53.842] assign_globals() ... done
[17:44:53.842] requestCore(): workers = 2
[17:44:53.844] MulticoreFuture started
[17:44:53.844] - Launch lazy future ... done
[17:44:53.844] run() for ‘MulticoreFuture’ ... done
[17:44:53.845] Created future:
[17:44:53.845] plan(): Setting new future strategy stack:
[17:44:53.845] List of future strategies:
[17:44:53.845] 1. sequential:
[17:44:53.845]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.845]    - tweaked: FALSE
[17:44:53.845]    - call: NULL
[17:44:53.846] plan(): nbrOfWorkers() = 1
[17:44:53.848] plan(): Setting new future strategy stack:
[17:44:53.848] List of future strategies:
[17:44:53.848] 1. multicore:
[17:44:53.848]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:53.848]    - tweaked: FALSE
[17:44:53.848]    - call: plan(strategy)
[17:44:53.853] plan(): nbrOfWorkers() = 2
[17:44:53.845] MulticoreFuture:
[17:44:53.845] Label: ‘future_replicate-1’
[17:44:53.845] Expression:
[17:44:53.845] {
[17:44:53.845]     do.call(function(...) {
[17:44:53.845]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.845]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.845]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.845]             on.exit(options(oopts), add = TRUE)
[17:44:53.845]         }
[17:44:53.845]         {
[17:44:53.845]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.845]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.845]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.845]                   envir = globalenv(), inherits = FALSE)
[17:44:53.845]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.845]             })
[17:44:53.845]         }
[17:44:53.845]     }, args = future.call.arguments)
[17:44:53.845] }
[17:44:53.845] Lazy evaluation: FALSE
[17:44:53.845] Asynchronous evaluation: TRUE
[17:44:53.845] Local evaluation: TRUE
[17:44:53.845] Environment: 0x558388642780
[17:44:53.845] Capture standard output: TRUE
[17:44:53.845] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:53.845] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[17:44:53.845] Packages: <none>
[17:44:53.845] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:53.845] Resolved: TRUE
[17:44:53.845] Value: <not collected>
[17:44:53.845] Conditions captured: <none>
[17:44:53.845] Early signaling: FALSE
[17:44:53.845] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:53.845] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.854] Chunk #1 of 2 ... DONE
[17:44:53.855] Chunk #2 of 2 ...
[17:44:53.855]  - Finding globals in 'X' for chunk #2 ...
[17:44:53.855] getGlobalsAndPackages() ...
[17:44:53.855] Searching for globals...
[17:44:53.856] 
[17:44:53.856] Searching for globals ... DONE
[17:44:53.856] - globals: [0] <none>
[17:44:53.856] getGlobalsAndPackages() ... DONE
[17:44:53.856]    + additional globals found: [n=0] 
[17:44:53.856]    + additional namespaces needed: [n=0] 
[17:44:53.857]  - Finding globals in 'X' for chunk #2 ... DONE
[17:44:53.857]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:53.857]  - seeds: [3] <seeds>
[17:44:53.857]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.857] getGlobalsAndPackages() ...
[17:44:53.857] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.858] Resolving globals: FALSE
[17:44:53.858] Tweak future expression to call with '...' arguments ...
[17:44:53.858] {
[17:44:53.858]     do.call(function(...) {
[17:44:53.858]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.858]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.858]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.858]             on.exit(options(oopts), add = TRUE)
[17:44:53.858]         }
[17:44:53.858]         {
[17:44:53.858]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.858]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.858]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.858]                   envir = globalenv(), inherits = FALSE)
[17:44:53.858]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.858]             })
[17:44:53.858]         }
[17:44:53.858]     }, args = future.call.arguments)
[17:44:53.858] }
[17:44:53.858] Tweak future expression to call with '...' arguments ... DONE
[17:44:53.859] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:53.859] 
[17:44:53.860] getGlobalsAndPackages() ... DONE
[17:44:53.860] run() for ‘Future’ ...
[17:44:53.860] - state: ‘created’
[17:44:53.860] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:44:53.865] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.865] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:44:53.865]   - Field: ‘label’
[17:44:53.866]   - Field: ‘local’
[17:44:53.866]   - Field: ‘owner’
[17:44:53.866]   - Field: ‘envir’
[17:44:53.866]   - Field: ‘workers’
[17:44:53.866]   - Field: ‘packages’
[17:44:53.866]   - Field: ‘gc’
[17:44:53.866]   - Field: ‘job’
[17:44:53.867]   - Field: ‘conditions’
[17:44:53.867]   - Field: ‘expr’
[17:44:53.867]   - Field: ‘uuid’
[17:44:53.867]   - Field: ‘seed’
[17:44:53.867]   - Field: ‘version’
[17:44:53.867]   - Field: ‘result’
[17:44:53.867]   - Field: ‘asynchronous’
[17:44:53.868]   - Field: ‘calls’
[17:44:53.868]   - Field: ‘globals’
[17:44:53.868]   - Field: ‘stdout’
[17:44:53.868]   - Field: ‘earlySignal’
[17:44:53.868]   - Field: ‘lazy’
[17:44:53.868]   - Field: ‘state’
[17:44:53.868] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:44:53.869] - Launch lazy future ...
[17:44:53.869] Packages needed by the future expression (n = 0): <none>
[17:44:53.869] Packages needed by future strategies (n = 0): <none>
[17:44:53.870] {
[17:44:53.870]     {
[17:44:53.870]         {
[17:44:53.870]             ...future.startTime <- base::Sys.time()
[17:44:53.870]             {
[17:44:53.870]                 {
[17:44:53.870]                   {
[17:44:53.870]                     {
[17:44:53.870]                       base::local({
[17:44:53.870]                         has_future <- base::requireNamespace("future", 
[17:44:53.870]                           quietly = TRUE)
[17:44:53.870]                         if (has_future) {
[17:44:53.870]                           ns <- base::getNamespace("future")
[17:44:53.870]                           version <- ns[[".package"]][["version"]]
[17:44:53.870]                           if (is.null(version)) 
[17:44:53.870]                             version <- utils::packageVersion("future")
[17:44:53.870]                         }
[17:44:53.870]                         else {
[17:44:53.870]                           version <- NULL
[17:44:53.870]                         }
[17:44:53.870]                         if (!has_future || version < "1.8.0") {
[17:44:53.870]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:53.870]                             "", base::R.version$version.string), 
[17:44:53.870]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:53.870]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:53.870]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:53.870]                               "release", "version")], collapse = " "), 
[17:44:53.870]                             hostname = base::Sys.info()[["nodename"]])
[17:44:53.870]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:53.870]                             info)
[17:44:53.870]                           info <- base::paste(info, collapse = "; ")
[17:44:53.870]                           if (!has_future) {
[17:44:53.870]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:53.870]                               info)
[17:44:53.870]                           }
[17:44:53.870]                           else {
[17:44:53.870]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:53.870]                               info, version)
[17:44:53.870]                           }
[17:44:53.870]                           base::stop(msg)
[17:44:53.870]                         }
[17:44:53.870]                       })
[17:44:53.870]                     }
[17:44:53.870]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:53.870]                     base::options(mc.cores = 1L)
[17:44:53.870]                   }
[17:44:53.870]                   ...future.strategy.old <- future::plan("list")
[17:44:53.870]                   options(future.plan = NULL)
[17:44:53.870]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.870]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:53.870]                 }
[17:44:53.870]                 ...future.workdir <- getwd()
[17:44:53.870]             }
[17:44:53.870]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:53.870]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:53.870]         }
[17:44:53.870]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:53.870]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:53.870]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:53.870]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:53.870]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:53.870]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:53.870]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:53.870]             base::names(...future.oldOptions))
[17:44:53.870]     }
[17:44:53.870]     if (FALSE) {
[17:44:53.870]     }
[17:44:53.870]     else {
[17:44:53.870]         if (TRUE) {
[17:44:53.870]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:53.870]                 open = "w")
[17:44:53.870]         }
[17:44:53.870]         else {
[17:44:53.870]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:53.870]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:53.870]         }
[17:44:53.870]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:53.870]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:53.870]             base::sink(type = "output", split = FALSE)
[17:44:53.870]             base::close(...future.stdout)
[17:44:53.870]         }, add = TRUE)
[17:44:53.870]     }
[17:44:53.870]     ...future.frame <- base::sys.nframe()
[17:44:53.870]     ...future.conditions <- base::list()
[17:44:53.870]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:53.870]     if (FALSE) {
[17:44:53.870]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:53.870]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:53.870]     }
[17:44:53.870]     ...future.result <- base::tryCatch({
[17:44:53.870]         base::withCallingHandlers({
[17:44:53.870]             ...future.value <- base::withVisible(base::local({
[17:44:53.870]                 withCallingHandlers({
[17:44:53.870]                   {
[17:44:53.870]                     do.call(function(...) {
[17:44:53.870]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.870]                       if (!identical(...future.globals.maxSize.org, 
[17:44:53.870]                         ...future.globals.maxSize)) {
[17:44:53.870]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.870]                         on.exit(options(oopts), add = TRUE)
[17:44:53.870]                       }
[17:44:53.870]                       {
[17:44:53.870]                         lapply(seq_along(...future.elements_ii), 
[17:44:53.870]                           FUN = function(jj) {
[17:44:53.870]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.870]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.870]                               envir = globalenv(), inherits = FALSE)
[17:44:53.870]                             ...future.FUN(...future.X_jj, ...)
[17:44:53.870]                           })
[17:44:53.870]                       }
[17:44:53.870]                     }, args = future.call.arguments)
[17:44:53.870]                   }
[17:44:53.870]                 }, immediateCondition = function(cond) {
[17:44:53.870]                   save_rds <- function (object, pathname, ...) 
[17:44:53.870]                   {
[17:44:53.870]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:44:53.870]                     if (file_test("-f", pathname_tmp)) {
[17:44:53.870]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.870]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:44:53.870]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.870]                         fi_tmp[["mtime"]])
[17:44:53.870]                     }
[17:44:53.870]                     tryCatch({
[17:44:53.870]                       saveRDS(object, file = pathname_tmp, ...)
[17:44:53.870]                     }, error = function(ex) {
[17:44:53.870]                       msg <- conditionMessage(ex)
[17:44:53.870]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.870]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:44:53.870]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.870]                         fi_tmp[["mtime"]], msg)
[17:44:53.870]                       ex$message <- msg
[17:44:53.870]                       stop(ex)
[17:44:53.870]                     })
[17:44:53.870]                     stopifnot(file_test("-f", pathname_tmp))
[17:44:53.870]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:44:53.870]                     if (!res || file_test("-f", pathname_tmp)) {
[17:44:53.870]                       fi_tmp <- file.info(pathname_tmp)
[17:44:53.870]                       fi <- file.info(pathname)
[17:44:53.870]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:44:53.870]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:53.870]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:44:53.870]                         fi[["size"]], fi[["mtime"]])
[17:44:53.870]                       stop(msg)
[17:44:53.870]                     }
[17:44:53.870]                     invisible(pathname)
[17:44:53.870]                   }
[17:44:53.870]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:44:53.870]                     rootPath = tempdir()) 
[17:44:53.870]                   {
[17:44:53.870]                     obj <- list(time = Sys.time(), condition = cond)
[17:44:53.870]                     file <- tempfile(pattern = class(cond)[1], 
[17:44:53.870]                       tmpdir = path, fileext = ".rds")
[17:44:53.870]                     save_rds(obj, file)
[17:44:53.870]                   }
[17:44:53.870]                   saveImmediateCondition(cond, path = "/tmp/RtmpYaox9w/.future/immediateConditions")
[17:44:53.870]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.870]                   {
[17:44:53.870]                     inherits <- base::inherits
[17:44:53.870]                     invokeRestart <- base::invokeRestart
[17:44:53.870]                     is.null <- base::is.null
[17:44:53.870]                     muffled <- FALSE
[17:44:53.870]                     if (inherits(cond, "message")) {
[17:44:53.870]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:53.870]                       if (muffled) 
[17:44:53.870]                         invokeRestart("muffleMessage")
[17:44:53.870]                     }
[17:44:53.870]                     else if (inherits(cond, "warning")) {
[17:44:53.870]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:53.870]                       if (muffled) 
[17:44:53.870]                         invokeRestart("muffleWarning")
[17:44:53.870]                     }
[17:44:53.870]                     else if (inherits(cond, "condition")) {
[17:44:53.870]                       if (!is.null(pattern)) {
[17:44:53.870]                         computeRestarts <- base::computeRestarts
[17:44:53.870]                         grepl <- base::grepl
[17:44:53.870]                         restarts <- computeRestarts(cond)
[17:44:53.870]                         for (restart in restarts) {
[17:44:53.870]                           name <- restart$name
[17:44:53.870]                           if (is.null(name)) 
[17:44:53.870]                             next
[17:44:53.870]                           if (!grepl(pattern, name)) 
[17:44:53.870]                             next
[17:44:53.870]                           invokeRestart(restart)
[17:44:53.870]                           muffled <- TRUE
[17:44:53.870]                           break
[17:44:53.870]                         }
[17:44:53.870]                       }
[17:44:53.870]                     }
[17:44:53.870]                     invisible(muffled)
[17:44:53.870]                   }
[17:44:53.870]                   muffleCondition(cond)
[17:44:53.870]                 })
[17:44:53.870]             }))
[17:44:53.870]             future::FutureResult(value = ...future.value$value, 
[17:44:53.870]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.870]                   ...future.rng), globalenv = if (FALSE) 
[17:44:53.870]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:53.870]                     ...future.globalenv.names))
[17:44:53.870]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:53.870]         }, condition = base::local({
[17:44:53.870]             c <- base::c
[17:44:53.870]             inherits <- base::inherits
[17:44:53.870]             invokeRestart <- base::invokeRestart
[17:44:53.870]             length <- base::length
[17:44:53.870]             list <- base::list
[17:44:53.870]             seq.int <- base::seq.int
[17:44:53.870]             signalCondition <- base::signalCondition
[17:44:53.870]             sys.calls <- base::sys.calls
[17:44:53.870]             `[[` <- base::`[[`
[17:44:53.870]             `+` <- base::`+`
[17:44:53.870]             `<<-` <- base::`<<-`
[17:44:53.870]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:53.870]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:53.870]                   3L)]
[17:44:53.870]             }
[17:44:53.870]             function(cond) {
[17:44:53.870]                 is_error <- inherits(cond, "error")
[17:44:53.870]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:53.870]                   NULL)
[17:44:53.870]                 if (is_error) {
[17:44:53.870]                   sessionInformation <- function() {
[17:44:53.870]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:53.870]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:53.870]                       search = base::search(), system = base::Sys.info())
[17:44:53.870]                   }
[17:44:53.870]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.870]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:53.870]                     cond$call), session = sessionInformation(), 
[17:44:53.870]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:53.870]                   signalCondition(cond)
[17:44:53.870]                 }
[17:44:53.870]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:53.870]                 "immediateCondition"))) {
[17:44:53.870]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:53.870]                   ...future.conditions[[length(...future.conditions) + 
[17:44:53.870]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:53.870]                   if (TRUE && !signal) {
[17:44:53.870]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.870]                     {
[17:44:53.870]                       inherits <- base::inherits
[17:44:53.870]                       invokeRestart <- base::invokeRestart
[17:44:53.870]                       is.null <- base::is.null
[17:44:53.870]                       muffled <- FALSE
[17:44:53.870]                       if (inherits(cond, "message")) {
[17:44:53.870]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.870]                         if (muffled) 
[17:44:53.870]                           invokeRestart("muffleMessage")
[17:44:53.870]                       }
[17:44:53.870]                       else if (inherits(cond, "warning")) {
[17:44:53.870]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.870]                         if (muffled) 
[17:44:53.870]                           invokeRestart("muffleWarning")
[17:44:53.870]                       }
[17:44:53.870]                       else if (inherits(cond, "condition")) {
[17:44:53.870]                         if (!is.null(pattern)) {
[17:44:53.870]                           computeRestarts <- base::computeRestarts
[17:44:53.870]                           grepl <- base::grepl
[17:44:53.870]                           restarts <- computeRestarts(cond)
[17:44:53.870]                           for (restart in restarts) {
[17:44:53.870]                             name <- restart$name
[17:44:53.870]                             if (is.null(name)) 
[17:44:53.870]                               next
[17:44:53.870]                             if (!grepl(pattern, name)) 
[17:44:53.870]                               next
[17:44:53.870]                             invokeRestart(restart)
[17:44:53.870]                             muffled <- TRUE
[17:44:53.870]                             break
[17:44:53.870]                           }
[17:44:53.870]                         }
[17:44:53.870]                       }
[17:44:53.870]                       invisible(muffled)
[17:44:53.870]                     }
[17:44:53.870]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.870]                   }
[17:44:53.870]                 }
[17:44:53.870]                 else {
[17:44:53.870]                   if (TRUE) {
[17:44:53.870]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:53.870]                     {
[17:44:53.870]                       inherits <- base::inherits
[17:44:53.870]                       invokeRestart <- base::invokeRestart
[17:44:53.870]                       is.null <- base::is.null
[17:44:53.870]                       muffled <- FALSE
[17:44:53.870]                       if (inherits(cond, "message")) {
[17:44:53.870]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:53.870]                         if (muffled) 
[17:44:53.870]                           invokeRestart("muffleMessage")
[17:44:53.870]                       }
[17:44:53.870]                       else if (inherits(cond, "warning")) {
[17:44:53.870]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:53.870]                         if (muffled) 
[17:44:53.870]                           invokeRestart("muffleWarning")
[17:44:53.870]                       }
[17:44:53.870]                       else if (inherits(cond, "condition")) {
[17:44:53.870]                         if (!is.null(pattern)) {
[17:44:53.870]                           computeRestarts <- base::computeRestarts
[17:44:53.870]                           grepl <- base::grepl
[17:44:53.870]                           restarts <- computeRestarts(cond)
[17:44:53.870]                           for (restart in restarts) {
[17:44:53.870]                             name <- restart$name
[17:44:53.870]                             if (is.null(name)) 
[17:44:53.870]                               next
[17:44:53.870]                             if (!grepl(pattern, name)) 
[17:44:53.870]                               next
[17:44:53.870]                             invokeRestart(restart)
[17:44:53.870]                             muffled <- TRUE
[17:44:53.870]                             break
[17:44:53.870]                           }
[17:44:53.870]                         }
[17:44:53.870]                       }
[17:44:53.870]                       invisible(muffled)
[17:44:53.870]                     }
[17:44:53.870]                     muffleCondition(cond, pattern = "^muffle")
[17:44:53.870]                   }
[17:44:53.870]                 }
[17:44:53.870]             }
[17:44:53.870]         }))
[17:44:53.870]     }, error = function(ex) {
[17:44:53.870]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:53.870]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:53.870]                 ...future.rng), started = ...future.startTime, 
[17:44:53.870]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:53.870]             version = "1.8"), class = "FutureResult")
[17:44:53.870]     }, finally = {
[17:44:53.870]         if (!identical(...future.workdir, getwd())) 
[17:44:53.870]             setwd(...future.workdir)
[17:44:53.870]         {
[17:44:53.870]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:53.870]                 ...future.oldOptions$nwarnings <- NULL
[17:44:53.870]             }
[17:44:53.870]             base::options(...future.oldOptions)
[17:44:53.870]             if (.Platform$OS.type == "windows") {
[17:44:53.870]                 old_names <- names(...future.oldEnvVars)
[17:44:53.870]                 envs <- base::Sys.getenv()
[17:44:53.870]                 names <- names(envs)
[17:44:53.870]                 common <- intersect(names, old_names)
[17:44:53.870]                 added <- setdiff(names, old_names)
[17:44:53.870]                 removed <- setdiff(old_names, names)
[17:44:53.870]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:53.870]                   envs[common]]
[17:44:53.870]                 NAMES <- toupper(changed)
[17:44:53.870]                 args <- list()
[17:44:53.870]                 for (kk in seq_along(NAMES)) {
[17:44:53.870]                   name <- changed[[kk]]
[17:44:53.870]                   NAME <- NAMES[[kk]]
[17:44:53.870]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.870]                     next
[17:44:53.870]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.870]                 }
[17:44:53.870]                 NAMES <- toupper(added)
[17:44:53.870]                 for (kk in seq_along(NAMES)) {
[17:44:53.870]                   name <- added[[kk]]
[17:44:53.870]                   NAME <- NAMES[[kk]]
[17:44:53.870]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.870]                     next
[17:44:53.870]                   args[[name]] <- ""
[17:44:53.870]                 }
[17:44:53.870]                 NAMES <- toupper(removed)
[17:44:53.870]                 for (kk in seq_along(NAMES)) {
[17:44:53.870]                   name <- removed[[kk]]
[17:44:53.870]                   NAME <- NAMES[[kk]]
[17:44:53.870]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:53.870]                     next
[17:44:53.870]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:53.870]                 }
[17:44:53.870]                 if (length(args) > 0) 
[17:44:53.870]                   base::do.call(base::Sys.setenv, args = args)
[17:44:53.870]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:53.870]             }
[17:44:53.870]             else {
[17:44:53.870]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:53.870]             }
[17:44:53.870]             {
[17:44:53.870]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:53.870]                   0L) {
[17:44:53.870]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:53.870]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:53.870]                   base::options(opts)
[17:44:53.870]                 }
[17:44:53.870]                 {
[17:44:53.870]                   {
[17:44:53.870]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:53.870]                     NULL
[17:44:53.870]                   }
[17:44:53.870]                   options(future.plan = NULL)
[17:44:53.870]                   if (is.na(NA_character_)) 
[17:44:53.870]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:53.870]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:53.870]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:53.870]                     .init = FALSE)
[17:44:53.870]                 }
[17:44:53.870]             }
[17:44:53.870]         }
[17:44:53.870]     })
[17:44:53.870]     if (TRUE) {
[17:44:53.870]         base::sink(type = "output", split = FALSE)
[17:44:53.870]         if (TRUE) {
[17:44:53.870]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:53.870]         }
[17:44:53.870]         else {
[17:44:53.870]             ...future.result["stdout"] <- base::list(NULL)
[17:44:53.870]         }
[17:44:53.870]         base::close(...future.stdout)
[17:44:53.870]         ...future.stdout <- NULL
[17:44:53.870]     }
[17:44:53.870]     ...future.result$conditions <- ...future.conditions
[17:44:53.870]     ...future.result$finished <- base::Sys.time()
[17:44:53.870]     ...future.result
[17:44:53.870] }
[17:44:53.873] assign_globals() ...
[17:44:53.873] List of 7
[17:44:53.873]  $ ...future.FUN            :function (...)  
[17:44:53.873]  $ foo                      :function (x = 1, y = 2)  
[17:44:53.873]  $ x                        : num 3
[17:44:53.873]  $ future.call.arguments    : list()
[17:44:53.873]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:53.873]  $ ...future.elements_ii    :List of 3
[17:44:53.873]   ..$ : int 0
[17:44:53.873]   ..$ : int 0
[17:44:53.873]   ..$ : int 0
[17:44:53.873]  $ ...future.seeds_ii       :List of 3
[17:44:53.873]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[17:44:53.873]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[17:44:53.873]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[17:44:53.873]  $ ...future.globals.maxSize: NULL
[17:44:53.873]  - attr(*, "where")=List of 7
[17:44:53.873]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:44:53.873]   ..$ foo                      :<environment: R_EmptyEnv> 
[17:44:53.873]   ..$ x                        :<environment: R_EmptyEnv> 
[17:44:53.873]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:44:53.873]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:44:53.873]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:44:53.873]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:44:53.873]  - attr(*, "resolved")= logi FALSE
[17:44:53.873]  - attr(*, "total_size")= num 2200
[17:44:53.873]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:53.873]  - attr(*, "already-done")= logi TRUE
[17:44:53.888] - reassign environment for ‘...future.FUN’
[17:44:53.888] - copied ‘...future.FUN’ to environment
[17:44:53.888] - reassign environment for ‘foo’
[17:44:53.888] - copied ‘foo’ to environment
[17:44:53.888] - copied ‘x’ to environment
[17:44:53.888] - copied ‘future.call.arguments’ to environment
[17:44:53.888] - copied ‘...future.elements_ii’ to environment
[17:44:53.889] - copied ‘...future.seeds_ii’ to environment
[17:44:53.889] - copied ‘...future.globals.maxSize’ to environment
[17:44:53.889] assign_globals() ... done
[17:44:53.889] requestCore(): workers = 2
[17:44:53.891] MulticoreFuture started
[17:44:53.892] - Launch lazy future ... done
[17:44:53.892] run() for ‘MulticoreFuture’ ... done
[17:44:53.892] Created future:
[17:44:53.893] plan(): Setting new future strategy stack:
[17:44:53.893] List of future strategies:
[17:44:53.893] 1. sequential:
[17:44:53.893]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.893]    - tweaked: FALSE
[17:44:53.893]    - call: NULL
[17:44:53.894] plan(): nbrOfWorkers() = 1
[17:44:53.896] plan(): Setting new future strategy stack:
[17:44:53.896] List of future strategies:
[17:44:53.896] 1. multicore:
[17:44:53.896]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:53.896]    - tweaked: FALSE
[17:44:53.896]    - call: plan(strategy)
[17:44:53.902] plan(): nbrOfWorkers() = 2
[17:44:53.893] MulticoreFuture:
[17:44:53.893] Label: ‘future_replicate-2’
[17:44:53.893] Expression:
[17:44:53.893] {
[17:44:53.893]     do.call(function(...) {
[17:44:53.893]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:53.893]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:53.893]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:53.893]             on.exit(options(oopts), add = TRUE)
[17:44:53.893]         }
[17:44:53.893]         {
[17:44:53.893]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:53.893]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:53.893]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:53.893]                   envir = globalenv(), inherits = FALSE)
[17:44:53.893]                 ...future.FUN(...future.X_jj, ...)
[17:44:53.893]             })
[17:44:53.893]         }
[17:44:53.893]     }, args = future.call.arguments)
[17:44:53.893] }
[17:44:53.893] Lazy evaluation: FALSE
[17:44:53.893] Asynchronous evaluation: TRUE
[17:44:53.893] Local evaluation: TRUE
[17:44:53.893] Environment: 0x558388642780
[17:44:53.893] Capture standard output: TRUE
[17:44:53.893] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:53.893] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[17:44:53.893] Packages: <none>
[17:44:53.893] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:53.893] Resolved: TRUE
[17:44:53.893] Value: <not collected>
[17:44:53.893] Conditions captured: <none>
[17:44:53.893] Early signaling: FALSE
[17:44:53.893] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:53.893] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:53.903] Chunk #2 of 2 ... DONE
[17:44:53.903] Launching 2 futures (chunks) ... DONE
[17:44:53.903] Resolving 2 futures (chunks) ...
[17:44:53.904] resolve() on list ...
[17:44:53.904]  recursive: 0
[17:44:53.904]  length: 2
[17:44:53.904] 
[17:44:53.904] Future #1
[17:44:53.905] result() for MulticoreFuture ...
[17:44:53.905] result() for MulticoreFuture ...
[17:44:53.906] result() for MulticoreFuture ... done
[17:44:53.906] result() for MulticoreFuture ... done
[17:44:53.906] result() for MulticoreFuture ...
[17:44:53.906] result() for MulticoreFuture ... done
[17:44:53.907] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:44:53.907] - nx: 2
[17:44:53.907] - relay: TRUE
[17:44:53.907] - stdout: TRUE
[17:44:53.907] - signal: TRUE
[17:44:53.907] - resignal: FALSE
[17:44:53.908] - force: TRUE
[17:44:53.908] - relayed: [n=2] FALSE, FALSE
[17:44:53.908] - queued futures: [n=2] FALSE, FALSE
[17:44:53.908]  - until=1
[17:44:53.908]  - relaying element #1
[17:44:53.908] result() for MulticoreFuture ...
[17:44:53.909] result() for MulticoreFuture ... done
[17:44:53.909] result() for MulticoreFuture ...
[17:44:53.909] result() for MulticoreFuture ... done
[17:44:53.909] result() for MulticoreFuture ...
[17:44:53.910] result() for MulticoreFuture ... done
[17:44:53.910] result() for MulticoreFuture ...
[17:44:53.910] result() for MulticoreFuture ... done
[17:44:53.910] - relayed: [n=2] TRUE, FALSE
[17:44:53.910] - queued futures: [n=2] TRUE, FALSE
[17:44:53.910] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:44:53.911]  length: 1 (resolved future 1)
[17:44:53.911] Future #2
[17:44:53.911] result() for MulticoreFuture ...
[17:44:53.912] result() for MulticoreFuture ...
[17:44:53.912] result() for MulticoreFuture ... done
[17:44:53.912] result() for MulticoreFuture ... done
[17:44:53.912] result() for MulticoreFuture ...
[17:44:53.913] result() for MulticoreFuture ... done
[17:44:53.913] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:44:53.913] - nx: 2
[17:44:53.913] - relay: TRUE
[17:44:53.913] - stdout: TRUE
[17:44:53.913] - signal: TRUE
[17:44:53.913] - resignal: FALSE
[17:44:53.913] - force: TRUE
[17:44:53.914] - relayed: [n=2] TRUE, FALSE
[17:44:53.914] - queued futures: [n=2] TRUE, FALSE
[17:44:53.914]  - until=2
[17:44:53.914]  - relaying element #2
[17:44:53.914] result() for MulticoreFuture ...
[17:44:53.914] result() for MulticoreFuture ... done
[17:44:53.914] result() for MulticoreFuture ...
[17:44:53.914] result() for MulticoreFuture ... done
[17:44:53.915] result() for MulticoreFuture ...
[17:44:53.915] result() for MulticoreFuture ... done
[17:44:53.915] result() for MulticoreFuture ...
[17:44:53.915] result() for MulticoreFuture ... done
[17:44:53.915] - relayed: [n=2] TRUE, TRUE
[17:44:53.915] - queued futures: [n=2] TRUE, TRUE
[17:44:53.915] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:44:53.915]  length: 0 (resolved future 2)
[17:44:53.916] Relaying remaining futures
[17:44:53.916] signalConditionsASAP(NULL, pos=0) ...
[17:44:53.916] - nx: 2
[17:44:53.916] - relay: TRUE
[17:44:53.916] - stdout: TRUE
[17:44:53.916] - signal: TRUE
[17:44:53.916] - resignal: FALSE
[17:44:53.916] - force: TRUE
[17:44:53.916] - relayed: [n=2] TRUE, TRUE
[17:44:53.916] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:44:53.917] - relayed: [n=2] TRUE, TRUE
[17:44:53.917] - queued futures: [n=2] TRUE, TRUE
[17:44:53.917] signalConditionsASAP(NULL, pos=0) ... done
[17:44:53.917] resolve() on list ... DONE
[17:44:53.917] result() for MulticoreFuture ...
[17:44:53.917] result() for MulticoreFuture ... done
[17:44:53.917] result() for MulticoreFuture ...
[17:44:53.917] result() for MulticoreFuture ... done
[17:44:53.918] result() for MulticoreFuture ...
[17:44:53.918] result() for MulticoreFuture ... done
[17:44:53.918] result() for MulticoreFuture ...
[17:44:53.918] result() for MulticoreFuture ... done
[17:44:53.918]  - Number of value chunks collected: 2
[17:44:53.918] Resolving 2 futures (chunks) ... DONE
[17:44:53.918] Reducing values from 2 chunks ...
[17:44:53.918]  - Number of values collected after concatenation: 5
[17:44:53.918]  - Number of values expected: 5
[17:44:53.919] Reducing values from 2 chunks ... DONE
[17:44:53.919] future_lapply() ... DONE
[17:44:53.919] plan(): Setting new future strategy stack:
[17:44:53.919] List of future strategies:
[17:44:53.919] 1. sequential:
[17:44:53.919]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:53.919]    - tweaked: FALSE
[17:44:53.919]    - call: plan(sequential)
[17:44:53.920] plan(): nbrOfWorkers() = 1
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[17:44:53.920] plan(): Setting new future strategy stack:
[17:44:53.921] List of future strategies:
[17:44:53.921] 1. multisession:
[17:44:53.921]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:53.921]    - tweaked: FALSE
[17:44:53.921]    - call: plan(strategy)
[17:44:53.921] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:44:53.921] multisession:
[17:44:53.921] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:53.921] - tweaked: FALSE
[17:44:53.921] - call: plan(strategy)
[17:44:53.927] getGlobalsAndPackages() ...
[17:44:53.927] Not searching for globals
[17:44:53.928] - globals: [0] <none>
[17:44:53.928] getGlobalsAndPackages() ... DONE
[17:44:53.928] [local output] makeClusterPSOCK() ...
[17:44:53.972] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:44:53.973] [local output] Base port: 11762
[17:44:53.973] [local output] Getting setup options for 2 cluster nodes ...
[17:44:53.974] [local output]  - Node 1 of 2 ...
[17:44:53.974] [local output] localMachine=TRUE => revtunnel=FALSE

[17:44:53.975] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpYaox9w/worker.rank=1.parallelly.parent=34986.88aa740691f9.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpYaox9w/worker.rank=1.parallelly.parent=34986.88aa740691f9.pid")'’
[17:44:54.163] - Possible to infer worker's PID: TRUE
[17:44:54.163] [local output] Rscript port: 11762

[17:44:54.164] [local output]  - Node 2 of 2 ...
[17:44:54.164] [local output] localMachine=TRUE => revtunnel=FALSE

[17:44:54.165] [local output] Rscript port: 11762

[17:44:54.165] [local output] Getting setup options for 2 cluster nodes ... done
[17:44:54.165] [local output]  - Parallel setup requested for some PSOCK nodes
[17:44:54.165] [local output] Setting up PSOCK nodes in parallel
[17:44:54.166] List of 36
[17:44:54.166]  $ worker          : chr "localhost"
[17:44:54.166]   ..- attr(*, "localhost")= logi TRUE
[17:44:54.166]  $ master          : chr "localhost"
[17:44:54.166]  $ port            : int 11762
[17:44:54.166]  $ connectTimeout  : num 120
[17:44:54.166]  $ timeout         : num 2592000
[17:44:54.166]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:44:54.166]  $ homogeneous     : logi TRUE
[17:44:54.166]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:44:54.166]  $ rscript_envs    : NULL
[17:44:54.166]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:44:54.166]  $ rscript_startup : NULL
[17:44:54.166]  $ rscript_sh      : chr "sh"
[17:44:54.166]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:44:54.166]  $ methods         : logi TRUE
[17:44:54.166]  $ socketOptions   : chr "no-delay"
[17:44:54.166]  $ useXDR          : logi FALSE
[17:44:54.166]  $ outfile         : chr "/dev/null"
[17:44:54.166]  $ renice          : int NA
[17:44:54.166]  $ rshcmd          : NULL
[17:44:54.166]  $ user            : chr(0) 
[17:44:54.166]  $ revtunnel       : logi FALSE
[17:44:54.166]  $ rshlogfile      : NULL
[17:44:54.166]  $ rshopts         : chr(0) 
[17:44:54.166]  $ rank            : int 1
[17:44:54.166]  $ manual          : logi FALSE
[17:44:54.166]  $ dryrun          : logi FALSE
[17:44:54.166]  $ quiet           : logi FALSE
[17:44:54.166]  $ setup_strategy  : chr "parallel"
[17:44:54.166]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:44:54.166]  $ pidfile         : chr "/tmp/RtmpYaox9w/worker.rank=1.parallelly.parent=34986.88aa740691f9.pid"
[17:44:54.166]  $ rshcmd_label    : NULL
[17:44:54.166]  $ rsh_call        : NULL
[17:44:54.166]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:44:54.166]  $ localMachine    : logi TRUE
[17:44:54.166]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:44:54.166]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:44:54.166]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:44:54.166]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:44:54.166]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:44:54.166]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:44:54.166]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:44:54.166]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:44:54.166]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:44:54.166]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:44:54.166]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:44:54.166]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:44:54.166]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:44:54.166]  $ arguments       :List of 28
[17:44:54.166]   ..$ worker          : chr "localhost"
[17:44:54.166]   ..$ master          : NULL
[17:44:54.166]   ..$ port            : int 11762
[17:44:54.166]   ..$ connectTimeout  : num 120
[17:44:54.166]   ..$ timeout         : num 2592000
[17:44:54.166]   ..$ rscript         : NULL
[17:44:54.166]   ..$ homogeneous     : NULL
[17:44:54.166]   ..$ rscript_args    : NULL
[17:44:54.166]   ..$ rscript_envs    : NULL
[17:44:54.166]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:44:54.166]   ..$ rscript_startup : NULL
[17:44:54.166]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:44:54.166]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:44:54.166]   ..$ methods         : logi TRUE
[17:44:54.166]   ..$ socketOptions   : chr "no-delay"
[17:44:54.166]   ..$ useXDR          : logi FALSE
[17:44:54.166]   ..$ outfile         : chr "/dev/null"
[17:44:54.166]   ..$ renice          : int NA
[17:44:54.166]   ..$ rshcmd          : NULL
[17:44:54.166]   ..$ user            : NULL
[17:44:54.166]   ..$ revtunnel       : logi NA
[17:44:54.166]   ..$ rshlogfile      : NULL
[17:44:54.166]   ..$ rshopts         : NULL
[17:44:54.166]   ..$ rank            : int 1
[17:44:54.166]   ..$ manual          : logi FALSE
[17:44:54.166]   ..$ dryrun          : logi FALSE
[17:44:54.166]   ..$ quiet           : logi FALSE
[17:44:54.166]   ..$ setup_strategy  : chr "parallel"
[17:44:54.166]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:44:54.182] [local output] System call to launch all workers:
[17:44:54.182] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpYaox9w/worker.rank=1.parallelly.parent=34986.88aa740691f9.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11762 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:44:54.182] [local output] Starting PSOCK main server
[17:44:54.188] [local output] Workers launched
[17:44:54.188] [local output] Waiting for workers to connect back
[17:44:54.188]  - [local output] 0 workers out of 2 ready
[17:44:54.464]  - [local output] 0 workers out of 2 ready
[17:44:54.465]  - [local output] 1 workers out of 2 ready
[17:44:54.465]  - [local output] 2 workers out of 2 ready
[17:44:54.465] [local output] Launching of workers completed
[17:44:54.465] [local output] Collecting session information from workers
[17:44:54.466] [local output]  - Worker #1 of 2
[17:44:54.467] [local output]  - Worker #2 of 2
[17:44:54.467] [local output] makeClusterPSOCK() ... done
[17:44:54.478] Packages needed by the future expression (n = 0): <none>
[17:44:54.478] Packages needed by future strategies (n = 0): <none>
[17:44:54.479] {
[17:44:54.479]     {
[17:44:54.479]         {
[17:44:54.479]             ...future.startTime <- base::Sys.time()
[17:44:54.479]             {
[17:44:54.479]                 {
[17:44:54.479]                   {
[17:44:54.479]                     {
[17:44:54.479]                       base::local({
[17:44:54.479]                         has_future <- base::requireNamespace("future", 
[17:44:54.479]                           quietly = TRUE)
[17:44:54.479]                         if (has_future) {
[17:44:54.479]                           ns <- base::getNamespace("future")
[17:44:54.479]                           version <- ns[[".package"]][["version"]]
[17:44:54.479]                           if (is.null(version)) 
[17:44:54.479]                             version <- utils::packageVersion("future")
[17:44:54.479]                         }
[17:44:54.479]                         else {
[17:44:54.479]                           version <- NULL
[17:44:54.479]                         }
[17:44:54.479]                         if (!has_future || version < "1.8.0") {
[17:44:54.479]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:54.479]                             "", base::R.version$version.string), 
[17:44:54.479]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:54.479]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:54.479]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:54.479]                               "release", "version")], collapse = " "), 
[17:44:54.479]                             hostname = base::Sys.info()[["nodename"]])
[17:44:54.479]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:54.479]                             info)
[17:44:54.479]                           info <- base::paste(info, collapse = "; ")
[17:44:54.479]                           if (!has_future) {
[17:44:54.479]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:54.479]                               info)
[17:44:54.479]                           }
[17:44:54.479]                           else {
[17:44:54.479]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:54.479]                               info, version)
[17:44:54.479]                           }
[17:44:54.479]                           base::stop(msg)
[17:44:54.479]                         }
[17:44:54.479]                       })
[17:44:54.479]                     }
[17:44:54.479]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:54.479]                     base::options(mc.cores = 1L)
[17:44:54.479]                   }
[17:44:54.479]                   ...future.strategy.old <- future::plan("list")
[17:44:54.479]                   options(future.plan = NULL)
[17:44:54.479]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:54.479]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:54.479]                 }
[17:44:54.479]                 ...future.workdir <- getwd()
[17:44:54.479]             }
[17:44:54.479]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:54.479]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:54.479]         }
[17:44:54.479]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:54.479]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:54.479]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:54.479]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:54.479]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:54.479]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:54.479]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:54.479]             base::names(...future.oldOptions))
[17:44:54.479]     }
[17:44:54.479]     if (FALSE) {
[17:44:54.479]     }
[17:44:54.479]     else {
[17:44:54.479]         if (TRUE) {
[17:44:54.479]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:54.479]                 open = "w")
[17:44:54.479]         }
[17:44:54.479]         else {
[17:44:54.479]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:54.479]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:54.479]         }
[17:44:54.479]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:54.479]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:54.479]             base::sink(type = "output", split = FALSE)
[17:44:54.479]             base::close(...future.stdout)
[17:44:54.479]         }, add = TRUE)
[17:44:54.479]     }
[17:44:54.479]     ...future.frame <- base::sys.nframe()
[17:44:54.479]     ...future.conditions <- base::list()
[17:44:54.479]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:54.479]     if (FALSE) {
[17:44:54.479]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:54.479]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:54.479]     }
[17:44:54.479]     ...future.result <- base::tryCatch({
[17:44:54.479]         base::withCallingHandlers({
[17:44:54.479]             ...future.value <- base::withVisible(base::local({
[17:44:54.479]                 ...future.makeSendCondition <- base::local({
[17:44:54.479]                   sendCondition <- NULL
[17:44:54.479]                   function(frame = 1L) {
[17:44:54.479]                     if (is.function(sendCondition)) 
[17:44:54.479]                       return(sendCondition)
[17:44:54.479]                     ns <- getNamespace("parallel")
[17:44:54.479]                     if (exists("sendData", mode = "function", 
[17:44:54.479]                       envir = ns)) {
[17:44:54.479]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:54.479]                         envir = ns)
[17:44:54.479]                       envir <- sys.frame(frame)
[17:44:54.479]                       master <- NULL
[17:44:54.479]                       while (!identical(envir, .GlobalEnv) && 
[17:44:54.479]                         !identical(envir, emptyenv())) {
[17:44:54.479]                         if (exists("master", mode = "list", envir = envir, 
[17:44:54.479]                           inherits = FALSE)) {
[17:44:54.479]                           master <- get("master", mode = "list", 
[17:44:54.479]                             envir = envir, inherits = FALSE)
[17:44:54.479]                           if (inherits(master, c("SOCKnode", 
[17:44:54.479]                             "SOCK0node"))) {
[17:44:54.479]                             sendCondition <<- function(cond) {
[17:44:54.479]                               data <- list(type = "VALUE", value = cond, 
[17:44:54.479]                                 success = TRUE)
[17:44:54.479]                               parallel_sendData(master, data)
[17:44:54.479]                             }
[17:44:54.479]                             return(sendCondition)
[17:44:54.479]                           }
[17:44:54.479]                         }
[17:44:54.479]                         frame <- frame + 1L
[17:44:54.479]                         envir <- sys.frame(frame)
[17:44:54.479]                       }
[17:44:54.479]                     }
[17:44:54.479]                     sendCondition <<- function(cond) NULL
[17:44:54.479]                   }
[17:44:54.479]                 })
[17:44:54.479]                 withCallingHandlers({
[17:44:54.479]                   NA
[17:44:54.479]                 }, immediateCondition = function(cond) {
[17:44:54.479]                   sendCondition <- ...future.makeSendCondition()
[17:44:54.479]                   sendCondition(cond)
[17:44:54.479]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:54.479]                   {
[17:44:54.479]                     inherits <- base::inherits
[17:44:54.479]                     invokeRestart <- base::invokeRestart
[17:44:54.479]                     is.null <- base::is.null
[17:44:54.479]                     muffled <- FALSE
[17:44:54.479]                     if (inherits(cond, "message")) {
[17:44:54.479]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:54.479]                       if (muffled) 
[17:44:54.479]                         invokeRestart("muffleMessage")
[17:44:54.479]                     }
[17:44:54.479]                     else if (inherits(cond, "warning")) {
[17:44:54.479]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:54.479]                       if (muffled) 
[17:44:54.479]                         invokeRestart("muffleWarning")
[17:44:54.479]                     }
[17:44:54.479]                     else if (inherits(cond, "condition")) {
[17:44:54.479]                       if (!is.null(pattern)) {
[17:44:54.479]                         computeRestarts <- base::computeRestarts
[17:44:54.479]                         grepl <- base::grepl
[17:44:54.479]                         restarts <- computeRestarts(cond)
[17:44:54.479]                         for (restart in restarts) {
[17:44:54.479]                           name <- restart$name
[17:44:54.479]                           if (is.null(name)) 
[17:44:54.479]                             next
[17:44:54.479]                           if (!grepl(pattern, name)) 
[17:44:54.479]                             next
[17:44:54.479]                           invokeRestart(restart)
[17:44:54.479]                           muffled <- TRUE
[17:44:54.479]                           break
[17:44:54.479]                         }
[17:44:54.479]                       }
[17:44:54.479]                     }
[17:44:54.479]                     invisible(muffled)
[17:44:54.479]                   }
[17:44:54.479]                   muffleCondition(cond)
[17:44:54.479]                 })
[17:44:54.479]             }))
[17:44:54.479]             future::FutureResult(value = ...future.value$value, 
[17:44:54.479]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:54.479]                   ...future.rng), globalenv = if (FALSE) 
[17:44:54.479]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:54.479]                     ...future.globalenv.names))
[17:44:54.479]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:54.479]         }, condition = base::local({
[17:44:54.479]             c <- base::c
[17:44:54.479]             inherits <- base::inherits
[17:44:54.479]             invokeRestart <- base::invokeRestart
[17:44:54.479]             length <- base::length
[17:44:54.479]             list <- base::list
[17:44:54.479]             seq.int <- base::seq.int
[17:44:54.479]             signalCondition <- base::signalCondition
[17:44:54.479]             sys.calls <- base::sys.calls
[17:44:54.479]             `[[` <- base::`[[`
[17:44:54.479]             `+` <- base::`+`
[17:44:54.479]             `<<-` <- base::`<<-`
[17:44:54.479]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:54.479]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:54.479]                   3L)]
[17:44:54.479]             }
[17:44:54.479]             function(cond) {
[17:44:54.479]                 is_error <- inherits(cond, "error")
[17:44:54.479]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:54.479]                   NULL)
[17:44:54.479]                 if (is_error) {
[17:44:54.479]                   sessionInformation <- function() {
[17:44:54.479]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:54.479]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:54.479]                       search = base::search(), system = base::Sys.info())
[17:44:54.479]                   }
[17:44:54.479]                   ...future.conditions[[length(...future.conditions) + 
[17:44:54.479]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:54.479]                     cond$call), session = sessionInformation(), 
[17:44:54.479]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:54.479]                   signalCondition(cond)
[17:44:54.479]                 }
[17:44:54.479]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:54.479]                 "immediateCondition"))) {
[17:44:54.479]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:54.479]                   ...future.conditions[[length(...future.conditions) + 
[17:44:54.479]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:54.479]                   if (TRUE && !signal) {
[17:44:54.479]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:54.479]                     {
[17:44:54.479]                       inherits <- base::inherits
[17:44:54.479]                       invokeRestart <- base::invokeRestart
[17:44:54.479]                       is.null <- base::is.null
[17:44:54.479]                       muffled <- FALSE
[17:44:54.479]                       if (inherits(cond, "message")) {
[17:44:54.479]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:54.479]                         if (muffled) 
[17:44:54.479]                           invokeRestart("muffleMessage")
[17:44:54.479]                       }
[17:44:54.479]                       else if (inherits(cond, "warning")) {
[17:44:54.479]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:54.479]                         if (muffled) 
[17:44:54.479]                           invokeRestart("muffleWarning")
[17:44:54.479]                       }
[17:44:54.479]                       else if (inherits(cond, "condition")) {
[17:44:54.479]                         if (!is.null(pattern)) {
[17:44:54.479]                           computeRestarts <- base::computeRestarts
[17:44:54.479]                           grepl <- base::grepl
[17:44:54.479]                           restarts <- computeRestarts(cond)
[17:44:54.479]                           for (restart in restarts) {
[17:44:54.479]                             name <- restart$name
[17:44:54.479]                             if (is.null(name)) 
[17:44:54.479]                               next
[17:44:54.479]                             if (!grepl(pattern, name)) 
[17:44:54.479]                               next
[17:44:54.479]                             invokeRestart(restart)
[17:44:54.479]                             muffled <- TRUE
[17:44:54.479]                             break
[17:44:54.479]                           }
[17:44:54.479]                         }
[17:44:54.479]                       }
[17:44:54.479]                       invisible(muffled)
[17:44:54.479]                     }
[17:44:54.479]                     muffleCondition(cond, pattern = "^muffle")
[17:44:54.479]                   }
[17:44:54.479]                 }
[17:44:54.479]                 else {
[17:44:54.479]                   if (TRUE) {
[17:44:54.479]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:54.479]                     {
[17:44:54.479]                       inherits <- base::inherits
[17:44:54.479]                       invokeRestart <- base::invokeRestart
[17:44:54.479]                       is.null <- base::is.null
[17:44:54.479]                       muffled <- FALSE
[17:44:54.479]                       if (inherits(cond, "message")) {
[17:44:54.479]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:54.479]                         if (muffled) 
[17:44:54.479]                           invokeRestart("muffleMessage")
[17:44:54.479]                       }
[17:44:54.479]                       else if (inherits(cond, "warning")) {
[17:44:54.479]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:54.479]                         if (muffled) 
[17:44:54.479]                           invokeRestart("muffleWarning")
[17:44:54.479]                       }
[17:44:54.479]                       else if (inherits(cond, "condition")) {
[17:44:54.479]                         if (!is.null(pattern)) {
[17:44:54.479]                           computeRestarts <- base::computeRestarts
[17:44:54.479]                           grepl <- base::grepl
[17:44:54.479]                           restarts <- computeRestarts(cond)
[17:44:54.479]                           for (restart in restarts) {
[17:44:54.479]                             name <- restart$name
[17:44:54.479]                             if (is.null(name)) 
[17:44:54.479]                               next
[17:44:54.479]                             if (!grepl(pattern, name)) 
[17:44:54.479]                               next
[17:44:54.479]                             invokeRestart(restart)
[17:44:54.479]                             muffled <- TRUE
[17:44:54.479]                             break
[17:44:54.479]                           }
[17:44:54.479]                         }
[17:44:54.479]                       }
[17:44:54.479]                       invisible(muffled)
[17:44:54.479]                     }
[17:44:54.479]                     muffleCondition(cond, pattern = "^muffle")
[17:44:54.479]                   }
[17:44:54.479]                 }
[17:44:54.479]             }
[17:44:54.479]         }))
[17:44:54.479]     }, error = function(ex) {
[17:44:54.479]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:54.479]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:54.479]                 ...future.rng), started = ...future.startTime, 
[17:44:54.479]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:54.479]             version = "1.8"), class = "FutureResult")
[17:44:54.479]     }, finally = {
[17:44:54.479]         if (!identical(...future.workdir, getwd())) 
[17:44:54.479]             setwd(...future.workdir)
[17:44:54.479]         {
[17:44:54.479]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:54.479]                 ...future.oldOptions$nwarnings <- NULL
[17:44:54.479]             }
[17:44:54.479]             base::options(...future.oldOptions)
[17:44:54.479]             if (.Platform$OS.type == "windows") {
[17:44:54.479]                 old_names <- names(...future.oldEnvVars)
[17:44:54.479]                 envs <- base::Sys.getenv()
[17:44:54.479]                 names <- names(envs)
[17:44:54.479]                 common <- intersect(names, old_names)
[17:44:54.479]                 added <- setdiff(names, old_names)
[17:44:54.479]                 removed <- setdiff(old_names, names)
[17:44:54.479]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:54.479]                   envs[common]]
[17:44:54.479]                 NAMES <- toupper(changed)
[17:44:54.479]                 args <- list()
[17:44:54.479]                 for (kk in seq_along(NAMES)) {
[17:44:54.479]                   name <- changed[[kk]]
[17:44:54.479]                   NAME <- NAMES[[kk]]
[17:44:54.479]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:54.479]                     next
[17:44:54.479]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:54.479]                 }
[17:44:54.479]                 NAMES <- toupper(added)
[17:44:54.479]                 for (kk in seq_along(NAMES)) {
[17:44:54.479]                   name <- added[[kk]]
[17:44:54.479]                   NAME <- NAMES[[kk]]
[17:44:54.479]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:54.479]                     next
[17:44:54.479]                   args[[name]] <- ""
[17:44:54.479]                 }
[17:44:54.479]                 NAMES <- toupper(removed)
[17:44:54.479]                 for (kk in seq_along(NAMES)) {
[17:44:54.479]                   name <- removed[[kk]]
[17:44:54.479]                   NAME <- NAMES[[kk]]
[17:44:54.479]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:54.479]                     next
[17:44:54.479]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:54.479]                 }
[17:44:54.479]                 if (length(args) > 0) 
[17:44:54.479]                   base::do.call(base::Sys.setenv, args = args)
[17:44:54.479]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:54.479]             }
[17:44:54.479]             else {
[17:44:54.479]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:54.479]             }
[17:44:54.479]             {
[17:44:54.479]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:54.479]                   0L) {
[17:44:54.479]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:54.479]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:54.479]                   base::options(opts)
[17:44:54.479]                 }
[17:44:54.479]                 {
[17:44:54.479]                   {
[17:44:54.479]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:54.479]                     NULL
[17:44:54.479]                   }
[17:44:54.479]                   options(future.plan = NULL)
[17:44:54.479]                   if (is.na(NA_character_)) 
[17:44:54.479]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:54.479]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:54.479]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:54.479]                     .init = FALSE)
[17:44:54.479]                 }
[17:44:54.479]             }
[17:44:54.479]         }
[17:44:54.479]     })
[17:44:54.479]     if (TRUE) {
[17:44:54.479]         base::sink(type = "output", split = FALSE)
[17:44:54.479]         if (TRUE) {
[17:44:54.479]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:54.479]         }
[17:44:54.479]         else {
[17:44:54.479]             ...future.result["stdout"] <- base::list(NULL)
[17:44:54.479]         }
[17:44:54.479]         base::close(...future.stdout)
[17:44:54.479]         ...future.stdout <- NULL
[17:44:54.479]     }
[17:44:54.479]     ...future.result$conditions <- ...future.conditions
[17:44:54.479]     ...future.result$finished <- base::Sys.time()
[17:44:54.479]     ...future.result
[17:44:54.479] }
[17:44:54.531] MultisessionFuture started
[17:44:54.531] result() for ClusterFuture ...
[17:44:54.532] receiveMessageFromWorker() for ClusterFuture ...
[17:44:54.532] - Validating connection of MultisessionFuture
[17:44:54.563] - received message: FutureResult
[17:44:54.563] - Received FutureResult
[17:44:54.563] - Erased future from FutureRegistry
[17:44:54.563] result() for ClusterFuture ...
[17:44:54.564] - result already collected: FutureResult
[17:44:54.564] result() for ClusterFuture ... done
[17:44:54.564] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:54.564] result() for ClusterFuture ... done
[17:44:54.564] result() for ClusterFuture ...
[17:44:54.564] - result already collected: FutureResult
[17:44:54.564] result() for ClusterFuture ... done
[17:44:54.564] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:44:54.568] plan(): nbrOfWorkers() = 2
[17:44:54.569] future_lapply() ...
[17:44:54.569] Generating random seeds ...
[17:44:54.569] Generating random seed streams for 5 elements ...
[17:44:54.570] Generating random seed streams for 5 elements ... DONE
[17:44:54.570] Generating random seeds ... DONE
[17:44:54.570] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:44:54.574] Number of chunks: 2
[17:44:54.574] getGlobalsAndPackagesXApply() ...
[17:44:54.575]  - future.globals: TRUE
[17:44:54.575] getGlobalsAndPackages() ...
[17:44:54.575] Searching for globals...
[17:44:54.576] - globals found: [2] ‘FUN’, ‘sample’
[17:44:54.577] Searching for globals ... DONE
[17:44:54.577] Resolving globals: FALSE
[17:44:54.577] The total size of the 1 globals is 616 bytes (616 bytes)
[17:44:54.578] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:44:54.578] - globals: [1] ‘FUN’
[17:44:54.578] 
[17:44:54.578] getGlobalsAndPackages() ... DONE
[17:44:54.578]  - globals found/used: [n=1] ‘FUN’
[17:44:54.578]  - needed namespaces: [n=0] 
[17:44:54.578] Finding globals ... DONE
[17:44:54.578]  - use_args: TRUE
[17:44:54.578]  - Getting '...' globals ...
[17:44:54.579] resolve() on list ...
[17:44:54.579]  recursive: 0
[17:44:54.579]  length: 1
[17:44:54.579]  elements: ‘...’
[17:44:54.579]  length: 0 (resolved future 1)
[17:44:54.580] resolve() on list ... DONE
[17:44:54.580]    - '...' content: [n=0] 
[17:44:54.580] List of 1
[17:44:54.580]  $ ...: list()
[17:44:54.580]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:54.580]  - attr(*, "where")=List of 1
[17:44:54.580]   ..$ ...:<environment: 0x5583890795a8> 
[17:44:54.580]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:54.580]  - attr(*, "resolved")= logi TRUE
[17:44:54.580]  - attr(*, "total_size")= num NA
[17:44:54.583]  - Getting '...' globals ... DONE
[17:44:54.583] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:44:54.583] List of 2
[17:44:54.583]  $ ...future.FUN:function (...)  
[17:44:54.583]  $ ...          : list()
[17:44:54.583]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:54.583]  - attr(*, "where")=List of 2
[17:44:54.583]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:44:54.583]   ..$ ...          :<environment: 0x5583890795a8> 
[17:44:54.583]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:54.583]  - attr(*, "resolved")= logi FALSE
[17:44:54.583]  - attr(*, "total_size")= num 616
[17:44:54.586] Packages to be attached in all futures: [n=0] 
[17:44:54.587] getGlobalsAndPackagesXApply() ... DONE
[17:44:54.587] Number of futures (= number of chunks): 2
[17:44:54.587] Launching 2 futures (chunks) ...
[17:44:54.587] Chunk #1 of 2 ...
[17:44:54.587]  - Finding globals in 'X' for chunk #1 ...
[17:44:54.587] getGlobalsAndPackages() ...
[17:44:54.588] Searching for globals...
[17:44:54.588] 
[17:44:54.588] Searching for globals ... DONE
[17:44:54.588] - globals: [0] <none>
[17:44:54.588] getGlobalsAndPackages() ... DONE
[17:44:54.588]    + additional globals found: [n=0] 
[17:44:54.588]    + additional namespaces needed: [n=0] 
[17:44:54.588]  - Finding globals in 'X' for chunk #1 ... DONE
[17:44:54.589]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:54.589]  - seeds: [2] <seeds>
[17:44:54.589]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:54.589] getGlobalsAndPackages() ...
[17:44:54.589] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:54.589] Resolving globals: FALSE
[17:44:54.589] Tweak future expression to call with '...' arguments ...
[17:44:54.590] {
[17:44:54.590]     do.call(function(...) {
[17:44:54.590]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:54.590]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:54.590]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:54.590]             on.exit(options(oopts), add = TRUE)
[17:44:54.590]         }
[17:44:54.590]         {
[17:44:54.590]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:54.590]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:54.590]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:54.590]                   envir = globalenv(), inherits = FALSE)
[17:44:54.590]                 ...future.FUN(...future.X_jj, ...)
[17:44:54.590]             })
[17:44:54.590]         }
[17:44:54.590]     }, args = future.call.arguments)
[17:44:54.590] }
[17:44:54.590] Tweak future expression to call with '...' arguments ... DONE
[17:44:54.590] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:54.590] 
[17:44:54.590] getGlobalsAndPackages() ... DONE
[17:44:54.591] run() for ‘Future’ ...
[17:44:54.591] - state: ‘created’
[17:44:54.591] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:44:54.605] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:54.605] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:44:54.606]   - Field: ‘node’
[17:44:54.606]   - Field: ‘label’
[17:44:54.606]   - Field: ‘local’
[17:44:54.606]   - Field: ‘owner’
[17:44:54.606]   - Field: ‘envir’
[17:44:54.606]   - Field: ‘workers’
[17:44:54.606]   - Field: ‘packages’
[17:44:54.606]   - Field: ‘gc’
[17:44:54.606]   - Field: ‘conditions’
[17:44:54.606]   - Field: ‘persistent’
[17:44:54.607]   - Field: ‘expr’
[17:44:54.607]   - Field: ‘uuid’
[17:44:54.607]   - Field: ‘seed’
[17:44:54.607]   - Field: ‘version’
[17:44:54.607]   - Field: ‘result’
[17:44:54.607]   - Field: ‘asynchronous’
[17:44:54.607]   - Field: ‘calls’
[17:44:54.607]   - Field: ‘globals’
[17:44:54.608]   - Field: ‘stdout’
[17:44:54.608]   - Field: ‘earlySignal’
[17:44:54.608]   - Field: ‘lazy’
[17:44:54.608]   - Field: ‘state’
[17:44:54.608] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:44:54.608] - Launch lazy future ...
[17:44:54.608] Packages needed by the future expression (n = 0): <none>
[17:44:54.609] Packages needed by future strategies (n = 0): <none>
[17:44:54.609] {
[17:44:54.609]     {
[17:44:54.609]         {
[17:44:54.609]             ...future.startTime <- base::Sys.time()
[17:44:54.609]             {
[17:44:54.609]                 {
[17:44:54.609]                   {
[17:44:54.609]                     {
[17:44:54.609]                       base::local({
[17:44:54.609]                         has_future <- base::requireNamespace("future", 
[17:44:54.609]                           quietly = TRUE)
[17:44:54.609]                         if (has_future) {
[17:44:54.609]                           ns <- base::getNamespace("future")
[17:44:54.609]                           version <- ns[[".package"]][["version"]]
[17:44:54.609]                           if (is.null(version)) 
[17:44:54.609]                             version <- utils::packageVersion("future")
[17:44:54.609]                         }
[17:44:54.609]                         else {
[17:44:54.609]                           version <- NULL
[17:44:54.609]                         }
[17:44:54.609]                         if (!has_future || version < "1.8.0") {
[17:44:54.609]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:54.609]                             "", base::R.version$version.string), 
[17:44:54.609]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:54.609]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:54.609]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:54.609]                               "release", "version")], collapse = " "), 
[17:44:54.609]                             hostname = base::Sys.info()[["nodename"]])
[17:44:54.609]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:54.609]                             info)
[17:44:54.609]                           info <- base::paste(info, collapse = "; ")
[17:44:54.609]                           if (!has_future) {
[17:44:54.609]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:54.609]                               info)
[17:44:54.609]                           }
[17:44:54.609]                           else {
[17:44:54.609]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:54.609]                               info, version)
[17:44:54.609]                           }
[17:44:54.609]                           base::stop(msg)
[17:44:54.609]                         }
[17:44:54.609]                       })
[17:44:54.609]                     }
[17:44:54.609]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:54.609]                     base::options(mc.cores = 1L)
[17:44:54.609]                   }
[17:44:54.609]                   ...future.strategy.old <- future::plan("list")
[17:44:54.609]                   options(future.plan = NULL)
[17:44:54.609]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:54.609]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:54.609]                 }
[17:44:54.609]                 ...future.workdir <- getwd()
[17:44:54.609]             }
[17:44:54.609]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:54.609]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:54.609]         }
[17:44:54.609]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:54.609]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:54.609]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:54.609]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:54.609]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:54.609]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:54.609]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:54.609]             base::names(...future.oldOptions))
[17:44:54.609]     }
[17:44:54.609]     if (FALSE) {
[17:44:54.609]     }
[17:44:54.609]     else {
[17:44:54.609]         if (TRUE) {
[17:44:54.609]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:54.609]                 open = "w")
[17:44:54.609]         }
[17:44:54.609]         else {
[17:44:54.609]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:54.609]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:54.609]         }
[17:44:54.609]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:54.609]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:54.609]             base::sink(type = "output", split = FALSE)
[17:44:54.609]             base::close(...future.stdout)
[17:44:54.609]         }, add = TRUE)
[17:44:54.609]     }
[17:44:54.609]     ...future.frame <- base::sys.nframe()
[17:44:54.609]     ...future.conditions <- base::list()
[17:44:54.609]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:54.609]     if (FALSE) {
[17:44:54.609]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:54.609]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:54.609]     }
[17:44:54.609]     ...future.result <- base::tryCatch({
[17:44:54.609]         base::withCallingHandlers({
[17:44:54.609]             ...future.value <- base::withVisible(base::local({
[17:44:54.609]                 ...future.makeSendCondition <- base::local({
[17:44:54.609]                   sendCondition <- NULL
[17:44:54.609]                   function(frame = 1L) {
[17:44:54.609]                     if (is.function(sendCondition)) 
[17:44:54.609]                       return(sendCondition)
[17:44:54.609]                     ns <- getNamespace("parallel")
[17:44:54.609]                     if (exists("sendData", mode = "function", 
[17:44:54.609]                       envir = ns)) {
[17:44:54.609]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:54.609]                         envir = ns)
[17:44:54.609]                       envir <- sys.frame(frame)
[17:44:54.609]                       master <- NULL
[17:44:54.609]                       while (!identical(envir, .GlobalEnv) && 
[17:44:54.609]                         !identical(envir, emptyenv())) {
[17:44:54.609]                         if (exists("master", mode = "list", envir = envir, 
[17:44:54.609]                           inherits = FALSE)) {
[17:44:54.609]                           master <- get("master", mode = "list", 
[17:44:54.609]                             envir = envir, inherits = FALSE)
[17:44:54.609]                           if (inherits(master, c("SOCKnode", 
[17:44:54.609]                             "SOCK0node"))) {
[17:44:54.609]                             sendCondition <<- function(cond) {
[17:44:54.609]                               data <- list(type = "VALUE", value = cond, 
[17:44:54.609]                                 success = TRUE)
[17:44:54.609]                               parallel_sendData(master, data)
[17:44:54.609]                             }
[17:44:54.609]                             return(sendCondition)
[17:44:54.609]                           }
[17:44:54.609]                         }
[17:44:54.609]                         frame <- frame + 1L
[17:44:54.609]                         envir <- sys.frame(frame)
[17:44:54.609]                       }
[17:44:54.609]                     }
[17:44:54.609]                     sendCondition <<- function(cond) NULL
[17:44:54.609]                   }
[17:44:54.609]                 })
[17:44:54.609]                 withCallingHandlers({
[17:44:54.609]                   {
[17:44:54.609]                     do.call(function(...) {
[17:44:54.609]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:54.609]                       if (!identical(...future.globals.maxSize.org, 
[17:44:54.609]                         ...future.globals.maxSize)) {
[17:44:54.609]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:54.609]                         on.exit(options(oopts), add = TRUE)
[17:44:54.609]                       }
[17:44:54.609]                       {
[17:44:54.609]                         lapply(seq_along(...future.elements_ii), 
[17:44:54.609]                           FUN = function(jj) {
[17:44:54.609]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:54.609]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:54.609]                               envir = globalenv(), inherits = FALSE)
[17:44:54.609]                             ...future.FUN(...future.X_jj, ...)
[17:44:54.609]                           })
[17:44:54.609]                       }
[17:44:54.609]                     }, args = future.call.arguments)
[17:44:54.609]                   }
[17:44:54.609]                 }, immediateCondition = function(cond) {
[17:44:54.609]                   sendCondition <- ...future.makeSendCondition()
[17:44:54.609]                   sendCondition(cond)
[17:44:54.609]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:54.609]                   {
[17:44:54.609]                     inherits <- base::inherits
[17:44:54.609]                     invokeRestart <- base::invokeRestart
[17:44:54.609]                     is.null <- base::is.null
[17:44:54.609]                     muffled <- FALSE
[17:44:54.609]                     if (inherits(cond, "message")) {
[17:44:54.609]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:54.609]                       if (muffled) 
[17:44:54.609]                         invokeRestart("muffleMessage")
[17:44:54.609]                     }
[17:44:54.609]                     else if (inherits(cond, "warning")) {
[17:44:54.609]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:54.609]                       if (muffled) 
[17:44:54.609]                         invokeRestart("muffleWarning")
[17:44:54.609]                     }
[17:44:54.609]                     else if (inherits(cond, "condition")) {
[17:44:54.609]                       if (!is.null(pattern)) {
[17:44:54.609]                         computeRestarts <- base::computeRestarts
[17:44:54.609]                         grepl <- base::grepl
[17:44:54.609]                         restarts <- computeRestarts(cond)
[17:44:54.609]                         for (restart in restarts) {
[17:44:54.609]                           name <- restart$name
[17:44:54.609]                           if (is.null(name)) 
[17:44:54.609]                             next
[17:44:54.609]                           if (!grepl(pattern, name)) 
[17:44:54.609]                             next
[17:44:54.609]                           invokeRestart(restart)
[17:44:54.609]                           muffled <- TRUE
[17:44:54.609]                           break
[17:44:54.609]                         }
[17:44:54.609]                       }
[17:44:54.609]                     }
[17:44:54.609]                     invisible(muffled)
[17:44:54.609]                   }
[17:44:54.609]                   muffleCondition(cond)
[17:44:54.609]                 })
[17:44:54.609]             }))
[17:44:54.609]             future::FutureResult(value = ...future.value$value, 
[17:44:54.609]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:54.609]                   ...future.rng), globalenv = if (FALSE) 
[17:44:54.609]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:54.609]                     ...future.globalenv.names))
[17:44:54.609]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:54.609]         }, condition = base::local({
[17:44:54.609]             c <- base::c
[17:44:54.609]             inherits <- base::inherits
[17:44:54.609]             invokeRestart <- base::invokeRestart
[17:44:54.609]             length <- base::length
[17:44:54.609]             list <- base::list
[17:44:54.609]             seq.int <- base::seq.int
[17:44:54.609]             signalCondition <- base::signalCondition
[17:44:54.609]             sys.calls <- base::sys.calls
[17:44:54.609]             `[[` <- base::`[[`
[17:44:54.609]             `+` <- base::`+`
[17:44:54.609]             `<<-` <- base::`<<-`
[17:44:54.609]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:54.609]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:54.609]                   3L)]
[17:44:54.609]             }
[17:44:54.609]             function(cond) {
[17:44:54.609]                 is_error <- inherits(cond, "error")
[17:44:54.609]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:54.609]                   NULL)
[17:44:54.609]                 if (is_error) {
[17:44:54.609]                   sessionInformation <- function() {
[17:44:54.609]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:54.609]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:54.609]                       search = base::search(), system = base::Sys.info())
[17:44:54.609]                   }
[17:44:54.609]                   ...future.conditions[[length(...future.conditions) + 
[17:44:54.609]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:54.609]                     cond$call), session = sessionInformation(), 
[17:44:54.609]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:54.609]                   signalCondition(cond)
[17:44:54.609]                 }
[17:44:54.609]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:54.609]                 "immediateCondition"))) {
[17:44:54.609]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:54.609]                   ...future.conditions[[length(...future.conditions) + 
[17:44:54.609]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:54.609]                   if (TRUE && !signal) {
[17:44:54.609]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:54.609]                     {
[17:44:54.609]                       inherits <- base::inherits
[17:44:54.609]                       invokeRestart <- base::invokeRestart
[17:44:54.609]                       is.null <- base::is.null
[17:44:54.609]                       muffled <- FALSE
[17:44:54.609]                       if (inherits(cond, "message")) {
[17:44:54.609]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:54.609]                         if (muffled) 
[17:44:54.609]                           invokeRestart("muffleMessage")
[17:44:54.609]                       }
[17:44:54.609]                       else if (inherits(cond, "warning")) {
[17:44:54.609]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:54.609]                         if (muffled) 
[17:44:54.609]                           invokeRestart("muffleWarning")
[17:44:54.609]                       }
[17:44:54.609]                       else if (inherits(cond, "condition")) {
[17:44:54.609]                         if (!is.null(pattern)) {
[17:44:54.609]                           computeRestarts <- base::computeRestarts
[17:44:54.609]                           grepl <- base::grepl
[17:44:54.609]                           restarts <- computeRestarts(cond)
[17:44:54.609]                           for (restart in restarts) {
[17:44:54.609]                             name <- restart$name
[17:44:54.609]                             if (is.null(name)) 
[17:44:54.609]                               next
[17:44:54.609]                             if (!grepl(pattern, name)) 
[17:44:54.609]                               next
[17:44:54.609]                             invokeRestart(restart)
[17:44:54.609]                             muffled <- TRUE
[17:44:54.609]                             break
[17:44:54.609]                           }
[17:44:54.609]                         }
[17:44:54.609]                       }
[17:44:54.609]                       invisible(muffled)
[17:44:54.609]                     }
[17:44:54.609]                     muffleCondition(cond, pattern = "^muffle")
[17:44:54.609]                   }
[17:44:54.609]                 }
[17:44:54.609]                 else {
[17:44:54.609]                   if (TRUE) {
[17:44:54.609]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:54.609]                     {
[17:44:54.609]                       inherits <- base::inherits
[17:44:54.609]                       invokeRestart <- base::invokeRestart
[17:44:54.609]                       is.null <- base::is.null
[17:44:54.609]                       muffled <- FALSE
[17:44:54.609]                       if (inherits(cond, "message")) {
[17:44:54.609]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:54.609]                         if (muffled) 
[17:44:54.609]                           invokeRestart("muffleMessage")
[17:44:54.609]                       }
[17:44:54.609]                       else if (inherits(cond, "warning")) {
[17:44:54.609]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:54.609]                         if (muffled) 
[17:44:54.609]                           invokeRestart("muffleWarning")
[17:44:54.609]                       }
[17:44:54.609]                       else if (inherits(cond, "condition")) {
[17:44:54.609]                         if (!is.null(pattern)) {
[17:44:54.609]                           computeRestarts <- base::computeRestarts
[17:44:54.609]                           grepl <- base::grepl
[17:44:54.609]                           restarts <- computeRestarts(cond)
[17:44:54.609]                           for (restart in restarts) {
[17:44:54.609]                             name <- restart$name
[17:44:54.609]                             if (is.null(name)) 
[17:44:54.609]                               next
[17:44:54.609]                             if (!grepl(pattern, name)) 
[17:44:54.609]                               next
[17:44:54.609]                             invokeRestart(restart)
[17:44:54.609]                             muffled <- TRUE
[17:44:54.609]                             break
[17:44:54.609]                           }
[17:44:54.609]                         }
[17:44:54.609]                       }
[17:44:54.609]                       invisible(muffled)
[17:44:54.609]                     }
[17:44:54.609]                     muffleCondition(cond, pattern = "^muffle")
[17:44:54.609]                   }
[17:44:54.609]                 }
[17:44:54.609]             }
[17:44:54.609]         }))
[17:44:54.609]     }, error = function(ex) {
[17:44:54.609]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:54.609]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:54.609]                 ...future.rng), started = ...future.startTime, 
[17:44:54.609]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:54.609]             version = "1.8"), class = "FutureResult")
[17:44:54.609]     }, finally = {
[17:44:54.609]         if (!identical(...future.workdir, getwd())) 
[17:44:54.609]             setwd(...future.workdir)
[17:44:54.609]         {
[17:44:54.609]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:54.609]                 ...future.oldOptions$nwarnings <- NULL
[17:44:54.609]             }
[17:44:54.609]             base::options(...future.oldOptions)
[17:44:54.609]             if (.Platform$OS.type == "windows") {
[17:44:54.609]                 old_names <- names(...future.oldEnvVars)
[17:44:54.609]                 envs <- base::Sys.getenv()
[17:44:54.609]                 names <- names(envs)
[17:44:54.609]                 common <- intersect(names, old_names)
[17:44:54.609]                 added <- setdiff(names, old_names)
[17:44:54.609]                 removed <- setdiff(old_names, names)
[17:44:54.609]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:54.609]                   envs[common]]
[17:44:54.609]                 NAMES <- toupper(changed)
[17:44:54.609]                 args <- list()
[17:44:54.609]                 for (kk in seq_along(NAMES)) {
[17:44:54.609]                   name <- changed[[kk]]
[17:44:54.609]                   NAME <- NAMES[[kk]]
[17:44:54.609]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:54.609]                     next
[17:44:54.609]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:54.609]                 }
[17:44:54.609]                 NAMES <- toupper(added)
[17:44:54.609]                 for (kk in seq_along(NAMES)) {
[17:44:54.609]                   name <- added[[kk]]
[17:44:54.609]                   NAME <- NAMES[[kk]]
[17:44:54.609]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:54.609]                     next
[17:44:54.609]                   args[[name]] <- ""
[17:44:54.609]                 }
[17:44:54.609]                 NAMES <- toupper(removed)
[17:44:54.609]                 for (kk in seq_along(NAMES)) {
[17:44:54.609]                   name <- removed[[kk]]
[17:44:54.609]                   NAME <- NAMES[[kk]]
[17:44:54.609]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:54.609]                     next
[17:44:54.609]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:54.609]                 }
[17:44:54.609]                 if (length(args) > 0) 
[17:44:54.609]                   base::do.call(base::Sys.setenv, args = args)
[17:44:54.609]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:54.609]             }
[17:44:54.609]             else {
[17:44:54.609]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:54.609]             }
[17:44:54.609]             {
[17:44:54.609]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:54.609]                   0L) {
[17:44:54.609]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:54.609]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:54.609]                   base::options(opts)
[17:44:54.609]                 }
[17:44:54.609]                 {
[17:44:54.609]                   {
[17:44:54.609]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:54.609]                     NULL
[17:44:54.609]                   }
[17:44:54.609]                   options(future.plan = NULL)
[17:44:54.609]                   if (is.na(NA_character_)) 
[17:44:54.609]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:54.609]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:54.609]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:54.609]                     .init = FALSE)
[17:44:54.609]                 }
[17:44:54.609]             }
[17:44:54.609]         }
[17:44:54.609]     })
[17:44:54.609]     if (TRUE) {
[17:44:54.609]         base::sink(type = "output", split = FALSE)
[17:44:54.609]         if (TRUE) {
[17:44:54.609]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:54.609]         }
[17:44:54.609]         else {
[17:44:54.609]             ...future.result["stdout"] <- base::list(NULL)
[17:44:54.609]         }
[17:44:54.609]         base::close(...future.stdout)
[17:44:54.609]         ...future.stdout <- NULL
[17:44:54.609]     }
[17:44:54.609]     ...future.result$conditions <- ...future.conditions
[17:44:54.609]     ...future.result$finished <- base::Sys.time()
[17:44:54.609]     ...future.result
[17:44:54.609] }
[17:44:54.612] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[17:44:54.612] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[17:44:54.613] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[17:44:54.613] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:44:54.613] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:44:54.614] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:44:54.614] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:44:54.614] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:44:54.615] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:44:54.615] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:44:54.615] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:44:54.615] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[17:44:54.616] MultisessionFuture started
[17:44:54.616] - Launch lazy future ... done
[17:44:54.616] run() for ‘MultisessionFuture’ ... done
[17:44:54.616] Created future:
[17:44:54.616] MultisessionFuture:
[17:44:54.616] Label: ‘future_replicate-1’
[17:44:54.616] Expression:
[17:44:54.616] {
[17:44:54.616]     do.call(function(...) {
[17:44:54.616]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:54.616]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:54.616]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:54.616]             on.exit(options(oopts), add = TRUE)
[17:44:54.616]         }
[17:44:54.616]         {
[17:44:54.616]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:54.616]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:54.616]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:54.616]                   envir = globalenv(), inherits = FALSE)
[17:44:54.616]                 ...future.FUN(...future.X_jj, ...)
[17:44:54.616]             })
[17:44:54.616]         }
[17:44:54.616]     }, args = future.call.arguments)
[17:44:54.616] }
[17:44:54.616] Lazy evaluation: FALSE
[17:44:54.616] Asynchronous evaluation: TRUE
[17:44:54.616] Local evaluation: TRUE
[17:44:54.616] Environment: R_GlobalEnv
[17:44:54.616] Capture standard output: TRUE
[17:44:54.616] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:54.616] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:54.616] Packages: <none>
[17:44:54.616] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:54.616] Resolved: FALSE
[17:44:54.616] Value: <not collected>
[17:44:54.616] Conditions captured: <none>
[17:44:54.616] Early signaling: FALSE
[17:44:54.616] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:54.616] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:54.628] Chunk #1 of 2 ... DONE
[17:44:54.628] Chunk #2 of 2 ...
[17:44:54.629]  - Finding globals in 'X' for chunk #2 ...
[17:44:54.629] getGlobalsAndPackages() ...
[17:44:54.629] Searching for globals...
[17:44:54.629] 
[17:44:54.629] Searching for globals ... DONE
[17:44:54.629] - globals: [0] <none>
[17:44:54.629] getGlobalsAndPackages() ... DONE
[17:44:54.630]    + additional globals found: [n=0] 
[17:44:54.630]    + additional namespaces needed: [n=0] 
[17:44:54.630]  - Finding globals in 'X' for chunk #2 ... DONE
[17:44:54.630]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:54.630]  - seeds: [3] <seeds>
[17:44:54.630]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:54.630] getGlobalsAndPackages() ...
[17:44:54.630] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:54.631] Resolving globals: FALSE
[17:44:54.631] Tweak future expression to call with '...' arguments ...
[17:44:54.631] {
[17:44:54.631]     do.call(function(...) {
[17:44:54.631]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:54.631]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:54.631]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:54.631]             on.exit(options(oopts), add = TRUE)
[17:44:54.631]         }
[17:44:54.631]         {
[17:44:54.631]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:54.631]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:54.631]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:54.631]                   envir = globalenv(), inherits = FALSE)
[17:44:54.631]                 ...future.FUN(...future.X_jj, ...)
[17:44:54.631]             })
[17:44:54.631]         }
[17:44:54.631]     }, args = future.call.arguments)
[17:44:54.631] }
[17:44:54.631] Tweak future expression to call with '...' arguments ... DONE
[17:44:54.632] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:54.632] 
[17:44:54.632] getGlobalsAndPackages() ... DONE
[17:44:54.632] run() for ‘Future’ ...
[17:44:54.632] - state: ‘created’
[17:44:54.632] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:44:54.647] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:54.648] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:44:54.648]   - Field: ‘node’
[17:44:54.648]   - Field: ‘label’
[17:44:54.648]   - Field: ‘local’
[17:44:54.648]   - Field: ‘owner’
[17:44:54.648]   - Field: ‘envir’
[17:44:54.648]   - Field: ‘workers’
[17:44:54.648]   - Field: ‘packages’
[17:44:54.648]   - Field: ‘gc’
[17:44:54.648]   - Field: ‘conditions’
[17:44:54.649]   - Field: ‘persistent’
[17:44:54.649]   - Field: ‘expr’
[17:44:54.649]   - Field: ‘uuid’
[17:44:54.649]   - Field: ‘seed’
[17:44:54.649]   - Field: ‘version’
[17:44:54.649]   - Field: ‘result’
[17:44:54.649]   - Field: ‘asynchronous’
[17:44:54.649]   - Field: ‘calls’
[17:44:54.649]   - Field: ‘globals’
[17:44:54.650]   - Field: ‘stdout’
[17:44:54.650]   - Field: ‘earlySignal’
[17:44:54.650]   - Field: ‘lazy’
[17:44:54.650]   - Field: ‘state’
[17:44:54.650] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:44:54.650] - Launch lazy future ...
[17:44:54.650] Packages needed by the future expression (n = 0): <none>
[17:44:54.651] Packages needed by future strategies (n = 0): <none>
[17:44:54.651] {
[17:44:54.651]     {
[17:44:54.651]         {
[17:44:54.651]             ...future.startTime <- base::Sys.time()
[17:44:54.651]             {
[17:44:54.651]                 {
[17:44:54.651]                   {
[17:44:54.651]                     {
[17:44:54.651]                       base::local({
[17:44:54.651]                         has_future <- base::requireNamespace("future", 
[17:44:54.651]                           quietly = TRUE)
[17:44:54.651]                         if (has_future) {
[17:44:54.651]                           ns <- base::getNamespace("future")
[17:44:54.651]                           version <- ns[[".package"]][["version"]]
[17:44:54.651]                           if (is.null(version)) 
[17:44:54.651]                             version <- utils::packageVersion("future")
[17:44:54.651]                         }
[17:44:54.651]                         else {
[17:44:54.651]                           version <- NULL
[17:44:54.651]                         }
[17:44:54.651]                         if (!has_future || version < "1.8.0") {
[17:44:54.651]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:54.651]                             "", base::R.version$version.string), 
[17:44:54.651]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:54.651]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:54.651]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:54.651]                               "release", "version")], collapse = " "), 
[17:44:54.651]                             hostname = base::Sys.info()[["nodename"]])
[17:44:54.651]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:54.651]                             info)
[17:44:54.651]                           info <- base::paste(info, collapse = "; ")
[17:44:54.651]                           if (!has_future) {
[17:44:54.651]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:54.651]                               info)
[17:44:54.651]                           }
[17:44:54.651]                           else {
[17:44:54.651]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:54.651]                               info, version)
[17:44:54.651]                           }
[17:44:54.651]                           base::stop(msg)
[17:44:54.651]                         }
[17:44:54.651]                       })
[17:44:54.651]                     }
[17:44:54.651]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:54.651]                     base::options(mc.cores = 1L)
[17:44:54.651]                   }
[17:44:54.651]                   ...future.strategy.old <- future::plan("list")
[17:44:54.651]                   options(future.plan = NULL)
[17:44:54.651]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:54.651]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:54.651]                 }
[17:44:54.651]                 ...future.workdir <- getwd()
[17:44:54.651]             }
[17:44:54.651]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:54.651]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:54.651]         }
[17:44:54.651]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:54.651]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:54.651]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:54.651]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:54.651]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:54.651]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:54.651]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:54.651]             base::names(...future.oldOptions))
[17:44:54.651]     }
[17:44:54.651]     if (FALSE) {
[17:44:54.651]     }
[17:44:54.651]     else {
[17:44:54.651]         if (TRUE) {
[17:44:54.651]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:54.651]                 open = "w")
[17:44:54.651]         }
[17:44:54.651]         else {
[17:44:54.651]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:54.651]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:54.651]         }
[17:44:54.651]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:54.651]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:54.651]             base::sink(type = "output", split = FALSE)
[17:44:54.651]             base::close(...future.stdout)
[17:44:54.651]         }, add = TRUE)
[17:44:54.651]     }
[17:44:54.651]     ...future.frame <- base::sys.nframe()
[17:44:54.651]     ...future.conditions <- base::list()
[17:44:54.651]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:54.651]     if (FALSE) {
[17:44:54.651]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:54.651]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:54.651]     }
[17:44:54.651]     ...future.result <- base::tryCatch({
[17:44:54.651]         base::withCallingHandlers({
[17:44:54.651]             ...future.value <- base::withVisible(base::local({
[17:44:54.651]                 ...future.makeSendCondition <- base::local({
[17:44:54.651]                   sendCondition <- NULL
[17:44:54.651]                   function(frame = 1L) {
[17:44:54.651]                     if (is.function(sendCondition)) 
[17:44:54.651]                       return(sendCondition)
[17:44:54.651]                     ns <- getNamespace("parallel")
[17:44:54.651]                     if (exists("sendData", mode = "function", 
[17:44:54.651]                       envir = ns)) {
[17:44:54.651]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:54.651]                         envir = ns)
[17:44:54.651]                       envir <- sys.frame(frame)
[17:44:54.651]                       master <- NULL
[17:44:54.651]                       while (!identical(envir, .GlobalEnv) && 
[17:44:54.651]                         !identical(envir, emptyenv())) {
[17:44:54.651]                         if (exists("master", mode = "list", envir = envir, 
[17:44:54.651]                           inherits = FALSE)) {
[17:44:54.651]                           master <- get("master", mode = "list", 
[17:44:54.651]                             envir = envir, inherits = FALSE)
[17:44:54.651]                           if (inherits(master, c("SOCKnode", 
[17:44:54.651]                             "SOCK0node"))) {
[17:44:54.651]                             sendCondition <<- function(cond) {
[17:44:54.651]                               data <- list(type = "VALUE", value = cond, 
[17:44:54.651]                                 success = TRUE)
[17:44:54.651]                               parallel_sendData(master, data)
[17:44:54.651]                             }
[17:44:54.651]                             return(sendCondition)
[17:44:54.651]                           }
[17:44:54.651]                         }
[17:44:54.651]                         frame <- frame + 1L
[17:44:54.651]                         envir <- sys.frame(frame)
[17:44:54.651]                       }
[17:44:54.651]                     }
[17:44:54.651]                     sendCondition <<- function(cond) NULL
[17:44:54.651]                   }
[17:44:54.651]                 })
[17:44:54.651]                 withCallingHandlers({
[17:44:54.651]                   {
[17:44:54.651]                     do.call(function(...) {
[17:44:54.651]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:54.651]                       if (!identical(...future.globals.maxSize.org, 
[17:44:54.651]                         ...future.globals.maxSize)) {
[17:44:54.651]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:54.651]                         on.exit(options(oopts), add = TRUE)
[17:44:54.651]                       }
[17:44:54.651]                       {
[17:44:54.651]                         lapply(seq_along(...future.elements_ii), 
[17:44:54.651]                           FUN = function(jj) {
[17:44:54.651]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:54.651]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:54.651]                               envir = globalenv(), inherits = FALSE)
[17:44:54.651]                             ...future.FUN(...future.X_jj, ...)
[17:44:54.651]                           })
[17:44:54.651]                       }
[17:44:54.651]                     }, args = future.call.arguments)
[17:44:54.651]                   }
[17:44:54.651]                 }, immediateCondition = function(cond) {
[17:44:54.651]                   sendCondition <- ...future.makeSendCondition()
[17:44:54.651]                   sendCondition(cond)
[17:44:54.651]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:54.651]                   {
[17:44:54.651]                     inherits <- base::inherits
[17:44:54.651]                     invokeRestart <- base::invokeRestart
[17:44:54.651]                     is.null <- base::is.null
[17:44:54.651]                     muffled <- FALSE
[17:44:54.651]                     if (inherits(cond, "message")) {
[17:44:54.651]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:54.651]                       if (muffled) 
[17:44:54.651]                         invokeRestart("muffleMessage")
[17:44:54.651]                     }
[17:44:54.651]                     else if (inherits(cond, "warning")) {
[17:44:54.651]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:54.651]                       if (muffled) 
[17:44:54.651]                         invokeRestart("muffleWarning")
[17:44:54.651]                     }
[17:44:54.651]                     else if (inherits(cond, "condition")) {
[17:44:54.651]                       if (!is.null(pattern)) {
[17:44:54.651]                         computeRestarts <- base::computeRestarts
[17:44:54.651]                         grepl <- base::grepl
[17:44:54.651]                         restarts <- computeRestarts(cond)
[17:44:54.651]                         for (restart in restarts) {
[17:44:54.651]                           name <- restart$name
[17:44:54.651]                           if (is.null(name)) 
[17:44:54.651]                             next
[17:44:54.651]                           if (!grepl(pattern, name)) 
[17:44:54.651]                             next
[17:44:54.651]                           invokeRestart(restart)
[17:44:54.651]                           muffled <- TRUE
[17:44:54.651]                           break
[17:44:54.651]                         }
[17:44:54.651]                       }
[17:44:54.651]                     }
[17:44:54.651]                     invisible(muffled)
[17:44:54.651]                   }
[17:44:54.651]                   muffleCondition(cond)
[17:44:54.651]                 })
[17:44:54.651]             }))
[17:44:54.651]             future::FutureResult(value = ...future.value$value, 
[17:44:54.651]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:54.651]                   ...future.rng), globalenv = if (FALSE) 
[17:44:54.651]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:54.651]                     ...future.globalenv.names))
[17:44:54.651]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:54.651]         }, condition = base::local({
[17:44:54.651]             c <- base::c
[17:44:54.651]             inherits <- base::inherits
[17:44:54.651]             invokeRestart <- base::invokeRestart
[17:44:54.651]             length <- base::length
[17:44:54.651]             list <- base::list
[17:44:54.651]             seq.int <- base::seq.int
[17:44:54.651]             signalCondition <- base::signalCondition
[17:44:54.651]             sys.calls <- base::sys.calls
[17:44:54.651]             `[[` <- base::`[[`
[17:44:54.651]             `+` <- base::`+`
[17:44:54.651]             `<<-` <- base::`<<-`
[17:44:54.651]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:54.651]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:54.651]                   3L)]
[17:44:54.651]             }
[17:44:54.651]             function(cond) {
[17:44:54.651]                 is_error <- inherits(cond, "error")
[17:44:54.651]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:54.651]                   NULL)
[17:44:54.651]                 if (is_error) {
[17:44:54.651]                   sessionInformation <- function() {
[17:44:54.651]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:54.651]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:54.651]                       search = base::search(), system = base::Sys.info())
[17:44:54.651]                   }
[17:44:54.651]                   ...future.conditions[[length(...future.conditions) + 
[17:44:54.651]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:54.651]                     cond$call), session = sessionInformation(), 
[17:44:54.651]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:54.651]                   signalCondition(cond)
[17:44:54.651]                 }
[17:44:54.651]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:54.651]                 "immediateCondition"))) {
[17:44:54.651]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:54.651]                   ...future.conditions[[length(...future.conditions) + 
[17:44:54.651]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:54.651]                   if (TRUE && !signal) {
[17:44:54.651]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:54.651]                     {
[17:44:54.651]                       inherits <- base::inherits
[17:44:54.651]                       invokeRestart <- base::invokeRestart
[17:44:54.651]                       is.null <- base::is.null
[17:44:54.651]                       muffled <- FALSE
[17:44:54.651]                       if (inherits(cond, "message")) {
[17:44:54.651]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:54.651]                         if (muffled) 
[17:44:54.651]                           invokeRestart("muffleMessage")
[17:44:54.651]                       }
[17:44:54.651]                       else if (inherits(cond, "warning")) {
[17:44:54.651]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:54.651]                         if (muffled) 
[17:44:54.651]                           invokeRestart("muffleWarning")
[17:44:54.651]                       }
[17:44:54.651]                       else if (inherits(cond, "condition")) {
[17:44:54.651]                         if (!is.null(pattern)) {
[17:44:54.651]                           computeRestarts <- base::computeRestarts
[17:44:54.651]                           grepl <- base::grepl
[17:44:54.651]                           restarts <- computeRestarts(cond)
[17:44:54.651]                           for (restart in restarts) {
[17:44:54.651]                             name <- restart$name
[17:44:54.651]                             if (is.null(name)) 
[17:44:54.651]                               next
[17:44:54.651]                             if (!grepl(pattern, name)) 
[17:44:54.651]                               next
[17:44:54.651]                             invokeRestart(restart)
[17:44:54.651]                             muffled <- TRUE
[17:44:54.651]                             break
[17:44:54.651]                           }
[17:44:54.651]                         }
[17:44:54.651]                       }
[17:44:54.651]                       invisible(muffled)
[17:44:54.651]                     }
[17:44:54.651]                     muffleCondition(cond, pattern = "^muffle")
[17:44:54.651]                   }
[17:44:54.651]                 }
[17:44:54.651]                 else {
[17:44:54.651]                   if (TRUE) {
[17:44:54.651]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:54.651]                     {
[17:44:54.651]                       inherits <- base::inherits
[17:44:54.651]                       invokeRestart <- base::invokeRestart
[17:44:54.651]                       is.null <- base::is.null
[17:44:54.651]                       muffled <- FALSE
[17:44:54.651]                       if (inherits(cond, "message")) {
[17:44:54.651]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:54.651]                         if (muffled) 
[17:44:54.651]                           invokeRestart("muffleMessage")
[17:44:54.651]                       }
[17:44:54.651]                       else if (inherits(cond, "warning")) {
[17:44:54.651]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:54.651]                         if (muffled) 
[17:44:54.651]                           invokeRestart("muffleWarning")
[17:44:54.651]                       }
[17:44:54.651]                       else if (inherits(cond, "condition")) {
[17:44:54.651]                         if (!is.null(pattern)) {
[17:44:54.651]                           computeRestarts <- base::computeRestarts
[17:44:54.651]                           grepl <- base::grepl
[17:44:54.651]                           restarts <- computeRestarts(cond)
[17:44:54.651]                           for (restart in restarts) {
[17:44:54.651]                             name <- restart$name
[17:44:54.651]                             if (is.null(name)) 
[17:44:54.651]                               next
[17:44:54.651]                             if (!grepl(pattern, name)) 
[17:44:54.651]                               next
[17:44:54.651]                             invokeRestart(restart)
[17:44:54.651]                             muffled <- TRUE
[17:44:54.651]                             break
[17:44:54.651]                           }
[17:44:54.651]                         }
[17:44:54.651]                       }
[17:44:54.651]                       invisible(muffled)
[17:44:54.651]                     }
[17:44:54.651]                     muffleCondition(cond, pattern = "^muffle")
[17:44:54.651]                   }
[17:44:54.651]                 }
[17:44:54.651]             }
[17:44:54.651]         }))
[17:44:54.651]     }, error = function(ex) {
[17:44:54.651]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:54.651]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:54.651]                 ...future.rng), started = ...future.startTime, 
[17:44:54.651]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:54.651]             version = "1.8"), class = "FutureResult")
[17:44:54.651]     }, finally = {
[17:44:54.651]         if (!identical(...future.workdir, getwd())) 
[17:44:54.651]             setwd(...future.workdir)
[17:44:54.651]         {
[17:44:54.651]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:54.651]                 ...future.oldOptions$nwarnings <- NULL
[17:44:54.651]             }
[17:44:54.651]             base::options(...future.oldOptions)
[17:44:54.651]             if (.Platform$OS.type == "windows") {
[17:44:54.651]                 old_names <- names(...future.oldEnvVars)
[17:44:54.651]                 envs <- base::Sys.getenv()
[17:44:54.651]                 names <- names(envs)
[17:44:54.651]                 common <- intersect(names, old_names)
[17:44:54.651]                 added <- setdiff(names, old_names)
[17:44:54.651]                 removed <- setdiff(old_names, names)
[17:44:54.651]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:54.651]                   envs[common]]
[17:44:54.651]                 NAMES <- toupper(changed)
[17:44:54.651]                 args <- list()
[17:44:54.651]                 for (kk in seq_along(NAMES)) {
[17:44:54.651]                   name <- changed[[kk]]
[17:44:54.651]                   NAME <- NAMES[[kk]]
[17:44:54.651]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:54.651]                     next
[17:44:54.651]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:54.651]                 }
[17:44:54.651]                 NAMES <- toupper(added)
[17:44:54.651]                 for (kk in seq_along(NAMES)) {
[17:44:54.651]                   name <- added[[kk]]
[17:44:54.651]                   NAME <- NAMES[[kk]]
[17:44:54.651]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:54.651]                     next
[17:44:54.651]                   args[[name]] <- ""
[17:44:54.651]                 }
[17:44:54.651]                 NAMES <- toupper(removed)
[17:44:54.651]                 for (kk in seq_along(NAMES)) {
[17:44:54.651]                   name <- removed[[kk]]
[17:44:54.651]                   NAME <- NAMES[[kk]]
[17:44:54.651]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:54.651]                     next
[17:44:54.651]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:54.651]                 }
[17:44:54.651]                 if (length(args) > 0) 
[17:44:54.651]                   base::do.call(base::Sys.setenv, args = args)
[17:44:54.651]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:54.651]             }
[17:44:54.651]             else {
[17:44:54.651]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:54.651]             }
[17:44:54.651]             {
[17:44:54.651]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:54.651]                   0L) {
[17:44:54.651]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:54.651]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:54.651]                   base::options(opts)
[17:44:54.651]                 }
[17:44:54.651]                 {
[17:44:54.651]                   {
[17:44:54.651]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:54.651]                     NULL
[17:44:54.651]                   }
[17:44:54.651]                   options(future.plan = NULL)
[17:44:54.651]                   if (is.na(NA_character_)) 
[17:44:54.651]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:54.651]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:54.651]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:54.651]                     .init = FALSE)
[17:44:54.651]                 }
[17:44:54.651]             }
[17:44:54.651]         }
[17:44:54.651]     })
[17:44:54.651]     if (TRUE) {
[17:44:54.651]         base::sink(type = "output", split = FALSE)
[17:44:54.651]         if (TRUE) {
[17:44:54.651]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:54.651]         }
[17:44:54.651]         else {
[17:44:54.651]             ...future.result["stdout"] <- base::list(NULL)
[17:44:54.651]         }
[17:44:54.651]         base::close(...future.stdout)
[17:44:54.651]         ...future.stdout <- NULL
[17:44:54.651]     }
[17:44:54.651]     ...future.result$conditions <- ...future.conditions
[17:44:54.651]     ...future.result$finished <- base::Sys.time()
[17:44:54.651]     ...future.result
[17:44:54.651] }
[17:44:54.703] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[17:44:54.703] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[17:44:54.704] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[17:44:54.704] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:44:54.705] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:44:54.705] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:44:54.705] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:44:54.705] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:44:54.706] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:44:54.706] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:44:54.706] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:44:54.707] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[17:44:54.707] MultisessionFuture started
[17:44:54.707] - Launch lazy future ... done
[17:44:54.708] run() for ‘MultisessionFuture’ ... done
[17:44:54.708] Created future:
[17:44:54.708] MultisessionFuture:
[17:44:54.708] Label: ‘future_replicate-2’
[17:44:54.708] Expression:
[17:44:54.708] {
[17:44:54.708]     do.call(function(...) {
[17:44:54.708]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:54.708]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:54.708]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:54.708]             on.exit(options(oopts), add = TRUE)
[17:44:54.708]         }
[17:44:54.708]         {
[17:44:54.708]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:54.708]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:54.708]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:54.708]                   envir = globalenv(), inherits = FALSE)
[17:44:54.708]                 ...future.FUN(...future.X_jj, ...)
[17:44:54.708]             })
[17:44:54.708]         }
[17:44:54.708]     }, args = future.call.arguments)
[17:44:54.708] }
[17:44:54.708] Lazy evaluation: FALSE
[17:44:54.708] Asynchronous evaluation: TRUE
[17:44:54.708] Local evaluation: TRUE
[17:44:54.708] Environment: R_GlobalEnv
[17:44:54.708] Capture standard output: TRUE
[17:44:54.708] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:54.708] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:54.708] Packages: <none>
[17:44:54.708] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:54.708] Resolved: FALSE
[17:44:54.708] Value: <not collected>
[17:44:54.708] Conditions captured: <none>
[17:44:54.708] Early signaling: FALSE
[17:44:54.708] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:54.708] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:54.720] Chunk #2 of 2 ... DONE
[17:44:54.720] Launching 2 futures (chunks) ... DONE
[17:44:54.720] Resolving 2 futures (chunks) ...
[17:44:54.720] resolve() on list ...
[17:44:54.720]  recursive: 0
[17:44:54.720]  length: 2
[17:44:54.721] 
[17:44:54.721] receiveMessageFromWorker() for ClusterFuture ...
[17:44:54.721] - Validating connection of MultisessionFuture
[17:44:54.721] - received message: FutureResult
[17:44:54.722] - Received FutureResult
[17:44:54.722] - Erased future from FutureRegistry
[17:44:54.722] result() for ClusterFuture ...
[17:44:54.722] - result already collected: FutureResult
[17:44:54.722] result() for ClusterFuture ... done
[17:44:54.722] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:54.722] Future #1
[17:44:54.725] result() for ClusterFuture ...
[17:44:54.725] - result already collected: FutureResult
[17:44:54.725] result() for ClusterFuture ... done
[17:44:54.725] result() for ClusterFuture ...
[17:44:54.725] - result already collected: FutureResult
[17:44:54.725] result() for ClusterFuture ... done
[17:44:54.725] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:44:54.725] - nx: 2
[17:44:54.725] - relay: TRUE
[17:44:54.725] - stdout: TRUE
[17:44:54.725] - signal: TRUE
[17:44:54.726] - resignal: FALSE
[17:44:54.726] - force: TRUE
[17:44:54.726] - relayed: [n=2] FALSE, FALSE
[17:44:54.726] - queued futures: [n=2] FALSE, FALSE
[17:44:54.726]  - until=1
[17:44:54.726]  - relaying element #1
[17:44:54.726] result() for ClusterFuture ...
[17:44:54.726] - result already collected: FutureResult
[17:44:54.726] result() for ClusterFuture ... done
[17:44:54.726] result() for ClusterFuture ...
[17:44:54.726] - result already collected: FutureResult
[17:44:54.726] result() for ClusterFuture ... done
[17:44:54.727] result() for ClusterFuture ...
[17:44:54.727] - result already collected: FutureResult
[17:44:54.727] result() for ClusterFuture ... done
[17:44:54.727] result() for ClusterFuture ...
[17:44:54.727] - result already collected: FutureResult
[17:44:54.727] result() for ClusterFuture ... done
[17:44:54.727] - relayed: [n=2] TRUE, FALSE
[17:44:54.727] - queued futures: [n=2] TRUE, FALSE
[17:44:54.727] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:44:54.727]  length: 1 (resolved future 1)
[17:44:54.790] receiveMessageFromWorker() for ClusterFuture ...
[17:44:54.790] - Validating connection of MultisessionFuture
[17:44:54.791] - received message: FutureResult
[17:44:54.791] - Received FutureResult
[17:44:54.791] - Erased future from FutureRegistry
[17:44:54.791] result() for ClusterFuture ...
[17:44:54.791] - result already collected: FutureResult
[17:44:54.791] result() for ClusterFuture ... done
[17:44:54.791] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:54.791] Future #2
[17:44:54.791] result() for ClusterFuture ...
[17:44:54.791] - result already collected: FutureResult
[17:44:54.792] result() for ClusterFuture ... done
[17:44:54.792] result() for ClusterFuture ...
[17:44:54.792] - result already collected: FutureResult
[17:44:54.792] result() for ClusterFuture ... done
[17:44:54.792] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:44:54.792] - nx: 2
[17:44:54.792] - relay: TRUE
[17:44:54.792] - stdout: TRUE
[17:44:54.792] - signal: TRUE
[17:44:54.792] - resignal: FALSE
[17:44:54.792] - force: TRUE
[17:44:54.792] - relayed: [n=2] TRUE, FALSE
[17:44:54.792] - queued futures: [n=2] TRUE, FALSE
[17:44:54.793]  - until=2
[17:44:54.793]  - relaying element #2
[17:44:54.793] result() for ClusterFuture ...
[17:44:54.793] - result already collected: FutureResult
[17:44:54.793] result() for ClusterFuture ... done
[17:44:54.793] result() for ClusterFuture ...
[17:44:54.793] - result already collected: FutureResult
[17:44:54.793] result() for ClusterFuture ... done
[17:44:54.793] result() for ClusterFuture ...
[17:44:54.793] - result already collected: FutureResult
[17:44:54.793] result() for ClusterFuture ... done
[17:44:54.794] result() for ClusterFuture ...
[17:44:54.794] - result already collected: FutureResult
[17:44:54.794] result() for ClusterFuture ... done
[17:44:54.794] - relayed: [n=2] TRUE, TRUE
[17:44:54.794] - queued futures: [n=2] TRUE, TRUE
[17:44:54.794] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:44:54.794]  length: 0 (resolved future 2)
[17:44:54.794] Relaying remaining futures
[17:44:54.794] signalConditionsASAP(NULL, pos=0) ...
[17:44:54.794] - nx: 2
[17:44:54.794] - relay: TRUE
[17:44:54.795] - stdout: TRUE
[17:44:54.795] - signal: TRUE
[17:44:54.795] - resignal: FALSE
[17:44:54.795] - force: TRUE
[17:44:54.795] - relayed: [n=2] TRUE, TRUE
[17:44:54.795] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:44:54.795] - relayed: [n=2] TRUE, TRUE
[17:44:54.795] - queued futures: [n=2] TRUE, TRUE
[17:44:54.795] signalConditionsASAP(NULL, pos=0) ... done
[17:44:54.795] resolve() on list ... DONE
[17:44:54.795] result() for ClusterFuture ...
[17:44:54.796] - result already collected: FutureResult
[17:44:54.796] result() for ClusterFuture ... done
[17:44:54.796] result() for ClusterFuture ...
[17:44:54.796] - result already collected: FutureResult
[17:44:54.796] result() for ClusterFuture ... done
[17:44:54.796] result() for ClusterFuture ...
[17:44:54.796] - result already collected: FutureResult
[17:44:54.796] result() for ClusterFuture ... done
[17:44:54.796] result() for ClusterFuture ...
[17:44:54.796] - result already collected: FutureResult
[17:44:54.796] result() for ClusterFuture ... done
[17:44:54.796]  - Number of value chunks collected: 2
[17:44:54.797] Resolving 2 futures (chunks) ... DONE
[17:44:54.797] Reducing values from 2 chunks ...
[17:44:54.797]  - Number of values collected after concatenation: 5
[17:44:54.797]  - Number of values expected: 5
[17:44:54.797] Reducing values from 2 chunks ... DONE
[17:44:54.797] future_lapply() ... DONE
[17:44:54.797] future_lapply() ...
[17:44:54.798] Generating random seeds ...
[17:44:54.798] Generating random seed streams for 5 elements ...
[17:44:54.798] Generating random seed streams for 5 elements ... DONE
[17:44:54.798] Generating random seeds ... DONE
[17:44:54.798] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:44:54.802] Number of chunks: 2
[17:44:54.803] getGlobalsAndPackagesXApply() ...
[17:44:54.803]  - future.globals: TRUE
[17:44:54.803] getGlobalsAndPackages() ...
[17:44:54.803] Searching for globals...
[17:44:54.804] - globals found: [2] ‘FUN’, ‘sample’
[17:44:54.804] Searching for globals ... DONE
[17:44:54.804] Resolving globals: FALSE
[17:44:54.805] The total size of the 1 globals is 616 bytes (616 bytes)
[17:44:54.805] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:44:54.805] - globals: [1] ‘FUN’
[17:44:54.805] 
[17:44:54.805] getGlobalsAndPackages() ... DONE
[17:44:54.805]  - globals found/used: [n=1] ‘FUN’
[17:44:54.806]  - needed namespaces: [n=0] 
[17:44:54.806] Finding globals ... DONE
[17:44:54.806]  - use_args: TRUE
[17:44:54.806]  - Getting '...' globals ...
[17:44:54.806] resolve() on list ...
[17:44:54.806]  recursive: 0
[17:44:54.806]  length: 1
[17:44:54.806]  elements: ‘...’
[17:44:54.807]  length: 0 (resolved future 1)
[17:44:54.807] resolve() on list ... DONE
[17:44:54.807]    - '...' content: [n=0] 
[17:44:54.807] List of 1
[17:44:54.807]  $ ...: list()
[17:44:54.807]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:54.807]  - attr(*, "where")=List of 1
[17:44:54.807]   ..$ ...:<environment: 0x558387ea6500> 
[17:44:54.807]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:54.807]  - attr(*, "resolved")= logi TRUE
[17:44:54.807]  - attr(*, "total_size")= num NA
[17:44:54.809]  - Getting '...' globals ... DONE
[17:44:54.810] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:44:54.810] List of 2
[17:44:54.810]  $ ...future.FUN:function (...)  
[17:44:54.810]  $ ...          : list()
[17:44:54.810]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:54.810]  - attr(*, "where")=List of 2
[17:44:54.810]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:44:54.810]   ..$ ...          :<environment: 0x558387ea6500> 
[17:44:54.810]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:54.810]  - attr(*, "resolved")= logi FALSE
[17:44:54.810]  - attr(*, "total_size")= num 616
[17:44:54.812] Packages to be attached in all futures: [n=0] 
[17:44:54.812] getGlobalsAndPackagesXApply() ... DONE
[17:44:54.813] Number of futures (= number of chunks): 2
[17:44:54.813] Launching 2 futures (chunks) ...
[17:44:54.813] Chunk #1 of 2 ...
[17:44:54.813]  - Finding globals in 'X' for chunk #1 ...
[17:44:54.813] getGlobalsAndPackages() ...
[17:44:54.813] Searching for globals...
[17:44:54.813] 
[17:44:54.813] Searching for globals ... DONE
[17:44:54.813] - globals: [0] <none>
[17:44:54.814] getGlobalsAndPackages() ... DONE
[17:44:54.814]    + additional globals found: [n=0] 
[17:44:54.814]    + additional namespaces needed: [n=0] 
[17:44:54.814]  - Finding globals in 'X' for chunk #1 ... DONE
[17:44:54.814]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:54.814]  - seeds: [2] <seeds>
[17:44:54.814]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:54.814] getGlobalsAndPackages() ...
[17:44:54.814] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:54.814] Resolving globals: FALSE
[17:44:54.815] Tweak future expression to call with '...' arguments ...
[17:44:54.815] {
[17:44:54.815]     do.call(function(...) {
[17:44:54.815]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:54.815]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:54.815]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:54.815]             on.exit(options(oopts), add = TRUE)
[17:44:54.815]         }
[17:44:54.815]         {
[17:44:54.815]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:54.815]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:54.815]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:54.815]                   envir = globalenv(), inherits = FALSE)
[17:44:54.815]                 ...future.FUN(...future.X_jj, ...)
[17:44:54.815]             })
[17:44:54.815]         }
[17:44:54.815]     }, args = future.call.arguments)
[17:44:54.815] }
[17:44:54.815] Tweak future expression to call with '...' arguments ... DONE
[17:44:54.815] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:54.815] 
[17:44:54.816] getGlobalsAndPackages() ... DONE
[17:44:54.816] run() for ‘Future’ ...
[17:44:54.816] - state: ‘created’
[17:44:54.816] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:44:54.829] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:54.830] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:44:54.830]   - Field: ‘node’
[17:44:54.830]   - Field: ‘label’
[17:44:54.830]   - Field: ‘local’
[17:44:54.830]   - Field: ‘owner’
[17:44:54.830]   - Field: ‘envir’
[17:44:54.830]   - Field: ‘workers’
[17:44:54.830]   - Field: ‘packages’
[17:44:54.830]   - Field: ‘gc’
[17:44:54.830]   - Field: ‘conditions’
[17:44:54.830]   - Field: ‘persistent’
[17:44:54.831]   - Field: ‘expr’
[17:44:54.831]   - Field: ‘uuid’
[17:44:54.831]   - Field: ‘seed’
[17:44:54.831]   - Field: ‘version’
[17:44:54.831]   - Field: ‘result’
[17:44:54.831]   - Field: ‘asynchronous’
[17:44:54.831]   - Field: ‘calls’
[17:44:54.831]   - Field: ‘globals’
[17:44:54.831]   - Field: ‘stdout’
[17:44:54.831]   - Field: ‘earlySignal’
[17:44:54.832]   - Field: ‘lazy’
[17:44:54.832]   - Field: ‘state’
[17:44:54.832] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:44:54.832] - Launch lazy future ...
[17:44:54.832] Packages needed by the future expression (n = 0): <none>
[17:44:54.832] Packages needed by future strategies (n = 0): <none>
[17:44:54.833] {
[17:44:54.833]     {
[17:44:54.833]         {
[17:44:54.833]             ...future.startTime <- base::Sys.time()
[17:44:54.833]             {
[17:44:54.833]                 {
[17:44:54.833]                   {
[17:44:54.833]                     {
[17:44:54.833]                       base::local({
[17:44:54.833]                         has_future <- base::requireNamespace("future", 
[17:44:54.833]                           quietly = TRUE)
[17:44:54.833]                         if (has_future) {
[17:44:54.833]                           ns <- base::getNamespace("future")
[17:44:54.833]                           version <- ns[[".package"]][["version"]]
[17:44:54.833]                           if (is.null(version)) 
[17:44:54.833]                             version <- utils::packageVersion("future")
[17:44:54.833]                         }
[17:44:54.833]                         else {
[17:44:54.833]                           version <- NULL
[17:44:54.833]                         }
[17:44:54.833]                         if (!has_future || version < "1.8.0") {
[17:44:54.833]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:54.833]                             "", base::R.version$version.string), 
[17:44:54.833]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:54.833]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:54.833]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:54.833]                               "release", "version")], collapse = " "), 
[17:44:54.833]                             hostname = base::Sys.info()[["nodename"]])
[17:44:54.833]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:54.833]                             info)
[17:44:54.833]                           info <- base::paste(info, collapse = "; ")
[17:44:54.833]                           if (!has_future) {
[17:44:54.833]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:54.833]                               info)
[17:44:54.833]                           }
[17:44:54.833]                           else {
[17:44:54.833]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:54.833]                               info, version)
[17:44:54.833]                           }
[17:44:54.833]                           base::stop(msg)
[17:44:54.833]                         }
[17:44:54.833]                       })
[17:44:54.833]                     }
[17:44:54.833]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:54.833]                     base::options(mc.cores = 1L)
[17:44:54.833]                   }
[17:44:54.833]                   ...future.strategy.old <- future::plan("list")
[17:44:54.833]                   options(future.plan = NULL)
[17:44:54.833]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:54.833]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:54.833]                 }
[17:44:54.833]                 ...future.workdir <- getwd()
[17:44:54.833]             }
[17:44:54.833]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:54.833]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:54.833]         }
[17:44:54.833]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:54.833]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:54.833]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:54.833]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:54.833]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:54.833]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:54.833]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:54.833]             base::names(...future.oldOptions))
[17:44:54.833]     }
[17:44:54.833]     if (FALSE) {
[17:44:54.833]     }
[17:44:54.833]     else {
[17:44:54.833]         if (TRUE) {
[17:44:54.833]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:54.833]                 open = "w")
[17:44:54.833]         }
[17:44:54.833]         else {
[17:44:54.833]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:54.833]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:54.833]         }
[17:44:54.833]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:54.833]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:54.833]             base::sink(type = "output", split = FALSE)
[17:44:54.833]             base::close(...future.stdout)
[17:44:54.833]         }, add = TRUE)
[17:44:54.833]     }
[17:44:54.833]     ...future.frame <- base::sys.nframe()
[17:44:54.833]     ...future.conditions <- base::list()
[17:44:54.833]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:54.833]     if (FALSE) {
[17:44:54.833]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:54.833]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:54.833]     }
[17:44:54.833]     ...future.result <- base::tryCatch({
[17:44:54.833]         base::withCallingHandlers({
[17:44:54.833]             ...future.value <- base::withVisible(base::local({
[17:44:54.833]                 ...future.makeSendCondition <- base::local({
[17:44:54.833]                   sendCondition <- NULL
[17:44:54.833]                   function(frame = 1L) {
[17:44:54.833]                     if (is.function(sendCondition)) 
[17:44:54.833]                       return(sendCondition)
[17:44:54.833]                     ns <- getNamespace("parallel")
[17:44:54.833]                     if (exists("sendData", mode = "function", 
[17:44:54.833]                       envir = ns)) {
[17:44:54.833]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:54.833]                         envir = ns)
[17:44:54.833]                       envir <- sys.frame(frame)
[17:44:54.833]                       master <- NULL
[17:44:54.833]                       while (!identical(envir, .GlobalEnv) && 
[17:44:54.833]                         !identical(envir, emptyenv())) {
[17:44:54.833]                         if (exists("master", mode = "list", envir = envir, 
[17:44:54.833]                           inherits = FALSE)) {
[17:44:54.833]                           master <- get("master", mode = "list", 
[17:44:54.833]                             envir = envir, inherits = FALSE)
[17:44:54.833]                           if (inherits(master, c("SOCKnode", 
[17:44:54.833]                             "SOCK0node"))) {
[17:44:54.833]                             sendCondition <<- function(cond) {
[17:44:54.833]                               data <- list(type = "VALUE", value = cond, 
[17:44:54.833]                                 success = TRUE)
[17:44:54.833]                               parallel_sendData(master, data)
[17:44:54.833]                             }
[17:44:54.833]                             return(sendCondition)
[17:44:54.833]                           }
[17:44:54.833]                         }
[17:44:54.833]                         frame <- frame + 1L
[17:44:54.833]                         envir <- sys.frame(frame)
[17:44:54.833]                       }
[17:44:54.833]                     }
[17:44:54.833]                     sendCondition <<- function(cond) NULL
[17:44:54.833]                   }
[17:44:54.833]                 })
[17:44:54.833]                 withCallingHandlers({
[17:44:54.833]                   {
[17:44:54.833]                     do.call(function(...) {
[17:44:54.833]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:54.833]                       if (!identical(...future.globals.maxSize.org, 
[17:44:54.833]                         ...future.globals.maxSize)) {
[17:44:54.833]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:54.833]                         on.exit(options(oopts), add = TRUE)
[17:44:54.833]                       }
[17:44:54.833]                       {
[17:44:54.833]                         lapply(seq_along(...future.elements_ii), 
[17:44:54.833]                           FUN = function(jj) {
[17:44:54.833]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:54.833]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:54.833]                               envir = globalenv(), inherits = FALSE)
[17:44:54.833]                             ...future.FUN(...future.X_jj, ...)
[17:44:54.833]                           })
[17:44:54.833]                       }
[17:44:54.833]                     }, args = future.call.arguments)
[17:44:54.833]                   }
[17:44:54.833]                 }, immediateCondition = function(cond) {
[17:44:54.833]                   sendCondition <- ...future.makeSendCondition()
[17:44:54.833]                   sendCondition(cond)
[17:44:54.833]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:54.833]                   {
[17:44:54.833]                     inherits <- base::inherits
[17:44:54.833]                     invokeRestart <- base::invokeRestart
[17:44:54.833]                     is.null <- base::is.null
[17:44:54.833]                     muffled <- FALSE
[17:44:54.833]                     if (inherits(cond, "message")) {
[17:44:54.833]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:54.833]                       if (muffled) 
[17:44:54.833]                         invokeRestart("muffleMessage")
[17:44:54.833]                     }
[17:44:54.833]                     else if (inherits(cond, "warning")) {
[17:44:54.833]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:54.833]                       if (muffled) 
[17:44:54.833]                         invokeRestart("muffleWarning")
[17:44:54.833]                     }
[17:44:54.833]                     else if (inherits(cond, "condition")) {
[17:44:54.833]                       if (!is.null(pattern)) {
[17:44:54.833]                         computeRestarts <- base::computeRestarts
[17:44:54.833]                         grepl <- base::grepl
[17:44:54.833]                         restarts <- computeRestarts(cond)
[17:44:54.833]                         for (restart in restarts) {
[17:44:54.833]                           name <- restart$name
[17:44:54.833]                           if (is.null(name)) 
[17:44:54.833]                             next
[17:44:54.833]                           if (!grepl(pattern, name)) 
[17:44:54.833]                             next
[17:44:54.833]                           invokeRestart(restart)
[17:44:54.833]                           muffled <- TRUE
[17:44:54.833]                           break
[17:44:54.833]                         }
[17:44:54.833]                       }
[17:44:54.833]                     }
[17:44:54.833]                     invisible(muffled)
[17:44:54.833]                   }
[17:44:54.833]                   muffleCondition(cond)
[17:44:54.833]                 })
[17:44:54.833]             }))
[17:44:54.833]             future::FutureResult(value = ...future.value$value, 
[17:44:54.833]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:54.833]                   ...future.rng), globalenv = if (FALSE) 
[17:44:54.833]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:54.833]                     ...future.globalenv.names))
[17:44:54.833]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:54.833]         }, condition = base::local({
[17:44:54.833]             c <- base::c
[17:44:54.833]             inherits <- base::inherits
[17:44:54.833]             invokeRestart <- base::invokeRestart
[17:44:54.833]             length <- base::length
[17:44:54.833]             list <- base::list
[17:44:54.833]             seq.int <- base::seq.int
[17:44:54.833]             signalCondition <- base::signalCondition
[17:44:54.833]             sys.calls <- base::sys.calls
[17:44:54.833]             `[[` <- base::`[[`
[17:44:54.833]             `+` <- base::`+`
[17:44:54.833]             `<<-` <- base::`<<-`
[17:44:54.833]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:54.833]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:54.833]                   3L)]
[17:44:54.833]             }
[17:44:54.833]             function(cond) {
[17:44:54.833]                 is_error <- inherits(cond, "error")
[17:44:54.833]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:54.833]                   NULL)
[17:44:54.833]                 if (is_error) {
[17:44:54.833]                   sessionInformation <- function() {
[17:44:54.833]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:54.833]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:54.833]                       search = base::search(), system = base::Sys.info())
[17:44:54.833]                   }
[17:44:54.833]                   ...future.conditions[[length(...future.conditions) + 
[17:44:54.833]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:54.833]                     cond$call), session = sessionInformation(), 
[17:44:54.833]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:54.833]                   signalCondition(cond)
[17:44:54.833]                 }
[17:44:54.833]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:54.833]                 "immediateCondition"))) {
[17:44:54.833]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:54.833]                   ...future.conditions[[length(...future.conditions) + 
[17:44:54.833]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:54.833]                   if (TRUE && !signal) {
[17:44:54.833]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:54.833]                     {
[17:44:54.833]                       inherits <- base::inherits
[17:44:54.833]                       invokeRestart <- base::invokeRestart
[17:44:54.833]                       is.null <- base::is.null
[17:44:54.833]                       muffled <- FALSE
[17:44:54.833]                       if (inherits(cond, "message")) {
[17:44:54.833]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:54.833]                         if (muffled) 
[17:44:54.833]                           invokeRestart("muffleMessage")
[17:44:54.833]                       }
[17:44:54.833]                       else if (inherits(cond, "warning")) {
[17:44:54.833]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:54.833]                         if (muffled) 
[17:44:54.833]                           invokeRestart("muffleWarning")
[17:44:54.833]                       }
[17:44:54.833]                       else if (inherits(cond, "condition")) {
[17:44:54.833]                         if (!is.null(pattern)) {
[17:44:54.833]                           computeRestarts <- base::computeRestarts
[17:44:54.833]                           grepl <- base::grepl
[17:44:54.833]                           restarts <- computeRestarts(cond)
[17:44:54.833]                           for (restart in restarts) {
[17:44:54.833]                             name <- restart$name
[17:44:54.833]                             if (is.null(name)) 
[17:44:54.833]                               next
[17:44:54.833]                             if (!grepl(pattern, name)) 
[17:44:54.833]                               next
[17:44:54.833]                             invokeRestart(restart)
[17:44:54.833]                             muffled <- TRUE
[17:44:54.833]                             break
[17:44:54.833]                           }
[17:44:54.833]                         }
[17:44:54.833]                       }
[17:44:54.833]                       invisible(muffled)
[17:44:54.833]                     }
[17:44:54.833]                     muffleCondition(cond, pattern = "^muffle")
[17:44:54.833]                   }
[17:44:54.833]                 }
[17:44:54.833]                 else {
[17:44:54.833]                   if (TRUE) {
[17:44:54.833]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:54.833]                     {
[17:44:54.833]                       inherits <- base::inherits
[17:44:54.833]                       invokeRestart <- base::invokeRestart
[17:44:54.833]                       is.null <- base::is.null
[17:44:54.833]                       muffled <- FALSE
[17:44:54.833]                       if (inherits(cond, "message")) {
[17:44:54.833]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:54.833]                         if (muffled) 
[17:44:54.833]                           invokeRestart("muffleMessage")
[17:44:54.833]                       }
[17:44:54.833]                       else if (inherits(cond, "warning")) {
[17:44:54.833]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:54.833]                         if (muffled) 
[17:44:54.833]                           invokeRestart("muffleWarning")
[17:44:54.833]                       }
[17:44:54.833]                       else if (inherits(cond, "condition")) {
[17:44:54.833]                         if (!is.null(pattern)) {
[17:44:54.833]                           computeRestarts <- base::computeRestarts
[17:44:54.833]                           grepl <- base::grepl
[17:44:54.833]                           restarts <- computeRestarts(cond)
[17:44:54.833]                           for (restart in restarts) {
[17:44:54.833]                             name <- restart$name
[17:44:54.833]                             if (is.null(name)) 
[17:44:54.833]                               next
[17:44:54.833]                             if (!grepl(pattern, name)) 
[17:44:54.833]                               next
[17:44:54.833]                             invokeRestart(restart)
[17:44:54.833]                             muffled <- TRUE
[17:44:54.833]                             break
[17:44:54.833]                           }
[17:44:54.833]                         }
[17:44:54.833]                       }
[17:44:54.833]                       invisible(muffled)
[17:44:54.833]                     }
[17:44:54.833]                     muffleCondition(cond, pattern = "^muffle")
[17:44:54.833]                   }
[17:44:54.833]                 }
[17:44:54.833]             }
[17:44:54.833]         }))
[17:44:54.833]     }, error = function(ex) {
[17:44:54.833]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:54.833]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:54.833]                 ...future.rng), started = ...future.startTime, 
[17:44:54.833]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:54.833]             version = "1.8"), class = "FutureResult")
[17:44:54.833]     }, finally = {
[17:44:54.833]         if (!identical(...future.workdir, getwd())) 
[17:44:54.833]             setwd(...future.workdir)
[17:44:54.833]         {
[17:44:54.833]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:54.833]                 ...future.oldOptions$nwarnings <- NULL
[17:44:54.833]             }
[17:44:54.833]             base::options(...future.oldOptions)
[17:44:54.833]             if (.Platform$OS.type == "windows") {
[17:44:54.833]                 old_names <- names(...future.oldEnvVars)
[17:44:54.833]                 envs <- base::Sys.getenv()
[17:44:54.833]                 names <- names(envs)
[17:44:54.833]                 common <- intersect(names, old_names)
[17:44:54.833]                 added <- setdiff(names, old_names)
[17:44:54.833]                 removed <- setdiff(old_names, names)
[17:44:54.833]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:54.833]                   envs[common]]
[17:44:54.833]                 NAMES <- toupper(changed)
[17:44:54.833]                 args <- list()
[17:44:54.833]                 for (kk in seq_along(NAMES)) {
[17:44:54.833]                   name <- changed[[kk]]
[17:44:54.833]                   NAME <- NAMES[[kk]]
[17:44:54.833]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:54.833]                     next
[17:44:54.833]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:54.833]                 }
[17:44:54.833]                 NAMES <- toupper(added)
[17:44:54.833]                 for (kk in seq_along(NAMES)) {
[17:44:54.833]                   name <- added[[kk]]
[17:44:54.833]                   NAME <- NAMES[[kk]]
[17:44:54.833]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:54.833]                     next
[17:44:54.833]                   args[[name]] <- ""
[17:44:54.833]                 }
[17:44:54.833]                 NAMES <- toupper(removed)
[17:44:54.833]                 for (kk in seq_along(NAMES)) {
[17:44:54.833]                   name <- removed[[kk]]
[17:44:54.833]                   NAME <- NAMES[[kk]]
[17:44:54.833]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:54.833]                     next
[17:44:54.833]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:54.833]                 }
[17:44:54.833]                 if (length(args) > 0) 
[17:44:54.833]                   base::do.call(base::Sys.setenv, args = args)
[17:44:54.833]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:54.833]             }
[17:44:54.833]             else {
[17:44:54.833]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:54.833]             }
[17:44:54.833]             {
[17:44:54.833]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:54.833]                   0L) {
[17:44:54.833]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:54.833]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:54.833]                   base::options(opts)
[17:44:54.833]                 }
[17:44:54.833]                 {
[17:44:54.833]                   {
[17:44:54.833]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:54.833]                     NULL
[17:44:54.833]                   }
[17:44:54.833]                   options(future.plan = NULL)
[17:44:54.833]                   if (is.na(NA_character_)) 
[17:44:54.833]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:54.833]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:54.833]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:54.833]                     .init = FALSE)
[17:44:54.833]                 }
[17:44:54.833]             }
[17:44:54.833]         }
[17:44:54.833]     })
[17:44:54.833]     if (TRUE) {
[17:44:54.833]         base::sink(type = "output", split = FALSE)
[17:44:54.833]         if (TRUE) {
[17:44:54.833]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:54.833]         }
[17:44:54.833]         else {
[17:44:54.833]             ...future.result["stdout"] <- base::list(NULL)
[17:44:54.833]         }
[17:44:54.833]         base::close(...future.stdout)
[17:44:54.833]         ...future.stdout <- NULL
[17:44:54.833]     }
[17:44:54.833]     ...future.result$conditions <- ...future.conditions
[17:44:54.833]     ...future.result$finished <- base::Sys.time()
[17:44:54.833]     ...future.result
[17:44:54.833] }
[17:44:54.836] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[17:44:54.836] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[17:44:54.836] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[17:44:54.836] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:44:54.837] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:44:54.837] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:44:54.837] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:44:54.837] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:44:54.837] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:44:54.838] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:44:54.838] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:44:54.838] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[17:44:54.838] MultisessionFuture started
[17:44:54.838] - Launch lazy future ... done
[17:44:54.839] run() for ‘MultisessionFuture’ ... done
[17:44:54.839] Created future:
[17:44:54.839] MultisessionFuture:
[17:44:54.839] Label: ‘future_replicate-1’
[17:44:54.839] Expression:
[17:44:54.839] {
[17:44:54.839]     do.call(function(...) {
[17:44:54.839]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:54.839]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:54.839]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:54.839]             on.exit(options(oopts), add = TRUE)
[17:44:54.839]         }
[17:44:54.839]         {
[17:44:54.839]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:54.839]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:54.839]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:54.839]                   envir = globalenv(), inherits = FALSE)
[17:44:54.839]                 ...future.FUN(...future.X_jj, ...)
[17:44:54.839]             })
[17:44:54.839]         }
[17:44:54.839]     }, args = future.call.arguments)
[17:44:54.839] }
[17:44:54.839] Lazy evaluation: FALSE
[17:44:54.839] Asynchronous evaluation: TRUE
[17:44:54.839] Local evaluation: TRUE
[17:44:54.839] Environment: R_GlobalEnv
[17:44:54.839] Capture standard output: TRUE
[17:44:54.839] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:54.839] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:54.839] Packages: <none>
[17:44:54.839] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:54.839] Resolved: FALSE
[17:44:54.839] Value: <not collected>
[17:44:54.839] Conditions captured: <none>
[17:44:54.839] Early signaling: FALSE
[17:44:54.839] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:54.839] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:54.850] Chunk #1 of 2 ... DONE
[17:44:54.850] Chunk #2 of 2 ...
[17:44:54.851]  - Finding globals in 'X' for chunk #2 ...
[17:44:54.851] getGlobalsAndPackages() ...
[17:44:54.851] Searching for globals...
[17:44:54.851] 
[17:44:54.851] Searching for globals ... DONE
[17:44:54.851] - globals: [0] <none>
[17:44:54.851] getGlobalsAndPackages() ... DONE
[17:44:54.851]    + additional globals found: [n=0] 
[17:44:54.852]    + additional namespaces needed: [n=0] 
[17:44:54.852]  - Finding globals in 'X' for chunk #2 ... DONE
[17:44:54.852]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:54.852]  - seeds: [3] <seeds>
[17:44:54.852]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:54.852] getGlobalsAndPackages() ...
[17:44:54.852] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:54.852] Resolving globals: FALSE
[17:44:54.852] Tweak future expression to call with '...' arguments ...
[17:44:54.852] {
[17:44:54.852]     do.call(function(...) {
[17:44:54.852]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:54.852]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:54.852]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:54.852]             on.exit(options(oopts), add = TRUE)
[17:44:54.852]         }
[17:44:54.852]         {
[17:44:54.852]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:54.852]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:54.852]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:54.852]                   envir = globalenv(), inherits = FALSE)
[17:44:54.852]                 ...future.FUN(...future.X_jj, ...)
[17:44:54.852]             })
[17:44:54.852]         }
[17:44:54.852]     }, args = future.call.arguments)
[17:44:54.852] }
[17:44:54.853] Tweak future expression to call with '...' arguments ... DONE
[17:44:54.853] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:54.853] 
[17:44:54.853] getGlobalsAndPackages() ... DONE
[17:44:54.854] run() for ‘Future’ ...
[17:44:54.854] - state: ‘created’
[17:44:54.854] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:44:54.868] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:54.868] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:44:54.868]   - Field: ‘node’
[17:44:54.868]   - Field: ‘label’
[17:44:54.868]   - Field: ‘local’
[17:44:54.868]   - Field: ‘owner’
[17:44:54.868]   - Field: ‘envir’
[17:44:54.868]   - Field: ‘workers’
[17:44:54.869]   - Field: ‘packages’
[17:44:54.869]   - Field: ‘gc’
[17:44:54.869]   - Field: ‘conditions’
[17:44:54.869]   - Field: ‘persistent’
[17:44:54.869]   - Field: ‘expr’
[17:44:54.869]   - Field: ‘uuid’
[17:44:54.869]   - Field: ‘seed’
[17:44:54.869]   - Field: ‘version’
[17:44:54.869]   - Field: ‘result’
[17:44:54.869]   - Field: ‘asynchronous’
[17:44:54.869]   - Field: ‘calls’
[17:44:54.870]   - Field: ‘globals’
[17:44:54.870]   - Field: ‘stdout’
[17:44:54.870]   - Field: ‘earlySignal’
[17:44:54.870]   - Field: ‘lazy’
[17:44:54.870]   - Field: ‘state’
[17:44:54.870] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:44:54.870] - Launch lazy future ...
[17:44:54.870] Packages needed by the future expression (n = 0): <none>
[17:44:54.870] Packages needed by future strategies (n = 0): <none>
[17:44:54.871] {
[17:44:54.871]     {
[17:44:54.871]         {
[17:44:54.871]             ...future.startTime <- base::Sys.time()
[17:44:54.871]             {
[17:44:54.871]                 {
[17:44:54.871]                   {
[17:44:54.871]                     {
[17:44:54.871]                       base::local({
[17:44:54.871]                         has_future <- base::requireNamespace("future", 
[17:44:54.871]                           quietly = TRUE)
[17:44:54.871]                         if (has_future) {
[17:44:54.871]                           ns <- base::getNamespace("future")
[17:44:54.871]                           version <- ns[[".package"]][["version"]]
[17:44:54.871]                           if (is.null(version)) 
[17:44:54.871]                             version <- utils::packageVersion("future")
[17:44:54.871]                         }
[17:44:54.871]                         else {
[17:44:54.871]                           version <- NULL
[17:44:54.871]                         }
[17:44:54.871]                         if (!has_future || version < "1.8.0") {
[17:44:54.871]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:54.871]                             "", base::R.version$version.string), 
[17:44:54.871]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:54.871]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:54.871]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:54.871]                               "release", "version")], collapse = " "), 
[17:44:54.871]                             hostname = base::Sys.info()[["nodename"]])
[17:44:54.871]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:54.871]                             info)
[17:44:54.871]                           info <- base::paste(info, collapse = "; ")
[17:44:54.871]                           if (!has_future) {
[17:44:54.871]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:54.871]                               info)
[17:44:54.871]                           }
[17:44:54.871]                           else {
[17:44:54.871]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:54.871]                               info, version)
[17:44:54.871]                           }
[17:44:54.871]                           base::stop(msg)
[17:44:54.871]                         }
[17:44:54.871]                       })
[17:44:54.871]                     }
[17:44:54.871]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:54.871]                     base::options(mc.cores = 1L)
[17:44:54.871]                   }
[17:44:54.871]                   ...future.strategy.old <- future::plan("list")
[17:44:54.871]                   options(future.plan = NULL)
[17:44:54.871]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:54.871]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:54.871]                 }
[17:44:54.871]                 ...future.workdir <- getwd()
[17:44:54.871]             }
[17:44:54.871]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:54.871]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:54.871]         }
[17:44:54.871]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:54.871]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:54.871]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:54.871]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:54.871]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:54.871]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:54.871]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:54.871]             base::names(...future.oldOptions))
[17:44:54.871]     }
[17:44:54.871]     if (FALSE) {
[17:44:54.871]     }
[17:44:54.871]     else {
[17:44:54.871]         if (TRUE) {
[17:44:54.871]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:54.871]                 open = "w")
[17:44:54.871]         }
[17:44:54.871]         else {
[17:44:54.871]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:54.871]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:54.871]         }
[17:44:54.871]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:54.871]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:54.871]             base::sink(type = "output", split = FALSE)
[17:44:54.871]             base::close(...future.stdout)
[17:44:54.871]         }, add = TRUE)
[17:44:54.871]     }
[17:44:54.871]     ...future.frame <- base::sys.nframe()
[17:44:54.871]     ...future.conditions <- base::list()
[17:44:54.871]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:54.871]     if (FALSE) {
[17:44:54.871]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:54.871]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:54.871]     }
[17:44:54.871]     ...future.result <- base::tryCatch({
[17:44:54.871]         base::withCallingHandlers({
[17:44:54.871]             ...future.value <- base::withVisible(base::local({
[17:44:54.871]                 ...future.makeSendCondition <- base::local({
[17:44:54.871]                   sendCondition <- NULL
[17:44:54.871]                   function(frame = 1L) {
[17:44:54.871]                     if (is.function(sendCondition)) 
[17:44:54.871]                       return(sendCondition)
[17:44:54.871]                     ns <- getNamespace("parallel")
[17:44:54.871]                     if (exists("sendData", mode = "function", 
[17:44:54.871]                       envir = ns)) {
[17:44:54.871]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:54.871]                         envir = ns)
[17:44:54.871]                       envir <- sys.frame(frame)
[17:44:54.871]                       master <- NULL
[17:44:54.871]                       while (!identical(envir, .GlobalEnv) && 
[17:44:54.871]                         !identical(envir, emptyenv())) {
[17:44:54.871]                         if (exists("master", mode = "list", envir = envir, 
[17:44:54.871]                           inherits = FALSE)) {
[17:44:54.871]                           master <- get("master", mode = "list", 
[17:44:54.871]                             envir = envir, inherits = FALSE)
[17:44:54.871]                           if (inherits(master, c("SOCKnode", 
[17:44:54.871]                             "SOCK0node"))) {
[17:44:54.871]                             sendCondition <<- function(cond) {
[17:44:54.871]                               data <- list(type = "VALUE", value = cond, 
[17:44:54.871]                                 success = TRUE)
[17:44:54.871]                               parallel_sendData(master, data)
[17:44:54.871]                             }
[17:44:54.871]                             return(sendCondition)
[17:44:54.871]                           }
[17:44:54.871]                         }
[17:44:54.871]                         frame <- frame + 1L
[17:44:54.871]                         envir <- sys.frame(frame)
[17:44:54.871]                       }
[17:44:54.871]                     }
[17:44:54.871]                     sendCondition <<- function(cond) NULL
[17:44:54.871]                   }
[17:44:54.871]                 })
[17:44:54.871]                 withCallingHandlers({
[17:44:54.871]                   {
[17:44:54.871]                     do.call(function(...) {
[17:44:54.871]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:54.871]                       if (!identical(...future.globals.maxSize.org, 
[17:44:54.871]                         ...future.globals.maxSize)) {
[17:44:54.871]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:54.871]                         on.exit(options(oopts), add = TRUE)
[17:44:54.871]                       }
[17:44:54.871]                       {
[17:44:54.871]                         lapply(seq_along(...future.elements_ii), 
[17:44:54.871]                           FUN = function(jj) {
[17:44:54.871]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:54.871]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:54.871]                               envir = globalenv(), inherits = FALSE)
[17:44:54.871]                             ...future.FUN(...future.X_jj, ...)
[17:44:54.871]                           })
[17:44:54.871]                       }
[17:44:54.871]                     }, args = future.call.arguments)
[17:44:54.871]                   }
[17:44:54.871]                 }, immediateCondition = function(cond) {
[17:44:54.871]                   sendCondition <- ...future.makeSendCondition()
[17:44:54.871]                   sendCondition(cond)
[17:44:54.871]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:54.871]                   {
[17:44:54.871]                     inherits <- base::inherits
[17:44:54.871]                     invokeRestart <- base::invokeRestart
[17:44:54.871]                     is.null <- base::is.null
[17:44:54.871]                     muffled <- FALSE
[17:44:54.871]                     if (inherits(cond, "message")) {
[17:44:54.871]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:54.871]                       if (muffled) 
[17:44:54.871]                         invokeRestart("muffleMessage")
[17:44:54.871]                     }
[17:44:54.871]                     else if (inherits(cond, "warning")) {
[17:44:54.871]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:54.871]                       if (muffled) 
[17:44:54.871]                         invokeRestart("muffleWarning")
[17:44:54.871]                     }
[17:44:54.871]                     else if (inherits(cond, "condition")) {
[17:44:54.871]                       if (!is.null(pattern)) {
[17:44:54.871]                         computeRestarts <- base::computeRestarts
[17:44:54.871]                         grepl <- base::grepl
[17:44:54.871]                         restarts <- computeRestarts(cond)
[17:44:54.871]                         for (restart in restarts) {
[17:44:54.871]                           name <- restart$name
[17:44:54.871]                           if (is.null(name)) 
[17:44:54.871]                             next
[17:44:54.871]                           if (!grepl(pattern, name)) 
[17:44:54.871]                             next
[17:44:54.871]                           invokeRestart(restart)
[17:44:54.871]                           muffled <- TRUE
[17:44:54.871]                           break
[17:44:54.871]                         }
[17:44:54.871]                       }
[17:44:54.871]                     }
[17:44:54.871]                     invisible(muffled)
[17:44:54.871]                   }
[17:44:54.871]                   muffleCondition(cond)
[17:44:54.871]                 })
[17:44:54.871]             }))
[17:44:54.871]             future::FutureResult(value = ...future.value$value, 
[17:44:54.871]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:54.871]                   ...future.rng), globalenv = if (FALSE) 
[17:44:54.871]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:54.871]                     ...future.globalenv.names))
[17:44:54.871]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:54.871]         }, condition = base::local({
[17:44:54.871]             c <- base::c
[17:44:54.871]             inherits <- base::inherits
[17:44:54.871]             invokeRestart <- base::invokeRestart
[17:44:54.871]             length <- base::length
[17:44:54.871]             list <- base::list
[17:44:54.871]             seq.int <- base::seq.int
[17:44:54.871]             signalCondition <- base::signalCondition
[17:44:54.871]             sys.calls <- base::sys.calls
[17:44:54.871]             `[[` <- base::`[[`
[17:44:54.871]             `+` <- base::`+`
[17:44:54.871]             `<<-` <- base::`<<-`
[17:44:54.871]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:54.871]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:54.871]                   3L)]
[17:44:54.871]             }
[17:44:54.871]             function(cond) {
[17:44:54.871]                 is_error <- inherits(cond, "error")
[17:44:54.871]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:54.871]                   NULL)
[17:44:54.871]                 if (is_error) {
[17:44:54.871]                   sessionInformation <- function() {
[17:44:54.871]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:54.871]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:54.871]                       search = base::search(), system = base::Sys.info())
[17:44:54.871]                   }
[17:44:54.871]                   ...future.conditions[[length(...future.conditions) + 
[17:44:54.871]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:54.871]                     cond$call), session = sessionInformation(), 
[17:44:54.871]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:54.871]                   signalCondition(cond)
[17:44:54.871]                 }
[17:44:54.871]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:54.871]                 "immediateCondition"))) {
[17:44:54.871]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:54.871]                   ...future.conditions[[length(...future.conditions) + 
[17:44:54.871]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:54.871]                   if (TRUE && !signal) {
[17:44:54.871]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:54.871]                     {
[17:44:54.871]                       inherits <- base::inherits
[17:44:54.871]                       invokeRestart <- base::invokeRestart
[17:44:54.871]                       is.null <- base::is.null
[17:44:54.871]                       muffled <- FALSE
[17:44:54.871]                       if (inherits(cond, "message")) {
[17:44:54.871]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:54.871]                         if (muffled) 
[17:44:54.871]                           invokeRestart("muffleMessage")
[17:44:54.871]                       }
[17:44:54.871]                       else if (inherits(cond, "warning")) {
[17:44:54.871]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:54.871]                         if (muffled) 
[17:44:54.871]                           invokeRestart("muffleWarning")
[17:44:54.871]                       }
[17:44:54.871]                       else if (inherits(cond, "condition")) {
[17:44:54.871]                         if (!is.null(pattern)) {
[17:44:54.871]                           computeRestarts <- base::computeRestarts
[17:44:54.871]                           grepl <- base::grepl
[17:44:54.871]                           restarts <- computeRestarts(cond)
[17:44:54.871]                           for (restart in restarts) {
[17:44:54.871]                             name <- restart$name
[17:44:54.871]                             if (is.null(name)) 
[17:44:54.871]                               next
[17:44:54.871]                             if (!grepl(pattern, name)) 
[17:44:54.871]                               next
[17:44:54.871]                             invokeRestart(restart)
[17:44:54.871]                             muffled <- TRUE
[17:44:54.871]                             break
[17:44:54.871]                           }
[17:44:54.871]                         }
[17:44:54.871]                       }
[17:44:54.871]                       invisible(muffled)
[17:44:54.871]                     }
[17:44:54.871]                     muffleCondition(cond, pattern = "^muffle")
[17:44:54.871]                   }
[17:44:54.871]                 }
[17:44:54.871]                 else {
[17:44:54.871]                   if (TRUE) {
[17:44:54.871]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:54.871]                     {
[17:44:54.871]                       inherits <- base::inherits
[17:44:54.871]                       invokeRestart <- base::invokeRestart
[17:44:54.871]                       is.null <- base::is.null
[17:44:54.871]                       muffled <- FALSE
[17:44:54.871]                       if (inherits(cond, "message")) {
[17:44:54.871]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:54.871]                         if (muffled) 
[17:44:54.871]                           invokeRestart("muffleMessage")
[17:44:54.871]                       }
[17:44:54.871]                       else if (inherits(cond, "warning")) {
[17:44:54.871]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:54.871]                         if (muffled) 
[17:44:54.871]                           invokeRestart("muffleWarning")
[17:44:54.871]                       }
[17:44:54.871]                       else if (inherits(cond, "condition")) {
[17:44:54.871]                         if (!is.null(pattern)) {
[17:44:54.871]                           computeRestarts <- base::computeRestarts
[17:44:54.871]                           grepl <- base::grepl
[17:44:54.871]                           restarts <- computeRestarts(cond)
[17:44:54.871]                           for (restart in restarts) {
[17:44:54.871]                             name <- restart$name
[17:44:54.871]                             if (is.null(name)) 
[17:44:54.871]                               next
[17:44:54.871]                             if (!grepl(pattern, name)) 
[17:44:54.871]                               next
[17:44:54.871]                             invokeRestart(restart)
[17:44:54.871]                             muffled <- TRUE
[17:44:54.871]                             break
[17:44:54.871]                           }
[17:44:54.871]                         }
[17:44:54.871]                       }
[17:44:54.871]                       invisible(muffled)
[17:44:54.871]                     }
[17:44:54.871]                     muffleCondition(cond, pattern = "^muffle")
[17:44:54.871]                   }
[17:44:54.871]                 }
[17:44:54.871]             }
[17:44:54.871]         }))
[17:44:54.871]     }, error = function(ex) {
[17:44:54.871]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:54.871]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:54.871]                 ...future.rng), started = ...future.startTime, 
[17:44:54.871]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:54.871]             version = "1.8"), class = "FutureResult")
[17:44:54.871]     }, finally = {
[17:44:54.871]         if (!identical(...future.workdir, getwd())) 
[17:44:54.871]             setwd(...future.workdir)
[17:44:54.871]         {
[17:44:54.871]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:54.871]                 ...future.oldOptions$nwarnings <- NULL
[17:44:54.871]             }
[17:44:54.871]             base::options(...future.oldOptions)
[17:44:54.871]             if (.Platform$OS.type == "windows") {
[17:44:54.871]                 old_names <- names(...future.oldEnvVars)
[17:44:54.871]                 envs <- base::Sys.getenv()
[17:44:54.871]                 names <- names(envs)
[17:44:54.871]                 common <- intersect(names, old_names)
[17:44:54.871]                 added <- setdiff(names, old_names)
[17:44:54.871]                 removed <- setdiff(old_names, names)
[17:44:54.871]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:54.871]                   envs[common]]
[17:44:54.871]                 NAMES <- toupper(changed)
[17:44:54.871]                 args <- list()
[17:44:54.871]                 for (kk in seq_along(NAMES)) {
[17:44:54.871]                   name <- changed[[kk]]
[17:44:54.871]                   NAME <- NAMES[[kk]]
[17:44:54.871]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:54.871]                     next
[17:44:54.871]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:54.871]                 }
[17:44:54.871]                 NAMES <- toupper(added)
[17:44:54.871]                 for (kk in seq_along(NAMES)) {
[17:44:54.871]                   name <- added[[kk]]
[17:44:54.871]                   NAME <- NAMES[[kk]]
[17:44:54.871]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:54.871]                     next
[17:44:54.871]                   args[[name]] <- ""
[17:44:54.871]                 }
[17:44:54.871]                 NAMES <- toupper(removed)
[17:44:54.871]                 for (kk in seq_along(NAMES)) {
[17:44:54.871]                   name <- removed[[kk]]
[17:44:54.871]                   NAME <- NAMES[[kk]]
[17:44:54.871]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:54.871]                     next
[17:44:54.871]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:54.871]                 }
[17:44:54.871]                 if (length(args) > 0) 
[17:44:54.871]                   base::do.call(base::Sys.setenv, args = args)
[17:44:54.871]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:54.871]             }
[17:44:54.871]             else {
[17:44:54.871]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:54.871]             }
[17:44:54.871]             {
[17:44:54.871]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:54.871]                   0L) {
[17:44:54.871]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:54.871]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:54.871]                   base::options(opts)
[17:44:54.871]                 }
[17:44:54.871]                 {
[17:44:54.871]                   {
[17:44:54.871]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:54.871]                     NULL
[17:44:54.871]                   }
[17:44:54.871]                   options(future.plan = NULL)
[17:44:54.871]                   if (is.na(NA_character_)) 
[17:44:54.871]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:54.871]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:54.871]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:54.871]                     .init = FALSE)
[17:44:54.871]                 }
[17:44:54.871]             }
[17:44:54.871]         }
[17:44:54.871]     })
[17:44:54.871]     if (TRUE) {
[17:44:54.871]         base::sink(type = "output", split = FALSE)
[17:44:54.871]         if (TRUE) {
[17:44:54.871]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:54.871]         }
[17:44:54.871]         else {
[17:44:54.871]             ...future.result["stdout"] <- base::list(NULL)
[17:44:54.871]         }
[17:44:54.871]         base::close(...future.stdout)
[17:44:54.871]         ...future.stdout <- NULL
[17:44:54.871]     }
[17:44:54.871]     ...future.result$conditions <- ...future.conditions
[17:44:54.871]     ...future.result$finished <- base::Sys.time()
[17:44:54.871]     ...future.result
[17:44:54.871] }
[17:44:54.874] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[17:44:54.874] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[17:44:54.874] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[17:44:54.874] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:44:54.875] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:44:54.875] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:44:54.875] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:44:54.876] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:44:54.876] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:44:54.876] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:44:54.876] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:44:54.877] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[17:44:54.877] MultisessionFuture started
[17:44:54.877] - Launch lazy future ... done
[17:44:54.877] run() for ‘MultisessionFuture’ ... done
[17:44:54.878] Created future:
[17:44:54.878] MultisessionFuture:
[17:44:54.878] Label: ‘future_replicate-2’
[17:44:54.878] Expression:
[17:44:54.878] {
[17:44:54.878]     do.call(function(...) {
[17:44:54.878]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:54.878]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:54.878]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:54.878]             on.exit(options(oopts), add = TRUE)
[17:44:54.878]         }
[17:44:54.878]         {
[17:44:54.878]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:54.878]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:54.878]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:54.878]                   envir = globalenv(), inherits = FALSE)
[17:44:54.878]                 ...future.FUN(...future.X_jj, ...)
[17:44:54.878]             })
[17:44:54.878]         }
[17:44:54.878]     }, args = future.call.arguments)
[17:44:54.878] }
[17:44:54.878] Lazy evaluation: FALSE
[17:44:54.878] Asynchronous evaluation: TRUE
[17:44:54.878] Local evaluation: TRUE
[17:44:54.878] Environment: R_GlobalEnv
[17:44:54.878] Capture standard output: TRUE
[17:44:54.878] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:54.878] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:54.878] Packages: <none>
[17:44:54.878] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:54.878] Resolved: FALSE
[17:44:54.878] Value: <not collected>
[17:44:54.878] Conditions captured: <none>
[17:44:54.878] Early signaling: FALSE
[17:44:54.878] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:54.878] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:54.890] Chunk #2 of 2 ... DONE
[17:44:54.890] Launching 2 futures (chunks) ... DONE
[17:44:54.890] Resolving 2 futures (chunks) ...
[17:44:54.890] resolve() on list ...
[17:44:54.890]  recursive: 0
[17:44:54.890]  length: 2
[17:44:54.890] 
[17:44:54.891] receiveMessageFromWorker() for ClusterFuture ...
[17:44:54.891] - Validating connection of MultisessionFuture
[17:44:54.891] - received message: FutureResult
[17:44:54.891] - Received FutureResult
[17:44:54.891] - Erased future from FutureRegistry
[17:44:54.891] result() for ClusterFuture ...
[17:44:54.892] - result already collected: FutureResult
[17:44:54.892] result() for ClusterFuture ... done
[17:44:54.892] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:54.892] Future #1
[17:44:54.892] result() for ClusterFuture ...
[17:44:54.892] - result already collected: FutureResult
[17:44:54.892] result() for ClusterFuture ... done
[17:44:54.892] result() for ClusterFuture ...
[17:44:54.892] - result already collected: FutureResult
[17:44:54.892] result() for ClusterFuture ... done
[17:44:54.892] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:44:54.893] - nx: 2
[17:44:54.893] - relay: TRUE
[17:44:54.893] - stdout: TRUE
[17:44:54.893] - signal: TRUE
[17:44:54.893] - resignal: FALSE
[17:44:54.893] - force: TRUE
[17:44:54.893] - relayed: [n=2] FALSE, FALSE
[17:44:54.893] - queued futures: [n=2] FALSE, FALSE
[17:44:54.893]  - until=1
[17:44:54.893]  - relaying element #1
[17:44:54.893] result() for ClusterFuture ...
[17:44:54.893] - result already collected: FutureResult
[17:44:54.894] result() for ClusterFuture ... done
[17:44:54.894] result() for ClusterFuture ...
[17:44:54.894] - result already collected: FutureResult
[17:44:54.894] result() for ClusterFuture ... done
[17:44:54.894] result() for ClusterFuture ...
[17:44:54.894] - result already collected: FutureResult
[17:44:54.894] result() for ClusterFuture ... done
[17:44:54.894] result() for ClusterFuture ...
[17:44:54.894] - result already collected: FutureResult
[17:44:54.894] result() for ClusterFuture ... done
[17:44:54.894] - relayed: [n=2] TRUE, FALSE
[17:44:54.895] - queued futures: [n=2] TRUE, FALSE
[17:44:54.895] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:44:54.895]  length: 1 (resolved future 1)
[17:44:54.921] receiveMessageFromWorker() for ClusterFuture ...
[17:44:54.921] - Validating connection of MultisessionFuture
[17:44:54.921] - received message: FutureResult
[17:44:54.922] - Received FutureResult
[17:44:54.922] - Erased future from FutureRegistry
[17:44:54.922] result() for ClusterFuture ...
[17:44:54.922] - result already collected: FutureResult
[17:44:54.922] result() for ClusterFuture ... done
[17:44:54.922] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:54.922] Future #2
[17:44:54.922] result() for ClusterFuture ...
[17:44:54.922] - result already collected: FutureResult
[17:44:54.922] result() for ClusterFuture ... done
[17:44:54.922] result() for ClusterFuture ...
[17:44:54.923] - result already collected: FutureResult
[17:44:54.923] result() for ClusterFuture ... done
[17:44:54.923] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:44:54.923] - nx: 2
[17:44:54.923] - relay: TRUE
[17:44:54.923] - stdout: TRUE
[17:44:54.923] - signal: TRUE
[17:44:54.923] - resignal: FALSE
[17:44:54.923] - force: TRUE
[17:44:54.923] - relayed: [n=2] TRUE, FALSE
[17:44:54.923] - queued futures: [n=2] TRUE, FALSE
[17:44:54.924]  - until=2
[17:44:54.924]  - relaying element #2
[17:44:54.924] result() for ClusterFuture ...
[17:44:54.924] - result already collected: FutureResult
[17:44:54.924] result() for ClusterFuture ... done
[17:44:54.924] result() for ClusterFuture ...
[17:44:54.924] - result already collected: FutureResult
[17:44:54.924] result() for ClusterFuture ... done
[17:44:54.924] result() for ClusterFuture ...
[17:44:54.924] - result already collected: FutureResult
[17:44:54.924] result() for ClusterFuture ... done
[17:44:54.925] result() for ClusterFuture ...
[17:44:54.925] - result already collected: FutureResult
[17:44:54.925] result() for ClusterFuture ... done
[17:44:54.925] - relayed: [n=2] TRUE, TRUE
[17:44:54.925] - queued futures: [n=2] TRUE, TRUE
[17:44:54.925] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:44:54.925]  length: 0 (resolved future 2)
[17:44:54.925] Relaying remaining futures
[17:44:54.925] signalConditionsASAP(NULL, pos=0) ...
[17:44:54.925] - nx: 2
[17:44:54.925] - relay: TRUE
[17:44:54.925] - stdout: TRUE
[17:44:54.926] - signal: TRUE
[17:44:54.926] - resignal: FALSE
[17:44:54.926] - force: TRUE
[17:44:54.926] - relayed: [n=2] TRUE, TRUE
[17:44:54.926] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:44:54.926] - relayed: [n=2] TRUE, TRUE
[17:44:54.926] - queued futures: [n=2] TRUE, TRUE
[17:44:54.926] signalConditionsASAP(NULL, pos=0) ... done
[17:44:54.926] resolve() on list ... DONE
[17:44:54.926] result() for ClusterFuture ...
[17:44:54.926] - result already collected: FutureResult
[17:44:54.926] result() for ClusterFuture ... done
[17:44:54.927] result() for ClusterFuture ...
[17:44:54.927] - result already collected: FutureResult
[17:44:54.927] result() for ClusterFuture ... done
[17:44:54.927] result() for ClusterFuture ...
[17:44:54.927] - result already collected: FutureResult
[17:44:54.927] result() for ClusterFuture ... done
[17:44:54.927] result() for ClusterFuture ...
[17:44:54.927] - result already collected: FutureResult
[17:44:54.927] result() for ClusterFuture ... done
[17:44:54.927]  - Number of value chunks collected: 2
[17:44:54.927] Resolving 2 futures (chunks) ... DONE
[17:44:54.928] Reducing values from 2 chunks ...
[17:44:54.928]  - Number of values collected after concatenation: 5
[17:44:54.928]  - Number of values expected: 5
[17:44:54.928] Reducing values from 2 chunks ... DONE
[17:44:54.928] future_lapply() ... DONE
[17:44:54.928] future_lapply() ...
[17:44:54.929] Generating random seeds ...
[17:44:54.929] Generating random seed streams for 5 elements ...
[17:44:54.929] Generating random seed streams for 5 elements ... DONE
[17:44:54.929] Generating random seeds ... DONE
[17:44:54.929] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:44:54.933] Number of chunks: 2
[17:44:54.933] getGlobalsAndPackagesXApply() ...
[17:44:54.934]  - future.globals: TRUE
[17:44:54.934] getGlobalsAndPackages() ...
[17:44:54.934] Searching for globals...
[17:44:54.935] - globals found: [2] ‘FUN’, ‘sample’
[17:44:54.935] Searching for globals ... DONE
[17:44:54.935] Resolving globals: FALSE
[17:44:54.935] The total size of the 1 globals is 616 bytes (616 bytes)
[17:44:54.936] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:44:54.936] - globals: [1] ‘FUN’
[17:44:54.936] 
[17:44:54.936] getGlobalsAndPackages() ... DONE
[17:44:54.936]  - globals found/used: [n=1] ‘FUN’
[17:44:54.936]  - needed namespaces: [n=0] 
[17:44:54.936] Finding globals ... DONE
[17:44:54.936]  - use_args: TRUE
[17:44:54.936]  - Getting '...' globals ...
[17:44:54.937] resolve() on list ...
[17:44:54.937]  recursive: 0
[17:44:54.937]  length: 1
[17:44:54.937]  elements: ‘...’
[17:44:54.937]  length: 0 (resolved future 1)
[17:44:54.937] resolve() on list ... DONE
[17:44:54.937]    - '...' content: [n=0] 
[17:44:54.937] List of 1
[17:44:54.937]  $ ...: list()
[17:44:54.937]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:54.937]  - attr(*, "where")=List of 1
[17:44:54.937]   ..$ ...:<environment: 0x558389f04b58> 
[17:44:54.937]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:54.937]  - attr(*, "resolved")= logi TRUE
[17:44:54.937]  - attr(*, "total_size")= num NA
[17:44:54.940]  - Getting '...' globals ... DONE
[17:44:54.940] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:44:54.940] List of 2
[17:44:54.940]  $ ...future.FUN:function (...)  
[17:44:54.940]  $ ...          : list()
[17:44:54.940]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:54.940]  - attr(*, "where")=List of 2
[17:44:54.940]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:44:54.940]   ..$ ...          :<environment: 0x558389f04b58> 
[17:44:54.940]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:54.940]  - attr(*, "resolved")= logi FALSE
[17:44:54.940]  - attr(*, "total_size")= num 616
[17:44:54.945] Packages to be attached in all futures: [n=0] 
[17:44:54.945] getGlobalsAndPackagesXApply() ... DONE
[17:44:54.945] Number of futures (= number of chunks): 2
[17:44:54.945] Launching 2 futures (chunks) ...
[17:44:54.945] Chunk #1 of 2 ...
[17:44:54.946]  - Finding globals in 'X' for chunk #1 ...
[17:44:54.946] getGlobalsAndPackages() ...
[17:44:54.946] Searching for globals...
[17:44:54.946] 
[17:44:54.946] Searching for globals ... DONE
[17:44:54.946] - globals: [0] <none>
[17:44:54.946] getGlobalsAndPackages() ... DONE
[17:44:54.946]    + additional globals found: [n=0] 
[17:44:54.946]    + additional namespaces needed: [n=0] 
[17:44:54.946]  - Finding globals in 'X' for chunk #1 ... DONE
[17:44:54.947]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:54.947]  - seeds: [2] <seeds>
[17:44:54.947]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:54.947] getGlobalsAndPackages() ...
[17:44:54.947] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:54.947] Resolving globals: FALSE
[17:44:54.947] Tweak future expression to call with '...' arguments ...
[17:44:54.947] {
[17:44:54.947]     do.call(function(...) {
[17:44:54.947]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:54.947]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:54.947]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:54.947]             on.exit(options(oopts), add = TRUE)
[17:44:54.947]         }
[17:44:54.947]         {
[17:44:54.947]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:54.947]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:54.947]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:54.947]                   envir = globalenv(), inherits = FALSE)
[17:44:54.947]                 ...future.FUN(...future.X_jj, ...)
[17:44:54.947]             })
[17:44:54.947]         }
[17:44:54.947]     }, args = future.call.arguments)
[17:44:54.947] }
[17:44:54.948] Tweak future expression to call with '...' arguments ... DONE
[17:44:54.948] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:54.948] 
[17:44:54.948] getGlobalsAndPackages() ... DONE
[17:44:54.948] run() for ‘Future’ ...
[17:44:54.949] - state: ‘created’
[17:44:54.949] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:44:54.963] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:54.963] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:44:54.963]   - Field: ‘node’
[17:44:54.963]   - Field: ‘label’
[17:44:54.963]   - Field: ‘local’
[17:44:54.963]   - Field: ‘owner’
[17:44:54.963]   - Field: ‘envir’
[17:44:54.964]   - Field: ‘workers’
[17:44:54.964]   - Field: ‘packages’
[17:44:54.964]   - Field: ‘gc’
[17:44:54.964]   - Field: ‘conditions’
[17:44:54.964]   - Field: ‘persistent’
[17:44:54.964]   - Field: ‘expr’
[17:44:54.964]   - Field: ‘uuid’
[17:44:54.964]   - Field: ‘seed’
[17:44:54.964]   - Field: ‘version’
[17:44:54.964]   - Field: ‘result’
[17:44:54.964]   - Field: ‘asynchronous’
[17:44:54.964]   - Field: ‘calls’
[17:44:54.965]   - Field: ‘globals’
[17:44:54.965]   - Field: ‘stdout’
[17:44:54.965]   - Field: ‘earlySignal’
[17:44:54.965]   - Field: ‘lazy’
[17:44:54.965]   - Field: ‘state’
[17:44:54.965] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:44:54.965] - Launch lazy future ...
[17:44:54.965] Packages needed by the future expression (n = 0): <none>
[17:44:54.965] Packages needed by future strategies (n = 0): <none>
[17:44:54.966] {
[17:44:54.966]     {
[17:44:54.966]         {
[17:44:54.966]             ...future.startTime <- base::Sys.time()
[17:44:54.966]             {
[17:44:54.966]                 {
[17:44:54.966]                   {
[17:44:54.966]                     {
[17:44:54.966]                       base::local({
[17:44:54.966]                         has_future <- base::requireNamespace("future", 
[17:44:54.966]                           quietly = TRUE)
[17:44:54.966]                         if (has_future) {
[17:44:54.966]                           ns <- base::getNamespace("future")
[17:44:54.966]                           version <- ns[[".package"]][["version"]]
[17:44:54.966]                           if (is.null(version)) 
[17:44:54.966]                             version <- utils::packageVersion("future")
[17:44:54.966]                         }
[17:44:54.966]                         else {
[17:44:54.966]                           version <- NULL
[17:44:54.966]                         }
[17:44:54.966]                         if (!has_future || version < "1.8.0") {
[17:44:54.966]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:54.966]                             "", base::R.version$version.string), 
[17:44:54.966]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:54.966]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:54.966]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:54.966]                               "release", "version")], collapse = " "), 
[17:44:54.966]                             hostname = base::Sys.info()[["nodename"]])
[17:44:54.966]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:54.966]                             info)
[17:44:54.966]                           info <- base::paste(info, collapse = "; ")
[17:44:54.966]                           if (!has_future) {
[17:44:54.966]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:54.966]                               info)
[17:44:54.966]                           }
[17:44:54.966]                           else {
[17:44:54.966]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:54.966]                               info, version)
[17:44:54.966]                           }
[17:44:54.966]                           base::stop(msg)
[17:44:54.966]                         }
[17:44:54.966]                       })
[17:44:54.966]                     }
[17:44:54.966]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:54.966]                     base::options(mc.cores = 1L)
[17:44:54.966]                   }
[17:44:54.966]                   ...future.strategy.old <- future::plan("list")
[17:44:54.966]                   options(future.plan = NULL)
[17:44:54.966]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:54.966]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:54.966]                 }
[17:44:54.966]                 ...future.workdir <- getwd()
[17:44:54.966]             }
[17:44:54.966]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:54.966]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:54.966]         }
[17:44:54.966]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:54.966]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:54.966]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:54.966]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:54.966]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:54.966]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:54.966]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:54.966]             base::names(...future.oldOptions))
[17:44:54.966]     }
[17:44:54.966]     if (FALSE) {
[17:44:54.966]     }
[17:44:54.966]     else {
[17:44:54.966]         if (TRUE) {
[17:44:54.966]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:54.966]                 open = "w")
[17:44:54.966]         }
[17:44:54.966]         else {
[17:44:54.966]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:54.966]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:54.966]         }
[17:44:54.966]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:54.966]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:54.966]             base::sink(type = "output", split = FALSE)
[17:44:54.966]             base::close(...future.stdout)
[17:44:54.966]         }, add = TRUE)
[17:44:54.966]     }
[17:44:54.966]     ...future.frame <- base::sys.nframe()
[17:44:54.966]     ...future.conditions <- base::list()
[17:44:54.966]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:54.966]     if (FALSE) {
[17:44:54.966]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:54.966]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:54.966]     }
[17:44:54.966]     ...future.result <- base::tryCatch({
[17:44:54.966]         base::withCallingHandlers({
[17:44:54.966]             ...future.value <- base::withVisible(base::local({
[17:44:54.966]                 ...future.makeSendCondition <- base::local({
[17:44:54.966]                   sendCondition <- NULL
[17:44:54.966]                   function(frame = 1L) {
[17:44:54.966]                     if (is.function(sendCondition)) 
[17:44:54.966]                       return(sendCondition)
[17:44:54.966]                     ns <- getNamespace("parallel")
[17:44:54.966]                     if (exists("sendData", mode = "function", 
[17:44:54.966]                       envir = ns)) {
[17:44:54.966]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:54.966]                         envir = ns)
[17:44:54.966]                       envir <- sys.frame(frame)
[17:44:54.966]                       master <- NULL
[17:44:54.966]                       while (!identical(envir, .GlobalEnv) && 
[17:44:54.966]                         !identical(envir, emptyenv())) {
[17:44:54.966]                         if (exists("master", mode = "list", envir = envir, 
[17:44:54.966]                           inherits = FALSE)) {
[17:44:54.966]                           master <- get("master", mode = "list", 
[17:44:54.966]                             envir = envir, inherits = FALSE)
[17:44:54.966]                           if (inherits(master, c("SOCKnode", 
[17:44:54.966]                             "SOCK0node"))) {
[17:44:54.966]                             sendCondition <<- function(cond) {
[17:44:54.966]                               data <- list(type = "VALUE", value = cond, 
[17:44:54.966]                                 success = TRUE)
[17:44:54.966]                               parallel_sendData(master, data)
[17:44:54.966]                             }
[17:44:54.966]                             return(sendCondition)
[17:44:54.966]                           }
[17:44:54.966]                         }
[17:44:54.966]                         frame <- frame + 1L
[17:44:54.966]                         envir <- sys.frame(frame)
[17:44:54.966]                       }
[17:44:54.966]                     }
[17:44:54.966]                     sendCondition <<- function(cond) NULL
[17:44:54.966]                   }
[17:44:54.966]                 })
[17:44:54.966]                 withCallingHandlers({
[17:44:54.966]                   {
[17:44:54.966]                     do.call(function(...) {
[17:44:54.966]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:54.966]                       if (!identical(...future.globals.maxSize.org, 
[17:44:54.966]                         ...future.globals.maxSize)) {
[17:44:54.966]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:54.966]                         on.exit(options(oopts), add = TRUE)
[17:44:54.966]                       }
[17:44:54.966]                       {
[17:44:54.966]                         lapply(seq_along(...future.elements_ii), 
[17:44:54.966]                           FUN = function(jj) {
[17:44:54.966]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:54.966]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:54.966]                               envir = globalenv(), inherits = FALSE)
[17:44:54.966]                             ...future.FUN(...future.X_jj, ...)
[17:44:54.966]                           })
[17:44:54.966]                       }
[17:44:54.966]                     }, args = future.call.arguments)
[17:44:54.966]                   }
[17:44:54.966]                 }, immediateCondition = function(cond) {
[17:44:54.966]                   sendCondition <- ...future.makeSendCondition()
[17:44:54.966]                   sendCondition(cond)
[17:44:54.966]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:54.966]                   {
[17:44:54.966]                     inherits <- base::inherits
[17:44:54.966]                     invokeRestart <- base::invokeRestart
[17:44:54.966]                     is.null <- base::is.null
[17:44:54.966]                     muffled <- FALSE
[17:44:54.966]                     if (inherits(cond, "message")) {
[17:44:54.966]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:54.966]                       if (muffled) 
[17:44:54.966]                         invokeRestart("muffleMessage")
[17:44:54.966]                     }
[17:44:54.966]                     else if (inherits(cond, "warning")) {
[17:44:54.966]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:54.966]                       if (muffled) 
[17:44:54.966]                         invokeRestart("muffleWarning")
[17:44:54.966]                     }
[17:44:54.966]                     else if (inherits(cond, "condition")) {
[17:44:54.966]                       if (!is.null(pattern)) {
[17:44:54.966]                         computeRestarts <- base::computeRestarts
[17:44:54.966]                         grepl <- base::grepl
[17:44:54.966]                         restarts <- computeRestarts(cond)
[17:44:54.966]                         for (restart in restarts) {
[17:44:54.966]                           name <- restart$name
[17:44:54.966]                           if (is.null(name)) 
[17:44:54.966]                             next
[17:44:54.966]                           if (!grepl(pattern, name)) 
[17:44:54.966]                             next
[17:44:54.966]                           invokeRestart(restart)
[17:44:54.966]                           muffled <- TRUE
[17:44:54.966]                           break
[17:44:54.966]                         }
[17:44:54.966]                       }
[17:44:54.966]                     }
[17:44:54.966]                     invisible(muffled)
[17:44:54.966]                   }
[17:44:54.966]                   muffleCondition(cond)
[17:44:54.966]                 })
[17:44:54.966]             }))
[17:44:54.966]             future::FutureResult(value = ...future.value$value, 
[17:44:54.966]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:54.966]                   ...future.rng), globalenv = if (FALSE) 
[17:44:54.966]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:54.966]                     ...future.globalenv.names))
[17:44:54.966]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:54.966]         }, condition = base::local({
[17:44:54.966]             c <- base::c
[17:44:54.966]             inherits <- base::inherits
[17:44:54.966]             invokeRestart <- base::invokeRestart
[17:44:54.966]             length <- base::length
[17:44:54.966]             list <- base::list
[17:44:54.966]             seq.int <- base::seq.int
[17:44:54.966]             signalCondition <- base::signalCondition
[17:44:54.966]             sys.calls <- base::sys.calls
[17:44:54.966]             `[[` <- base::`[[`
[17:44:54.966]             `+` <- base::`+`
[17:44:54.966]             `<<-` <- base::`<<-`
[17:44:54.966]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:54.966]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:54.966]                   3L)]
[17:44:54.966]             }
[17:44:54.966]             function(cond) {
[17:44:54.966]                 is_error <- inherits(cond, "error")
[17:44:54.966]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:54.966]                   NULL)
[17:44:54.966]                 if (is_error) {
[17:44:54.966]                   sessionInformation <- function() {
[17:44:54.966]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:54.966]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:54.966]                       search = base::search(), system = base::Sys.info())
[17:44:54.966]                   }
[17:44:54.966]                   ...future.conditions[[length(...future.conditions) + 
[17:44:54.966]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:54.966]                     cond$call), session = sessionInformation(), 
[17:44:54.966]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:54.966]                   signalCondition(cond)
[17:44:54.966]                 }
[17:44:54.966]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:54.966]                 "immediateCondition"))) {
[17:44:54.966]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:54.966]                   ...future.conditions[[length(...future.conditions) + 
[17:44:54.966]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:54.966]                   if (TRUE && !signal) {
[17:44:54.966]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:54.966]                     {
[17:44:54.966]                       inherits <- base::inherits
[17:44:54.966]                       invokeRestart <- base::invokeRestart
[17:44:54.966]                       is.null <- base::is.null
[17:44:54.966]                       muffled <- FALSE
[17:44:54.966]                       if (inherits(cond, "message")) {
[17:44:54.966]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:54.966]                         if (muffled) 
[17:44:54.966]                           invokeRestart("muffleMessage")
[17:44:54.966]                       }
[17:44:54.966]                       else if (inherits(cond, "warning")) {
[17:44:54.966]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:54.966]                         if (muffled) 
[17:44:54.966]                           invokeRestart("muffleWarning")
[17:44:54.966]                       }
[17:44:54.966]                       else if (inherits(cond, "condition")) {
[17:44:54.966]                         if (!is.null(pattern)) {
[17:44:54.966]                           computeRestarts <- base::computeRestarts
[17:44:54.966]                           grepl <- base::grepl
[17:44:54.966]                           restarts <- computeRestarts(cond)
[17:44:54.966]                           for (restart in restarts) {
[17:44:54.966]                             name <- restart$name
[17:44:54.966]                             if (is.null(name)) 
[17:44:54.966]                               next
[17:44:54.966]                             if (!grepl(pattern, name)) 
[17:44:54.966]                               next
[17:44:54.966]                             invokeRestart(restart)
[17:44:54.966]                             muffled <- TRUE
[17:44:54.966]                             break
[17:44:54.966]                           }
[17:44:54.966]                         }
[17:44:54.966]                       }
[17:44:54.966]                       invisible(muffled)
[17:44:54.966]                     }
[17:44:54.966]                     muffleCondition(cond, pattern = "^muffle")
[17:44:54.966]                   }
[17:44:54.966]                 }
[17:44:54.966]                 else {
[17:44:54.966]                   if (TRUE) {
[17:44:54.966]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:54.966]                     {
[17:44:54.966]                       inherits <- base::inherits
[17:44:54.966]                       invokeRestart <- base::invokeRestart
[17:44:54.966]                       is.null <- base::is.null
[17:44:54.966]                       muffled <- FALSE
[17:44:54.966]                       if (inherits(cond, "message")) {
[17:44:54.966]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:54.966]                         if (muffled) 
[17:44:54.966]                           invokeRestart("muffleMessage")
[17:44:54.966]                       }
[17:44:54.966]                       else if (inherits(cond, "warning")) {
[17:44:54.966]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:54.966]                         if (muffled) 
[17:44:54.966]                           invokeRestart("muffleWarning")
[17:44:54.966]                       }
[17:44:54.966]                       else if (inherits(cond, "condition")) {
[17:44:54.966]                         if (!is.null(pattern)) {
[17:44:54.966]                           computeRestarts <- base::computeRestarts
[17:44:54.966]                           grepl <- base::grepl
[17:44:54.966]                           restarts <- computeRestarts(cond)
[17:44:54.966]                           for (restart in restarts) {
[17:44:54.966]                             name <- restart$name
[17:44:54.966]                             if (is.null(name)) 
[17:44:54.966]                               next
[17:44:54.966]                             if (!grepl(pattern, name)) 
[17:44:54.966]                               next
[17:44:54.966]                             invokeRestart(restart)
[17:44:54.966]                             muffled <- TRUE
[17:44:54.966]                             break
[17:44:54.966]                           }
[17:44:54.966]                         }
[17:44:54.966]                       }
[17:44:54.966]                       invisible(muffled)
[17:44:54.966]                     }
[17:44:54.966]                     muffleCondition(cond, pattern = "^muffle")
[17:44:54.966]                   }
[17:44:54.966]                 }
[17:44:54.966]             }
[17:44:54.966]         }))
[17:44:54.966]     }, error = function(ex) {
[17:44:54.966]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:54.966]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:54.966]                 ...future.rng), started = ...future.startTime, 
[17:44:54.966]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:54.966]             version = "1.8"), class = "FutureResult")
[17:44:54.966]     }, finally = {
[17:44:54.966]         if (!identical(...future.workdir, getwd())) 
[17:44:54.966]             setwd(...future.workdir)
[17:44:54.966]         {
[17:44:54.966]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:54.966]                 ...future.oldOptions$nwarnings <- NULL
[17:44:54.966]             }
[17:44:54.966]             base::options(...future.oldOptions)
[17:44:54.966]             if (.Platform$OS.type == "windows") {
[17:44:54.966]                 old_names <- names(...future.oldEnvVars)
[17:44:54.966]                 envs <- base::Sys.getenv()
[17:44:54.966]                 names <- names(envs)
[17:44:54.966]                 common <- intersect(names, old_names)
[17:44:54.966]                 added <- setdiff(names, old_names)
[17:44:54.966]                 removed <- setdiff(old_names, names)
[17:44:54.966]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:54.966]                   envs[common]]
[17:44:54.966]                 NAMES <- toupper(changed)
[17:44:54.966]                 args <- list()
[17:44:54.966]                 for (kk in seq_along(NAMES)) {
[17:44:54.966]                   name <- changed[[kk]]
[17:44:54.966]                   NAME <- NAMES[[kk]]
[17:44:54.966]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:54.966]                     next
[17:44:54.966]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:54.966]                 }
[17:44:54.966]                 NAMES <- toupper(added)
[17:44:54.966]                 for (kk in seq_along(NAMES)) {
[17:44:54.966]                   name <- added[[kk]]
[17:44:54.966]                   NAME <- NAMES[[kk]]
[17:44:54.966]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:54.966]                     next
[17:44:54.966]                   args[[name]] <- ""
[17:44:54.966]                 }
[17:44:54.966]                 NAMES <- toupper(removed)
[17:44:54.966]                 for (kk in seq_along(NAMES)) {
[17:44:54.966]                   name <- removed[[kk]]
[17:44:54.966]                   NAME <- NAMES[[kk]]
[17:44:54.966]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:54.966]                     next
[17:44:54.966]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:54.966]                 }
[17:44:54.966]                 if (length(args) > 0) 
[17:44:54.966]                   base::do.call(base::Sys.setenv, args = args)
[17:44:54.966]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:54.966]             }
[17:44:54.966]             else {
[17:44:54.966]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:54.966]             }
[17:44:54.966]             {
[17:44:54.966]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:54.966]                   0L) {
[17:44:54.966]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:54.966]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:54.966]                   base::options(opts)
[17:44:54.966]                 }
[17:44:54.966]                 {
[17:44:54.966]                   {
[17:44:54.966]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:54.966]                     NULL
[17:44:54.966]                   }
[17:44:54.966]                   options(future.plan = NULL)
[17:44:54.966]                   if (is.na(NA_character_)) 
[17:44:54.966]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:54.966]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:54.966]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:54.966]                     .init = FALSE)
[17:44:54.966]                 }
[17:44:54.966]             }
[17:44:54.966]         }
[17:44:54.966]     })
[17:44:54.966]     if (TRUE) {
[17:44:54.966]         base::sink(type = "output", split = FALSE)
[17:44:54.966]         if (TRUE) {
[17:44:54.966]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:54.966]         }
[17:44:54.966]         else {
[17:44:54.966]             ...future.result["stdout"] <- base::list(NULL)
[17:44:54.966]         }
[17:44:54.966]         base::close(...future.stdout)
[17:44:54.966]         ...future.stdout <- NULL
[17:44:54.966]     }
[17:44:54.966]     ...future.result$conditions <- ...future.conditions
[17:44:54.966]     ...future.result$finished <- base::Sys.time()
[17:44:54.966]     ...future.result
[17:44:54.966] }
[17:44:54.969] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[17:44:54.969] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[17:44:54.969] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[17:44:54.969] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:44:54.970] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:44:54.970] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:44:54.970] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:44:54.970] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:44:54.970] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:44:54.971] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:44:54.971] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:44:54.971] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[17:44:54.971] MultisessionFuture started
[17:44:54.972] - Launch lazy future ... done
[17:44:54.972] run() for ‘MultisessionFuture’ ... done
[17:44:54.972] Created future:
[17:44:54.972] MultisessionFuture:
[17:44:54.972] Label: ‘future_replicate-1’
[17:44:54.972] Expression:
[17:44:54.972] {
[17:44:54.972]     do.call(function(...) {
[17:44:54.972]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:54.972]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:54.972]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:54.972]             on.exit(options(oopts), add = TRUE)
[17:44:54.972]         }
[17:44:54.972]         {
[17:44:54.972]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:54.972]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:54.972]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:54.972]                   envir = globalenv(), inherits = FALSE)
[17:44:54.972]                 ...future.FUN(...future.X_jj, ...)
[17:44:54.972]             })
[17:44:54.972]         }
[17:44:54.972]     }, args = future.call.arguments)
[17:44:54.972] }
[17:44:54.972] Lazy evaluation: FALSE
[17:44:54.972] Asynchronous evaluation: TRUE
[17:44:54.972] Local evaluation: TRUE
[17:44:54.972] Environment: R_GlobalEnv
[17:44:54.972] Capture standard output: TRUE
[17:44:54.972] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:54.972] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:54.972] Packages: <none>
[17:44:54.972] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:54.972] Resolved: FALSE
[17:44:54.972] Value: <not collected>
[17:44:54.972] Conditions captured: <none>
[17:44:54.972] Early signaling: FALSE
[17:44:54.972] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:54.972] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:54.983] Chunk #1 of 2 ... DONE
[17:44:54.983] Chunk #2 of 2 ...
[17:44:54.984]  - Finding globals in 'X' for chunk #2 ...
[17:44:54.984] getGlobalsAndPackages() ...
[17:44:54.984] Searching for globals...
[17:44:54.984] 
[17:44:54.984] Searching for globals ... DONE
[17:44:54.984] - globals: [0] <none>
[17:44:54.984] getGlobalsAndPackages() ... DONE
[17:44:54.984]    + additional globals found: [n=0] 
[17:44:54.985]    + additional namespaces needed: [n=0] 
[17:44:54.985]  - Finding globals in 'X' for chunk #2 ... DONE
[17:44:54.985]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:54.985]  - seeds: [3] <seeds>
[17:44:54.985]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:54.985] getGlobalsAndPackages() ...
[17:44:54.985] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:54.985] Resolving globals: FALSE
[17:44:54.985] Tweak future expression to call with '...' arguments ...
[17:44:54.985] {
[17:44:54.985]     do.call(function(...) {
[17:44:54.985]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:54.985]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:54.985]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:54.985]             on.exit(options(oopts), add = TRUE)
[17:44:54.985]         }
[17:44:54.985]         {
[17:44:54.985]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:54.985]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:54.985]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:54.985]                   envir = globalenv(), inherits = FALSE)
[17:44:54.985]                 ...future.FUN(...future.X_jj, ...)
[17:44:54.985]             })
[17:44:54.985]         }
[17:44:54.985]     }, args = future.call.arguments)
[17:44:54.985] }
[17:44:54.986] Tweak future expression to call with '...' arguments ... DONE
[17:44:54.986] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:54.986] 
[17:44:54.986] getGlobalsAndPackages() ... DONE
[17:44:54.987] run() for ‘Future’ ...
[17:44:54.987] - state: ‘created’
[17:44:54.987] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:44:55.002] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:55.002] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:44:55.002]   - Field: ‘node’
[17:44:55.002]   - Field: ‘label’
[17:44:55.002]   - Field: ‘local’
[17:44:55.002]   - Field: ‘owner’
[17:44:55.003]   - Field: ‘envir’
[17:44:55.003]   - Field: ‘workers’
[17:44:55.003]   - Field: ‘packages’
[17:44:55.003]   - Field: ‘gc’
[17:44:55.003]   - Field: ‘conditions’
[17:44:55.003]   - Field: ‘persistent’
[17:44:55.003]   - Field: ‘expr’
[17:44:55.003]   - Field: ‘uuid’
[17:44:55.003]   - Field: ‘seed’
[17:44:55.003]   - Field: ‘version’
[17:44:55.004]   - Field: ‘result’
[17:44:55.004]   - Field: ‘asynchronous’
[17:44:55.004]   - Field: ‘calls’
[17:44:55.004]   - Field: ‘globals’
[17:44:55.004]   - Field: ‘stdout’
[17:44:55.004]   - Field: ‘earlySignal’
[17:44:55.004]   - Field: ‘lazy’
[17:44:55.004]   - Field: ‘state’
[17:44:55.004] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:44:55.004] - Launch lazy future ...
[17:44:55.005] Packages needed by the future expression (n = 0): <none>
[17:44:55.005] Packages needed by future strategies (n = 0): <none>
[17:44:55.005] {
[17:44:55.005]     {
[17:44:55.005]         {
[17:44:55.005]             ...future.startTime <- base::Sys.time()
[17:44:55.005]             {
[17:44:55.005]                 {
[17:44:55.005]                   {
[17:44:55.005]                     {
[17:44:55.005]                       base::local({
[17:44:55.005]                         has_future <- base::requireNamespace("future", 
[17:44:55.005]                           quietly = TRUE)
[17:44:55.005]                         if (has_future) {
[17:44:55.005]                           ns <- base::getNamespace("future")
[17:44:55.005]                           version <- ns[[".package"]][["version"]]
[17:44:55.005]                           if (is.null(version)) 
[17:44:55.005]                             version <- utils::packageVersion("future")
[17:44:55.005]                         }
[17:44:55.005]                         else {
[17:44:55.005]                           version <- NULL
[17:44:55.005]                         }
[17:44:55.005]                         if (!has_future || version < "1.8.0") {
[17:44:55.005]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:55.005]                             "", base::R.version$version.string), 
[17:44:55.005]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:55.005]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:55.005]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:55.005]                               "release", "version")], collapse = " "), 
[17:44:55.005]                             hostname = base::Sys.info()[["nodename"]])
[17:44:55.005]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:55.005]                             info)
[17:44:55.005]                           info <- base::paste(info, collapse = "; ")
[17:44:55.005]                           if (!has_future) {
[17:44:55.005]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:55.005]                               info)
[17:44:55.005]                           }
[17:44:55.005]                           else {
[17:44:55.005]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:55.005]                               info, version)
[17:44:55.005]                           }
[17:44:55.005]                           base::stop(msg)
[17:44:55.005]                         }
[17:44:55.005]                       })
[17:44:55.005]                     }
[17:44:55.005]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:55.005]                     base::options(mc.cores = 1L)
[17:44:55.005]                   }
[17:44:55.005]                   ...future.strategy.old <- future::plan("list")
[17:44:55.005]                   options(future.plan = NULL)
[17:44:55.005]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:55.005]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:55.005]                 }
[17:44:55.005]                 ...future.workdir <- getwd()
[17:44:55.005]             }
[17:44:55.005]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:55.005]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:55.005]         }
[17:44:55.005]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:55.005]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:55.005]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:55.005]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:55.005]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:55.005]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:55.005]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:55.005]             base::names(...future.oldOptions))
[17:44:55.005]     }
[17:44:55.005]     if (FALSE) {
[17:44:55.005]     }
[17:44:55.005]     else {
[17:44:55.005]         if (TRUE) {
[17:44:55.005]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:55.005]                 open = "w")
[17:44:55.005]         }
[17:44:55.005]         else {
[17:44:55.005]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:55.005]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:55.005]         }
[17:44:55.005]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:55.005]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:55.005]             base::sink(type = "output", split = FALSE)
[17:44:55.005]             base::close(...future.stdout)
[17:44:55.005]         }, add = TRUE)
[17:44:55.005]     }
[17:44:55.005]     ...future.frame <- base::sys.nframe()
[17:44:55.005]     ...future.conditions <- base::list()
[17:44:55.005]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:55.005]     if (FALSE) {
[17:44:55.005]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:55.005]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:55.005]     }
[17:44:55.005]     ...future.result <- base::tryCatch({
[17:44:55.005]         base::withCallingHandlers({
[17:44:55.005]             ...future.value <- base::withVisible(base::local({
[17:44:55.005]                 ...future.makeSendCondition <- base::local({
[17:44:55.005]                   sendCondition <- NULL
[17:44:55.005]                   function(frame = 1L) {
[17:44:55.005]                     if (is.function(sendCondition)) 
[17:44:55.005]                       return(sendCondition)
[17:44:55.005]                     ns <- getNamespace("parallel")
[17:44:55.005]                     if (exists("sendData", mode = "function", 
[17:44:55.005]                       envir = ns)) {
[17:44:55.005]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:55.005]                         envir = ns)
[17:44:55.005]                       envir <- sys.frame(frame)
[17:44:55.005]                       master <- NULL
[17:44:55.005]                       while (!identical(envir, .GlobalEnv) && 
[17:44:55.005]                         !identical(envir, emptyenv())) {
[17:44:55.005]                         if (exists("master", mode = "list", envir = envir, 
[17:44:55.005]                           inherits = FALSE)) {
[17:44:55.005]                           master <- get("master", mode = "list", 
[17:44:55.005]                             envir = envir, inherits = FALSE)
[17:44:55.005]                           if (inherits(master, c("SOCKnode", 
[17:44:55.005]                             "SOCK0node"))) {
[17:44:55.005]                             sendCondition <<- function(cond) {
[17:44:55.005]                               data <- list(type = "VALUE", value = cond, 
[17:44:55.005]                                 success = TRUE)
[17:44:55.005]                               parallel_sendData(master, data)
[17:44:55.005]                             }
[17:44:55.005]                             return(sendCondition)
[17:44:55.005]                           }
[17:44:55.005]                         }
[17:44:55.005]                         frame <- frame + 1L
[17:44:55.005]                         envir <- sys.frame(frame)
[17:44:55.005]                       }
[17:44:55.005]                     }
[17:44:55.005]                     sendCondition <<- function(cond) NULL
[17:44:55.005]                   }
[17:44:55.005]                 })
[17:44:55.005]                 withCallingHandlers({
[17:44:55.005]                   {
[17:44:55.005]                     do.call(function(...) {
[17:44:55.005]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:55.005]                       if (!identical(...future.globals.maxSize.org, 
[17:44:55.005]                         ...future.globals.maxSize)) {
[17:44:55.005]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:55.005]                         on.exit(options(oopts), add = TRUE)
[17:44:55.005]                       }
[17:44:55.005]                       {
[17:44:55.005]                         lapply(seq_along(...future.elements_ii), 
[17:44:55.005]                           FUN = function(jj) {
[17:44:55.005]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:55.005]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:55.005]                               envir = globalenv(), inherits = FALSE)
[17:44:55.005]                             ...future.FUN(...future.X_jj, ...)
[17:44:55.005]                           })
[17:44:55.005]                       }
[17:44:55.005]                     }, args = future.call.arguments)
[17:44:55.005]                   }
[17:44:55.005]                 }, immediateCondition = function(cond) {
[17:44:55.005]                   sendCondition <- ...future.makeSendCondition()
[17:44:55.005]                   sendCondition(cond)
[17:44:55.005]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:55.005]                   {
[17:44:55.005]                     inherits <- base::inherits
[17:44:55.005]                     invokeRestart <- base::invokeRestart
[17:44:55.005]                     is.null <- base::is.null
[17:44:55.005]                     muffled <- FALSE
[17:44:55.005]                     if (inherits(cond, "message")) {
[17:44:55.005]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:55.005]                       if (muffled) 
[17:44:55.005]                         invokeRestart("muffleMessage")
[17:44:55.005]                     }
[17:44:55.005]                     else if (inherits(cond, "warning")) {
[17:44:55.005]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:55.005]                       if (muffled) 
[17:44:55.005]                         invokeRestart("muffleWarning")
[17:44:55.005]                     }
[17:44:55.005]                     else if (inherits(cond, "condition")) {
[17:44:55.005]                       if (!is.null(pattern)) {
[17:44:55.005]                         computeRestarts <- base::computeRestarts
[17:44:55.005]                         grepl <- base::grepl
[17:44:55.005]                         restarts <- computeRestarts(cond)
[17:44:55.005]                         for (restart in restarts) {
[17:44:55.005]                           name <- restart$name
[17:44:55.005]                           if (is.null(name)) 
[17:44:55.005]                             next
[17:44:55.005]                           if (!grepl(pattern, name)) 
[17:44:55.005]                             next
[17:44:55.005]                           invokeRestart(restart)
[17:44:55.005]                           muffled <- TRUE
[17:44:55.005]                           break
[17:44:55.005]                         }
[17:44:55.005]                       }
[17:44:55.005]                     }
[17:44:55.005]                     invisible(muffled)
[17:44:55.005]                   }
[17:44:55.005]                   muffleCondition(cond)
[17:44:55.005]                 })
[17:44:55.005]             }))
[17:44:55.005]             future::FutureResult(value = ...future.value$value, 
[17:44:55.005]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:55.005]                   ...future.rng), globalenv = if (FALSE) 
[17:44:55.005]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:55.005]                     ...future.globalenv.names))
[17:44:55.005]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:55.005]         }, condition = base::local({
[17:44:55.005]             c <- base::c
[17:44:55.005]             inherits <- base::inherits
[17:44:55.005]             invokeRestart <- base::invokeRestart
[17:44:55.005]             length <- base::length
[17:44:55.005]             list <- base::list
[17:44:55.005]             seq.int <- base::seq.int
[17:44:55.005]             signalCondition <- base::signalCondition
[17:44:55.005]             sys.calls <- base::sys.calls
[17:44:55.005]             `[[` <- base::`[[`
[17:44:55.005]             `+` <- base::`+`
[17:44:55.005]             `<<-` <- base::`<<-`
[17:44:55.005]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:55.005]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:55.005]                   3L)]
[17:44:55.005]             }
[17:44:55.005]             function(cond) {
[17:44:55.005]                 is_error <- inherits(cond, "error")
[17:44:55.005]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:55.005]                   NULL)
[17:44:55.005]                 if (is_error) {
[17:44:55.005]                   sessionInformation <- function() {
[17:44:55.005]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:55.005]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:55.005]                       search = base::search(), system = base::Sys.info())
[17:44:55.005]                   }
[17:44:55.005]                   ...future.conditions[[length(...future.conditions) + 
[17:44:55.005]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:55.005]                     cond$call), session = sessionInformation(), 
[17:44:55.005]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:55.005]                   signalCondition(cond)
[17:44:55.005]                 }
[17:44:55.005]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:55.005]                 "immediateCondition"))) {
[17:44:55.005]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:55.005]                   ...future.conditions[[length(...future.conditions) + 
[17:44:55.005]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:55.005]                   if (TRUE && !signal) {
[17:44:55.005]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:55.005]                     {
[17:44:55.005]                       inherits <- base::inherits
[17:44:55.005]                       invokeRestart <- base::invokeRestart
[17:44:55.005]                       is.null <- base::is.null
[17:44:55.005]                       muffled <- FALSE
[17:44:55.005]                       if (inherits(cond, "message")) {
[17:44:55.005]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:55.005]                         if (muffled) 
[17:44:55.005]                           invokeRestart("muffleMessage")
[17:44:55.005]                       }
[17:44:55.005]                       else if (inherits(cond, "warning")) {
[17:44:55.005]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:55.005]                         if (muffled) 
[17:44:55.005]                           invokeRestart("muffleWarning")
[17:44:55.005]                       }
[17:44:55.005]                       else if (inherits(cond, "condition")) {
[17:44:55.005]                         if (!is.null(pattern)) {
[17:44:55.005]                           computeRestarts <- base::computeRestarts
[17:44:55.005]                           grepl <- base::grepl
[17:44:55.005]                           restarts <- computeRestarts(cond)
[17:44:55.005]                           for (restart in restarts) {
[17:44:55.005]                             name <- restart$name
[17:44:55.005]                             if (is.null(name)) 
[17:44:55.005]                               next
[17:44:55.005]                             if (!grepl(pattern, name)) 
[17:44:55.005]                               next
[17:44:55.005]                             invokeRestart(restart)
[17:44:55.005]                             muffled <- TRUE
[17:44:55.005]                             break
[17:44:55.005]                           }
[17:44:55.005]                         }
[17:44:55.005]                       }
[17:44:55.005]                       invisible(muffled)
[17:44:55.005]                     }
[17:44:55.005]                     muffleCondition(cond, pattern = "^muffle")
[17:44:55.005]                   }
[17:44:55.005]                 }
[17:44:55.005]                 else {
[17:44:55.005]                   if (TRUE) {
[17:44:55.005]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:55.005]                     {
[17:44:55.005]                       inherits <- base::inherits
[17:44:55.005]                       invokeRestart <- base::invokeRestart
[17:44:55.005]                       is.null <- base::is.null
[17:44:55.005]                       muffled <- FALSE
[17:44:55.005]                       if (inherits(cond, "message")) {
[17:44:55.005]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:55.005]                         if (muffled) 
[17:44:55.005]                           invokeRestart("muffleMessage")
[17:44:55.005]                       }
[17:44:55.005]                       else if (inherits(cond, "warning")) {
[17:44:55.005]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:55.005]                         if (muffled) 
[17:44:55.005]                           invokeRestart("muffleWarning")
[17:44:55.005]                       }
[17:44:55.005]                       else if (inherits(cond, "condition")) {
[17:44:55.005]                         if (!is.null(pattern)) {
[17:44:55.005]                           computeRestarts <- base::computeRestarts
[17:44:55.005]                           grepl <- base::grepl
[17:44:55.005]                           restarts <- computeRestarts(cond)
[17:44:55.005]                           for (restart in restarts) {
[17:44:55.005]                             name <- restart$name
[17:44:55.005]                             if (is.null(name)) 
[17:44:55.005]                               next
[17:44:55.005]                             if (!grepl(pattern, name)) 
[17:44:55.005]                               next
[17:44:55.005]                             invokeRestart(restart)
[17:44:55.005]                             muffled <- TRUE
[17:44:55.005]                             break
[17:44:55.005]                           }
[17:44:55.005]                         }
[17:44:55.005]                       }
[17:44:55.005]                       invisible(muffled)
[17:44:55.005]                     }
[17:44:55.005]                     muffleCondition(cond, pattern = "^muffle")
[17:44:55.005]                   }
[17:44:55.005]                 }
[17:44:55.005]             }
[17:44:55.005]         }))
[17:44:55.005]     }, error = function(ex) {
[17:44:55.005]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:55.005]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:55.005]                 ...future.rng), started = ...future.startTime, 
[17:44:55.005]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:55.005]             version = "1.8"), class = "FutureResult")
[17:44:55.005]     }, finally = {
[17:44:55.005]         if (!identical(...future.workdir, getwd())) 
[17:44:55.005]             setwd(...future.workdir)
[17:44:55.005]         {
[17:44:55.005]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:55.005]                 ...future.oldOptions$nwarnings <- NULL
[17:44:55.005]             }
[17:44:55.005]             base::options(...future.oldOptions)
[17:44:55.005]             if (.Platform$OS.type == "windows") {
[17:44:55.005]                 old_names <- names(...future.oldEnvVars)
[17:44:55.005]                 envs <- base::Sys.getenv()
[17:44:55.005]                 names <- names(envs)
[17:44:55.005]                 common <- intersect(names, old_names)
[17:44:55.005]                 added <- setdiff(names, old_names)
[17:44:55.005]                 removed <- setdiff(old_names, names)
[17:44:55.005]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:55.005]                   envs[common]]
[17:44:55.005]                 NAMES <- toupper(changed)
[17:44:55.005]                 args <- list()
[17:44:55.005]                 for (kk in seq_along(NAMES)) {
[17:44:55.005]                   name <- changed[[kk]]
[17:44:55.005]                   NAME <- NAMES[[kk]]
[17:44:55.005]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:55.005]                     next
[17:44:55.005]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:55.005]                 }
[17:44:55.005]                 NAMES <- toupper(added)
[17:44:55.005]                 for (kk in seq_along(NAMES)) {
[17:44:55.005]                   name <- added[[kk]]
[17:44:55.005]                   NAME <- NAMES[[kk]]
[17:44:55.005]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:55.005]                     next
[17:44:55.005]                   args[[name]] <- ""
[17:44:55.005]                 }
[17:44:55.005]                 NAMES <- toupper(removed)
[17:44:55.005]                 for (kk in seq_along(NAMES)) {
[17:44:55.005]                   name <- removed[[kk]]
[17:44:55.005]                   NAME <- NAMES[[kk]]
[17:44:55.005]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:55.005]                     next
[17:44:55.005]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:55.005]                 }
[17:44:55.005]                 if (length(args) > 0) 
[17:44:55.005]                   base::do.call(base::Sys.setenv, args = args)
[17:44:55.005]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:55.005]             }
[17:44:55.005]             else {
[17:44:55.005]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:55.005]             }
[17:44:55.005]             {
[17:44:55.005]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:55.005]                   0L) {
[17:44:55.005]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:55.005]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:55.005]                   base::options(opts)
[17:44:55.005]                 }
[17:44:55.005]                 {
[17:44:55.005]                   {
[17:44:55.005]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:55.005]                     NULL
[17:44:55.005]                   }
[17:44:55.005]                   options(future.plan = NULL)
[17:44:55.005]                   if (is.na(NA_character_)) 
[17:44:55.005]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:55.005]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:55.005]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:55.005]                     .init = FALSE)
[17:44:55.005]                 }
[17:44:55.005]             }
[17:44:55.005]         }
[17:44:55.005]     })
[17:44:55.005]     if (TRUE) {
[17:44:55.005]         base::sink(type = "output", split = FALSE)
[17:44:55.005]         if (TRUE) {
[17:44:55.005]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:55.005]         }
[17:44:55.005]         else {
[17:44:55.005]             ...future.result["stdout"] <- base::list(NULL)
[17:44:55.005]         }
[17:44:55.005]         base::close(...future.stdout)
[17:44:55.005]         ...future.stdout <- NULL
[17:44:55.005]     }
[17:44:55.005]     ...future.result$conditions <- ...future.conditions
[17:44:55.005]     ...future.result$finished <- base::Sys.time()
[17:44:55.005]     ...future.result
[17:44:55.005] }
[17:44:55.008] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[17:44:55.008] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[17:44:55.008] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[17:44:55.009] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:44:55.009] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:44:55.009] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:44:55.009] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:44:55.010] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:44:55.010] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:44:55.010] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:44:55.010] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:44:55.011] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[17:44:55.011] MultisessionFuture started
[17:44:55.011] - Launch lazy future ... done
[17:44:55.011] run() for ‘MultisessionFuture’ ... done
[17:44:55.012] Created future:
[17:44:55.012] MultisessionFuture:
[17:44:55.012] Label: ‘future_replicate-2’
[17:44:55.012] Expression:
[17:44:55.012] {
[17:44:55.012]     do.call(function(...) {
[17:44:55.012]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:55.012]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:55.012]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:55.012]             on.exit(options(oopts), add = TRUE)
[17:44:55.012]         }
[17:44:55.012]         {
[17:44:55.012]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:55.012]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:55.012]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:55.012]                   envir = globalenv(), inherits = FALSE)
[17:44:55.012]                 ...future.FUN(...future.X_jj, ...)
[17:44:55.012]             })
[17:44:55.012]         }
[17:44:55.012]     }, args = future.call.arguments)
[17:44:55.012] }
[17:44:55.012] Lazy evaluation: FALSE
[17:44:55.012] Asynchronous evaluation: TRUE
[17:44:55.012] Local evaluation: TRUE
[17:44:55.012] Environment: R_GlobalEnv
[17:44:55.012] Capture standard output: TRUE
[17:44:55.012] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:55.012] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:55.012] Packages: <none>
[17:44:55.012] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:55.012] Resolved: FALSE
[17:44:55.012] Value: <not collected>
[17:44:55.012] Conditions captured: <none>
[17:44:55.012] Early signaling: FALSE
[17:44:55.012] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:55.012] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:55.023] Chunk #2 of 2 ... DONE
[17:44:55.023] Launching 2 futures (chunks) ... DONE
[17:44:55.023] Resolving 2 futures (chunks) ...
[17:44:55.024] resolve() on list ...
[17:44:55.024]  recursive: 0
[17:44:55.024]  length: 2
[17:44:55.024] 
[17:44:55.024] receiveMessageFromWorker() for ClusterFuture ...
[17:44:55.024] - Validating connection of MultisessionFuture
[17:44:55.025] - received message: FutureResult
[17:44:55.025] - Received FutureResult
[17:44:55.025] - Erased future from FutureRegistry
[17:44:55.025] result() for ClusterFuture ...
[17:44:55.025] - result already collected: FutureResult
[17:44:55.025] result() for ClusterFuture ... done
[17:44:55.025] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:55.025] Future #1
[17:44:55.025] result() for ClusterFuture ...
[17:44:55.025] - result already collected: FutureResult
[17:44:55.026] result() for ClusterFuture ... done
[17:44:55.026] result() for ClusterFuture ...
[17:44:55.026] - result already collected: FutureResult
[17:44:55.026] result() for ClusterFuture ... done
[17:44:55.026] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:44:55.026] - nx: 2
[17:44:55.026] - relay: TRUE
[17:44:55.026] - stdout: TRUE
[17:44:55.026] - signal: TRUE
[17:44:55.026] - resignal: FALSE
[17:44:55.026] - force: TRUE
[17:44:55.026] - relayed: [n=2] FALSE, FALSE
[17:44:55.027] - queued futures: [n=2] FALSE, FALSE
[17:44:55.027]  - until=1
[17:44:55.027]  - relaying element #1
[17:44:55.027] result() for ClusterFuture ...
[17:44:55.027] - result already collected: FutureResult
[17:44:55.027] result() for ClusterFuture ... done
[17:44:55.027] result() for ClusterFuture ...
[17:44:55.027] - result already collected: FutureResult
[17:44:55.027] result() for ClusterFuture ... done
[17:44:55.027] result() for ClusterFuture ...
[17:44:55.028] - result already collected: FutureResult
[17:44:55.028] result() for ClusterFuture ... done
[17:44:55.028] result() for ClusterFuture ...
[17:44:55.028] - result already collected: FutureResult
[17:44:55.028] result() for ClusterFuture ... done
[17:44:55.028] - relayed: [n=2] TRUE, FALSE
[17:44:55.028] - queued futures: [n=2] TRUE, FALSE
[17:44:55.028] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:44:55.028]  length: 1 (resolved future 1)
[17:44:55.053] receiveMessageFromWorker() for ClusterFuture ...
[17:44:55.053] - Validating connection of MultisessionFuture
[17:44:55.053] - received message: FutureResult
[17:44:55.053] - Received FutureResult
[17:44:55.054] - Erased future from FutureRegistry
[17:44:55.054] result() for ClusterFuture ...
[17:44:55.054] - result already collected: FutureResult
[17:44:55.054] result() for ClusterFuture ... done
[17:44:55.054] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:55.054] Future #2
[17:44:55.054] result() for ClusterFuture ...
[17:44:55.054] - result already collected: FutureResult
[17:44:55.054] result() for ClusterFuture ... done
[17:44:55.054] result() for ClusterFuture ...
[17:44:55.054] - result already collected: FutureResult
[17:44:55.055] result() for ClusterFuture ... done
[17:44:55.055] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:44:55.055] - nx: 2
[17:44:55.055] - relay: TRUE
[17:44:55.055] - stdout: TRUE
[17:44:55.055] - signal: TRUE
[17:44:55.055] - resignal: FALSE
[17:44:55.055] - force: TRUE
[17:44:55.055] - relayed: [n=2] TRUE, FALSE
[17:44:55.055] - queued futures: [n=2] TRUE, FALSE
[17:44:55.055]  - until=2
[17:44:55.056]  - relaying element #2
[17:44:55.056] result() for ClusterFuture ...
[17:44:55.056] - result already collected: FutureResult
[17:44:55.056] result() for ClusterFuture ... done
[17:44:55.056] result() for ClusterFuture ...
[17:44:55.056] - result already collected: FutureResult
[17:44:55.056] result() for ClusterFuture ... done
[17:44:55.056] result() for ClusterFuture ...
[17:44:55.056] - result already collected: FutureResult
[17:44:55.056] result() for ClusterFuture ... done
[17:44:55.056] result() for ClusterFuture ...
[17:44:55.057] - result already collected: FutureResult
[17:44:55.057] result() for ClusterFuture ... done
[17:44:55.057] - relayed: [n=2] TRUE, TRUE
[17:44:55.057] - queued futures: [n=2] TRUE, TRUE
[17:44:55.057] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:44:55.057]  length: 0 (resolved future 2)
[17:44:55.057] Relaying remaining futures
[17:44:55.057] signalConditionsASAP(NULL, pos=0) ...
[17:44:55.057] - nx: 2
[17:44:55.057] - relay: TRUE
[17:44:55.057] - stdout: TRUE
[17:44:55.057] - signal: TRUE
[17:44:55.058] - resignal: FALSE
[17:44:55.058] - force: TRUE
[17:44:55.058] - relayed: [n=2] TRUE, TRUE
[17:44:55.058] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:44:55.058] - relayed: [n=2] TRUE, TRUE
[17:44:55.058] - queued futures: [n=2] TRUE, TRUE
[17:44:55.058] signalConditionsASAP(NULL, pos=0) ... done
[17:44:55.058] resolve() on list ... DONE
[17:44:55.058] result() for ClusterFuture ...
[17:44:55.058] - result already collected: FutureResult
[17:44:55.058] result() for ClusterFuture ... done
[17:44:55.059] result() for ClusterFuture ...
[17:44:55.059] - result already collected: FutureResult
[17:44:55.059] result() for ClusterFuture ... done
[17:44:55.059] result() for ClusterFuture ...
[17:44:55.059] - result already collected: FutureResult
[17:44:55.059] result() for ClusterFuture ... done
[17:44:55.059] result() for ClusterFuture ...
[17:44:55.059] - result already collected: FutureResult
[17:44:55.059] result() for ClusterFuture ... done
[17:44:55.059]  - Number of value chunks collected: 2
[17:44:55.059] Resolving 2 futures (chunks) ... DONE
[17:44:55.060] Reducing values from 2 chunks ...
[17:44:55.060]  - Number of values collected after concatenation: 5
[17:44:55.060]  - Number of values expected: 5
[17:44:55.060] Reducing values from 2 chunks ... DONE
[17:44:55.060] future_lapply() ... DONE
[17:44:55.060] future_lapply() ...
[17:44:55.061] Generating random seeds ...
[17:44:55.061] Generating random seed streams for 5 elements ...
[17:44:55.061] Generating random seed streams for 5 elements ... DONE
[17:44:55.061] Generating random seeds ... DONE
[17:44:55.061] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:44:55.065] Number of chunks: 2
[17:44:55.065] getGlobalsAndPackagesXApply() ...
[17:44:55.065]  - future.globals: TRUE
[17:44:55.066] getGlobalsAndPackages() ...
[17:44:55.066] Searching for globals...
[17:44:55.067] - globals found: [2] ‘FUN’, ‘sample’
[17:44:55.067] Searching for globals ... DONE
[17:44:55.067] Resolving globals: FALSE
[17:44:55.067] The total size of the 1 globals is 616 bytes (616 bytes)
[17:44:55.068] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:44:55.068] - globals: [1] ‘FUN’
[17:44:55.068] 
[17:44:55.068] getGlobalsAndPackages() ... DONE
[17:44:55.068]  - globals found/used: [n=1] ‘FUN’
[17:44:55.068]  - needed namespaces: [n=0] 
[17:44:55.068] Finding globals ... DONE
[17:44:55.068]  - use_args: TRUE
[17:44:55.069]  - Getting '...' globals ...
[17:44:55.069] resolve() on list ...
[17:44:55.069]  recursive: 0
[17:44:55.069]  length: 1
[17:44:55.069]  elements: ‘...’
[17:44:55.069]  length: 0 (resolved future 1)
[17:44:55.069] resolve() on list ... DONE
[17:44:55.069]    - '...' content: [n=0] 
[17:44:55.070] List of 1
[17:44:55.070]  $ ...: list()
[17:44:55.070]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:55.070]  - attr(*, "where")=List of 1
[17:44:55.070]   ..$ ...:<environment: 0x558389435fc0> 
[17:44:55.070]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:55.070]  - attr(*, "resolved")= logi TRUE
[17:44:55.070]  - attr(*, "total_size")= num NA
[17:44:55.072]  - Getting '...' globals ... DONE
[17:44:55.072] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:44:55.072] List of 2
[17:44:55.072]  $ ...future.FUN:function (...)  
[17:44:55.072]  $ ...          : list()
[17:44:55.072]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:55.072]  - attr(*, "where")=List of 2
[17:44:55.072]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:44:55.072]   ..$ ...          :<environment: 0x558389435fc0> 
[17:44:55.072]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:55.072]  - attr(*, "resolved")= logi FALSE
[17:44:55.072]  - attr(*, "total_size")= num 616
[17:44:55.075] Packages to be attached in all futures: [n=0] 
[17:44:55.075] getGlobalsAndPackagesXApply() ... DONE
[17:44:55.075] Number of futures (= number of chunks): 2
[17:44:55.075] Launching 2 futures (chunks) ...
[17:44:55.075] Chunk #1 of 2 ...
[17:44:55.076]  - Finding globals in 'X' for chunk #1 ...
[17:44:55.076] getGlobalsAndPackages() ...
[17:44:55.076] Searching for globals...
[17:44:55.076] 
[17:44:55.076] Searching for globals ... DONE
[17:44:55.076] - globals: [0] <none>
[17:44:55.076] getGlobalsAndPackages() ... DONE
[17:44:55.076]    + additional globals found: [n=0] 
[17:44:55.076]    + additional namespaces needed: [n=0] 
[17:44:55.077]  - Finding globals in 'X' for chunk #1 ... DONE
[17:44:55.077]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:55.077]  - seeds: [2] <seeds>
[17:44:55.077]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:55.077] getGlobalsAndPackages() ...
[17:44:55.077] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:55.077] Resolving globals: FALSE
[17:44:55.077] Tweak future expression to call with '...' arguments ...
[17:44:55.077] {
[17:44:55.077]     do.call(function(...) {
[17:44:55.077]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:55.077]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:55.077]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:55.077]             on.exit(options(oopts), add = TRUE)
[17:44:55.077]         }
[17:44:55.077]         {
[17:44:55.077]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:55.077]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:55.077]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:55.077]                   envir = globalenv(), inherits = FALSE)
[17:44:55.077]                 ...future.FUN(...future.X_jj, ...)
[17:44:55.077]             })
[17:44:55.077]         }
[17:44:55.077]     }, args = future.call.arguments)
[17:44:55.077] }
[17:44:55.078] Tweak future expression to call with '...' arguments ... DONE
[17:44:55.078] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:55.078] 
[17:44:55.078] getGlobalsAndPackages() ... DONE
[17:44:55.078] run() for ‘Future’ ...
[17:44:55.079] - state: ‘created’
[17:44:55.079] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:44:55.092] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:55.093] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:44:55.093]   - Field: ‘node’
[17:44:55.093]   - Field: ‘label’
[17:44:55.093]   - Field: ‘local’
[17:44:55.093]   - Field: ‘owner’
[17:44:55.093]   - Field: ‘envir’
[17:44:55.093]   - Field: ‘workers’
[17:44:55.093]   - Field: ‘packages’
[17:44:55.093]   - Field: ‘gc’
[17:44:55.093]   - Field: ‘conditions’
[17:44:55.093]   - Field: ‘persistent’
[17:44:55.094]   - Field: ‘expr’
[17:44:55.094]   - Field: ‘uuid’
[17:44:55.094]   - Field: ‘seed’
[17:44:55.094]   - Field: ‘version’
[17:44:55.094]   - Field: ‘result’
[17:44:55.094]   - Field: ‘asynchronous’
[17:44:55.094]   - Field: ‘calls’
[17:44:55.094]   - Field: ‘globals’
[17:44:55.094]   - Field: ‘stdout’
[17:44:55.094]   - Field: ‘earlySignal’
[17:44:55.094]   - Field: ‘lazy’
[17:44:55.095]   - Field: ‘state’
[17:44:55.095] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:44:55.095] - Launch lazy future ...
[17:44:55.095] Packages needed by the future expression (n = 0): <none>
[17:44:55.095] Packages needed by future strategies (n = 0): <none>
[17:44:55.096] {
[17:44:55.096]     {
[17:44:55.096]         {
[17:44:55.096]             ...future.startTime <- base::Sys.time()
[17:44:55.096]             {
[17:44:55.096]                 {
[17:44:55.096]                   {
[17:44:55.096]                     {
[17:44:55.096]                       base::local({
[17:44:55.096]                         has_future <- base::requireNamespace("future", 
[17:44:55.096]                           quietly = TRUE)
[17:44:55.096]                         if (has_future) {
[17:44:55.096]                           ns <- base::getNamespace("future")
[17:44:55.096]                           version <- ns[[".package"]][["version"]]
[17:44:55.096]                           if (is.null(version)) 
[17:44:55.096]                             version <- utils::packageVersion("future")
[17:44:55.096]                         }
[17:44:55.096]                         else {
[17:44:55.096]                           version <- NULL
[17:44:55.096]                         }
[17:44:55.096]                         if (!has_future || version < "1.8.0") {
[17:44:55.096]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:55.096]                             "", base::R.version$version.string), 
[17:44:55.096]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:55.096]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:55.096]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:55.096]                               "release", "version")], collapse = " "), 
[17:44:55.096]                             hostname = base::Sys.info()[["nodename"]])
[17:44:55.096]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:55.096]                             info)
[17:44:55.096]                           info <- base::paste(info, collapse = "; ")
[17:44:55.096]                           if (!has_future) {
[17:44:55.096]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:55.096]                               info)
[17:44:55.096]                           }
[17:44:55.096]                           else {
[17:44:55.096]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:55.096]                               info, version)
[17:44:55.096]                           }
[17:44:55.096]                           base::stop(msg)
[17:44:55.096]                         }
[17:44:55.096]                       })
[17:44:55.096]                     }
[17:44:55.096]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:55.096]                     base::options(mc.cores = 1L)
[17:44:55.096]                   }
[17:44:55.096]                   ...future.strategy.old <- future::plan("list")
[17:44:55.096]                   options(future.plan = NULL)
[17:44:55.096]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:55.096]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:55.096]                 }
[17:44:55.096]                 ...future.workdir <- getwd()
[17:44:55.096]             }
[17:44:55.096]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:55.096]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:55.096]         }
[17:44:55.096]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:55.096]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:55.096]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:55.096]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:55.096]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:55.096]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:55.096]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:55.096]             base::names(...future.oldOptions))
[17:44:55.096]     }
[17:44:55.096]     if (FALSE) {
[17:44:55.096]     }
[17:44:55.096]     else {
[17:44:55.096]         if (TRUE) {
[17:44:55.096]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:55.096]                 open = "w")
[17:44:55.096]         }
[17:44:55.096]         else {
[17:44:55.096]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:55.096]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:55.096]         }
[17:44:55.096]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:55.096]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:55.096]             base::sink(type = "output", split = FALSE)
[17:44:55.096]             base::close(...future.stdout)
[17:44:55.096]         }, add = TRUE)
[17:44:55.096]     }
[17:44:55.096]     ...future.frame <- base::sys.nframe()
[17:44:55.096]     ...future.conditions <- base::list()
[17:44:55.096]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:55.096]     if (FALSE) {
[17:44:55.096]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:55.096]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:55.096]     }
[17:44:55.096]     ...future.result <- base::tryCatch({
[17:44:55.096]         base::withCallingHandlers({
[17:44:55.096]             ...future.value <- base::withVisible(base::local({
[17:44:55.096]                 ...future.makeSendCondition <- base::local({
[17:44:55.096]                   sendCondition <- NULL
[17:44:55.096]                   function(frame = 1L) {
[17:44:55.096]                     if (is.function(sendCondition)) 
[17:44:55.096]                       return(sendCondition)
[17:44:55.096]                     ns <- getNamespace("parallel")
[17:44:55.096]                     if (exists("sendData", mode = "function", 
[17:44:55.096]                       envir = ns)) {
[17:44:55.096]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:55.096]                         envir = ns)
[17:44:55.096]                       envir <- sys.frame(frame)
[17:44:55.096]                       master <- NULL
[17:44:55.096]                       while (!identical(envir, .GlobalEnv) && 
[17:44:55.096]                         !identical(envir, emptyenv())) {
[17:44:55.096]                         if (exists("master", mode = "list", envir = envir, 
[17:44:55.096]                           inherits = FALSE)) {
[17:44:55.096]                           master <- get("master", mode = "list", 
[17:44:55.096]                             envir = envir, inherits = FALSE)
[17:44:55.096]                           if (inherits(master, c("SOCKnode", 
[17:44:55.096]                             "SOCK0node"))) {
[17:44:55.096]                             sendCondition <<- function(cond) {
[17:44:55.096]                               data <- list(type = "VALUE", value = cond, 
[17:44:55.096]                                 success = TRUE)
[17:44:55.096]                               parallel_sendData(master, data)
[17:44:55.096]                             }
[17:44:55.096]                             return(sendCondition)
[17:44:55.096]                           }
[17:44:55.096]                         }
[17:44:55.096]                         frame <- frame + 1L
[17:44:55.096]                         envir <- sys.frame(frame)
[17:44:55.096]                       }
[17:44:55.096]                     }
[17:44:55.096]                     sendCondition <<- function(cond) NULL
[17:44:55.096]                   }
[17:44:55.096]                 })
[17:44:55.096]                 withCallingHandlers({
[17:44:55.096]                   {
[17:44:55.096]                     do.call(function(...) {
[17:44:55.096]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:55.096]                       if (!identical(...future.globals.maxSize.org, 
[17:44:55.096]                         ...future.globals.maxSize)) {
[17:44:55.096]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:55.096]                         on.exit(options(oopts), add = TRUE)
[17:44:55.096]                       }
[17:44:55.096]                       {
[17:44:55.096]                         lapply(seq_along(...future.elements_ii), 
[17:44:55.096]                           FUN = function(jj) {
[17:44:55.096]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:55.096]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:55.096]                               envir = globalenv(), inherits = FALSE)
[17:44:55.096]                             ...future.FUN(...future.X_jj, ...)
[17:44:55.096]                           })
[17:44:55.096]                       }
[17:44:55.096]                     }, args = future.call.arguments)
[17:44:55.096]                   }
[17:44:55.096]                 }, immediateCondition = function(cond) {
[17:44:55.096]                   sendCondition <- ...future.makeSendCondition()
[17:44:55.096]                   sendCondition(cond)
[17:44:55.096]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:55.096]                   {
[17:44:55.096]                     inherits <- base::inherits
[17:44:55.096]                     invokeRestart <- base::invokeRestart
[17:44:55.096]                     is.null <- base::is.null
[17:44:55.096]                     muffled <- FALSE
[17:44:55.096]                     if (inherits(cond, "message")) {
[17:44:55.096]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:55.096]                       if (muffled) 
[17:44:55.096]                         invokeRestart("muffleMessage")
[17:44:55.096]                     }
[17:44:55.096]                     else if (inherits(cond, "warning")) {
[17:44:55.096]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:55.096]                       if (muffled) 
[17:44:55.096]                         invokeRestart("muffleWarning")
[17:44:55.096]                     }
[17:44:55.096]                     else if (inherits(cond, "condition")) {
[17:44:55.096]                       if (!is.null(pattern)) {
[17:44:55.096]                         computeRestarts <- base::computeRestarts
[17:44:55.096]                         grepl <- base::grepl
[17:44:55.096]                         restarts <- computeRestarts(cond)
[17:44:55.096]                         for (restart in restarts) {
[17:44:55.096]                           name <- restart$name
[17:44:55.096]                           if (is.null(name)) 
[17:44:55.096]                             next
[17:44:55.096]                           if (!grepl(pattern, name)) 
[17:44:55.096]                             next
[17:44:55.096]                           invokeRestart(restart)
[17:44:55.096]                           muffled <- TRUE
[17:44:55.096]                           break
[17:44:55.096]                         }
[17:44:55.096]                       }
[17:44:55.096]                     }
[17:44:55.096]                     invisible(muffled)
[17:44:55.096]                   }
[17:44:55.096]                   muffleCondition(cond)
[17:44:55.096]                 })
[17:44:55.096]             }))
[17:44:55.096]             future::FutureResult(value = ...future.value$value, 
[17:44:55.096]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:55.096]                   ...future.rng), globalenv = if (FALSE) 
[17:44:55.096]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:55.096]                     ...future.globalenv.names))
[17:44:55.096]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:55.096]         }, condition = base::local({
[17:44:55.096]             c <- base::c
[17:44:55.096]             inherits <- base::inherits
[17:44:55.096]             invokeRestart <- base::invokeRestart
[17:44:55.096]             length <- base::length
[17:44:55.096]             list <- base::list
[17:44:55.096]             seq.int <- base::seq.int
[17:44:55.096]             signalCondition <- base::signalCondition
[17:44:55.096]             sys.calls <- base::sys.calls
[17:44:55.096]             `[[` <- base::`[[`
[17:44:55.096]             `+` <- base::`+`
[17:44:55.096]             `<<-` <- base::`<<-`
[17:44:55.096]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:55.096]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:55.096]                   3L)]
[17:44:55.096]             }
[17:44:55.096]             function(cond) {
[17:44:55.096]                 is_error <- inherits(cond, "error")
[17:44:55.096]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:55.096]                   NULL)
[17:44:55.096]                 if (is_error) {
[17:44:55.096]                   sessionInformation <- function() {
[17:44:55.096]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:55.096]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:55.096]                       search = base::search(), system = base::Sys.info())
[17:44:55.096]                   }
[17:44:55.096]                   ...future.conditions[[length(...future.conditions) + 
[17:44:55.096]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:55.096]                     cond$call), session = sessionInformation(), 
[17:44:55.096]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:55.096]                   signalCondition(cond)
[17:44:55.096]                 }
[17:44:55.096]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:55.096]                 "immediateCondition"))) {
[17:44:55.096]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:55.096]                   ...future.conditions[[length(...future.conditions) + 
[17:44:55.096]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:55.096]                   if (TRUE && !signal) {
[17:44:55.096]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:55.096]                     {
[17:44:55.096]                       inherits <- base::inherits
[17:44:55.096]                       invokeRestart <- base::invokeRestart
[17:44:55.096]                       is.null <- base::is.null
[17:44:55.096]                       muffled <- FALSE
[17:44:55.096]                       if (inherits(cond, "message")) {
[17:44:55.096]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:55.096]                         if (muffled) 
[17:44:55.096]                           invokeRestart("muffleMessage")
[17:44:55.096]                       }
[17:44:55.096]                       else if (inherits(cond, "warning")) {
[17:44:55.096]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:55.096]                         if (muffled) 
[17:44:55.096]                           invokeRestart("muffleWarning")
[17:44:55.096]                       }
[17:44:55.096]                       else if (inherits(cond, "condition")) {
[17:44:55.096]                         if (!is.null(pattern)) {
[17:44:55.096]                           computeRestarts <- base::computeRestarts
[17:44:55.096]                           grepl <- base::grepl
[17:44:55.096]                           restarts <- computeRestarts(cond)
[17:44:55.096]                           for (restart in restarts) {
[17:44:55.096]                             name <- restart$name
[17:44:55.096]                             if (is.null(name)) 
[17:44:55.096]                               next
[17:44:55.096]                             if (!grepl(pattern, name)) 
[17:44:55.096]                               next
[17:44:55.096]                             invokeRestart(restart)
[17:44:55.096]                             muffled <- TRUE
[17:44:55.096]                             break
[17:44:55.096]                           }
[17:44:55.096]                         }
[17:44:55.096]                       }
[17:44:55.096]                       invisible(muffled)
[17:44:55.096]                     }
[17:44:55.096]                     muffleCondition(cond, pattern = "^muffle")
[17:44:55.096]                   }
[17:44:55.096]                 }
[17:44:55.096]                 else {
[17:44:55.096]                   if (TRUE) {
[17:44:55.096]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:55.096]                     {
[17:44:55.096]                       inherits <- base::inherits
[17:44:55.096]                       invokeRestart <- base::invokeRestart
[17:44:55.096]                       is.null <- base::is.null
[17:44:55.096]                       muffled <- FALSE
[17:44:55.096]                       if (inherits(cond, "message")) {
[17:44:55.096]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:55.096]                         if (muffled) 
[17:44:55.096]                           invokeRestart("muffleMessage")
[17:44:55.096]                       }
[17:44:55.096]                       else if (inherits(cond, "warning")) {
[17:44:55.096]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:55.096]                         if (muffled) 
[17:44:55.096]                           invokeRestart("muffleWarning")
[17:44:55.096]                       }
[17:44:55.096]                       else if (inherits(cond, "condition")) {
[17:44:55.096]                         if (!is.null(pattern)) {
[17:44:55.096]                           computeRestarts <- base::computeRestarts
[17:44:55.096]                           grepl <- base::grepl
[17:44:55.096]                           restarts <- computeRestarts(cond)
[17:44:55.096]                           for (restart in restarts) {
[17:44:55.096]                             name <- restart$name
[17:44:55.096]                             if (is.null(name)) 
[17:44:55.096]                               next
[17:44:55.096]                             if (!grepl(pattern, name)) 
[17:44:55.096]                               next
[17:44:55.096]                             invokeRestart(restart)
[17:44:55.096]                             muffled <- TRUE
[17:44:55.096]                             break
[17:44:55.096]                           }
[17:44:55.096]                         }
[17:44:55.096]                       }
[17:44:55.096]                       invisible(muffled)
[17:44:55.096]                     }
[17:44:55.096]                     muffleCondition(cond, pattern = "^muffle")
[17:44:55.096]                   }
[17:44:55.096]                 }
[17:44:55.096]             }
[17:44:55.096]         }))
[17:44:55.096]     }, error = function(ex) {
[17:44:55.096]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:55.096]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:55.096]                 ...future.rng), started = ...future.startTime, 
[17:44:55.096]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:55.096]             version = "1.8"), class = "FutureResult")
[17:44:55.096]     }, finally = {
[17:44:55.096]         if (!identical(...future.workdir, getwd())) 
[17:44:55.096]             setwd(...future.workdir)
[17:44:55.096]         {
[17:44:55.096]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:55.096]                 ...future.oldOptions$nwarnings <- NULL
[17:44:55.096]             }
[17:44:55.096]             base::options(...future.oldOptions)
[17:44:55.096]             if (.Platform$OS.type == "windows") {
[17:44:55.096]                 old_names <- names(...future.oldEnvVars)
[17:44:55.096]                 envs <- base::Sys.getenv()
[17:44:55.096]                 names <- names(envs)
[17:44:55.096]                 common <- intersect(names, old_names)
[17:44:55.096]                 added <- setdiff(names, old_names)
[17:44:55.096]                 removed <- setdiff(old_names, names)
[17:44:55.096]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:55.096]                   envs[common]]
[17:44:55.096]                 NAMES <- toupper(changed)
[17:44:55.096]                 args <- list()
[17:44:55.096]                 for (kk in seq_along(NAMES)) {
[17:44:55.096]                   name <- changed[[kk]]
[17:44:55.096]                   NAME <- NAMES[[kk]]
[17:44:55.096]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:55.096]                     next
[17:44:55.096]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:55.096]                 }
[17:44:55.096]                 NAMES <- toupper(added)
[17:44:55.096]                 for (kk in seq_along(NAMES)) {
[17:44:55.096]                   name <- added[[kk]]
[17:44:55.096]                   NAME <- NAMES[[kk]]
[17:44:55.096]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:55.096]                     next
[17:44:55.096]                   args[[name]] <- ""
[17:44:55.096]                 }
[17:44:55.096]                 NAMES <- toupper(removed)
[17:44:55.096]                 for (kk in seq_along(NAMES)) {
[17:44:55.096]                   name <- removed[[kk]]
[17:44:55.096]                   NAME <- NAMES[[kk]]
[17:44:55.096]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:55.096]                     next
[17:44:55.096]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:55.096]                 }
[17:44:55.096]                 if (length(args) > 0) 
[17:44:55.096]                   base::do.call(base::Sys.setenv, args = args)
[17:44:55.096]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:55.096]             }
[17:44:55.096]             else {
[17:44:55.096]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:55.096]             }
[17:44:55.096]             {
[17:44:55.096]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:55.096]                   0L) {
[17:44:55.096]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:55.096]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:55.096]                   base::options(opts)
[17:44:55.096]                 }
[17:44:55.096]                 {
[17:44:55.096]                   {
[17:44:55.096]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:55.096]                     NULL
[17:44:55.096]                   }
[17:44:55.096]                   options(future.plan = NULL)
[17:44:55.096]                   if (is.na(NA_character_)) 
[17:44:55.096]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:55.096]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:55.096]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:55.096]                     .init = FALSE)
[17:44:55.096]                 }
[17:44:55.096]             }
[17:44:55.096]         }
[17:44:55.096]     })
[17:44:55.096]     if (TRUE) {
[17:44:55.096]         base::sink(type = "output", split = FALSE)
[17:44:55.096]         if (TRUE) {
[17:44:55.096]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:55.096]         }
[17:44:55.096]         else {
[17:44:55.096]             ...future.result["stdout"] <- base::list(NULL)
[17:44:55.096]         }
[17:44:55.096]         base::close(...future.stdout)
[17:44:55.096]         ...future.stdout <- NULL
[17:44:55.096]     }
[17:44:55.096]     ...future.result$conditions <- ...future.conditions
[17:44:55.096]     ...future.result$finished <- base::Sys.time()
[17:44:55.096]     ...future.result
[17:44:55.096] }
[17:44:55.098] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[17:44:55.099] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[17:44:55.099] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[17:44:55.099] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:44:55.099] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:44:55.100] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:44:55.100] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:44:55.100] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:44:55.100] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:44:55.101] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:44:55.101] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:44:55.101] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[17:44:55.101] MultisessionFuture started
[17:44:55.102] - Launch lazy future ... done
[17:44:55.102] run() for ‘MultisessionFuture’ ... done
[17:44:55.102] Created future:
[17:44:55.102] MultisessionFuture:
[17:44:55.102] Label: ‘future_replicate-1’
[17:44:55.102] Expression:
[17:44:55.102] {
[17:44:55.102]     do.call(function(...) {
[17:44:55.102]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:55.102]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:55.102]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:55.102]             on.exit(options(oopts), add = TRUE)
[17:44:55.102]         }
[17:44:55.102]         {
[17:44:55.102]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:55.102]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:55.102]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:55.102]                   envir = globalenv(), inherits = FALSE)
[17:44:55.102]                 ...future.FUN(...future.X_jj, ...)
[17:44:55.102]             })
[17:44:55.102]         }
[17:44:55.102]     }, args = future.call.arguments)
[17:44:55.102] }
[17:44:55.102] Lazy evaluation: FALSE
[17:44:55.102] Asynchronous evaluation: TRUE
[17:44:55.102] Local evaluation: TRUE
[17:44:55.102] Environment: R_GlobalEnv
[17:44:55.102] Capture standard output: TRUE
[17:44:55.102] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:55.102] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:55.102] Packages: <none>
[17:44:55.102] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:55.102] Resolved: FALSE
[17:44:55.102] Value: <not collected>
[17:44:55.102] Conditions captured: <none>
[17:44:55.102] Early signaling: FALSE
[17:44:55.102] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:55.102] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:55.113] Chunk #1 of 2 ... DONE
[17:44:55.113] Chunk #2 of 2 ...
[17:44:55.114]  - Finding globals in 'X' for chunk #2 ...
[17:44:55.114] getGlobalsAndPackages() ...
[17:44:55.114] Searching for globals...
[17:44:55.114] 
[17:44:55.114] Searching for globals ... DONE
[17:44:55.114] - globals: [0] <none>
[17:44:55.114] getGlobalsAndPackages() ... DONE
[17:44:55.115]    + additional globals found: [n=0] 
[17:44:55.115]    + additional namespaces needed: [n=0] 
[17:44:55.115]  - Finding globals in 'X' for chunk #2 ... DONE
[17:44:55.115]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:55.115]  - seeds: [3] <seeds>
[17:44:55.115]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:55.115] getGlobalsAndPackages() ...
[17:44:55.115] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:55.115] Resolving globals: FALSE
[17:44:55.115] Tweak future expression to call with '...' arguments ...
[17:44:55.116] {
[17:44:55.116]     do.call(function(...) {
[17:44:55.116]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:55.116]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:55.116]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:55.116]             on.exit(options(oopts), add = TRUE)
[17:44:55.116]         }
[17:44:55.116]         {
[17:44:55.116]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:55.116]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:55.116]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:55.116]                   envir = globalenv(), inherits = FALSE)
[17:44:55.116]                 ...future.FUN(...future.X_jj, ...)
[17:44:55.116]             })
[17:44:55.116]         }
[17:44:55.116]     }, args = future.call.arguments)
[17:44:55.116] }
[17:44:55.116] Tweak future expression to call with '...' arguments ... DONE
[17:44:55.116] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:55.116] 
[17:44:55.116] getGlobalsAndPackages() ... DONE
[17:44:55.117] run() for ‘Future’ ...
[17:44:55.117] - state: ‘created’
[17:44:55.117] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:44:55.133] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:55.134] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:44:55.134]   - Field: ‘node’
[17:44:55.134]   - Field: ‘label’
[17:44:55.134]   - Field: ‘local’
[17:44:55.134]   - Field: ‘owner’
[17:44:55.134]   - Field: ‘envir’
[17:44:55.134]   - Field: ‘workers’
[17:44:55.134]   - Field: ‘packages’
[17:44:55.134]   - Field: ‘gc’
[17:44:55.134]   - Field: ‘conditions’
[17:44:55.135]   - Field: ‘persistent’
[17:44:55.135]   - Field: ‘expr’
[17:44:55.135]   - Field: ‘uuid’
[17:44:55.135]   - Field: ‘seed’
[17:44:55.135]   - Field: ‘version’
[17:44:55.135]   - Field: ‘result’
[17:44:55.135]   - Field: ‘asynchronous’
[17:44:55.135]   - Field: ‘calls’
[17:44:55.135]   - Field: ‘globals’
[17:44:55.135]   - Field: ‘stdout’
[17:44:55.135]   - Field: ‘earlySignal’
[17:44:55.136]   - Field: ‘lazy’
[17:44:55.136]   - Field: ‘state’
[17:44:55.136] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:44:55.136] - Launch lazy future ...
[17:44:55.136] Packages needed by the future expression (n = 0): <none>
[17:44:55.136] Packages needed by future strategies (n = 0): <none>
[17:44:55.137] {
[17:44:55.137]     {
[17:44:55.137]         {
[17:44:55.137]             ...future.startTime <- base::Sys.time()
[17:44:55.137]             {
[17:44:55.137]                 {
[17:44:55.137]                   {
[17:44:55.137]                     {
[17:44:55.137]                       base::local({
[17:44:55.137]                         has_future <- base::requireNamespace("future", 
[17:44:55.137]                           quietly = TRUE)
[17:44:55.137]                         if (has_future) {
[17:44:55.137]                           ns <- base::getNamespace("future")
[17:44:55.137]                           version <- ns[[".package"]][["version"]]
[17:44:55.137]                           if (is.null(version)) 
[17:44:55.137]                             version <- utils::packageVersion("future")
[17:44:55.137]                         }
[17:44:55.137]                         else {
[17:44:55.137]                           version <- NULL
[17:44:55.137]                         }
[17:44:55.137]                         if (!has_future || version < "1.8.0") {
[17:44:55.137]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:55.137]                             "", base::R.version$version.string), 
[17:44:55.137]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:55.137]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:55.137]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:55.137]                               "release", "version")], collapse = " "), 
[17:44:55.137]                             hostname = base::Sys.info()[["nodename"]])
[17:44:55.137]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:55.137]                             info)
[17:44:55.137]                           info <- base::paste(info, collapse = "; ")
[17:44:55.137]                           if (!has_future) {
[17:44:55.137]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:55.137]                               info)
[17:44:55.137]                           }
[17:44:55.137]                           else {
[17:44:55.137]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:55.137]                               info, version)
[17:44:55.137]                           }
[17:44:55.137]                           base::stop(msg)
[17:44:55.137]                         }
[17:44:55.137]                       })
[17:44:55.137]                     }
[17:44:55.137]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:55.137]                     base::options(mc.cores = 1L)
[17:44:55.137]                   }
[17:44:55.137]                   ...future.strategy.old <- future::plan("list")
[17:44:55.137]                   options(future.plan = NULL)
[17:44:55.137]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:55.137]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:55.137]                 }
[17:44:55.137]                 ...future.workdir <- getwd()
[17:44:55.137]             }
[17:44:55.137]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:55.137]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:55.137]         }
[17:44:55.137]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:55.137]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:55.137]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:55.137]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:55.137]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:55.137]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:55.137]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:55.137]             base::names(...future.oldOptions))
[17:44:55.137]     }
[17:44:55.137]     if (FALSE) {
[17:44:55.137]     }
[17:44:55.137]     else {
[17:44:55.137]         if (TRUE) {
[17:44:55.137]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:55.137]                 open = "w")
[17:44:55.137]         }
[17:44:55.137]         else {
[17:44:55.137]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:55.137]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:55.137]         }
[17:44:55.137]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:55.137]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:55.137]             base::sink(type = "output", split = FALSE)
[17:44:55.137]             base::close(...future.stdout)
[17:44:55.137]         }, add = TRUE)
[17:44:55.137]     }
[17:44:55.137]     ...future.frame <- base::sys.nframe()
[17:44:55.137]     ...future.conditions <- base::list()
[17:44:55.137]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:55.137]     if (FALSE) {
[17:44:55.137]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:55.137]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:55.137]     }
[17:44:55.137]     ...future.result <- base::tryCatch({
[17:44:55.137]         base::withCallingHandlers({
[17:44:55.137]             ...future.value <- base::withVisible(base::local({
[17:44:55.137]                 ...future.makeSendCondition <- base::local({
[17:44:55.137]                   sendCondition <- NULL
[17:44:55.137]                   function(frame = 1L) {
[17:44:55.137]                     if (is.function(sendCondition)) 
[17:44:55.137]                       return(sendCondition)
[17:44:55.137]                     ns <- getNamespace("parallel")
[17:44:55.137]                     if (exists("sendData", mode = "function", 
[17:44:55.137]                       envir = ns)) {
[17:44:55.137]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:55.137]                         envir = ns)
[17:44:55.137]                       envir <- sys.frame(frame)
[17:44:55.137]                       master <- NULL
[17:44:55.137]                       while (!identical(envir, .GlobalEnv) && 
[17:44:55.137]                         !identical(envir, emptyenv())) {
[17:44:55.137]                         if (exists("master", mode = "list", envir = envir, 
[17:44:55.137]                           inherits = FALSE)) {
[17:44:55.137]                           master <- get("master", mode = "list", 
[17:44:55.137]                             envir = envir, inherits = FALSE)
[17:44:55.137]                           if (inherits(master, c("SOCKnode", 
[17:44:55.137]                             "SOCK0node"))) {
[17:44:55.137]                             sendCondition <<- function(cond) {
[17:44:55.137]                               data <- list(type = "VALUE", value = cond, 
[17:44:55.137]                                 success = TRUE)
[17:44:55.137]                               parallel_sendData(master, data)
[17:44:55.137]                             }
[17:44:55.137]                             return(sendCondition)
[17:44:55.137]                           }
[17:44:55.137]                         }
[17:44:55.137]                         frame <- frame + 1L
[17:44:55.137]                         envir <- sys.frame(frame)
[17:44:55.137]                       }
[17:44:55.137]                     }
[17:44:55.137]                     sendCondition <<- function(cond) NULL
[17:44:55.137]                   }
[17:44:55.137]                 })
[17:44:55.137]                 withCallingHandlers({
[17:44:55.137]                   {
[17:44:55.137]                     do.call(function(...) {
[17:44:55.137]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:55.137]                       if (!identical(...future.globals.maxSize.org, 
[17:44:55.137]                         ...future.globals.maxSize)) {
[17:44:55.137]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:55.137]                         on.exit(options(oopts), add = TRUE)
[17:44:55.137]                       }
[17:44:55.137]                       {
[17:44:55.137]                         lapply(seq_along(...future.elements_ii), 
[17:44:55.137]                           FUN = function(jj) {
[17:44:55.137]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:55.137]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:55.137]                               envir = globalenv(), inherits = FALSE)
[17:44:55.137]                             ...future.FUN(...future.X_jj, ...)
[17:44:55.137]                           })
[17:44:55.137]                       }
[17:44:55.137]                     }, args = future.call.arguments)
[17:44:55.137]                   }
[17:44:55.137]                 }, immediateCondition = function(cond) {
[17:44:55.137]                   sendCondition <- ...future.makeSendCondition()
[17:44:55.137]                   sendCondition(cond)
[17:44:55.137]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:55.137]                   {
[17:44:55.137]                     inherits <- base::inherits
[17:44:55.137]                     invokeRestart <- base::invokeRestart
[17:44:55.137]                     is.null <- base::is.null
[17:44:55.137]                     muffled <- FALSE
[17:44:55.137]                     if (inherits(cond, "message")) {
[17:44:55.137]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:55.137]                       if (muffled) 
[17:44:55.137]                         invokeRestart("muffleMessage")
[17:44:55.137]                     }
[17:44:55.137]                     else if (inherits(cond, "warning")) {
[17:44:55.137]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:55.137]                       if (muffled) 
[17:44:55.137]                         invokeRestart("muffleWarning")
[17:44:55.137]                     }
[17:44:55.137]                     else if (inherits(cond, "condition")) {
[17:44:55.137]                       if (!is.null(pattern)) {
[17:44:55.137]                         computeRestarts <- base::computeRestarts
[17:44:55.137]                         grepl <- base::grepl
[17:44:55.137]                         restarts <- computeRestarts(cond)
[17:44:55.137]                         for (restart in restarts) {
[17:44:55.137]                           name <- restart$name
[17:44:55.137]                           if (is.null(name)) 
[17:44:55.137]                             next
[17:44:55.137]                           if (!grepl(pattern, name)) 
[17:44:55.137]                             next
[17:44:55.137]                           invokeRestart(restart)
[17:44:55.137]                           muffled <- TRUE
[17:44:55.137]                           break
[17:44:55.137]                         }
[17:44:55.137]                       }
[17:44:55.137]                     }
[17:44:55.137]                     invisible(muffled)
[17:44:55.137]                   }
[17:44:55.137]                   muffleCondition(cond)
[17:44:55.137]                 })
[17:44:55.137]             }))
[17:44:55.137]             future::FutureResult(value = ...future.value$value, 
[17:44:55.137]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:55.137]                   ...future.rng), globalenv = if (FALSE) 
[17:44:55.137]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:55.137]                     ...future.globalenv.names))
[17:44:55.137]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:55.137]         }, condition = base::local({
[17:44:55.137]             c <- base::c
[17:44:55.137]             inherits <- base::inherits
[17:44:55.137]             invokeRestart <- base::invokeRestart
[17:44:55.137]             length <- base::length
[17:44:55.137]             list <- base::list
[17:44:55.137]             seq.int <- base::seq.int
[17:44:55.137]             signalCondition <- base::signalCondition
[17:44:55.137]             sys.calls <- base::sys.calls
[17:44:55.137]             `[[` <- base::`[[`
[17:44:55.137]             `+` <- base::`+`
[17:44:55.137]             `<<-` <- base::`<<-`
[17:44:55.137]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:55.137]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:55.137]                   3L)]
[17:44:55.137]             }
[17:44:55.137]             function(cond) {
[17:44:55.137]                 is_error <- inherits(cond, "error")
[17:44:55.137]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:55.137]                   NULL)
[17:44:55.137]                 if (is_error) {
[17:44:55.137]                   sessionInformation <- function() {
[17:44:55.137]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:55.137]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:55.137]                       search = base::search(), system = base::Sys.info())
[17:44:55.137]                   }
[17:44:55.137]                   ...future.conditions[[length(...future.conditions) + 
[17:44:55.137]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:55.137]                     cond$call), session = sessionInformation(), 
[17:44:55.137]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:55.137]                   signalCondition(cond)
[17:44:55.137]                 }
[17:44:55.137]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:55.137]                 "immediateCondition"))) {
[17:44:55.137]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:55.137]                   ...future.conditions[[length(...future.conditions) + 
[17:44:55.137]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:55.137]                   if (TRUE && !signal) {
[17:44:55.137]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:55.137]                     {
[17:44:55.137]                       inherits <- base::inherits
[17:44:55.137]                       invokeRestart <- base::invokeRestart
[17:44:55.137]                       is.null <- base::is.null
[17:44:55.137]                       muffled <- FALSE
[17:44:55.137]                       if (inherits(cond, "message")) {
[17:44:55.137]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:55.137]                         if (muffled) 
[17:44:55.137]                           invokeRestart("muffleMessage")
[17:44:55.137]                       }
[17:44:55.137]                       else if (inherits(cond, "warning")) {
[17:44:55.137]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:55.137]                         if (muffled) 
[17:44:55.137]                           invokeRestart("muffleWarning")
[17:44:55.137]                       }
[17:44:55.137]                       else if (inherits(cond, "condition")) {
[17:44:55.137]                         if (!is.null(pattern)) {
[17:44:55.137]                           computeRestarts <- base::computeRestarts
[17:44:55.137]                           grepl <- base::grepl
[17:44:55.137]                           restarts <- computeRestarts(cond)
[17:44:55.137]                           for (restart in restarts) {
[17:44:55.137]                             name <- restart$name
[17:44:55.137]                             if (is.null(name)) 
[17:44:55.137]                               next
[17:44:55.137]                             if (!grepl(pattern, name)) 
[17:44:55.137]                               next
[17:44:55.137]                             invokeRestart(restart)
[17:44:55.137]                             muffled <- TRUE
[17:44:55.137]                             break
[17:44:55.137]                           }
[17:44:55.137]                         }
[17:44:55.137]                       }
[17:44:55.137]                       invisible(muffled)
[17:44:55.137]                     }
[17:44:55.137]                     muffleCondition(cond, pattern = "^muffle")
[17:44:55.137]                   }
[17:44:55.137]                 }
[17:44:55.137]                 else {
[17:44:55.137]                   if (TRUE) {
[17:44:55.137]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:55.137]                     {
[17:44:55.137]                       inherits <- base::inherits
[17:44:55.137]                       invokeRestart <- base::invokeRestart
[17:44:55.137]                       is.null <- base::is.null
[17:44:55.137]                       muffled <- FALSE
[17:44:55.137]                       if (inherits(cond, "message")) {
[17:44:55.137]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:55.137]                         if (muffled) 
[17:44:55.137]                           invokeRestart("muffleMessage")
[17:44:55.137]                       }
[17:44:55.137]                       else if (inherits(cond, "warning")) {
[17:44:55.137]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:55.137]                         if (muffled) 
[17:44:55.137]                           invokeRestart("muffleWarning")
[17:44:55.137]                       }
[17:44:55.137]                       else if (inherits(cond, "condition")) {
[17:44:55.137]                         if (!is.null(pattern)) {
[17:44:55.137]                           computeRestarts <- base::computeRestarts
[17:44:55.137]                           grepl <- base::grepl
[17:44:55.137]                           restarts <- computeRestarts(cond)
[17:44:55.137]                           for (restart in restarts) {
[17:44:55.137]                             name <- restart$name
[17:44:55.137]                             if (is.null(name)) 
[17:44:55.137]                               next
[17:44:55.137]                             if (!grepl(pattern, name)) 
[17:44:55.137]                               next
[17:44:55.137]                             invokeRestart(restart)
[17:44:55.137]                             muffled <- TRUE
[17:44:55.137]                             break
[17:44:55.137]                           }
[17:44:55.137]                         }
[17:44:55.137]                       }
[17:44:55.137]                       invisible(muffled)
[17:44:55.137]                     }
[17:44:55.137]                     muffleCondition(cond, pattern = "^muffle")
[17:44:55.137]                   }
[17:44:55.137]                 }
[17:44:55.137]             }
[17:44:55.137]         }))
[17:44:55.137]     }, error = function(ex) {
[17:44:55.137]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:55.137]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:55.137]                 ...future.rng), started = ...future.startTime, 
[17:44:55.137]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:55.137]             version = "1.8"), class = "FutureResult")
[17:44:55.137]     }, finally = {
[17:44:55.137]         if (!identical(...future.workdir, getwd())) 
[17:44:55.137]             setwd(...future.workdir)
[17:44:55.137]         {
[17:44:55.137]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:55.137]                 ...future.oldOptions$nwarnings <- NULL
[17:44:55.137]             }
[17:44:55.137]             base::options(...future.oldOptions)
[17:44:55.137]             if (.Platform$OS.type == "windows") {
[17:44:55.137]                 old_names <- names(...future.oldEnvVars)
[17:44:55.137]                 envs <- base::Sys.getenv()
[17:44:55.137]                 names <- names(envs)
[17:44:55.137]                 common <- intersect(names, old_names)
[17:44:55.137]                 added <- setdiff(names, old_names)
[17:44:55.137]                 removed <- setdiff(old_names, names)
[17:44:55.137]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:55.137]                   envs[common]]
[17:44:55.137]                 NAMES <- toupper(changed)
[17:44:55.137]                 args <- list()
[17:44:55.137]                 for (kk in seq_along(NAMES)) {
[17:44:55.137]                   name <- changed[[kk]]
[17:44:55.137]                   NAME <- NAMES[[kk]]
[17:44:55.137]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:55.137]                     next
[17:44:55.137]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:55.137]                 }
[17:44:55.137]                 NAMES <- toupper(added)
[17:44:55.137]                 for (kk in seq_along(NAMES)) {
[17:44:55.137]                   name <- added[[kk]]
[17:44:55.137]                   NAME <- NAMES[[kk]]
[17:44:55.137]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:55.137]                     next
[17:44:55.137]                   args[[name]] <- ""
[17:44:55.137]                 }
[17:44:55.137]                 NAMES <- toupper(removed)
[17:44:55.137]                 for (kk in seq_along(NAMES)) {
[17:44:55.137]                   name <- removed[[kk]]
[17:44:55.137]                   NAME <- NAMES[[kk]]
[17:44:55.137]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:55.137]                     next
[17:44:55.137]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:55.137]                 }
[17:44:55.137]                 if (length(args) > 0) 
[17:44:55.137]                   base::do.call(base::Sys.setenv, args = args)
[17:44:55.137]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:55.137]             }
[17:44:55.137]             else {
[17:44:55.137]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:55.137]             }
[17:44:55.137]             {
[17:44:55.137]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:55.137]                   0L) {
[17:44:55.137]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:55.137]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:55.137]                   base::options(opts)
[17:44:55.137]                 }
[17:44:55.137]                 {
[17:44:55.137]                   {
[17:44:55.137]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:55.137]                     NULL
[17:44:55.137]                   }
[17:44:55.137]                   options(future.plan = NULL)
[17:44:55.137]                   if (is.na(NA_character_)) 
[17:44:55.137]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:55.137]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:55.137]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:55.137]                     .init = FALSE)
[17:44:55.137]                 }
[17:44:55.137]             }
[17:44:55.137]         }
[17:44:55.137]     })
[17:44:55.137]     if (TRUE) {
[17:44:55.137]         base::sink(type = "output", split = FALSE)
[17:44:55.137]         if (TRUE) {
[17:44:55.137]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:55.137]         }
[17:44:55.137]         else {
[17:44:55.137]             ...future.result["stdout"] <- base::list(NULL)
[17:44:55.137]         }
[17:44:55.137]         base::close(...future.stdout)
[17:44:55.137]         ...future.stdout <- NULL
[17:44:55.137]     }
[17:44:55.137]     ...future.result$conditions <- ...future.conditions
[17:44:55.137]     ...future.result$finished <- base::Sys.time()
[17:44:55.137]     ...future.result
[17:44:55.137] }
[17:44:55.139] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[17:44:55.139] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[17:44:55.140] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[17:44:55.140] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:44:55.140] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:44:55.141] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:44:55.141] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:44:55.141] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:44:55.141] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:44:55.142] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:44:55.142] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:44:55.142] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[17:44:55.143] MultisessionFuture started
[17:44:55.143] - Launch lazy future ... done
[17:44:55.143] run() for ‘MultisessionFuture’ ... done
[17:44:55.143] Created future:
[17:44:55.143] MultisessionFuture:
[17:44:55.143] Label: ‘future_replicate-2’
[17:44:55.143] Expression:
[17:44:55.143] {
[17:44:55.143]     do.call(function(...) {
[17:44:55.143]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:55.143]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:55.143]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:55.143]             on.exit(options(oopts), add = TRUE)
[17:44:55.143]         }
[17:44:55.143]         {
[17:44:55.143]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:55.143]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:55.143]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:55.143]                   envir = globalenv(), inherits = FALSE)
[17:44:55.143]                 ...future.FUN(...future.X_jj, ...)
[17:44:55.143]             })
[17:44:55.143]         }
[17:44:55.143]     }, args = future.call.arguments)
[17:44:55.143] }
[17:44:55.143] Lazy evaluation: FALSE
[17:44:55.143] Asynchronous evaluation: TRUE
[17:44:55.143] Local evaluation: TRUE
[17:44:55.143] Environment: R_GlobalEnv
[17:44:55.143] Capture standard output: TRUE
[17:44:55.143] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:55.143] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:55.143] Packages: <none>
[17:44:55.143] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:55.143] Resolved: FALSE
[17:44:55.143] Value: <not collected>
[17:44:55.143] Conditions captured: <none>
[17:44:55.143] Early signaling: FALSE
[17:44:55.143] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:55.143] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:55.155] Chunk #2 of 2 ... DONE
[17:44:55.155] Launching 2 futures (chunks) ... DONE
[17:44:55.155] Resolving 2 futures (chunks) ...
[17:44:55.155] resolve() on list ...
[17:44:55.155]  recursive: 0
[17:44:55.155]  length: 2
[17:44:55.155] 
[17:44:55.156] receiveMessageFromWorker() for ClusterFuture ...
[17:44:55.156] - Validating connection of MultisessionFuture
[17:44:55.156] - received message: FutureResult
[17:44:55.156] - Received FutureResult
[17:44:55.156] - Erased future from FutureRegistry
[17:44:55.156] result() for ClusterFuture ...
[17:44:55.156] - result already collected: FutureResult
[17:44:55.156] result() for ClusterFuture ... done
[17:44:55.157] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:55.157] Future #1
[17:44:55.157] result() for ClusterFuture ...
[17:44:55.157] - result already collected: FutureResult
[17:44:55.157] result() for ClusterFuture ... done
[17:44:55.157] result() for ClusterFuture ...
[17:44:55.157] - result already collected: FutureResult
[17:44:55.157] result() for ClusterFuture ... done
[17:44:55.157] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:44:55.157] - nx: 2
[17:44:55.157] - relay: TRUE
[17:44:55.158] - stdout: TRUE
[17:44:55.158] - signal: TRUE
[17:44:55.158] - resignal: FALSE
[17:44:55.158] - force: TRUE
[17:44:55.158] - relayed: [n=2] FALSE, FALSE
[17:44:55.158] - queued futures: [n=2] FALSE, FALSE
[17:44:55.158]  - until=1
[17:44:55.158]  - relaying element #1
[17:44:55.158] result() for ClusterFuture ...
[17:44:55.158] - result already collected: FutureResult
[17:44:55.158] result() for ClusterFuture ... done
[17:44:55.158] result() for ClusterFuture ...
[17:44:55.159] - result already collected: FutureResult
[17:44:55.159] result() for ClusterFuture ... done
[17:44:55.159] result() for ClusterFuture ...
[17:44:55.159] - result already collected: FutureResult
[17:44:55.159] result() for ClusterFuture ... done
[17:44:55.159] result() for ClusterFuture ...
[17:44:55.159] - result already collected: FutureResult
[17:44:55.159] result() for ClusterFuture ... done
[17:44:55.159] - relayed: [n=2] TRUE, FALSE
[17:44:55.159] - queued futures: [n=2] TRUE, FALSE
[17:44:55.159] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:44:55.160]  length: 1 (resolved future 1)
[17:44:55.185] receiveMessageFromWorker() for ClusterFuture ...
[17:44:55.185] - Validating connection of MultisessionFuture
[17:44:55.185] - received message: FutureResult
[17:44:55.185] - Received FutureResult
[17:44:55.185] - Erased future from FutureRegistry
[17:44:55.186] result() for ClusterFuture ...
[17:44:55.186] - result already collected: FutureResult
[17:44:55.186] result() for ClusterFuture ... done
[17:44:55.186] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:55.186] Future #2
[17:44:55.186] result() for ClusterFuture ...
[17:44:55.186] - result already collected: FutureResult
[17:44:55.186] result() for ClusterFuture ... done
[17:44:55.186] result() for ClusterFuture ...
[17:44:55.186] - result already collected: FutureResult
[17:44:55.186] result() for ClusterFuture ... done
[17:44:55.187] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:44:55.187] - nx: 2
[17:44:55.187] - relay: TRUE
[17:44:55.187] - stdout: TRUE
[17:44:55.187] - signal: TRUE
[17:44:55.187] - resignal: FALSE
[17:44:55.187] - force: TRUE
[17:44:55.187] - relayed: [n=2] TRUE, FALSE
[17:44:55.187] - queued futures: [n=2] TRUE, FALSE
[17:44:55.187]  - until=2
[17:44:55.187]  - relaying element #2
[17:44:55.187] result() for ClusterFuture ...
[17:44:55.188] - result already collected: FutureResult
[17:44:55.188] result() for ClusterFuture ... done
[17:44:55.188] result() for ClusterFuture ...
[17:44:55.188] - result already collected: FutureResult
[17:44:55.188] result() for ClusterFuture ... done
[17:44:55.188] result() for ClusterFuture ...
[17:44:55.188] - result already collected: FutureResult
[17:44:55.188] result() for ClusterFuture ... done
[17:44:55.188] result() for ClusterFuture ...
[17:44:55.188] - result already collected: FutureResult
[17:44:55.188] result() for ClusterFuture ... done
[17:44:55.189] - relayed: [n=2] TRUE, TRUE
[17:44:55.189] - queued futures: [n=2] TRUE, TRUE
[17:44:55.189] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:44:55.189]  length: 0 (resolved future 2)
[17:44:55.189] Relaying remaining futures
[17:44:55.189] signalConditionsASAP(NULL, pos=0) ...
[17:44:55.189] - nx: 2
[17:44:55.189] - relay: TRUE
[17:44:55.189] - stdout: TRUE
[17:44:55.189] - signal: TRUE
[17:44:55.189] - resignal: FALSE
[17:44:55.189] - force: TRUE
[17:44:55.190] - relayed: [n=2] TRUE, TRUE
[17:44:55.190] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:44:55.190] - relayed: [n=2] TRUE, TRUE
[17:44:55.190] - queued futures: [n=2] TRUE, TRUE
[17:44:55.190] signalConditionsASAP(NULL, pos=0) ... done
[17:44:55.190] resolve() on list ... DONE
[17:44:55.190] result() for ClusterFuture ...
[17:44:55.190] - result already collected: FutureResult
[17:44:55.190] result() for ClusterFuture ... done
[17:44:55.190] result() for ClusterFuture ...
[17:44:55.190] - result already collected: FutureResult
[17:44:55.191] result() for ClusterFuture ... done
[17:44:55.191] result() for ClusterFuture ...
[17:44:55.191] - result already collected: FutureResult
[17:44:55.191] result() for ClusterFuture ... done
[17:44:55.191] result() for ClusterFuture ...
[17:44:55.191] - result already collected: FutureResult
[17:44:55.191] result() for ClusterFuture ... done
[17:44:55.191]  - Number of value chunks collected: 2
[17:44:55.191] Resolving 2 futures (chunks) ... DONE
[17:44:55.191] Reducing values from 2 chunks ...
[17:44:55.192]  - Number of values collected after concatenation: 5
[17:44:55.192]  - Number of values expected: 5
[17:44:55.192] Reducing values from 2 chunks ... DONE
[17:44:55.192] future_lapply() ... DONE
[17:44:55.192] future_lapply() ...
[17:44:55.192] Generating random seeds ...
[17:44:55.192] Generating random seed streams for 5 elements ...
[17:44:55.193] Generating random seed streams for 5 elements ... DONE
[17:44:55.193] Generating random seeds ... DONE
[17:44:55.193] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:44:55.197] Number of chunks: 2
[17:44:55.197] getGlobalsAndPackagesXApply() ...
[17:44:55.197]  - future.globals: TRUE
[17:44:55.197] getGlobalsAndPackages() ...
[17:44:55.197] Searching for globals...
[17:44:55.199] - globals found: [2] ‘FUN’, ‘sample’
[17:44:55.199] Searching for globals ... DONE
[17:44:55.199] Resolving globals: FALSE
[17:44:55.199] The total size of the 1 globals is 616 bytes (616 bytes)
[17:44:55.199] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:44:55.200] - globals: [1] ‘FUN’
[17:44:55.200] 
[17:44:55.200] getGlobalsAndPackages() ... DONE
[17:44:55.200]  - globals found/used: [n=1] ‘FUN’
[17:44:55.200]  - needed namespaces: [n=0] 
[17:44:55.200] Finding globals ... DONE
[17:44:55.200]  - use_args: TRUE
[17:44:55.200]  - Getting '...' globals ...
[17:44:55.201] resolve() on list ...
[17:44:55.201]  recursive: 0
[17:44:55.201]  length: 1
[17:44:55.201]  elements: ‘...’
[17:44:55.201]  length: 0 (resolved future 1)
[17:44:55.201] resolve() on list ... DONE
[17:44:55.201]    - '...' content: [n=0] 
[17:44:55.201] List of 1
[17:44:55.201]  $ ...: list()
[17:44:55.201]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:55.201]  - attr(*, "where")=List of 1
[17:44:55.201]   ..$ ...:<environment: 0x5583868de248> 
[17:44:55.201]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:55.201]  - attr(*, "resolved")= logi TRUE
[17:44:55.201]  - attr(*, "total_size")= num NA
[17:44:55.204]  - Getting '...' globals ... DONE
[17:44:55.204] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:44:55.204] List of 2
[17:44:55.204]  $ ...future.FUN:function (...)  
[17:44:55.204]  $ ...          : list()
[17:44:55.204]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:55.204]  - attr(*, "where")=List of 2
[17:44:55.204]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:44:55.204]   ..$ ...          :<environment: 0x5583868de248> 
[17:44:55.204]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:55.204]  - attr(*, "resolved")= logi FALSE
[17:44:55.204]  - attr(*, "total_size")= num 616
[17:44:55.207] Packages to be attached in all futures: [n=0] 
[17:44:55.207] getGlobalsAndPackagesXApply() ... DONE
[17:44:55.207] Number of futures (= number of chunks): 2
[17:44:55.207] Launching 2 futures (chunks) ...
[17:44:55.207] Chunk #1 of 2 ...
[17:44:55.207]  - Finding globals in 'X' for chunk #1 ...
[17:44:55.207] getGlobalsAndPackages() ...
[17:44:55.207] Searching for globals...
[17:44:55.208] 
[17:44:55.208] Searching for globals ... DONE
[17:44:55.208] - globals: [0] <none>
[17:44:55.208] getGlobalsAndPackages() ... DONE
[17:44:55.208]    + additional globals found: [n=0] 
[17:44:55.208]    + additional namespaces needed: [n=0] 
[17:44:55.208]  - Finding globals in 'X' for chunk #1 ... DONE
[17:44:55.208]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:55.208]  - seeds: [2] <seeds>
[17:44:55.208]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:55.209] getGlobalsAndPackages() ...
[17:44:55.209] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:55.209] Resolving globals: FALSE
[17:44:55.209] Tweak future expression to call with '...' arguments ...
[17:44:55.209] {
[17:44:55.209]     do.call(function(...) {
[17:44:55.209]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:55.209]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:55.209]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:55.209]             on.exit(options(oopts), add = TRUE)
[17:44:55.209]         }
[17:44:55.209]         {
[17:44:55.209]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:55.209]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:55.209]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:55.209]                   envir = globalenv(), inherits = FALSE)
[17:44:55.209]                 ...future.FUN(...future.X_jj, ...)
[17:44:55.209]             })
[17:44:55.209]         }
[17:44:55.209]     }, args = future.call.arguments)
[17:44:55.209] }
[17:44:55.209] Tweak future expression to call with '...' arguments ... DONE
[17:44:55.210] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:55.210] 
[17:44:55.210] getGlobalsAndPackages() ... DONE
[17:44:55.210] run() for ‘Future’ ...
[17:44:55.210] - state: ‘created’
[17:44:55.210] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:44:55.224] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:55.224] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:44:55.224]   - Field: ‘node’
[17:44:55.224]   - Field: ‘label’
[17:44:55.224]   - Field: ‘local’
[17:44:55.224]   - Field: ‘owner’
[17:44:55.225]   - Field: ‘envir’
[17:44:55.225]   - Field: ‘workers’
[17:44:55.225]   - Field: ‘packages’
[17:44:55.225]   - Field: ‘gc’
[17:44:55.225]   - Field: ‘conditions’
[17:44:55.225]   - Field: ‘persistent’
[17:44:55.225]   - Field: ‘expr’
[17:44:55.225]   - Field: ‘uuid’
[17:44:55.225]   - Field: ‘seed’
[17:44:55.225]   - Field: ‘version’
[17:44:55.225]   - Field: ‘result’
[17:44:55.226]   - Field: ‘asynchronous’
[17:44:55.226]   - Field: ‘calls’
[17:44:55.226]   - Field: ‘globals’
[17:44:55.226]   - Field: ‘stdout’
[17:44:55.226]   - Field: ‘earlySignal’
[17:44:55.226]   - Field: ‘lazy’
[17:44:55.226]   - Field: ‘state’
[17:44:55.226] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:44:55.226] - Launch lazy future ...
[17:44:55.227] Packages needed by the future expression (n = 0): <none>
[17:44:55.227] Packages needed by future strategies (n = 0): <none>
[17:44:55.227] {
[17:44:55.227]     {
[17:44:55.227]         {
[17:44:55.227]             ...future.startTime <- base::Sys.time()
[17:44:55.227]             {
[17:44:55.227]                 {
[17:44:55.227]                   {
[17:44:55.227]                     {
[17:44:55.227]                       base::local({
[17:44:55.227]                         has_future <- base::requireNamespace("future", 
[17:44:55.227]                           quietly = TRUE)
[17:44:55.227]                         if (has_future) {
[17:44:55.227]                           ns <- base::getNamespace("future")
[17:44:55.227]                           version <- ns[[".package"]][["version"]]
[17:44:55.227]                           if (is.null(version)) 
[17:44:55.227]                             version <- utils::packageVersion("future")
[17:44:55.227]                         }
[17:44:55.227]                         else {
[17:44:55.227]                           version <- NULL
[17:44:55.227]                         }
[17:44:55.227]                         if (!has_future || version < "1.8.0") {
[17:44:55.227]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:55.227]                             "", base::R.version$version.string), 
[17:44:55.227]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:55.227]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:55.227]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:55.227]                               "release", "version")], collapse = " "), 
[17:44:55.227]                             hostname = base::Sys.info()[["nodename"]])
[17:44:55.227]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:55.227]                             info)
[17:44:55.227]                           info <- base::paste(info, collapse = "; ")
[17:44:55.227]                           if (!has_future) {
[17:44:55.227]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:55.227]                               info)
[17:44:55.227]                           }
[17:44:55.227]                           else {
[17:44:55.227]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:55.227]                               info, version)
[17:44:55.227]                           }
[17:44:55.227]                           base::stop(msg)
[17:44:55.227]                         }
[17:44:55.227]                       })
[17:44:55.227]                     }
[17:44:55.227]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:55.227]                     base::options(mc.cores = 1L)
[17:44:55.227]                   }
[17:44:55.227]                   ...future.strategy.old <- future::plan("list")
[17:44:55.227]                   options(future.plan = NULL)
[17:44:55.227]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:55.227]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:55.227]                 }
[17:44:55.227]                 ...future.workdir <- getwd()
[17:44:55.227]             }
[17:44:55.227]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:55.227]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:55.227]         }
[17:44:55.227]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:55.227]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:55.227]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:55.227]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:55.227]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:55.227]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:55.227]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:55.227]             base::names(...future.oldOptions))
[17:44:55.227]     }
[17:44:55.227]     if (FALSE) {
[17:44:55.227]     }
[17:44:55.227]     else {
[17:44:55.227]         if (TRUE) {
[17:44:55.227]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:55.227]                 open = "w")
[17:44:55.227]         }
[17:44:55.227]         else {
[17:44:55.227]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:55.227]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:55.227]         }
[17:44:55.227]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:55.227]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:55.227]             base::sink(type = "output", split = FALSE)
[17:44:55.227]             base::close(...future.stdout)
[17:44:55.227]         }, add = TRUE)
[17:44:55.227]     }
[17:44:55.227]     ...future.frame <- base::sys.nframe()
[17:44:55.227]     ...future.conditions <- base::list()
[17:44:55.227]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:55.227]     if (FALSE) {
[17:44:55.227]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:55.227]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:55.227]     }
[17:44:55.227]     ...future.result <- base::tryCatch({
[17:44:55.227]         base::withCallingHandlers({
[17:44:55.227]             ...future.value <- base::withVisible(base::local({
[17:44:55.227]                 ...future.makeSendCondition <- base::local({
[17:44:55.227]                   sendCondition <- NULL
[17:44:55.227]                   function(frame = 1L) {
[17:44:55.227]                     if (is.function(sendCondition)) 
[17:44:55.227]                       return(sendCondition)
[17:44:55.227]                     ns <- getNamespace("parallel")
[17:44:55.227]                     if (exists("sendData", mode = "function", 
[17:44:55.227]                       envir = ns)) {
[17:44:55.227]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:55.227]                         envir = ns)
[17:44:55.227]                       envir <- sys.frame(frame)
[17:44:55.227]                       master <- NULL
[17:44:55.227]                       while (!identical(envir, .GlobalEnv) && 
[17:44:55.227]                         !identical(envir, emptyenv())) {
[17:44:55.227]                         if (exists("master", mode = "list", envir = envir, 
[17:44:55.227]                           inherits = FALSE)) {
[17:44:55.227]                           master <- get("master", mode = "list", 
[17:44:55.227]                             envir = envir, inherits = FALSE)
[17:44:55.227]                           if (inherits(master, c("SOCKnode", 
[17:44:55.227]                             "SOCK0node"))) {
[17:44:55.227]                             sendCondition <<- function(cond) {
[17:44:55.227]                               data <- list(type = "VALUE", value = cond, 
[17:44:55.227]                                 success = TRUE)
[17:44:55.227]                               parallel_sendData(master, data)
[17:44:55.227]                             }
[17:44:55.227]                             return(sendCondition)
[17:44:55.227]                           }
[17:44:55.227]                         }
[17:44:55.227]                         frame <- frame + 1L
[17:44:55.227]                         envir <- sys.frame(frame)
[17:44:55.227]                       }
[17:44:55.227]                     }
[17:44:55.227]                     sendCondition <<- function(cond) NULL
[17:44:55.227]                   }
[17:44:55.227]                 })
[17:44:55.227]                 withCallingHandlers({
[17:44:55.227]                   {
[17:44:55.227]                     do.call(function(...) {
[17:44:55.227]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:55.227]                       if (!identical(...future.globals.maxSize.org, 
[17:44:55.227]                         ...future.globals.maxSize)) {
[17:44:55.227]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:55.227]                         on.exit(options(oopts), add = TRUE)
[17:44:55.227]                       }
[17:44:55.227]                       {
[17:44:55.227]                         lapply(seq_along(...future.elements_ii), 
[17:44:55.227]                           FUN = function(jj) {
[17:44:55.227]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:55.227]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:55.227]                               envir = globalenv(), inherits = FALSE)
[17:44:55.227]                             ...future.FUN(...future.X_jj, ...)
[17:44:55.227]                           })
[17:44:55.227]                       }
[17:44:55.227]                     }, args = future.call.arguments)
[17:44:55.227]                   }
[17:44:55.227]                 }, immediateCondition = function(cond) {
[17:44:55.227]                   sendCondition <- ...future.makeSendCondition()
[17:44:55.227]                   sendCondition(cond)
[17:44:55.227]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:55.227]                   {
[17:44:55.227]                     inherits <- base::inherits
[17:44:55.227]                     invokeRestart <- base::invokeRestart
[17:44:55.227]                     is.null <- base::is.null
[17:44:55.227]                     muffled <- FALSE
[17:44:55.227]                     if (inherits(cond, "message")) {
[17:44:55.227]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:55.227]                       if (muffled) 
[17:44:55.227]                         invokeRestart("muffleMessage")
[17:44:55.227]                     }
[17:44:55.227]                     else if (inherits(cond, "warning")) {
[17:44:55.227]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:55.227]                       if (muffled) 
[17:44:55.227]                         invokeRestart("muffleWarning")
[17:44:55.227]                     }
[17:44:55.227]                     else if (inherits(cond, "condition")) {
[17:44:55.227]                       if (!is.null(pattern)) {
[17:44:55.227]                         computeRestarts <- base::computeRestarts
[17:44:55.227]                         grepl <- base::grepl
[17:44:55.227]                         restarts <- computeRestarts(cond)
[17:44:55.227]                         for (restart in restarts) {
[17:44:55.227]                           name <- restart$name
[17:44:55.227]                           if (is.null(name)) 
[17:44:55.227]                             next
[17:44:55.227]                           if (!grepl(pattern, name)) 
[17:44:55.227]                             next
[17:44:55.227]                           invokeRestart(restart)
[17:44:55.227]                           muffled <- TRUE
[17:44:55.227]                           break
[17:44:55.227]                         }
[17:44:55.227]                       }
[17:44:55.227]                     }
[17:44:55.227]                     invisible(muffled)
[17:44:55.227]                   }
[17:44:55.227]                   muffleCondition(cond)
[17:44:55.227]                 })
[17:44:55.227]             }))
[17:44:55.227]             future::FutureResult(value = ...future.value$value, 
[17:44:55.227]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:55.227]                   ...future.rng), globalenv = if (FALSE) 
[17:44:55.227]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:55.227]                     ...future.globalenv.names))
[17:44:55.227]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:55.227]         }, condition = base::local({
[17:44:55.227]             c <- base::c
[17:44:55.227]             inherits <- base::inherits
[17:44:55.227]             invokeRestart <- base::invokeRestart
[17:44:55.227]             length <- base::length
[17:44:55.227]             list <- base::list
[17:44:55.227]             seq.int <- base::seq.int
[17:44:55.227]             signalCondition <- base::signalCondition
[17:44:55.227]             sys.calls <- base::sys.calls
[17:44:55.227]             `[[` <- base::`[[`
[17:44:55.227]             `+` <- base::`+`
[17:44:55.227]             `<<-` <- base::`<<-`
[17:44:55.227]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:55.227]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:55.227]                   3L)]
[17:44:55.227]             }
[17:44:55.227]             function(cond) {
[17:44:55.227]                 is_error <- inherits(cond, "error")
[17:44:55.227]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:55.227]                   NULL)
[17:44:55.227]                 if (is_error) {
[17:44:55.227]                   sessionInformation <- function() {
[17:44:55.227]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:55.227]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:55.227]                       search = base::search(), system = base::Sys.info())
[17:44:55.227]                   }
[17:44:55.227]                   ...future.conditions[[length(...future.conditions) + 
[17:44:55.227]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:55.227]                     cond$call), session = sessionInformation(), 
[17:44:55.227]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:55.227]                   signalCondition(cond)
[17:44:55.227]                 }
[17:44:55.227]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:55.227]                 "immediateCondition"))) {
[17:44:55.227]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:55.227]                   ...future.conditions[[length(...future.conditions) + 
[17:44:55.227]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:55.227]                   if (TRUE && !signal) {
[17:44:55.227]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:55.227]                     {
[17:44:55.227]                       inherits <- base::inherits
[17:44:55.227]                       invokeRestart <- base::invokeRestart
[17:44:55.227]                       is.null <- base::is.null
[17:44:55.227]                       muffled <- FALSE
[17:44:55.227]                       if (inherits(cond, "message")) {
[17:44:55.227]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:55.227]                         if (muffled) 
[17:44:55.227]                           invokeRestart("muffleMessage")
[17:44:55.227]                       }
[17:44:55.227]                       else if (inherits(cond, "warning")) {
[17:44:55.227]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:55.227]                         if (muffled) 
[17:44:55.227]                           invokeRestart("muffleWarning")
[17:44:55.227]                       }
[17:44:55.227]                       else if (inherits(cond, "condition")) {
[17:44:55.227]                         if (!is.null(pattern)) {
[17:44:55.227]                           computeRestarts <- base::computeRestarts
[17:44:55.227]                           grepl <- base::grepl
[17:44:55.227]                           restarts <- computeRestarts(cond)
[17:44:55.227]                           for (restart in restarts) {
[17:44:55.227]                             name <- restart$name
[17:44:55.227]                             if (is.null(name)) 
[17:44:55.227]                               next
[17:44:55.227]                             if (!grepl(pattern, name)) 
[17:44:55.227]                               next
[17:44:55.227]                             invokeRestart(restart)
[17:44:55.227]                             muffled <- TRUE
[17:44:55.227]                             break
[17:44:55.227]                           }
[17:44:55.227]                         }
[17:44:55.227]                       }
[17:44:55.227]                       invisible(muffled)
[17:44:55.227]                     }
[17:44:55.227]                     muffleCondition(cond, pattern = "^muffle")
[17:44:55.227]                   }
[17:44:55.227]                 }
[17:44:55.227]                 else {
[17:44:55.227]                   if (TRUE) {
[17:44:55.227]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:55.227]                     {
[17:44:55.227]                       inherits <- base::inherits
[17:44:55.227]                       invokeRestart <- base::invokeRestart
[17:44:55.227]                       is.null <- base::is.null
[17:44:55.227]                       muffled <- FALSE
[17:44:55.227]                       if (inherits(cond, "message")) {
[17:44:55.227]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:55.227]                         if (muffled) 
[17:44:55.227]                           invokeRestart("muffleMessage")
[17:44:55.227]                       }
[17:44:55.227]                       else if (inherits(cond, "warning")) {
[17:44:55.227]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:55.227]                         if (muffled) 
[17:44:55.227]                           invokeRestart("muffleWarning")
[17:44:55.227]                       }
[17:44:55.227]                       else if (inherits(cond, "condition")) {
[17:44:55.227]                         if (!is.null(pattern)) {
[17:44:55.227]                           computeRestarts <- base::computeRestarts
[17:44:55.227]                           grepl <- base::grepl
[17:44:55.227]                           restarts <- computeRestarts(cond)
[17:44:55.227]                           for (restart in restarts) {
[17:44:55.227]                             name <- restart$name
[17:44:55.227]                             if (is.null(name)) 
[17:44:55.227]                               next
[17:44:55.227]                             if (!grepl(pattern, name)) 
[17:44:55.227]                               next
[17:44:55.227]                             invokeRestart(restart)
[17:44:55.227]                             muffled <- TRUE
[17:44:55.227]                             break
[17:44:55.227]                           }
[17:44:55.227]                         }
[17:44:55.227]                       }
[17:44:55.227]                       invisible(muffled)
[17:44:55.227]                     }
[17:44:55.227]                     muffleCondition(cond, pattern = "^muffle")
[17:44:55.227]                   }
[17:44:55.227]                 }
[17:44:55.227]             }
[17:44:55.227]         }))
[17:44:55.227]     }, error = function(ex) {
[17:44:55.227]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:55.227]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:55.227]                 ...future.rng), started = ...future.startTime, 
[17:44:55.227]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:55.227]             version = "1.8"), class = "FutureResult")
[17:44:55.227]     }, finally = {
[17:44:55.227]         if (!identical(...future.workdir, getwd())) 
[17:44:55.227]             setwd(...future.workdir)
[17:44:55.227]         {
[17:44:55.227]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:55.227]                 ...future.oldOptions$nwarnings <- NULL
[17:44:55.227]             }
[17:44:55.227]             base::options(...future.oldOptions)
[17:44:55.227]             if (.Platform$OS.type == "windows") {
[17:44:55.227]                 old_names <- names(...future.oldEnvVars)
[17:44:55.227]                 envs <- base::Sys.getenv()
[17:44:55.227]                 names <- names(envs)
[17:44:55.227]                 common <- intersect(names, old_names)
[17:44:55.227]                 added <- setdiff(names, old_names)
[17:44:55.227]                 removed <- setdiff(old_names, names)
[17:44:55.227]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:55.227]                   envs[common]]
[17:44:55.227]                 NAMES <- toupper(changed)
[17:44:55.227]                 args <- list()
[17:44:55.227]                 for (kk in seq_along(NAMES)) {
[17:44:55.227]                   name <- changed[[kk]]
[17:44:55.227]                   NAME <- NAMES[[kk]]
[17:44:55.227]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:55.227]                     next
[17:44:55.227]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:55.227]                 }
[17:44:55.227]                 NAMES <- toupper(added)
[17:44:55.227]                 for (kk in seq_along(NAMES)) {
[17:44:55.227]                   name <- added[[kk]]
[17:44:55.227]                   NAME <- NAMES[[kk]]
[17:44:55.227]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:55.227]                     next
[17:44:55.227]                   args[[name]] <- ""
[17:44:55.227]                 }
[17:44:55.227]                 NAMES <- toupper(removed)
[17:44:55.227]                 for (kk in seq_along(NAMES)) {
[17:44:55.227]                   name <- removed[[kk]]
[17:44:55.227]                   NAME <- NAMES[[kk]]
[17:44:55.227]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:55.227]                     next
[17:44:55.227]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:55.227]                 }
[17:44:55.227]                 if (length(args) > 0) 
[17:44:55.227]                   base::do.call(base::Sys.setenv, args = args)
[17:44:55.227]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:55.227]             }
[17:44:55.227]             else {
[17:44:55.227]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:55.227]             }
[17:44:55.227]             {
[17:44:55.227]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:55.227]                   0L) {
[17:44:55.227]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:55.227]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:55.227]                   base::options(opts)
[17:44:55.227]                 }
[17:44:55.227]                 {
[17:44:55.227]                   {
[17:44:55.227]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:55.227]                     NULL
[17:44:55.227]                   }
[17:44:55.227]                   options(future.plan = NULL)
[17:44:55.227]                   if (is.na(NA_character_)) 
[17:44:55.227]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:55.227]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:55.227]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:55.227]                     .init = FALSE)
[17:44:55.227]                 }
[17:44:55.227]             }
[17:44:55.227]         }
[17:44:55.227]     })
[17:44:55.227]     if (TRUE) {
[17:44:55.227]         base::sink(type = "output", split = FALSE)
[17:44:55.227]         if (TRUE) {
[17:44:55.227]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:55.227]         }
[17:44:55.227]         else {
[17:44:55.227]             ...future.result["stdout"] <- base::list(NULL)
[17:44:55.227]         }
[17:44:55.227]         base::close(...future.stdout)
[17:44:55.227]         ...future.stdout <- NULL
[17:44:55.227]     }
[17:44:55.227]     ...future.result$conditions <- ...future.conditions
[17:44:55.227]     ...future.result$finished <- base::Sys.time()
[17:44:55.227]     ...future.result
[17:44:55.227] }
[17:44:55.230] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[17:44:55.230] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[17:44:55.230] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[17:44:55.231] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:44:55.231] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:44:55.231] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:44:55.231] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:44:55.231] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:44:55.232] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:44:55.232] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:44:55.232] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:44:55.232] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[17:44:55.233] MultisessionFuture started
[17:44:55.233] - Launch lazy future ... done
[17:44:55.233] run() for ‘MultisessionFuture’ ... done
[17:44:55.233] Created future:
[17:44:55.233] MultisessionFuture:
[17:44:55.233] Label: ‘future_replicate-1’
[17:44:55.233] Expression:
[17:44:55.233] {
[17:44:55.233]     do.call(function(...) {
[17:44:55.233]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:55.233]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:55.233]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:55.233]             on.exit(options(oopts), add = TRUE)
[17:44:55.233]         }
[17:44:55.233]         {
[17:44:55.233]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:55.233]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:55.233]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:55.233]                   envir = globalenv(), inherits = FALSE)
[17:44:55.233]                 ...future.FUN(...future.X_jj, ...)
[17:44:55.233]             })
[17:44:55.233]         }
[17:44:55.233]     }, args = future.call.arguments)
[17:44:55.233] }
[17:44:55.233] Lazy evaluation: FALSE
[17:44:55.233] Asynchronous evaluation: TRUE
[17:44:55.233] Local evaluation: TRUE
[17:44:55.233] Environment: R_GlobalEnv
[17:44:55.233] Capture standard output: TRUE
[17:44:55.233] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:55.233] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:55.233] Packages: <none>
[17:44:55.233] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:55.233] Resolved: FALSE
[17:44:55.233] Value: <not collected>
[17:44:55.233] Conditions captured: <none>
[17:44:55.233] Early signaling: FALSE
[17:44:55.233] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:55.233] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:55.245] Chunk #1 of 2 ... DONE
[17:44:55.245] Chunk #2 of 2 ...
[17:44:55.245]  - Finding globals in 'X' for chunk #2 ...
[17:44:55.245] getGlobalsAndPackages() ...
[17:44:55.245] Searching for globals...
[17:44:55.245] 
[17:44:55.245] Searching for globals ... DONE
[17:44:55.245] - globals: [0] <none>
[17:44:55.246] getGlobalsAndPackages() ... DONE
[17:44:55.246]    + additional globals found: [n=0] 
[17:44:55.246]    + additional namespaces needed: [n=0] 
[17:44:55.246]  - Finding globals in 'X' for chunk #2 ... DONE
[17:44:55.246]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:55.246]  - seeds: [3] <seeds>
[17:44:55.246]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:55.246] getGlobalsAndPackages() ...
[17:44:55.246] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:55.246] Resolving globals: FALSE
[17:44:55.247] Tweak future expression to call with '...' arguments ...
[17:44:55.247] {
[17:44:55.247]     do.call(function(...) {
[17:44:55.247]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:55.247]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:55.247]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:55.247]             on.exit(options(oopts), add = TRUE)
[17:44:55.247]         }
[17:44:55.247]         {
[17:44:55.247]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:55.247]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:55.247]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:55.247]                   envir = globalenv(), inherits = FALSE)
[17:44:55.247]                 ...future.FUN(...future.X_jj, ...)
[17:44:55.247]             })
[17:44:55.247]         }
[17:44:55.247]     }, args = future.call.arguments)
[17:44:55.247] }
[17:44:55.247] Tweak future expression to call with '...' arguments ... DONE
[17:44:55.247] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:55.247] 
[17:44:55.247] getGlobalsAndPackages() ... DONE
[17:44:55.248] run() for ‘Future’ ...
[17:44:55.248] - state: ‘created’
[17:44:55.248] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:44:55.262] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:55.262] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:44:55.262]   - Field: ‘node’
[17:44:55.262]   - Field: ‘label’
[17:44:55.262]   - Field: ‘local’
[17:44:55.262]   - Field: ‘owner’
[17:44:55.262]   - Field: ‘envir’
[17:44:55.263]   - Field: ‘workers’
[17:44:55.263]   - Field: ‘packages’
[17:44:55.263]   - Field: ‘gc’
[17:44:55.263]   - Field: ‘conditions’
[17:44:55.263]   - Field: ‘persistent’
[17:44:55.263]   - Field: ‘expr’
[17:44:55.263]   - Field: ‘uuid’
[17:44:55.263]   - Field: ‘seed’
[17:44:55.263]   - Field: ‘version’
[17:44:55.263]   - Field: ‘result’
[17:44:55.263]   - Field: ‘asynchronous’
[17:44:55.264]   - Field: ‘calls’
[17:44:55.264]   - Field: ‘globals’
[17:44:55.264]   - Field: ‘stdout’
[17:44:55.264]   - Field: ‘earlySignal’
[17:44:55.264]   - Field: ‘lazy’
[17:44:55.264]   - Field: ‘state’
[17:44:55.264] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:44:55.264] - Launch lazy future ...
[17:44:55.264] Packages needed by the future expression (n = 0): <none>
[17:44:55.265] Packages needed by future strategies (n = 0): <none>
[17:44:55.265] {
[17:44:55.265]     {
[17:44:55.265]         {
[17:44:55.265]             ...future.startTime <- base::Sys.time()
[17:44:55.265]             {
[17:44:55.265]                 {
[17:44:55.265]                   {
[17:44:55.265]                     {
[17:44:55.265]                       base::local({
[17:44:55.265]                         has_future <- base::requireNamespace("future", 
[17:44:55.265]                           quietly = TRUE)
[17:44:55.265]                         if (has_future) {
[17:44:55.265]                           ns <- base::getNamespace("future")
[17:44:55.265]                           version <- ns[[".package"]][["version"]]
[17:44:55.265]                           if (is.null(version)) 
[17:44:55.265]                             version <- utils::packageVersion("future")
[17:44:55.265]                         }
[17:44:55.265]                         else {
[17:44:55.265]                           version <- NULL
[17:44:55.265]                         }
[17:44:55.265]                         if (!has_future || version < "1.8.0") {
[17:44:55.265]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:55.265]                             "", base::R.version$version.string), 
[17:44:55.265]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:55.265]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:55.265]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:55.265]                               "release", "version")], collapse = " "), 
[17:44:55.265]                             hostname = base::Sys.info()[["nodename"]])
[17:44:55.265]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:55.265]                             info)
[17:44:55.265]                           info <- base::paste(info, collapse = "; ")
[17:44:55.265]                           if (!has_future) {
[17:44:55.265]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:55.265]                               info)
[17:44:55.265]                           }
[17:44:55.265]                           else {
[17:44:55.265]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:55.265]                               info, version)
[17:44:55.265]                           }
[17:44:55.265]                           base::stop(msg)
[17:44:55.265]                         }
[17:44:55.265]                       })
[17:44:55.265]                     }
[17:44:55.265]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:55.265]                     base::options(mc.cores = 1L)
[17:44:55.265]                   }
[17:44:55.265]                   ...future.strategy.old <- future::plan("list")
[17:44:55.265]                   options(future.plan = NULL)
[17:44:55.265]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:55.265]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:55.265]                 }
[17:44:55.265]                 ...future.workdir <- getwd()
[17:44:55.265]             }
[17:44:55.265]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:55.265]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:55.265]         }
[17:44:55.265]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:55.265]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:55.265]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:55.265]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:55.265]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:55.265]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:55.265]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:55.265]             base::names(...future.oldOptions))
[17:44:55.265]     }
[17:44:55.265]     if (FALSE) {
[17:44:55.265]     }
[17:44:55.265]     else {
[17:44:55.265]         if (TRUE) {
[17:44:55.265]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:55.265]                 open = "w")
[17:44:55.265]         }
[17:44:55.265]         else {
[17:44:55.265]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:55.265]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:55.265]         }
[17:44:55.265]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:55.265]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:55.265]             base::sink(type = "output", split = FALSE)
[17:44:55.265]             base::close(...future.stdout)
[17:44:55.265]         }, add = TRUE)
[17:44:55.265]     }
[17:44:55.265]     ...future.frame <- base::sys.nframe()
[17:44:55.265]     ...future.conditions <- base::list()
[17:44:55.265]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:55.265]     if (FALSE) {
[17:44:55.265]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:55.265]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:55.265]     }
[17:44:55.265]     ...future.result <- base::tryCatch({
[17:44:55.265]         base::withCallingHandlers({
[17:44:55.265]             ...future.value <- base::withVisible(base::local({
[17:44:55.265]                 ...future.makeSendCondition <- base::local({
[17:44:55.265]                   sendCondition <- NULL
[17:44:55.265]                   function(frame = 1L) {
[17:44:55.265]                     if (is.function(sendCondition)) 
[17:44:55.265]                       return(sendCondition)
[17:44:55.265]                     ns <- getNamespace("parallel")
[17:44:55.265]                     if (exists("sendData", mode = "function", 
[17:44:55.265]                       envir = ns)) {
[17:44:55.265]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:55.265]                         envir = ns)
[17:44:55.265]                       envir <- sys.frame(frame)
[17:44:55.265]                       master <- NULL
[17:44:55.265]                       while (!identical(envir, .GlobalEnv) && 
[17:44:55.265]                         !identical(envir, emptyenv())) {
[17:44:55.265]                         if (exists("master", mode = "list", envir = envir, 
[17:44:55.265]                           inherits = FALSE)) {
[17:44:55.265]                           master <- get("master", mode = "list", 
[17:44:55.265]                             envir = envir, inherits = FALSE)
[17:44:55.265]                           if (inherits(master, c("SOCKnode", 
[17:44:55.265]                             "SOCK0node"))) {
[17:44:55.265]                             sendCondition <<- function(cond) {
[17:44:55.265]                               data <- list(type = "VALUE", value = cond, 
[17:44:55.265]                                 success = TRUE)
[17:44:55.265]                               parallel_sendData(master, data)
[17:44:55.265]                             }
[17:44:55.265]                             return(sendCondition)
[17:44:55.265]                           }
[17:44:55.265]                         }
[17:44:55.265]                         frame <- frame + 1L
[17:44:55.265]                         envir <- sys.frame(frame)
[17:44:55.265]                       }
[17:44:55.265]                     }
[17:44:55.265]                     sendCondition <<- function(cond) NULL
[17:44:55.265]                   }
[17:44:55.265]                 })
[17:44:55.265]                 withCallingHandlers({
[17:44:55.265]                   {
[17:44:55.265]                     do.call(function(...) {
[17:44:55.265]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:55.265]                       if (!identical(...future.globals.maxSize.org, 
[17:44:55.265]                         ...future.globals.maxSize)) {
[17:44:55.265]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:55.265]                         on.exit(options(oopts), add = TRUE)
[17:44:55.265]                       }
[17:44:55.265]                       {
[17:44:55.265]                         lapply(seq_along(...future.elements_ii), 
[17:44:55.265]                           FUN = function(jj) {
[17:44:55.265]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:55.265]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:55.265]                               envir = globalenv(), inherits = FALSE)
[17:44:55.265]                             ...future.FUN(...future.X_jj, ...)
[17:44:55.265]                           })
[17:44:55.265]                       }
[17:44:55.265]                     }, args = future.call.arguments)
[17:44:55.265]                   }
[17:44:55.265]                 }, immediateCondition = function(cond) {
[17:44:55.265]                   sendCondition <- ...future.makeSendCondition()
[17:44:55.265]                   sendCondition(cond)
[17:44:55.265]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:55.265]                   {
[17:44:55.265]                     inherits <- base::inherits
[17:44:55.265]                     invokeRestart <- base::invokeRestart
[17:44:55.265]                     is.null <- base::is.null
[17:44:55.265]                     muffled <- FALSE
[17:44:55.265]                     if (inherits(cond, "message")) {
[17:44:55.265]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:55.265]                       if (muffled) 
[17:44:55.265]                         invokeRestart("muffleMessage")
[17:44:55.265]                     }
[17:44:55.265]                     else if (inherits(cond, "warning")) {
[17:44:55.265]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:55.265]                       if (muffled) 
[17:44:55.265]                         invokeRestart("muffleWarning")
[17:44:55.265]                     }
[17:44:55.265]                     else if (inherits(cond, "condition")) {
[17:44:55.265]                       if (!is.null(pattern)) {
[17:44:55.265]                         computeRestarts <- base::computeRestarts
[17:44:55.265]                         grepl <- base::grepl
[17:44:55.265]                         restarts <- computeRestarts(cond)
[17:44:55.265]                         for (restart in restarts) {
[17:44:55.265]                           name <- restart$name
[17:44:55.265]                           if (is.null(name)) 
[17:44:55.265]                             next
[17:44:55.265]                           if (!grepl(pattern, name)) 
[17:44:55.265]                             next
[17:44:55.265]                           invokeRestart(restart)
[17:44:55.265]                           muffled <- TRUE
[17:44:55.265]                           break
[17:44:55.265]                         }
[17:44:55.265]                       }
[17:44:55.265]                     }
[17:44:55.265]                     invisible(muffled)
[17:44:55.265]                   }
[17:44:55.265]                   muffleCondition(cond)
[17:44:55.265]                 })
[17:44:55.265]             }))
[17:44:55.265]             future::FutureResult(value = ...future.value$value, 
[17:44:55.265]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:55.265]                   ...future.rng), globalenv = if (FALSE) 
[17:44:55.265]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:55.265]                     ...future.globalenv.names))
[17:44:55.265]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:55.265]         }, condition = base::local({
[17:44:55.265]             c <- base::c
[17:44:55.265]             inherits <- base::inherits
[17:44:55.265]             invokeRestart <- base::invokeRestart
[17:44:55.265]             length <- base::length
[17:44:55.265]             list <- base::list
[17:44:55.265]             seq.int <- base::seq.int
[17:44:55.265]             signalCondition <- base::signalCondition
[17:44:55.265]             sys.calls <- base::sys.calls
[17:44:55.265]             `[[` <- base::`[[`
[17:44:55.265]             `+` <- base::`+`
[17:44:55.265]             `<<-` <- base::`<<-`
[17:44:55.265]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:55.265]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:55.265]                   3L)]
[17:44:55.265]             }
[17:44:55.265]             function(cond) {
[17:44:55.265]                 is_error <- inherits(cond, "error")
[17:44:55.265]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:55.265]                   NULL)
[17:44:55.265]                 if (is_error) {
[17:44:55.265]                   sessionInformation <- function() {
[17:44:55.265]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:55.265]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:55.265]                       search = base::search(), system = base::Sys.info())
[17:44:55.265]                   }
[17:44:55.265]                   ...future.conditions[[length(...future.conditions) + 
[17:44:55.265]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:55.265]                     cond$call), session = sessionInformation(), 
[17:44:55.265]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:55.265]                   signalCondition(cond)
[17:44:55.265]                 }
[17:44:55.265]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:55.265]                 "immediateCondition"))) {
[17:44:55.265]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:55.265]                   ...future.conditions[[length(...future.conditions) + 
[17:44:55.265]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:55.265]                   if (TRUE && !signal) {
[17:44:55.265]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:55.265]                     {
[17:44:55.265]                       inherits <- base::inherits
[17:44:55.265]                       invokeRestart <- base::invokeRestart
[17:44:55.265]                       is.null <- base::is.null
[17:44:55.265]                       muffled <- FALSE
[17:44:55.265]                       if (inherits(cond, "message")) {
[17:44:55.265]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:55.265]                         if (muffled) 
[17:44:55.265]                           invokeRestart("muffleMessage")
[17:44:55.265]                       }
[17:44:55.265]                       else if (inherits(cond, "warning")) {
[17:44:55.265]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:55.265]                         if (muffled) 
[17:44:55.265]                           invokeRestart("muffleWarning")
[17:44:55.265]                       }
[17:44:55.265]                       else if (inherits(cond, "condition")) {
[17:44:55.265]                         if (!is.null(pattern)) {
[17:44:55.265]                           computeRestarts <- base::computeRestarts
[17:44:55.265]                           grepl <- base::grepl
[17:44:55.265]                           restarts <- computeRestarts(cond)
[17:44:55.265]                           for (restart in restarts) {
[17:44:55.265]                             name <- restart$name
[17:44:55.265]                             if (is.null(name)) 
[17:44:55.265]                               next
[17:44:55.265]                             if (!grepl(pattern, name)) 
[17:44:55.265]                               next
[17:44:55.265]                             invokeRestart(restart)
[17:44:55.265]                             muffled <- TRUE
[17:44:55.265]                             break
[17:44:55.265]                           }
[17:44:55.265]                         }
[17:44:55.265]                       }
[17:44:55.265]                       invisible(muffled)
[17:44:55.265]                     }
[17:44:55.265]                     muffleCondition(cond, pattern = "^muffle")
[17:44:55.265]                   }
[17:44:55.265]                 }
[17:44:55.265]                 else {
[17:44:55.265]                   if (TRUE) {
[17:44:55.265]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:55.265]                     {
[17:44:55.265]                       inherits <- base::inherits
[17:44:55.265]                       invokeRestart <- base::invokeRestart
[17:44:55.265]                       is.null <- base::is.null
[17:44:55.265]                       muffled <- FALSE
[17:44:55.265]                       if (inherits(cond, "message")) {
[17:44:55.265]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:55.265]                         if (muffled) 
[17:44:55.265]                           invokeRestart("muffleMessage")
[17:44:55.265]                       }
[17:44:55.265]                       else if (inherits(cond, "warning")) {
[17:44:55.265]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:55.265]                         if (muffled) 
[17:44:55.265]                           invokeRestart("muffleWarning")
[17:44:55.265]                       }
[17:44:55.265]                       else if (inherits(cond, "condition")) {
[17:44:55.265]                         if (!is.null(pattern)) {
[17:44:55.265]                           computeRestarts <- base::computeRestarts
[17:44:55.265]                           grepl <- base::grepl
[17:44:55.265]                           restarts <- computeRestarts(cond)
[17:44:55.265]                           for (restart in restarts) {
[17:44:55.265]                             name <- restart$name
[17:44:55.265]                             if (is.null(name)) 
[17:44:55.265]                               next
[17:44:55.265]                             if (!grepl(pattern, name)) 
[17:44:55.265]                               next
[17:44:55.265]                             invokeRestart(restart)
[17:44:55.265]                             muffled <- TRUE
[17:44:55.265]                             break
[17:44:55.265]                           }
[17:44:55.265]                         }
[17:44:55.265]                       }
[17:44:55.265]                       invisible(muffled)
[17:44:55.265]                     }
[17:44:55.265]                     muffleCondition(cond, pattern = "^muffle")
[17:44:55.265]                   }
[17:44:55.265]                 }
[17:44:55.265]             }
[17:44:55.265]         }))
[17:44:55.265]     }, error = function(ex) {
[17:44:55.265]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:55.265]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:55.265]                 ...future.rng), started = ...future.startTime, 
[17:44:55.265]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:55.265]             version = "1.8"), class = "FutureResult")
[17:44:55.265]     }, finally = {
[17:44:55.265]         if (!identical(...future.workdir, getwd())) 
[17:44:55.265]             setwd(...future.workdir)
[17:44:55.265]         {
[17:44:55.265]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:55.265]                 ...future.oldOptions$nwarnings <- NULL
[17:44:55.265]             }
[17:44:55.265]             base::options(...future.oldOptions)
[17:44:55.265]             if (.Platform$OS.type == "windows") {
[17:44:55.265]                 old_names <- names(...future.oldEnvVars)
[17:44:55.265]                 envs <- base::Sys.getenv()
[17:44:55.265]                 names <- names(envs)
[17:44:55.265]                 common <- intersect(names, old_names)
[17:44:55.265]                 added <- setdiff(names, old_names)
[17:44:55.265]                 removed <- setdiff(old_names, names)
[17:44:55.265]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:55.265]                   envs[common]]
[17:44:55.265]                 NAMES <- toupper(changed)
[17:44:55.265]                 args <- list()
[17:44:55.265]                 for (kk in seq_along(NAMES)) {
[17:44:55.265]                   name <- changed[[kk]]
[17:44:55.265]                   NAME <- NAMES[[kk]]
[17:44:55.265]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:55.265]                     next
[17:44:55.265]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:55.265]                 }
[17:44:55.265]                 NAMES <- toupper(added)
[17:44:55.265]                 for (kk in seq_along(NAMES)) {
[17:44:55.265]                   name <- added[[kk]]
[17:44:55.265]                   NAME <- NAMES[[kk]]
[17:44:55.265]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:55.265]                     next
[17:44:55.265]                   args[[name]] <- ""
[17:44:55.265]                 }
[17:44:55.265]                 NAMES <- toupper(removed)
[17:44:55.265]                 for (kk in seq_along(NAMES)) {
[17:44:55.265]                   name <- removed[[kk]]
[17:44:55.265]                   NAME <- NAMES[[kk]]
[17:44:55.265]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:55.265]                     next
[17:44:55.265]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:55.265]                 }
[17:44:55.265]                 if (length(args) > 0) 
[17:44:55.265]                   base::do.call(base::Sys.setenv, args = args)
[17:44:55.265]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:55.265]             }
[17:44:55.265]             else {
[17:44:55.265]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:55.265]             }
[17:44:55.265]             {
[17:44:55.265]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:55.265]                   0L) {
[17:44:55.265]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:55.265]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:55.265]                   base::options(opts)
[17:44:55.265]                 }
[17:44:55.265]                 {
[17:44:55.265]                   {
[17:44:55.265]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:55.265]                     NULL
[17:44:55.265]                   }
[17:44:55.265]                   options(future.plan = NULL)
[17:44:55.265]                   if (is.na(NA_character_)) 
[17:44:55.265]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:55.265]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:55.265]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:55.265]                     .init = FALSE)
[17:44:55.265]                 }
[17:44:55.265]             }
[17:44:55.265]         }
[17:44:55.265]     })
[17:44:55.265]     if (TRUE) {
[17:44:55.265]         base::sink(type = "output", split = FALSE)
[17:44:55.265]         if (TRUE) {
[17:44:55.265]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:55.265]         }
[17:44:55.265]         else {
[17:44:55.265]             ...future.result["stdout"] <- base::list(NULL)
[17:44:55.265]         }
[17:44:55.265]         base::close(...future.stdout)
[17:44:55.265]         ...future.stdout <- NULL
[17:44:55.265]     }
[17:44:55.265]     ...future.result$conditions <- ...future.conditions
[17:44:55.265]     ...future.result$finished <- base::Sys.time()
[17:44:55.265]     ...future.result
[17:44:55.265] }
[17:44:55.268] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[17:44:55.268] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[17:44:55.268] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[17:44:55.269] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:44:55.269] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:44:55.269] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:44:55.269] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:44:55.270] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:44:55.270] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:44:55.270] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:44:55.270] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:44:55.271] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[17:44:55.271] MultisessionFuture started
[17:44:55.271] - Launch lazy future ... done
[17:44:55.271] run() for ‘MultisessionFuture’ ... done
[17:44:55.272] Created future:
[17:44:55.272] MultisessionFuture:
[17:44:55.272] Label: ‘future_replicate-2’
[17:44:55.272] Expression:
[17:44:55.272] {
[17:44:55.272]     do.call(function(...) {
[17:44:55.272]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:55.272]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:55.272]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:55.272]             on.exit(options(oopts), add = TRUE)
[17:44:55.272]         }
[17:44:55.272]         {
[17:44:55.272]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:55.272]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:55.272]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:55.272]                   envir = globalenv(), inherits = FALSE)
[17:44:55.272]                 ...future.FUN(...future.X_jj, ...)
[17:44:55.272]             })
[17:44:55.272]         }
[17:44:55.272]     }, args = future.call.arguments)
[17:44:55.272] }
[17:44:55.272] Lazy evaluation: FALSE
[17:44:55.272] Asynchronous evaluation: TRUE
[17:44:55.272] Local evaluation: TRUE
[17:44:55.272] Environment: R_GlobalEnv
[17:44:55.272] Capture standard output: TRUE
[17:44:55.272] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:55.272] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:44:55.272] Packages: <none>
[17:44:55.272] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:55.272] Resolved: FALSE
[17:44:55.272] Value: <not collected>
[17:44:55.272] Conditions captured: <none>
[17:44:55.272] Early signaling: FALSE
[17:44:55.272] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:55.272] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:55.283] Chunk #2 of 2 ... DONE
[17:44:55.283] Launching 2 futures (chunks) ... DONE
[17:44:55.284] Resolving 2 futures (chunks) ...
[17:44:55.284] resolve() on list ...
[17:44:55.284]  recursive: 0
[17:44:55.284]  length: 2
[17:44:55.284] 
[17:44:55.285] receiveMessageFromWorker() for ClusterFuture ...
[17:44:55.285] - Validating connection of MultisessionFuture
[17:44:55.285] - received message: FutureResult
[17:44:55.285] - Received FutureResult
[17:44:55.285] - Erased future from FutureRegistry
[17:44:55.285] result() for ClusterFuture ...
[17:44:55.285] - result already collected: FutureResult
[17:44:55.285] result() for ClusterFuture ... done
[17:44:55.285] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:55.285] Future #1
[17:44:55.286] result() for ClusterFuture ...
[17:44:55.286] - result already collected: FutureResult
[17:44:55.286] result() for ClusterFuture ... done
[17:44:55.286] result() for ClusterFuture ...
[17:44:55.286] - result already collected: FutureResult
[17:44:55.286] result() for ClusterFuture ... done
[17:44:55.286] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:44:55.286] - nx: 2
[17:44:55.286] - relay: TRUE
[17:44:55.286] - stdout: TRUE
[17:44:55.286] - signal: TRUE
[17:44:55.287] - resignal: FALSE
[17:44:55.287] - force: TRUE
[17:44:55.287] - relayed: [n=2] FALSE, FALSE
[17:44:55.287] - queued futures: [n=2] FALSE, FALSE
[17:44:55.287]  - until=1
[17:44:55.287]  - relaying element #1
[17:44:55.287] result() for ClusterFuture ...
[17:44:55.287] - result already collected: FutureResult
[17:44:55.287] result() for ClusterFuture ... done
[17:44:55.287] result() for ClusterFuture ...
[17:44:55.287] - result already collected: FutureResult
[17:44:55.287] result() for ClusterFuture ... done
[17:44:55.288] result() for ClusterFuture ...
[17:44:55.288] - result already collected: FutureResult
[17:44:55.288] result() for ClusterFuture ... done
[17:44:55.288] result() for ClusterFuture ...
[17:44:55.288] - result already collected: FutureResult
[17:44:55.288] result() for ClusterFuture ... done
[17:44:55.288] - relayed: [n=2] TRUE, FALSE
[17:44:55.288] - queued futures: [n=2] TRUE, FALSE
[17:44:55.288] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:44:55.288]  length: 1 (resolved future 1)
[17:44:55.313] receiveMessageFromWorker() for ClusterFuture ...
[17:44:55.313] - Validating connection of MultisessionFuture
[17:44:55.313] - received message: FutureResult
[17:44:55.313] - Received FutureResult
[17:44:55.314] - Erased future from FutureRegistry
[17:44:55.314] result() for ClusterFuture ...
[17:44:55.314] - result already collected: FutureResult
[17:44:55.314] result() for ClusterFuture ... done
[17:44:55.314] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:55.314] Future #2
[17:44:55.314] result() for ClusterFuture ...
[17:44:55.314] - result already collected: FutureResult
[17:44:55.314] result() for ClusterFuture ... done
[17:44:55.314] result() for ClusterFuture ...
[17:44:55.314] - result already collected: FutureResult
[17:44:55.314] result() for ClusterFuture ... done
[17:44:55.315] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:44:55.315] - nx: 2
[17:44:55.315] - relay: TRUE
[17:44:55.315] - stdout: TRUE
[17:44:55.315] - signal: TRUE
[17:44:55.315] - resignal: FALSE
[17:44:55.315] - force: TRUE
[17:44:55.315] - relayed: [n=2] TRUE, FALSE
[17:44:55.315] - queued futures: [n=2] TRUE, FALSE
[17:44:55.315]  - until=2
[17:44:55.315]  - relaying element #2
[17:44:55.316] result() for ClusterFuture ...
[17:44:55.316] - result already collected: FutureResult
[17:44:55.316] result() for ClusterFuture ... done
[17:44:55.316] result() for ClusterFuture ...
[17:44:55.316] - result already collected: FutureResult
[17:44:55.316] result() for ClusterFuture ... done
[17:44:55.316] result() for ClusterFuture ...
[17:44:55.316] - result already collected: FutureResult
[17:44:55.316] result() for ClusterFuture ... done
[17:44:55.316] result() for ClusterFuture ...
[17:44:55.316] - result already collected: FutureResult
[17:44:55.317] result() for ClusterFuture ... done
[17:44:55.317] - relayed: [n=2] TRUE, TRUE
[17:44:55.317] - queued futures: [n=2] TRUE, TRUE
[17:44:55.317] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:44:55.317]  length: 0 (resolved future 2)
[17:44:55.317] Relaying remaining futures
[17:44:55.317] signalConditionsASAP(NULL, pos=0) ...
[17:44:55.317] - nx: 2
[17:44:55.317] - relay: TRUE
[17:44:55.317] - stdout: TRUE
[17:44:55.317] - signal: TRUE
[17:44:55.317] - resignal: FALSE
[17:44:55.318] - force: TRUE
[17:44:55.318] - relayed: [n=2] TRUE, TRUE
[17:44:55.318] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:44:55.318] - relayed: [n=2] TRUE, TRUE
[17:44:55.318] - queued futures: [n=2] TRUE, TRUE
[17:44:55.318] signalConditionsASAP(NULL, pos=0) ... done
[17:44:55.318] resolve() on list ... DONE
[17:44:55.318] result() for ClusterFuture ...
[17:44:55.318] - result already collected: FutureResult
[17:44:55.318] result() for ClusterFuture ... done
[17:44:55.319] result() for ClusterFuture ...
[17:44:55.319] - result already collected: FutureResult
[17:44:55.319] result() for ClusterFuture ... done
[17:44:55.321] result() for ClusterFuture ...
[17:44:55.321] - result already collected: FutureResult
[17:44:55.321] result() for ClusterFuture ... done
[17:44:55.322] result() for ClusterFuture ...
[17:44:55.322] - result already collected: FutureResult
[17:44:55.322] result() for ClusterFuture ... done
[17:44:55.322]  - Number of value chunks collected: 2
[17:44:55.322] Resolving 2 futures (chunks) ... DONE
[17:44:55.322] Reducing values from 2 chunks ...
[17:44:55.322]  - Number of values collected after concatenation: 5
[17:44:55.322]  - Number of values expected: 5
[17:44:55.322] Reducing values from 2 chunks ... DONE
[17:44:55.322] future_lapply() ... DONE
- example(replicate) ...
[17:44:55.323] future_lapply() ...
[17:44:55.323] Generating random seeds ...
[17:44:55.323] Generating random seed streams for 5 elements ...
[17:44:55.324] Generating random seed streams for 5 elements ... DONE
[17:44:55.324] Generating random seeds ... DONE
[17:44:55.324] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:44:55.328] Number of chunks: 2
[17:44:55.328] getGlobalsAndPackagesXApply() ...
[17:44:55.328]  - future.globals: TRUE
[17:44:55.328] getGlobalsAndPackages() ...
[17:44:55.328] Searching for globals...
[17:44:55.330] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[17:44:55.330] Searching for globals ... DONE
[17:44:55.330] Resolving globals: FALSE
[17:44:55.331] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[17:44:55.331] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[17:44:55.331] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[17:44:55.331] 
[17:44:55.332] getGlobalsAndPackages() ... DONE
[17:44:55.332]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[17:44:55.332]  - needed namespaces: [n=0] 
[17:44:55.332] Finding globals ... DONE
[17:44:55.332]  - use_args: TRUE
[17:44:55.332]  - Getting '...' globals ...
[17:44:55.332] resolve() on list ...
[17:44:55.332]  recursive: 0
[17:44:55.332]  length: 1
[17:44:55.333]  elements: ‘...’
[17:44:55.333]  length: 0 (resolved future 1)
[17:44:55.333] resolve() on list ... DONE
[17:44:55.333]    - '...' content: [n=0] 
[17:44:55.333] List of 1
[17:44:55.333]  $ ...: list()
[17:44:55.333]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:55.333]  - attr(*, "where")=List of 1
[17:44:55.333]   ..$ ...:<environment: 0x558388756ad8> 
[17:44:55.333]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:55.333]  - attr(*, "resolved")= logi TRUE
[17:44:55.333]  - attr(*, "total_size")= num NA
[17:44:55.335]  - Getting '...' globals ... DONE
[17:44:55.336] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[17:44:55.336] List of 4
[17:44:55.336]  $ ...future.FUN:function (...)  
[17:44:55.336]  $ foo          :function (x = 1, y = 2)  
[17:44:55.336]  $ x            : num 3
[17:44:55.336]  $ ...          : list()
[17:44:55.336]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:44:55.336]  - attr(*, "where")=List of 4
[17:44:55.336]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:44:55.336]   ..$ foo          :<environment: R_EmptyEnv> 
[17:44:55.336]   ..$ x            :<environment: R_EmptyEnv> 
[17:44:55.336]   ..$ ...          :<environment: 0x558388756ad8> 
[17:44:55.336]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:44:55.336]  - attr(*, "resolved")= logi FALSE
[17:44:55.336]  - attr(*, "total_size")= num 2200
[17:44:55.339] Packages to be attached in all futures: [n=0] 
[17:44:55.339] getGlobalsAndPackagesXApply() ... DONE
[17:44:55.340] Number of futures (= number of chunks): 2
[17:44:55.340] Launching 2 futures (chunks) ...
[17:44:55.340] Chunk #1 of 2 ...
[17:44:55.340]  - Finding globals in 'X' for chunk #1 ...
[17:44:55.340] getGlobalsAndPackages() ...
[17:44:55.340] Searching for globals...
[17:44:55.340] 
[17:44:55.340] Searching for globals ... DONE
[17:44:55.341] - globals: [0] <none>
[17:44:55.341] getGlobalsAndPackages() ... DONE
[17:44:55.341]    + additional globals found: [n=0] 
[17:44:55.341]    + additional namespaces needed: [n=0] 
[17:44:55.341]  - Finding globals in 'X' for chunk #1 ... DONE
[17:44:55.341]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:55.341]  - seeds: [2] <seeds>
[17:44:55.341]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:55.341] getGlobalsAndPackages() ...
[17:44:55.341] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:55.341] Resolving globals: FALSE
[17:44:55.342] Tweak future expression to call with '...' arguments ...
[17:44:55.342] {
[17:44:55.342]     do.call(function(...) {
[17:44:55.342]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:55.342]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:55.342]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:55.342]             on.exit(options(oopts), add = TRUE)
[17:44:55.342]         }
[17:44:55.342]         {
[17:44:55.342]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:55.342]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:55.342]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:55.342]                   envir = globalenv(), inherits = FALSE)
[17:44:55.342]                 ...future.FUN(...future.X_jj, ...)
[17:44:55.342]             })
[17:44:55.342]         }
[17:44:55.342]     }, args = future.call.arguments)
[17:44:55.342] }
[17:44:55.342] Tweak future expression to call with '...' arguments ... DONE
[17:44:55.342] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:55.342] 
[17:44:55.343] getGlobalsAndPackages() ... DONE
[17:44:55.343] run() for ‘Future’ ...
[17:44:55.343] - state: ‘created’
[17:44:55.343] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:44:55.357] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:55.357] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:44:55.358]   - Field: ‘node’
[17:44:55.358]   - Field: ‘label’
[17:44:55.358]   - Field: ‘local’
[17:44:55.358]   - Field: ‘owner’
[17:44:55.358]   - Field: ‘envir’
[17:44:55.358]   - Field: ‘workers’
[17:44:55.358]   - Field: ‘packages’
[17:44:55.358]   - Field: ‘gc’
[17:44:55.358]   - Field: ‘conditions’
[17:44:55.358]   - Field: ‘persistent’
[17:44:55.359]   - Field: ‘expr’
[17:44:55.359]   - Field: ‘uuid’
[17:44:55.359]   - Field: ‘seed’
[17:44:55.359]   - Field: ‘version’
[17:44:55.359]   - Field: ‘result’
[17:44:55.359]   - Field: ‘asynchronous’
[17:44:55.359]   - Field: ‘calls’
[17:44:55.359]   - Field: ‘globals’
[17:44:55.359]   - Field: ‘stdout’
[17:44:55.359]   - Field: ‘earlySignal’
[17:44:55.360]   - Field: ‘lazy’
[17:44:55.360]   - Field: ‘state’
[17:44:55.360] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:44:55.360] - Launch lazy future ...
[17:44:55.360] Packages needed by the future expression (n = 0): <none>
[17:44:55.360] Packages needed by future strategies (n = 0): <none>
[17:44:55.361] {
[17:44:55.361]     {
[17:44:55.361]         {
[17:44:55.361]             ...future.startTime <- base::Sys.time()
[17:44:55.361]             {
[17:44:55.361]                 {
[17:44:55.361]                   {
[17:44:55.361]                     {
[17:44:55.361]                       base::local({
[17:44:55.361]                         has_future <- base::requireNamespace("future", 
[17:44:55.361]                           quietly = TRUE)
[17:44:55.361]                         if (has_future) {
[17:44:55.361]                           ns <- base::getNamespace("future")
[17:44:55.361]                           version <- ns[[".package"]][["version"]]
[17:44:55.361]                           if (is.null(version)) 
[17:44:55.361]                             version <- utils::packageVersion("future")
[17:44:55.361]                         }
[17:44:55.361]                         else {
[17:44:55.361]                           version <- NULL
[17:44:55.361]                         }
[17:44:55.361]                         if (!has_future || version < "1.8.0") {
[17:44:55.361]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:55.361]                             "", base::R.version$version.string), 
[17:44:55.361]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:55.361]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:55.361]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:55.361]                               "release", "version")], collapse = " "), 
[17:44:55.361]                             hostname = base::Sys.info()[["nodename"]])
[17:44:55.361]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:55.361]                             info)
[17:44:55.361]                           info <- base::paste(info, collapse = "; ")
[17:44:55.361]                           if (!has_future) {
[17:44:55.361]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:55.361]                               info)
[17:44:55.361]                           }
[17:44:55.361]                           else {
[17:44:55.361]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:55.361]                               info, version)
[17:44:55.361]                           }
[17:44:55.361]                           base::stop(msg)
[17:44:55.361]                         }
[17:44:55.361]                       })
[17:44:55.361]                     }
[17:44:55.361]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:55.361]                     base::options(mc.cores = 1L)
[17:44:55.361]                   }
[17:44:55.361]                   ...future.strategy.old <- future::plan("list")
[17:44:55.361]                   options(future.plan = NULL)
[17:44:55.361]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:55.361]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:55.361]                 }
[17:44:55.361]                 ...future.workdir <- getwd()
[17:44:55.361]             }
[17:44:55.361]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:55.361]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:55.361]         }
[17:44:55.361]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:55.361]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:55.361]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:55.361]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:55.361]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:55.361]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:55.361]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:55.361]             base::names(...future.oldOptions))
[17:44:55.361]     }
[17:44:55.361]     if (FALSE) {
[17:44:55.361]     }
[17:44:55.361]     else {
[17:44:55.361]         if (TRUE) {
[17:44:55.361]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:55.361]                 open = "w")
[17:44:55.361]         }
[17:44:55.361]         else {
[17:44:55.361]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:55.361]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:55.361]         }
[17:44:55.361]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:55.361]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:55.361]             base::sink(type = "output", split = FALSE)
[17:44:55.361]             base::close(...future.stdout)
[17:44:55.361]         }, add = TRUE)
[17:44:55.361]     }
[17:44:55.361]     ...future.frame <- base::sys.nframe()
[17:44:55.361]     ...future.conditions <- base::list()
[17:44:55.361]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:55.361]     if (FALSE) {
[17:44:55.361]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:55.361]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:55.361]     }
[17:44:55.361]     ...future.result <- base::tryCatch({
[17:44:55.361]         base::withCallingHandlers({
[17:44:55.361]             ...future.value <- base::withVisible(base::local({
[17:44:55.361]                 ...future.makeSendCondition <- base::local({
[17:44:55.361]                   sendCondition <- NULL
[17:44:55.361]                   function(frame = 1L) {
[17:44:55.361]                     if (is.function(sendCondition)) 
[17:44:55.361]                       return(sendCondition)
[17:44:55.361]                     ns <- getNamespace("parallel")
[17:44:55.361]                     if (exists("sendData", mode = "function", 
[17:44:55.361]                       envir = ns)) {
[17:44:55.361]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:55.361]                         envir = ns)
[17:44:55.361]                       envir <- sys.frame(frame)
[17:44:55.361]                       master <- NULL
[17:44:55.361]                       while (!identical(envir, .GlobalEnv) && 
[17:44:55.361]                         !identical(envir, emptyenv())) {
[17:44:55.361]                         if (exists("master", mode = "list", envir = envir, 
[17:44:55.361]                           inherits = FALSE)) {
[17:44:55.361]                           master <- get("master", mode = "list", 
[17:44:55.361]                             envir = envir, inherits = FALSE)
[17:44:55.361]                           if (inherits(master, c("SOCKnode", 
[17:44:55.361]                             "SOCK0node"))) {
[17:44:55.361]                             sendCondition <<- function(cond) {
[17:44:55.361]                               data <- list(type = "VALUE", value = cond, 
[17:44:55.361]                                 success = TRUE)
[17:44:55.361]                               parallel_sendData(master, data)
[17:44:55.361]                             }
[17:44:55.361]                             return(sendCondition)
[17:44:55.361]                           }
[17:44:55.361]                         }
[17:44:55.361]                         frame <- frame + 1L
[17:44:55.361]                         envir <- sys.frame(frame)
[17:44:55.361]                       }
[17:44:55.361]                     }
[17:44:55.361]                     sendCondition <<- function(cond) NULL
[17:44:55.361]                   }
[17:44:55.361]                 })
[17:44:55.361]                 withCallingHandlers({
[17:44:55.361]                   {
[17:44:55.361]                     do.call(function(...) {
[17:44:55.361]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:55.361]                       if (!identical(...future.globals.maxSize.org, 
[17:44:55.361]                         ...future.globals.maxSize)) {
[17:44:55.361]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:55.361]                         on.exit(options(oopts), add = TRUE)
[17:44:55.361]                       }
[17:44:55.361]                       {
[17:44:55.361]                         lapply(seq_along(...future.elements_ii), 
[17:44:55.361]                           FUN = function(jj) {
[17:44:55.361]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:55.361]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:55.361]                               envir = globalenv(), inherits = FALSE)
[17:44:55.361]                             ...future.FUN(...future.X_jj, ...)
[17:44:55.361]                           })
[17:44:55.361]                       }
[17:44:55.361]                     }, args = future.call.arguments)
[17:44:55.361]                   }
[17:44:55.361]                 }, immediateCondition = function(cond) {
[17:44:55.361]                   sendCondition <- ...future.makeSendCondition()
[17:44:55.361]                   sendCondition(cond)
[17:44:55.361]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:55.361]                   {
[17:44:55.361]                     inherits <- base::inherits
[17:44:55.361]                     invokeRestart <- base::invokeRestart
[17:44:55.361]                     is.null <- base::is.null
[17:44:55.361]                     muffled <- FALSE
[17:44:55.361]                     if (inherits(cond, "message")) {
[17:44:55.361]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:55.361]                       if (muffled) 
[17:44:55.361]                         invokeRestart("muffleMessage")
[17:44:55.361]                     }
[17:44:55.361]                     else if (inherits(cond, "warning")) {
[17:44:55.361]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:55.361]                       if (muffled) 
[17:44:55.361]                         invokeRestart("muffleWarning")
[17:44:55.361]                     }
[17:44:55.361]                     else if (inherits(cond, "condition")) {
[17:44:55.361]                       if (!is.null(pattern)) {
[17:44:55.361]                         computeRestarts <- base::computeRestarts
[17:44:55.361]                         grepl <- base::grepl
[17:44:55.361]                         restarts <- computeRestarts(cond)
[17:44:55.361]                         for (restart in restarts) {
[17:44:55.361]                           name <- restart$name
[17:44:55.361]                           if (is.null(name)) 
[17:44:55.361]                             next
[17:44:55.361]                           if (!grepl(pattern, name)) 
[17:44:55.361]                             next
[17:44:55.361]                           invokeRestart(restart)
[17:44:55.361]                           muffled <- TRUE
[17:44:55.361]                           break
[17:44:55.361]                         }
[17:44:55.361]                       }
[17:44:55.361]                     }
[17:44:55.361]                     invisible(muffled)
[17:44:55.361]                   }
[17:44:55.361]                   muffleCondition(cond)
[17:44:55.361]                 })
[17:44:55.361]             }))
[17:44:55.361]             future::FutureResult(value = ...future.value$value, 
[17:44:55.361]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:55.361]                   ...future.rng), globalenv = if (FALSE) 
[17:44:55.361]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:55.361]                     ...future.globalenv.names))
[17:44:55.361]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:55.361]         }, condition = base::local({
[17:44:55.361]             c <- base::c
[17:44:55.361]             inherits <- base::inherits
[17:44:55.361]             invokeRestart <- base::invokeRestart
[17:44:55.361]             length <- base::length
[17:44:55.361]             list <- base::list
[17:44:55.361]             seq.int <- base::seq.int
[17:44:55.361]             signalCondition <- base::signalCondition
[17:44:55.361]             sys.calls <- base::sys.calls
[17:44:55.361]             `[[` <- base::`[[`
[17:44:55.361]             `+` <- base::`+`
[17:44:55.361]             `<<-` <- base::`<<-`
[17:44:55.361]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:55.361]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:55.361]                   3L)]
[17:44:55.361]             }
[17:44:55.361]             function(cond) {
[17:44:55.361]                 is_error <- inherits(cond, "error")
[17:44:55.361]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:55.361]                   NULL)
[17:44:55.361]                 if (is_error) {
[17:44:55.361]                   sessionInformation <- function() {
[17:44:55.361]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:55.361]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:55.361]                       search = base::search(), system = base::Sys.info())
[17:44:55.361]                   }
[17:44:55.361]                   ...future.conditions[[length(...future.conditions) + 
[17:44:55.361]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:55.361]                     cond$call), session = sessionInformation(), 
[17:44:55.361]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:55.361]                   signalCondition(cond)
[17:44:55.361]                 }
[17:44:55.361]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:55.361]                 "immediateCondition"))) {
[17:44:55.361]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:55.361]                   ...future.conditions[[length(...future.conditions) + 
[17:44:55.361]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:55.361]                   if (TRUE && !signal) {
[17:44:55.361]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:55.361]                     {
[17:44:55.361]                       inherits <- base::inherits
[17:44:55.361]                       invokeRestart <- base::invokeRestart
[17:44:55.361]                       is.null <- base::is.null
[17:44:55.361]                       muffled <- FALSE
[17:44:55.361]                       if (inherits(cond, "message")) {
[17:44:55.361]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:55.361]                         if (muffled) 
[17:44:55.361]                           invokeRestart("muffleMessage")
[17:44:55.361]                       }
[17:44:55.361]                       else if (inherits(cond, "warning")) {
[17:44:55.361]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:55.361]                         if (muffled) 
[17:44:55.361]                           invokeRestart("muffleWarning")
[17:44:55.361]                       }
[17:44:55.361]                       else if (inherits(cond, "condition")) {
[17:44:55.361]                         if (!is.null(pattern)) {
[17:44:55.361]                           computeRestarts <- base::computeRestarts
[17:44:55.361]                           grepl <- base::grepl
[17:44:55.361]                           restarts <- computeRestarts(cond)
[17:44:55.361]                           for (restart in restarts) {
[17:44:55.361]                             name <- restart$name
[17:44:55.361]                             if (is.null(name)) 
[17:44:55.361]                               next
[17:44:55.361]                             if (!grepl(pattern, name)) 
[17:44:55.361]                               next
[17:44:55.361]                             invokeRestart(restart)
[17:44:55.361]                             muffled <- TRUE
[17:44:55.361]                             break
[17:44:55.361]                           }
[17:44:55.361]                         }
[17:44:55.361]                       }
[17:44:55.361]                       invisible(muffled)
[17:44:55.361]                     }
[17:44:55.361]                     muffleCondition(cond, pattern = "^muffle")
[17:44:55.361]                   }
[17:44:55.361]                 }
[17:44:55.361]                 else {
[17:44:55.361]                   if (TRUE) {
[17:44:55.361]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:55.361]                     {
[17:44:55.361]                       inherits <- base::inherits
[17:44:55.361]                       invokeRestart <- base::invokeRestart
[17:44:55.361]                       is.null <- base::is.null
[17:44:55.361]                       muffled <- FALSE
[17:44:55.361]                       if (inherits(cond, "message")) {
[17:44:55.361]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:55.361]                         if (muffled) 
[17:44:55.361]                           invokeRestart("muffleMessage")
[17:44:55.361]                       }
[17:44:55.361]                       else if (inherits(cond, "warning")) {
[17:44:55.361]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:55.361]                         if (muffled) 
[17:44:55.361]                           invokeRestart("muffleWarning")
[17:44:55.361]                       }
[17:44:55.361]                       else if (inherits(cond, "condition")) {
[17:44:55.361]                         if (!is.null(pattern)) {
[17:44:55.361]                           computeRestarts <- base::computeRestarts
[17:44:55.361]                           grepl <- base::grepl
[17:44:55.361]                           restarts <- computeRestarts(cond)
[17:44:55.361]                           for (restart in restarts) {
[17:44:55.361]                             name <- restart$name
[17:44:55.361]                             if (is.null(name)) 
[17:44:55.361]                               next
[17:44:55.361]                             if (!grepl(pattern, name)) 
[17:44:55.361]                               next
[17:44:55.361]                             invokeRestart(restart)
[17:44:55.361]                             muffled <- TRUE
[17:44:55.361]                             break
[17:44:55.361]                           }
[17:44:55.361]                         }
[17:44:55.361]                       }
[17:44:55.361]                       invisible(muffled)
[17:44:55.361]                     }
[17:44:55.361]                     muffleCondition(cond, pattern = "^muffle")
[17:44:55.361]                   }
[17:44:55.361]                 }
[17:44:55.361]             }
[17:44:55.361]         }))
[17:44:55.361]     }, error = function(ex) {
[17:44:55.361]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:55.361]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:55.361]                 ...future.rng), started = ...future.startTime, 
[17:44:55.361]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:55.361]             version = "1.8"), class = "FutureResult")
[17:44:55.361]     }, finally = {
[17:44:55.361]         if (!identical(...future.workdir, getwd())) 
[17:44:55.361]             setwd(...future.workdir)
[17:44:55.361]         {
[17:44:55.361]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:55.361]                 ...future.oldOptions$nwarnings <- NULL
[17:44:55.361]             }
[17:44:55.361]             base::options(...future.oldOptions)
[17:44:55.361]             if (.Platform$OS.type == "windows") {
[17:44:55.361]                 old_names <- names(...future.oldEnvVars)
[17:44:55.361]                 envs <- base::Sys.getenv()
[17:44:55.361]                 names <- names(envs)
[17:44:55.361]                 common <- intersect(names, old_names)
[17:44:55.361]                 added <- setdiff(names, old_names)
[17:44:55.361]                 removed <- setdiff(old_names, names)
[17:44:55.361]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:55.361]                   envs[common]]
[17:44:55.361]                 NAMES <- toupper(changed)
[17:44:55.361]                 args <- list()
[17:44:55.361]                 for (kk in seq_along(NAMES)) {
[17:44:55.361]                   name <- changed[[kk]]
[17:44:55.361]                   NAME <- NAMES[[kk]]
[17:44:55.361]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:55.361]                     next
[17:44:55.361]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:55.361]                 }
[17:44:55.361]                 NAMES <- toupper(added)
[17:44:55.361]                 for (kk in seq_along(NAMES)) {
[17:44:55.361]                   name <- added[[kk]]
[17:44:55.361]                   NAME <- NAMES[[kk]]
[17:44:55.361]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:55.361]                     next
[17:44:55.361]                   args[[name]] <- ""
[17:44:55.361]                 }
[17:44:55.361]                 NAMES <- toupper(removed)
[17:44:55.361]                 for (kk in seq_along(NAMES)) {
[17:44:55.361]                   name <- removed[[kk]]
[17:44:55.361]                   NAME <- NAMES[[kk]]
[17:44:55.361]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:55.361]                     next
[17:44:55.361]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:55.361]                 }
[17:44:55.361]                 if (length(args) > 0) 
[17:44:55.361]                   base::do.call(base::Sys.setenv, args = args)
[17:44:55.361]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:55.361]             }
[17:44:55.361]             else {
[17:44:55.361]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:55.361]             }
[17:44:55.361]             {
[17:44:55.361]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:55.361]                   0L) {
[17:44:55.361]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:55.361]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:55.361]                   base::options(opts)
[17:44:55.361]                 }
[17:44:55.361]                 {
[17:44:55.361]                   {
[17:44:55.361]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:55.361]                     NULL
[17:44:55.361]                   }
[17:44:55.361]                   options(future.plan = NULL)
[17:44:55.361]                   if (is.na(NA_character_)) 
[17:44:55.361]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:55.361]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:55.361]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:55.361]                     .init = FALSE)
[17:44:55.361]                 }
[17:44:55.361]             }
[17:44:55.361]         }
[17:44:55.361]     })
[17:44:55.361]     if (TRUE) {
[17:44:55.361]         base::sink(type = "output", split = FALSE)
[17:44:55.361]         if (TRUE) {
[17:44:55.361]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:55.361]         }
[17:44:55.361]         else {
[17:44:55.361]             ...future.result["stdout"] <- base::list(NULL)
[17:44:55.361]         }
[17:44:55.361]         base::close(...future.stdout)
[17:44:55.361]         ...future.stdout <- NULL
[17:44:55.361]     }
[17:44:55.361]     ...future.result$conditions <- ...future.conditions
[17:44:55.361]     ...future.result$finished <- base::Sys.time()
[17:44:55.361]     ...future.result
[17:44:55.361] }
[17:44:55.363] Exporting 7 global objects (2.15 KiB) to cluster node #1 ...
[17:44:55.364] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ...
[17:44:55.364] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ... DONE
[17:44:55.364] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ...
[17:44:55.364] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ... DONE
[17:44:55.364] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[17:44:55.365] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[17:44:55.365] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:44:55.365] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:44:55.365] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:44:55.366] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:44:55.366] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:44:55.366] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:44:55.366] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:44:55.367] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:44:55.367] Exporting 7 global objects (2.15 KiB) to cluster node #1 ... DONE
[17:44:55.367] MultisessionFuture started
[17:44:55.367] - Launch lazy future ... done
[17:44:55.367] run() for ‘MultisessionFuture’ ... done
[17:44:55.367] Created future:
[17:44:55.368] MultisessionFuture:
[17:44:55.368] Label: ‘future_replicate-1’
[17:44:55.368] Expression:
[17:44:55.368] {
[17:44:55.368]     do.call(function(...) {
[17:44:55.368]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:55.368]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:55.368]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:55.368]             on.exit(options(oopts), add = TRUE)
[17:44:55.368]         }
[17:44:55.368]         {
[17:44:55.368]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:55.368]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:55.368]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:55.368]                   envir = globalenv(), inherits = FALSE)
[17:44:55.368]                 ...future.FUN(...future.X_jj, ...)
[17:44:55.368]             })
[17:44:55.368]         }
[17:44:55.368]     }, args = future.call.arguments)
[17:44:55.368] }
[17:44:55.368] Lazy evaluation: FALSE
[17:44:55.368] Asynchronous evaluation: TRUE
[17:44:55.368] Local evaluation: TRUE
[17:44:55.368] Environment: 0x5583887552c8
[17:44:55.368] Capture standard output: TRUE
[17:44:55.368] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:55.368] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[17:44:55.368] Packages: <none>
[17:44:55.368] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:55.368] Resolved: FALSE
[17:44:55.368] Value: <not collected>
[17:44:55.368] Conditions captured: <none>
[17:44:55.368] Early signaling: FALSE
[17:44:55.368] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:55.368] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:55.379] Chunk #1 of 2 ... DONE
[17:44:55.379] Chunk #2 of 2 ...
[17:44:55.379]  - Finding globals in 'X' for chunk #2 ...
[17:44:55.380] getGlobalsAndPackages() ...
[17:44:55.380] Searching for globals...
[17:44:55.380] 
[17:44:55.380] Searching for globals ... DONE
[17:44:55.380] - globals: [0] <none>
[17:44:55.380] getGlobalsAndPackages() ... DONE
[17:44:55.380]    + additional globals found: [n=0] 
[17:44:55.380]    + additional namespaces needed: [n=0] 
[17:44:55.380]  - Finding globals in 'X' for chunk #2 ... DONE
[17:44:55.381]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:44:55.381]  - seeds: [3] <seeds>
[17:44:55.381]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:55.381] getGlobalsAndPackages() ...
[17:44:55.381] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:55.381] Resolving globals: FALSE
[17:44:55.381] Tweak future expression to call with '...' arguments ...
[17:44:55.381] {
[17:44:55.381]     do.call(function(...) {
[17:44:55.381]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:55.381]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:55.381]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:55.381]             on.exit(options(oopts), add = TRUE)
[17:44:55.381]         }
[17:44:55.381]         {
[17:44:55.381]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:55.381]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:55.381]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:55.381]                   envir = globalenv(), inherits = FALSE)
[17:44:55.381]                 ...future.FUN(...future.X_jj, ...)
[17:44:55.381]             })
[17:44:55.381]         }
[17:44:55.381]     }, args = future.call.arguments)
[17:44:55.381] }
[17:44:55.382] Tweak future expression to call with '...' arguments ... DONE
[17:44:55.382] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:44:55.382] 
[17:44:55.382] getGlobalsAndPackages() ... DONE
[17:44:55.382] run() for ‘Future’ ...
[17:44:55.383] - state: ‘created’
[17:44:55.383] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:44:55.396] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:55.397] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:44:55.397]   - Field: ‘node’
[17:44:55.397]   - Field: ‘label’
[17:44:55.397]   - Field: ‘local’
[17:44:55.397]   - Field: ‘owner’
[17:44:55.397]   - Field: ‘envir’
[17:44:55.397]   - Field: ‘workers’
[17:44:55.397]   - Field: ‘packages’
[17:44:55.397]   - Field: ‘gc’
[17:44:55.397]   - Field: ‘conditions’
[17:44:55.398]   - Field: ‘persistent’
[17:44:55.398]   - Field: ‘expr’
[17:44:55.398]   - Field: ‘uuid’
[17:44:55.398]   - Field: ‘seed’
[17:44:55.398]   - Field: ‘version’
[17:44:55.398]   - Field: ‘result’
[17:44:55.398]   - Field: ‘asynchronous’
[17:44:55.398]   - Field: ‘calls’
[17:44:55.398]   - Field: ‘globals’
[17:44:55.398]   - Field: ‘stdout’
[17:44:55.398]   - Field: ‘earlySignal’
[17:44:55.399]   - Field: ‘lazy’
[17:44:55.399]   - Field: ‘state’
[17:44:55.399] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:44:55.399] - Launch lazy future ...
[17:44:55.399] Packages needed by the future expression (n = 0): <none>
[17:44:55.399] Packages needed by future strategies (n = 0): <none>
[17:44:55.400] {
[17:44:55.400]     {
[17:44:55.400]         {
[17:44:55.400]             ...future.startTime <- base::Sys.time()
[17:44:55.400]             {
[17:44:55.400]                 {
[17:44:55.400]                   {
[17:44:55.400]                     {
[17:44:55.400]                       base::local({
[17:44:55.400]                         has_future <- base::requireNamespace("future", 
[17:44:55.400]                           quietly = TRUE)
[17:44:55.400]                         if (has_future) {
[17:44:55.400]                           ns <- base::getNamespace("future")
[17:44:55.400]                           version <- ns[[".package"]][["version"]]
[17:44:55.400]                           if (is.null(version)) 
[17:44:55.400]                             version <- utils::packageVersion("future")
[17:44:55.400]                         }
[17:44:55.400]                         else {
[17:44:55.400]                           version <- NULL
[17:44:55.400]                         }
[17:44:55.400]                         if (!has_future || version < "1.8.0") {
[17:44:55.400]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:55.400]                             "", base::R.version$version.string), 
[17:44:55.400]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:55.400]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:55.400]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:55.400]                               "release", "version")], collapse = " "), 
[17:44:55.400]                             hostname = base::Sys.info()[["nodename"]])
[17:44:55.400]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:55.400]                             info)
[17:44:55.400]                           info <- base::paste(info, collapse = "; ")
[17:44:55.400]                           if (!has_future) {
[17:44:55.400]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:55.400]                               info)
[17:44:55.400]                           }
[17:44:55.400]                           else {
[17:44:55.400]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:55.400]                               info, version)
[17:44:55.400]                           }
[17:44:55.400]                           base::stop(msg)
[17:44:55.400]                         }
[17:44:55.400]                       })
[17:44:55.400]                     }
[17:44:55.400]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:55.400]                     base::options(mc.cores = 1L)
[17:44:55.400]                   }
[17:44:55.400]                   ...future.strategy.old <- future::plan("list")
[17:44:55.400]                   options(future.plan = NULL)
[17:44:55.400]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:55.400]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:55.400]                 }
[17:44:55.400]                 ...future.workdir <- getwd()
[17:44:55.400]             }
[17:44:55.400]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:55.400]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:55.400]         }
[17:44:55.400]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:55.400]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:44:55.400]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:55.400]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:55.400]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:55.400]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:55.400]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:55.400]             base::names(...future.oldOptions))
[17:44:55.400]     }
[17:44:55.400]     if (FALSE) {
[17:44:55.400]     }
[17:44:55.400]     else {
[17:44:55.400]         if (TRUE) {
[17:44:55.400]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:55.400]                 open = "w")
[17:44:55.400]         }
[17:44:55.400]         else {
[17:44:55.400]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:55.400]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:55.400]         }
[17:44:55.400]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:55.400]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:55.400]             base::sink(type = "output", split = FALSE)
[17:44:55.400]             base::close(...future.stdout)
[17:44:55.400]         }, add = TRUE)
[17:44:55.400]     }
[17:44:55.400]     ...future.frame <- base::sys.nframe()
[17:44:55.400]     ...future.conditions <- base::list()
[17:44:55.400]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:55.400]     if (FALSE) {
[17:44:55.400]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:55.400]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:55.400]     }
[17:44:55.400]     ...future.result <- base::tryCatch({
[17:44:55.400]         base::withCallingHandlers({
[17:44:55.400]             ...future.value <- base::withVisible(base::local({
[17:44:55.400]                 ...future.makeSendCondition <- base::local({
[17:44:55.400]                   sendCondition <- NULL
[17:44:55.400]                   function(frame = 1L) {
[17:44:55.400]                     if (is.function(sendCondition)) 
[17:44:55.400]                       return(sendCondition)
[17:44:55.400]                     ns <- getNamespace("parallel")
[17:44:55.400]                     if (exists("sendData", mode = "function", 
[17:44:55.400]                       envir = ns)) {
[17:44:55.400]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:55.400]                         envir = ns)
[17:44:55.400]                       envir <- sys.frame(frame)
[17:44:55.400]                       master <- NULL
[17:44:55.400]                       while (!identical(envir, .GlobalEnv) && 
[17:44:55.400]                         !identical(envir, emptyenv())) {
[17:44:55.400]                         if (exists("master", mode = "list", envir = envir, 
[17:44:55.400]                           inherits = FALSE)) {
[17:44:55.400]                           master <- get("master", mode = "list", 
[17:44:55.400]                             envir = envir, inherits = FALSE)
[17:44:55.400]                           if (inherits(master, c("SOCKnode", 
[17:44:55.400]                             "SOCK0node"))) {
[17:44:55.400]                             sendCondition <<- function(cond) {
[17:44:55.400]                               data <- list(type = "VALUE", value = cond, 
[17:44:55.400]                                 success = TRUE)
[17:44:55.400]                               parallel_sendData(master, data)
[17:44:55.400]                             }
[17:44:55.400]                             return(sendCondition)
[17:44:55.400]                           }
[17:44:55.400]                         }
[17:44:55.400]                         frame <- frame + 1L
[17:44:55.400]                         envir <- sys.frame(frame)
[17:44:55.400]                       }
[17:44:55.400]                     }
[17:44:55.400]                     sendCondition <<- function(cond) NULL
[17:44:55.400]                   }
[17:44:55.400]                 })
[17:44:55.400]                 withCallingHandlers({
[17:44:55.400]                   {
[17:44:55.400]                     do.call(function(...) {
[17:44:55.400]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:55.400]                       if (!identical(...future.globals.maxSize.org, 
[17:44:55.400]                         ...future.globals.maxSize)) {
[17:44:55.400]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:55.400]                         on.exit(options(oopts), add = TRUE)
[17:44:55.400]                       }
[17:44:55.400]                       {
[17:44:55.400]                         lapply(seq_along(...future.elements_ii), 
[17:44:55.400]                           FUN = function(jj) {
[17:44:55.400]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:55.400]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:55.400]                               envir = globalenv(), inherits = FALSE)
[17:44:55.400]                             ...future.FUN(...future.X_jj, ...)
[17:44:55.400]                           })
[17:44:55.400]                       }
[17:44:55.400]                     }, args = future.call.arguments)
[17:44:55.400]                   }
[17:44:55.400]                 }, immediateCondition = function(cond) {
[17:44:55.400]                   sendCondition <- ...future.makeSendCondition()
[17:44:55.400]                   sendCondition(cond)
[17:44:55.400]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:55.400]                   {
[17:44:55.400]                     inherits <- base::inherits
[17:44:55.400]                     invokeRestart <- base::invokeRestart
[17:44:55.400]                     is.null <- base::is.null
[17:44:55.400]                     muffled <- FALSE
[17:44:55.400]                     if (inherits(cond, "message")) {
[17:44:55.400]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:55.400]                       if (muffled) 
[17:44:55.400]                         invokeRestart("muffleMessage")
[17:44:55.400]                     }
[17:44:55.400]                     else if (inherits(cond, "warning")) {
[17:44:55.400]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:55.400]                       if (muffled) 
[17:44:55.400]                         invokeRestart("muffleWarning")
[17:44:55.400]                     }
[17:44:55.400]                     else if (inherits(cond, "condition")) {
[17:44:55.400]                       if (!is.null(pattern)) {
[17:44:55.400]                         computeRestarts <- base::computeRestarts
[17:44:55.400]                         grepl <- base::grepl
[17:44:55.400]                         restarts <- computeRestarts(cond)
[17:44:55.400]                         for (restart in restarts) {
[17:44:55.400]                           name <- restart$name
[17:44:55.400]                           if (is.null(name)) 
[17:44:55.400]                             next
[17:44:55.400]                           if (!grepl(pattern, name)) 
[17:44:55.400]                             next
[17:44:55.400]                           invokeRestart(restart)
[17:44:55.400]                           muffled <- TRUE
[17:44:55.400]                           break
[17:44:55.400]                         }
[17:44:55.400]                       }
[17:44:55.400]                     }
[17:44:55.400]                     invisible(muffled)
[17:44:55.400]                   }
[17:44:55.400]                   muffleCondition(cond)
[17:44:55.400]                 })
[17:44:55.400]             }))
[17:44:55.400]             future::FutureResult(value = ...future.value$value, 
[17:44:55.400]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:55.400]                   ...future.rng), globalenv = if (FALSE) 
[17:44:55.400]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:55.400]                     ...future.globalenv.names))
[17:44:55.400]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:55.400]         }, condition = base::local({
[17:44:55.400]             c <- base::c
[17:44:55.400]             inherits <- base::inherits
[17:44:55.400]             invokeRestart <- base::invokeRestart
[17:44:55.400]             length <- base::length
[17:44:55.400]             list <- base::list
[17:44:55.400]             seq.int <- base::seq.int
[17:44:55.400]             signalCondition <- base::signalCondition
[17:44:55.400]             sys.calls <- base::sys.calls
[17:44:55.400]             `[[` <- base::`[[`
[17:44:55.400]             `+` <- base::`+`
[17:44:55.400]             `<<-` <- base::`<<-`
[17:44:55.400]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:55.400]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:55.400]                   3L)]
[17:44:55.400]             }
[17:44:55.400]             function(cond) {
[17:44:55.400]                 is_error <- inherits(cond, "error")
[17:44:55.400]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:55.400]                   NULL)
[17:44:55.400]                 if (is_error) {
[17:44:55.400]                   sessionInformation <- function() {
[17:44:55.400]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:55.400]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:55.400]                       search = base::search(), system = base::Sys.info())
[17:44:55.400]                   }
[17:44:55.400]                   ...future.conditions[[length(...future.conditions) + 
[17:44:55.400]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:55.400]                     cond$call), session = sessionInformation(), 
[17:44:55.400]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:55.400]                   signalCondition(cond)
[17:44:55.400]                 }
[17:44:55.400]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:55.400]                 "immediateCondition"))) {
[17:44:55.400]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:55.400]                   ...future.conditions[[length(...future.conditions) + 
[17:44:55.400]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:55.400]                   if (TRUE && !signal) {
[17:44:55.400]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:55.400]                     {
[17:44:55.400]                       inherits <- base::inherits
[17:44:55.400]                       invokeRestart <- base::invokeRestart
[17:44:55.400]                       is.null <- base::is.null
[17:44:55.400]                       muffled <- FALSE
[17:44:55.400]                       if (inherits(cond, "message")) {
[17:44:55.400]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:55.400]                         if (muffled) 
[17:44:55.400]                           invokeRestart("muffleMessage")
[17:44:55.400]                       }
[17:44:55.400]                       else if (inherits(cond, "warning")) {
[17:44:55.400]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:55.400]                         if (muffled) 
[17:44:55.400]                           invokeRestart("muffleWarning")
[17:44:55.400]                       }
[17:44:55.400]                       else if (inherits(cond, "condition")) {
[17:44:55.400]                         if (!is.null(pattern)) {
[17:44:55.400]                           computeRestarts <- base::computeRestarts
[17:44:55.400]                           grepl <- base::grepl
[17:44:55.400]                           restarts <- computeRestarts(cond)
[17:44:55.400]                           for (restart in restarts) {
[17:44:55.400]                             name <- restart$name
[17:44:55.400]                             if (is.null(name)) 
[17:44:55.400]                               next
[17:44:55.400]                             if (!grepl(pattern, name)) 
[17:44:55.400]                               next
[17:44:55.400]                             invokeRestart(restart)
[17:44:55.400]                             muffled <- TRUE
[17:44:55.400]                             break
[17:44:55.400]                           }
[17:44:55.400]                         }
[17:44:55.400]                       }
[17:44:55.400]                       invisible(muffled)
[17:44:55.400]                     }
[17:44:55.400]                     muffleCondition(cond, pattern = "^muffle")
[17:44:55.400]                   }
[17:44:55.400]                 }
[17:44:55.400]                 else {
[17:44:55.400]                   if (TRUE) {
[17:44:55.400]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:55.400]                     {
[17:44:55.400]                       inherits <- base::inherits
[17:44:55.400]                       invokeRestart <- base::invokeRestart
[17:44:55.400]                       is.null <- base::is.null
[17:44:55.400]                       muffled <- FALSE
[17:44:55.400]                       if (inherits(cond, "message")) {
[17:44:55.400]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:55.400]                         if (muffled) 
[17:44:55.400]                           invokeRestart("muffleMessage")
[17:44:55.400]                       }
[17:44:55.400]                       else if (inherits(cond, "warning")) {
[17:44:55.400]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:55.400]                         if (muffled) 
[17:44:55.400]                           invokeRestart("muffleWarning")
[17:44:55.400]                       }
[17:44:55.400]                       else if (inherits(cond, "condition")) {
[17:44:55.400]                         if (!is.null(pattern)) {
[17:44:55.400]                           computeRestarts <- base::computeRestarts
[17:44:55.400]                           grepl <- base::grepl
[17:44:55.400]                           restarts <- computeRestarts(cond)
[17:44:55.400]                           for (restart in restarts) {
[17:44:55.400]                             name <- restart$name
[17:44:55.400]                             if (is.null(name)) 
[17:44:55.400]                               next
[17:44:55.400]                             if (!grepl(pattern, name)) 
[17:44:55.400]                               next
[17:44:55.400]                             invokeRestart(restart)
[17:44:55.400]                             muffled <- TRUE
[17:44:55.400]                             break
[17:44:55.400]                           }
[17:44:55.400]                         }
[17:44:55.400]                       }
[17:44:55.400]                       invisible(muffled)
[17:44:55.400]                     }
[17:44:55.400]                     muffleCondition(cond, pattern = "^muffle")
[17:44:55.400]                   }
[17:44:55.400]                 }
[17:44:55.400]             }
[17:44:55.400]         }))
[17:44:55.400]     }, error = function(ex) {
[17:44:55.400]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:55.400]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:55.400]                 ...future.rng), started = ...future.startTime, 
[17:44:55.400]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:55.400]             version = "1.8"), class = "FutureResult")
[17:44:55.400]     }, finally = {
[17:44:55.400]         if (!identical(...future.workdir, getwd())) 
[17:44:55.400]             setwd(...future.workdir)
[17:44:55.400]         {
[17:44:55.400]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:55.400]                 ...future.oldOptions$nwarnings <- NULL
[17:44:55.400]             }
[17:44:55.400]             base::options(...future.oldOptions)
[17:44:55.400]             if (.Platform$OS.type == "windows") {
[17:44:55.400]                 old_names <- names(...future.oldEnvVars)
[17:44:55.400]                 envs <- base::Sys.getenv()
[17:44:55.400]                 names <- names(envs)
[17:44:55.400]                 common <- intersect(names, old_names)
[17:44:55.400]                 added <- setdiff(names, old_names)
[17:44:55.400]                 removed <- setdiff(old_names, names)
[17:44:55.400]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:55.400]                   envs[common]]
[17:44:55.400]                 NAMES <- toupper(changed)
[17:44:55.400]                 args <- list()
[17:44:55.400]                 for (kk in seq_along(NAMES)) {
[17:44:55.400]                   name <- changed[[kk]]
[17:44:55.400]                   NAME <- NAMES[[kk]]
[17:44:55.400]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:55.400]                     next
[17:44:55.400]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:55.400]                 }
[17:44:55.400]                 NAMES <- toupper(added)
[17:44:55.400]                 for (kk in seq_along(NAMES)) {
[17:44:55.400]                   name <- added[[kk]]
[17:44:55.400]                   NAME <- NAMES[[kk]]
[17:44:55.400]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:55.400]                     next
[17:44:55.400]                   args[[name]] <- ""
[17:44:55.400]                 }
[17:44:55.400]                 NAMES <- toupper(removed)
[17:44:55.400]                 for (kk in seq_along(NAMES)) {
[17:44:55.400]                   name <- removed[[kk]]
[17:44:55.400]                   NAME <- NAMES[[kk]]
[17:44:55.400]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:55.400]                     next
[17:44:55.400]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:55.400]                 }
[17:44:55.400]                 if (length(args) > 0) 
[17:44:55.400]                   base::do.call(base::Sys.setenv, args = args)
[17:44:55.400]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:55.400]             }
[17:44:55.400]             else {
[17:44:55.400]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:55.400]             }
[17:44:55.400]             {
[17:44:55.400]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:55.400]                   0L) {
[17:44:55.400]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:55.400]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:55.400]                   base::options(opts)
[17:44:55.400]                 }
[17:44:55.400]                 {
[17:44:55.400]                   {
[17:44:55.400]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:55.400]                     NULL
[17:44:55.400]                   }
[17:44:55.400]                   options(future.plan = NULL)
[17:44:55.400]                   if (is.na(NA_character_)) 
[17:44:55.400]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:55.400]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:55.400]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:44:55.400]                     .init = FALSE)
[17:44:55.400]                 }
[17:44:55.400]             }
[17:44:55.400]         }
[17:44:55.400]     })
[17:44:55.400]     if (TRUE) {
[17:44:55.400]         base::sink(type = "output", split = FALSE)
[17:44:55.400]         if (TRUE) {
[17:44:55.400]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:55.400]         }
[17:44:55.400]         else {
[17:44:55.400]             ...future.result["stdout"] <- base::list(NULL)
[17:44:55.400]         }
[17:44:55.400]         base::close(...future.stdout)
[17:44:55.400]         ...future.stdout <- NULL
[17:44:55.400]     }
[17:44:55.400]     ...future.result$conditions <- ...future.conditions
[17:44:55.400]     ...future.result$finished <- base::Sys.time()
[17:44:55.400]     ...future.result
[17:44:55.400] }
[17:44:55.402] Exporting 7 global objects (2.15 KiB) to cluster node #2 ...
[17:44:55.402] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ...
[17:44:55.403] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ... DONE
[17:44:55.403] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ...
[17:44:55.403] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ... DONE
[17:44:55.404] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[17:44:55.404] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[17:44:55.404] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:44:55.404] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:44:55.405] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:44:55.405] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:44:55.405] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:44:55.406] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:44:55.406] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:44:55.406] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:44:55.406] Exporting 7 global objects (2.15 KiB) to cluster node #2 ... DONE
[17:44:55.407] MultisessionFuture started
[17:44:55.407] - Launch lazy future ... done
[17:44:55.407] run() for ‘MultisessionFuture’ ... done
[17:44:55.407] Created future:
[17:44:55.407] MultisessionFuture:
[17:44:55.407] Label: ‘future_replicate-2’
[17:44:55.407] Expression:
[17:44:55.407] {
[17:44:55.407]     do.call(function(...) {
[17:44:55.407]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:44:55.407]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:44:55.407]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:44:55.407]             on.exit(options(oopts), add = TRUE)
[17:44:55.407]         }
[17:44:55.407]         {
[17:44:55.407]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:44:55.407]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:44:55.407]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:44:55.407]                   envir = globalenv(), inherits = FALSE)
[17:44:55.407]                 ...future.FUN(...future.X_jj, ...)
[17:44:55.407]             })
[17:44:55.407]         }
[17:44:55.407]     }, args = future.call.arguments)
[17:44:55.407] }
[17:44:55.407] Lazy evaluation: FALSE
[17:44:55.407] Asynchronous evaluation: TRUE
[17:44:55.407] Local evaluation: TRUE
[17:44:55.407] Environment: 0x5583887552c8
[17:44:55.407] Capture standard output: TRUE
[17:44:55.407] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:44:55.407] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[17:44:55.407] Packages: <none>
[17:44:55.407] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:44:55.407] Resolved: FALSE
[17:44:55.407] Value: <not collected>
[17:44:55.407] Conditions captured: <none>
[17:44:55.407] Early signaling: FALSE
[17:44:55.407] Owner process: 6fe94a6f-665b-d877-893f-c15d99d7bb8f
[17:44:55.407] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:55.419] Chunk #2 of 2 ... DONE
[17:44:55.419] Launching 2 futures (chunks) ... DONE
[17:44:55.419] Resolving 2 futures (chunks) ...
[17:44:55.419] resolve() on list ...
[17:44:55.419]  recursive: 0
[17:44:55.420]  length: 2
[17:44:55.420] 
[17:44:55.420] receiveMessageFromWorker() for ClusterFuture ...
[17:44:55.420] - Validating connection of MultisessionFuture
[17:44:55.421] - received message: FutureResult
[17:44:55.421] - Received FutureResult
[17:44:55.421] - Erased future from FutureRegistry
[17:44:55.421] result() for ClusterFuture ...
[17:44:55.421] - result already collected: FutureResult
[17:44:55.421] result() for ClusterFuture ... done
[17:44:55.421] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:55.421] Future #1
[17:44:55.422] result() for ClusterFuture ...
[17:44:55.422] - result already collected: FutureResult
[17:44:55.422] result() for ClusterFuture ... done
[17:44:55.422] result() for ClusterFuture ...
[17:44:55.422] - result already collected: FutureResult
[17:44:55.422] result() for ClusterFuture ... done
[17:44:55.422] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:44:55.422] - nx: 2
[17:44:55.422] - relay: TRUE
[17:44:55.422] - stdout: TRUE
[17:44:55.423] - signal: TRUE
[17:44:55.423] - resignal: FALSE
[17:44:55.423] - force: TRUE
[17:44:55.423] - relayed: [n=2] FALSE, FALSE
[17:44:55.423] - queued futures: [n=2] FALSE, FALSE
[17:44:55.423]  - until=1
[17:44:55.423]  - relaying element #1
[17:44:55.423] result() for ClusterFuture ...
[17:44:55.423] - result already collected: FutureResult
[17:44:55.423] result() for ClusterFuture ... done
[17:44:55.423] result() for ClusterFuture ...
[17:44:55.424] - result already collected: FutureResult
[17:44:55.424] result() for ClusterFuture ... done
[17:44:55.424] result() for ClusterFuture ...
[17:44:55.424] - result already collected: FutureResult
[17:44:55.424] result() for ClusterFuture ... done
[17:44:55.424] result() for ClusterFuture ...
[17:44:55.424] - result already collected: FutureResult
[17:44:55.424] result() for ClusterFuture ... done
[17:44:55.424] - relayed: [n=2] TRUE, FALSE
[17:44:55.424] - queued futures: [n=2] TRUE, FALSE
[17:44:55.424] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:44:55.425]  length: 1 (resolved future 1)
[17:44:55.449] receiveMessageFromWorker() for ClusterFuture ...
[17:44:55.449] - Validating connection of MultisessionFuture
[17:44:55.449] - received message: FutureResult
[17:44:55.449] - Received FutureResult
[17:44:55.449] - Erased future from FutureRegistry
[17:44:55.450] result() for ClusterFuture ...
[17:44:55.450] - result already collected: FutureResult
[17:44:55.450] result() for ClusterFuture ... done
[17:44:55.450] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:55.450] Future #2
[17:44:55.450] result() for ClusterFuture ...
[17:44:55.450] - result already collected: FutureResult
[17:44:55.450] result() for ClusterFuture ... done
[17:44:55.450] result() for ClusterFuture ...
[17:44:55.450] - result already collected: FutureResult
[17:44:55.450] result() for ClusterFuture ... done
[17:44:55.451] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:44:55.451] - nx: 2
[17:44:55.451] - relay: TRUE
[17:44:55.451] - stdout: TRUE
[17:44:55.451] - signal: TRUE
[17:44:55.451] - resignal: FALSE
[17:44:55.451] - force: TRUE
[17:44:55.451] - relayed: [n=2] TRUE, FALSE
[17:44:55.451] - queued futures: [n=2] TRUE, FALSE
[17:44:55.451]  - until=2
[17:44:55.451]  - relaying element #2
[17:44:55.452] result() for ClusterFuture ...
[17:44:55.452] - result already collected: FutureResult
[17:44:55.452] result() for ClusterFuture ... done
[17:44:55.452] result() for ClusterFuture ...
[17:44:55.452] - result already collected: FutureResult
[17:44:55.452] result() for ClusterFuture ... done
[17:44:55.452] result() for ClusterFuture ...
[17:44:55.452] - result already collected: FutureResult
[17:44:55.452] result() for ClusterFuture ... done
[17:44:55.452] result() for ClusterFuture ...
[17:44:55.452] - result already collected: FutureResult
[17:44:55.452] result() for ClusterFuture ... done
[17:44:55.453] - relayed: [n=2] TRUE, TRUE
[17:44:55.453] - queued futures: [n=2] TRUE, TRUE
[17:44:55.453] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:44:55.453]  length: 0 (resolved future 2)
[17:44:55.453] Relaying remaining futures
[17:44:55.453] signalConditionsASAP(NULL, pos=0) ...
[17:44:55.453] - nx: 2
[17:44:55.453] - relay: TRUE
[17:44:55.453] - stdout: TRUE
[17:44:55.453] - signal: TRUE
[17:44:55.453] - resignal: FALSE
[17:44:55.453] - force: TRUE
[17:44:55.454] - relayed: [n=2] TRUE, TRUE
[17:44:55.454] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:44:55.454] - relayed: [n=2] TRUE, TRUE
[17:44:55.454] - queued futures: [n=2] TRUE, TRUE
[17:44:55.454] signalConditionsASAP(NULL, pos=0) ... done
[17:44:55.454] resolve() on list ... DONE
[17:44:55.454] result() for ClusterFuture ...
[17:44:55.454] - result already collected: FutureResult
[17:44:55.454] result() for ClusterFuture ... done
[17:44:55.454] result() for ClusterFuture ...
[17:44:55.454] - result already collected: FutureResult
[17:44:55.455] result() for ClusterFuture ... done
[17:44:55.455] result() for ClusterFuture ...
[17:44:55.455] - result already collected: FutureResult
[17:44:55.455] result() for ClusterFuture ... done
[17:44:55.455] result() for ClusterFuture ...
[17:44:55.455] - result already collected: FutureResult
[17:44:55.455] result() for ClusterFuture ... done
[17:44:55.455]  - Number of value chunks collected: 2
[17:44:55.455] Resolving 2 futures (chunks) ... DONE
[17:44:55.455] Reducing values from 2 chunks ...
[17:44:55.455]  - Number of values collected after concatenation: 5
[17:44:55.456]  - Number of values expected: 5
[17:44:55.456] Reducing values from 2 chunks ... DONE
[17:44:55.456] future_lapply() ... DONE
[17:44:55.456] plan(): Setting new future strategy stack:
[17:44:55.456] List of future strategies:
[17:44:55.456] 1. sequential:
[17:44:55.456]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:55.456]    - tweaked: FALSE
[17:44:55.456]    - call: plan(sequential)
[17:44:55.457] plan(): nbrOfWorkers() = 1
*** strategy = ‘multisession’ ... done
> 
> message("*** future_replicate() ... DONE")
*** future_replicate() ... DONE
> 
> source("incl/end.R")
[17:44:55.458] plan(): Setting new future strategy stack:
[17:44:55.458] List of future strategies:
[17:44:55.458] 1. FutureStrategy:
[17:44:55.458]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:44:55.458]    - tweaked: FALSE
[17:44:55.458]    - call: future::plan(oplan)
[17:44:55.458] plan(): nbrOfWorkers() = 1
> 
