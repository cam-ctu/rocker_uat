
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[18:01:10.402] plan(): Setting new future strategy stack:
[18:01:10.402] List of future strategies:
[18:01:10.402] 1. sequential:
[18:01:10.402]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:10.402]    - tweaked: FALSE
[18:01:10.402]    - call: future::plan("sequential")
[18:01:10.430] plan(): nbrOfWorkers() = 1
> 
> message("*** future_replicate() ...")
*** future_replicate() ...
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+   
+   y0 <- replicate(5L, sample(10L, size = 1L))
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(length(y0) == length(y1))
+   
+   set.seed(0xBEEF)
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   set.seed(0xBEEF)
+   y2 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(all.equal(y2, y1))
+   
+   y3 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   y4 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   stopifnot(all.equal(y4, y3))
+   
+   
+   message("- example(replicate) ...")
+   
+   foo <- function(x = 1, y = 2) c(x, y)
+   bar0 <- function(n, x) replicate(n, foo(x = x))
+   y0 <- bar0(5, x = 3)
+   
+   bar1 <- function(n, x) future_replicate(n, foo(x = x))
+   y1 <- bar1(5, x = 3)
+   stopifnot(all.equal(y1, y0))
+   
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[18:01:10.477] plan(): Setting new future strategy stack:
[18:01:10.477] List of future strategies:
[18:01:10.477] 1. sequential:
[18:01:10.477]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:10.477]    - tweaked: FALSE
[18:01:10.477]    - call: plan(strategy)
[18:01:10.503] plan(): nbrOfWorkers() = 1
[18:01:10.506] future_lapply() ...
[18:01:10.513] Generating random seeds ...
[18:01:10.513] Generating random seed streams for 5 elements ...
[18:01:10.514] Generating random seed streams for 5 elements ... DONE
[18:01:10.514] Generating random seeds ... DONE
[18:01:10.514] Will set RNG state on exit: 10403, 7, 1195431469, 271869764, -1250175894, 666767061, -1541257105, -841381514, 108049056, 499883875, -315755519, 1919418224, 458798862, -265178759, 1886733579, -602350022, -808577732, 1171135103, 820150741, -1546362900, 147833154, -920355171, -1453401321, 501402238, 1457592888, -413246181, 896273017, -233830712, -687726858, 412088113, 552628067, 1868072242, -976169340, -2092973369, -1502895715, -1662393068, -1222038598, 767532549, 548888543, 275437158, -1062993424, -1909879021, -1470754639, 1348907872, -1751228162, -1741238135, -1150091333, 857770378, -391235476, 652728815, -1625615835, 1850230492, 665050290, -399331411, -622808217, -1312927602, -2005717656, -164418197, 1338900233, -1683385960, -1680443194, 714082849, 1653494451, 1327915042, 439826964, -995230057, 792129677, 491881892, -1863776374, -964107275, 1941129807, 207113558, -1920735232, -1010255549, -879233823, 1472187984, 1834570414, -1233078695, 1333296747, 1318941658, -565074788, -1953157473, -554179339, -705985140, 1242071138, -1862594499, 831523511, 1825976670, 1004271768, 1889895419, -1055837799, 888476200, 595239638, -1323415727, 1957456387, 437230994, -1991054556, -2107585049, -1645688259, -2137439052, 813581082, -2138429339, 1337065727, 293122438, 721446672, -148282445, -967204783, 975451136, -1310673698, -1862219991, -841229605, -1014746646, 843348364, 550403791, 1606779525, -2080876228, -136494062, -640193779, 696612935, 1287789102, 340198280, -271331701, -2146492311, 61746232, 993762534, 1740973185, 553251859, -1282743358, -155616140, -538373513, 872770413, -1782100988, 461383466, -509643627, -283122897, 467964470, -32430496, 612578467, 320659393, 226622384, 1263869646, -1387422663, -268762549, -81266694, -1442360580, 1630000959, 375789589, 2021092140, 901111810, -1145247011, 840233431, 2071100606, -1375168776, 1417012443, -819767495, 518079112, 1888413238, 30422641, 267879587, 780275186, 1336073540, 1409244679, -1935811619, -674040620, 394398714, 1175280453, -749461601, 1749325094, -1988977232, 501773907, 894505329, -518301536, -1841928130, 588603209, -1939569157, -696104502, -2014533844, -537135313, 1998493157, 733755548, -1676448526, 1338778989, 1410409127, 1382927566, -2146000344, -302378453, -492718007, -1575343784, -1060081658, 126656993, -1657992333, -165445662, -288565420, 465934935, -869279155, 1913822692, -2007091254, -463398347, 1435459727, 1573388694, 1526553920, 1682837507, 1836110369, 567129360, -2017625362, 1500677785, -1202854101, -903831014, -1508482852, 620158175, -1195955531, 1972001868, 1632026786, 2139889661, -2009178889, 1912629790, -733076264, -1120733125, -966319655, 1108834152, -1650525546, -227195887, 1540126147, 280189394, 1013207140, 699207591, -2070724355, 1815459060, -1469033510, 731946874, -711462352, -19297348, -1861475756, -358822846, 1805785248, 1318634172, -1691607600, -2018863262, -88681752, 1860150476, 1708436988, 672881138, 26130048, -748952076, -288009592, 1696778042, 1331502928, 711576684, 721235348, -819655598, -155936288, 1546048716, 1747054752, 304687490, 1916025064, -302849300, -362384068, 625773682, -1534426000, -1609405404, 20897848, -748844262, 1122942160, -393823428, -1362843756, 1971007362, -811215424, -987405764, 1230731664, -1953523166, -2101449464, -1381950836, 1497413404, -1632022382, -520003200, -891665900, -1004977368, -1321179590, -822052400, 91731308, 644682676, -1279165422, 1604841952, -2144238644, 1104392416, 1212409890, 427924776, -991005172, -722033860, 1722962930, -1485791504, 985631300, 1931218520, 1033851706, -1232711184, -1453121860, 798211348, 50216642, -1959886752, -669333636, 1481661392, -1080312542, -1712355672, 39414668, 1891531964, 1920411442, -776416704, -747800396, 1603258952, -1492263494, 393531920, 2091818732, 416419156, 1779488018, -2064778848, 11116236, -1181809056, -598961214, -899087576, 57138092, 1479118652, 537615730, -1137832144, -2072210140, 1942526776, -2022801702, 275014544, 2049161980, 1431655316, 117411906, -62684928, 1815612, 739018064, -407764830, -488391352, -2087322868, 618193628, -1038171822, 1682604160, 639593556, -81609752, 1059919098, 445849424, -1382387924, 1404181876, 1092648850, -525812640, 1158018444, 1509575520, -1569659422, -1203592280, 2088149196, -2302980, 728986034, 651525616, -2003214396, 1138565464, 1008481658, 1759608752, 1121392060, 1382868052, -1530452030, -2123458528, -1813747524, -322513328, 1230983138, -771327896, 840933452, 1598817532, -92014606, 1849650432, -818121356, -2134382584, 655659962, -1795201584, 710307820, 96669076, 864991698, -1002299040, -1029125300, -207849184, -102508670, -662542616, 83734764, -364439492, 1283878770, -2138124688, 879459364, -1241516232, -265272166, 1237082832, 337889468, -1111751020, -5304702, -414971712, -178045124, -452165488, 1521550882, 1994853384, -602215156, -1685988196, -2016255470, 1554871168, -1532643820, 241821224, 687508794, -2055293488, -1280040852, -490801868, 159220370, -1086945440, -429899956, 78430176, -45454430, 647248808, -1645495924, -450726724, -1044094606, 73867504, -363192252, -1934455464, -1281318342, -1939689616, -197682116, 389651220, 1934562754, -945854752, 866227068, -650079536, 1996350626, -895924184, -1770268404, -1237351492, -1907944142, 1409298880, -1041845708, -1266104376, -1103227718, -1633773168, 1727570412, -650752428, -1323938670, -1253598432, -637562420, 380521952, -810901822, -795959256, -1865650516, 1536970940, 632387058, -352891600, 814773412, -625306952, -1164334758, -1820552816, -458571908, -414072501, -324861107, 1458864506, -288427080, 1979935073, 397735187, -1582228172, -504821950, 845387607, -457718111, -1627723930, 659210596, -1578417003, 606293439, 922759512, -763256970, -797528701, 411404229, -1012417310, 1304463696, 1683183737, -259597397, -2134277860, 1312966218, -835927489, 646747785, 333824670, -1792319668, -1171876067, -270436697, 713539024, 354379118, 1571166235, 680147325, 595320682, -773125624, -555127119, -638785245, 294492708, 1552453842, 1951074599, -778361999, 2096976310, 570255700, 892159973, -2103496209, 865728808, -208678522, 335322547, -846577387, -634817678, 141262784, 1909682217, 323136667, 266283372, 566788474, -1716596049, 195684793, 285701070, -1460098276, -360922483, -946992393, -825172480, 1953855582, -1528810709, -253927379, 436701338, 1914494040, -822391871, -1612798861, 455519636, 500126754, 1118962487, -219404799, -622270714, 1963285316, -727642507, -585175073, 1169859384, 639657238, 854612259, 1597776613, -1573106942, 170525040, -1501828839, -1084298997, -1354159620, -240516566, 1851920991, -1523494423, -490702082, 25899756, -1312398787, -1574911481, 34145776, 1108747662, 598031291, 1329632669, -468731062, 328777576, -1961053871, -1265360317, -1305991356, 786303986, 1019658695, -1546930287, 451673878, 1071295348, 1395454469, 2002469455, -1845797304, -1544642586, -75615981, 615767669, 532436050, 1867292320, -1870816375, -154146885, -1874532340, 467101082, 66258191, -1835603111, -102910482, -1683255172, -1079560979, 557704087, 1378417760, 2003861054, -116975861, 1680649613, -580593990, 1320924408, 1711260321, -1448795565, 887356788, -253971710, -305286249, -451349151, -692161114, 11749284, 2057773653, 554939135, 1484429208, -1043326794, -1237365437, -1411199867, -2031078110, 214359568, -227926599, -1031004565, 1892118876, -196884342, 2067497087, -1851117111, -1523682722, -189748980, -1006203683, -1990800921, -862686704, -1291931858, 1822053339, 1692247229, -639166934, -903116088, 1686089713, -1227071133, 1382502756, -751954798, -326162073, -867182655
[18:01:10.516] Number of chunks: 1
[18:01:10.516] getGlobalsAndPackagesXApply() ...
[18:01:10.517]  - future.globals: TRUE
[18:01:10.518] getGlobalsAndPackages() ...
[18:01:10.518] Searching for globals...
[18:01:10.522] - globals found: [2] ‘FUN’, ‘sample’
[18:01:10.523] Searching for globals ... DONE
[18:01:10.523] Resolving globals: FALSE
[18:01:10.525] The total size of the 1 globals is 616 bytes (616 bytes)
[18:01:10.526] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[18:01:10.526] - globals: [1] ‘FUN’
[18:01:10.527] 
[18:01:10.527] getGlobalsAndPackages() ... DONE
[18:01:10.527]  - globals found/used: [n=1] ‘FUN’
[18:01:10.527]  - needed namespaces: [n=0] 
[18:01:10.527] Finding globals ... DONE
[18:01:10.528]  - use_args: TRUE
[18:01:10.528]  - Getting '...' globals ...
[18:01:10.529] resolve() on list ...
[18:01:10.530]  recursive: 0
[18:01:10.530]  length: 1
[18:01:10.530]  elements: ‘...’
[18:01:10.531]  length: 0 (resolved future 1)
[18:01:10.531] resolve() on list ... DONE
[18:01:10.531]    - '...' content: [n=0] 
[18:01:10.532] List of 1
[18:01:10.532]  $ ...: list()
[18:01:10.532]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:10.532]  - attr(*, "where")=List of 1
[18:01:10.532]   ..$ ...:<environment: 0x635eb32117e8> 
[18:01:10.532]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:10.532]  - attr(*, "resolved")= logi TRUE
[18:01:10.532]  - attr(*, "total_size")= num NA
[18:01:10.541]  - Getting '...' globals ... DONE
[18:01:10.542] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[18:01:10.542] List of 2
[18:01:10.542]  $ ...future.FUN:function (...)  
[18:01:10.542]  $ ...          : list()
[18:01:10.542]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:10.542]  - attr(*, "where")=List of 2
[18:01:10.542]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[18:01:10.542]   ..$ ...          :<environment: 0x635eb32117e8> 
[18:01:10.542]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:10.542]  - attr(*, "resolved")= logi FALSE
[18:01:10.542]  - attr(*, "total_size")= num 616
[18:01:10.548] Packages to be attached in all futures: [n=0] 
[18:01:10.549] getGlobalsAndPackagesXApply() ... DONE
[18:01:10.549] Number of futures (= number of chunks): 1
[18:01:10.550] Launching 1 futures (chunks) ...
[18:01:10.550] Chunk #1 of 1 ...
[18:01:10.550]  - Finding globals in 'X' for chunk #1 ...
[18:01:10.551] getGlobalsAndPackages() ...
[18:01:10.551] Searching for globals...
[18:01:10.551] 
[18:01:10.552] Searching for globals ... DONE
[18:01:10.552] - globals: [0] <none>
[18:01:10.552] getGlobalsAndPackages() ... DONE
[18:01:10.552]    + additional globals found: [n=0] 
[18:01:10.552]    + additional namespaces needed: [n=0] 
[18:01:10.553]  - Finding globals in 'X' for chunk #1 ... DONE
[18:01:10.553]  - seeds: [5] <seeds>
[18:01:10.553]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:10.554] getGlobalsAndPackages() ...
[18:01:10.554] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:10.554] Resolving globals: FALSE
[18:01:10.554] Tweak future expression to call with '...' arguments ...
[18:01:10.555] {
[18:01:10.555]     do.call(function(...) {
[18:01:10.555]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:10.555]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:10.555]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:10.555]             on.exit(options(oopts), add = TRUE)
[18:01:10.555]         }
[18:01:10.555]         {
[18:01:10.555]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:10.555]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:10.555]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:10.555]                   envir = globalenv(), inherits = FALSE)
[18:01:10.555]                 ...future.FUN(...future.X_jj, ...)
[18:01:10.555]             })
[18:01:10.555]         }
[18:01:10.555]     }, args = future.call.arguments)
[18:01:10.555] }
[18:01:10.555] Tweak future expression to call with '...' arguments ... DONE
[18:01:10.556] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:10.556] 
[18:01:10.556] getGlobalsAndPackages() ... DONE
[18:01:10.558] run() for ‘Future’ ...
[18:01:10.558] - state: ‘created’
[18:01:10.558] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:01:10.559] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:01:10.559] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:01:10.560]   - Field: ‘label’
[18:01:10.560]   - Field: ‘local’
[18:01:10.560]   - Field: ‘owner’
[18:01:10.560]   - Field: ‘envir’
[18:01:10.561]   - Field: ‘packages’
[18:01:10.561]   - Field: ‘gc’
[18:01:10.561]   - Field: ‘conditions’
[18:01:10.561]   - Field: ‘expr’
[18:01:10.561]   - Field: ‘uuid’
[18:01:10.562]   - Field: ‘seed’
[18:01:10.562]   - Field: ‘version’
[18:01:10.562]   - Field: ‘result’
[18:01:10.562]   - Field: ‘asynchronous’
[18:01:10.562]   - Field: ‘calls’
[18:01:10.563]   - Field: ‘globals’
[18:01:10.563]   - Field: ‘stdout’
[18:01:10.563]   - Field: ‘earlySignal’
[18:01:10.563]   - Field: ‘lazy’
[18:01:10.563]   - Field: ‘state’
[18:01:10.564] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:01:10.564] - Launch lazy future ...
[18:01:10.565] Packages needed by the future expression (n = 0): <none>
[18:01:10.570] Packages needed by future strategies (n = 0): <none>
[18:01:10.571] {
[18:01:10.571]     {
[18:01:10.571]         {
[18:01:10.571]             ...future.startTime <- base::Sys.time()
[18:01:10.571]             {
[18:01:10.571]                 {
[18:01:10.571]                   {
[18:01:10.571]                     base::local({
[18:01:10.571]                       has_future <- base::requireNamespace("future", 
[18:01:10.571]                         quietly = TRUE)
[18:01:10.571]                       if (has_future) {
[18:01:10.571]                         ns <- base::getNamespace("future")
[18:01:10.571]                         version <- ns[[".package"]][["version"]]
[18:01:10.571]                         if (is.null(version)) 
[18:01:10.571]                           version <- utils::packageVersion("future")
[18:01:10.571]                       }
[18:01:10.571]                       else {
[18:01:10.571]                         version <- NULL
[18:01:10.571]                       }
[18:01:10.571]                       if (!has_future || version < "1.8.0") {
[18:01:10.571]                         info <- base::c(r_version = base::gsub("R version ", 
[18:01:10.571]                           "", base::R.version$version.string), 
[18:01:10.571]                           platform = base::sprintf("%s (%s-bit)", 
[18:01:10.571]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:10.571]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:10.571]                             "release", "version")], collapse = " "), 
[18:01:10.571]                           hostname = base::Sys.info()[["nodename"]])
[18:01:10.571]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:01:10.571]                           info)
[18:01:10.571]                         info <- base::paste(info, collapse = "; ")
[18:01:10.571]                         if (!has_future) {
[18:01:10.571]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:10.571]                             info)
[18:01:10.571]                         }
[18:01:10.571]                         else {
[18:01:10.571]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:10.571]                             info, version)
[18:01:10.571]                         }
[18:01:10.571]                         base::stop(msg)
[18:01:10.571]                       }
[18:01:10.571]                     })
[18:01:10.571]                   }
[18:01:10.571]                   ...future.strategy.old <- future::plan("list")
[18:01:10.571]                   options(future.plan = NULL)
[18:01:10.571]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:10.571]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:10.571]                 }
[18:01:10.571]                 ...future.workdir <- getwd()
[18:01:10.571]             }
[18:01:10.571]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:10.571]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:10.571]         }
[18:01:10.571]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:10.571]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:01:10.571]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:10.571]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:10.571]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:10.571]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:10.571]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:10.571]             base::names(...future.oldOptions))
[18:01:10.571]     }
[18:01:10.571]     if (FALSE) {
[18:01:10.571]     }
[18:01:10.571]     else {
[18:01:10.571]         if (TRUE) {
[18:01:10.571]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:10.571]                 open = "w")
[18:01:10.571]         }
[18:01:10.571]         else {
[18:01:10.571]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:10.571]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:10.571]         }
[18:01:10.571]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:10.571]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:10.571]             base::sink(type = "output", split = FALSE)
[18:01:10.571]             base::close(...future.stdout)
[18:01:10.571]         }, add = TRUE)
[18:01:10.571]     }
[18:01:10.571]     ...future.frame <- base::sys.nframe()
[18:01:10.571]     ...future.conditions <- base::list()
[18:01:10.571]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:10.571]     if (FALSE) {
[18:01:10.571]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:10.571]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:10.571]     }
[18:01:10.571]     ...future.result <- base::tryCatch({
[18:01:10.571]         base::withCallingHandlers({
[18:01:10.571]             ...future.value <- base::withVisible(base::local({
[18:01:10.571]                 do.call(function(...) {
[18:01:10.571]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:10.571]                   if (!identical(...future.globals.maxSize.org, 
[18:01:10.571]                     ...future.globals.maxSize)) {
[18:01:10.571]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:10.571]                     on.exit(options(oopts), add = TRUE)
[18:01:10.571]                   }
[18:01:10.571]                   {
[18:01:10.571]                     lapply(seq_along(...future.elements_ii), 
[18:01:10.571]                       FUN = function(jj) {
[18:01:10.571]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:10.571]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:10.571]                           envir = globalenv(), inherits = FALSE)
[18:01:10.571]                         ...future.FUN(...future.X_jj, ...)
[18:01:10.571]                       })
[18:01:10.571]                   }
[18:01:10.571]                 }, args = future.call.arguments)
[18:01:10.571]             }))
[18:01:10.571]             future::FutureResult(value = ...future.value$value, 
[18:01:10.571]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:10.571]                   ...future.rng), globalenv = if (FALSE) 
[18:01:10.571]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:10.571]                     ...future.globalenv.names))
[18:01:10.571]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:10.571]         }, condition = base::local({
[18:01:10.571]             c <- base::c
[18:01:10.571]             inherits <- base::inherits
[18:01:10.571]             invokeRestart <- base::invokeRestart
[18:01:10.571]             length <- base::length
[18:01:10.571]             list <- base::list
[18:01:10.571]             seq.int <- base::seq.int
[18:01:10.571]             signalCondition <- base::signalCondition
[18:01:10.571]             sys.calls <- base::sys.calls
[18:01:10.571]             `[[` <- base::`[[`
[18:01:10.571]             `+` <- base::`+`
[18:01:10.571]             `<<-` <- base::`<<-`
[18:01:10.571]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:10.571]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:10.571]                   3L)]
[18:01:10.571]             }
[18:01:10.571]             function(cond) {
[18:01:10.571]                 is_error <- inherits(cond, "error")
[18:01:10.571]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:10.571]                   NULL)
[18:01:10.571]                 if (is_error) {
[18:01:10.571]                   sessionInformation <- function() {
[18:01:10.571]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:10.571]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:10.571]                       search = base::search(), system = base::Sys.info())
[18:01:10.571]                   }
[18:01:10.571]                   ...future.conditions[[length(...future.conditions) + 
[18:01:10.571]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:10.571]                     cond$call), session = sessionInformation(), 
[18:01:10.571]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:10.571]                   signalCondition(cond)
[18:01:10.571]                 }
[18:01:10.571]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:10.571]                 "immediateCondition"))) {
[18:01:10.571]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:10.571]                   ...future.conditions[[length(...future.conditions) + 
[18:01:10.571]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:10.571]                   if (TRUE && !signal) {
[18:01:10.571]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:10.571]                     {
[18:01:10.571]                       inherits <- base::inherits
[18:01:10.571]                       invokeRestart <- base::invokeRestart
[18:01:10.571]                       is.null <- base::is.null
[18:01:10.571]                       muffled <- FALSE
[18:01:10.571]                       if (inherits(cond, "message")) {
[18:01:10.571]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:10.571]                         if (muffled) 
[18:01:10.571]                           invokeRestart("muffleMessage")
[18:01:10.571]                       }
[18:01:10.571]                       else if (inherits(cond, "warning")) {
[18:01:10.571]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:10.571]                         if (muffled) 
[18:01:10.571]                           invokeRestart("muffleWarning")
[18:01:10.571]                       }
[18:01:10.571]                       else if (inherits(cond, "condition")) {
[18:01:10.571]                         if (!is.null(pattern)) {
[18:01:10.571]                           computeRestarts <- base::computeRestarts
[18:01:10.571]                           grepl <- base::grepl
[18:01:10.571]                           restarts <- computeRestarts(cond)
[18:01:10.571]                           for (restart in restarts) {
[18:01:10.571]                             name <- restart$name
[18:01:10.571]                             if (is.null(name)) 
[18:01:10.571]                               next
[18:01:10.571]                             if (!grepl(pattern, name)) 
[18:01:10.571]                               next
[18:01:10.571]                             invokeRestart(restart)
[18:01:10.571]                             muffled <- TRUE
[18:01:10.571]                             break
[18:01:10.571]                           }
[18:01:10.571]                         }
[18:01:10.571]                       }
[18:01:10.571]                       invisible(muffled)
[18:01:10.571]                     }
[18:01:10.571]                     muffleCondition(cond, pattern = "^muffle")
[18:01:10.571]                   }
[18:01:10.571]                 }
[18:01:10.571]                 else {
[18:01:10.571]                   if (TRUE) {
[18:01:10.571]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:10.571]                     {
[18:01:10.571]                       inherits <- base::inherits
[18:01:10.571]                       invokeRestart <- base::invokeRestart
[18:01:10.571]                       is.null <- base::is.null
[18:01:10.571]                       muffled <- FALSE
[18:01:10.571]                       if (inherits(cond, "message")) {
[18:01:10.571]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:10.571]                         if (muffled) 
[18:01:10.571]                           invokeRestart("muffleMessage")
[18:01:10.571]                       }
[18:01:10.571]                       else if (inherits(cond, "warning")) {
[18:01:10.571]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:10.571]                         if (muffled) 
[18:01:10.571]                           invokeRestart("muffleWarning")
[18:01:10.571]                       }
[18:01:10.571]                       else if (inherits(cond, "condition")) {
[18:01:10.571]                         if (!is.null(pattern)) {
[18:01:10.571]                           computeRestarts <- base::computeRestarts
[18:01:10.571]                           grepl <- base::grepl
[18:01:10.571]                           restarts <- computeRestarts(cond)
[18:01:10.571]                           for (restart in restarts) {
[18:01:10.571]                             name <- restart$name
[18:01:10.571]                             if (is.null(name)) 
[18:01:10.571]                               next
[18:01:10.571]                             if (!grepl(pattern, name)) 
[18:01:10.571]                               next
[18:01:10.571]                             invokeRestart(restart)
[18:01:10.571]                             muffled <- TRUE
[18:01:10.571]                             break
[18:01:10.571]                           }
[18:01:10.571]                         }
[18:01:10.571]                       }
[18:01:10.571]                       invisible(muffled)
[18:01:10.571]                     }
[18:01:10.571]                     muffleCondition(cond, pattern = "^muffle")
[18:01:10.571]                   }
[18:01:10.571]                 }
[18:01:10.571]             }
[18:01:10.571]         }))
[18:01:10.571]     }, error = function(ex) {
[18:01:10.571]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:10.571]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:10.571]                 ...future.rng), started = ...future.startTime, 
[18:01:10.571]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:10.571]             version = "1.8"), class = "FutureResult")
[18:01:10.571]     }, finally = {
[18:01:10.571]         if (!identical(...future.workdir, getwd())) 
[18:01:10.571]             setwd(...future.workdir)
[18:01:10.571]         {
[18:01:10.571]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:10.571]                 ...future.oldOptions$nwarnings <- NULL
[18:01:10.571]             }
[18:01:10.571]             base::options(...future.oldOptions)
[18:01:10.571]             if (.Platform$OS.type == "windows") {
[18:01:10.571]                 old_names <- names(...future.oldEnvVars)
[18:01:10.571]                 envs <- base::Sys.getenv()
[18:01:10.571]                 names <- names(envs)
[18:01:10.571]                 common <- intersect(names, old_names)
[18:01:10.571]                 added <- setdiff(names, old_names)
[18:01:10.571]                 removed <- setdiff(old_names, names)
[18:01:10.571]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:10.571]                   envs[common]]
[18:01:10.571]                 NAMES <- toupper(changed)
[18:01:10.571]                 args <- list()
[18:01:10.571]                 for (kk in seq_along(NAMES)) {
[18:01:10.571]                   name <- changed[[kk]]
[18:01:10.571]                   NAME <- NAMES[[kk]]
[18:01:10.571]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:10.571]                     next
[18:01:10.571]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:10.571]                 }
[18:01:10.571]                 NAMES <- toupper(added)
[18:01:10.571]                 for (kk in seq_along(NAMES)) {
[18:01:10.571]                   name <- added[[kk]]
[18:01:10.571]                   NAME <- NAMES[[kk]]
[18:01:10.571]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:10.571]                     next
[18:01:10.571]                   args[[name]] <- ""
[18:01:10.571]                 }
[18:01:10.571]                 NAMES <- toupper(removed)
[18:01:10.571]                 for (kk in seq_along(NAMES)) {
[18:01:10.571]                   name <- removed[[kk]]
[18:01:10.571]                   NAME <- NAMES[[kk]]
[18:01:10.571]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:10.571]                     next
[18:01:10.571]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:10.571]                 }
[18:01:10.571]                 if (length(args) > 0) 
[18:01:10.571]                   base::do.call(base::Sys.setenv, args = args)
[18:01:10.571]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:10.571]             }
[18:01:10.571]             else {
[18:01:10.571]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:10.571]             }
[18:01:10.571]             {
[18:01:10.571]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:10.571]                   0L) {
[18:01:10.571]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:10.571]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:10.571]                   base::options(opts)
[18:01:10.571]                 }
[18:01:10.571]                 {
[18:01:10.571]                   {
[18:01:10.571]                     base::assign(".Random.seed", c(10403L, 7L, 
[18:01:10.571]                     1195431469L, 271869764L, -1250175894L, 666767061L, 
[18:01:10.571]                     -1541257105L, -841381514L, 108049056L, 499883875L, 
[18:01:10.571]                     -315755519L, 1919418224L, 458798862L, -265178759L, 
[18:01:10.571]                     1886733579L, -602350022L, -808577732L, 1171135103L, 
[18:01:10.571]                     820150741L, -1546362900L, 147833154L, -920355171L, 
[18:01:10.571]                     -1453401321L, 501402238L, 1457592888L, -413246181L, 
[18:01:10.571]                     896273017L, -233830712L, -687726858L, 412088113L, 
[18:01:10.571]                     552628067L, 1868072242L, -976169340L, -2092973369L, 
[18:01:10.571]                     -1502895715L, -1662393068L, -1222038598L, 
[18:01:10.571]                     767532549L, 548888543L, 275437158L, -1062993424L, 
[18:01:10.571]                     -1909879021L, -1470754639L, 1348907872L, 
[18:01:10.571]                     -1751228162L, -1741238135L, -1150091333L, 
[18:01:10.571]                     857770378L, -391235476L, 652728815L, -1625615835L, 
[18:01:10.571]                     1850230492L, 665050290L, -399331411L, -622808217L, 
[18:01:10.571]                     -1312927602L, -2005717656L, -164418197L, 
[18:01:10.571]                     1338900233L, -1683385960L, -1680443194L, 
[18:01:10.571]                     714082849L, 1653494451L, 1327915042L, 439826964L, 
[18:01:10.571]                     -995230057L, 792129677L, 491881892L, -1863776374L, 
[18:01:10.571]                     -964107275L, 1941129807L, 207113558L, -1920735232L, 
[18:01:10.571]                     -1010255549L, -879233823L, 1472187984L, 1834570414L, 
[18:01:10.571]                     -1233078695L, 1333296747L, 1318941658L, -565074788L, 
[18:01:10.571]                     -1953157473L, -554179339L, -705985140L, 1242071138L, 
[18:01:10.571]                     -1862594499L, 831523511L, 1825976670L, 1004271768L, 
[18:01:10.571]                     1889895419L, -1055837799L, 888476200L, 595239638L, 
[18:01:10.571]                     -1323415727L, 1957456387L, 437230994L, -1991054556L, 
[18:01:10.571]                     -2107585049L, -1645688259L, -2137439052L, 
[18:01:10.571]                     813581082L, -2138429339L, 1337065727L, 293122438L, 
[18:01:10.571]                     721446672L, -148282445L, -967204783L, 975451136L, 
[18:01:10.571]                     -1310673698L, -1862219991L, -841229605L, 
[18:01:10.571]                     -1014746646L, 843348364L, 550403791L, 1606779525L, 
[18:01:10.571]                     -2080876228L, -136494062L, -640193779L, 696612935L, 
[18:01:10.571]                     1287789102L, 340198280L, -271331701L, -2146492311L, 
[18:01:10.571]                     61746232L, 993762534L, 1740973185L, 553251859L, 
[18:01:10.571]                     -1282743358L, -155616140L, -538373513L, 872770413L, 
[18:01:10.571]                     -1782100988L, 461383466L, -509643627L, -283122897L, 
[18:01:10.571]                     467964470L, -32430496L, 612578467L, 320659393L, 
[18:01:10.571]                     226622384L, 1263869646L, -1387422663L, -268762549L, 
[18:01:10.571]                     -81266694L, -1442360580L, 1630000959L, 375789589L, 
[18:01:10.571]                     2021092140L, 901111810L, -1145247011L, 840233431L, 
[18:01:10.571]                     2071100606L, -1375168776L, 1417012443L, -819767495L, 
[18:01:10.571]                     518079112L, 1888413238L, 30422641L, 267879587L, 
[18:01:10.571]                     780275186L, 1336073540L, 1409244679L, -1935811619L, 
[18:01:10.571]                     -674040620L, 394398714L, 1175280453L, -749461601L, 
[18:01:10.571]                     1749325094L, -1988977232L, 501773907L, 894505329L, 
[18:01:10.571]                     -518301536L, -1841928130L, 588603209L, -1939569157L, 
[18:01:10.571]                     -696104502L, -2014533844L, -537135313L, 1998493157L, 
[18:01:10.571]                     733755548L, -1676448526L, 1338778989L, 1410409127L, 
[18:01:10.571]                     1382927566L, -2146000344L, -302378453L, -492718007L, 
[18:01:10.571]                     -1575343784L, -1060081658L, 126656993L, -1657992333L, 
[18:01:10.571]                     -165445662L, -288565420L, 465934935L, -869279155L, 
[18:01:10.571]                     1913822692L, -2007091254L, -463398347L, 1435459727L, 
[18:01:10.571]                     1573388694L, 1526553920L, 1682837507L, 1836110369L, 
[18:01:10.571]                     567129360L, -2017625362L, 1500677785L, -1202854101L, 
[18:01:10.571]                     -903831014L, -1508482852L, 620158175L, -1195955531L, 
[18:01:10.571]                     1972001868L, 1632026786L, 2139889661L, -2009178889L, 
[18:01:10.571]                     1912629790L, -733076264L, -1120733125L, -966319655L, 
[18:01:10.571]                     1108834152L, -1650525546L, -227195887L, 1540126147L, 
[18:01:10.571]                     280189394L, 1013207140L, 699207591L, -2070724355L, 
[18:01:10.571]                     1815459060L, -1469033510L, 731946874L, -711462352L, 
[18:01:10.571]                     -19297348L, -1861475756L, -358822846L, 1805785248L, 
[18:01:10.571]                     1318634172L, -1691607600L, -2018863262L, 
[18:01:10.571]                     -88681752L, 1860150476L, 1708436988L, 672881138L, 
[18:01:10.571]                     26130048L, -748952076L, -288009592L, 1696778042L, 
[18:01:10.571]                     1331502928L, 711576684L, 721235348L, -819655598L, 
[18:01:10.571]                     -155936288L, 1546048716L, 1747054752L, 304687490L, 
[18:01:10.571]                     1916025064L, -302849300L, -362384068L, 625773682L, 
[18:01:10.571]                     -1534426000L, -1609405404L, 20897848L, -748844262L, 
[18:01:10.571]                     1122942160L, -393823428L, -1362843756L, 1971007362L, 
[18:01:10.571]                     -811215424L, -987405764L, 1230731664L, -1953523166L, 
[18:01:10.571]                     -2101449464L, -1381950836L, 1497413404L, 
[18:01:10.571]                     -1632022382L, -520003200L, -891665900L, -1004977368L, 
[18:01:10.571]                     -1321179590L, -822052400L, 91731308L, 644682676L, 
[18:01:10.571]                     -1279165422L, 1604841952L, -2144238644L, 
[18:01:10.571]                     1104392416L, 1212409890L, 427924776L, -991005172L, 
[18:01:10.571]                     -722033860L, 1722962930L, -1485791504L, 985631300L, 
[18:01:10.571]                     1931218520L, 1033851706L, -1232711184L, -1453121860L, 
[18:01:10.571]                     798211348L, 50216642L, -1959886752L, -669333636L, 
[18:01:10.571]                     1481661392L, -1080312542L, -1712355672L, 
[18:01:10.571]                     39414668L, 1891531964L, 1920411442L, -776416704L, 
[18:01:10.571]                     -747800396L, 1603258952L, -1492263494L, 393531920L, 
[18:01:10.571]                     2091818732L, 416419156L, 1779488018L, -2064778848L, 
[18:01:10.571]                     11116236L, -1181809056L, -598961214L, -899087576L, 
[18:01:10.571]                     57138092L, 1479118652L, 537615730L, -1137832144L, 
[18:01:10.571]                     -2072210140L, 1942526776L, -2022801702L, 
[18:01:10.571]                     275014544L, 2049161980L, 1431655316L, 117411906L, 
[18:01:10.571]                     -62684928L, 1815612L, 739018064L, -407764830L, 
[18:01:10.571]                     -488391352L, -2087322868L, 618193628L, -1038171822L, 
[18:01:10.571]                     1682604160L, 639593556L, -81609752L, 1059919098L, 
[18:01:10.571]                     445849424L, -1382387924L, 1404181876L, 1092648850L, 
[18:01:10.571]                     -525812640L, 1158018444L, 1509575520L, -1569659422L, 
[18:01:10.571]                     -1203592280L, 2088149196L, -2302980L, 728986034L, 
[18:01:10.571]                     651525616L, -2003214396L, 1138565464L, 1008481658L, 
[18:01:10.571]                     1759608752L, 1121392060L, 1382868052L, -1530452030L, 
[18:01:10.571]                     -2123458528L, -1813747524L, -322513328L, 
[18:01:10.571]                     1230983138L, -771327896L, 840933452L, 1598817532L, 
[18:01:10.571]                     -92014606L, 1849650432L, -818121356L, -2134382584L, 
[18:01:10.571]                     655659962L, -1795201584L, 710307820L, 96669076L, 
[18:01:10.571]                     864991698L, -1002299040L, -1029125300L, -207849184L, 
[18:01:10.571]                     -102508670L, -662542616L, 83734764L, -364439492L, 
[18:01:10.571]                     1283878770L, -2138124688L, 879459364L, -1241516232L, 
[18:01:10.571]                     -265272166L, 1237082832L, 337889468L, -1111751020L, 
[18:01:10.571]                     -5304702L, -414971712L, -178045124L, -452165488L, 
[18:01:10.571]                     1521550882L, 1994853384L, -602215156L, -1685988196L, 
[18:01:10.571]                     -2016255470L, 1554871168L, -1532643820L, 
[18:01:10.571]                     241821224L, 687508794L, -2055293488L, -1280040852L, 
[18:01:10.571]                     -490801868L, 159220370L, -1086945440L, -429899956L, 
[18:01:10.571]                     78430176L, -45454430L, 647248808L, -1645495924L, 
[18:01:10.571]                     -450726724L, -1044094606L, 73867504L, -363192252L, 
[18:01:10.571]                     -1934455464L, -1281318342L, -1939689616L, 
[18:01:10.571]                     -197682116L, 389651220L, 1934562754L, -945854752L, 
[18:01:10.571]                     866227068L, -650079536L, 1996350626L, -895924184L, 
[18:01:10.571]                     -1770268404L, -1237351492L, -1907944142L, 
[18:01:10.571]                     1409298880L, -1041845708L, -1266104376L, 
[18:01:10.571]                     -1103227718L, -1633773168L, 1727570412L, 
[18:01:10.571]                     -650752428L, -1323938670L, -1253598432L, 
[18:01:10.571]                     -637562420L, 380521952L, -810901822L, -795959256L, 
[18:01:10.571]                     -1865650516L, 1536970940L, 632387058L, -352891600L, 
[18:01:10.571]                     814773412L, -625306952L, -1164334758L, -1820552816L, 
[18:01:10.571]                     -458571908L, -414072501L, -324861107L, 1458864506L, 
[18:01:10.571]                     -288427080L, 1979935073L, 397735187L, -1582228172L, 
[18:01:10.571]                     -504821950L, 845387607L, -457718111L, -1627723930L, 
[18:01:10.571]                     659210596L, -1578417003L, 606293439L, 922759512L, 
[18:01:10.571]                     -763256970L, -797528701L, 411404229L, -1012417310L, 
[18:01:10.571]                     1304463696L, 1683183737L, -259597397L, -2134277860L, 
[18:01:10.571]                     1312966218L, -835927489L, 646747785L, 333824670L, 
[18:01:10.571]                     -1792319668L, -1171876067L, -270436697L, 
[18:01:10.571]                     713539024L, 354379118L, 1571166235L, 680147325L, 
[18:01:10.571]                     595320682L, -773125624L, -555127119L, -638785245L, 
[18:01:10.571]                     294492708L, 1552453842L, 1951074599L, -778361999L, 
[18:01:10.571]                     2096976310L, 570255700L, 892159973L, -2103496209L, 
[18:01:10.571]                     865728808L, -208678522L, 335322547L, -846577387L, 
[18:01:10.571]                     -634817678L, 141262784L, 1909682217L, 323136667L, 
[18:01:10.571]                     266283372L, 566788474L, -1716596049L, 195684793L, 
[18:01:10.571]                     285701070L, -1460098276L, -360922483L, -946992393L, 
[18:01:10.571]                     -825172480L, 1953855582L, -1528810709L, -253927379L, 
[18:01:10.571]                     436701338L, 1914494040L, -822391871L, -1612798861L, 
[18:01:10.571]                     455519636L, 500126754L, 1118962487L, -219404799L, 
[18:01:10.571]                     -622270714L, 1963285316L, -727642507L, -585175073L, 
[18:01:10.571]                     1169859384L, 639657238L, 854612259L, 1597776613L, 
[18:01:10.571]                     -1573106942L, 170525040L, -1501828839L, -1084298997L, 
[18:01:10.571]                     -1354159620L, -240516566L, 1851920991L, -1523494423L, 
[18:01:10.571]                     -490702082L, 25899756L, -1312398787L, -1574911481L, 
[18:01:10.571]                     34145776L, 1108747662L, 598031291L, 1329632669L, 
[18:01:10.571]                     -468731062L, 328777576L, -1961053871L, -1265360317L, 
[18:01:10.571]                     -1305991356L, 786303986L, 1019658695L, -1546930287L, 
[18:01:10.571]                     451673878L, 1071295348L, 1395454469L, 2002469455L, 
[18:01:10.571]                     -1845797304L, -1544642586L, -75615981L, 615767669L, 
[18:01:10.571]                     532436050L, 1867292320L, -1870816375L, -154146885L, 
[18:01:10.571]                     -1874532340L, 467101082L, 66258191L, -1835603111L, 
[18:01:10.571]                     -102910482L, -1683255172L, -1079560979L, 
[18:01:10.571]                     557704087L, 1378417760L, 2003861054L, -116975861L, 
[18:01:10.571]                     1680649613L, -580593990L, 1320924408L, 1711260321L, 
[18:01:10.571]                     -1448795565L, 887356788L, -253971710L, -305286249L, 
[18:01:10.571]                     -451349151L, -692161114L, 11749284L, 2057773653L, 
[18:01:10.571]                     554939135L, 1484429208L, -1043326794L, -1237365437L, 
[18:01:10.571]                     -1411199867L, -2031078110L, 214359568L, -227926599L, 
[18:01:10.571]                     -1031004565L, 1892118876L, -196884342L, 2067497087L, 
[18:01:10.571]                     -1851117111L, -1523682722L, -189748980L, 
[18:01:10.571]                     -1006203683L, -1990800921L, -862686704L, 
[18:01:10.571]                     -1291931858L, 1822053339L, 1692247229L, -639166934L, 
[18:01:10.571]                     -903116088L, 1686089713L, -1227071133L, 1382502756L, 
[18:01:10.571]                     -751954798L, -326162073L, -867182655L), envir = base::globalenv(), 
[18:01:10.571]                       inherits = FALSE)
[18:01:10.571]                     NULL
[18:01:10.571]                   }
[18:01:10.571]                   options(future.plan = NULL)
[18:01:10.571]                   if (is.na(NA_character_)) 
[18:01:10.571]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:10.571]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:10.571]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:10.571]                     .init = FALSE)
[18:01:10.571]                 }
[18:01:10.571]             }
[18:01:10.571]         }
[18:01:10.571]     })
[18:01:10.571]     if (TRUE) {
[18:01:10.571]         base::sink(type = "output", split = FALSE)
[18:01:10.571]         if (TRUE) {
[18:01:10.571]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:10.571]         }
[18:01:10.571]         else {
[18:01:10.571]             ...future.result["stdout"] <- base::list(NULL)
[18:01:10.571]         }
[18:01:10.571]         base::close(...future.stdout)
[18:01:10.571]         ...future.stdout <- NULL
[18:01:10.571]     }
[18:01:10.571]     ...future.result$conditions <- ...future.conditions
[18:01:10.571]     ...future.result$finished <- base::Sys.time()
[18:01:10.571]     ...future.result
[18:01:10.571] }
[18:01:10.577] assign_globals() ...
[18:01:10.577] List of 5
[18:01:10.577]  $ ...future.FUN            :function (...)  
[18:01:10.577]  $ future.call.arguments    : list()
[18:01:10.577]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:10.577]  $ ...future.elements_ii    :List of 5
[18:01:10.577]   ..$ : int 0
[18:01:10.577]   ..$ : int 0
[18:01:10.577]   ..$ : int 0
[18:01:10.577]   ..$ : int 0
[18:01:10.577]   ..$ : int 0
[18:01:10.577]  $ ...future.seeds_ii       :List of 5
[18:01:10.577]   ..$ : int [1:7] 10407 1936456237 -850930323 -2132461340 3269063 796255304 -439689926
[18:01:10.577]   ..$ : int [1:7] 10407 1772891572 -1445201479 -527690634 -2027538654 -2134574953 -432913835
[18:01:10.577]   ..$ : int [1:7] 10407 1350966841 -630760579 -918391157 -1077288397 -420852932 1048143954
[18:01:10.577]   ..$ : int [1:7] 10407 -1716543544 -1995644123 977346969 -191821146 459033640 1799366142
[18:01:10.577]   ..$ : int [1:7] 10407 1921104306 177129058 1890534428 -174715485 -2044991263 -1795513506
[18:01:10.577]  $ ...future.globals.maxSize: NULL
[18:01:10.577]  - attr(*, "where")=List of 5
[18:01:10.577]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[18:01:10.577]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[18:01:10.577]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[18:01:10.577]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[18:01:10.577]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[18:01:10.577]  - attr(*, "resolved")= logi FALSE
[18:01:10.577]  - attr(*, "total_size")= num 616
[18:01:10.577]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:10.577]  - attr(*, "already-done")= logi TRUE
[18:01:10.593] - reassign environment for ‘...future.FUN’
[18:01:10.593] - copied ‘...future.FUN’ to environment
[18:01:10.593] - copied ‘future.call.arguments’ to environment
[18:01:10.594] - copied ‘...future.elements_ii’ to environment
[18:01:10.594] - copied ‘...future.seeds_ii’ to environment
[18:01:10.594] - copied ‘...future.globals.maxSize’ to environment
[18:01:10.594] assign_globals() ... done
[18:01:10.595] plan(): Setting new future strategy stack:
[18:01:10.595] List of future strategies:
[18:01:10.595] 1. sequential:
[18:01:10.595]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:10.595]    - tweaked: FALSE
[18:01:10.595]    - call: NULL
[18:01:10.596] plan(): nbrOfWorkers() = 1
[18:01:10.598] plan(): Setting new future strategy stack:
[18:01:10.598] List of future strategies:
[18:01:10.598] 1. sequential:
[18:01:10.598]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:10.598]    - tweaked: FALSE
[18:01:10.598]    - call: plan(strategy)
[18:01:10.599] plan(): nbrOfWorkers() = 1
[18:01:10.600] SequentialFuture started (and completed)
[18:01:10.600] - Launch lazy future ... done
[18:01:10.601] run() for ‘SequentialFuture’ ... done
[18:01:10.601] Created future:
[18:01:10.601] SequentialFuture:
[18:01:10.601] Label: ‘future_replicate-1’
[18:01:10.601] Expression:
[18:01:10.601] {
[18:01:10.601]     do.call(function(...) {
[18:01:10.601]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:10.601]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:10.601]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:10.601]             on.exit(options(oopts), add = TRUE)
[18:01:10.601]         }
[18:01:10.601]         {
[18:01:10.601]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:10.601]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:10.601]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:10.601]                   envir = globalenv(), inherits = FALSE)
[18:01:10.601]                 ...future.FUN(...future.X_jj, ...)
[18:01:10.601]             })
[18:01:10.601]         }
[18:01:10.601]     }, args = future.call.arguments)
[18:01:10.601] }
[18:01:10.601] Lazy evaluation: FALSE
[18:01:10.601] Asynchronous evaluation: FALSE
[18:01:10.601] Local evaluation: TRUE
[18:01:10.601] Environment: R_GlobalEnv
[18:01:10.601] Capture standard output: TRUE
[18:01:10.601] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:10.601] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:10.601] Packages: <none>
[18:01:10.601] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:10.601] Resolved: TRUE
[18:01:10.601] Value: 280 bytes of class ‘list’
[18:01:10.601] Early signaling: FALSE
[18:01:10.601] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:10.601] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:01:10.604] Chunk #1 of 1 ... DONE
[18:01:10.604] Launching 1 futures (chunks) ... DONE
[18:01:10.604] Resolving 1 futures (chunks) ...
[18:01:10.605] resolve() on list ...
[18:01:10.605]  recursive: 0
[18:01:10.605]  length: 1
[18:01:10.605] 
[18:01:10.606] resolved() for ‘SequentialFuture’ ...
[18:01:10.606] - state: ‘finished’
[18:01:10.606] - run: TRUE
[18:01:10.606] - result: ‘FutureResult’
[18:01:10.606] resolved() for ‘SequentialFuture’ ... done
[18:01:10.607] Future #1
[18:01:10.607] signalConditionsASAP(SequentialFuture, pos=1) ...
[18:01:10.608] - nx: 1
[18:01:10.608] - relay: TRUE
[18:01:10.608] - stdout: TRUE
[18:01:10.608] - signal: TRUE
[18:01:10.608] - resignal: FALSE
[18:01:10.608] - force: TRUE
[18:01:10.609] - relayed: [n=1] FALSE
[18:01:10.609] - queued futures: [n=1] FALSE
[18:01:10.609]  - until=1
[18:01:10.609]  - relaying element #1
[18:01:10.610] - relayed: [n=1] TRUE
[18:01:10.610] - queued futures: [n=1] TRUE
[18:01:10.610] signalConditionsASAP(SequentialFuture, pos=1) ... done
[18:01:10.610]  length: 0 (resolved future 1)
[18:01:10.611] Relaying remaining futures
[18:01:10.611] signalConditionsASAP(NULL, pos=0) ...
[18:01:10.611] - nx: 1
[18:01:10.611] - relay: TRUE
[18:01:10.611] - stdout: TRUE
[18:01:10.611] - signal: TRUE
[18:01:10.612] - resignal: FALSE
[18:01:10.612] - force: TRUE
[18:01:10.612] - relayed: [n=1] TRUE
[18:01:10.612] - queued futures: [n=1] TRUE
 - flush all
[18:01:10.612] - relayed: [n=1] TRUE
[18:01:10.613] - queued futures: [n=1] TRUE
[18:01:10.613] signalConditionsASAP(NULL, pos=0) ... done
[18:01:10.613] resolve() on list ... DONE
[18:01:10.613]  - Number of value chunks collected: 1
[18:01:10.613] Resolving 1 futures (chunks) ... DONE
[18:01:10.614] Reducing values from 1 chunks ...
[18:01:10.614]  - Number of values collected after concatenation: 5
[18:01:10.614]  - Number of values expected: 5
[18:01:10.614] Reducing values from 1 chunks ... DONE
[18:01:10.614] future_lapply() ... DONE
[18:01:10.615] future_lapply() ...
[18:01:10.616] Generating random seeds ...
[18:01:10.616] Generating random seed streams for 5 elements ...
[18:01:10.616] Generating random seed streams for 5 elements ... DONE
[18:01:10.616] Generating random seeds ... DONE
[18:01:10.616] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[18:01:10.617] Number of chunks: 1
[18:01:10.618] getGlobalsAndPackagesXApply() ...
[18:01:10.618]  - future.globals: TRUE
[18:01:10.619] getGlobalsAndPackages() ...
[18:01:10.619] Searching for globals...
[18:01:10.621] - globals found: [2] ‘FUN’, ‘sample’
[18:01:10.621] Searching for globals ... DONE
[18:01:10.621] Resolving globals: FALSE
[18:01:10.622] The total size of the 1 globals is 616 bytes (616 bytes)
[18:01:10.623] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[18:01:10.623] - globals: [1] ‘FUN’
[18:01:10.623] 
[18:01:10.623] getGlobalsAndPackages() ... DONE
[18:01:10.623]  - globals found/used: [n=1] ‘FUN’
[18:01:10.624]  - needed namespaces: [n=0] 
[18:01:10.624] Finding globals ... DONE
[18:01:10.624]  - use_args: TRUE
[18:01:10.624]  - Getting '...' globals ...
[18:01:10.625] resolve() on list ...
[18:01:10.625]  recursive: 0
[18:01:10.625]  length: 1
[18:01:10.625]  elements: ‘...’
[18:01:10.626]  length: 0 (resolved future 1)
[18:01:10.626] resolve() on list ... DONE
[18:01:10.626]    - '...' content: [n=0] 
[18:01:10.626] List of 1
[18:01:10.626]  $ ...: list()
[18:01:10.626]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:10.626]  - attr(*, "where")=List of 1
[18:01:10.626]   ..$ ...:<environment: 0x635eb5160330> 
[18:01:10.626]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:10.626]  - attr(*, "resolved")= logi TRUE
[18:01:10.626]  - attr(*, "total_size")= num NA
[18:01:10.634]  - Getting '...' globals ... DONE
[18:01:10.634] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[18:01:10.635] List of 2
[18:01:10.635]  $ ...future.FUN:function (...)  
[18:01:10.635]  $ ...          : list()
[18:01:10.635]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:10.635]  - attr(*, "where")=List of 2
[18:01:10.635]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[18:01:10.635]   ..$ ...          :<environment: 0x635eb5160330> 
[18:01:10.635]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:10.635]  - attr(*, "resolved")= logi FALSE
[18:01:10.635]  - attr(*, "total_size")= num 616
[18:01:10.640] Packages to be attached in all futures: [n=0] 
[18:01:10.640] getGlobalsAndPackagesXApply() ... DONE
[18:01:10.641] Number of futures (= number of chunks): 1
[18:01:10.641] Launching 1 futures (chunks) ...
[18:01:10.641] Chunk #1 of 1 ...
[18:01:10.641]  - Finding globals in 'X' for chunk #1 ...
[18:01:10.642] getGlobalsAndPackages() ...
[18:01:10.642] Searching for globals...
[18:01:10.642] 
[18:01:10.643] Searching for globals ... DONE
[18:01:10.643] - globals: [0] <none>
[18:01:10.643] getGlobalsAndPackages() ... DONE
[18:01:10.643]    + additional globals found: [n=0] 
[18:01:10.643]    + additional namespaces needed: [n=0] 
[18:01:10.644]  - Finding globals in 'X' for chunk #1 ... DONE
[18:01:10.644]  - seeds: [5] <seeds>
[18:01:10.644]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:10.644] getGlobalsAndPackages() ...
[18:01:10.644] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:10.645] Resolving globals: FALSE
[18:01:10.645] Tweak future expression to call with '...' arguments ...
[18:01:10.645] {
[18:01:10.645]     do.call(function(...) {
[18:01:10.645]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:10.645]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:10.645]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:10.645]             on.exit(options(oopts), add = TRUE)
[18:01:10.645]         }
[18:01:10.645]         {
[18:01:10.645]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:10.645]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:10.645]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:10.645]                   envir = globalenv(), inherits = FALSE)
[18:01:10.645]                 ...future.FUN(...future.X_jj, ...)
[18:01:10.645]             })
[18:01:10.645]         }
[18:01:10.645]     }, args = future.call.arguments)
[18:01:10.645] }
[18:01:10.646] Tweak future expression to call with '...' arguments ... DONE
[18:01:10.646] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:10.647] 
[18:01:10.647] getGlobalsAndPackages() ... DONE
[18:01:10.648] run() for ‘Future’ ...
[18:01:10.648] - state: ‘created’
[18:01:10.648] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:01:10.649] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:01:10.649] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:01:10.649]   - Field: ‘label’
[18:01:10.649]   - Field: ‘local’
[18:01:10.650]   - Field: ‘owner’
[18:01:10.650]   - Field: ‘envir’
[18:01:10.650]   - Field: ‘packages’
[18:01:10.650]   - Field: ‘gc’
[18:01:10.650]   - Field: ‘conditions’
[18:01:10.651]   - Field: ‘expr’
[18:01:10.651]   - Field: ‘uuid’
[18:01:10.651]   - Field: ‘seed’
[18:01:10.651]   - Field: ‘version’
[18:01:10.651]   - Field: ‘result’
[18:01:10.652]   - Field: ‘asynchronous’
[18:01:10.652]   - Field: ‘calls’
[18:01:10.652]   - Field: ‘globals’
[18:01:10.652]   - Field: ‘stdout’
[18:01:10.652]   - Field: ‘earlySignal’
[18:01:10.653]   - Field: ‘lazy’
[18:01:10.653]   - Field: ‘state’
[18:01:10.653] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:01:10.653] - Launch lazy future ...
[18:01:10.654] Packages needed by the future expression (n = 0): <none>
[18:01:10.654] Packages needed by future strategies (n = 0): <none>
[18:01:10.655] {
[18:01:10.655]     {
[18:01:10.655]         {
[18:01:10.655]             ...future.startTime <- base::Sys.time()
[18:01:10.655]             {
[18:01:10.655]                 {
[18:01:10.655]                   {
[18:01:10.655]                     base::local({
[18:01:10.655]                       has_future <- base::requireNamespace("future", 
[18:01:10.655]                         quietly = TRUE)
[18:01:10.655]                       if (has_future) {
[18:01:10.655]                         ns <- base::getNamespace("future")
[18:01:10.655]                         version <- ns[[".package"]][["version"]]
[18:01:10.655]                         if (is.null(version)) 
[18:01:10.655]                           version <- utils::packageVersion("future")
[18:01:10.655]                       }
[18:01:10.655]                       else {
[18:01:10.655]                         version <- NULL
[18:01:10.655]                       }
[18:01:10.655]                       if (!has_future || version < "1.8.0") {
[18:01:10.655]                         info <- base::c(r_version = base::gsub("R version ", 
[18:01:10.655]                           "", base::R.version$version.string), 
[18:01:10.655]                           platform = base::sprintf("%s (%s-bit)", 
[18:01:10.655]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:10.655]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:10.655]                             "release", "version")], collapse = " "), 
[18:01:10.655]                           hostname = base::Sys.info()[["nodename"]])
[18:01:10.655]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:01:10.655]                           info)
[18:01:10.655]                         info <- base::paste(info, collapse = "; ")
[18:01:10.655]                         if (!has_future) {
[18:01:10.655]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:10.655]                             info)
[18:01:10.655]                         }
[18:01:10.655]                         else {
[18:01:10.655]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:10.655]                             info, version)
[18:01:10.655]                         }
[18:01:10.655]                         base::stop(msg)
[18:01:10.655]                       }
[18:01:10.655]                     })
[18:01:10.655]                   }
[18:01:10.655]                   ...future.strategy.old <- future::plan("list")
[18:01:10.655]                   options(future.plan = NULL)
[18:01:10.655]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:10.655]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:10.655]                 }
[18:01:10.655]                 ...future.workdir <- getwd()
[18:01:10.655]             }
[18:01:10.655]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:10.655]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:10.655]         }
[18:01:10.655]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:10.655]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:01:10.655]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:10.655]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:10.655]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:10.655]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:10.655]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:10.655]             base::names(...future.oldOptions))
[18:01:10.655]     }
[18:01:10.655]     if (FALSE) {
[18:01:10.655]     }
[18:01:10.655]     else {
[18:01:10.655]         if (TRUE) {
[18:01:10.655]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:10.655]                 open = "w")
[18:01:10.655]         }
[18:01:10.655]         else {
[18:01:10.655]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:10.655]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:10.655]         }
[18:01:10.655]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:10.655]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:10.655]             base::sink(type = "output", split = FALSE)
[18:01:10.655]             base::close(...future.stdout)
[18:01:10.655]         }, add = TRUE)
[18:01:10.655]     }
[18:01:10.655]     ...future.frame <- base::sys.nframe()
[18:01:10.655]     ...future.conditions <- base::list()
[18:01:10.655]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:10.655]     if (FALSE) {
[18:01:10.655]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:10.655]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:10.655]     }
[18:01:10.655]     ...future.result <- base::tryCatch({
[18:01:10.655]         base::withCallingHandlers({
[18:01:10.655]             ...future.value <- base::withVisible(base::local({
[18:01:10.655]                 do.call(function(...) {
[18:01:10.655]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:10.655]                   if (!identical(...future.globals.maxSize.org, 
[18:01:10.655]                     ...future.globals.maxSize)) {
[18:01:10.655]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:10.655]                     on.exit(options(oopts), add = TRUE)
[18:01:10.655]                   }
[18:01:10.655]                   {
[18:01:10.655]                     lapply(seq_along(...future.elements_ii), 
[18:01:10.655]                       FUN = function(jj) {
[18:01:10.655]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:10.655]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:10.655]                           envir = globalenv(), inherits = FALSE)
[18:01:10.655]                         ...future.FUN(...future.X_jj, ...)
[18:01:10.655]                       })
[18:01:10.655]                   }
[18:01:10.655]                 }, args = future.call.arguments)
[18:01:10.655]             }))
[18:01:10.655]             future::FutureResult(value = ...future.value$value, 
[18:01:10.655]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:10.655]                   ...future.rng), globalenv = if (FALSE) 
[18:01:10.655]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:10.655]                     ...future.globalenv.names))
[18:01:10.655]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:10.655]         }, condition = base::local({
[18:01:10.655]             c <- base::c
[18:01:10.655]             inherits <- base::inherits
[18:01:10.655]             invokeRestart <- base::invokeRestart
[18:01:10.655]             length <- base::length
[18:01:10.655]             list <- base::list
[18:01:10.655]             seq.int <- base::seq.int
[18:01:10.655]             signalCondition <- base::signalCondition
[18:01:10.655]             sys.calls <- base::sys.calls
[18:01:10.655]             `[[` <- base::`[[`
[18:01:10.655]             `+` <- base::`+`
[18:01:10.655]             `<<-` <- base::`<<-`
[18:01:10.655]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:10.655]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:10.655]                   3L)]
[18:01:10.655]             }
[18:01:10.655]             function(cond) {
[18:01:10.655]                 is_error <- inherits(cond, "error")
[18:01:10.655]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:10.655]                   NULL)
[18:01:10.655]                 if (is_error) {
[18:01:10.655]                   sessionInformation <- function() {
[18:01:10.655]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:10.655]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:10.655]                       search = base::search(), system = base::Sys.info())
[18:01:10.655]                   }
[18:01:10.655]                   ...future.conditions[[length(...future.conditions) + 
[18:01:10.655]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:10.655]                     cond$call), session = sessionInformation(), 
[18:01:10.655]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:10.655]                   signalCondition(cond)
[18:01:10.655]                 }
[18:01:10.655]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:10.655]                 "immediateCondition"))) {
[18:01:10.655]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:10.655]                   ...future.conditions[[length(...future.conditions) + 
[18:01:10.655]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:10.655]                   if (TRUE && !signal) {
[18:01:10.655]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:10.655]                     {
[18:01:10.655]                       inherits <- base::inherits
[18:01:10.655]                       invokeRestart <- base::invokeRestart
[18:01:10.655]                       is.null <- base::is.null
[18:01:10.655]                       muffled <- FALSE
[18:01:10.655]                       if (inherits(cond, "message")) {
[18:01:10.655]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:10.655]                         if (muffled) 
[18:01:10.655]                           invokeRestart("muffleMessage")
[18:01:10.655]                       }
[18:01:10.655]                       else if (inherits(cond, "warning")) {
[18:01:10.655]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:10.655]                         if (muffled) 
[18:01:10.655]                           invokeRestart("muffleWarning")
[18:01:10.655]                       }
[18:01:10.655]                       else if (inherits(cond, "condition")) {
[18:01:10.655]                         if (!is.null(pattern)) {
[18:01:10.655]                           computeRestarts <- base::computeRestarts
[18:01:10.655]                           grepl <- base::grepl
[18:01:10.655]                           restarts <- computeRestarts(cond)
[18:01:10.655]                           for (restart in restarts) {
[18:01:10.655]                             name <- restart$name
[18:01:10.655]                             if (is.null(name)) 
[18:01:10.655]                               next
[18:01:10.655]                             if (!grepl(pattern, name)) 
[18:01:10.655]                               next
[18:01:10.655]                             invokeRestart(restart)
[18:01:10.655]                             muffled <- TRUE
[18:01:10.655]                             break
[18:01:10.655]                           }
[18:01:10.655]                         }
[18:01:10.655]                       }
[18:01:10.655]                       invisible(muffled)
[18:01:10.655]                     }
[18:01:10.655]                     muffleCondition(cond, pattern = "^muffle")
[18:01:10.655]                   }
[18:01:10.655]                 }
[18:01:10.655]                 else {
[18:01:10.655]                   if (TRUE) {
[18:01:10.655]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:10.655]                     {
[18:01:10.655]                       inherits <- base::inherits
[18:01:10.655]                       invokeRestart <- base::invokeRestart
[18:01:10.655]                       is.null <- base::is.null
[18:01:10.655]                       muffled <- FALSE
[18:01:10.655]                       if (inherits(cond, "message")) {
[18:01:10.655]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:10.655]                         if (muffled) 
[18:01:10.655]                           invokeRestart("muffleMessage")
[18:01:10.655]                       }
[18:01:10.655]                       else if (inherits(cond, "warning")) {
[18:01:10.655]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:10.655]                         if (muffled) 
[18:01:10.655]                           invokeRestart("muffleWarning")
[18:01:10.655]                       }
[18:01:10.655]                       else if (inherits(cond, "condition")) {
[18:01:10.655]                         if (!is.null(pattern)) {
[18:01:10.655]                           computeRestarts <- base::computeRestarts
[18:01:10.655]                           grepl <- base::grepl
[18:01:10.655]                           restarts <- computeRestarts(cond)
[18:01:10.655]                           for (restart in restarts) {
[18:01:10.655]                             name <- restart$name
[18:01:10.655]                             if (is.null(name)) 
[18:01:10.655]                               next
[18:01:10.655]                             if (!grepl(pattern, name)) 
[18:01:10.655]                               next
[18:01:10.655]                             invokeRestart(restart)
[18:01:10.655]                             muffled <- TRUE
[18:01:10.655]                             break
[18:01:10.655]                           }
[18:01:10.655]                         }
[18:01:10.655]                       }
[18:01:10.655]                       invisible(muffled)
[18:01:10.655]                     }
[18:01:10.655]                     muffleCondition(cond, pattern = "^muffle")
[18:01:10.655]                   }
[18:01:10.655]                 }
[18:01:10.655]             }
[18:01:10.655]         }))
[18:01:10.655]     }, error = function(ex) {
[18:01:10.655]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:10.655]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:10.655]                 ...future.rng), started = ...future.startTime, 
[18:01:10.655]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:10.655]             version = "1.8"), class = "FutureResult")
[18:01:10.655]     }, finally = {
[18:01:10.655]         if (!identical(...future.workdir, getwd())) 
[18:01:10.655]             setwd(...future.workdir)
[18:01:10.655]         {
[18:01:10.655]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:10.655]                 ...future.oldOptions$nwarnings <- NULL
[18:01:10.655]             }
[18:01:10.655]             base::options(...future.oldOptions)
[18:01:10.655]             if (.Platform$OS.type == "windows") {
[18:01:10.655]                 old_names <- names(...future.oldEnvVars)
[18:01:10.655]                 envs <- base::Sys.getenv()
[18:01:10.655]                 names <- names(envs)
[18:01:10.655]                 common <- intersect(names, old_names)
[18:01:10.655]                 added <- setdiff(names, old_names)
[18:01:10.655]                 removed <- setdiff(old_names, names)
[18:01:10.655]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:10.655]                   envs[common]]
[18:01:10.655]                 NAMES <- toupper(changed)
[18:01:10.655]                 args <- list()
[18:01:10.655]                 for (kk in seq_along(NAMES)) {
[18:01:10.655]                   name <- changed[[kk]]
[18:01:10.655]                   NAME <- NAMES[[kk]]
[18:01:10.655]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:10.655]                     next
[18:01:10.655]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:10.655]                 }
[18:01:10.655]                 NAMES <- toupper(added)
[18:01:10.655]                 for (kk in seq_along(NAMES)) {
[18:01:10.655]                   name <- added[[kk]]
[18:01:10.655]                   NAME <- NAMES[[kk]]
[18:01:10.655]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:10.655]                     next
[18:01:10.655]                   args[[name]] <- ""
[18:01:10.655]                 }
[18:01:10.655]                 NAMES <- toupper(removed)
[18:01:10.655]                 for (kk in seq_along(NAMES)) {
[18:01:10.655]                   name <- removed[[kk]]
[18:01:10.655]                   NAME <- NAMES[[kk]]
[18:01:10.655]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:10.655]                     next
[18:01:10.655]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:10.655]                 }
[18:01:10.655]                 if (length(args) > 0) 
[18:01:10.655]                   base::do.call(base::Sys.setenv, args = args)
[18:01:10.655]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:10.655]             }
[18:01:10.655]             else {
[18:01:10.655]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:10.655]             }
[18:01:10.655]             {
[18:01:10.655]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:10.655]                   0L) {
[18:01:10.655]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:10.655]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:10.655]                   base::options(opts)
[18:01:10.655]                 }
[18:01:10.655]                 {
[18:01:10.655]                   {
[18:01:10.655]                     base::assign(".Random.seed", c(10403L, 2L, 
[18:01:10.655]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[18:01:10.655]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[18:01:10.655]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[18:01:10.655]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[18:01:10.655]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[18:01:10.655]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[18:01:10.655]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[18:01:10.655]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[18:01:10.655]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[18:01:10.655]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[18:01:10.655]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[18:01:10.655]                     -1512233174L, -1985955764L, -425390065L, 
[18:01:10.655]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[18:01:10.655]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[18:01:10.655]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[18:01:10.655]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[18:01:10.655]                     1818328109L, -1284085436L, -1981489558L, 
[18:01:10.655]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[18:01:10.655]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[18:01:10.655]                     -1718567047L, -793788661L, -1133789126L, 
[18:01:10.655]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[18:01:10.655]                     -1823521982L, -1345991523L, -1672661737L, 
[18:01:10.655]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[18:01:10.655]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[18:01:10.655]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[18:01:10.655]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[18:01:10.655]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[18:01:10.655]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[18:01:10.655]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[18:01:10.655]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[18:01:10.655]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[18:01:10.655]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[18:01:10.655]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[18:01:10.655]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[18:01:10.655]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[18:01:10.655]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[18:01:10.655]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[18:01:10.655]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[18:01:10.655]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[18:01:10.655]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[18:01:10.655]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[18:01:10.655]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[18:01:10.655]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[18:01:10.655]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[18:01:10.655]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[18:01:10.655]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[18:01:10.655]                     -1119334354L, -1521015416L, -2041922421L, 
[18:01:10.655]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[18:01:10.655]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[18:01:10.655]                     1232111981L, -1801753084L, -1608606422L, 
[18:01:10.655]                     -1172096363L, 1420874031L, -1210473418L, 
[18:01:10.655]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[18:01:10.655]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[18:01:10.655]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[18:01:10.655]                     679371266L, -591318819L, -104578089L, -172818754L, 
[18:01:10.655]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[18:01:10.655]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[18:01:10.655]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[18:01:10.655]                     -332493318L, -1978392251L, -1691039632L, 
[18:01:10.655]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[18:01:10.655]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[18:01:10.655]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[18:01:10.655]                     87560756L, -87565624L, 426345146L, -699970416L, 
[18:01:10.655]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[18:01:10.655]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[18:01:10.655]                     -1178330196L, -687617348L, -1701912078L, 
[18:01:10.655]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[18:01:10.655]                     -1345416048L, 1816730492L, -1570431212L, 
[18:01:10.655]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[18:01:10.655]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[18:01:10.655]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[18:01:10.655]                     -1493184262L, -1943836976L, -590788308L, 
[18:01:10.655]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[18:01:10.655]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[18:01:10.655]                     1274857340L, -1205842638L, -1938479504L, 
[18:01:10.655]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[18:01:10.655]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[18:01:10.655]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[18:01:10.655]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[18:01:10.655]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[18:01:10.655]                     -1460751252L, 1201879444L, -1459788718L, 
[18:01:10.655]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[18:01:10.655]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[18:01:10.655]                     -420945808L, -1997735900L, -1838404552L, 
[18:01:10.655]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[18:01:10.655]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[18:01:10.655]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[18:01:10.655]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[18:01:10.655]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[18:01:10.655]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[18:01:10.655]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[18:01:10.655]                     942193650L, 751741680L, 689743428L, -18455976L, 
[18:01:10.655]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[18:01:10.655]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[18:01:10.655]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[18:01:10.655]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[18:01:10.655]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[18:01:10.655]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[18:01:10.655]                     -1357570110L, 1896595240L, -2066952276L, 
[18:01:10.655]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[18:01:10.655]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[18:01:10.655]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[18:01:10.655]                     769655120L, 236357794L, 181393736L, -13334772L, 
[18:01:10.655]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[18:01:10.655]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[18:01:10.655]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[18:01:10.655]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[18:01:10.655]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[18:01:10.655]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[18:01:10.655]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[18:01:10.655]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[18:01:10.655]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[18:01:10.655]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[18:01:10.655]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[18:01:10.655]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[18:01:10.655]                     -1365842884L, -438961294L, -1851472272L, 
[18:01:10.655]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[18:01:10.655]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[18:01:10.655]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[18:01:10.655]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[18:01:10.655]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[18:01:10.655]                     -594809770L, -2146766621L, -2013964635L, 
[18:01:10.655]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[18:01:10.655]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[18:01:10.655]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[18:01:10.655]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[18:01:10.655]                     -1426021878L, -1285634264L, 1507547537L, 
[18:01:10.655]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[18:01:10.655]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[18:01:10.655]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[18:01:10.655]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[18:01:10.655]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[18:01:10.655]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[18:01:10.655]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[18:01:10.655]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[18:01:10.655]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[18:01:10.655]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[18:01:10.655]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[18:01:10.655]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[18:01:10.655]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[18:01:10.655]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[18:01:10.655]                     -1604604761L, 1421229008L, -1268333714L, 
[18:01:10.655]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[18:01:10.655]                     -2070476623L, -2099222749L, 1141171236L, 
[18:01:10.655]                     -146426158L, -1797385433L, -1129376399L, 
[18:01:10.655]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[18:01:10.655]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[18:01:10.655]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[18:01:10.655]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[18:01:10.655]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[18:01:10.655]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[18:01:10.655]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[18:01:10.655]                     -1092079724L, -1765622238L, -1882554057L, 
[18:01:10.655]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[18:01:10.655]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[18:01:10.655]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[18:01:10.655]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[18:01:10.655]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[18:01:10.655]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[18:01:10.655]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[18:01:10.655]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[18:01:10.655]                     865377681L, -1127426242L), envir = base::globalenv(), 
[18:01:10.655]                       inherits = FALSE)
[18:01:10.655]                     NULL
[18:01:10.655]                   }
[18:01:10.655]                   options(future.plan = NULL)
[18:01:10.655]                   if (is.na(NA_character_)) 
[18:01:10.655]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:10.655]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:10.655]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:10.655]                     .init = FALSE)
[18:01:10.655]                 }
[18:01:10.655]             }
[18:01:10.655]         }
[18:01:10.655]     })
[18:01:10.655]     if (TRUE) {
[18:01:10.655]         base::sink(type = "output", split = FALSE)
[18:01:10.655]         if (TRUE) {
[18:01:10.655]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:10.655]         }
[18:01:10.655]         else {
[18:01:10.655]             ...future.result["stdout"] <- base::list(NULL)
[18:01:10.655]         }
[18:01:10.655]         base::close(...future.stdout)
[18:01:10.655]         ...future.stdout <- NULL
[18:01:10.655]     }
[18:01:10.655]     ...future.result$conditions <- ...future.conditions
[18:01:10.655]     ...future.result$finished <- base::Sys.time()
[18:01:10.655]     ...future.result
[18:01:10.655] }
[18:01:10.660] assign_globals() ...
[18:01:10.660] List of 5
[18:01:10.660]  $ ...future.FUN            :function (...)  
[18:01:10.660]  $ future.call.arguments    : list()
[18:01:10.660]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:10.660]  $ ...future.elements_ii    :List of 5
[18:01:10.660]   ..$ : int 0
[18:01:10.660]   ..$ : int 0
[18:01:10.660]   ..$ : int 0
[18:01:10.660]   ..$ : int 0
[18:01:10.660]   ..$ : int 0
[18:01:10.660]  $ ...future.seeds_ii       :List of 5
[18:01:10.660]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[18:01:10.660]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[18:01:10.660]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[18:01:10.660]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[18:01:10.660]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[18:01:10.660]  $ ...future.globals.maxSize: NULL
[18:01:10.660]  - attr(*, "where")=List of 5
[18:01:10.660]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[18:01:10.660]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[18:01:10.660]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[18:01:10.660]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[18:01:10.660]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[18:01:10.660]  - attr(*, "resolved")= logi FALSE
[18:01:10.660]  - attr(*, "total_size")= num 616
[18:01:10.660]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:10.660]  - attr(*, "already-done")= logi TRUE
[18:01:10.675] - reassign environment for ‘...future.FUN’
[18:01:10.676] - copied ‘...future.FUN’ to environment
[18:01:10.676] - copied ‘future.call.arguments’ to environment
[18:01:10.676] - copied ‘...future.elements_ii’ to environment
[18:01:10.676] - copied ‘...future.seeds_ii’ to environment
[18:01:10.677] - copied ‘...future.globals.maxSize’ to environment
[18:01:10.677] assign_globals() ... done
[18:01:10.677] plan(): Setting new future strategy stack:
[18:01:10.677] List of future strategies:
[18:01:10.677] 1. sequential:
[18:01:10.677]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:10.677]    - tweaked: FALSE
[18:01:10.677]    - call: NULL
[18:01:10.678] plan(): nbrOfWorkers() = 1
[18:01:10.680] plan(): Setting new future strategy stack:
[18:01:10.680] List of future strategies:
[18:01:10.680] 1. sequential:
[18:01:10.680]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:10.680]    - tweaked: FALSE
[18:01:10.680]    - call: plan(strategy)
[18:01:10.681] plan(): nbrOfWorkers() = 1
[18:01:10.681] SequentialFuture started (and completed)
[18:01:10.682] - Launch lazy future ... done
[18:01:10.682] run() for ‘SequentialFuture’ ... done
[18:01:10.682] Created future:
[18:01:10.682] SequentialFuture:
[18:01:10.682] Label: ‘future_replicate-1’
[18:01:10.682] Expression:
[18:01:10.682] {
[18:01:10.682]     do.call(function(...) {
[18:01:10.682]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:10.682]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:10.682]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:10.682]             on.exit(options(oopts), add = TRUE)
[18:01:10.682]         }
[18:01:10.682]         {
[18:01:10.682]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:10.682]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:10.682]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:10.682]                   envir = globalenv(), inherits = FALSE)
[18:01:10.682]                 ...future.FUN(...future.X_jj, ...)
[18:01:10.682]             })
[18:01:10.682]         }
[18:01:10.682]     }, args = future.call.arguments)
[18:01:10.682] }
[18:01:10.682] Lazy evaluation: FALSE
[18:01:10.682] Asynchronous evaluation: FALSE
[18:01:10.682] Local evaluation: TRUE
[18:01:10.682] Environment: R_GlobalEnv
[18:01:10.682] Capture standard output: TRUE
[18:01:10.682] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:10.682] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:10.682] Packages: <none>
[18:01:10.682] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:10.682] Resolved: TRUE
[18:01:10.682] Value: 280 bytes of class ‘list’
[18:01:10.682] Early signaling: FALSE
[18:01:10.682] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:10.682] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:01:10.684] Chunk #1 of 1 ... DONE
[18:01:10.684] Launching 1 futures (chunks) ... DONE
[18:01:10.685] Resolving 1 futures (chunks) ...
[18:01:10.685] resolve() on list ...
[18:01:10.685]  recursive: 0
[18:01:10.685]  length: 1
[18:01:10.685] 
[18:01:10.686] resolved() for ‘SequentialFuture’ ...
[18:01:10.686] - state: ‘finished’
[18:01:10.686] - run: TRUE
[18:01:10.686] - result: ‘FutureResult’
[18:01:10.686] resolved() for ‘SequentialFuture’ ... done
[18:01:10.687] Future #1
[18:01:10.687] signalConditionsASAP(SequentialFuture, pos=1) ...
[18:01:10.687] - nx: 1
[18:01:10.687] - relay: TRUE
[18:01:10.687] - stdout: TRUE
[18:01:10.688] - signal: TRUE
[18:01:10.688] - resignal: FALSE
[18:01:10.688] - force: TRUE
[18:01:10.688] - relayed: [n=1] FALSE
[18:01:10.688] - queued futures: [n=1] FALSE
[18:01:10.688]  - until=1
[18:01:10.691]  - relaying element #1
[18:01:10.691] - relayed: [n=1] TRUE
[18:01:10.692] - queued futures: [n=1] TRUE
[18:01:10.692] signalConditionsASAP(SequentialFuture, pos=1) ... done
[18:01:10.692]  length: 0 (resolved future 1)
[18:01:10.692] Relaying remaining futures
[18:01:10.692] signalConditionsASAP(NULL, pos=0) ...
[18:01:10.693] - nx: 1
[18:01:10.693] - relay: TRUE
[18:01:10.693] - stdout: TRUE
[18:01:10.693] - signal: TRUE
[18:01:10.693] - resignal: FALSE
[18:01:10.693] - force: TRUE
[18:01:10.694] - relayed: [n=1] TRUE
[18:01:10.694] - queued futures: [n=1] TRUE
 - flush all
[18:01:10.694] - relayed: [n=1] TRUE
[18:01:10.694] - queued futures: [n=1] TRUE
[18:01:10.694] signalConditionsASAP(NULL, pos=0) ... done
[18:01:10.695] resolve() on list ... DONE
[18:01:10.695]  - Number of value chunks collected: 1
[18:01:10.695] Resolving 1 futures (chunks) ... DONE
[18:01:10.695] Reducing values from 1 chunks ...
[18:01:10.695]  - Number of values collected after concatenation: 5
[18:01:10.696]  - Number of values expected: 5
[18:01:10.696] Reducing values from 1 chunks ... DONE
[18:01:10.696] future_lapply() ... DONE
[18:01:10.696] future_lapply() ...
[18:01:10.697] Generating random seeds ...
[18:01:10.697] Generating random seed streams for 5 elements ...
[18:01:10.698] Generating random seed streams for 5 elements ... DONE
[18:01:10.698] Generating random seeds ... DONE
[18:01:10.698] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[18:01:10.699] Number of chunks: 1
[18:01:10.699] getGlobalsAndPackagesXApply() ...
[18:01:10.699]  - future.globals: TRUE
[18:01:10.700] getGlobalsAndPackages() ...
[18:01:10.700] Searching for globals...
[18:01:10.702] - globals found: [2] ‘FUN’, ‘sample’
[18:01:10.702] Searching for globals ... DONE
[18:01:10.702] Resolving globals: FALSE
[18:01:10.703] The total size of the 1 globals is 616 bytes (616 bytes)
[18:01:10.704] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[18:01:10.704] - globals: [1] ‘FUN’
[18:01:10.704] 
[18:01:10.704] getGlobalsAndPackages() ... DONE
[18:01:10.704]  - globals found/used: [n=1] ‘FUN’
[18:01:10.705]  - needed namespaces: [n=0] 
[18:01:10.705] Finding globals ... DONE
[18:01:10.705]  - use_args: TRUE
[18:01:10.705]  - Getting '...' globals ...
[18:01:10.706] resolve() on list ...
[18:01:10.706]  recursive: 0
[18:01:10.706]  length: 1
[18:01:10.706]  elements: ‘...’
[18:01:10.707]  length: 0 (resolved future 1)
[18:01:10.707] resolve() on list ... DONE
[18:01:10.707]    - '...' content: [n=0] 
[18:01:10.707] List of 1
[18:01:10.707]  $ ...: list()
[18:01:10.707]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:10.707]  - attr(*, "where")=List of 1
[18:01:10.707]   ..$ ...:<environment: 0x635eb37beae0> 
[18:01:10.707]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:10.707]  - attr(*, "resolved")= logi TRUE
[18:01:10.707]  - attr(*, "total_size")= num NA
[18:01:10.712]  - Getting '...' globals ... DONE
[18:01:10.712] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[18:01:10.713] List of 2
[18:01:10.713]  $ ...future.FUN:function (...)  
[18:01:10.713]  $ ...          : list()
[18:01:10.713]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:10.713]  - attr(*, "where")=List of 2
[18:01:10.713]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[18:01:10.713]   ..$ ...          :<environment: 0x635eb37beae0> 
[18:01:10.713]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:10.713]  - attr(*, "resolved")= logi FALSE
[18:01:10.713]  - attr(*, "total_size")= num 616
[18:01:10.718] Packages to be attached in all futures: [n=0] 
[18:01:10.718] getGlobalsAndPackagesXApply() ... DONE
[18:01:10.719] Number of futures (= number of chunks): 1
[18:01:10.719] Launching 1 futures (chunks) ...
[18:01:10.719] Chunk #1 of 1 ...
[18:01:10.719]  - Finding globals in 'X' for chunk #1 ...
[18:01:10.719] getGlobalsAndPackages() ...
[18:01:10.720] Searching for globals...
[18:01:10.720] 
[18:01:10.720] Searching for globals ... DONE
[18:01:10.721] - globals: [0] <none>
[18:01:10.721] getGlobalsAndPackages() ... DONE
[18:01:10.721]    + additional globals found: [n=0] 
[18:01:10.721]    + additional namespaces needed: [n=0] 
[18:01:10.721]  - Finding globals in 'X' for chunk #1 ... DONE
[18:01:10.722]  - seeds: [5] <seeds>
[18:01:10.722]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:10.722] getGlobalsAndPackages() ...
[18:01:10.722] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:10.722] Resolving globals: FALSE
[18:01:10.723] Tweak future expression to call with '...' arguments ...
[18:01:10.723] {
[18:01:10.723]     do.call(function(...) {
[18:01:10.723]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:10.723]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:10.723]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:10.723]             on.exit(options(oopts), add = TRUE)
[18:01:10.723]         }
[18:01:10.723]         {
[18:01:10.723]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:10.723]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:10.723]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:10.723]                   envir = globalenv(), inherits = FALSE)
[18:01:10.723]                 ...future.FUN(...future.X_jj, ...)
[18:01:10.723]             })
[18:01:10.723]         }
[18:01:10.723]     }, args = future.call.arguments)
[18:01:10.723] }
[18:01:10.723] Tweak future expression to call with '...' arguments ... DONE
[18:01:10.724] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:10.724] 
[18:01:10.725] getGlobalsAndPackages() ... DONE
[18:01:10.725] run() for ‘Future’ ...
[18:01:10.725] - state: ‘created’
[18:01:10.726] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:01:10.726] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:01:10.726] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:01:10.726]   - Field: ‘label’
[18:01:10.727]   - Field: ‘local’
[18:01:10.727]   - Field: ‘owner’
[18:01:10.727]   - Field: ‘envir’
[18:01:10.727]   - Field: ‘packages’
[18:01:10.727]   - Field: ‘gc’
[18:01:10.728]   - Field: ‘conditions’
[18:01:10.728]   - Field: ‘expr’
[18:01:10.728]   - Field: ‘uuid’
[18:01:10.728]   - Field: ‘seed’
[18:01:10.728]   - Field: ‘version’
[18:01:10.729]   - Field: ‘result’
[18:01:10.729]   - Field: ‘asynchronous’
[18:01:10.729]   - Field: ‘calls’
[18:01:10.729]   - Field: ‘globals’
[18:01:10.729]   - Field: ‘stdout’
[18:01:10.730]   - Field: ‘earlySignal’
[18:01:10.730]   - Field: ‘lazy’
[18:01:10.730]   - Field: ‘state’
[18:01:10.730] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:01:10.730] - Launch lazy future ...
[18:01:10.731] Packages needed by the future expression (n = 0): <none>
[18:01:10.731] Packages needed by future strategies (n = 0): <none>
[18:01:10.732] {
[18:01:10.732]     {
[18:01:10.732]         {
[18:01:10.732]             ...future.startTime <- base::Sys.time()
[18:01:10.732]             {
[18:01:10.732]                 {
[18:01:10.732]                   {
[18:01:10.732]                     base::local({
[18:01:10.732]                       has_future <- base::requireNamespace("future", 
[18:01:10.732]                         quietly = TRUE)
[18:01:10.732]                       if (has_future) {
[18:01:10.732]                         ns <- base::getNamespace("future")
[18:01:10.732]                         version <- ns[[".package"]][["version"]]
[18:01:10.732]                         if (is.null(version)) 
[18:01:10.732]                           version <- utils::packageVersion("future")
[18:01:10.732]                       }
[18:01:10.732]                       else {
[18:01:10.732]                         version <- NULL
[18:01:10.732]                       }
[18:01:10.732]                       if (!has_future || version < "1.8.0") {
[18:01:10.732]                         info <- base::c(r_version = base::gsub("R version ", 
[18:01:10.732]                           "", base::R.version$version.string), 
[18:01:10.732]                           platform = base::sprintf("%s (%s-bit)", 
[18:01:10.732]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:10.732]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:10.732]                             "release", "version")], collapse = " "), 
[18:01:10.732]                           hostname = base::Sys.info()[["nodename"]])
[18:01:10.732]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:01:10.732]                           info)
[18:01:10.732]                         info <- base::paste(info, collapse = "; ")
[18:01:10.732]                         if (!has_future) {
[18:01:10.732]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:10.732]                             info)
[18:01:10.732]                         }
[18:01:10.732]                         else {
[18:01:10.732]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:10.732]                             info, version)
[18:01:10.732]                         }
[18:01:10.732]                         base::stop(msg)
[18:01:10.732]                       }
[18:01:10.732]                     })
[18:01:10.732]                   }
[18:01:10.732]                   ...future.strategy.old <- future::plan("list")
[18:01:10.732]                   options(future.plan = NULL)
[18:01:10.732]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:10.732]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:10.732]                 }
[18:01:10.732]                 ...future.workdir <- getwd()
[18:01:10.732]             }
[18:01:10.732]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:10.732]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:10.732]         }
[18:01:10.732]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:10.732]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:01:10.732]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:10.732]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:10.732]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:10.732]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:10.732]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:10.732]             base::names(...future.oldOptions))
[18:01:10.732]     }
[18:01:10.732]     if (FALSE) {
[18:01:10.732]     }
[18:01:10.732]     else {
[18:01:10.732]         if (TRUE) {
[18:01:10.732]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:10.732]                 open = "w")
[18:01:10.732]         }
[18:01:10.732]         else {
[18:01:10.732]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:10.732]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:10.732]         }
[18:01:10.732]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:10.732]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:10.732]             base::sink(type = "output", split = FALSE)
[18:01:10.732]             base::close(...future.stdout)
[18:01:10.732]         }, add = TRUE)
[18:01:10.732]     }
[18:01:10.732]     ...future.frame <- base::sys.nframe()
[18:01:10.732]     ...future.conditions <- base::list()
[18:01:10.732]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:10.732]     if (FALSE) {
[18:01:10.732]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:10.732]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:10.732]     }
[18:01:10.732]     ...future.result <- base::tryCatch({
[18:01:10.732]         base::withCallingHandlers({
[18:01:10.732]             ...future.value <- base::withVisible(base::local({
[18:01:10.732]                 do.call(function(...) {
[18:01:10.732]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:10.732]                   if (!identical(...future.globals.maxSize.org, 
[18:01:10.732]                     ...future.globals.maxSize)) {
[18:01:10.732]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:10.732]                     on.exit(options(oopts), add = TRUE)
[18:01:10.732]                   }
[18:01:10.732]                   {
[18:01:10.732]                     lapply(seq_along(...future.elements_ii), 
[18:01:10.732]                       FUN = function(jj) {
[18:01:10.732]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:10.732]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:10.732]                           envir = globalenv(), inherits = FALSE)
[18:01:10.732]                         ...future.FUN(...future.X_jj, ...)
[18:01:10.732]                       })
[18:01:10.732]                   }
[18:01:10.732]                 }, args = future.call.arguments)
[18:01:10.732]             }))
[18:01:10.732]             future::FutureResult(value = ...future.value$value, 
[18:01:10.732]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:10.732]                   ...future.rng), globalenv = if (FALSE) 
[18:01:10.732]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:10.732]                     ...future.globalenv.names))
[18:01:10.732]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:10.732]         }, condition = base::local({
[18:01:10.732]             c <- base::c
[18:01:10.732]             inherits <- base::inherits
[18:01:10.732]             invokeRestart <- base::invokeRestart
[18:01:10.732]             length <- base::length
[18:01:10.732]             list <- base::list
[18:01:10.732]             seq.int <- base::seq.int
[18:01:10.732]             signalCondition <- base::signalCondition
[18:01:10.732]             sys.calls <- base::sys.calls
[18:01:10.732]             `[[` <- base::`[[`
[18:01:10.732]             `+` <- base::`+`
[18:01:10.732]             `<<-` <- base::`<<-`
[18:01:10.732]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:10.732]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:10.732]                   3L)]
[18:01:10.732]             }
[18:01:10.732]             function(cond) {
[18:01:10.732]                 is_error <- inherits(cond, "error")
[18:01:10.732]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:10.732]                   NULL)
[18:01:10.732]                 if (is_error) {
[18:01:10.732]                   sessionInformation <- function() {
[18:01:10.732]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:10.732]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:10.732]                       search = base::search(), system = base::Sys.info())
[18:01:10.732]                   }
[18:01:10.732]                   ...future.conditions[[length(...future.conditions) + 
[18:01:10.732]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:10.732]                     cond$call), session = sessionInformation(), 
[18:01:10.732]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:10.732]                   signalCondition(cond)
[18:01:10.732]                 }
[18:01:10.732]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:10.732]                 "immediateCondition"))) {
[18:01:10.732]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:10.732]                   ...future.conditions[[length(...future.conditions) + 
[18:01:10.732]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:10.732]                   if (TRUE && !signal) {
[18:01:10.732]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:10.732]                     {
[18:01:10.732]                       inherits <- base::inherits
[18:01:10.732]                       invokeRestart <- base::invokeRestart
[18:01:10.732]                       is.null <- base::is.null
[18:01:10.732]                       muffled <- FALSE
[18:01:10.732]                       if (inherits(cond, "message")) {
[18:01:10.732]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:10.732]                         if (muffled) 
[18:01:10.732]                           invokeRestart("muffleMessage")
[18:01:10.732]                       }
[18:01:10.732]                       else if (inherits(cond, "warning")) {
[18:01:10.732]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:10.732]                         if (muffled) 
[18:01:10.732]                           invokeRestart("muffleWarning")
[18:01:10.732]                       }
[18:01:10.732]                       else if (inherits(cond, "condition")) {
[18:01:10.732]                         if (!is.null(pattern)) {
[18:01:10.732]                           computeRestarts <- base::computeRestarts
[18:01:10.732]                           grepl <- base::grepl
[18:01:10.732]                           restarts <- computeRestarts(cond)
[18:01:10.732]                           for (restart in restarts) {
[18:01:10.732]                             name <- restart$name
[18:01:10.732]                             if (is.null(name)) 
[18:01:10.732]                               next
[18:01:10.732]                             if (!grepl(pattern, name)) 
[18:01:10.732]                               next
[18:01:10.732]                             invokeRestart(restart)
[18:01:10.732]                             muffled <- TRUE
[18:01:10.732]                             break
[18:01:10.732]                           }
[18:01:10.732]                         }
[18:01:10.732]                       }
[18:01:10.732]                       invisible(muffled)
[18:01:10.732]                     }
[18:01:10.732]                     muffleCondition(cond, pattern = "^muffle")
[18:01:10.732]                   }
[18:01:10.732]                 }
[18:01:10.732]                 else {
[18:01:10.732]                   if (TRUE) {
[18:01:10.732]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:10.732]                     {
[18:01:10.732]                       inherits <- base::inherits
[18:01:10.732]                       invokeRestart <- base::invokeRestart
[18:01:10.732]                       is.null <- base::is.null
[18:01:10.732]                       muffled <- FALSE
[18:01:10.732]                       if (inherits(cond, "message")) {
[18:01:10.732]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:10.732]                         if (muffled) 
[18:01:10.732]                           invokeRestart("muffleMessage")
[18:01:10.732]                       }
[18:01:10.732]                       else if (inherits(cond, "warning")) {
[18:01:10.732]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:10.732]                         if (muffled) 
[18:01:10.732]                           invokeRestart("muffleWarning")
[18:01:10.732]                       }
[18:01:10.732]                       else if (inherits(cond, "condition")) {
[18:01:10.732]                         if (!is.null(pattern)) {
[18:01:10.732]                           computeRestarts <- base::computeRestarts
[18:01:10.732]                           grepl <- base::grepl
[18:01:10.732]                           restarts <- computeRestarts(cond)
[18:01:10.732]                           for (restart in restarts) {
[18:01:10.732]                             name <- restart$name
[18:01:10.732]                             if (is.null(name)) 
[18:01:10.732]                               next
[18:01:10.732]                             if (!grepl(pattern, name)) 
[18:01:10.732]                               next
[18:01:10.732]                             invokeRestart(restart)
[18:01:10.732]                             muffled <- TRUE
[18:01:10.732]                             break
[18:01:10.732]                           }
[18:01:10.732]                         }
[18:01:10.732]                       }
[18:01:10.732]                       invisible(muffled)
[18:01:10.732]                     }
[18:01:10.732]                     muffleCondition(cond, pattern = "^muffle")
[18:01:10.732]                   }
[18:01:10.732]                 }
[18:01:10.732]             }
[18:01:10.732]         }))
[18:01:10.732]     }, error = function(ex) {
[18:01:10.732]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:10.732]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:10.732]                 ...future.rng), started = ...future.startTime, 
[18:01:10.732]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:10.732]             version = "1.8"), class = "FutureResult")
[18:01:10.732]     }, finally = {
[18:01:10.732]         if (!identical(...future.workdir, getwd())) 
[18:01:10.732]             setwd(...future.workdir)
[18:01:10.732]         {
[18:01:10.732]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:10.732]                 ...future.oldOptions$nwarnings <- NULL
[18:01:10.732]             }
[18:01:10.732]             base::options(...future.oldOptions)
[18:01:10.732]             if (.Platform$OS.type == "windows") {
[18:01:10.732]                 old_names <- names(...future.oldEnvVars)
[18:01:10.732]                 envs <- base::Sys.getenv()
[18:01:10.732]                 names <- names(envs)
[18:01:10.732]                 common <- intersect(names, old_names)
[18:01:10.732]                 added <- setdiff(names, old_names)
[18:01:10.732]                 removed <- setdiff(old_names, names)
[18:01:10.732]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:10.732]                   envs[common]]
[18:01:10.732]                 NAMES <- toupper(changed)
[18:01:10.732]                 args <- list()
[18:01:10.732]                 for (kk in seq_along(NAMES)) {
[18:01:10.732]                   name <- changed[[kk]]
[18:01:10.732]                   NAME <- NAMES[[kk]]
[18:01:10.732]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:10.732]                     next
[18:01:10.732]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:10.732]                 }
[18:01:10.732]                 NAMES <- toupper(added)
[18:01:10.732]                 for (kk in seq_along(NAMES)) {
[18:01:10.732]                   name <- added[[kk]]
[18:01:10.732]                   NAME <- NAMES[[kk]]
[18:01:10.732]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:10.732]                     next
[18:01:10.732]                   args[[name]] <- ""
[18:01:10.732]                 }
[18:01:10.732]                 NAMES <- toupper(removed)
[18:01:10.732]                 for (kk in seq_along(NAMES)) {
[18:01:10.732]                   name <- removed[[kk]]
[18:01:10.732]                   NAME <- NAMES[[kk]]
[18:01:10.732]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:10.732]                     next
[18:01:10.732]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:10.732]                 }
[18:01:10.732]                 if (length(args) > 0) 
[18:01:10.732]                   base::do.call(base::Sys.setenv, args = args)
[18:01:10.732]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:10.732]             }
[18:01:10.732]             else {
[18:01:10.732]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:10.732]             }
[18:01:10.732]             {
[18:01:10.732]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:10.732]                   0L) {
[18:01:10.732]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:10.732]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:10.732]                   base::options(opts)
[18:01:10.732]                 }
[18:01:10.732]                 {
[18:01:10.732]                   {
[18:01:10.732]                     base::assign(".Random.seed", c(10403L, 2L, 
[18:01:10.732]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[18:01:10.732]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[18:01:10.732]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[18:01:10.732]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[18:01:10.732]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[18:01:10.732]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[18:01:10.732]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[18:01:10.732]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[18:01:10.732]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[18:01:10.732]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[18:01:10.732]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[18:01:10.732]                     -1512233174L, -1985955764L, -425390065L, 
[18:01:10.732]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[18:01:10.732]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[18:01:10.732]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[18:01:10.732]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[18:01:10.732]                     1818328109L, -1284085436L, -1981489558L, 
[18:01:10.732]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[18:01:10.732]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[18:01:10.732]                     -1718567047L, -793788661L, -1133789126L, 
[18:01:10.732]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[18:01:10.732]                     -1823521982L, -1345991523L, -1672661737L, 
[18:01:10.732]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[18:01:10.732]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[18:01:10.732]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[18:01:10.732]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[18:01:10.732]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[18:01:10.732]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[18:01:10.732]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[18:01:10.732]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[18:01:10.732]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[18:01:10.732]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[18:01:10.732]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[18:01:10.732]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[18:01:10.732]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[18:01:10.732]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[18:01:10.732]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[18:01:10.732]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[18:01:10.732]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[18:01:10.732]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[18:01:10.732]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[18:01:10.732]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[18:01:10.732]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[18:01:10.732]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[18:01:10.732]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[18:01:10.732]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[18:01:10.732]                     -1119334354L, -1521015416L, -2041922421L, 
[18:01:10.732]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[18:01:10.732]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[18:01:10.732]                     1232111981L, -1801753084L, -1608606422L, 
[18:01:10.732]                     -1172096363L, 1420874031L, -1210473418L, 
[18:01:10.732]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[18:01:10.732]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[18:01:10.732]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[18:01:10.732]                     679371266L, -591318819L, -104578089L, -172818754L, 
[18:01:10.732]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[18:01:10.732]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[18:01:10.732]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[18:01:10.732]                     -332493318L, -1978392251L, -1691039632L, 
[18:01:10.732]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[18:01:10.732]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[18:01:10.732]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[18:01:10.732]                     87560756L, -87565624L, 426345146L, -699970416L, 
[18:01:10.732]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[18:01:10.732]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[18:01:10.732]                     -1178330196L, -687617348L, -1701912078L, 
[18:01:10.732]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[18:01:10.732]                     -1345416048L, 1816730492L, -1570431212L, 
[18:01:10.732]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[18:01:10.732]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[18:01:10.732]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[18:01:10.732]                     -1493184262L, -1943836976L, -590788308L, 
[18:01:10.732]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[18:01:10.732]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[18:01:10.732]                     1274857340L, -1205842638L, -1938479504L, 
[18:01:10.732]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[18:01:10.732]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[18:01:10.732]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[18:01:10.732]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[18:01:10.732]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[18:01:10.732]                     -1460751252L, 1201879444L, -1459788718L, 
[18:01:10.732]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[18:01:10.732]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[18:01:10.732]                     -420945808L, -1997735900L, -1838404552L, 
[18:01:10.732]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[18:01:10.732]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[18:01:10.732]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[18:01:10.732]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[18:01:10.732]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[18:01:10.732]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[18:01:10.732]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[18:01:10.732]                     942193650L, 751741680L, 689743428L, -18455976L, 
[18:01:10.732]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[18:01:10.732]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[18:01:10.732]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[18:01:10.732]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[18:01:10.732]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[18:01:10.732]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[18:01:10.732]                     -1357570110L, 1896595240L, -2066952276L, 
[18:01:10.732]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[18:01:10.732]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[18:01:10.732]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[18:01:10.732]                     769655120L, 236357794L, 181393736L, -13334772L, 
[18:01:10.732]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[18:01:10.732]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[18:01:10.732]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[18:01:10.732]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[18:01:10.732]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[18:01:10.732]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[18:01:10.732]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[18:01:10.732]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[18:01:10.732]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[18:01:10.732]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[18:01:10.732]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[18:01:10.732]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[18:01:10.732]                     -1365842884L, -438961294L, -1851472272L, 
[18:01:10.732]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[18:01:10.732]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[18:01:10.732]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[18:01:10.732]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[18:01:10.732]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[18:01:10.732]                     -594809770L, -2146766621L, -2013964635L, 
[18:01:10.732]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[18:01:10.732]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[18:01:10.732]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[18:01:10.732]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[18:01:10.732]                     -1426021878L, -1285634264L, 1507547537L, 
[18:01:10.732]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[18:01:10.732]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[18:01:10.732]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[18:01:10.732]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[18:01:10.732]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[18:01:10.732]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[18:01:10.732]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[18:01:10.732]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[18:01:10.732]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[18:01:10.732]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[18:01:10.732]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[18:01:10.732]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[18:01:10.732]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[18:01:10.732]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[18:01:10.732]                     -1604604761L, 1421229008L, -1268333714L, 
[18:01:10.732]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[18:01:10.732]                     -2070476623L, -2099222749L, 1141171236L, 
[18:01:10.732]                     -146426158L, -1797385433L, -1129376399L, 
[18:01:10.732]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[18:01:10.732]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[18:01:10.732]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[18:01:10.732]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[18:01:10.732]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[18:01:10.732]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[18:01:10.732]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[18:01:10.732]                     -1092079724L, -1765622238L, -1882554057L, 
[18:01:10.732]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[18:01:10.732]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[18:01:10.732]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[18:01:10.732]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[18:01:10.732]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[18:01:10.732]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[18:01:10.732]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[18:01:10.732]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[18:01:10.732]                     865377681L, -1127426242L), envir = base::globalenv(), 
[18:01:10.732]                       inherits = FALSE)
[18:01:10.732]                     NULL
[18:01:10.732]                   }
[18:01:10.732]                   options(future.plan = NULL)
[18:01:10.732]                   if (is.na(NA_character_)) 
[18:01:10.732]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:10.732]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:10.732]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:10.732]                     .init = FALSE)
[18:01:10.732]                 }
[18:01:10.732]             }
[18:01:10.732]         }
[18:01:10.732]     })
[18:01:10.732]     if (TRUE) {
[18:01:10.732]         base::sink(type = "output", split = FALSE)
[18:01:10.732]         if (TRUE) {
[18:01:10.732]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:10.732]         }
[18:01:10.732]         else {
[18:01:10.732]             ...future.result["stdout"] <- base::list(NULL)
[18:01:10.732]         }
[18:01:10.732]         base::close(...future.stdout)
[18:01:10.732]         ...future.stdout <- NULL
[18:01:10.732]     }
[18:01:10.732]     ...future.result$conditions <- ...future.conditions
[18:01:10.732]     ...future.result$finished <- base::Sys.time()
[18:01:10.732]     ...future.result
[18:01:10.732] }
[18:01:10.737] assign_globals() ...
[18:01:10.737] List of 5
[18:01:10.737]  $ ...future.FUN            :function (...)  
[18:01:10.737]  $ future.call.arguments    : list()
[18:01:10.737]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:10.737]  $ ...future.elements_ii    :List of 5
[18:01:10.737]   ..$ : int 0
[18:01:10.737]   ..$ : int 0
[18:01:10.737]   ..$ : int 0
[18:01:10.737]   ..$ : int 0
[18:01:10.737]   ..$ : int 0
[18:01:10.737]  $ ...future.seeds_ii       :List of 5
[18:01:10.737]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[18:01:10.737]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[18:01:10.737]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[18:01:10.737]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[18:01:10.737]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[18:01:10.737]  $ ...future.globals.maxSize: NULL
[18:01:10.737]  - attr(*, "where")=List of 5
[18:01:10.737]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[18:01:10.737]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[18:01:10.737]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[18:01:10.737]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[18:01:10.737]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[18:01:10.737]  - attr(*, "resolved")= logi FALSE
[18:01:10.737]  - attr(*, "total_size")= num 616
[18:01:10.737]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:10.737]  - attr(*, "already-done")= logi TRUE
[18:01:10.754] - reassign environment for ‘...future.FUN’
[18:01:10.754] - copied ‘...future.FUN’ to environment
[18:01:10.754] - copied ‘future.call.arguments’ to environment
[18:01:10.755] - copied ‘...future.elements_ii’ to environment
[18:01:10.755] - copied ‘...future.seeds_ii’ to environment
[18:01:10.755] - copied ‘...future.globals.maxSize’ to environment
[18:01:10.755] assign_globals() ... done
[18:01:10.756] plan(): Setting new future strategy stack:
[18:01:10.756] List of future strategies:
[18:01:10.756] 1. sequential:
[18:01:10.756]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:10.756]    - tweaked: FALSE
[18:01:10.756]    - call: NULL
[18:01:10.757] plan(): nbrOfWorkers() = 1
[18:01:10.758] plan(): Setting new future strategy stack:
[18:01:10.759] List of future strategies:
[18:01:10.759] 1. sequential:
[18:01:10.759]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:10.759]    - tweaked: FALSE
[18:01:10.759]    - call: plan(strategy)
[18:01:10.759] plan(): nbrOfWorkers() = 1
[18:01:10.760] SequentialFuture started (and completed)
[18:01:10.760] - Launch lazy future ... done
[18:01:10.760] run() for ‘SequentialFuture’ ... done
[18:01:10.760] Created future:
[18:01:10.761] SequentialFuture:
[18:01:10.761] Label: ‘future_replicate-1’
[18:01:10.761] Expression:
[18:01:10.761] {
[18:01:10.761]     do.call(function(...) {
[18:01:10.761]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:10.761]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:10.761]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:10.761]             on.exit(options(oopts), add = TRUE)
[18:01:10.761]         }
[18:01:10.761]         {
[18:01:10.761]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:10.761]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:10.761]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:10.761]                   envir = globalenv(), inherits = FALSE)
[18:01:10.761]                 ...future.FUN(...future.X_jj, ...)
[18:01:10.761]             })
[18:01:10.761]         }
[18:01:10.761]     }, args = future.call.arguments)
[18:01:10.761] }
[18:01:10.761] Lazy evaluation: FALSE
[18:01:10.761] Asynchronous evaluation: FALSE
[18:01:10.761] Local evaluation: TRUE
[18:01:10.761] Environment: R_GlobalEnv
[18:01:10.761] Capture standard output: TRUE
[18:01:10.761] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:10.761] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:10.761] Packages: <none>
[18:01:10.761] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:10.761] Resolved: TRUE
[18:01:10.761] Value: 280 bytes of class ‘list’
[18:01:10.761] Early signaling: FALSE
[18:01:10.761] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:10.761] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:01:10.763] Chunk #1 of 1 ... DONE
[18:01:10.763] Launching 1 futures (chunks) ... DONE
[18:01:10.763] Resolving 1 futures (chunks) ...
[18:01:10.763] resolve() on list ...
[18:01:10.763]  recursive: 0
[18:01:10.764]  length: 1
[18:01:10.764] 
[18:01:10.764] resolved() for ‘SequentialFuture’ ...
[18:01:10.764] - state: ‘finished’
[18:01:10.764] - run: TRUE
[18:01:10.765] - result: ‘FutureResult’
[18:01:10.765] resolved() for ‘SequentialFuture’ ... done
[18:01:10.765] Future #1
[18:01:10.765] signalConditionsASAP(SequentialFuture, pos=1) ...
[18:01:10.766] - nx: 1
[18:01:10.766] - relay: TRUE
[18:01:10.766] - stdout: TRUE
[18:01:10.766] - signal: TRUE
[18:01:10.766] - resignal: FALSE
[18:01:10.766] - force: TRUE
[18:01:10.767] - relayed: [n=1] FALSE
[18:01:10.767] - queued futures: [n=1] FALSE
[18:01:10.767]  - until=1
[18:01:10.767]  - relaying element #1
[18:01:10.768] - relayed: [n=1] TRUE
[18:01:10.768] - queued futures: [n=1] TRUE
[18:01:10.768] signalConditionsASAP(SequentialFuture, pos=1) ... done
[18:01:10.768]  length: 0 (resolved future 1)
[18:01:10.768] Relaying remaining futures
[18:01:10.768] signalConditionsASAP(NULL, pos=0) ...
[18:01:10.769] - nx: 1
[18:01:10.769] - relay: TRUE
[18:01:10.769] - stdout: TRUE
[18:01:10.769] - signal: TRUE
[18:01:10.769] - resignal: FALSE
[18:01:10.769] - force: TRUE
[18:01:10.770] - relayed: [n=1] TRUE
[18:01:10.770] - queued futures: [n=1] TRUE
 - flush all
[18:01:10.770] - relayed: [n=1] TRUE
[18:01:10.770] - queued futures: [n=1] TRUE
[18:01:10.770] signalConditionsASAP(NULL, pos=0) ... done
[18:01:10.771] resolve() on list ... DONE
[18:01:10.771]  - Number of value chunks collected: 1
[18:01:10.771] Resolving 1 futures (chunks) ... DONE
[18:01:10.771] Reducing values from 1 chunks ...
[18:01:10.772]  - Number of values collected after concatenation: 5
[18:01:10.772]  - Number of values expected: 5
[18:01:10.772] Reducing values from 1 chunks ... DONE
[18:01:10.772] future_lapply() ... DONE
[18:01:10.773] future_lapply() ...
[18:01:10.774] Generating random seeds ...
[18:01:10.774] Generating random seed streams for 5 elements ...
[18:01:10.774] Generating random seed streams for 5 elements ... DONE
[18:01:10.774] Generating random seeds ... DONE
[18:01:10.775] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[18:01:10.776] Number of chunks: 1
[18:01:10.776] getGlobalsAndPackagesXApply() ...
[18:01:10.776]  - future.globals: TRUE
[18:01:10.776] getGlobalsAndPackages() ...
[18:01:10.776] Searching for globals...
[18:01:10.778] - globals found: [2] ‘FUN’, ‘sample’
[18:01:10.779] Searching for globals ... DONE
[18:01:10.779] Resolving globals: FALSE
[18:01:10.780] The total size of the 1 globals is 616 bytes (616 bytes)
[18:01:10.780] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[18:01:10.780] - globals: [1] ‘FUN’
[18:01:10.781] 
[18:01:10.781] getGlobalsAndPackages() ... DONE
[18:01:10.781]  - globals found/used: [n=1] ‘FUN’
[18:01:10.781]  - needed namespaces: [n=0] 
[18:01:10.781] Finding globals ... DONE
[18:01:10.782]  - use_args: TRUE
[18:01:10.782]  - Getting '...' globals ...
[18:01:10.782] resolve() on list ...
[18:01:10.783]  recursive: 0
[18:01:10.783]  length: 1
[18:01:10.783]  elements: ‘...’
[18:01:10.783]  length: 0 (resolved future 1)
[18:01:10.783] resolve() on list ... DONE
[18:01:10.784]    - '...' content: [n=0] 
[18:01:10.784] List of 1
[18:01:10.784]  $ ...: list()
[18:01:10.784]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:10.784]  - attr(*, "where")=List of 1
[18:01:10.784]   ..$ ...:<environment: 0x635eb4df9888> 
[18:01:10.784]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:10.784]  - attr(*, "resolved")= logi TRUE
[18:01:10.784]  - attr(*, "total_size")= num NA
[18:01:10.789]  - Getting '...' globals ... DONE
[18:01:10.789] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[18:01:10.789] List of 2
[18:01:10.789]  $ ...future.FUN:function (...)  
[18:01:10.789]  $ ...          : list()
[18:01:10.789]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:10.789]  - attr(*, "where")=List of 2
[18:01:10.789]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[18:01:10.789]   ..$ ...          :<environment: 0x635eb4df9888> 
[18:01:10.789]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:10.789]  - attr(*, "resolved")= logi FALSE
[18:01:10.789]  - attr(*, "total_size")= num 616
[18:01:10.795] Packages to be attached in all futures: [n=0] 
[18:01:10.795] getGlobalsAndPackagesXApply() ... DONE
[18:01:10.795] Number of futures (= number of chunks): 1
[18:01:10.795] Launching 1 futures (chunks) ...
[18:01:10.796] Chunk #1 of 1 ...
[18:01:10.798]  - Finding globals in 'X' for chunk #1 ...
[18:01:10.799] getGlobalsAndPackages() ...
[18:01:10.799] Searching for globals...
[18:01:10.799] 
[18:01:10.799] Searching for globals ... DONE
[18:01:10.800] - globals: [0] <none>
[18:01:10.800] getGlobalsAndPackages() ... DONE
[18:01:10.800]    + additional globals found: [n=0] 
[18:01:10.800]    + additional namespaces needed: [n=0] 
[18:01:10.800]  - Finding globals in 'X' for chunk #1 ... DONE
[18:01:10.801]  - seeds: [5] <seeds>
[18:01:10.801]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:10.801] getGlobalsAndPackages() ...
[18:01:10.801] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:10.801] Resolving globals: FALSE
[18:01:10.802] Tweak future expression to call with '...' arguments ...
[18:01:10.802] {
[18:01:10.802]     do.call(function(...) {
[18:01:10.802]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:10.802]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:10.802]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:10.802]             on.exit(options(oopts), add = TRUE)
[18:01:10.802]         }
[18:01:10.802]         {
[18:01:10.802]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:10.802]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:10.802]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:10.802]                   envir = globalenv(), inherits = FALSE)
[18:01:10.802]                 ...future.FUN(...future.X_jj, ...)
[18:01:10.802]             })
[18:01:10.802]         }
[18:01:10.802]     }, args = future.call.arguments)
[18:01:10.802] }
[18:01:10.802] Tweak future expression to call with '...' arguments ... DONE
[18:01:10.803] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:10.803] 
[18:01:10.804] getGlobalsAndPackages() ... DONE
[18:01:10.804] run() for ‘Future’ ...
[18:01:10.804] - state: ‘created’
[18:01:10.805] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:01:10.805] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:01:10.805] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:01:10.805]   - Field: ‘label’
[18:01:10.806]   - Field: ‘local’
[18:01:10.806]   - Field: ‘owner’
[18:01:10.806]   - Field: ‘envir’
[18:01:10.806]   - Field: ‘packages’
[18:01:10.806]   - Field: ‘gc’
[18:01:10.807]   - Field: ‘conditions’
[18:01:10.807]   - Field: ‘expr’
[18:01:10.807]   - Field: ‘uuid’
[18:01:10.807]   - Field: ‘seed’
[18:01:10.807]   - Field: ‘version’
[18:01:10.808]   - Field: ‘result’
[18:01:10.808]   - Field: ‘asynchronous’
[18:01:10.808]   - Field: ‘calls’
[18:01:10.808]   - Field: ‘globals’
[18:01:10.808]   - Field: ‘stdout’
[18:01:10.809]   - Field: ‘earlySignal’
[18:01:10.809]   - Field: ‘lazy’
[18:01:10.809]   - Field: ‘state’
[18:01:10.809] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:01:10.809] - Launch lazy future ...
[18:01:10.810] Packages needed by the future expression (n = 0): <none>
[18:01:10.810] Packages needed by future strategies (n = 0): <none>
[18:01:10.811] {
[18:01:10.811]     {
[18:01:10.811]         {
[18:01:10.811]             ...future.startTime <- base::Sys.time()
[18:01:10.811]             {
[18:01:10.811]                 {
[18:01:10.811]                   {
[18:01:10.811]                     base::local({
[18:01:10.811]                       has_future <- base::requireNamespace("future", 
[18:01:10.811]                         quietly = TRUE)
[18:01:10.811]                       if (has_future) {
[18:01:10.811]                         ns <- base::getNamespace("future")
[18:01:10.811]                         version <- ns[[".package"]][["version"]]
[18:01:10.811]                         if (is.null(version)) 
[18:01:10.811]                           version <- utils::packageVersion("future")
[18:01:10.811]                       }
[18:01:10.811]                       else {
[18:01:10.811]                         version <- NULL
[18:01:10.811]                       }
[18:01:10.811]                       if (!has_future || version < "1.8.0") {
[18:01:10.811]                         info <- base::c(r_version = base::gsub("R version ", 
[18:01:10.811]                           "", base::R.version$version.string), 
[18:01:10.811]                           platform = base::sprintf("%s (%s-bit)", 
[18:01:10.811]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:10.811]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:10.811]                             "release", "version")], collapse = " "), 
[18:01:10.811]                           hostname = base::Sys.info()[["nodename"]])
[18:01:10.811]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:01:10.811]                           info)
[18:01:10.811]                         info <- base::paste(info, collapse = "; ")
[18:01:10.811]                         if (!has_future) {
[18:01:10.811]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:10.811]                             info)
[18:01:10.811]                         }
[18:01:10.811]                         else {
[18:01:10.811]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:10.811]                             info, version)
[18:01:10.811]                         }
[18:01:10.811]                         base::stop(msg)
[18:01:10.811]                       }
[18:01:10.811]                     })
[18:01:10.811]                   }
[18:01:10.811]                   ...future.strategy.old <- future::plan("list")
[18:01:10.811]                   options(future.plan = NULL)
[18:01:10.811]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:10.811]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:10.811]                 }
[18:01:10.811]                 ...future.workdir <- getwd()
[18:01:10.811]             }
[18:01:10.811]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:10.811]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:10.811]         }
[18:01:10.811]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:10.811]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:01:10.811]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:10.811]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:10.811]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:10.811]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:10.811]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:10.811]             base::names(...future.oldOptions))
[18:01:10.811]     }
[18:01:10.811]     if (FALSE) {
[18:01:10.811]     }
[18:01:10.811]     else {
[18:01:10.811]         if (TRUE) {
[18:01:10.811]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:10.811]                 open = "w")
[18:01:10.811]         }
[18:01:10.811]         else {
[18:01:10.811]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:10.811]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:10.811]         }
[18:01:10.811]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:10.811]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:10.811]             base::sink(type = "output", split = FALSE)
[18:01:10.811]             base::close(...future.stdout)
[18:01:10.811]         }, add = TRUE)
[18:01:10.811]     }
[18:01:10.811]     ...future.frame <- base::sys.nframe()
[18:01:10.811]     ...future.conditions <- base::list()
[18:01:10.811]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:10.811]     if (FALSE) {
[18:01:10.811]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:10.811]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:10.811]     }
[18:01:10.811]     ...future.result <- base::tryCatch({
[18:01:10.811]         base::withCallingHandlers({
[18:01:10.811]             ...future.value <- base::withVisible(base::local({
[18:01:10.811]                 do.call(function(...) {
[18:01:10.811]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:10.811]                   if (!identical(...future.globals.maxSize.org, 
[18:01:10.811]                     ...future.globals.maxSize)) {
[18:01:10.811]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:10.811]                     on.exit(options(oopts), add = TRUE)
[18:01:10.811]                   }
[18:01:10.811]                   {
[18:01:10.811]                     lapply(seq_along(...future.elements_ii), 
[18:01:10.811]                       FUN = function(jj) {
[18:01:10.811]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:10.811]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:10.811]                           envir = globalenv(), inherits = FALSE)
[18:01:10.811]                         ...future.FUN(...future.X_jj, ...)
[18:01:10.811]                       })
[18:01:10.811]                   }
[18:01:10.811]                 }, args = future.call.arguments)
[18:01:10.811]             }))
[18:01:10.811]             future::FutureResult(value = ...future.value$value, 
[18:01:10.811]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:10.811]                   ...future.rng), globalenv = if (FALSE) 
[18:01:10.811]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:10.811]                     ...future.globalenv.names))
[18:01:10.811]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:10.811]         }, condition = base::local({
[18:01:10.811]             c <- base::c
[18:01:10.811]             inherits <- base::inherits
[18:01:10.811]             invokeRestart <- base::invokeRestart
[18:01:10.811]             length <- base::length
[18:01:10.811]             list <- base::list
[18:01:10.811]             seq.int <- base::seq.int
[18:01:10.811]             signalCondition <- base::signalCondition
[18:01:10.811]             sys.calls <- base::sys.calls
[18:01:10.811]             `[[` <- base::`[[`
[18:01:10.811]             `+` <- base::`+`
[18:01:10.811]             `<<-` <- base::`<<-`
[18:01:10.811]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:10.811]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:10.811]                   3L)]
[18:01:10.811]             }
[18:01:10.811]             function(cond) {
[18:01:10.811]                 is_error <- inherits(cond, "error")
[18:01:10.811]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:10.811]                   NULL)
[18:01:10.811]                 if (is_error) {
[18:01:10.811]                   sessionInformation <- function() {
[18:01:10.811]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:10.811]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:10.811]                       search = base::search(), system = base::Sys.info())
[18:01:10.811]                   }
[18:01:10.811]                   ...future.conditions[[length(...future.conditions) + 
[18:01:10.811]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:10.811]                     cond$call), session = sessionInformation(), 
[18:01:10.811]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:10.811]                   signalCondition(cond)
[18:01:10.811]                 }
[18:01:10.811]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:10.811]                 "immediateCondition"))) {
[18:01:10.811]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:10.811]                   ...future.conditions[[length(...future.conditions) + 
[18:01:10.811]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:10.811]                   if (TRUE && !signal) {
[18:01:10.811]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:10.811]                     {
[18:01:10.811]                       inherits <- base::inherits
[18:01:10.811]                       invokeRestart <- base::invokeRestart
[18:01:10.811]                       is.null <- base::is.null
[18:01:10.811]                       muffled <- FALSE
[18:01:10.811]                       if (inherits(cond, "message")) {
[18:01:10.811]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:10.811]                         if (muffled) 
[18:01:10.811]                           invokeRestart("muffleMessage")
[18:01:10.811]                       }
[18:01:10.811]                       else if (inherits(cond, "warning")) {
[18:01:10.811]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:10.811]                         if (muffled) 
[18:01:10.811]                           invokeRestart("muffleWarning")
[18:01:10.811]                       }
[18:01:10.811]                       else if (inherits(cond, "condition")) {
[18:01:10.811]                         if (!is.null(pattern)) {
[18:01:10.811]                           computeRestarts <- base::computeRestarts
[18:01:10.811]                           grepl <- base::grepl
[18:01:10.811]                           restarts <- computeRestarts(cond)
[18:01:10.811]                           for (restart in restarts) {
[18:01:10.811]                             name <- restart$name
[18:01:10.811]                             if (is.null(name)) 
[18:01:10.811]                               next
[18:01:10.811]                             if (!grepl(pattern, name)) 
[18:01:10.811]                               next
[18:01:10.811]                             invokeRestart(restart)
[18:01:10.811]                             muffled <- TRUE
[18:01:10.811]                             break
[18:01:10.811]                           }
[18:01:10.811]                         }
[18:01:10.811]                       }
[18:01:10.811]                       invisible(muffled)
[18:01:10.811]                     }
[18:01:10.811]                     muffleCondition(cond, pattern = "^muffle")
[18:01:10.811]                   }
[18:01:10.811]                 }
[18:01:10.811]                 else {
[18:01:10.811]                   if (TRUE) {
[18:01:10.811]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:10.811]                     {
[18:01:10.811]                       inherits <- base::inherits
[18:01:10.811]                       invokeRestart <- base::invokeRestart
[18:01:10.811]                       is.null <- base::is.null
[18:01:10.811]                       muffled <- FALSE
[18:01:10.811]                       if (inherits(cond, "message")) {
[18:01:10.811]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:10.811]                         if (muffled) 
[18:01:10.811]                           invokeRestart("muffleMessage")
[18:01:10.811]                       }
[18:01:10.811]                       else if (inherits(cond, "warning")) {
[18:01:10.811]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:10.811]                         if (muffled) 
[18:01:10.811]                           invokeRestart("muffleWarning")
[18:01:10.811]                       }
[18:01:10.811]                       else if (inherits(cond, "condition")) {
[18:01:10.811]                         if (!is.null(pattern)) {
[18:01:10.811]                           computeRestarts <- base::computeRestarts
[18:01:10.811]                           grepl <- base::grepl
[18:01:10.811]                           restarts <- computeRestarts(cond)
[18:01:10.811]                           for (restart in restarts) {
[18:01:10.811]                             name <- restart$name
[18:01:10.811]                             if (is.null(name)) 
[18:01:10.811]                               next
[18:01:10.811]                             if (!grepl(pattern, name)) 
[18:01:10.811]                               next
[18:01:10.811]                             invokeRestart(restart)
[18:01:10.811]                             muffled <- TRUE
[18:01:10.811]                             break
[18:01:10.811]                           }
[18:01:10.811]                         }
[18:01:10.811]                       }
[18:01:10.811]                       invisible(muffled)
[18:01:10.811]                     }
[18:01:10.811]                     muffleCondition(cond, pattern = "^muffle")
[18:01:10.811]                   }
[18:01:10.811]                 }
[18:01:10.811]             }
[18:01:10.811]         }))
[18:01:10.811]     }, error = function(ex) {
[18:01:10.811]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:10.811]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:10.811]                 ...future.rng), started = ...future.startTime, 
[18:01:10.811]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:10.811]             version = "1.8"), class = "FutureResult")
[18:01:10.811]     }, finally = {
[18:01:10.811]         if (!identical(...future.workdir, getwd())) 
[18:01:10.811]             setwd(...future.workdir)
[18:01:10.811]         {
[18:01:10.811]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:10.811]                 ...future.oldOptions$nwarnings <- NULL
[18:01:10.811]             }
[18:01:10.811]             base::options(...future.oldOptions)
[18:01:10.811]             if (.Platform$OS.type == "windows") {
[18:01:10.811]                 old_names <- names(...future.oldEnvVars)
[18:01:10.811]                 envs <- base::Sys.getenv()
[18:01:10.811]                 names <- names(envs)
[18:01:10.811]                 common <- intersect(names, old_names)
[18:01:10.811]                 added <- setdiff(names, old_names)
[18:01:10.811]                 removed <- setdiff(old_names, names)
[18:01:10.811]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:10.811]                   envs[common]]
[18:01:10.811]                 NAMES <- toupper(changed)
[18:01:10.811]                 args <- list()
[18:01:10.811]                 for (kk in seq_along(NAMES)) {
[18:01:10.811]                   name <- changed[[kk]]
[18:01:10.811]                   NAME <- NAMES[[kk]]
[18:01:10.811]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:10.811]                     next
[18:01:10.811]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:10.811]                 }
[18:01:10.811]                 NAMES <- toupper(added)
[18:01:10.811]                 for (kk in seq_along(NAMES)) {
[18:01:10.811]                   name <- added[[kk]]
[18:01:10.811]                   NAME <- NAMES[[kk]]
[18:01:10.811]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:10.811]                     next
[18:01:10.811]                   args[[name]] <- ""
[18:01:10.811]                 }
[18:01:10.811]                 NAMES <- toupper(removed)
[18:01:10.811]                 for (kk in seq_along(NAMES)) {
[18:01:10.811]                   name <- removed[[kk]]
[18:01:10.811]                   NAME <- NAMES[[kk]]
[18:01:10.811]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:10.811]                     next
[18:01:10.811]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:10.811]                 }
[18:01:10.811]                 if (length(args) > 0) 
[18:01:10.811]                   base::do.call(base::Sys.setenv, args = args)
[18:01:10.811]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:10.811]             }
[18:01:10.811]             else {
[18:01:10.811]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:10.811]             }
[18:01:10.811]             {
[18:01:10.811]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:10.811]                   0L) {
[18:01:10.811]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:10.811]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:10.811]                   base::options(opts)
[18:01:10.811]                 }
[18:01:10.811]                 {
[18:01:10.811]                   {
[18:01:10.811]                     base::assign(".Random.seed", c(10403L, 4L, 
[18:01:10.811]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[18:01:10.811]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[18:01:10.811]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[18:01:10.811]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[18:01:10.811]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[18:01:10.811]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[18:01:10.811]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[18:01:10.811]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[18:01:10.811]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[18:01:10.811]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[18:01:10.811]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[18:01:10.811]                     -1512233174L, -1985955764L, -425390065L, 
[18:01:10.811]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[18:01:10.811]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[18:01:10.811]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[18:01:10.811]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[18:01:10.811]                     1818328109L, -1284085436L, -1981489558L, 
[18:01:10.811]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[18:01:10.811]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[18:01:10.811]                     -1718567047L, -793788661L, -1133789126L, 
[18:01:10.811]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[18:01:10.811]                     -1823521982L, -1345991523L, -1672661737L, 
[18:01:10.811]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[18:01:10.811]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[18:01:10.811]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[18:01:10.811]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[18:01:10.811]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[18:01:10.811]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[18:01:10.811]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[18:01:10.811]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[18:01:10.811]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[18:01:10.811]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[18:01:10.811]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[18:01:10.811]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[18:01:10.811]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[18:01:10.811]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[18:01:10.811]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[18:01:10.811]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[18:01:10.811]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[18:01:10.811]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[18:01:10.811]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[18:01:10.811]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[18:01:10.811]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[18:01:10.811]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[18:01:10.811]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[18:01:10.811]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[18:01:10.811]                     -1119334354L, -1521015416L, -2041922421L, 
[18:01:10.811]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[18:01:10.811]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[18:01:10.811]                     1232111981L, -1801753084L, -1608606422L, 
[18:01:10.811]                     -1172096363L, 1420874031L, -1210473418L, 
[18:01:10.811]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[18:01:10.811]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[18:01:10.811]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[18:01:10.811]                     679371266L, -591318819L, -104578089L, -172818754L, 
[18:01:10.811]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[18:01:10.811]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[18:01:10.811]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[18:01:10.811]                     -332493318L, -1978392251L, -1691039632L, 
[18:01:10.811]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[18:01:10.811]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[18:01:10.811]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[18:01:10.811]                     87560756L, -87565624L, 426345146L, -699970416L, 
[18:01:10.811]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[18:01:10.811]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[18:01:10.811]                     -1178330196L, -687617348L, -1701912078L, 
[18:01:10.811]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[18:01:10.811]                     -1345416048L, 1816730492L, -1570431212L, 
[18:01:10.811]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[18:01:10.811]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[18:01:10.811]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[18:01:10.811]                     -1493184262L, -1943836976L, -590788308L, 
[18:01:10.811]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[18:01:10.811]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[18:01:10.811]                     1274857340L, -1205842638L, -1938479504L, 
[18:01:10.811]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[18:01:10.811]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[18:01:10.811]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[18:01:10.811]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[18:01:10.811]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[18:01:10.811]                     -1460751252L, 1201879444L, -1459788718L, 
[18:01:10.811]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[18:01:10.811]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[18:01:10.811]                     -420945808L, -1997735900L, -1838404552L, 
[18:01:10.811]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[18:01:10.811]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[18:01:10.811]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[18:01:10.811]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[18:01:10.811]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[18:01:10.811]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[18:01:10.811]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[18:01:10.811]                     942193650L, 751741680L, 689743428L, -18455976L, 
[18:01:10.811]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[18:01:10.811]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[18:01:10.811]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[18:01:10.811]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[18:01:10.811]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[18:01:10.811]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[18:01:10.811]                     -1357570110L, 1896595240L, -2066952276L, 
[18:01:10.811]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[18:01:10.811]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[18:01:10.811]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[18:01:10.811]                     769655120L, 236357794L, 181393736L, -13334772L, 
[18:01:10.811]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[18:01:10.811]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[18:01:10.811]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[18:01:10.811]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[18:01:10.811]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[18:01:10.811]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[18:01:10.811]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[18:01:10.811]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[18:01:10.811]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[18:01:10.811]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[18:01:10.811]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[18:01:10.811]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[18:01:10.811]                     -1365842884L, -438961294L, -1851472272L, 
[18:01:10.811]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[18:01:10.811]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[18:01:10.811]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[18:01:10.811]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[18:01:10.811]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[18:01:10.811]                     -594809770L, -2146766621L, -2013964635L, 
[18:01:10.811]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[18:01:10.811]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[18:01:10.811]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[18:01:10.811]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[18:01:10.811]                     -1426021878L, -1285634264L, 1507547537L, 
[18:01:10.811]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[18:01:10.811]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[18:01:10.811]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[18:01:10.811]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[18:01:10.811]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[18:01:10.811]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[18:01:10.811]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[18:01:10.811]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[18:01:10.811]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[18:01:10.811]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[18:01:10.811]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[18:01:10.811]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[18:01:10.811]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[18:01:10.811]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[18:01:10.811]                     -1604604761L, 1421229008L, -1268333714L, 
[18:01:10.811]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[18:01:10.811]                     -2070476623L, -2099222749L, 1141171236L, 
[18:01:10.811]                     -146426158L, -1797385433L, -1129376399L, 
[18:01:10.811]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[18:01:10.811]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[18:01:10.811]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[18:01:10.811]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[18:01:10.811]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[18:01:10.811]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[18:01:10.811]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[18:01:10.811]                     -1092079724L, -1765622238L, -1882554057L, 
[18:01:10.811]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[18:01:10.811]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[18:01:10.811]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[18:01:10.811]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[18:01:10.811]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[18:01:10.811]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[18:01:10.811]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[18:01:10.811]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[18:01:10.811]                     865377681L, -1127426242L), envir = base::globalenv(), 
[18:01:10.811]                       inherits = FALSE)
[18:01:10.811]                     NULL
[18:01:10.811]                   }
[18:01:10.811]                   options(future.plan = NULL)
[18:01:10.811]                   if (is.na(NA_character_)) 
[18:01:10.811]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:10.811]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:10.811]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:10.811]                     .init = FALSE)
[18:01:10.811]                 }
[18:01:10.811]             }
[18:01:10.811]         }
[18:01:10.811]     })
[18:01:10.811]     if (TRUE) {
[18:01:10.811]         base::sink(type = "output", split = FALSE)
[18:01:10.811]         if (TRUE) {
[18:01:10.811]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:10.811]         }
[18:01:10.811]         else {
[18:01:10.811]             ...future.result["stdout"] <- base::list(NULL)
[18:01:10.811]         }
[18:01:10.811]         base::close(...future.stdout)
[18:01:10.811]         ...future.stdout <- NULL
[18:01:10.811]     }
[18:01:10.811]     ...future.result$conditions <- ...future.conditions
[18:01:10.811]     ...future.result$finished <- base::Sys.time()
[18:01:10.811]     ...future.result
[18:01:10.811] }
[18:01:10.816] assign_globals() ...
[18:01:10.816] List of 5
[18:01:10.816]  $ ...future.FUN            :function (...)  
[18:01:10.816]  $ future.call.arguments    : list()
[18:01:10.816]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:10.816]  $ ...future.elements_ii    :List of 5
[18:01:10.816]   ..$ : int 0
[18:01:10.816]   ..$ : int 0
[18:01:10.816]   ..$ : int 0
[18:01:10.816]   ..$ : int 0
[18:01:10.816]   ..$ : int 0
[18:01:10.816]  $ ...future.seeds_ii       :List of 5
[18:01:10.816]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[18:01:10.816]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[18:01:10.816]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[18:01:10.816]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[18:01:10.816]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[18:01:10.816]  $ ...future.globals.maxSize: NULL
[18:01:10.816]  - attr(*, "where")=List of 5
[18:01:10.816]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[18:01:10.816]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[18:01:10.816]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[18:01:10.816]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[18:01:10.816]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[18:01:10.816]  - attr(*, "resolved")= logi FALSE
[18:01:10.816]  - attr(*, "total_size")= num 616
[18:01:10.816]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:10.816]  - attr(*, "already-done")= logi TRUE
[18:01:10.830] - reassign environment for ‘...future.FUN’
[18:01:10.831] - copied ‘...future.FUN’ to environment
[18:01:10.831] - copied ‘future.call.arguments’ to environment
[18:01:10.831] - copied ‘...future.elements_ii’ to environment
[18:01:10.831] - copied ‘...future.seeds_ii’ to environment
[18:01:10.832] - copied ‘...future.globals.maxSize’ to environment
[18:01:10.832] assign_globals() ... done
[18:01:10.832] plan(): Setting new future strategy stack:
[18:01:10.832] List of future strategies:
[18:01:10.832] 1. sequential:
[18:01:10.832]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:10.832]    - tweaked: FALSE
[18:01:10.832]    - call: NULL
[18:01:10.833] plan(): nbrOfWorkers() = 1
[18:01:10.835] plan(): Setting new future strategy stack:
[18:01:10.835] List of future strategies:
[18:01:10.835] 1. sequential:
[18:01:10.835]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:10.835]    - tweaked: FALSE
[18:01:10.835]    - call: plan(strategy)
[18:01:10.836] plan(): nbrOfWorkers() = 1
[18:01:10.837] SequentialFuture started (and completed)
[18:01:10.837] - Launch lazy future ... done
[18:01:10.837] run() for ‘SequentialFuture’ ... done
[18:01:10.837] Created future:
[18:01:10.838] SequentialFuture:
[18:01:10.838] Label: ‘future_replicate-1’
[18:01:10.838] Expression:
[18:01:10.838] {
[18:01:10.838]     do.call(function(...) {
[18:01:10.838]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:10.838]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:10.838]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:10.838]             on.exit(options(oopts), add = TRUE)
[18:01:10.838]         }
[18:01:10.838]         {
[18:01:10.838]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:10.838]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:10.838]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:10.838]                   envir = globalenv(), inherits = FALSE)
[18:01:10.838]                 ...future.FUN(...future.X_jj, ...)
[18:01:10.838]             })
[18:01:10.838]         }
[18:01:10.838]     }, args = future.call.arguments)
[18:01:10.838] }
[18:01:10.838] Lazy evaluation: FALSE
[18:01:10.838] Asynchronous evaluation: FALSE
[18:01:10.838] Local evaluation: TRUE
[18:01:10.838] Environment: R_GlobalEnv
[18:01:10.838] Capture standard output: TRUE
[18:01:10.838] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:10.838] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:10.838] Packages: <none>
[18:01:10.838] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:10.838] Resolved: TRUE
[18:01:10.838] Value: 280 bytes of class ‘list’
[18:01:10.838] Early signaling: FALSE
[18:01:10.838] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:10.838] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:01:10.840] Chunk #1 of 1 ... DONE
[18:01:10.840] Launching 1 futures (chunks) ... DONE
[18:01:10.840] Resolving 1 futures (chunks) ...
[18:01:10.841] resolve() on list ...
[18:01:10.841]  recursive: 0
[18:01:10.841]  length: 1
[18:01:10.841] 
[18:01:10.841] resolved() for ‘SequentialFuture’ ...
[18:01:10.842] - state: ‘finished’
[18:01:10.842] - run: TRUE
[18:01:10.842] - result: ‘FutureResult’
[18:01:10.842] resolved() for ‘SequentialFuture’ ... done
[18:01:10.842] Future #1
[18:01:10.843] signalConditionsASAP(SequentialFuture, pos=1) ...
[18:01:10.843] - nx: 1
[18:01:10.843] - relay: TRUE
[18:01:10.843] - stdout: TRUE
[18:01:10.843] - signal: TRUE
[18:01:10.844] - resignal: FALSE
[18:01:10.844] - force: TRUE
[18:01:10.844] - relayed: [n=1] FALSE
[18:01:10.844] - queued futures: [n=1] FALSE
[18:01:10.844]  - until=1
[18:01:10.844]  - relaying element #1
[18:01:10.845] - relayed: [n=1] TRUE
[18:01:10.845] - queued futures: [n=1] TRUE
[18:01:10.845] signalConditionsASAP(SequentialFuture, pos=1) ... done
[18:01:10.846]  length: 0 (resolved future 1)
[18:01:10.846] Relaying remaining futures
[18:01:10.846] signalConditionsASAP(NULL, pos=0) ...
[18:01:10.846] - nx: 1
[18:01:10.846] - relay: TRUE
[18:01:10.846] - stdout: TRUE
[18:01:10.847] - signal: TRUE
[18:01:10.847] - resignal: FALSE
[18:01:10.847] - force: TRUE
[18:01:10.847] - relayed: [n=1] TRUE
[18:01:10.847] - queued futures: [n=1] TRUE
 - flush all
[18:01:10.848] - relayed: [n=1] TRUE
[18:01:10.848] - queued futures: [n=1] TRUE
[18:01:10.848] signalConditionsASAP(NULL, pos=0) ... done
[18:01:10.848] resolve() on list ... DONE
[18:01:10.849]  - Number of value chunks collected: 1
[18:01:10.849] Resolving 1 futures (chunks) ... DONE
[18:01:10.849] Reducing values from 1 chunks ...
[18:01:10.849]  - Number of values collected after concatenation: 5
[18:01:10.849]  - Number of values expected: 5
[18:01:10.850] Reducing values from 1 chunks ... DONE
[18:01:10.850] future_lapply() ... DONE
[18:01:10.850] future_lapply() ...
[18:01:10.851] Generating random seeds ...
[18:01:10.851] Generating random seed streams for 5 elements ...
[18:01:10.851] Generating random seed streams for 5 elements ... DONE
[18:01:10.852] Generating random seeds ... DONE
[18:01:10.854] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[18:01:10.856] Number of chunks: 1
[18:01:10.856] getGlobalsAndPackagesXApply() ...
[18:01:10.856]  - future.globals: TRUE
[18:01:10.856] getGlobalsAndPackages() ...
[18:01:10.856] Searching for globals...
[18:01:10.859] - globals found: [2] ‘FUN’, ‘sample’
[18:01:10.859] Searching for globals ... DONE
[18:01:10.859] Resolving globals: FALSE
[18:01:10.860] The total size of the 1 globals is 616 bytes (616 bytes)
[18:01:10.861] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[18:01:10.861] - globals: [1] ‘FUN’
[18:01:10.861] 
[18:01:10.861] getGlobalsAndPackages() ... DONE
[18:01:10.862]  - globals found/used: [n=1] ‘FUN’
[18:01:10.862]  - needed namespaces: [n=0] 
[18:01:10.862] Finding globals ... DONE
[18:01:10.862]  - use_args: TRUE
[18:01:10.862]  - Getting '...' globals ...
[18:01:10.863] resolve() on list ...
[18:01:10.863]  recursive: 0
[18:01:10.864]  length: 1
[18:01:10.864]  elements: ‘...’
[18:01:10.864]  length: 0 (resolved future 1)
[18:01:10.864] resolve() on list ... DONE
[18:01:10.864]    - '...' content: [n=0] 
[18:01:10.865] List of 1
[18:01:10.865]  $ ...: list()
[18:01:10.865]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:10.865]  - attr(*, "where")=List of 1
[18:01:10.865]   ..$ ...:<environment: 0x635eb5791358> 
[18:01:10.865]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:10.865]  - attr(*, "resolved")= logi TRUE
[18:01:10.865]  - attr(*, "total_size")= num NA
[18:01:10.870]  - Getting '...' globals ... DONE
[18:01:10.871] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[18:01:10.871] List of 2
[18:01:10.871]  $ ...future.FUN:function (...)  
[18:01:10.871]  $ ...          : list()
[18:01:10.871]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:10.871]  - attr(*, "where")=List of 2
[18:01:10.871]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[18:01:10.871]   ..$ ...          :<environment: 0x635eb5791358> 
[18:01:10.871]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:10.871]  - attr(*, "resolved")= logi FALSE
[18:01:10.871]  - attr(*, "total_size")= num 616
[18:01:10.877] Packages to be attached in all futures: [n=0] 
[18:01:10.877] getGlobalsAndPackagesXApply() ... DONE
[18:01:10.877] Number of futures (= number of chunks): 1
[18:01:10.878] Launching 1 futures (chunks) ...
[18:01:10.878] Chunk #1 of 1 ...
[18:01:10.878]  - Finding globals in 'X' for chunk #1 ...
[18:01:10.878] getGlobalsAndPackages() ...
[18:01:10.879] Searching for globals...
[18:01:10.879] 
[18:01:10.879] Searching for globals ... DONE
[18:01:10.880] - globals: [0] <none>
[18:01:10.880] getGlobalsAndPackages() ... DONE
[18:01:10.880]    + additional globals found: [n=0] 
[18:01:10.880]    + additional namespaces needed: [n=0] 
[18:01:10.880]  - Finding globals in 'X' for chunk #1 ... DONE
[18:01:10.881]  - seeds: [5] <seeds>
[18:01:10.881]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:10.881] getGlobalsAndPackages() ...
[18:01:10.881] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:10.882] Resolving globals: FALSE
[18:01:10.882] Tweak future expression to call with '...' arguments ...
[18:01:10.882] {
[18:01:10.882]     do.call(function(...) {
[18:01:10.882]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:10.882]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:10.882]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:10.882]             on.exit(options(oopts), add = TRUE)
[18:01:10.882]         }
[18:01:10.882]         {
[18:01:10.882]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:10.882]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:10.882]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:10.882]                   envir = globalenv(), inherits = FALSE)
[18:01:10.882]                 ...future.FUN(...future.X_jj, ...)
[18:01:10.882]             })
[18:01:10.882]         }
[18:01:10.882]     }, args = future.call.arguments)
[18:01:10.882] }
[18:01:10.883] Tweak future expression to call with '...' arguments ... DONE
[18:01:10.883] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:10.884] 
[18:01:10.884] getGlobalsAndPackages() ... DONE
[18:01:10.885] run() for ‘Future’ ...
[18:01:10.885] - state: ‘created’
[18:01:10.885] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:01:10.886] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:01:10.886] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:01:10.886]   - Field: ‘label’
[18:01:10.886]   - Field: ‘local’
[18:01:10.887]   - Field: ‘owner’
[18:01:10.887]   - Field: ‘envir’
[18:01:10.887]   - Field: ‘packages’
[18:01:10.887]   - Field: ‘gc’
[18:01:10.887]   - Field: ‘conditions’
[18:01:10.888]   - Field: ‘expr’
[18:01:10.888]   - Field: ‘uuid’
[18:01:10.888]   - Field: ‘seed’
[18:01:10.888]   - Field: ‘version’
[18:01:10.888]   - Field: ‘result’
[18:01:10.889]   - Field: ‘asynchronous’
[18:01:10.889]   - Field: ‘calls’
[18:01:10.889]   - Field: ‘globals’
[18:01:10.889]   - Field: ‘stdout’
[18:01:10.889]   - Field: ‘earlySignal’
[18:01:10.890]   - Field: ‘lazy’
[18:01:10.890]   - Field: ‘state’
[18:01:10.890] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:01:10.890] - Launch lazy future ...
[18:01:10.891] Packages needed by the future expression (n = 0): <none>
[18:01:10.891] Packages needed by future strategies (n = 0): <none>
[18:01:10.892] {
[18:01:10.892]     {
[18:01:10.892]         {
[18:01:10.892]             ...future.startTime <- base::Sys.time()
[18:01:10.892]             {
[18:01:10.892]                 {
[18:01:10.892]                   {
[18:01:10.892]                     base::local({
[18:01:10.892]                       has_future <- base::requireNamespace("future", 
[18:01:10.892]                         quietly = TRUE)
[18:01:10.892]                       if (has_future) {
[18:01:10.892]                         ns <- base::getNamespace("future")
[18:01:10.892]                         version <- ns[[".package"]][["version"]]
[18:01:10.892]                         if (is.null(version)) 
[18:01:10.892]                           version <- utils::packageVersion("future")
[18:01:10.892]                       }
[18:01:10.892]                       else {
[18:01:10.892]                         version <- NULL
[18:01:10.892]                       }
[18:01:10.892]                       if (!has_future || version < "1.8.0") {
[18:01:10.892]                         info <- base::c(r_version = base::gsub("R version ", 
[18:01:10.892]                           "", base::R.version$version.string), 
[18:01:10.892]                           platform = base::sprintf("%s (%s-bit)", 
[18:01:10.892]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:10.892]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:10.892]                             "release", "version")], collapse = " "), 
[18:01:10.892]                           hostname = base::Sys.info()[["nodename"]])
[18:01:10.892]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:01:10.892]                           info)
[18:01:10.892]                         info <- base::paste(info, collapse = "; ")
[18:01:10.892]                         if (!has_future) {
[18:01:10.892]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:10.892]                             info)
[18:01:10.892]                         }
[18:01:10.892]                         else {
[18:01:10.892]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:10.892]                             info, version)
[18:01:10.892]                         }
[18:01:10.892]                         base::stop(msg)
[18:01:10.892]                       }
[18:01:10.892]                     })
[18:01:10.892]                   }
[18:01:10.892]                   ...future.strategy.old <- future::plan("list")
[18:01:10.892]                   options(future.plan = NULL)
[18:01:10.892]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:10.892]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:10.892]                 }
[18:01:10.892]                 ...future.workdir <- getwd()
[18:01:10.892]             }
[18:01:10.892]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:10.892]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:10.892]         }
[18:01:10.892]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:10.892]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:01:10.892]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:10.892]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:10.892]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:10.892]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:10.892]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:10.892]             base::names(...future.oldOptions))
[18:01:10.892]     }
[18:01:10.892]     if (FALSE) {
[18:01:10.892]     }
[18:01:10.892]     else {
[18:01:10.892]         if (TRUE) {
[18:01:10.892]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:10.892]                 open = "w")
[18:01:10.892]         }
[18:01:10.892]         else {
[18:01:10.892]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:10.892]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:10.892]         }
[18:01:10.892]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:10.892]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:10.892]             base::sink(type = "output", split = FALSE)
[18:01:10.892]             base::close(...future.stdout)
[18:01:10.892]         }, add = TRUE)
[18:01:10.892]     }
[18:01:10.892]     ...future.frame <- base::sys.nframe()
[18:01:10.892]     ...future.conditions <- base::list()
[18:01:10.892]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:10.892]     if (FALSE) {
[18:01:10.892]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:10.892]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:10.892]     }
[18:01:10.892]     ...future.result <- base::tryCatch({
[18:01:10.892]         base::withCallingHandlers({
[18:01:10.892]             ...future.value <- base::withVisible(base::local({
[18:01:10.892]                 do.call(function(...) {
[18:01:10.892]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:10.892]                   if (!identical(...future.globals.maxSize.org, 
[18:01:10.892]                     ...future.globals.maxSize)) {
[18:01:10.892]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:10.892]                     on.exit(options(oopts), add = TRUE)
[18:01:10.892]                   }
[18:01:10.892]                   {
[18:01:10.892]                     lapply(seq_along(...future.elements_ii), 
[18:01:10.892]                       FUN = function(jj) {
[18:01:10.892]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:10.892]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:10.892]                           envir = globalenv(), inherits = FALSE)
[18:01:10.892]                         ...future.FUN(...future.X_jj, ...)
[18:01:10.892]                       })
[18:01:10.892]                   }
[18:01:10.892]                 }, args = future.call.arguments)
[18:01:10.892]             }))
[18:01:10.892]             future::FutureResult(value = ...future.value$value, 
[18:01:10.892]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:10.892]                   ...future.rng), globalenv = if (FALSE) 
[18:01:10.892]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:10.892]                     ...future.globalenv.names))
[18:01:10.892]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:10.892]         }, condition = base::local({
[18:01:10.892]             c <- base::c
[18:01:10.892]             inherits <- base::inherits
[18:01:10.892]             invokeRestart <- base::invokeRestart
[18:01:10.892]             length <- base::length
[18:01:10.892]             list <- base::list
[18:01:10.892]             seq.int <- base::seq.int
[18:01:10.892]             signalCondition <- base::signalCondition
[18:01:10.892]             sys.calls <- base::sys.calls
[18:01:10.892]             `[[` <- base::`[[`
[18:01:10.892]             `+` <- base::`+`
[18:01:10.892]             `<<-` <- base::`<<-`
[18:01:10.892]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:10.892]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:10.892]                   3L)]
[18:01:10.892]             }
[18:01:10.892]             function(cond) {
[18:01:10.892]                 is_error <- inherits(cond, "error")
[18:01:10.892]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:10.892]                   NULL)
[18:01:10.892]                 if (is_error) {
[18:01:10.892]                   sessionInformation <- function() {
[18:01:10.892]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:10.892]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:10.892]                       search = base::search(), system = base::Sys.info())
[18:01:10.892]                   }
[18:01:10.892]                   ...future.conditions[[length(...future.conditions) + 
[18:01:10.892]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:10.892]                     cond$call), session = sessionInformation(), 
[18:01:10.892]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:10.892]                   signalCondition(cond)
[18:01:10.892]                 }
[18:01:10.892]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:10.892]                 "immediateCondition"))) {
[18:01:10.892]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:10.892]                   ...future.conditions[[length(...future.conditions) + 
[18:01:10.892]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:10.892]                   if (TRUE && !signal) {
[18:01:10.892]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:10.892]                     {
[18:01:10.892]                       inherits <- base::inherits
[18:01:10.892]                       invokeRestart <- base::invokeRestart
[18:01:10.892]                       is.null <- base::is.null
[18:01:10.892]                       muffled <- FALSE
[18:01:10.892]                       if (inherits(cond, "message")) {
[18:01:10.892]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:10.892]                         if (muffled) 
[18:01:10.892]                           invokeRestart("muffleMessage")
[18:01:10.892]                       }
[18:01:10.892]                       else if (inherits(cond, "warning")) {
[18:01:10.892]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:10.892]                         if (muffled) 
[18:01:10.892]                           invokeRestart("muffleWarning")
[18:01:10.892]                       }
[18:01:10.892]                       else if (inherits(cond, "condition")) {
[18:01:10.892]                         if (!is.null(pattern)) {
[18:01:10.892]                           computeRestarts <- base::computeRestarts
[18:01:10.892]                           grepl <- base::grepl
[18:01:10.892]                           restarts <- computeRestarts(cond)
[18:01:10.892]                           for (restart in restarts) {
[18:01:10.892]                             name <- restart$name
[18:01:10.892]                             if (is.null(name)) 
[18:01:10.892]                               next
[18:01:10.892]                             if (!grepl(pattern, name)) 
[18:01:10.892]                               next
[18:01:10.892]                             invokeRestart(restart)
[18:01:10.892]                             muffled <- TRUE
[18:01:10.892]                             break
[18:01:10.892]                           }
[18:01:10.892]                         }
[18:01:10.892]                       }
[18:01:10.892]                       invisible(muffled)
[18:01:10.892]                     }
[18:01:10.892]                     muffleCondition(cond, pattern = "^muffle")
[18:01:10.892]                   }
[18:01:10.892]                 }
[18:01:10.892]                 else {
[18:01:10.892]                   if (TRUE) {
[18:01:10.892]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:10.892]                     {
[18:01:10.892]                       inherits <- base::inherits
[18:01:10.892]                       invokeRestart <- base::invokeRestart
[18:01:10.892]                       is.null <- base::is.null
[18:01:10.892]                       muffled <- FALSE
[18:01:10.892]                       if (inherits(cond, "message")) {
[18:01:10.892]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:10.892]                         if (muffled) 
[18:01:10.892]                           invokeRestart("muffleMessage")
[18:01:10.892]                       }
[18:01:10.892]                       else if (inherits(cond, "warning")) {
[18:01:10.892]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:10.892]                         if (muffled) 
[18:01:10.892]                           invokeRestart("muffleWarning")
[18:01:10.892]                       }
[18:01:10.892]                       else if (inherits(cond, "condition")) {
[18:01:10.892]                         if (!is.null(pattern)) {
[18:01:10.892]                           computeRestarts <- base::computeRestarts
[18:01:10.892]                           grepl <- base::grepl
[18:01:10.892]                           restarts <- computeRestarts(cond)
[18:01:10.892]                           for (restart in restarts) {
[18:01:10.892]                             name <- restart$name
[18:01:10.892]                             if (is.null(name)) 
[18:01:10.892]                               next
[18:01:10.892]                             if (!grepl(pattern, name)) 
[18:01:10.892]                               next
[18:01:10.892]                             invokeRestart(restart)
[18:01:10.892]                             muffled <- TRUE
[18:01:10.892]                             break
[18:01:10.892]                           }
[18:01:10.892]                         }
[18:01:10.892]                       }
[18:01:10.892]                       invisible(muffled)
[18:01:10.892]                     }
[18:01:10.892]                     muffleCondition(cond, pattern = "^muffle")
[18:01:10.892]                   }
[18:01:10.892]                 }
[18:01:10.892]             }
[18:01:10.892]         }))
[18:01:10.892]     }, error = function(ex) {
[18:01:10.892]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:10.892]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:10.892]                 ...future.rng), started = ...future.startTime, 
[18:01:10.892]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:10.892]             version = "1.8"), class = "FutureResult")
[18:01:10.892]     }, finally = {
[18:01:10.892]         if (!identical(...future.workdir, getwd())) 
[18:01:10.892]             setwd(...future.workdir)
[18:01:10.892]         {
[18:01:10.892]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:10.892]                 ...future.oldOptions$nwarnings <- NULL
[18:01:10.892]             }
[18:01:10.892]             base::options(...future.oldOptions)
[18:01:10.892]             if (.Platform$OS.type == "windows") {
[18:01:10.892]                 old_names <- names(...future.oldEnvVars)
[18:01:10.892]                 envs <- base::Sys.getenv()
[18:01:10.892]                 names <- names(envs)
[18:01:10.892]                 common <- intersect(names, old_names)
[18:01:10.892]                 added <- setdiff(names, old_names)
[18:01:10.892]                 removed <- setdiff(old_names, names)
[18:01:10.892]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:10.892]                   envs[common]]
[18:01:10.892]                 NAMES <- toupper(changed)
[18:01:10.892]                 args <- list()
[18:01:10.892]                 for (kk in seq_along(NAMES)) {
[18:01:10.892]                   name <- changed[[kk]]
[18:01:10.892]                   NAME <- NAMES[[kk]]
[18:01:10.892]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:10.892]                     next
[18:01:10.892]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:10.892]                 }
[18:01:10.892]                 NAMES <- toupper(added)
[18:01:10.892]                 for (kk in seq_along(NAMES)) {
[18:01:10.892]                   name <- added[[kk]]
[18:01:10.892]                   NAME <- NAMES[[kk]]
[18:01:10.892]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:10.892]                     next
[18:01:10.892]                   args[[name]] <- ""
[18:01:10.892]                 }
[18:01:10.892]                 NAMES <- toupper(removed)
[18:01:10.892]                 for (kk in seq_along(NAMES)) {
[18:01:10.892]                   name <- removed[[kk]]
[18:01:10.892]                   NAME <- NAMES[[kk]]
[18:01:10.892]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:10.892]                     next
[18:01:10.892]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:10.892]                 }
[18:01:10.892]                 if (length(args) > 0) 
[18:01:10.892]                   base::do.call(base::Sys.setenv, args = args)
[18:01:10.892]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:10.892]             }
[18:01:10.892]             else {
[18:01:10.892]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:10.892]             }
[18:01:10.892]             {
[18:01:10.892]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:10.892]                   0L) {
[18:01:10.892]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:10.892]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:10.892]                   base::options(opts)
[18:01:10.892]                 }
[18:01:10.892]                 {
[18:01:10.892]                   {
[18:01:10.892]                     base::assign(".Random.seed", c(10403L, 6L, 
[18:01:10.892]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[18:01:10.892]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[18:01:10.892]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[18:01:10.892]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[18:01:10.892]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[18:01:10.892]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[18:01:10.892]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[18:01:10.892]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[18:01:10.892]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[18:01:10.892]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[18:01:10.892]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[18:01:10.892]                     -1512233174L, -1985955764L, -425390065L, 
[18:01:10.892]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[18:01:10.892]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[18:01:10.892]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[18:01:10.892]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[18:01:10.892]                     1818328109L, -1284085436L, -1981489558L, 
[18:01:10.892]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[18:01:10.892]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[18:01:10.892]                     -1718567047L, -793788661L, -1133789126L, 
[18:01:10.892]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[18:01:10.892]                     -1823521982L, -1345991523L, -1672661737L, 
[18:01:10.892]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[18:01:10.892]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[18:01:10.892]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[18:01:10.892]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[18:01:10.892]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[18:01:10.892]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[18:01:10.892]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[18:01:10.892]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[18:01:10.892]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[18:01:10.892]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[18:01:10.892]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[18:01:10.892]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[18:01:10.892]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[18:01:10.892]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[18:01:10.892]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[18:01:10.892]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[18:01:10.892]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[18:01:10.892]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[18:01:10.892]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[18:01:10.892]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[18:01:10.892]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[18:01:10.892]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[18:01:10.892]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[18:01:10.892]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[18:01:10.892]                     -1119334354L, -1521015416L, -2041922421L, 
[18:01:10.892]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[18:01:10.892]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[18:01:10.892]                     1232111981L, -1801753084L, -1608606422L, 
[18:01:10.892]                     -1172096363L, 1420874031L, -1210473418L, 
[18:01:10.892]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[18:01:10.892]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[18:01:10.892]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[18:01:10.892]                     679371266L, -591318819L, -104578089L, -172818754L, 
[18:01:10.892]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[18:01:10.892]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[18:01:10.892]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[18:01:10.892]                     -332493318L, -1978392251L, -1691039632L, 
[18:01:10.892]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[18:01:10.892]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[18:01:10.892]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[18:01:10.892]                     87560756L, -87565624L, 426345146L, -699970416L, 
[18:01:10.892]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[18:01:10.892]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[18:01:10.892]                     -1178330196L, -687617348L, -1701912078L, 
[18:01:10.892]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[18:01:10.892]                     -1345416048L, 1816730492L, -1570431212L, 
[18:01:10.892]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[18:01:10.892]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[18:01:10.892]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[18:01:10.892]                     -1493184262L, -1943836976L, -590788308L, 
[18:01:10.892]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[18:01:10.892]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[18:01:10.892]                     1274857340L, -1205842638L, -1938479504L, 
[18:01:10.892]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[18:01:10.892]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[18:01:10.892]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[18:01:10.892]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[18:01:10.892]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[18:01:10.892]                     -1460751252L, 1201879444L, -1459788718L, 
[18:01:10.892]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[18:01:10.892]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[18:01:10.892]                     -420945808L, -1997735900L, -1838404552L, 
[18:01:10.892]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[18:01:10.892]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[18:01:10.892]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[18:01:10.892]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[18:01:10.892]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[18:01:10.892]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[18:01:10.892]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[18:01:10.892]                     942193650L, 751741680L, 689743428L, -18455976L, 
[18:01:10.892]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[18:01:10.892]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[18:01:10.892]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[18:01:10.892]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[18:01:10.892]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[18:01:10.892]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[18:01:10.892]                     -1357570110L, 1896595240L, -2066952276L, 
[18:01:10.892]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[18:01:10.892]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[18:01:10.892]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[18:01:10.892]                     769655120L, 236357794L, 181393736L, -13334772L, 
[18:01:10.892]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[18:01:10.892]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[18:01:10.892]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[18:01:10.892]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[18:01:10.892]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[18:01:10.892]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[18:01:10.892]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[18:01:10.892]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[18:01:10.892]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[18:01:10.892]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[18:01:10.892]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[18:01:10.892]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[18:01:10.892]                     -1365842884L, -438961294L, -1851472272L, 
[18:01:10.892]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[18:01:10.892]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[18:01:10.892]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[18:01:10.892]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[18:01:10.892]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[18:01:10.892]                     -594809770L, -2146766621L, -2013964635L, 
[18:01:10.892]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[18:01:10.892]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[18:01:10.892]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[18:01:10.892]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[18:01:10.892]                     -1426021878L, -1285634264L, 1507547537L, 
[18:01:10.892]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[18:01:10.892]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[18:01:10.892]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[18:01:10.892]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[18:01:10.892]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[18:01:10.892]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[18:01:10.892]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[18:01:10.892]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[18:01:10.892]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[18:01:10.892]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[18:01:10.892]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[18:01:10.892]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[18:01:10.892]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[18:01:10.892]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[18:01:10.892]                     -1604604761L, 1421229008L, -1268333714L, 
[18:01:10.892]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[18:01:10.892]                     -2070476623L, -2099222749L, 1141171236L, 
[18:01:10.892]                     -146426158L, -1797385433L, -1129376399L, 
[18:01:10.892]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[18:01:10.892]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[18:01:10.892]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[18:01:10.892]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[18:01:10.892]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[18:01:10.892]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[18:01:10.892]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[18:01:10.892]                     -1092079724L, -1765622238L, -1882554057L, 
[18:01:10.892]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[18:01:10.892]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[18:01:10.892]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[18:01:10.892]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[18:01:10.892]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[18:01:10.892]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[18:01:10.892]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[18:01:10.892]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[18:01:10.892]                     865377681L, -1127426242L), envir = base::globalenv(), 
[18:01:10.892]                       inherits = FALSE)
[18:01:10.892]                     NULL
[18:01:10.892]                   }
[18:01:10.892]                   options(future.plan = NULL)
[18:01:10.892]                   if (is.na(NA_character_)) 
[18:01:10.892]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:10.892]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:10.892]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:10.892]                     .init = FALSE)
[18:01:10.892]                 }
[18:01:10.892]             }
[18:01:10.892]         }
[18:01:10.892]     })
[18:01:10.892]     if (TRUE) {
[18:01:10.892]         base::sink(type = "output", split = FALSE)
[18:01:10.892]         if (TRUE) {
[18:01:10.892]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:10.892]         }
[18:01:10.892]         else {
[18:01:10.892]             ...future.result["stdout"] <- base::list(NULL)
[18:01:10.892]         }
[18:01:10.892]         base::close(...future.stdout)
[18:01:10.892]         ...future.stdout <- NULL
[18:01:10.892]     }
[18:01:10.892]     ...future.result$conditions <- ...future.conditions
[18:01:10.892]     ...future.result$finished <- base::Sys.time()
[18:01:10.892]     ...future.result
[18:01:10.892] }
[18:01:10.897] assign_globals() ...
[18:01:10.897] List of 5
[18:01:10.897]  $ ...future.FUN            :function (...)  
[18:01:10.897]  $ future.call.arguments    : list()
[18:01:10.897]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:10.897]  $ ...future.elements_ii    :List of 5
[18:01:10.897]   ..$ : int 0
[18:01:10.897]   ..$ : int 0
[18:01:10.897]   ..$ : int 0
[18:01:10.897]   ..$ : int 0
[18:01:10.897]   ..$ : int 0
[18:01:10.897]  $ ...future.seeds_ii       :List of 5
[18:01:10.897]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[18:01:10.897]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[18:01:10.897]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[18:01:10.897]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[18:01:10.897]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[18:01:10.897]  $ ...future.globals.maxSize: NULL
[18:01:10.897]  - attr(*, "where")=List of 5
[18:01:10.897]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[18:01:10.897]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[18:01:10.897]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[18:01:10.897]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[18:01:10.897]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[18:01:10.897]  - attr(*, "resolved")= logi FALSE
[18:01:10.897]  - attr(*, "total_size")= num 616
[18:01:10.897]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:10.897]  - attr(*, "already-done")= logi TRUE
[18:01:10.915] - reassign environment for ‘...future.FUN’
[18:01:10.916] - copied ‘...future.FUN’ to environment
[18:01:10.916] - copied ‘future.call.arguments’ to environment
[18:01:10.916] - copied ‘...future.elements_ii’ to environment
[18:01:10.916] - copied ‘...future.seeds_ii’ to environment
[18:01:10.916] - copied ‘...future.globals.maxSize’ to environment
[18:01:10.917] assign_globals() ... done
[18:01:10.917] plan(): Setting new future strategy stack:
[18:01:10.917] List of future strategies:
[18:01:10.917] 1. sequential:
[18:01:10.917]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:10.917]    - tweaked: FALSE
[18:01:10.917]    - call: NULL
[18:01:10.918] plan(): nbrOfWorkers() = 1
[18:01:10.920] plan(): Setting new future strategy stack:
[18:01:10.920] List of future strategies:
[18:01:10.920] 1. sequential:
[18:01:10.920]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:10.920]    - tweaked: FALSE
[18:01:10.920]    - call: plan(strategy)
[18:01:10.921] plan(): nbrOfWorkers() = 1
[18:01:10.921] SequentialFuture started (and completed)
[18:01:10.921] - Launch lazy future ... done
[18:01:10.922] run() for ‘SequentialFuture’ ... done
[18:01:10.922] Created future:
[18:01:10.922] SequentialFuture:
[18:01:10.922] Label: ‘future_replicate-1’
[18:01:10.922] Expression:
[18:01:10.922] {
[18:01:10.922]     do.call(function(...) {
[18:01:10.922]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:10.922]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:10.922]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:10.922]             on.exit(options(oopts), add = TRUE)
[18:01:10.922]         }
[18:01:10.922]         {
[18:01:10.922]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:10.922]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:10.922]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:10.922]                   envir = globalenv(), inherits = FALSE)
[18:01:10.922]                 ...future.FUN(...future.X_jj, ...)
[18:01:10.922]             })
[18:01:10.922]         }
[18:01:10.922]     }, args = future.call.arguments)
[18:01:10.922] }
[18:01:10.922] Lazy evaluation: FALSE
[18:01:10.922] Asynchronous evaluation: FALSE
[18:01:10.922] Local evaluation: TRUE
[18:01:10.922] Environment: R_GlobalEnv
[18:01:10.922] Capture standard output: TRUE
[18:01:10.922] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:10.922] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:10.922] Packages: <none>
[18:01:10.922] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:10.922] Resolved: TRUE
[18:01:10.922] Value: 280 bytes of class ‘list’
[18:01:10.922] Early signaling: FALSE
[18:01:10.922] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:10.922] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:01:10.924] Chunk #1 of 1 ... DONE
[18:01:10.924] Launching 1 futures (chunks) ... DONE
[18:01:10.925] Resolving 1 futures (chunks) ...
[18:01:10.925] resolve() on list ...
[18:01:10.925]  recursive: 0
[18:01:10.925]  length: 1
[18:01:10.925] 
[18:01:10.926] resolved() for ‘SequentialFuture’ ...
[18:01:10.926] - state: ‘finished’
[18:01:10.926] - run: TRUE
[18:01:10.926] - result: ‘FutureResult’
[18:01:10.926] resolved() for ‘SequentialFuture’ ... done
[18:01:10.927] Future #1
[18:01:10.927] signalConditionsASAP(SequentialFuture, pos=1) ...
[18:01:10.927] - nx: 1
[18:01:10.927] - relay: TRUE
[18:01:10.927] - stdout: TRUE
[18:01:10.928] - signal: TRUE
[18:01:10.928] - resignal: FALSE
[18:01:10.928] - force: TRUE
[18:01:10.928] - relayed: [n=1] FALSE
[18:01:10.928] - queued futures: [n=1] FALSE
[18:01:10.928]  - until=1
[18:01:10.929]  - relaying element #1
[18:01:10.929] - relayed: [n=1] TRUE
[18:01:10.929] - queued futures: [n=1] TRUE
[18:01:10.929] signalConditionsASAP(SequentialFuture, pos=1) ... done
[18:01:10.930]  length: 0 (resolved future 1)
[18:01:10.930] Relaying remaining futures
[18:01:10.930] signalConditionsASAP(NULL, pos=0) ...
[18:01:10.930] - nx: 1
[18:01:10.930] - relay: TRUE
[18:01:10.931] - stdout: TRUE
[18:01:10.931] - signal: TRUE
[18:01:10.931] - resignal: FALSE
[18:01:10.931] - force: TRUE
[18:01:10.931] - relayed: [n=1] TRUE
[18:01:10.931] - queued futures: [n=1] TRUE
 - flush all
[18:01:10.932] - relayed: [n=1] TRUE
[18:01:10.932] - queued futures: [n=1] TRUE
[18:01:10.932] signalConditionsASAP(NULL, pos=0) ... done
[18:01:10.932] resolve() on list ... DONE
[18:01:10.933]  - Number of value chunks collected: 1
[18:01:10.933] Resolving 1 futures (chunks) ... DONE
[18:01:10.933] Reducing values from 1 chunks ...
[18:01:10.933]  - Number of values collected after concatenation: 5
[18:01:10.933]  - Number of values expected: 5
[18:01:10.934] Reducing values from 1 chunks ... DONE
[18:01:10.934] future_lapply() ... DONE
- example(replicate) ...
[18:01:10.935] future_lapply() ...
[18:01:10.936] Generating random seeds ...
[18:01:10.936] Generating random seed streams for 5 elements ...
[18:01:10.936] Generating random seed streams for 5 elements ... DONE
[18:01:10.936] Generating random seeds ... DONE
[18:01:10.937] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[18:01:10.938] Number of chunks: 1
[18:01:10.938] getGlobalsAndPackagesXApply() ...
[18:01:10.938]  - future.globals: TRUE
[18:01:10.938] getGlobalsAndPackages() ...
[18:01:10.938] Searching for globals...
[18:01:10.942] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[18:01:10.943] Searching for globals ... DONE
[18:01:10.943] Resolving globals: FALSE
[18:01:10.944] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[18:01:10.945] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[18:01:10.945] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[18:01:10.945] 
[18:01:10.946] getGlobalsAndPackages() ... DONE
[18:01:10.946]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[18:01:10.946]  - needed namespaces: [n=0] 
[18:01:10.946] Finding globals ... DONE
[18:01:10.946]  - use_args: TRUE
[18:01:10.947]  - Getting '...' globals ...
[18:01:10.947] resolve() on list ...
[18:01:10.947]  recursive: 0
[18:01:10.948]  length: 1
[18:01:10.948]  elements: ‘...’
[18:01:10.948]  length: 0 (resolved future 1)
[18:01:10.948] resolve() on list ... DONE
[18:01:10.949]    - '...' content: [n=0] 
[18:01:10.949] List of 1
[18:01:10.949]  $ ...: list()
[18:01:10.949]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:10.949]  - attr(*, "where")=List of 1
[18:01:10.949]   ..$ ...:<environment: 0x635eb47894c8> 
[18:01:10.949]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:10.949]  - attr(*, "resolved")= logi TRUE
[18:01:10.949]  - attr(*, "total_size")= num NA
[18:01:10.954]  - Getting '...' globals ... DONE
[18:01:10.954] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[18:01:10.955] List of 4
[18:01:10.955]  $ ...future.FUN:function (...)  
[18:01:10.955]  $ foo          :function (x = 1, y = 2)  
[18:01:10.955]  $ x            : num 3
[18:01:10.955]  $ ...          : list()
[18:01:10.955]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:10.955]  - attr(*, "where")=List of 4
[18:01:10.955]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[18:01:10.955]   ..$ foo          :<environment: R_EmptyEnv> 
[18:01:10.955]   ..$ x            :<environment: R_EmptyEnv> 
[18:01:10.955]   ..$ ...          :<environment: 0x635eb47894c8> 
[18:01:10.955]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:10.955]  - attr(*, "resolved")= logi FALSE
[18:01:10.955]  - attr(*, "total_size")= num 2200
[18:01:10.962] Packages to be attached in all futures: [n=0] 
[18:01:10.962] getGlobalsAndPackagesXApply() ... DONE
[18:01:10.963] Number of futures (= number of chunks): 1
[18:01:10.963] Launching 1 futures (chunks) ...
[18:01:10.963] Chunk #1 of 1 ...
[18:01:10.963]  - Finding globals in 'X' for chunk #1 ...
[18:01:10.966] getGlobalsAndPackages() ...
[18:01:10.966] Searching for globals...
[18:01:10.967] 
[18:01:10.967] Searching for globals ... DONE
[18:01:10.967] - globals: [0] <none>
[18:01:10.967] getGlobalsAndPackages() ... DONE
[18:01:10.967]    + additional globals found: [n=0] 
[18:01:10.968]    + additional namespaces needed: [n=0] 
[18:01:10.968]  - Finding globals in 'X' for chunk #1 ... DONE
[18:01:10.968]  - seeds: [5] <seeds>
[18:01:10.968]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:10.969] getGlobalsAndPackages() ...
[18:01:10.969] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:10.969] Resolving globals: FALSE
[18:01:10.969] Tweak future expression to call with '...' arguments ...
[18:01:10.969] {
[18:01:10.969]     do.call(function(...) {
[18:01:10.969]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:10.969]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:10.969]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:10.969]             on.exit(options(oopts), add = TRUE)
[18:01:10.969]         }
[18:01:10.969]         {
[18:01:10.969]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:10.969]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:10.969]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:10.969]                   envir = globalenv(), inherits = FALSE)
[18:01:10.969]                 ...future.FUN(...future.X_jj, ...)
[18:01:10.969]             })
[18:01:10.969]         }
[18:01:10.969]     }, args = future.call.arguments)
[18:01:10.969] }
[18:01:10.970] Tweak future expression to call with '...' arguments ... DONE
[18:01:10.971] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:10.971] 
[18:01:10.971] getGlobalsAndPackages() ... DONE
[18:01:10.972] run() for ‘Future’ ...
[18:01:10.972] - state: ‘created’
[18:01:10.972] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:01:10.973] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:01:10.973] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:01:10.973]   - Field: ‘label’
[18:01:10.973]   - Field: ‘local’
[18:01:10.974]   - Field: ‘owner’
[18:01:10.974]   - Field: ‘envir’
[18:01:10.974]   - Field: ‘packages’
[18:01:10.974]   - Field: ‘gc’
[18:01:10.974]   - Field: ‘conditions’
[18:01:10.974]   - Field: ‘expr’
[18:01:10.975]   - Field: ‘uuid’
[18:01:10.975]   - Field: ‘seed’
[18:01:10.975]   - Field: ‘version’
[18:01:10.975]   - Field: ‘result’
[18:01:10.975]   - Field: ‘asynchronous’
[18:01:10.976]   - Field: ‘calls’
[18:01:10.976]   - Field: ‘globals’
[18:01:10.976]   - Field: ‘stdout’
[18:01:10.976]   - Field: ‘earlySignal’
[18:01:10.976]   - Field: ‘lazy’
[18:01:10.977]   - Field: ‘state’
[18:01:10.977] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:01:10.977] - Launch lazy future ...
[18:01:10.977] Packages needed by the future expression (n = 0): <none>
[18:01:10.977] Packages needed by future strategies (n = 0): <none>
[18:01:10.978] {
[18:01:10.978]     {
[18:01:10.978]         {
[18:01:10.978]             ...future.startTime <- base::Sys.time()
[18:01:10.978]             {
[18:01:10.978]                 {
[18:01:10.978]                   {
[18:01:10.978]                     base::local({
[18:01:10.978]                       has_future <- base::requireNamespace("future", 
[18:01:10.978]                         quietly = TRUE)
[18:01:10.978]                       if (has_future) {
[18:01:10.978]                         ns <- base::getNamespace("future")
[18:01:10.978]                         version <- ns[[".package"]][["version"]]
[18:01:10.978]                         if (is.null(version)) 
[18:01:10.978]                           version <- utils::packageVersion("future")
[18:01:10.978]                       }
[18:01:10.978]                       else {
[18:01:10.978]                         version <- NULL
[18:01:10.978]                       }
[18:01:10.978]                       if (!has_future || version < "1.8.0") {
[18:01:10.978]                         info <- base::c(r_version = base::gsub("R version ", 
[18:01:10.978]                           "", base::R.version$version.string), 
[18:01:10.978]                           platform = base::sprintf("%s (%s-bit)", 
[18:01:10.978]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:10.978]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:10.978]                             "release", "version")], collapse = " "), 
[18:01:10.978]                           hostname = base::Sys.info()[["nodename"]])
[18:01:10.978]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:01:10.978]                           info)
[18:01:10.978]                         info <- base::paste(info, collapse = "; ")
[18:01:10.978]                         if (!has_future) {
[18:01:10.978]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:10.978]                             info)
[18:01:10.978]                         }
[18:01:10.978]                         else {
[18:01:10.978]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:10.978]                             info, version)
[18:01:10.978]                         }
[18:01:10.978]                         base::stop(msg)
[18:01:10.978]                       }
[18:01:10.978]                     })
[18:01:10.978]                   }
[18:01:10.978]                   ...future.strategy.old <- future::plan("list")
[18:01:10.978]                   options(future.plan = NULL)
[18:01:10.978]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:10.978]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:10.978]                 }
[18:01:10.978]                 ...future.workdir <- getwd()
[18:01:10.978]             }
[18:01:10.978]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:10.978]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:10.978]         }
[18:01:10.978]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:10.978]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:01:10.978]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:10.978]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:10.978]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:10.978]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:10.978]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:10.978]             base::names(...future.oldOptions))
[18:01:10.978]     }
[18:01:10.978]     if (FALSE) {
[18:01:10.978]     }
[18:01:10.978]     else {
[18:01:10.978]         if (TRUE) {
[18:01:10.978]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:10.978]                 open = "w")
[18:01:10.978]         }
[18:01:10.978]         else {
[18:01:10.978]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:10.978]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:10.978]         }
[18:01:10.978]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:10.978]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:10.978]             base::sink(type = "output", split = FALSE)
[18:01:10.978]             base::close(...future.stdout)
[18:01:10.978]         }, add = TRUE)
[18:01:10.978]     }
[18:01:10.978]     ...future.frame <- base::sys.nframe()
[18:01:10.978]     ...future.conditions <- base::list()
[18:01:10.978]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:10.978]     if (FALSE) {
[18:01:10.978]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:10.978]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:10.978]     }
[18:01:10.978]     ...future.result <- base::tryCatch({
[18:01:10.978]         base::withCallingHandlers({
[18:01:10.978]             ...future.value <- base::withVisible(base::local({
[18:01:10.978]                 do.call(function(...) {
[18:01:10.978]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:10.978]                   if (!identical(...future.globals.maxSize.org, 
[18:01:10.978]                     ...future.globals.maxSize)) {
[18:01:10.978]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:10.978]                     on.exit(options(oopts), add = TRUE)
[18:01:10.978]                   }
[18:01:10.978]                   {
[18:01:10.978]                     lapply(seq_along(...future.elements_ii), 
[18:01:10.978]                       FUN = function(jj) {
[18:01:10.978]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:10.978]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:10.978]                           envir = globalenv(), inherits = FALSE)
[18:01:10.978]                         ...future.FUN(...future.X_jj, ...)
[18:01:10.978]                       })
[18:01:10.978]                   }
[18:01:10.978]                 }, args = future.call.arguments)
[18:01:10.978]             }))
[18:01:10.978]             future::FutureResult(value = ...future.value$value, 
[18:01:10.978]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:10.978]                   ...future.rng), globalenv = if (FALSE) 
[18:01:10.978]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:10.978]                     ...future.globalenv.names))
[18:01:10.978]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:10.978]         }, condition = base::local({
[18:01:10.978]             c <- base::c
[18:01:10.978]             inherits <- base::inherits
[18:01:10.978]             invokeRestart <- base::invokeRestart
[18:01:10.978]             length <- base::length
[18:01:10.978]             list <- base::list
[18:01:10.978]             seq.int <- base::seq.int
[18:01:10.978]             signalCondition <- base::signalCondition
[18:01:10.978]             sys.calls <- base::sys.calls
[18:01:10.978]             `[[` <- base::`[[`
[18:01:10.978]             `+` <- base::`+`
[18:01:10.978]             `<<-` <- base::`<<-`
[18:01:10.978]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:10.978]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:10.978]                   3L)]
[18:01:10.978]             }
[18:01:10.978]             function(cond) {
[18:01:10.978]                 is_error <- inherits(cond, "error")
[18:01:10.978]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:10.978]                   NULL)
[18:01:10.978]                 if (is_error) {
[18:01:10.978]                   sessionInformation <- function() {
[18:01:10.978]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:10.978]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:10.978]                       search = base::search(), system = base::Sys.info())
[18:01:10.978]                   }
[18:01:10.978]                   ...future.conditions[[length(...future.conditions) + 
[18:01:10.978]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:10.978]                     cond$call), session = sessionInformation(), 
[18:01:10.978]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:10.978]                   signalCondition(cond)
[18:01:10.978]                 }
[18:01:10.978]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:10.978]                 "immediateCondition"))) {
[18:01:10.978]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:10.978]                   ...future.conditions[[length(...future.conditions) + 
[18:01:10.978]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:10.978]                   if (TRUE && !signal) {
[18:01:10.978]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:10.978]                     {
[18:01:10.978]                       inherits <- base::inherits
[18:01:10.978]                       invokeRestart <- base::invokeRestart
[18:01:10.978]                       is.null <- base::is.null
[18:01:10.978]                       muffled <- FALSE
[18:01:10.978]                       if (inherits(cond, "message")) {
[18:01:10.978]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:10.978]                         if (muffled) 
[18:01:10.978]                           invokeRestart("muffleMessage")
[18:01:10.978]                       }
[18:01:10.978]                       else if (inherits(cond, "warning")) {
[18:01:10.978]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:10.978]                         if (muffled) 
[18:01:10.978]                           invokeRestart("muffleWarning")
[18:01:10.978]                       }
[18:01:10.978]                       else if (inherits(cond, "condition")) {
[18:01:10.978]                         if (!is.null(pattern)) {
[18:01:10.978]                           computeRestarts <- base::computeRestarts
[18:01:10.978]                           grepl <- base::grepl
[18:01:10.978]                           restarts <- computeRestarts(cond)
[18:01:10.978]                           for (restart in restarts) {
[18:01:10.978]                             name <- restart$name
[18:01:10.978]                             if (is.null(name)) 
[18:01:10.978]                               next
[18:01:10.978]                             if (!grepl(pattern, name)) 
[18:01:10.978]                               next
[18:01:10.978]                             invokeRestart(restart)
[18:01:10.978]                             muffled <- TRUE
[18:01:10.978]                             break
[18:01:10.978]                           }
[18:01:10.978]                         }
[18:01:10.978]                       }
[18:01:10.978]                       invisible(muffled)
[18:01:10.978]                     }
[18:01:10.978]                     muffleCondition(cond, pattern = "^muffle")
[18:01:10.978]                   }
[18:01:10.978]                 }
[18:01:10.978]                 else {
[18:01:10.978]                   if (TRUE) {
[18:01:10.978]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:10.978]                     {
[18:01:10.978]                       inherits <- base::inherits
[18:01:10.978]                       invokeRestart <- base::invokeRestart
[18:01:10.978]                       is.null <- base::is.null
[18:01:10.978]                       muffled <- FALSE
[18:01:10.978]                       if (inherits(cond, "message")) {
[18:01:10.978]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:10.978]                         if (muffled) 
[18:01:10.978]                           invokeRestart("muffleMessage")
[18:01:10.978]                       }
[18:01:10.978]                       else if (inherits(cond, "warning")) {
[18:01:10.978]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:10.978]                         if (muffled) 
[18:01:10.978]                           invokeRestart("muffleWarning")
[18:01:10.978]                       }
[18:01:10.978]                       else if (inherits(cond, "condition")) {
[18:01:10.978]                         if (!is.null(pattern)) {
[18:01:10.978]                           computeRestarts <- base::computeRestarts
[18:01:10.978]                           grepl <- base::grepl
[18:01:10.978]                           restarts <- computeRestarts(cond)
[18:01:10.978]                           for (restart in restarts) {
[18:01:10.978]                             name <- restart$name
[18:01:10.978]                             if (is.null(name)) 
[18:01:10.978]                               next
[18:01:10.978]                             if (!grepl(pattern, name)) 
[18:01:10.978]                               next
[18:01:10.978]                             invokeRestart(restart)
[18:01:10.978]                             muffled <- TRUE
[18:01:10.978]                             break
[18:01:10.978]                           }
[18:01:10.978]                         }
[18:01:10.978]                       }
[18:01:10.978]                       invisible(muffled)
[18:01:10.978]                     }
[18:01:10.978]                     muffleCondition(cond, pattern = "^muffle")
[18:01:10.978]                   }
[18:01:10.978]                 }
[18:01:10.978]             }
[18:01:10.978]         }))
[18:01:10.978]     }, error = function(ex) {
[18:01:10.978]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:10.978]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:10.978]                 ...future.rng), started = ...future.startTime, 
[18:01:10.978]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:10.978]             version = "1.8"), class = "FutureResult")
[18:01:10.978]     }, finally = {
[18:01:10.978]         if (!identical(...future.workdir, getwd())) 
[18:01:10.978]             setwd(...future.workdir)
[18:01:10.978]         {
[18:01:10.978]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:10.978]                 ...future.oldOptions$nwarnings <- NULL
[18:01:10.978]             }
[18:01:10.978]             base::options(...future.oldOptions)
[18:01:10.978]             if (.Platform$OS.type == "windows") {
[18:01:10.978]                 old_names <- names(...future.oldEnvVars)
[18:01:10.978]                 envs <- base::Sys.getenv()
[18:01:10.978]                 names <- names(envs)
[18:01:10.978]                 common <- intersect(names, old_names)
[18:01:10.978]                 added <- setdiff(names, old_names)
[18:01:10.978]                 removed <- setdiff(old_names, names)
[18:01:10.978]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:10.978]                   envs[common]]
[18:01:10.978]                 NAMES <- toupper(changed)
[18:01:10.978]                 args <- list()
[18:01:10.978]                 for (kk in seq_along(NAMES)) {
[18:01:10.978]                   name <- changed[[kk]]
[18:01:10.978]                   NAME <- NAMES[[kk]]
[18:01:10.978]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:10.978]                     next
[18:01:10.978]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:10.978]                 }
[18:01:10.978]                 NAMES <- toupper(added)
[18:01:10.978]                 for (kk in seq_along(NAMES)) {
[18:01:10.978]                   name <- added[[kk]]
[18:01:10.978]                   NAME <- NAMES[[kk]]
[18:01:10.978]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:10.978]                     next
[18:01:10.978]                   args[[name]] <- ""
[18:01:10.978]                 }
[18:01:10.978]                 NAMES <- toupper(removed)
[18:01:10.978]                 for (kk in seq_along(NAMES)) {
[18:01:10.978]                   name <- removed[[kk]]
[18:01:10.978]                   NAME <- NAMES[[kk]]
[18:01:10.978]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:10.978]                     next
[18:01:10.978]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:10.978]                 }
[18:01:10.978]                 if (length(args) > 0) 
[18:01:10.978]                   base::do.call(base::Sys.setenv, args = args)
[18:01:10.978]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:10.978]             }
[18:01:10.978]             else {
[18:01:10.978]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:10.978]             }
[18:01:10.978]             {
[18:01:10.978]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:10.978]                   0L) {
[18:01:10.978]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:10.978]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:10.978]                   base::options(opts)
[18:01:10.978]                 }
[18:01:10.978]                 {
[18:01:10.978]                   {
[18:01:10.978]                     base::assign(".Random.seed", c(10403L, 8L, 
[18:01:10.978]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[18:01:10.978]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[18:01:10.978]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[18:01:10.978]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[18:01:10.978]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[18:01:10.978]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[18:01:10.978]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[18:01:10.978]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[18:01:10.978]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[18:01:10.978]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[18:01:10.978]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[18:01:10.978]                     -1512233174L, -1985955764L, -425390065L, 
[18:01:10.978]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[18:01:10.978]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[18:01:10.978]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[18:01:10.978]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[18:01:10.978]                     1818328109L, -1284085436L, -1981489558L, 
[18:01:10.978]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[18:01:10.978]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[18:01:10.978]                     -1718567047L, -793788661L, -1133789126L, 
[18:01:10.978]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[18:01:10.978]                     -1823521982L, -1345991523L, -1672661737L, 
[18:01:10.978]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[18:01:10.978]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[18:01:10.978]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[18:01:10.978]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[18:01:10.978]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[18:01:10.978]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[18:01:10.978]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[18:01:10.978]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[18:01:10.978]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[18:01:10.978]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[18:01:10.978]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[18:01:10.978]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[18:01:10.978]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[18:01:10.978]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[18:01:10.978]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[18:01:10.978]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[18:01:10.978]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[18:01:10.978]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[18:01:10.978]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[18:01:10.978]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[18:01:10.978]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[18:01:10.978]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[18:01:10.978]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[18:01:10.978]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[18:01:10.978]                     -1119334354L, -1521015416L, -2041922421L, 
[18:01:10.978]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[18:01:10.978]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[18:01:10.978]                     1232111981L, -1801753084L, -1608606422L, 
[18:01:10.978]                     -1172096363L, 1420874031L, -1210473418L, 
[18:01:10.978]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[18:01:10.978]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[18:01:10.978]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[18:01:10.978]                     679371266L, -591318819L, -104578089L, -172818754L, 
[18:01:10.978]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[18:01:10.978]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[18:01:10.978]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[18:01:10.978]                     -332493318L, -1978392251L, -1691039632L, 
[18:01:10.978]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[18:01:10.978]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[18:01:10.978]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[18:01:10.978]                     87560756L, -87565624L, 426345146L, -699970416L, 
[18:01:10.978]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[18:01:10.978]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[18:01:10.978]                     -1178330196L, -687617348L, -1701912078L, 
[18:01:10.978]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[18:01:10.978]                     -1345416048L, 1816730492L, -1570431212L, 
[18:01:10.978]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[18:01:10.978]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[18:01:10.978]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[18:01:10.978]                     -1493184262L, -1943836976L, -590788308L, 
[18:01:10.978]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[18:01:10.978]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[18:01:10.978]                     1274857340L, -1205842638L, -1938479504L, 
[18:01:10.978]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[18:01:10.978]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[18:01:10.978]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[18:01:10.978]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[18:01:10.978]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[18:01:10.978]                     -1460751252L, 1201879444L, -1459788718L, 
[18:01:10.978]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[18:01:10.978]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[18:01:10.978]                     -420945808L, -1997735900L, -1838404552L, 
[18:01:10.978]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[18:01:10.978]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[18:01:10.978]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[18:01:10.978]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[18:01:10.978]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[18:01:10.978]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[18:01:10.978]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[18:01:10.978]                     942193650L, 751741680L, 689743428L, -18455976L, 
[18:01:10.978]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[18:01:10.978]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[18:01:10.978]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[18:01:10.978]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[18:01:10.978]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[18:01:10.978]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[18:01:10.978]                     -1357570110L, 1896595240L, -2066952276L, 
[18:01:10.978]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[18:01:10.978]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[18:01:10.978]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[18:01:10.978]                     769655120L, 236357794L, 181393736L, -13334772L, 
[18:01:10.978]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[18:01:10.978]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[18:01:10.978]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[18:01:10.978]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[18:01:10.978]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[18:01:10.978]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[18:01:10.978]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[18:01:10.978]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[18:01:10.978]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[18:01:10.978]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[18:01:10.978]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[18:01:10.978]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[18:01:10.978]                     -1365842884L, -438961294L, -1851472272L, 
[18:01:10.978]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[18:01:10.978]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[18:01:10.978]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[18:01:10.978]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[18:01:10.978]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[18:01:10.978]                     -594809770L, -2146766621L, -2013964635L, 
[18:01:10.978]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[18:01:10.978]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[18:01:10.978]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[18:01:10.978]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[18:01:10.978]                     -1426021878L, -1285634264L, 1507547537L, 
[18:01:10.978]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[18:01:10.978]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[18:01:10.978]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[18:01:10.978]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[18:01:10.978]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[18:01:10.978]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[18:01:10.978]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[18:01:10.978]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[18:01:10.978]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[18:01:10.978]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[18:01:10.978]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[18:01:10.978]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[18:01:10.978]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[18:01:10.978]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[18:01:10.978]                     -1604604761L, 1421229008L, -1268333714L, 
[18:01:10.978]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[18:01:10.978]                     -2070476623L, -2099222749L, 1141171236L, 
[18:01:10.978]                     -146426158L, -1797385433L, -1129376399L, 
[18:01:10.978]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[18:01:10.978]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[18:01:10.978]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[18:01:10.978]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[18:01:10.978]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[18:01:10.978]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[18:01:10.978]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[18:01:10.978]                     -1092079724L, -1765622238L, -1882554057L, 
[18:01:10.978]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[18:01:10.978]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[18:01:10.978]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[18:01:10.978]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[18:01:10.978]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[18:01:10.978]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[18:01:10.978]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[18:01:10.978]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[18:01:10.978]                     865377681L, -1127426242L), envir = base::globalenv(), 
[18:01:10.978]                       inherits = FALSE)
[18:01:10.978]                     NULL
[18:01:10.978]                   }
[18:01:10.978]                   options(future.plan = NULL)
[18:01:10.978]                   if (is.na(NA_character_)) 
[18:01:10.978]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:10.978]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:10.978]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:10.978]                     .init = FALSE)
[18:01:10.978]                 }
[18:01:10.978]             }
[18:01:10.978]         }
[18:01:10.978]     })
[18:01:10.978]     if (TRUE) {
[18:01:10.978]         base::sink(type = "output", split = FALSE)
[18:01:10.978]         if (TRUE) {
[18:01:10.978]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:10.978]         }
[18:01:10.978]         else {
[18:01:10.978]             ...future.result["stdout"] <- base::list(NULL)
[18:01:10.978]         }
[18:01:10.978]         base::close(...future.stdout)
[18:01:10.978]         ...future.stdout <- NULL
[18:01:10.978]     }
[18:01:10.978]     ...future.result$conditions <- ...future.conditions
[18:01:10.978]     ...future.result$finished <- base::Sys.time()
[18:01:10.978]     ...future.result
[18:01:10.978] }
[18:01:10.983] assign_globals() ...
[18:01:10.983] List of 7
[18:01:10.983]  $ ...future.FUN            :function (...)  
[18:01:10.983]  $ foo                      :function (x = 1, y = 2)  
[18:01:10.983]  $ x                        : num 3
[18:01:10.983]  $ future.call.arguments    : list()
[18:01:10.983]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:10.983]  $ ...future.elements_ii    :List of 5
[18:01:10.983]   ..$ : int 0
[18:01:10.983]   ..$ : int 0
[18:01:10.983]   ..$ : int 0
[18:01:10.983]   ..$ : int 0
[18:01:10.983]   ..$ : int 0
[18:01:10.983]  $ ...future.seeds_ii       :List of 5
[18:01:10.983]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[18:01:10.983]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[18:01:10.983]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[18:01:10.983]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[18:01:10.983]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[18:01:10.983]  $ ...future.globals.maxSize: NULL
[18:01:10.983]  - attr(*, "where")=List of 7
[18:01:10.983]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[18:01:10.983]   ..$ foo                      :<environment: R_EmptyEnv> 
[18:01:10.983]   ..$ x                        :<environment: R_EmptyEnv> 
[18:01:10.983]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[18:01:10.983]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[18:01:10.983]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[18:01:10.983]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[18:01:10.983]  - attr(*, "resolved")= logi FALSE
[18:01:10.983]  - attr(*, "total_size")= num 2200
[18:01:10.983]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:10.983]  - attr(*, "already-done")= logi TRUE
[18:01:11.000] - reassign environment for ‘...future.FUN’
[18:01:11.000] - copied ‘...future.FUN’ to environment
[18:01:11.001] - reassign environment for ‘foo’
[18:01:11.001] - copied ‘foo’ to environment
[18:01:11.001] - copied ‘x’ to environment
[18:01:11.001] - copied ‘future.call.arguments’ to environment
[18:01:11.001] - copied ‘...future.elements_ii’ to environment
[18:01:11.002] - copied ‘...future.seeds_ii’ to environment
[18:01:11.002] - copied ‘...future.globals.maxSize’ to environment
[18:01:11.002] assign_globals() ... done
[18:01:11.002] plan(): Setting new future strategy stack:
[18:01:11.003] List of future strategies:
[18:01:11.003] 1. sequential:
[18:01:11.003]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:11.003]    - tweaked: FALSE
[18:01:11.003]    - call: NULL
[18:01:11.004] plan(): nbrOfWorkers() = 1
[18:01:11.006] plan(): Setting new future strategy stack:
[18:01:11.006] List of future strategies:
[18:01:11.006] 1. sequential:
[18:01:11.006]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:11.006]    - tweaked: FALSE
[18:01:11.006]    - call: plan(strategy)
[18:01:11.007] plan(): nbrOfWorkers() = 1
[18:01:11.007] SequentialFuture started (and completed)
[18:01:11.007] - Launch lazy future ... done
[18:01:11.008] run() for ‘SequentialFuture’ ... done
[18:01:11.008] Created future:
[18:01:11.008] SequentialFuture:
[18:01:11.008] Label: ‘future_replicate-1’
[18:01:11.008] Expression:
[18:01:11.008] {
[18:01:11.008]     do.call(function(...) {
[18:01:11.008]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.008]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:11.008]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.008]             on.exit(options(oopts), add = TRUE)
[18:01:11.008]         }
[18:01:11.008]         {
[18:01:11.008]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:11.008]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.008]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.008]                   envir = globalenv(), inherits = FALSE)
[18:01:11.008]                 ...future.FUN(...future.X_jj, ...)
[18:01:11.008]             })
[18:01:11.008]         }
[18:01:11.008]     }, args = future.call.arguments)
[18:01:11.008] }
[18:01:11.008] Lazy evaluation: FALSE
[18:01:11.008] Asynchronous evaluation: FALSE
[18:01:11.008] Local evaluation: TRUE
[18:01:11.008] Environment: 0x635eb478ac68
[18:01:11.008] Capture standard output: TRUE
[18:01:11.008] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:11.008] Globals: 7 objects totaling 2.81 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, ...)
[18:01:11.008] Packages: <none>
[18:01:11.008] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:11.008] Resolved: TRUE
[18:01:11.008] Value: 320 bytes of class ‘list’
[18:01:11.008] Early signaling: FALSE
[18:01:11.008] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:11.008] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:01:11.010] Chunk #1 of 1 ... DONE
[18:01:11.011] Launching 1 futures (chunks) ... DONE
[18:01:11.011] Resolving 1 futures (chunks) ...
[18:01:11.011] resolve() on list ...
[18:01:11.011]  recursive: 0
[18:01:11.011]  length: 1
[18:01:11.012] 
[18:01:11.012] resolved() for ‘SequentialFuture’ ...
[18:01:11.012] - state: ‘finished’
[18:01:11.012] - run: TRUE
[18:01:11.012] - result: ‘FutureResult’
[18:01:11.013] resolved() for ‘SequentialFuture’ ... done
[18:01:11.013] Future #1
[18:01:11.013] signalConditionsASAP(SequentialFuture, pos=1) ...
[18:01:11.013] - nx: 1
[18:01:11.013] - relay: TRUE
[18:01:11.014] - stdout: TRUE
[18:01:11.014] - signal: TRUE
[18:01:11.014] - resignal: FALSE
[18:01:11.014] - force: TRUE
[18:01:11.014] - relayed: [n=1] FALSE
[18:01:11.015] - queued futures: [n=1] FALSE
[18:01:11.015]  - until=1
[18:01:11.015]  - relaying element #1
[18:01:11.015] - relayed: [n=1] TRUE
[18:01:11.015] - queued futures: [n=1] TRUE
[18:01:11.016] signalConditionsASAP(SequentialFuture, pos=1) ... done
[18:01:11.016]  length: 0 (resolved future 1)
[18:01:11.016] Relaying remaining futures
[18:01:11.016] signalConditionsASAP(NULL, pos=0) ...
[18:01:11.016] - nx: 1
[18:01:11.017] - relay: TRUE
[18:01:11.017] - stdout: TRUE
[18:01:11.017] - signal: TRUE
[18:01:11.017] - resignal: FALSE
[18:01:11.017] - force: TRUE
[18:01:11.017] - relayed: [n=1] TRUE
[18:01:11.018] - queued futures: [n=1] TRUE
 - flush all
[18:01:11.020] - relayed: [n=1] TRUE
[18:01:11.021] - queued futures: [n=1] TRUE
[18:01:11.021] signalConditionsASAP(NULL, pos=0) ... done
[18:01:11.021] resolve() on list ... DONE
[18:01:11.021]  - Number of value chunks collected: 1
[18:01:11.022] Resolving 1 futures (chunks) ... DONE
[18:01:11.022] Reducing values from 1 chunks ...
[18:01:11.022]  - Number of values collected after concatenation: 5
[18:01:11.022]  - Number of values expected: 5
[18:01:11.022] Reducing values from 1 chunks ... DONE
[18:01:11.022] future_lapply() ... DONE
[18:01:11.024] plan(): Setting new future strategy stack:
[18:01:11.024] List of future strategies:
[18:01:11.024] 1. sequential:
[18:01:11.024]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:11.024]    - tweaked: FALSE
[18:01:11.024]    - call: plan(sequential)
[18:01:11.025] plan(): nbrOfWorkers() = 1
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[18:01:11.026] plan(): Setting new future strategy stack:
[18:01:11.026] List of future strategies:
[18:01:11.026] 1. multicore:
[18:01:11.026]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:01:11.026]    - tweaked: FALSE
[18:01:11.026]    - call: plan(strategy)
[18:01:11.032] plan(): nbrOfWorkers() = 2
[18:01:11.033] future_lapply() ...
[18:01:11.034] Generating random seeds ...
[18:01:11.034] Generating random seed streams for 5 elements ...
[18:01:11.034] Generating random seed streams for 5 elements ... DONE
[18:01:11.034] Generating random seeds ... DONE
[18:01:11.034] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[18:01:11.043] Number of chunks: 2
[18:01:11.044] getGlobalsAndPackagesXApply() ...
[18:01:11.044]  - future.globals: TRUE
[18:01:11.044] getGlobalsAndPackages() ...
[18:01:11.044] Searching for globals...
[18:01:11.046] - globals found: [2] ‘FUN’, ‘sample’
[18:01:11.047] Searching for globals ... DONE
[18:01:11.047] Resolving globals: FALSE
[18:01:11.048] The total size of the 1 globals is 616 bytes (616 bytes)
[18:01:11.048] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[18:01:11.048] - globals: [1] ‘FUN’
[18:01:11.049] 
[18:01:11.049] getGlobalsAndPackages() ... DONE
[18:01:11.049]  - globals found/used: [n=1] ‘FUN’
[18:01:11.049]  - needed namespaces: [n=0] 
[18:01:11.049] Finding globals ... DONE
[18:01:11.050]  - use_args: TRUE
[18:01:11.050]  - Getting '...' globals ...
[18:01:11.050] resolve() on list ...
[18:01:11.051]  recursive: 0
[18:01:11.051]  length: 1
[18:01:11.051]  elements: ‘...’
[18:01:11.051]  length: 0 (resolved future 1)
[18:01:11.051] resolve() on list ... DONE
[18:01:11.052]    - '...' content: [n=0] 
[18:01:11.052] List of 1
[18:01:11.052]  $ ...: list()
[18:01:11.052]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:11.052]  - attr(*, "where")=List of 1
[18:01:11.052]   ..$ ...:<environment: 0x635eb34ab128> 
[18:01:11.052]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:11.052]  - attr(*, "resolved")= logi TRUE
[18:01:11.052]  - attr(*, "total_size")= num NA
[18:01:11.057]  - Getting '...' globals ... DONE
[18:01:11.057] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[18:01:11.057] List of 2
[18:01:11.057]  $ ...future.FUN:function (...)  
[18:01:11.057]  $ ...          : list()
[18:01:11.057]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:11.057]  - attr(*, "where")=List of 2
[18:01:11.057]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[18:01:11.057]   ..$ ...          :<environment: 0x635eb34ab128> 
[18:01:11.057]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:11.057]  - attr(*, "resolved")= logi FALSE
[18:01:11.057]  - attr(*, "total_size")= num 616
[18:01:11.063] Packages to be attached in all futures: [n=0] 
[18:01:11.063] getGlobalsAndPackagesXApply() ... DONE
[18:01:11.063] Number of futures (= number of chunks): 2
[18:01:11.064] Launching 2 futures (chunks) ...
[18:01:11.064] Chunk #1 of 2 ...
[18:01:11.064]  - Finding globals in 'X' for chunk #1 ...
[18:01:11.064] getGlobalsAndPackages() ...
[18:01:11.064] Searching for globals...
[18:01:11.065] 
[18:01:11.065] Searching for globals ... DONE
[18:01:11.065] - globals: [0] <none>
[18:01:11.066] getGlobalsAndPackages() ... DONE
[18:01:11.066]    + additional globals found: [n=0] 
[18:01:11.066]    + additional namespaces needed: [n=0] 
[18:01:11.066]  - Finding globals in 'X' for chunk #1 ... DONE
[18:01:11.066]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:11.067]  - seeds: [2] <seeds>
[18:01:11.067]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.067] getGlobalsAndPackages() ...
[18:01:11.067] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.068] Resolving globals: FALSE
[18:01:11.068] Tweak future expression to call with '...' arguments ...
[18:01:11.068] {
[18:01:11.068]     do.call(function(...) {
[18:01:11.068]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.068]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:11.068]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.068]             on.exit(options(oopts), add = TRUE)
[18:01:11.068]         }
[18:01:11.068]         {
[18:01:11.068]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:11.068]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.068]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.068]                   envir = globalenv(), inherits = FALSE)
[18:01:11.068]                 ...future.FUN(...future.X_jj, ...)
[18:01:11.068]             })
[18:01:11.068]         }
[18:01:11.068]     }, args = future.call.arguments)
[18:01:11.068] }
[18:01:11.069] Tweak future expression to call with '...' arguments ... DONE
[18:01:11.070] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.070] 
[18:01:11.070] getGlobalsAndPackages() ... DONE
[18:01:11.071] run() for ‘Future’ ...
[18:01:11.071] - state: ‘created’
[18:01:11.071] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:01:11.079] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:11.079] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:01:11.079]   - Field: ‘label’
[18:01:11.080]   - Field: ‘local’
[18:01:11.080]   - Field: ‘owner’
[18:01:11.080]   - Field: ‘envir’
[18:01:11.080]   - Field: ‘workers’
[18:01:11.080]   - Field: ‘packages’
[18:01:11.081]   - Field: ‘gc’
[18:01:11.081]   - Field: ‘job’
[18:01:11.081]   - Field: ‘conditions’
[18:01:11.081]   - Field: ‘expr’
[18:01:11.081]   - Field: ‘uuid’
[18:01:11.082]   - Field: ‘seed’
[18:01:11.082]   - Field: ‘version’
[18:01:11.082]   - Field: ‘result’
[18:01:11.082]   - Field: ‘asynchronous’
[18:01:11.082]   - Field: ‘calls’
[18:01:11.083]   - Field: ‘globals’
[18:01:11.086]   - Field: ‘stdout’
[18:01:11.086]   - Field: ‘earlySignal’
[18:01:11.086]   - Field: ‘lazy’
[18:01:11.086]   - Field: ‘state’
[18:01:11.086] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:01:11.087] - Launch lazy future ...
[18:01:11.089] Packages needed by the future expression (n = 0): <none>
[18:01:11.089] Packages needed by future strategies (n = 0): <none>
[18:01:11.090] {
[18:01:11.090]     {
[18:01:11.090]         {
[18:01:11.090]             ...future.startTime <- base::Sys.time()
[18:01:11.090]             {
[18:01:11.090]                 {
[18:01:11.090]                   {
[18:01:11.090]                     {
[18:01:11.090]                       base::local({
[18:01:11.090]                         has_future <- base::requireNamespace("future", 
[18:01:11.090]                           quietly = TRUE)
[18:01:11.090]                         if (has_future) {
[18:01:11.090]                           ns <- base::getNamespace("future")
[18:01:11.090]                           version <- ns[[".package"]][["version"]]
[18:01:11.090]                           if (is.null(version)) 
[18:01:11.090]                             version <- utils::packageVersion("future")
[18:01:11.090]                         }
[18:01:11.090]                         else {
[18:01:11.090]                           version <- NULL
[18:01:11.090]                         }
[18:01:11.090]                         if (!has_future || version < "1.8.0") {
[18:01:11.090]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:11.090]                             "", base::R.version$version.string), 
[18:01:11.090]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:11.090]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:11.090]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:11.090]                               "release", "version")], collapse = " "), 
[18:01:11.090]                             hostname = base::Sys.info()[["nodename"]])
[18:01:11.090]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:11.090]                             info)
[18:01:11.090]                           info <- base::paste(info, collapse = "; ")
[18:01:11.090]                           if (!has_future) {
[18:01:11.090]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:11.090]                               info)
[18:01:11.090]                           }
[18:01:11.090]                           else {
[18:01:11.090]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:11.090]                               info, version)
[18:01:11.090]                           }
[18:01:11.090]                           base::stop(msg)
[18:01:11.090]                         }
[18:01:11.090]                       })
[18:01:11.090]                     }
[18:01:11.090]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:11.090]                     base::options(mc.cores = 1L)
[18:01:11.090]                   }
[18:01:11.090]                   ...future.strategy.old <- future::plan("list")
[18:01:11.090]                   options(future.plan = NULL)
[18:01:11.090]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:11.090]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:11.090]                 }
[18:01:11.090]                 ...future.workdir <- getwd()
[18:01:11.090]             }
[18:01:11.090]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:11.090]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:11.090]         }
[18:01:11.090]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:11.090]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:11.090]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:11.090]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:11.090]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:11.090]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:11.090]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:11.090]             base::names(...future.oldOptions))
[18:01:11.090]     }
[18:01:11.090]     if (FALSE) {
[18:01:11.090]     }
[18:01:11.090]     else {
[18:01:11.090]         if (TRUE) {
[18:01:11.090]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:11.090]                 open = "w")
[18:01:11.090]         }
[18:01:11.090]         else {
[18:01:11.090]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:11.090]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:11.090]         }
[18:01:11.090]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:11.090]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:11.090]             base::sink(type = "output", split = FALSE)
[18:01:11.090]             base::close(...future.stdout)
[18:01:11.090]         }, add = TRUE)
[18:01:11.090]     }
[18:01:11.090]     ...future.frame <- base::sys.nframe()
[18:01:11.090]     ...future.conditions <- base::list()
[18:01:11.090]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:11.090]     if (FALSE) {
[18:01:11.090]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:11.090]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:11.090]     }
[18:01:11.090]     ...future.result <- base::tryCatch({
[18:01:11.090]         base::withCallingHandlers({
[18:01:11.090]             ...future.value <- base::withVisible(base::local({
[18:01:11.090]                 withCallingHandlers({
[18:01:11.090]                   {
[18:01:11.090]                     do.call(function(...) {
[18:01:11.090]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.090]                       if (!identical(...future.globals.maxSize.org, 
[18:01:11.090]                         ...future.globals.maxSize)) {
[18:01:11.090]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.090]                         on.exit(options(oopts), add = TRUE)
[18:01:11.090]                       }
[18:01:11.090]                       {
[18:01:11.090]                         lapply(seq_along(...future.elements_ii), 
[18:01:11.090]                           FUN = function(jj) {
[18:01:11.090]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.090]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.090]                               envir = globalenv(), inherits = FALSE)
[18:01:11.090]                             ...future.FUN(...future.X_jj, ...)
[18:01:11.090]                           })
[18:01:11.090]                       }
[18:01:11.090]                     }, args = future.call.arguments)
[18:01:11.090]                   }
[18:01:11.090]                 }, immediateCondition = function(cond) {
[18:01:11.090]                   save_rds <- function (object, pathname, ...) 
[18:01:11.090]                   {
[18:01:11.090]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:01:11.090]                     if (file_test("-f", pathname_tmp)) {
[18:01:11.090]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.090]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:01:11.090]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.090]                         fi_tmp[["mtime"]])
[18:01:11.090]                     }
[18:01:11.090]                     tryCatch({
[18:01:11.090]                       saveRDS(object, file = pathname_tmp, ...)
[18:01:11.090]                     }, error = function(ex) {
[18:01:11.090]                       msg <- conditionMessage(ex)
[18:01:11.090]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.090]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:01:11.090]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.090]                         fi_tmp[["mtime"]], msg)
[18:01:11.090]                       ex$message <- msg
[18:01:11.090]                       stop(ex)
[18:01:11.090]                     })
[18:01:11.090]                     stopifnot(file_test("-f", pathname_tmp))
[18:01:11.090]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:01:11.090]                     if (!res || file_test("-f", pathname_tmp)) {
[18:01:11.090]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.090]                       fi <- file.info(pathname)
[18:01:11.090]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:01:11.090]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.090]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:01:11.090]                         fi[["size"]], fi[["mtime"]])
[18:01:11.090]                       stop(msg)
[18:01:11.090]                     }
[18:01:11.090]                     invisible(pathname)
[18:01:11.090]                   }
[18:01:11.090]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:01:11.090]                     rootPath = tempdir()) 
[18:01:11.090]                   {
[18:01:11.090]                     obj <- list(time = Sys.time(), condition = cond)
[18:01:11.090]                     file <- tempfile(pattern = class(cond)[1], 
[18:01:11.090]                       tmpdir = path, fileext = ".rds")
[18:01:11.090]                     save_rds(obj, file)
[18:01:11.090]                   }
[18:01:11.090]                   saveImmediateCondition(cond, path = "/tmp/RtmpTMmi8X/.future/immediateConditions")
[18:01:11.090]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.090]                   {
[18:01:11.090]                     inherits <- base::inherits
[18:01:11.090]                     invokeRestart <- base::invokeRestart
[18:01:11.090]                     is.null <- base::is.null
[18:01:11.090]                     muffled <- FALSE
[18:01:11.090]                     if (inherits(cond, "message")) {
[18:01:11.090]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:11.090]                       if (muffled) 
[18:01:11.090]                         invokeRestart("muffleMessage")
[18:01:11.090]                     }
[18:01:11.090]                     else if (inherits(cond, "warning")) {
[18:01:11.090]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:11.090]                       if (muffled) 
[18:01:11.090]                         invokeRestart("muffleWarning")
[18:01:11.090]                     }
[18:01:11.090]                     else if (inherits(cond, "condition")) {
[18:01:11.090]                       if (!is.null(pattern)) {
[18:01:11.090]                         computeRestarts <- base::computeRestarts
[18:01:11.090]                         grepl <- base::grepl
[18:01:11.090]                         restarts <- computeRestarts(cond)
[18:01:11.090]                         for (restart in restarts) {
[18:01:11.090]                           name <- restart$name
[18:01:11.090]                           if (is.null(name)) 
[18:01:11.090]                             next
[18:01:11.090]                           if (!grepl(pattern, name)) 
[18:01:11.090]                             next
[18:01:11.090]                           invokeRestart(restart)
[18:01:11.090]                           muffled <- TRUE
[18:01:11.090]                           break
[18:01:11.090]                         }
[18:01:11.090]                       }
[18:01:11.090]                     }
[18:01:11.090]                     invisible(muffled)
[18:01:11.090]                   }
[18:01:11.090]                   muffleCondition(cond)
[18:01:11.090]                 })
[18:01:11.090]             }))
[18:01:11.090]             future::FutureResult(value = ...future.value$value, 
[18:01:11.090]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:11.090]                   ...future.rng), globalenv = if (FALSE) 
[18:01:11.090]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:11.090]                     ...future.globalenv.names))
[18:01:11.090]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:11.090]         }, condition = base::local({
[18:01:11.090]             c <- base::c
[18:01:11.090]             inherits <- base::inherits
[18:01:11.090]             invokeRestart <- base::invokeRestart
[18:01:11.090]             length <- base::length
[18:01:11.090]             list <- base::list
[18:01:11.090]             seq.int <- base::seq.int
[18:01:11.090]             signalCondition <- base::signalCondition
[18:01:11.090]             sys.calls <- base::sys.calls
[18:01:11.090]             `[[` <- base::`[[`
[18:01:11.090]             `+` <- base::`+`
[18:01:11.090]             `<<-` <- base::`<<-`
[18:01:11.090]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:11.090]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:11.090]                   3L)]
[18:01:11.090]             }
[18:01:11.090]             function(cond) {
[18:01:11.090]                 is_error <- inherits(cond, "error")
[18:01:11.090]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:11.090]                   NULL)
[18:01:11.090]                 if (is_error) {
[18:01:11.090]                   sessionInformation <- function() {
[18:01:11.090]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:11.090]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:11.090]                       search = base::search(), system = base::Sys.info())
[18:01:11.090]                   }
[18:01:11.090]                   ...future.conditions[[length(...future.conditions) + 
[18:01:11.090]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:11.090]                     cond$call), session = sessionInformation(), 
[18:01:11.090]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:11.090]                   signalCondition(cond)
[18:01:11.090]                 }
[18:01:11.090]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:11.090]                 "immediateCondition"))) {
[18:01:11.090]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:11.090]                   ...future.conditions[[length(...future.conditions) + 
[18:01:11.090]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:11.090]                   if (TRUE && !signal) {
[18:01:11.090]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.090]                     {
[18:01:11.090]                       inherits <- base::inherits
[18:01:11.090]                       invokeRestart <- base::invokeRestart
[18:01:11.090]                       is.null <- base::is.null
[18:01:11.090]                       muffled <- FALSE
[18:01:11.090]                       if (inherits(cond, "message")) {
[18:01:11.090]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:11.090]                         if (muffled) 
[18:01:11.090]                           invokeRestart("muffleMessage")
[18:01:11.090]                       }
[18:01:11.090]                       else if (inherits(cond, "warning")) {
[18:01:11.090]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:11.090]                         if (muffled) 
[18:01:11.090]                           invokeRestart("muffleWarning")
[18:01:11.090]                       }
[18:01:11.090]                       else if (inherits(cond, "condition")) {
[18:01:11.090]                         if (!is.null(pattern)) {
[18:01:11.090]                           computeRestarts <- base::computeRestarts
[18:01:11.090]                           grepl <- base::grepl
[18:01:11.090]                           restarts <- computeRestarts(cond)
[18:01:11.090]                           for (restart in restarts) {
[18:01:11.090]                             name <- restart$name
[18:01:11.090]                             if (is.null(name)) 
[18:01:11.090]                               next
[18:01:11.090]                             if (!grepl(pattern, name)) 
[18:01:11.090]                               next
[18:01:11.090]                             invokeRestart(restart)
[18:01:11.090]                             muffled <- TRUE
[18:01:11.090]                             break
[18:01:11.090]                           }
[18:01:11.090]                         }
[18:01:11.090]                       }
[18:01:11.090]                       invisible(muffled)
[18:01:11.090]                     }
[18:01:11.090]                     muffleCondition(cond, pattern = "^muffle")
[18:01:11.090]                   }
[18:01:11.090]                 }
[18:01:11.090]                 else {
[18:01:11.090]                   if (TRUE) {
[18:01:11.090]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.090]                     {
[18:01:11.090]                       inherits <- base::inherits
[18:01:11.090]                       invokeRestart <- base::invokeRestart
[18:01:11.090]                       is.null <- base::is.null
[18:01:11.090]                       muffled <- FALSE
[18:01:11.090]                       if (inherits(cond, "message")) {
[18:01:11.090]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:11.090]                         if (muffled) 
[18:01:11.090]                           invokeRestart("muffleMessage")
[18:01:11.090]                       }
[18:01:11.090]                       else if (inherits(cond, "warning")) {
[18:01:11.090]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:11.090]                         if (muffled) 
[18:01:11.090]                           invokeRestart("muffleWarning")
[18:01:11.090]                       }
[18:01:11.090]                       else if (inherits(cond, "condition")) {
[18:01:11.090]                         if (!is.null(pattern)) {
[18:01:11.090]                           computeRestarts <- base::computeRestarts
[18:01:11.090]                           grepl <- base::grepl
[18:01:11.090]                           restarts <- computeRestarts(cond)
[18:01:11.090]                           for (restart in restarts) {
[18:01:11.090]                             name <- restart$name
[18:01:11.090]                             if (is.null(name)) 
[18:01:11.090]                               next
[18:01:11.090]                             if (!grepl(pattern, name)) 
[18:01:11.090]                               next
[18:01:11.090]                             invokeRestart(restart)
[18:01:11.090]                             muffled <- TRUE
[18:01:11.090]                             break
[18:01:11.090]                           }
[18:01:11.090]                         }
[18:01:11.090]                       }
[18:01:11.090]                       invisible(muffled)
[18:01:11.090]                     }
[18:01:11.090]                     muffleCondition(cond, pattern = "^muffle")
[18:01:11.090]                   }
[18:01:11.090]                 }
[18:01:11.090]             }
[18:01:11.090]         }))
[18:01:11.090]     }, error = function(ex) {
[18:01:11.090]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:11.090]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:11.090]                 ...future.rng), started = ...future.startTime, 
[18:01:11.090]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:11.090]             version = "1.8"), class = "FutureResult")
[18:01:11.090]     }, finally = {
[18:01:11.090]         if (!identical(...future.workdir, getwd())) 
[18:01:11.090]             setwd(...future.workdir)
[18:01:11.090]         {
[18:01:11.090]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:11.090]                 ...future.oldOptions$nwarnings <- NULL
[18:01:11.090]             }
[18:01:11.090]             base::options(...future.oldOptions)
[18:01:11.090]             if (.Platform$OS.type == "windows") {
[18:01:11.090]                 old_names <- names(...future.oldEnvVars)
[18:01:11.090]                 envs <- base::Sys.getenv()
[18:01:11.090]                 names <- names(envs)
[18:01:11.090]                 common <- intersect(names, old_names)
[18:01:11.090]                 added <- setdiff(names, old_names)
[18:01:11.090]                 removed <- setdiff(old_names, names)
[18:01:11.090]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:11.090]                   envs[common]]
[18:01:11.090]                 NAMES <- toupper(changed)
[18:01:11.090]                 args <- list()
[18:01:11.090]                 for (kk in seq_along(NAMES)) {
[18:01:11.090]                   name <- changed[[kk]]
[18:01:11.090]                   NAME <- NAMES[[kk]]
[18:01:11.090]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.090]                     next
[18:01:11.090]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:11.090]                 }
[18:01:11.090]                 NAMES <- toupper(added)
[18:01:11.090]                 for (kk in seq_along(NAMES)) {
[18:01:11.090]                   name <- added[[kk]]
[18:01:11.090]                   NAME <- NAMES[[kk]]
[18:01:11.090]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.090]                     next
[18:01:11.090]                   args[[name]] <- ""
[18:01:11.090]                 }
[18:01:11.090]                 NAMES <- toupper(removed)
[18:01:11.090]                 for (kk in seq_along(NAMES)) {
[18:01:11.090]                   name <- removed[[kk]]
[18:01:11.090]                   NAME <- NAMES[[kk]]
[18:01:11.090]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.090]                     next
[18:01:11.090]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:11.090]                 }
[18:01:11.090]                 if (length(args) > 0) 
[18:01:11.090]                   base::do.call(base::Sys.setenv, args = args)
[18:01:11.090]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:11.090]             }
[18:01:11.090]             else {
[18:01:11.090]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:11.090]             }
[18:01:11.090]             {
[18:01:11.090]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:11.090]                   0L) {
[18:01:11.090]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:11.090]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:11.090]                   base::options(opts)
[18:01:11.090]                 }
[18:01:11.090]                 {
[18:01:11.090]                   {
[18:01:11.090]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:11.090]                     NULL
[18:01:11.090]                   }
[18:01:11.090]                   options(future.plan = NULL)
[18:01:11.090]                   if (is.na(NA_character_)) 
[18:01:11.090]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:11.090]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:11.090]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:11.090]                     .init = FALSE)
[18:01:11.090]                 }
[18:01:11.090]             }
[18:01:11.090]         }
[18:01:11.090]     })
[18:01:11.090]     if (TRUE) {
[18:01:11.090]         base::sink(type = "output", split = FALSE)
[18:01:11.090]         if (TRUE) {
[18:01:11.090]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:11.090]         }
[18:01:11.090]         else {
[18:01:11.090]             ...future.result["stdout"] <- base::list(NULL)
[18:01:11.090]         }
[18:01:11.090]         base::close(...future.stdout)
[18:01:11.090]         ...future.stdout <- NULL
[18:01:11.090]     }
[18:01:11.090]     ...future.result$conditions <- ...future.conditions
[18:01:11.090]     ...future.result$finished <- base::Sys.time()
[18:01:11.090]     ...future.result
[18:01:11.090] }
[18:01:11.094] assign_globals() ...
[18:01:11.094] List of 5
[18:01:11.094]  $ ...future.FUN            :function (...)  
[18:01:11.094]  $ future.call.arguments    : list()
[18:01:11.094]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:11.094]  $ ...future.elements_ii    :List of 2
[18:01:11.094]   ..$ : int 0
[18:01:11.094]   ..$ : int 0
[18:01:11.094]  $ ...future.seeds_ii       :List of 2
[18:01:11.094]   ..$ : int [1:7] 10407 800596211 191202253 -1245543361 -1911991084 -470201595 630973807
[18:01:11.094]   ..$ : int [1:7] 10407 336362669 -1847432762 -712550016 1068830663 1731026700 1489470838
[18:01:11.094]  $ ...future.globals.maxSize: NULL
[18:01:11.094]  - attr(*, "where")=List of 5
[18:01:11.094]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[18:01:11.094]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[18:01:11.094]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[18:01:11.094]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[18:01:11.094]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[18:01:11.094]  - attr(*, "resolved")= logi FALSE
[18:01:11.094]  - attr(*, "total_size")= num 616
[18:01:11.094]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:11.094]  - attr(*, "already-done")= logi TRUE
[18:01:11.105] - reassign environment for ‘...future.FUN’
[18:01:11.106] - copied ‘...future.FUN’ to environment
[18:01:11.106] - copied ‘future.call.arguments’ to environment
[18:01:11.106] - copied ‘...future.elements_ii’ to environment
[18:01:11.106] - copied ‘...future.seeds_ii’ to environment
[18:01:11.106] - copied ‘...future.globals.maxSize’ to environment
[18:01:11.107] assign_globals() ... done
[18:01:11.107] requestCore(): workers = 2
[18:01:11.112] MulticoreFuture started
[18:01:11.112] - Launch lazy future ... done
[18:01:11.113] run() for ‘MulticoreFuture’ ... done
[18:01:11.113] Created future:
[18:01:11.113] plan(): Setting new future strategy stack:
[18:01:11.114] List of future strategies:
[18:01:11.114] 1. sequential:
[18:01:11.114]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:11.114]    - tweaked: FALSE
[18:01:11.114]    - call: NULL
[18:01:11.116] plan(): nbrOfWorkers() = 1
[18:01:11.120] plan(): Setting new future strategy stack:
[18:01:11.120] List of future strategies:
[18:01:11.120] 1. multicore:
[18:01:11.120]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:01:11.120]    - tweaked: FALSE
[18:01:11.120]    - call: plan(strategy)
[18:01:11.129] plan(): nbrOfWorkers() = 2
[18:01:11.114] MulticoreFuture:
[18:01:11.114] Label: ‘future_replicate-1’
[18:01:11.114] Expression:
[18:01:11.114] {
[18:01:11.114]     do.call(function(...) {
[18:01:11.114]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.114]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:11.114]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.114]             on.exit(options(oopts), add = TRUE)
[18:01:11.114]         }
[18:01:11.114]         {
[18:01:11.114]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:11.114]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.114]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.114]                   envir = globalenv(), inherits = FALSE)
[18:01:11.114]                 ...future.FUN(...future.X_jj, ...)
[18:01:11.114]             })
[18:01:11.114]         }
[18:01:11.114]     }, args = future.call.arguments)
[18:01:11.114] }
[18:01:11.114] Lazy evaluation: FALSE
[18:01:11.114] Asynchronous evaluation: TRUE
[18:01:11.114] Local evaluation: TRUE
[18:01:11.114] Environment: R_GlobalEnv
[18:01:11.114] Capture standard output: TRUE
[18:01:11.114] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:11.114] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:11.114] Packages: <none>
[18:01:11.114] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:11.114] Resolved: TRUE
[18:01:11.114] Value: <not collected>
[18:01:11.114] Conditions captured: <none>
[18:01:11.114] Early signaling: FALSE
[18:01:11.114] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:11.114] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:11.131] Chunk #1 of 2 ... DONE
[18:01:11.131] Chunk #2 of 2 ...
[18:01:11.132]  - Finding globals in 'X' for chunk #2 ...
[18:01:11.132] getGlobalsAndPackages() ...
[18:01:11.132] Searching for globals...
[18:01:11.133] 
[18:01:11.134] Searching for globals ... DONE
[18:01:11.134] - globals: [0] <none>
[18:01:11.134] getGlobalsAndPackages() ... DONE
[18:01:11.134]    + additional globals found: [n=0] 
[18:01:11.135]    + additional namespaces needed: [n=0] 
[18:01:11.135]  - Finding globals in 'X' for chunk #2 ... DONE
[18:01:11.135]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:11.136]  - seeds: [3] <seeds>
[18:01:11.136]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.136] getGlobalsAndPackages() ...
[18:01:11.137] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.137] Resolving globals: FALSE
[18:01:11.137] Tweak future expression to call with '...' arguments ...
[18:01:11.138] {
[18:01:11.138]     do.call(function(...) {
[18:01:11.138]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.138]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:11.138]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.138]             on.exit(options(oopts), add = TRUE)
[18:01:11.138]         }
[18:01:11.138]         {
[18:01:11.138]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:11.138]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.138]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.138]                   envir = globalenv(), inherits = FALSE)
[18:01:11.138]                 ...future.FUN(...future.X_jj, ...)
[18:01:11.138]             })
[18:01:11.138]         }
[18:01:11.138]     }, args = future.call.arguments)
[18:01:11.138] }
[18:01:11.139] Tweak future expression to call with '...' arguments ... DONE
[18:01:11.140] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.140] 
[18:01:11.140] getGlobalsAndPackages() ... DONE
[18:01:11.141] run() for ‘Future’ ...
[18:01:11.142] - state: ‘created’
[18:01:11.142] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:01:11.150] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:11.150] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:01:11.151]   - Field: ‘label’
[18:01:11.151]   - Field: ‘local’
[18:01:11.151]   - Field: ‘owner’
[18:01:11.152]   - Field: ‘envir’
[18:01:11.152]   - Field: ‘workers’
[18:01:11.152]   - Field: ‘packages’
[18:01:11.153]   - Field: ‘gc’
[18:01:11.153]   - Field: ‘job’
[18:01:11.153]   - Field: ‘conditions’
[18:01:11.153]   - Field: ‘expr’
[18:01:11.154]   - Field: ‘uuid’
[18:01:11.154]   - Field: ‘seed’
[18:01:11.154]   - Field: ‘version’
[18:01:11.154]   - Field: ‘result’
[18:01:11.155]   - Field: ‘asynchronous’
[18:01:11.155]   - Field: ‘calls’
[18:01:11.155]   - Field: ‘globals’
[18:01:11.156]   - Field: ‘stdout’
[18:01:11.156]   - Field: ‘earlySignal’
[18:01:11.156]   - Field: ‘lazy’
[18:01:11.156]   - Field: ‘state’
[18:01:11.157] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:01:11.157] - Launch lazy future ...
[18:01:11.158] Packages needed by the future expression (n = 0): <none>
[18:01:11.158] Packages needed by future strategies (n = 0): <none>
[18:01:11.160] {
[18:01:11.160]     {
[18:01:11.160]         {
[18:01:11.160]             ...future.startTime <- base::Sys.time()
[18:01:11.160]             {
[18:01:11.160]                 {
[18:01:11.160]                   {
[18:01:11.160]                     {
[18:01:11.160]                       base::local({
[18:01:11.160]                         has_future <- base::requireNamespace("future", 
[18:01:11.160]                           quietly = TRUE)
[18:01:11.160]                         if (has_future) {
[18:01:11.160]                           ns <- base::getNamespace("future")
[18:01:11.160]                           version <- ns[[".package"]][["version"]]
[18:01:11.160]                           if (is.null(version)) 
[18:01:11.160]                             version <- utils::packageVersion("future")
[18:01:11.160]                         }
[18:01:11.160]                         else {
[18:01:11.160]                           version <- NULL
[18:01:11.160]                         }
[18:01:11.160]                         if (!has_future || version < "1.8.0") {
[18:01:11.160]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:11.160]                             "", base::R.version$version.string), 
[18:01:11.160]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:11.160]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:11.160]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:11.160]                               "release", "version")], collapse = " "), 
[18:01:11.160]                             hostname = base::Sys.info()[["nodename"]])
[18:01:11.160]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:11.160]                             info)
[18:01:11.160]                           info <- base::paste(info, collapse = "; ")
[18:01:11.160]                           if (!has_future) {
[18:01:11.160]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:11.160]                               info)
[18:01:11.160]                           }
[18:01:11.160]                           else {
[18:01:11.160]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:11.160]                               info, version)
[18:01:11.160]                           }
[18:01:11.160]                           base::stop(msg)
[18:01:11.160]                         }
[18:01:11.160]                       })
[18:01:11.160]                     }
[18:01:11.160]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:11.160]                     base::options(mc.cores = 1L)
[18:01:11.160]                   }
[18:01:11.160]                   ...future.strategy.old <- future::plan("list")
[18:01:11.160]                   options(future.plan = NULL)
[18:01:11.160]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:11.160]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:11.160]                 }
[18:01:11.160]                 ...future.workdir <- getwd()
[18:01:11.160]             }
[18:01:11.160]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:11.160]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:11.160]         }
[18:01:11.160]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:11.160]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:11.160]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:11.160]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:11.160]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:11.160]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:11.160]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:11.160]             base::names(...future.oldOptions))
[18:01:11.160]     }
[18:01:11.160]     if (FALSE) {
[18:01:11.160]     }
[18:01:11.160]     else {
[18:01:11.160]         if (TRUE) {
[18:01:11.160]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:11.160]                 open = "w")
[18:01:11.160]         }
[18:01:11.160]         else {
[18:01:11.160]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:11.160]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:11.160]         }
[18:01:11.160]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:11.160]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:11.160]             base::sink(type = "output", split = FALSE)
[18:01:11.160]             base::close(...future.stdout)
[18:01:11.160]         }, add = TRUE)
[18:01:11.160]     }
[18:01:11.160]     ...future.frame <- base::sys.nframe()
[18:01:11.160]     ...future.conditions <- base::list()
[18:01:11.160]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:11.160]     if (FALSE) {
[18:01:11.160]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:11.160]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:11.160]     }
[18:01:11.160]     ...future.result <- base::tryCatch({
[18:01:11.160]         base::withCallingHandlers({
[18:01:11.160]             ...future.value <- base::withVisible(base::local({
[18:01:11.160]                 withCallingHandlers({
[18:01:11.160]                   {
[18:01:11.160]                     do.call(function(...) {
[18:01:11.160]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.160]                       if (!identical(...future.globals.maxSize.org, 
[18:01:11.160]                         ...future.globals.maxSize)) {
[18:01:11.160]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.160]                         on.exit(options(oopts), add = TRUE)
[18:01:11.160]                       }
[18:01:11.160]                       {
[18:01:11.160]                         lapply(seq_along(...future.elements_ii), 
[18:01:11.160]                           FUN = function(jj) {
[18:01:11.160]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.160]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.160]                               envir = globalenv(), inherits = FALSE)
[18:01:11.160]                             ...future.FUN(...future.X_jj, ...)
[18:01:11.160]                           })
[18:01:11.160]                       }
[18:01:11.160]                     }, args = future.call.arguments)
[18:01:11.160]                   }
[18:01:11.160]                 }, immediateCondition = function(cond) {
[18:01:11.160]                   save_rds <- function (object, pathname, ...) 
[18:01:11.160]                   {
[18:01:11.160]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:01:11.160]                     if (file_test("-f", pathname_tmp)) {
[18:01:11.160]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.160]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:01:11.160]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.160]                         fi_tmp[["mtime"]])
[18:01:11.160]                     }
[18:01:11.160]                     tryCatch({
[18:01:11.160]                       saveRDS(object, file = pathname_tmp, ...)
[18:01:11.160]                     }, error = function(ex) {
[18:01:11.160]                       msg <- conditionMessage(ex)
[18:01:11.160]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.160]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:01:11.160]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.160]                         fi_tmp[["mtime"]], msg)
[18:01:11.160]                       ex$message <- msg
[18:01:11.160]                       stop(ex)
[18:01:11.160]                     })
[18:01:11.160]                     stopifnot(file_test("-f", pathname_tmp))
[18:01:11.160]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:01:11.160]                     if (!res || file_test("-f", pathname_tmp)) {
[18:01:11.160]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.160]                       fi <- file.info(pathname)
[18:01:11.160]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:01:11.160]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.160]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:01:11.160]                         fi[["size"]], fi[["mtime"]])
[18:01:11.160]                       stop(msg)
[18:01:11.160]                     }
[18:01:11.160]                     invisible(pathname)
[18:01:11.160]                   }
[18:01:11.160]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:01:11.160]                     rootPath = tempdir()) 
[18:01:11.160]                   {
[18:01:11.160]                     obj <- list(time = Sys.time(), condition = cond)
[18:01:11.160]                     file <- tempfile(pattern = class(cond)[1], 
[18:01:11.160]                       tmpdir = path, fileext = ".rds")
[18:01:11.160]                     save_rds(obj, file)
[18:01:11.160]                   }
[18:01:11.160]                   saveImmediateCondition(cond, path = "/tmp/RtmpTMmi8X/.future/immediateConditions")
[18:01:11.160]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.160]                   {
[18:01:11.160]                     inherits <- base::inherits
[18:01:11.160]                     invokeRestart <- base::invokeRestart
[18:01:11.160]                     is.null <- base::is.null
[18:01:11.160]                     muffled <- FALSE
[18:01:11.160]                     if (inherits(cond, "message")) {
[18:01:11.160]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:11.160]                       if (muffled) 
[18:01:11.160]                         invokeRestart("muffleMessage")
[18:01:11.160]                     }
[18:01:11.160]                     else if (inherits(cond, "warning")) {
[18:01:11.160]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:11.160]                       if (muffled) 
[18:01:11.160]                         invokeRestart("muffleWarning")
[18:01:11.160]                     }
[18:01:11.160]                     else if (inherits(cond, "condition")) {
[18:01:11.160]                       if (!is.null(pattern)) {
[18:01:11.160]                         computeRestarts <- base::computeRestarts
[18:01:11.160]                         grepl <- base::grepl
[18:01:11.160]                         restarts <- computeRestarts(cond)
[18:01:11.160]                         for (restart in restarts) {
[18:01:11.160]                           name <- restart$name
[18:01:11.160]                           if (is.null(name)) 
[18:01:11.160]                             next
[18:01:11.160]                           if (!grepl(pattern, name)) 
[18:01:11.160]                             next
[18:01:11.160]                           invokeRestart(restart)
[18:01:11.160]                           muffled <- TRUE
[18:01:11.160]                           break
[18:01:11.160]                         }
[18:01:11.160]                       }
[18:01:11.160]                     }
[18:01:11.160]                     invisible(muffled)
[18:01:11.160]                   }
[18:01:11.160]                   muffleCondition(cond)
[18:01:11.160]                 })
[18:01:11.160]             }))
[18:01:11.160]             future::FutureResult(value = ...future.value$value, 
[18:01:11.160]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:11.160]                   ...future.rng), globalenv = if (FALSE) 
[18:01:11.160]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:11.160]                     ...future.globalenv.names))
[18:01:11.160]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:11.160]         }, condition = base::local({
[18:01:11.160]             c <- base::c
[18:01:11.160]             inherits <- base::inherits
[18:01:11.160]             invokeRestart <- base::invokeRestart
[18:01:11.160]             length <- base::length
[18:01:11.160]             list <- base::list
[18:01:11.160]             seq.int <- base::seq.int
[18:01:11.160]             signalCondition <- base::signalCondition
[18:01:11.160]             sys.calls <- base::sys.calls
[18:01:11.160]             `[[` <- base::`[[`
[18:01:11.160]             `+` <- base::`+`
[18:01:11.160]             `<<-` <- base::`<<-`
[18:01:11.160]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:11.160]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:11.160]                   3L)]
[18:01:11.160]             }
[18:01:11.160]             function(cond) {
[18:01:11.160]                 is_error <- inherits(cond, "error")
[18:01:11.160]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:11.160]                   NULL)
[18:01:11.160]                 if (is_error) {
[18:01:11.160]                   sessionInformation <- function() {
[18:01:11.160]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:11.160]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:11.160]                       search = base::search(), system = base::Sys.info())
[18:01:11.160]                   }
[18:01:11.160]                   ...future.conditions[[length(...future.conditions) + 
[18:01:11.160]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:11.160]                     cond$call), session = sessionInformation(), 
[18:01:11.160]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:11.160]                   signalCondition(cond)
[18:01:11.160]                 }
[18:01:11.160]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:11.160]                 "immediateCondition"))) {
[18:01:11.160]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:11.160]                   ...future.conditions[[length(...future.conditions) + 
[18:01:11.160]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:11.160]                   if (TRUE && !signal) {
[18:01:11.160]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.160]                     {
[18:01:11.160]                       inherits <- base::inherits
[18:01:11.160]                       invokeRestart <- base::invokeRestart
[18:01:11.160]                       is.null <- base::is.null
[18:01:11.160]                       muffled <- FALSE
[18:01:11.160]                       if (inherits(cond, "message")) {
[18:01:11.160]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:11.160]                         if (muffled) 
[18:01:11.160]                           invokeRestart("muffleMessage")
[18:01:11.160]                       }
[18:01:11.160]                       else if (inherits(cond, "warning")) {
[18:01:11.160]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:11.160]                         if (muffled) 
[18:01:11.160]                           invokeRestart("muffleWarning")
[18:01:11.160]                       }
[18:01:11.160]                       else if (inherits(cond, "condition")) {
[18:01:11.160]                         if (!is.null(pattern)) {
[18:01:11.160]                           computeRestarts <- base::computeRestarts
[18:01:11.160]                           grepl <- base::grepl
[18:01:11.160]                           restarts <- computeRestarts(cond)
[18:01:11.160]                           for (restart in restarts) {
[18:01:11.160]                             name <- restart$name
[18:01:11.160]                             if (is.null(name)) 
[18:01:11.160]                               next
[18:01:11.160]                             if (!grepl(pattern, name)) 
[18:01:11.160]                               next
[18:01:11.160]                             invokeRestart(restart)
[18:01:11.160]                             muffled <- TRUE
[18:01:11.160]                             break
[18:01:11.160]                           }
[18:01:11.160]                         }
[18:01:11.160]                       }
[18:01:11.160]                       invisible(muffled)
[18:01:11.160]                     }
[18:01:11.160]                     muffleCondition(cond, pattern = "^muffle")
[18:01:11.160]                   }
[18:01:11.160]                 }
[18:01:11.160]                 else {
[18:01:11.160]                   if (TRUE) {
[18:01:11.160]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.160]                     {
[18:01:11.160]                       inherits <- base::inherits
[18:01:11.160]                       invokeRestart <- base::invokeRestart
[18:01:11.160]                       is.null <- base::is.null
[18:01:11.160]                       muffled <- FALSE
[18:01:11.160]                       if (inherits(cond, "message")) {
[18:01:11.160]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:11.160]                         if (muffled) 
[18:01:11.160]                           invokeRestart("muffleMessage")
[18:01:11.160]                       }
[18:01:11.160]                       else if (inherits(cond, "warning")) {
[18:01:11.160]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:11.160]                         if (muffled) 
[18:01:11.160]                           invokeRestart("muffleWarning")
[18:01:11.160]                       }
[18:01:11.160]                       else if (inherits(cond, "condition")) {
[18:01:11.160]                         if (!is.null(pattern)) {
[18:01:11.160]                           computeRestarts <- base::computeRestarts
[18:01:11.160]                           grepl <- base::grepl
[18:01:11.160]                           restarts <- computeRestarts(cond)
[18:01:11.160]                           for (restart in restarts) {
[18:01:11.160]                             name <- restart$name
[18:01:11.160]                             if (is.null(name)) 
[18:01:11.160]                               next
[18:01:11.160]                             if (!grepl(pattern, name)) 
[18:01:11.160]                               next
[18:01:11.160]                             invokeRestart(restart)
[18:01:11.160]                             muffled <- TRUE
[18:01:11.160]                             break
[18:01:11.160]                           }
[18:01:11.160]                         }
[18:01:11.160]                       }
[18:01:11.160]                       invisible(muffled)
[18:01:11.160]                     }
[18:01:11.160]                     muffleCondition(cond, pattern = "^muffle")
[18:01:11.160]                   }
[18:01:11.160]                 }
[18:01:11.160]             }
[18:01:11.160]         }))
[18:01:11.160]     }, error = function(ex) {
[18:01:11.160]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:11.160]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:11.160]                 ...future.rng), started = ...future.startTime, 
[18:01:11.160]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:11.160]             version = "1.8"), class = "FutureResult")
[18:01:11.160]     }, finally = {
[18:01:11.160]         if (!identical(...future.workdir, getwd())) 
[18:01:11.160]             setwd(...future.workdir)
[18:01:11.160]         {
[18:01:11.160]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:11.160]                 ...future.oldOptions$nwarnings <- NULL
[18:01:11.160]             }
[18:01:11.160]             base::options(...future.oldOptions)
[18:01:11.160]             if (.Platform$OS.type == "windows") {
[18:01:11.160]                 old_names <- names(...future.oldEnvVars)
[18:01:11.160]                 envs <- base::Sys.getenv()
[18:01:11.160]                 names <- names(envs)
[18:01:11.160]                 common <- intersect(names, old_names)
[18:01:11.160]                 added <- setdiff(names, old_names)
[18:01:11.160]                 removed <- setdiff(old_names, names)
[18:01:11.160]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:11.160]                   envs[common]]
[18:01:11.160]                 NAMES <- toupper(changed)
[18:01:11.160]                 args <- list()
[18:01:11.160]                 for (kk in seq_along(NAMES)) {
[18:01:11.160]                   name <- changed[[kk]]
[18:01:11.160]                   NAME <- NAMES[[kk]]
[18:01:11.160]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.160]                     next
[18:01:11.160]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:11.160]                 }
[18:01:11.160]                 NAMES <- toupper(added)
[18:01:11.160]                 for (kk in seq_along(NAMES)) {
[18:01:11.160]                   name <- added[[kk]]
[18:01:11.160]                   NAME <- NAMES[[kk]]
[18:01:11.160]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.160]                     next
[18:01:11.160]                   args[[name]] <- ""
[18:01:11.160]                 }
[18:01:11.160]                 NAMES <- toupper(removed)
[18:01:11.160]                 for (kk in seq_along(NAMES)) {
[18:01:11.160]                   name <- removed[[kk]]
[18:01:11.160]                   NAME <- NAMES[[kk]]
[18:01:11.160]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.160]                     next
[18:01:11.160]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:11.160]                 }
[18:01:11.160]                 if (length(args) > 0) 
[18:01:11.160]                   base::do.call(base::Sys.setenv, args = args)
[18:01:11.160]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:11.160]             }
[18:01:11.160]             else {
[18:01:11.160]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:11.160]             }
[18:01:11.160]             {
[18:01:11.160]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:11.160]                   0L) {
[18:01:11.160]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:11.160]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:11.160]                   base::options(opts)
[18:01:11.160]                 }
[18:01:11.160]                 {
[18:01:11.160]                   {
[18:01:11.160]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:11.160]                     NULL
[18:01:11.160]                   }
[18:01:11.160]                   options(future.plan = NULL)
[18:01:11.160]                   if (is.na(NA_character_)) 
[18:01:11.160]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:11.160]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:11.160]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:11.160]                     .init = FALSE)
[18:01:11.160]                 }
[18:01:11.160]             }
[18:01:11.160]         }
[18:01:11.160]     })
[18:01:11.160]     if (TRUE) {
[18:01:11.160]         base::sink(type = "output", split = FALSE)
[18:01:11.160]         if (TRUE) {
[18:01:11.160]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:11.160]         }
[18:01:11.160]         else {
[18:01:11.160]             ...future.result["stdout"] <- base::list(NULL)
[18:01:11.160]         }
[18:01:11.160]         base::close(...future.stdout)
[18:01:11.160]         ...future.stdout <- NULL
[18:01:11.160]     }
[18:01:11.160]     ...future.result$conditions <- ...future.conditions
[18:01:11.160]     ...future.result$finished <- base::Sys.time()
[18:01:11.160]     ...future.result
[18:01:11.160] }
[18:01:11.166] assign_globals() ...
[18:01:11.167] List of 5
[18:01:11.167]  $ ...future.FUN            :function (...)  
[18:01:11.167]  $ future.call.arguments    : list()
[18:01:11.167]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:11.167]  $ ...future.elements_ii    :List of 3
[18:01:11.167]   ..$ : int 0
[18:01:11.167]   ..$ : int 0
[18:01:11.167]   ..$ : int 0
[18:01:11.167]  $ ...future.seeds_ii       :List of 3
[18:01:11.167]   ..$ : int [1:7] 10407 2000585943 1277356830 -2089408352 -860958827 226502925 99834792
[18:01:11.167]   ..$ : int [1:7] 10407 -1366366742 -1587533199 -987670999 1146693195 -372746989 -1779846945
[18:01:11.167]   ..$ : int [1:7] 10407 -1326244930 -121340665 862160877 1069041468 -111293265 1245428870
[18:01:11.167]  $ ...future.globals.maxSize: NULL
[18:01:11.167]  - attr(*, "where")=List of 5
[18:01:11.167]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[18:01:11.167]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[18:01:11.167]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[18:01:11.167]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[18:01:11.167]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[18:01:11.167]  - attr(*, "resolved")= logi FALSE
[18:01:11.167]  - attr(*, "total_size")= num 616
[18:01:11.167]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:11.167]  - attr(*, "already-done")= logi TRUE
[18:01:11.194] - reassign environment for ‘...future.FUN’
[18:01:11.195] - copied ‘...future.FUN’ to environment
[18:01:11.195] - copied ‘future.call.arguments’ to environment
[18:01:11.195] - copied ‘...future.elements_ii’ to environment
[18:01:11.196] - copied ‘...future.seeds_ii’ to environment
[18:01:11.196] - copied ‘...future.globals.maxSize’ to environment
[18:01:11.196] assign_globals() ... done
[18:01:11.197] requestCore(): workers = 2
[18:01:11.208] MulticoreFuture started
[18:01:11.209] - Launch lazy future ... done
[18:01:11.209] run() for ‘MulticoreFuture’ ... done
[18:01:11.210] Created future:
[18:01:11.212] plan(): Setting new future strategy stack:
[18:01:11.213] List of future strategies:
[18:01:11.213] 1. sequential:
[18:01:11.213]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:11.213]    - tweaked: FALSE
[18:01:11.213]    - call: NULL
[18:01:11.217] plan(): nbrOfWorkers() = 1
[18:01:11.221] plan(): Setting new future strategy stack:
[18:01:11.222] List of future strategies:
[18:01:11.222] 1. multicore:
[18:01:11.222]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:01:11.222]    - tweaked: FALSE
[18:01:11.222]    - call: plan(strategy)
[18:01:11.210] MulticoreFuture:
[18:01:11.210] Label: ‘future_replicate-2’
[18:01:11.210] Expression:
[18:01:11.210] {
[18:01:11.210]     do.call(function(...) {
[18:01:11.210]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.210]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:11.210]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.210]             on.exit(options(oopts), add = TRUE)
[18:01:11.210]         }
[18:01:11.210]         {
[18:01:11.210]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:11.210]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.210]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.210]                   envir = globalenv(), inherits = FALSE)
[18:01:11.210]                 ...future.FUN(...future.X_jj, ...)
[18:01:11.210]             })
[18:01:11.210]         }
[18:01:11.210]     }, args = future.call.arguments)
[18:01:11.210] }
[18:01:11.210] Lazy evaluation: FALSE
[18:01:11.210] Asynchronous evaluation: TRUE
[18:01:11.210] Local evaluation: TRUE
[18:01:11.210] Environment: R_GlobalEnv
[18:01:11.210] Capture standard output: TRUE
[18:01:11.210] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:11.210] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:11.210] Packages: <none>
[18:01:11.210] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:11.210] Resolved: FALSE
[18:01:11.210] Value: <not collected>
[18:01:11.210] Conditions captured: <none>
[18:01:11.210] Early signaling: FALSE
[18:01:11.210] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:11.210] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:11.226] Chunk #2 of 2 ... DONE
[18:01:11.226] Launching 2 futures (chunks) ... DONE
[18:01:11.227] Resolving 2 futures (chunks) ...
[18:01:11.228] resolve() on list ...
[18:01:11.228]  recursive: 0
[18:01:11.229]  length: 2
[18:01:11.229] 
[18:01:11.230] Future #1
[18:01:11.231] result() for MulticoreFuture ...
[18:01:11.238] plan(): nbrOfWorkers() = 2
[18:01:11.240] result() for MulticoreFuture ...
[18:01:11.240] result() for MulticoreFuture ... done
[18:01:11.240] result() for MulticoreFuture ... done
[18:01:11.241] result() for MulticoreFuture ...
[18:01:11.242] result() for MulticoreFuture ... done
[18:01:11.242] signalConditionsASAP(MulticoreFuture, pos=1) ...
[18:01:11.242] - nx: 2
[18:01:11.243] - relay: TRUE
[18:01:11.243] - stdout: TRUE
[18:01:11.243] - signal: TRUE
[18:01:11.243] - resignal: FALSE
[18:01:11.244] - force: TRUE
[18:01:11.244] - relayed: [n=2] FALSE, FALSE
[18:01:11.244] - queued futures: [n=2] FALSE, FALSE
[18:01:11.245]  - until=1
[18:01:11.245]  - relaying element #1
[18:01:11.245] result() for MulticoreFuture ...
[18:01:11.246] result() for MulticoreFuture ... done
[18:01:11.246] result() for MulticoreFuture ...
[18:01:11.246] result() for MulticoreFuture ... done
[18:01:11.247] result() for MulticoreFuture ...
[18:01:11.247] result() for MulticoreFuture ... done
[18:01:11.248] result() for MulticoreFuture ...
[18:01:11.248] result() for MulticoreFuture ... done
[18:01:11.248] - relayed: [n=2] TRUE, FALSE
[18:01:11.248] - queued futures: [n=2] TRUE, FALSE
[18:01:11.249] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[18:01:11.249]  length: 1 (resolved future 1)
[18:01:11.250] Future #2
[18:01:11.250] result() for MulticoreFuture ...
[18:01:11.253] result() for MulticoreFuture ...
[18:01:11.254] result() for MulticoreFuture ... done
[18:01:11.254] result() for MulticoreFuture ... done
[18:01:11.254] result() for MulticoreFuture ...
[18:01:11.255] result() for MulticoreFuture ... done
[18:01:11.255] signalConditionsASAP(MulticoreFuture, pos=2) ...
[18:01:11.255] - nx: 2
[18:01:11.255] - relay: TRUE
[18:01:11.255] - stdout: TRUE
[18:01:11.256] - signal: TRUE
[18:01:11.256] - resignal: FALSE
[18:01:11.256] - force: TRUE
[18:01:11.256] - relayed: [n=2] TRUE, FALSE
[18:01:11.257] - queued futures: [n=2] TRUE, FALSE
[18:01:11.257]  - until=2
[18:01:11.257]  - relaying element #2
[18:01:11.257] result() for MulticoreFuture ...
[18:01:11.257] result() for MulticoreFuture ... done
[18:01:11.258] result() for MulticoreFuture ...
[18:01:11.258] result() for MulticoreFuture ... done
[18:01:11.258] result() for MulticoreFuture ...
[18:01:11.258] result() for MulticoreFuture ... done
[18:01:11.259] result() for MulticoreFuture ...
[18:01:11.259] result() for MulticoreFuture ... done
[18:01:11.259] - relayed: [n=2] TRUE, TRUE
[18:01:11.259] - queued futures: [n=2] TRUE, TRUE
[18:01:11.259] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[18:01:11.260]  length: 0 (resolved future 2)
[18:01:11.260] Relaying remaining futures
[18:01:11.260] signalConditionsASAP(NULL, pos=0) ...
[18:01:11.260] - nx: 2
[18:01:11.261] - relay: TRUE
[18:01:11.261] - stdout: TRUE
[18:01:11.261] - signal: TRUE
[18:01:11.261] - resignal: FALSE
[18:01:11.261] - force: TRUE
[18:01:11.262] - relayed: [n=2] TRUE, TRUE
[18:01:11.262] - queued futures: [n=2] TRUE, TRUE
 - flush all
[18:01:11.262] - relayed: [n=2] TRUE, TRUE
[18:01:11.262] - queued futures: [n=2] TRUE, TRUE
[18:01:11.263] signalConditionsASAP(NULL, pos=0) ... done
[18:01:11.263] resolve() on list ... DONE
[18:01:11.263] result() for MulticoreFuture ...
[18:01:11.263] result() for MulticoreFuture ... done
[18:01:11.263] result() for MulticoreFuture ...
[18:01:11.264] result() for MulticoreFuture ... done
[18:01:11.264] result() for MulticoreFuture ...
[18:01:11.264] result() for MulticoreFuture ... done
[18:01:11.264] result() for MulticoreFuture ...
[18:01:11.265] result() for MulticoreFuture ... done
[18:01:11.265]  - Number of value chunks collected: 2
[18:01:11.265] Resolving 2 futures (chunks) ... DONE
[18:01:11.265] Reducing values from 2 chunks ...
[18:01:11.265]  - Number of values collected after concatenation: 5
[18:01:11.266]  - Number of values expected: 5
[18:01:11.266] Reducing values from 2 chunks ... DONE
[18:01:11.266] future_lapply() ... DONE
[18:01:11.266] future_lapply() ...
[18:01:11.268] Generating random seeds ...
[18:01:11.268] Generating random seed streams for 5 elements ...
[18:01:11.268] Generating random seed streams for 5 elements ... DONE
[18:01:11.268] Generating random seeds ... DONE
[18:01:11.269] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[18:01:11.276] Number of chunks: 2
[18:01:11.277] getGlobalsAndPackagesXApply() ...
[18:01:11.277]  - future.globals: TRUE
[18:01:11.277] getGlobalsAndPackages() ...
[18:01:11.278] Searching for globals...
[18:01:11.283] - globals found: [2] ‘FUN’, ‘sample’
[18:01:11.283] Searching for globals ... DONE
[18:01:11.284] Resolving globals: FALSE
[18:01:11.285] The total size of the 1 globals is 616 bytes (616 bytes)
[18:01:11.285] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[18:01:11.286] - globals: [1] ‘FUN’
[18:01:11.286] 
[18:01:11.286] getGlobalsAndPackages() ... DONE
[18:01:11.286]  - globals found/used: [n=1] ‘FUN’
[18:01:11.287]  - needed namespaces: [n=0] 
[18:01:11.287] Finding globals ... DONE
[18:01:11.287]  - use_args: TRUE
[18:01:11.287]  - Getting '...' globals ...
[18:01:11.288] resolve() on list ...
[18:01:11.288]  recursive: 0
[18:01:11.289]  length: 1
[18:01:11.289]  elements: ‘...’
[18:01:11.289]  length: 0 (resolved future 1)
[18:01:11.289] resolve() on list ... DONE
[18:01:11.290]    - '...' content: [n=0] 
[18:01:11.290] List of 1
[18:01:11.290]  $ ...: list()
[18:01:11.290]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:11.290]  - attr(*, "where")=List of 1
[18:01:11.290]   ..$ ...:<environment: 0x635eb531c378> 
[18:01:11.290]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:11.290]  - attr(*, "resolved")= logi TRUE
[18:01:11.290]  - attr(*, "total_size")= num NA
[18:01:11.296]  - Getting '...' globals ... DONE
[18:01:11.296] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[18:01:11.296] List of 2
[18:01:11.296]  $ ...future.FUN:function (...)  
[18:01:11.296]  $ ...          : list()
[18:01:11.296]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:11.296]  - attr(*, "where")=List of 2
[18:01:11.296]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[18:01:11.296]   ..$ ...          :<environment: 0x635eb531c378> 
[18:01:11.296]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:11.296]  - attr(*, "resolved")= logi FALSE
[18:01:11.296]  - attr(*, "total_size")= num 616
[18:01:11.302] Packages to be attached in all futures: [n=0] 
[18:01:11.302] getGlobalsAndPackagesXApply() ... DONE
[18:01:11.303] Number of futures (= number of chunks): 2
[18:01:11.303] Launching 2 futures (chunks) ...
[18:01:11.303] Chunk #1 of 2 ...
[18:01:11.303]  - Finding globals in 'X' for chunk #1 ...
[18:01:11.304] getGlobalsAndPackages() ...
[18:01:11.304] Searching for globals...
[18:01:11.304] 
[18:01:11.304] Searching for globals ... DONE
[18:01:11.305] - globals: [0] <none>
[18:01:11.305] getGlobalsAndPackages() ... DONE
[18:01:11.305]    + additional globals found: [n=0] 
[18:01:11.305]    + additional namespaces needed: [n=0] 
[18:01:11.305]  - Finding globals in 'X' for chunk #1 ... DONE
[18:01:11.306]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:11.306]  - seeds: [2] <seeds>
[18:01:11.306]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.306] getGlobalsAndPackages() ...
[18:01:11.306] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.307] Resolving globals: FALSE
[18:01:11.307] Tweak future expression to call with '...' arguments ...
[18:01:11.307] {
[18:01:11.307]     do.call(function(...) {
[18:01:11.307]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.307]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:11.307]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.307]             on.exit(options(oopts), add = TRUE)
[18:01:11.307]         }
[18:01:11.307]         {
[18:01:11.307]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:11.307]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.307]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.307]                   envir = globalenv(), inherits = FALSE)
[18:01:11.307]                 ...future.FUN(...future.X_jj, ...)
[18:01:11.307]             })
[18:01:11.307]         }
[18:01:11.307]     }, args = future.call.arguments)
[18:01:11.307] }
[18:01:11.308] Tweak future expression to call with '...' arguments ... DONE
[18:01:11.308] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.309] 
[18:01:11.309] getGlobalsAndPackages() ... DONE
[18:01:11.309] run() for ‘Future’ ...
[18:01:11.310] - state: ‘created’
[18:01:11.310] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:01:11.316] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:11.317] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:01:11.317]   - Field: ‘label’
[18:01:11.317]   - Field: ‘local’
[18:01:11.317]   - Field: ‘owner’
[18:01:11.318]   - Field: ‘envir’
[18:01:11.318]   - Field: ‘workers’
[18:01:11.318]   - Field: ‘packages’
[18:01:11.318]   - Field: ‘gc’
[18:01:11.318]   - Field: ‘job’
[18:01:11.319]   - Field: ‘conditions’
[18:01:11.319]   - Field: ‘expr’
[18:01:11.319]   - Field: ‘uuid’
[18:01:11.319]   - Field: ‘seed’
[18:01:11.319]   - Field: ‘version’
[18:01:11.320]   - Field: ‘result’
[18:01:11.320]   - Field: ‘asynchronous’
[18:01:11.320]   - Field: ‘calls’
[18:01:11.320]   - Field: ‘globals’
[18:01:11.320]   - Field: ‘stdout’
[18:01:11.321]   - Field: ‘earlySignal’
[18:01:11.321]   - Field: ‘lazy’
[18:01:11.321]   - Field: ‘state’
[18:01:11.321] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:01:11.321] - Launch lazy future ...
[18:01:11.322] Packages needed by the future expression (n = 0): <none>
[18:01:11.322] Packages needed by future strategies (n = 0): <none>
[18:01:11.323] {
[18:01:11.323]     {
[18:01:11.323]         {
[18:01:11.323]             ...future.startTime <- base::Sys.time()
[18:01:11.323]             {
[18:01:11.323]                 {
[18:01:11.323]                   {
[18:01:11.323]                     {
[18:01:11.323]                       base::local({
[18:01:11.323]                         has_future <- base::requireNamespace("future", 
[18:01:11.323]                           quietly = TRUE)
[18:01:11.323]                         if (has_future) {
[18:01:11.323]                           ns <- base::getNamespace("future")
[18:01:11.323]                           version <- ns[[".package"]][["version"]]
[18:01:11.323]                           if (is.null(version)) 
[18:01:11.323]                             version <- utils::packageVersion("future")
[18:01:11.323]                         }
[18:01:11.323]                         else {
[18:01:11.323]                           version <- NULL
[18:01:11.323]                         }
[18:01:11.323]                         if (!has_future || version < "1.8.0") {
[18:01:11.323]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:11.323]                             "", base::R.version$version.string), 
[18:01:11.323]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:11.323]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:11.323]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:11.323]                               "release", "version")], collapse = " "), 
[18:01:11.323]                             hostname = base::Sys.info()[["nodename"]])
[18:01:11.323]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:11.323]                             info)
[18:01:11.323]                           info <- base::paste(info, collapse = "; ")
[18:01:11.323]                           if (!has_future) {
[18:01:11.323]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:11.323]                               info)
[18:01:11.323]                           }
[18:01:11.323]                           else {
[18:01:11.323]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:11.323]                               info, version)
[18:01:11.323]                           }
[18:01:11.323]                           base::stop(msg)
[18:01:11.323]                         }
[18:01:11.323]                       })
[18:01:11.323]                     }
[18:01:11.323]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:11.323]                     base::options(mc.cores = 1L)
[18:01:11.323]                   }
[18:01:11.323]                   ...future.strategy.old <- future::plan("list")
[18:01:11.323]                   options(future.plan = NULL)
[18:01:11.323]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:11.323]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:11.323]                 }
[18:01:11.323]                 ...future.workdir <- getwd()
[18:01:11.323]             }
[18:01:11.323]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:11.323]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:11.323]         }
[18:01:11.323]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:11.323]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:11.323]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:11.323]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:11.323]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:11.323]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:11.323]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:11.323]             base::names(...future.oldOptions))
[18:01:11.323]     }
[18:01:11.323]     if (FALSE) {
[18:01:11.323]     }
[18:01:11.323]     else {
[18:01:11.323]         if (TRUE) {
[18:01:11.323]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:11.323]                 open = "w")
[18:01:11.323]         }
[18:01:11.323]         else {
[18:01:11.323]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:11.323]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:11.323]         }
[18:01:11.323]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:11.323]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:11.323]             base::sink(type = "output", split = FALSE)
[18:01:11.323]             base::close(...future.stdout)
[18:01:11.323]         }, add = TRUE)
[18:01:11.323]     }
[18:01:11.323]     ...future.frame <- base::sys.nframe()
[18:01:11.323]     ...future.conditions <- base::list()
[18:01:11.323]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:11.323]     if (FALSE) {
[18:01:11.323]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:11.323]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:11.323]     }
[18:01:11.323]     ...future.result <- base::tryCatch({
[18:01:11.323]         base::withCallingHandlers({
[18:01:11.323]             ...future.value <- base::withVisible(base::local({
[18:01:11.323]                 withCallingHandlers({
[18:01:11.323]                   {
[18:01:11.323]                     do.call(function(...) {
[18:01:11.323]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.323]                       if (!identical(...future.globals.maxSize.org, 
[18:01:11.323]                         ...future.globals.maxSize)) {
[18:01:11.323]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.323]                         on.exit(options(oopts), add = TRUE)
[18:01:11.323]                       }
[18:01:11.323]                       {
[18:01:11.323]                         lapply(seq_along(...future.elements_ii), 
[18:01:11.323]                           FUN = function(jj) {
[18:01:11.323]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.323]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.323]                               envir = globalenv(), inherits = FALSE)
[18:01:11.323]                             ...future.FUN(...future.X_jj, ...)
[18:01:11.323]                           })
[18:01:11.323]                       }
[18:01:11.323]                     }, args = future.call.arguments)
[18:01:11.323]                   }
[18:01:11.323]                 }, immediateCondition = function(cond) {
[18:01:11.323]                   save_rds <- function (object, pathname, ...) 
[18:01:11.323]                   {
[18:01:11.323]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:01:11.323]                     if (file_test("-f", pathname_tmp)) {
[18:01:11.323]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.323]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:01:11.323]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.323]                         fi_tmp[["mtime"]])
[18:01:11.323]                     }
[18:01:11.323]                     tryCatch({
[18:01:11.323]                       saveRDS(object, file = pathname_tmp, ...)
[18:01:11.323]                     }, error = function(ex) {
[18:01:11.323]                       msg <- conditionMessage(ex)
[18:01:11.323]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.323]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:01:11.323]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.323]                         fi_tmp[["mtime"]], msg)
[18:01:11.323]                       ex$message <- msg
[18:01:11.323]                       stop(ex)
[18:01:11.323]                     })
[18:01:11.323]                     stopifnot(file_test("-f", pathname_tmp))
[18:01:11.323]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:01:11.323]                     if (!res || file_test("-f", pathname_tmp)) {
[18:01:11.323]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.323]                       fi <- file.info(pathname)
[18:01:11.323]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:01:11.323]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.323]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:01:11.323]                         fi[["size"]], fi[["mtime"]])
[18:01:11.323]                       stop(msg)
[18:01:11.323]                     }
[18:01:11.323]                     invisible(pathname)
[18:01:11.323]                   }
[18:01:11.323]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:01:11.323]                     rootPath = tempdir()) 
[18:01:11.323]                   {
[18:01:11.323]                     obj <- list(time = Sys.time(), condition = cond)
[18:01:11.323]                     file <- tempfile(pattern = class(cond)[1], 
[18:01:11.323]                       tmpdir = path, fileext = ".rds")
[18:01:11.323]                     save_rds(obj, file)
[18:01:11.323]                   }
[18:01:11.323]                   saveImmediateCondition(cond, path = "/tmp/RtmpTMmi8X/.future/immediateConditions")
[18:01:11.323]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.323]                   {
[18:01:11.323]                     inherits <- base::inherits
[18:01:11.323]                     invokeRestart <- base::invokeRestart
[18:01:11.323]                     is.null <- base::is.null
[18:01:11.323]                     muffled <- FALSE
[18:01:11.323]                     if (inherits(cond, "message")) {
[18:01:11.323]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:11.323]                       if (muffled) 
[18:01:11.323]                         invokeRestart("muffleMessage")
[18:01:11.323]                     }
[18:01:11.323]                     else if (inherits(cond, "warning")) {
[18:01:11.323]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:11.323]                       if (muffled) 
[18:01:11.323]                         invokeRestart("muffleWarning")
[18:01:11.323]                     }
[18:01:11.323]                     else if (inherits(cond, "condition")) {
[18:01:11.323]                       if (!is.null(pattern)) {
[18:01:11.323]                         computeRestarts <- base::computeRestarts
[18:01:11.323]                         grepl <- base::grepl
[18:01:11.323]                         restarts <- computeRestarts(cond)
[18:01:11.323]                         for (restart in restarts) {
[18:01:11.323]                           name <- restart$name
[18:01:11.323]                           if (is.null(name)) 
[18:01:11.323]                             next
[18:01:11.323]                           if (!grepl(pattern, name)) 
[18:01:11.323]                             next
[18:01:11.323]                           invokeRestart(restart)
[18:01:11.323]                           muffled <- TRUE
[18:01:11.323]                           break
[18:01:11.323]                         }
[18:01:11.323]                       }
[18:01:11.323]                     }
[18:01:11.323]                     invisible(muffled)
[18:01:11.323]                   }
[18:01:11.323]                   muffleCondition(cond)
[18:01:11.323]                 })
[18:01:11.323]             }))
[18:01:11.323]             future::FutureResult(value = ...future.value$value, 
[18:01:11.323]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:11.323]                   ...future.rng), globalenv = if (FALSE) 
[18:01:11.323]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:11.323]                     ...future.globalenv.names))
[18:01:11.323]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:11.323]         }, condition = base::local({
[18:01:11.323]             c <- base::c
[18:01:11.323]             inherits <- base::inherits
[18:01:11.323]             invokeRestart <- base::invokeRestart
[18:01:11.323]             length <- base::length
[18:01:11.323]             list <- base::list
[18:01:11.323]             seq.int <- base::seq.int
[18:01:11.323]             signalCondition <- base::signalCondition
[18:01:11.323]             sys.calls <- base::sys.calls
[18:01:11.323]             `[[` <- base::`[[`
[18:01:11.323]             `+` <- base::`+`
[18:01:11.323]             `<<-` <- base::`<<-`
[18:01:11.323]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:11.323]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:11.323]                   3L)]
[18:01:11.323]             }
[18:01:11.323]             function(cond) {
[18:01:11.323]                 is_error <- inherits(cond, "error")
[18:01:11.323]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:11.323]                   NULL)
[18:01:11.323]                 if (is_error) {
[18:01:11.323]                   sessionInformation <- function() {
[18:01:11.323]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:11.323]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:11.323]                       search = base::search(), system = base::Sys.info())
[18:01:11.323]                   }
[18:01:11.323]                   ...future.conditions[[length(...future.conditions) + 
[18:01:11.323]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:11.323]                     cond$call), session = sessionInformation(), 
[18:01:11.323]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:11.323]                   signalCondition(cond)
[18:01:11.323]                 }
[18:01:11.323]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:11.323]                 "immediateCondition"))) {
[18:01:11.323]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:11.323]                   ...future.conditions[[length(...future.conditions) + 
[18:01:11.323]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:11.323]                   if (TRUE && !signal) {
[18:01:11.323]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.323]                     {
[18:01:11.323]                       inherits <- base::inherits
[18:01:11.323]                       invokeRestart <- base::invokeRestart
[18:01:11.323]                       is.null <- base::is.null
[18:01:11.323]                       muffled <- FALSE
[18:01:11.323]                       if (inherits(cond, "message")) {
[18:01:11.323]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:11.323]                         if (muffled) 
[18:01:11.323]                           invokeRestart("muffleMessage")
[18:01:11.323]                       }
[18:01:11.323]                       else if (inherits(cond, "warning")) {
[18:01:11.323]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:11.323]                         if (muffled) 
[18:01:11.323]                           invokeRestart("muffleWarning")
[18:01:11.323]                       }
[18:01:11.323]                       else if (inherits(cond, "condition")) {
[18:01:11.323]                         if (!is.null(pattern)) {
[18:01:11.323]                           computeRestarts <- base::computeRestarts
[18:01:11.323]                           grepl <- base::grepl
[18:01:11.323]                           restarts <- computeRestarts(cond)
[18:01:11.323]                           for (restart in restarts) {
[18:01:11.323]                             name <- restart$name
[18:01:11.323]                             if (is.null(name)) 
[18:01:11.323]                               next
[18:01:11.323]                             if (!grepl(pattern, name)) 
[18:01:11.323]                               next
[18:01:11.323]                             invokeRestart(restart)
[18:01:11.323]                             muffled <- TRUE
[18:01:11.323]                             break
[18:01:11.323]                           }
[18:01:11.323]                         }
[18:01:11.323]                       }
[18:01:11.323]                       invisible(muffled)
[18:01:11.323]                     }
[18:01:11.323]                     muffleCondition(cond, pattern = "^muffle")
[18:01:11.323]                   }
[18:01:11.323]                 }
[18:01:11.323]                 else {
[18:01:11.323]                   if (TRUE) {
[18:01:11.323]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.323]                     {
[18:01:11.323]                       inherits <- base::inherits
[18:01:11.323]                       invokeRestart <- base::invokeRestart
[18:01:11.323]                       is.null <- base::is.null
[18:01:11.323]                       muffled <- FALSE
[18:01:11.323]                       if (inherits(cond, "message")) {
[18:01:11.323]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:11.323]                         if (muffled) 
[18:01:11.323]                           invokeRestart("muffleMessage")
[18:01:11.323]                       }
[18:01:11.323]                       else if (inherits(cond, "warning")) {
[18:01:11.323]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:11.323]                         if (muffled) 
[18:01:11.323]                           invokeRestart("muffleWarning")
[18:01:11.323]                       }
[18:01:11.323]                       else if (inherits(cond, "condition")) {
[18:01:11.323]                         if (!is.null(pattern)) {
[18:01:11.323]                           computeRestarts <- base::computeRestarts
[18:01:11.323]                           grepl <- base::grepl
[18:01:11.323]                           restarts <- computeRestarts(cond)
[18:01:11.323]                           for (restart in restarts) {
[18:01:11.323]                             name <- restart$name
[18:01:11.323]                             if (is.null(name)) 
[18:01:11.323]                               next
[18:01:11.323]                             if (!grepl(pattern, name)) 
[18:01:11.323]                               next
[18:01:11.323]                             invokeRestart(restart)
[18:01:11.323]                             muffled <- TRUE
[18:01:11.323]                             break
[18:01:11.323]                           }
[18:01:11.323]                         }
[18:01:11.323]                       }
[18:01:11.323]                       invisible(muffled)
[18:01:11.323]                     }
[18:01:11.323]                     muffleCondition(cond, pattern = "^muffle")
[18:01:11.323]                   }
[18:01:11.323]                 }
[18:01:11.323]             }
[18:01:11.323]         }))
[18:01:11.323]     }, error = function(ex) {
[18:01:11.323]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:11.323]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:11.323]                 ...future.rng), started = ...future.startTime, 
[18:01:11.323]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:11.323]             version = "1.8"), class = "FutureResult")
[18:01:11.323]     }, finally = {
[18:01:11.323]         if (!identical(...future.workdir, getwd())) 
[18:01:11.323]             setwd(...future.workdir)
[18:01:11.323]         {
[18:01:11.323]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:11.323]                 ...future.oldOptions$nwarnings <- NULL
[18:01:11.323]             }
[18:01:11.323]             base::options(...future.oldOptions)
[18:01:11.323]             if (.Platform$OS.type == "windows") {
[18:01:11.323]                 old_names <- names(...future.oldEnvVars)
[18:01:11.323]                 envs <- base::Sys.getenv()
[18:01:11.323]                 names <- names(envs)
[18:01:11.323]                 common <- intersect(names, old_names)
[18:01:11.323]                 added <- setdiff(names, old_names)
[18:01:11.323]                 removed <- setdiff(old_names, names)
[18:01:11.323]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:11.323]                   envs[common]]
[18:01:11.323]                 NAMES <- toupper(changed)
[18:01:11.323]                 args <- list()
[18:01:11.323]                 for (kk in seq_along(NAMES)) {
[18:01:11.323]                   name <- changed[[kk]]
[18:01:11.323]                   NAME <- NAMES[[kk]]
[18:01:11.323]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.323]                     next
[18:01:11.323]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:11.323]                 }
[18:01:11.323]                 NAMES <- toupper(added)
[18:01:11.323]                 for (kk in seq_along(NAMES)) {
[18:01:11.323]                   name <- added[[kk]]
[18:01:11.323]                   NAME <- NAMES[[kk]]
[18:01:11.323]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.323]                     next
[18:01:11.323]                   args[[name]] <- ""
[18:01:11.323]                 }
[18:01:11.323]                 NAMES <- toupper(removed)
[18:01:11.323]                 for (kk in seq_along(NAMES)) {
[18:01:11.323]                   name <- removed[[kk]]
[18:01:11.323]                   NAME <- NAMES[[kk]]
[18:01:11.323]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.323]                     next
[18:01:11.323]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:11.323]                 }
[18:01:11.323]                 if (length(args) > 0) 
[18:01:11.323]                   base::do.call(base::Sys.setenv, args = args)
[18:01:11.323]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:11.323]             }
[18:01:11.323]             else {
[18:01:11.323]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:11.323]             }
[18:01:11.323]             {
[18:01:11.323]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:11.323]                   0L) {
[18:01:11.323]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:11.323]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:11.323]                   base::options(opts)
[18:01:11.323]                 }
[18:01:11.323]                 {
[18:01:11.323]                   {
[18:01:11.323]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:11.323]                     NULL
[18:01:11.323]                   }
[18:01:11.323]                   options(future.plan = NULL)
[18:01:11.323]                   if (is.na(NA_character_)) 
[18:01:11.323]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:11.323]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:11.323]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:11.323]                     .init = FALSE)
[18:01:11.323]                 }
[18:01:11.323]             }
[18:01:11.323]         }
[18:01:11.323]     })
[18:01:11.323]     if (TRUE) {
[18:01:11.323]         base::sink(type = "output", split = FALSE)
[18:01:11.323]         if (TRUE) {
[18:01:11.323]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:11.323]         }
[18:01:11.323]         else {
[18:01:11.323]             ...future.result["stdout"] <- base::list(NULL)
[18:01:11.323]         }
[18:01:11.323]         base::close(...future.stdout)
[18:01:11.323]         ...future.stdout <- NULL
[18:01:11.323]     }
[18:01:11.323]     ...future.result$conditions <- ...future.conditions
[18:01:11.323]     ...future.result$finished <- base::Sys.time()
[18:01:11.323]     ...future.result
[18:01:11.323] }
[18:01:11.328] assign_globals() ...
[18:01:11.328] List of 5
[18:01:11.328]  $ ...future.FUN            :function (...)  
[18:01:11.328]  $ future.call.arguments    : list()
[18:01:11.328]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:11.328]  $ ...future.elements_ii    :List of 2
[18:01:11.328]   ..$ : int 0
[18:01:11.328]   ..$ : int 0
[18:01:11.328]  $ ...future.seeds_ii       :List of 2
[18:01:11.328]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[18:01:11.328]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[18:01:11.328]  $ ...future.globals.maxSize: NULL
[18:01:11.328]  - attr(*, "where")=List of 5
[18:01:11.328]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[18:01:11.328]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[18:01:11.328]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[18:01:11.328]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[18:01:11.328]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[18:01:11.328]  - attr(*, "resolved")= logi FALSE
[18:01:11.328]  - attr(*, "total_size")= num 616
[18:01:11.328]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:11.328]  - attr(*, "already-done")= logi TRUE
[18:01:11.343] - reassign environment for ‘...future.FUN’
[18:01:11.344] - copied ‘...future.FUN’ to environment
[18:01:11.344] - copied ‘future.call.arguments’ to environment
[18:01:11.344] - copied ‘...future.elements_ii’ to environment
[18:01:11.344] - copied ‘...future.seeds_ii’ to environment
[18:01:11.344] - copied ‘...future.globals.maxSize’ to environment
[18:01:11.345] assign_globals() ... done
[18:01:11.345] requestCore(): workers = 2
[18:01:11.348] MulticoreFuture started
[18:01:11.349] - Launch lazy future ... done
[18:01:11.350] run() for ‘MulticoreFuture’ ... done
[18:01:11.350] Created future:
[18:01:11.351] plan(): Setting new future strategy stack:
[18:01:11.351] List of future strategies:
[18:01:11.351] 1. sequential:
[18:01:11.351]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:11.351]    - tweaked: FALSE
[18:01:11.351]    - call: NULL
[18:01:11.353] plan(): nbrOfWorkers() = 1
[18:01:11.357] plan(): Setting new future strategy stack:
[18:01:11.357] List of future strategies:
[18:01:11.357] 1. multicore:
[18:01:11.357]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:01:11.357]    - tweaked: FALSE
[18:01:11.357]    - call: plan(strategy)
[18:01:11.351] MulticoreFuture:
[18:01:11.351] Label: ‘future_replicate-1’
[18:01:11.351] Expression:
[18:01:11.351] {
[18:01:11.351]     do.call(function(...) {
[18:01:11.351]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.351]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:11.351]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.351]             on.exit(options(oopts), add = TRUE)
[18:01:11.351]         }
[18:01:11.351]         {
[18:01:11.351]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:11.351]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.351]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.351]                   envir = globalenv(), inherits = FALSE)
[18:01:11.351]                 ...future.FUN(...future.X_jj, ...)
[18:01:11.351]             })
[18:01:11.351]         }
[18:01:11.351]     }, args = future.call.arguments)
[18:01:11.351] }
[18:01:11.351] Lazy evaluation: FALSE
[18:01:11.351] Asynchronous evaluation: TRUE
[18:01:11.351] Local evaluation: TRUE
[18:01:11.351] Environment: R_GlobalEnv
[18:01:11.351] Capture standard output: TRUE
[18:01:11.351] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:11.351] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:11.351] Packages: <none>
[18:01:11.351] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:11.351] Resolved: FALSE
[18:01:11.351] Value: <not collected>
[18:01:11.351] Conditions captured: <none>
[18:01:11.351] Early signaling: FALSE
[18:01:11.351] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:11.351] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:11.366] Chunk #1 of 2 ... DONE
[18:01:11.366] plan(): nbrOfWorkers() = 2
[18:01:11.366] Chunk #2 of 2 ...
[18:01:11.367]  - Finding globals in 'X' for chunk #2 ...
[18:01:11.368] getGlobalsAndPackages() ...
[18:01:11.368] Searching for globals...
[18:01:11.369] 
[18:01:11.370] Searching for globals ... DONE
[18:01:11.370] - globals: [0] <none>
[18:01:11.371] getGlobalsAndPackages() ... DONE
[18:01:11.371]    + additional globals found: [n=0] 
[18:01:11.371]    + additional namespaces needed: [n=0] 
[18:01:11.372]  - Finding globals in 'X' for chunk #2 ... DONE
[18:01:11.372]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:11.373]  - seeds: [3] <seeds>
[18:01:11.373]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.374] getGlobalsAndPackages() ...
[18:01:11.374] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.374] Resolving globals: FALSE
[18:01:11.375] Tweak future expression to call with '...' arguments ...
[18:01:11.375] {
[18:01:11.375]     do.call(function(...) {
[18:01:11.375]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.375]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:11.375]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.375]             on.exit(options(oopts), add = TRUE)
[18:01:11.375]         }
[18:01:11.375]         {
[18:01:11.375]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:11.375]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.375]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.375]                   envir = globalenv(), inherits = FALSE)
[18:01:11.375]                 ...future.FUN(...future.X_jj, ...)
[18:01:11.375]             })
[18:01:11.375]         }
[18:01:11.375]     }, args = future.call.arguments)
[18:01:11.375] }
[18:01:11.376] Tweak future expression to call with '...' arguments ... DONE
[18:01:11.377] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.378] 
[18:01:11.378] getGlobalsAndPackages() ... DONE
[18:01:11.379] run() for ‘Future’ ...
[18:01:11.379] - state: ‘created’
[18:01:11.380] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:01:11.388] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:11.389] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:01:11.389]   - Field: ‘label’
[18:01:11.389]   - Field: ‘local’
[18:01:11.390]   - Field: ‘owner’
[18:01:11.390]   - Field: ‘envir’
[18:01:11.390]   - Field: ‘workers’
[18:01:11.391]   - Field: ‘packages’
[18:01:11.391]   - Field: ‘gc’
[18:01:11.391]   - Field: ‘job’
[18:01:11.392]   - Field: ‘conditions’
[18:01:11.392]   - Field: ‘expr’
[18:01:11.392]   - Field: ‘uuid’
[18:01:11.393]   - Field: ‘seed’
[18:01:11.393]   - Field: ‘version’
[18:01:11.393]   - Field: ‘result’
[18:01:11.393]   - Field: ‘asynchronous’
[18:01:11.394]   - Field: ‘calls’
[18:01:11.394]   - Field: ‘globals’
[18:01:11.394]   - Field: ‘stdout’
[18:01:11.395]   - Field: ‘earlySignal’
[18:01:11.395]   - Field: ‘lazy’
[18:01:11.395]   - Field: ‘state’
[18:01:11.396] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:01:11.396] - Launch lazy future ...
[18:01:11.397] Packages needed by the future expression (n = 0): <none>
[18:01:11.397] Packages needed by future strategies (n = 0): <none>
[18:01:11.399] {
[18:01:11.399]     {
[18:01:11.399]         {
[18:01:11.399]             ...future.startTime <- base::Sys.time()
[18:01:11.399]             {
[18:01:11.399]                 {
[18:01:11.399]                   {
[18:01:11.399]                     {
[18:01:11.399]                       base::local({
[18:01:11.399]                         has_future <- base::requireNamespace("future", 
[18:01:11.399]                           quietly = TRUE)
[18:01:11.399]                         if (has_future) {
[18:01:11.399]                           ns <- base::getNamespace("future")
[18:01:11.399]                           version <- ns[[".package"]][["version"]]
[18:01:11.399]                           if (is.null(version)) 
[18:01:11.399]                             version <- utils::packageVersion("future")
[18:01:11.399]                         }
[18:01:11.399]                         else {
[18:01:11.399]                           version <- NULL
[18:01:11.399]                         }
[18:01:11.399]                         if (!has_future || version < "1.8.0") {
[18:01:11.399]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:11.399]                             "", base::R.version$version.string), 
[18:01:11.399]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:11.399]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:11.399]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:11.399]                               "release", "version")], collapse = " "), 
[18:01:11.399]                             hostname = base::Sys.info()[["nodename"]])
[18:01:11.399]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:11.399]                             info)
[18:01:11.399]                           info <- base::paste(info, collapse = "; ")
[18:01:11.399]                           if (!has_future) {
[18:01:11.399]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:11.399]                               info)
[18:01:11.399]                           }
[18:01:11.399]                           else {
[18:01:11.399]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:11.399]                               info, version)
[18:01:11.399]                           }
[18:01:11.399]                           base::stop(msg)
[18:01:11.399]                         }
[18:01:11.399]                       })
[18:01:11.399]                     }
[18:01:11.399]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:11.399]                     base::options(mc.cores = 1L)
[18:01:11.399]                   }
[18:01:11.399]                   ...future.strategy.old <- future::plan("list")
[18:01:11.399]                   options(future.plan = NULL)
[18:01:11.399]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:11.399]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:11.399]                 }
[18:01:11.399]                 ...future.workdir <- getwd()
[18:01:11.399]             }
[18:01:11.399]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:11.399]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:11.399]         }
[18:01:11.399]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:11.399]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:11.399]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:11.399]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:11.399]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:11.399]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:11.399]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:11.399]             base::names(...future.oldOptions))
[18:01:11.399]     }
[18:01:11.399]     if (FALSE) {
[18:01:11.399]     }
[18:01:11.399]     else {
[18:01:11.399]         if (TRUE) {
[18:01:11.399]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:11.399]                 open = "w")
[18:01:11.399]         }
[18:01:11.399]         else {
[18:01:11.399]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:11.399]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:11.399]         }
[18:01:11.399]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:11.399]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:11.399]             base::sink(type = "output", split = FALSE)
[18:01:11.399]             base::close(...future.stdout)
[18:01:11.399]         }, add = TRUE)
[18:01:11.399]     }
[18:01:11.399]     ...future.frame <- base::sys.nframe()
[18:01:11.399]     ...future.conditions <- base::list()
[18:01:11.399]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:11.399]     if (FALSE) {
[18:01:11.399]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:11.399]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:11.399]     }
[18:01:11.399]     ...future.result <- base::tryCatch({
[18:01:11.399]         base::withCallingHandlers({
[18:01:11.399]             ...future.value <- base::withVisible(base::local({
[18:01:11.399]                 withCallingHandlers({
[18:01:11.399]                   {
[18:01:11.399]                     do.call(function(...) {
[18:01:11.399]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.399]                       if (!identical(...future.globals.maxSize.org, 
[18:01:11.399]                         ...future.globals.maxSize)) {
[18:01:11.399]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.399]                         on.exit(options(oopts), add = TRUE)
[18:01:11.399]                       }
[18:01:11.399]                       {
[18:01:11.399]                         lapply(seq_along(...future.elements_ii), 
[18:01:11.399]                           FUN = function(jj) {
[18:01:11.399]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.399]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.399]                               envir = globalenv(), inherits = FALSE)
[18:01:11.399]                             ...future.FUN(...future.X_jj, ...)
[18:01:11.399]                           })
[18:01:11.399]                       }
[18:01:11.399]                     }, args = future.call.arguments)
[18:01:11.399]                   }
[18:01:11.399]                 }, immediateCondition = function(cond) {
[18:01:11.399]                   save_rds <- function (object, pathname, ...) 
[18:01:11.399]                   {
[18:01:11.399]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:01:11.399]                     if (file_test("-f", pathname_tmp)) {
[18:01:11.399]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.399]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:01:11.399]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.399]                         fi_tmp[["mtime"]])
[18:01:11.399]                     }
[18:01:11.399]                     tryCatch({
[18:01:11.399]                       saveRDS(object, file = pathname_tmp, ...)
[18:01:11.399]                     }, error = function(ex) {
[18:01:11.399]                       msg <- conditionMessage(ex)
[18:01:11.399]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.399]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:01:11.399]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.399]                         fi_tmp[["mtime"]], msg)
[18:01:11.399]                       ex$message <- msg
[18:01:11.399]                       stop(ex)
[18:01:11.399]                     })
[18:01:11.399]                     stopifnot(file_test("-f", pathname_tmp))
[18:01:11.399]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:01:11.399]                     if (!res || file_test("-f", pathname_tmp)) {
[18:01:11.399]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.399]                       fi <- file.info(pathname)
[18:01:11.399]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:01:11.399]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.399]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:01:11.399]                         fi[["size"]], fi[["mtime"]])
[18:01:11.399]                       stop(msg)
[18:01:11.399]                     }
[18:01:11.399]                     invisible(pathname)
[18:01:11.399]                   }
[18:01:11.399]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:01:11.399]                     rootPath = tempdir()) 
[18:01:11.399]                   {
[18:01:11.399]                     obj <- list(time = Sys.time(), condition = cond)
[18:01:11.399]                     file <- tempfile(pattern = class(cond)[1], 
[18:01:11.399]                       tmpdir = path, fileext = ".rds")
[18:01:11.399]                     save_rds(obj, file)
[18:01:11.399]                   }
[18:01:11.399]                   saveImmediateCondition(cond, path = "/tmp/RtmpTMmi8X/.future/immediateConditions")
[18:01:11.399]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.399]                   {
[18:01:11.399]                     inherits <- base::inherits
[18:01:11.399]                     invokeRestart <- base::invokeRestart
[18:01:11.399]                     is.null <- base::is.null
[18:01:11.399]                     muffled <- FALSE
[18:01:11.399]                     if (inherits(cond, "message")) {
[18:01:11.399]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:11.399]                       if (muffled) 
[18:01:11.399]                         invokeRestart("muffleMessage")
[18:01:11.399]                     }
[18:01:11.399]                     else if (inherits(cond, "warning")) {
[18:01:11.399]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:11.399]                       if (muffled) 
[18:01:11.399]                         invokeRestart("muffleWarning")
[18:01:11.399]                     }
[18:01:11.399]                     else if (inherits(cond, "condition")) {
[18:01:11.399]                       if (!is.null(pattern)) {
[18:01:11.399]                         computeRestarts <- base::computeRestarts
[18:01:11.399]                         grepl <- base::grepl
[18:01:11.399]                         restarts <- computeRestarts(cond)
[18:01:11.399]                         for (restart in restarts) {
[18:01:11.399]                           name <- restart$name
[18:01:11.399]                           if (is.null(name)) 
[18:01:11.399]                             next
[18:01:11.399]                           if (!grepl(pattern, name)) 
[18:01:11.399]                             next
[18:01:11.399]                           invokeRestart(restart)
[18:01:11.399]                           muffled <- TRUE
[18:01:11.399]                           break
[18:01:11.399]                         }
[18:01:11.399]                       }
[18:01:11.399]                     }
[18:01:11.399]                     invisible(muffled)
[18:01:11.399]                   }
[18:01:11.399]                   muffleCondition(cond)
[18:01:11.399]                 })
[18:01:11.399]             }))
[18:01:11.399]             future::FutureResult(value = ...future.value$value, 
[18:01:11.399]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:11.399]                   ...future.rng), globalenv = if (FALSE) 
[18:01:11.399]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:11.399]                     ...future.globalenv.names))
[18:01:11.399]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:11.399]         }, condition = base::local({
[18:01:11.399]             c <- base::c
[18:01:11.399]             inherits <- base::inherits
[18:01:11.399]             invokeRestart <- base::invokeRestart
[18:01:11.399]             length <- base::length
[18:01:11.399]             list <- base::list
[18:01:11.399]             seq.int <- base::seq.int
[18:01:11.399]             signalCondition <- base::signalCondition
[18:01:11.399]             sys.calls <- base::sys.calls
[18:01:11.399]             `[[` <- base::`[[`
[18:01:11.399]             `+` <- base::`+`
[18:01:11.399]             `<<-` <- base::`<<-`
[18:01:11.399]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:11.399]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:11.399]                   3L)]
[18:01:11.399]             }
[18:01:11.399]             function(cond) {
[18:01:11.399]                 is_error <- inherits(cond, "error")
[18:01:11.399]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:11.399]                   NULL)
[18:01:11.399]                 if (is_error) {
[18:01:11.399]                   sessionInformation <- function() {
[18:01:11.399]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:11.399]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:11.399]                       search = base::search(), system = base::Sys.info())
[18:01:11.399]                   }
[18:01:11.399]                   ...future.conditions[[length(...future.conditions) + 
[18:01:11.399]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:11.399]                     cond$call), session = sessionInformation(), 
[18:01:11.399]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:11.399]                   signalCondition(cond)
[18:01:11.399]                 }
[18:01:11.399]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:11.399]                 "immediateCondition"))) {
[18:01:11.399]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:11.399]                   ...future.conditions[[length(...future.conditions) + 
[18:01:11.399]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:11.399]                   if (TRUE && !signal) {
[18:01:11.399]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.399]                     {
[18:01:11.399]                       inherits <- base::inherits
[18:01:11.399]                       invokeRestart <- base::invokeRestart
[18:01:11.399]                       is.null <- base::is.null
[18:01:11.399]                       muffled <- FALSE
[18:01:11.399]                       if (inherits(cond, "message")) {
[18:01:11.399]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:11.399]                         if (muffled) 
[18:01:11.399]                           invokeRestart("muffleMessage")
[18:01:11.399]                       }
[18:01:11.399]                       else if (inherits(cond, "warning")) {
[18:01:11.399]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:11.399]                         if (muffled) 
[18:01:11.399]                           invokeRestart("muffleWarning")
[18:01:11.399]                       }
[18:01:11.399]                       else if (inherits(cond, "condition")) {
[18:01:11.399]                         if (!is.null(pattern)) {
[18:01:11.399]                           computeRestarts <- base::computeRestarts
[18:01:11.399]                           grepl <- base::grepl
[18:01:11.399]                           restarts <- computeRestarts(cond)
[18:01:11.399]                           for (restart in restarts) {
[18:01:11.399]                             name <- restart$name
[18:01:11.399]                             if (is.null(name)) 
[18:01:11.399]                               next
[18:01:11.399]                             if (!grepl(pattern, name)) 
[18:01:11.399]                               next
[18:01:11.399]                             invokeRestart(restart)
[18:01:11.399]                             muffled <- TRUE
[18:01:11.399]                             break
[18:01:11.399]                           }
[18:01:11.399]                         }
[18:01:11.399]                       }
[18:01:11.399]                       invisible(muffled)
[18:01:11.399]                     }
[18:01:11.399]                     muffleCondition(cond, pattern = "^muffle")
[18:01:11.399]                   }
[18:01:11.399]                 }
[18:01:11.399]                 else {
[18:01:11.399]                   if (TRUE) {
[18:01:11.399]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.399]                     {
[18:01:11.399]                       inherits <- base::inherits
[18:01:11.399]                       invokeRestart <- base::invokeRestart
[18:01:11.399]                       is.null <- base::is.null
[18:01:11.399]                       muffled <- FALSE
[18:01:11.399]                       if (inherits(cond, "message")) {
[18:01:11.399]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:11.399]                         if (muffled) 
[18:01:11.399]                           invokeRestart("muffleMessage")
[18:01:11.399]                       }
[18:01:11.399]                       else if (inherits(cond, "warning")) {
[18:01:11.399]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:11.399]                         if (muffled) 
[18:01:11.399]                           invokeRestart("muffleWarning")
[18:01:11.399]                       }
[18:01:11.399]                       else if (inherits(cond, "condition")) {
[18:01:11.399]                         if (!is.null(pattern)) {
[18:01:11.399]                           computeRestarts <- base::computeRestarts
[18:01:11.399]                           grepl <- base::grepl
[18:01:11.399]                           restarts <- computeRestarts(cond)
[18:01:11.399]                           for (restart in restarts) {
[18:01:11.399]                             name <- restart$name
[18:01:11.399]                             if (is.null(name)) 
[18:01:11.399]                               next
[18:01:11.399]                             if (!grepl(pattern, name)) 
[18:01:11.399]                               next
[18:01:11.399]                             invokeRestart(restart)
[18:01:11.399]                             muffled <- TRUE
[18:01:11.399]                             break
[18:01:11.399]                           }
[18:01:11.399]                         }
[18:01:11.399]                       }
[18:01:11.399]                       invisible(muffled)
[18:01:11.399]                     }
[18:01:11.399]                     muffleCondition(cond, pattern = "^muffle")
[18:01:11.399]                   }
[18:01:11.399]                 }
[18:01:11.399]             }
[18:01:11.399]         }))
[18:01:11.399]     }, error = function(ex) {
[18:01:11.399]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:11.399]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:11.399]                 ...future.rng), started = ...future.startTime, 
[18:01:11.399]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:11.399]             version = "1.8"), class = "FutureResult")
[18:01:11.399]     }, finally = {
[18:01:11.399]         if (!identical(...future.workdir, getwd())) 
[18:01:11.399]             setwd(...future.workdir)
[18:01:11.399]         {
[18:01:11.399]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:11.399]                 ...future.oldOptions$nwarnings <- NULL
[18:01:11.399]             }
[18:01:11.399]             base::options(...future.oldOptions)
[18:01:11.399]             if (.Platform$OS.type == "windows") {
[18:01:11.399]                 old_names <- names(...future.oldEnvVars)
[18:01:11.399]                 envs <- base::Sys.getenv()
[18:01:11.399]                 names <- names(envs)
[18:01:11.399]                 common <- intersect(names, old_names)
[18:01:11.399]                 added <- setdiff(names, old_names)
[18:01:11.399]                 removed <- setdiff(old_names, names)
[18:01:11.399]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:11.399]                   envs[common]]
[18:01:11.399]                 NAMES <- toupper(changed)
[18:01:11.399]                 args <- list()
[18:01:11.399]                 for (kk in seq_along(NAMES)) {
[18:01:11.399]                   name <- changed[[kk]]
[18:01:11.399]                   NAME <- NAMES[[kk]]
[18:01:11.399]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.399]                     next
[18:01:11.399]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:11.399]                 }
[18:01:11.399]                 NAMES <- toupper(added)
[18:01:11.399]                 for (kk in seq_along(NAMES)) {
[18:01:11.399]                   name <- added[[kk]]
[18:01:11.399]                   NAME <- NAMES[[kk]]
[18:01:11.399]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.399]                     next
[18:01:11.399]                   args[[name]] <- ""
[18:01:11.399]                 }
[18:01:11.399]                 NAMES <- toupper(removed)
[18:01:11.399]                 for (kk in seq_along(NAMES)) {
[18:01:11.399]                   name <- removed[[kk]]
[18:01:11.399]                   NAME <- NAMES[[kk]]
[18:01:11.399]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.399]                     next
[18:01:11.399]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:11.399]                 }
[18:01:11.399]                 if (length(args) > 0) 
[18:01:11.399]                   base::do.call(base::Sys.setenv, args = args)
[18:01:11.399]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:11.399]             }
[18:01:11.399]             else {
[18:01:11.399]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:11.399]             }
[18:01:11.399]             {
[18:01:11.399]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:11.399]                   0L) {
[18:01:11.399]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:11.399]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:11.399]                   base::options(opts)
[18:01:11.399]                 }
[18:01:11.399]                 {
[18:01:11.399]                   {
[18:01:11.399]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:11.399]                     NULL
[18:01:11.399]                   }
[18:01:11.399]                   options(future.plan = NULL)
[18:01:11.399]                   if (is.na(NA_character_)) 
[18:01:11.399]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:11.399]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:11.399]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:11.399]                     .init = FALSE)
[18:01:11.399]                 }
[18:01:11.399]             }
[18:01:11.399]         }
[18:01:11.399]     })
[18:01:11.399]     if (TRUE) {
[18:01:11.399]         base::sink(type = "output", split = FALSE)
[18:01:11.399]         if (TRUE) {
[18:01:11.399]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:11.399]         }
[18:01:11.399]         else {
[18:01:11.399]             ...future.result["stdout"] <- base::list(NULL)
[18:01:11.399]         }
[18:01:11.399]         base::close(...future.stdout)
[18:01:11.399]         ...future.stdout <- NULL
[18:01:11.399]     }
[18:01:11.399]     ...future.result$conditions <- ...future.conditions
[18:01:11.399]     ...future.result$finished <- base::Sys.time()
[18:01:11.399]     ...future.result
[18:01:11.399] }
[18:01:11.405] assign_globals() ...
[18:01:11.406] List of 5
[18:01:11.406]  $ ...future.FUN            :function (...)  
[18:01:11.406]  $ future.call.arguments    : list()
[18:01:11.406]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:11.406]  $ ...future.elements_ii    :List of 3
[18:01:11.406]   ..$ : int 0
[18:01:11.406]   ..$ : int 0
[18:01:11.406]   ..$ : int 0
[18:01:11.406]  $ ...future.seeds_ii       :List of 3
[18:01:11.406]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[18:01:11.406]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[18:01:11.406]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[18:01:11.406]  $ ...future.globals.maxSize: NULL
[18:01:11.406]  - attr(*, "where")=List of 5
[18:01:11.406]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[18:01:11.406]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[18:01:11.406]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[18:01:11.406]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[18:01:11.406]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[18:01:11.406]  - attr(*, "resolved")= logi FALSE
[18:01:11.406]  - attr(*, "total_size")= num 616
[18:01:11.406]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:11.406]  - attr(*, "already-done")= logi TRUE
[18:01:11.424] - reassign environment for ‘...future.FUN’
[18:01:11.425] - copied ‘...future.FUN’ to environment
[18:01:11.425] - copied ‘future.call.arguments’ to environment
[18:01:11.425] - copied ‘...future.elements_ii’ to environment
[18:01:11.425] - copied ‘...future.seeds_ii’ to environment
[18:01:11.426] - copied ‘...future.globals.maxSize’ to environment
[18:01:11.426] assign_globals() ... done
[18:01:11.426] requestCore(): workers = 2
[18:01:11.430] MulticoreFuture started
[18:01:11.431] - Launch lazy future ... done
[18:01:11.431] run() for ‘MulticoreFuture’ ... done
[18:01:11.432] Created future:
[18:01:11.432] plan(): Setting new future strategy stack:
[18:01:11.433] List of future strategies:
[18:01:11.433] 1. sequential:
[18:01:11.433]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:11.433]    - tweaked: FALSE
[18:01:11.433]    - call: NULL
[18:01:11.441] plan(): nbrOfWorkers() = 1
[18:01:11.446] plan(): Setting new future strategy stack:
[18:01:11.446] List of future strategies:
[18:01:11.446] 1. multicore:
[18:01:11.446]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:01:11.446]    - tweaked: FALSE
[18:01:11.446]    - call: plan(strategy)
[18:01:11.457] plan(): nbrOfWorkers() = 2
[18:01:11.432] MulticoreFuture:
[18:01:11.432] Label: ‘future_replicate-2’
[18:01:11.432] Expression:
[18:01:11.432] {
[18:01:11.432]     do.call(function(...) {
[18:01:11.432]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.432]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:11.432]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.432]             on.exit(options(oopts), add = TRUE)
[18:01:11.432]         }
[18:01:11.432]         {
[18:01:11.432]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:11.432]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.432]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.432]                   envir = globalenv(), inherits = FALSE)
[18:01:11.432]                 ...future.FUN(...future.X_jj, ...)
[18:01:11.432]             })
[18:01:11.432]         }
[18:01:11.432]     }, args = future.call.arguments)
[18:01:11.432] }
[18:01:11.432] Lazy evaluation: FALSE
[18:01:11.432] Asynchronous evaluation: TRUE
[18:01:11.432] Local evaluation: TRUE
[18:01:11.432] Environment: R_GlobalEnv
[18:01:11.432] Capture standard output: TRUE
[18:01:11.432] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:11.432] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:11.432] Packages: <none>
[18:01:11.432] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:11.432] Resolved: TRUE
[18:01:11.432] Value: <not collected>
[18:01:11.432] Conditions captured: <none>
[18:01:11.432] Early signaling: FALSE
[18:01:11.432] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:11.432] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:11.460] Chunk #2 of 2 ... DONE
[18:01:11.460] Launching 2 futures (chunks) ... DONE
[18:01:11.461] Resolving 2 futures (chunks) ...
[18:01:11.461] resolve() on list ...
[18:01:11.462]  recursive: 0
[18:01:11.462]  length: 2
[18:01:11.463] 
[18:01:11.464] Future #1
[18:01:11.464] result() for MulticoreFuture ...
[18:01:11.466] result() for MulticoreFuture ...
[18:01:11.467] result() for MulticoreFuture ... done
[18:01:11.467] result() for MulticoreFuture ... done
[18:01:11.467] result() for MulticoreFuture ...
[18:01:11.468] result() for MulticoreFuture ... done
[18:01:11.468] signalConditionsASAP(MulticoreFuture, pos=1) ...
[18:01:11.468] - nx: 2
[18:01:11.469] - relay: TRUE
[18:01:11.469] - stdout: TRUE
[18:01:11.469] - signal: TRUE
[18:01:11.470] - resignal: FALSE
[18:01:11.470] - force: TRUE
[18:01:11.470] - relayed: [n=2] FALSE, FALSE
[18:01:11.471] - queued futures: [n=2] FALSE, FALSE
[18:01:11.471]  - until=1
[18:01:11.472]  - relaying element #1
[18:01:11.472] result() for MulticoreFuture ...
[18:01:11.472] result() for MulticoreFuture ... done
[18:01:11.473] result() for MulticoreFuture ...
[18:01:11.473] result() for MulticoreFuture ... done
[18:01:11.474] result() for MulticoreFuture ...
[18:01:11.474] result() for MulticoreFuture ... done
[18:01:11.475] result() for MulticoreFuture ...
[18:01:11.475] result() for MulticoreFuture ... done
[18:01:11.475] - relayed: [n=2] TRUE, FALSE
[18:01:11.476] - queued futures: [n=2] TRUE, FALSE
[18:01:11.476] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[18:01:11.477]  length: 1 (resolved future 1)
[18:01:11.477] Future #2
[18:01:11.478] result() for MulticoreFuture ...
[18:01:11.479] result() for MulticoreFuture ...
[18:01:11.480] result() for MulticoreFuture ... done
[18:01:11.482] result() for MulticoreFuture ... done
[18:01:11.483] result() for MulticoreFuture ...
[18:01:11.483] result() for MulticoreFuture ... done
[18:01:11.485] signalConditionsASAP(MulticoreFuture, pos=2) ...
[18:01:11.485] - nx: 2
[18:01:11.485] - relay: TRUE
[18:01:11.486] - stdout: TRUE
[18:01:11.486] - signal: TRUE
[18:01:11.486] - resignal: FALSE
[18:01:11.486] - force: TRUE
[18:01:11.486] - relayed: [n=2] TRUE, FALSE
[18:01:11.487] - queued futures: [n=2] TRUE, FALSE
[18:01:11.487]  - until=2
[18:01:11.487]  - relaying element #2
[18:01:11.487] result() for MulticoreFuture ...
[18:01:11.488] result() for MulticoreFuture ... done
[18:01:11.488] result() for MulticoreFuture ...
[18:01:11.488] result() for MulticoreFuture ... done
[18:01:11.488] result() for MulticoreFuture ...
[18:01:11.489] result() for MulticoreFuture ... done
[18:01:11.489] result() for MulticoreFuture ...
[18:01:11.489] result() for MulticoreFuture ... done
[18:01:11.489] - relayed: [n=2] TRUE, TRUE
[18:01:11.490] - queued futures: [n=2] TRUE, TRUE
[18:01:11.490] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[18:01:11.490]  length: 0 (resolved future 2)
[18:01:11.491] Relaying remaining futures
[18:01:11.491] signalConditionsASAP(NULL, pos=0) ...
[18:01:11.491] - nx: 2
[18:01:11.491] - relay: TRUE
[18:01:11.492] - stdout: TRUE
[18:01:11.492] - signal: TRUE
[18:01:11.492] - resignal: FALSE
[18:01:11.492] - force: TRUE
[18:01:11.492] - relayed: [n=2] TRUE, TRUE
[18:01:11.493] - queued futures: [n=2] TRUE, TRUE
 - flush all
[18:01:11.493] - relayed: [n=2] TRUE, TRUE
[18:01:11.493] - queued futures: [n=2] TRUE, TRUE
[18:01:11.494] signalConditionsASAP(NULL, pos=0) ... done
[18:01:11.494] resolve() on list ... DONE
[18:01:11.494] result() for MulticoreFuture ...
[18:01:11.494] result() for MulticoreFuture ... done
[18:01:11.495] result() for MulticoreFuture ...
[18:01:11.495] result() for MulticoreFuture ... done
[18:01:11.495] result() for MulticoreFuture ...
[18:01:11.495] result() for MulticoreFuture ... done
[18:01:11.496] result() for MulticoreFuture ...
[18:01:11.496] result() for MulticoreFuture ... done
[18:01:11.496]  - Number of value chunks collected: 2
[18:01:11.496] Resolving 2 futures (chunks) ... DONE
[18:01:11.496] Reducing values from 2 chunks ...
[18:01:11.497]  - Number of values collected after concatenation: 5
[18:01:11.497]  - Number of values expected: 5
[18:01:11.497] Reducing values from 2 chunks ... DONE
[18:01:11.497] future_lapply() ... DONE
[18:01:11.498] future_lapply() ...
[18:01:11.499] Generating random seeds ...
[18:01:11.500] Generating random seed streams for 5 elements ...
[18:01:11.500] Generating random seed streams for 5 elements ... DONE
[18:01:11.500] Generating random seeds ... DONE
[18:01:11.501] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[18:01:11.509] Number of chunks: 2
[18:01:11.509] getGlobalsAndPackagesXApply() ...
[18:01:11.509]  - future.globals: TRUE
[18:01:11.509] getGlobalsAndPackages() ...
[18:01:11.510] Searching for globals...
[18:01:11.512] - globals found: [2] ‘FUN’, ‘sample’
[18:01:11.513] Searching for globals ... DONE
[18:01:11.513] Resolving globals: FALSE
[18:01:11.514] The total size of the 1 globals is 616 bytes (616 bytes)
[18:01:11.515] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[18:01:11.515] - globals: [1] ‘FUN’
[18:01:11.515] 
[18:01:11.516] getGlobalsAndPackages() ... DONE
[18:01:11.516]  - globals found/used: [n=1] ‘FUN’
[18:01:11.516]  - needed namespaces: [n=0] 
[18:01:11.516] Finding globals ... DONE
[18:01:11.517]  - use_args: TRUE
[18:01:11.517]  - Getting '...' globals ...
[18:01:11.518] resolve() on list ...
[18:01:11.518]  recursive: 0
[18:01:11.518]  length: 1
[18:01:11.518]  elements: ‘...’
[18:01:11.519]  length: 0 (resolved future 1)
[18:01:11.519] resolve() on list ... DONE
[18:01:11.519]    - '...' content: [n=0] 
[18:01:11.519] List of 1
[18:01:11.519]  $ ...: list()
[18:01:11.519]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:11.519]  - attr(*, "where")=List of 1
[18:01:11.519]   ..$ ...:<environment: 0x635eb4d51d38> 
[18:01:11.519]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:11.519]  - attr(*, "resolved")= logi TRUE
[18:01:11.519]  - attr(*, "total_size")= num NA
[18:01:11.526]  - Getting '...' globals ... DONE
[18:01:11.526] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[18:01:11.527] List of 2
[18:01:11.527]  $ ...future.FUN:function (...)  
[18:01:11.527]  $ ...          : list()
[18:01:11.527]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:11.527]  - attr(*, "where")=List of 2
[18:01:11.527]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[18:01:11.527]   ..$ ...          :<environment: 0x635eb4d51d38> 
[18:01:11.527]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:11.527]  - attr(*, "resolved")= logi FALSE
[18:01:11.527]  - attr(*, "total_size")= num 616
[18:01:11.536] Packages to be attached in all futures: [n=0] 
[18:01:11.536] getGlobalsAndPackagesXApply() ... DONE
[18:01:11.536] Number of futures (= number of chunks): 2
[18:01:11.537] Launching 2 futures (chunks) ...
[18:01:11.537] Chunk #1 of 2 ...
[18:01:11.537]  - Finding globals in 'X' for chunk #1 ...
[18:01:11.537] getGlobalsAndPackages() ...
[18:01:11.538] Searching for globals...
[18:01:11.538] 
[18:01:11.538] Searching for globals ... DONE
[18:01:11.539] - globals: [0] <none>
[18:01:11.539] getGlobalsAndPackages() ... DONE
[18:01:11.539]    + additional globals found: [n=0] 
[18:01:11.539]    + additional namespaces needed: [n=0] 
[18:01:11.539]  - Finding globals in 'X' for chunk #1 ... DONE
[18:01:11.540]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:11.540]  - seeds: [2] <seeds>
[18:01:11.540]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.540] getGlobalsAndPackages() ...
[18:01:11.541] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.541] Resolving globals: FALSE
[18:01:11.541] Tweak future expression to call with '...' arguments ...
[18:01:11.541] {
[18:01:11.541]     do.call(function(...) {
[18:01:11.541]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.541]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:11.541]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.541]             on.exit(options(oopts), add = TRUE)
[18:01:11.541]         }
[18:01:11.541]         {
[18:01:11.541]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:11.541]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.541]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.541]                   envir = globalenv(), inherits = FALSE)
[18:01:11.541]                 ...future.FUN(...future.X_jj, ...)
[18:01:11.541]             })
[18:01:11.541]         }
[18:01:11.541]     }, args = future.call.arguments)
[18:01:11.541] }
[18:01:11.542] Tweak future expression to call with '...' arguments ... DONE
[18:01:11.543] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.543] 
[18:01:11.543] getGlobalsAndPackages() ... DONE
[18:01:11.544] run() for ‘Future’ ...
[18:01:11.544] - state: ‘created’
[18:01:11.544] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:01:11.551] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:11.552] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:01:11.552]   - Field: ‘label’
[18:01:11.553]   - Field: ‘local’
[18:01:11.553]   - Field: ‘owner’
[18:01:11.553]   - Field: ‘envir’
[18:01:11.553]   - Field: ‘workers’
[18:01:11.554]   - Field: ‘packages’
[18:01:11.554]   - Field: ‘gc’
[18:01:11.554]   - Field: ‘job’
[18:01:11.554]   - Field: ‘conditions’
[18:01:11.555]   - Field: ‘expr’
[18:01:11.555]   - Field: ‘uuid’
[18:01:11.555]   - Field: ‘seed’
[18:01:11.555]   - Field: ‘version’
[18:01:11.555]   - Field: ‘result’
[18:01:11.556]   - Field: ‘asynchronous’
[18:01:11.556]   - Field: ‘calls’
[18:01:11.556]   - Field: ‘globals’
[18:01:11.556]   - Field: ‘stdout’
[18:01:11.556]   - Field: ‘earlySignal’
[18:01:11.557]   - Field: ‘lazy’
[18:01:11.557]   - Field: ‘state’
[18:01:11.557] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:01:11.557] - Launch lazy future ...
[18:01:11.558] Packages needed by the future expression (n = 0): <none>
[18:01:11.558] Packages needed by future strategies (n = 0): <none>
[18:01:11.559] {
[18:01:11.559]     {
[18:01:11.559]         {
[18:01:11.559]             ...future.startTime <- base::Sys.time()
[18:01:11.559]             {
[18:01:11.559]                 {
[18:01:11.559]                   {
[18:01:11.559]                     {
[18:01:11.559]                       base::local({
[18:01:11.559]                         has_future <- base::requireNamespace("future", 
[18:01:11.559]                           quietly = TRUE)
[18:01:11.559]                         if (has_future) {
[18:01:11.559]                           ns <- base::getNamespace("future")
[18:01:11.559]                           version <- ns[[".package"]][["version"]]
[18:01:11.559]                           if (is.null(version)) 
[18:01:11.559]                             version <- utils::packageVersion("future")
[18:01:11.559]                         }
[18:01:11.559]                         else {
[18:01:11.559]                           version <- NULL
[18:01:11.559]                         }
[18:01:11.559]                         if (!has_future || version < "1.8.0") {
[18:01:11.559]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:11.559]                             "", base::R.version$version.string), 
[18:01:11.559]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:11.559]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:11.559]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:11.559]                               "release", "version")], collapse = " "), 
[18:01:11.559]                             hostname = base::Sys.info()[["nodename"]])
[18:01:11.559]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:11.559]                             info)
[18:01:11.559]                           info <- base::paste(info, collapse = "; ")
[18:01:11.559]                           if (!has_future) {
[18:01:11.559]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:11.559]                               info)
[18:01:11.559]                           }
[18:01:11.559]                           else {
[18:01:11.559]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:11.559]                               info, version)
[18:01:11.559]                           }
[18:01:11.559]                           base::stop(msg)
[18:01:11.559]                         }
[18:01:11.559]                       })
[18:01:11.559]                     }
[18:01:11.559]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:11.559]                     base::options(mc.cores = 1L)
[18:01:11.559]                   }
[18:01:11.559]                   ...future.strategy.old <- future::plan("list")
[18:01:11.559]                   options(future.plan = NULL)
[18:01:11.559]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:11.559]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:11.559]                 }
[18:01:11.559]                 ...future.workdir <- getwd()
[18:01:11.559]             }
[18:01:11.559]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:11.559]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:11.559]         }
[18:01:11.559]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:11.559]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:11.559]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:11.559]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:11.559]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:11.559]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:11.559]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:11.559]             base::names(...future.oldOptions))
[18:01:11.559]     }
[18:01:11.559]     if (FALSE) {
[18:01:11.559]     }
[18:01:11.559]     else {
[18:01:11.559]         if (TRUE) {
[18:01:11.559]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:11.559]                 open = "w")
[18:01:11.559]         }
[18:01:11.559]         else {
[18:01:11.559]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:11.559]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:11.559]         }
[18:01:11.559]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:11.559]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:11.559]             base::sink(type = "output", split = FALSE)
[18:01:11.559]             base::close(...future.stdout)
[18:01:11.559]         }, add = TRUE)
[18:01:11.559]     }
[18:01:11.559]     ...future.frame <- base::sys.nframe()
[18:01:11.559]     ...future.conditions <- base::list()
[18:01:11.559]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:11.559]     if (FALSE) {
[18:01:11.559]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:11.559]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:11.559]     }
[18:01:11.559]     ...future.result <- base::tryCatch({
[18:01:11.559]         base::withCallingHandlers({
[18:01:11.559]             ...future.value <- base::withVisible(base::local({
[18:01:11.559]                 withCallingHandlers({
[18:01:11.559]                   {
[18:01:11.559]                     do.call(function(...) {
[18:01:11.559]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.559]                       if (!identical(...future.globals.maxSize.org, 
[18:01:11.559]                         ...future.globals.maxSize)) {
[18:01:11.559]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.559]                         on.exit(options(oopts), add = TRUE)
[18:01:11.559]                       }
[18:01:11.559]                       {
[18:01:11.559]                         lapply(seq_along(...future.elements_ii), 
[18:01:11.559]                           FUN = function(jj) {
[18:01:11.559]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.559]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.559]                               envir = globalenv(), inherits = FALSE)
[18:01:11.559]                             ...future.FUN(...future.X_jj, ...)
[18:01:11.559]                           })
[18:01:11.559]                       }
[18:01:11.559]                     }, args = future.call.arguments)
[18:01:11.559]                   }
[18:01:11.559]                 }, immediateCondition = function(cond) {
[18:01:11.559]                   save_rds <- function (object, pathname, ...) 
[18:01:11.559]                   {
[18:01:11.559]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:01:11.559]                     if (file_test("-f", pathname_tmp)) {
[18:01:11.559]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.559]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:01:11.559]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.559]                         fi_tmp[["mtime"]])
[18:01:11.559]                     }
[18:01:11.559]                     tryCatch({
[18:01:11.559]                       saveRDS(object, file = pathname_tmp, ...)
[18:01:11.559]                     }, error = function(ex) {
[18:01:11.559]                       msg <- conditionMessage(ex)
[18:01:11.559]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.559]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:01:11.559]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.559]                         fi_tmp[["mtime"]], msg)
[18:01:11.559]                       ex$message <- msg
[18:01:11.559]                       stop(ex)
[18:01:11.559]                     })
[18:01:11.559]                     stopifnot(file_test("-f", pathname_tmp))
[18:01:11.559]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:01:11.559]                     if (!res || file_test("-f", pathname_tmp)) {
[18:01:11.559]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.559]                       fi <- file.info(pathname)
[18:01:11.559]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:01:11.559]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.559]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:01:11.559]                         fi[["size"]], fi[["mtime"]])
[18:01:11.559]                       stop(msg)
[18:01:11.559]                     }
[18:01:11.559]                     invisible(pathname)
[18:01:11.559]                   }
[18:01:11.559]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:01:11.559]                     rootPath = tempdir()) 
[18:01:11.559]                   {
[18:01:11.559]                     obj <- list(time = Sys.time(), condition = cond)
[18:01:11.559]                     file <- tempfile(pattern = class(cond)[1], 
[18:01:11.559]                       tmpdir = path, fileext = ".rds")
[18:01:11.559]                     save_rds(obj, file)
[18:01:11.559]                   }
[18:01:11.559]                   saveImmediateCondition(cond, path = "/tmp/RtmpTMmi8X/.future/immediateConditions")
[18:01:11.559]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.559]                   {
[18:01:11.559]                     inherits <- base::inherits
[18:01:11.559]                     invokeRestart <- base::invokeRestart
[18:01:11.559]                     is.null <- base::is.null
[18:01:11.559]                     muffled <- FALSE
[18:01:11.559]                     if (inherits(cond, "message")) {
[18:01:11.559]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:11.559]                       if (muffled) 
[18:01:11.559]                         invokeRestart("muffleMessage")
[18:01:11.559]                     }
[18:01:11.559]                     else if (inherits(cond, "warning")) {
[18:01:11.559]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:11.559]                       if (muffled) 
[18:01:11.559]                         invokeRestart("muffleWarning")
[18:01:11.559]                     }
[18:01:11.559]                     else if (inherits(cond, "condition")) {
[18:01:11.559]                       if (!is.null(pattern)) {
[18:01:11.559]                         computeRestarts <- base::computeRestarts
[18:01:11.559]                         grepl <- base::grepl
[18:01:11.559]                         restarts <- computeRestarts(cond)
[18:01:11.559]                         for (restart in restarts) {
[18:01:11.559]                           name <- restart$name
[18:01:11.559]                           if (is.null(name)) 
[18:01:11.559]                             next
[18:01:11.559]                           if (!grepl(pattern, name)) 
[18:01:11.559]                             next
[18:01:11.559]                           invokeRestart(restart)
[18:01:11.559]                           muffled <- TRUE
[18:01:11.559]                           break
[18:01:11.559]                         }
[18:01:11.559]                       }
[18:01:11.559]                     }
[18:01:11.559]                     invisible(muffled)
[18:01:11.559]                   }
[18:01:11.559]                   muffleCondition(cond)
[18:01:11.559]                 })
[18:01:11.559]             }))
[18:01:11.559]             future::FutureResult(value = ...future.value$value, 
[18:01:11.559]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:11.559]                   ...future.rng), globalenv = if (FALSE) 
[18:01:11.559]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:11.559]                     ...future.globalenv.names))
[18:01:11.559]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:11.559]         }, condition = base::local({
[18:01:11.559]             c <- base::c
[18:01:11.559]             inherits <- base::inherits
[18:01:11.559]             invokeRestart <- base::invokeRestart
[18:01:11.559]             length <- base::length
[18:01:11.559]             list <- base::list
[18:01:11.559]             seq.int <- base::seq.int
[18:01:11.559]             signalCondition <- base::signalCondition
[18:01:11.559]             sys.calls <- base::sys.calls
[18:01:11.559]             `[[` <- base::`[[`
[18:01:11.559]             `+` <- base::`+`
[18:01:11.559]             `<<-` <- base::`<<-`
[18:01:11.559]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:11.559]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:11.559]                   3L)]
[18:01:11.559]             }
[18:01:11.559]             function(cond) {
[18:01:11.559]                 is_error <- inherits(cond, "error")
[18:01:11.559]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:11.559]                   NULL)
[18:01:11.559]                 if (is_error) {
[18:01:11.559]                   sessionInformation <- function() {
[18:01:11.559]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:11.559]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:11.559]                       search = base::search(), system = base::Sys.info())
[18:01:11.559]                   }
[18:01:11.559]                   ...future.conditions[[length(...future.conditions) + 
[18:01:11.559]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:11.559]                     cond$call), session = sessionInformation(), 
[18:01:11.559]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:11.559]                   signalCondition(cond)
[18:01:11.559]                 }
[18:01:11.559]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:11.559]                 "immediateCondition"))) {
[18:01:11.559]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:11.559]                   ...future.conditions[[length(...future.conditions) + 
[18:01:11.559]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:11.559]                   if (TRUE && !signal) {
[18:01:11.559]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.559]                     {
[18:01:11.559]                       inherits <- base::inherits
[18:01:11.559]                       invokeRestart <- base::invokeRestart
[18:01:11.559]                       is.null <- base::is.null
[18:01:11.559]                       muffled <- FALSE
[18:01:11.559]                       if (inherits(cond, "message")) {
[18:01:11.559]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:11.559]                         if (muffled) 
[18:01:11.559]                           invokeRestart("muffleMessage")
[18:01:11.559]                       }
[18:01:11.559]                       else if (inherits(cond, "warning")) {
[18:01:11.559]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:11.559]                         if (muffled) 
[18:01:11.559]                           invokeRestart("muffleWarning")
[18:01:11.559]                       }
[18:01:11.559]                       else if (inherits(cond, "condition")) {
[18:01:11.559]                         if (!is.null(pattern)) {
[18:01:11.559]                           computeRestarts <- base::computeRestarts
[18:01:11.559]                           grepl <- base::grepl
[18:01:11.559]                           restarts <- computeRestarts(cond)
[18:01:11.559]                           for (restart in restarts) {
[18:01:11.559]                             name <- restart$name
[18:01:11.559]                             if (is.null(name)) 
[18:01:11.559]                               next
[18:01:11.559]                             if (!grepl(pattern, name)) 
[18:01:11.559]                               next
[18:01:11.559]                             invokeRestart(restart)
[18:01:11.559]                             muffled <- TRUE
[18:01:11.559]                             break
[18:01:11.559]                           }
[18:01:11.559]                         }
[18:01:11.559]                       }
[18:01:11.559]                       invisible(muffled)
[18:01:11.559]                     }
[18:01:11.559]                     muffleCondition(cond, pattern = "^muffle")
[18:01:11.559]                   }
[18:01:11.559]                 }
[18:01:11.559]                 else {
[18:01:11.559]                   if (TRUE) {
[18:01:11.559]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.559]                     {
[18:01:11.559]                       inherits <- base::inherits
[18:01:11.559]                       invokeRestart <- base::invokeRestart
[18:01:11.559]                       is.null <- base::is.null
[18:01:11.559]                       muffled <- FALSE
[18:01:11.559]                       if (inherits(cond, "message")) {
[18:01:11.559]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:11.559]                         if (muffled) 
[18:01:11.559]                           invokeRestart("muffleMessage")
[18:01:11.559]                       }
[18:01:11.559]                       else if (inherits(cond, "warning")) {
[18:01:11.559]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:11.559]                         if (muffled) 
[18:01:11.559]                           invokeRestart("muffleWarning")
[18:01:11.559]                       }
[18:01:11.559]                       else if (inherits(cond, "condition")) {
[18:01:11.559]                         if (!is.null(pattern)) {
[18:01:11.559]                           computeRestarts <- base::computeRestarts
[18:01:11.559]                           grepl <- base::grepl
[18:01:11.559]                           restarts <- computeRestarts(cond)
[18:01:11.559]                           for (restart in restarts) {
[18:01:11.559]                             name <- restart$name
[18:01:11.559]                             if (is.null(name)) 
[18:01:11.559]                               next
[18:01:11.559]                             if (!grepl(pattern, name)) 
[18:01:11.559]                               next
[18:01:11.559]                             invokeRestart(restart)
[18:01:11.559]                             muffled <- TRUE
[18:01:11.559]                             break
[18:01:11.559]                           }
[18:01:11.559]                         }
[18:01:11.559]                       }
[18:01:11.559]                       invisible(muffled)
[18:01:11.559]                     }
[18:01:11.559]                     muffleCondition(cond, pattern = "^muffle")
[18:01:11.559]                   }
[18:01:11.559]                 }
[18:01:11.559]             }
[18:01:11.559]         }))
[18:01:11.559]     }, error = function(ex) {
[18:01:11.559]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:11.559]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:11.559]                 ...future.rng), started = ...future.startTime, 
[18:01:11.559]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:11.559]             version = "1.8"), class = "FutureResult")
[18:01:11.559]     }, finally = {
[18:01:11.559]         if (!identical(...future.workdir, getwd())) 
[18:01:11.559]             setwd(...future.workdir)
[18:01:11.559]         {
[18:01:11.559]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:11.559]                 ...future.oldOptions$nwarnings <- NULL
[18:01:11.559]             }
[18:01:11.559]             base::options(...future.oldOptions)
[18:01:11.559]             if (.Platform$OS.type == "windows") {
[18:01:11.559]                 old_names <- names(...future.oldEnvVars)
[18:01:11.559]                 envs <- base::Sys.getenv()
[18:01:11.559]                 names <- names(envs)
[18:01:11.559]                 common <- intersect(names, old_names)
[18:01:11.559]                 added <- setdiff(names, old_names)
[18:01:11.559]                 removed <- setdiff(old_names, names)
[18:01:11.559]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:11.559]                   envs[common]]
[18:01:11.559]                 NAMES <- toupper(changed)
[18:01:11.559]                 args <- list()
[18:01:11.559]                 for (kk in seq_along(NAMES)) {
[18:01:11.559]                   name <- changed[[kk]]
[18:01:11.559]                   NAME <- NAMES[[kk]]
[18:01:11.559]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.559]                     next
[18:01:11.559]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:11.559]                 }
[18:01:11.559]                 NAMES <- toupper(added)
[18:01:11.559]                 for (kk in seq_along(NAMES)) {
[18:01:11.559]                   name <- added[[kk]]
[18:01:11.559]                   NAME <- NAMES[[kk]]
[18:01:11.559]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.559]                     next
[18:01:11.559]                   args[[name]] <- ""
[18:01:11.559]                 }
[18:01:11.559]                 NAMES <- toupper(removed)
[18:01:11.559]                 for (kk in seq_along(NAMES)) {
[18:01:11.559]                   name <- removed[[kk]]
[18:01:11.559]                   NAME <- NAMES[[kk]]
[18:01:11.559]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.559]                     next
[18:01:11.559]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:11.559]                 }
[18:01:11.559]                 if (length(args) > 0) 
[18:01:11.559]                   base::do.call(base::Sys.setenv, args = args)
[18:01:11.559]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:11.559]             }
[18:01:11.559]             else {
[18:01:11.559]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:11.559]             }
[18:01:11.559]             {
[18:01:11.559]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:11.559]                   0L) {
[18:01:11.559]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:11.559]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:11.559]                   base::options(opts)
[18:01:11.559]                 }
[18:01:11.559]                 {
[18:01:11.559]                   {
[18:01:11.559]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:11.559]                     NULL
[18:01:11.559]                   }
[18:01:11.559]                   options(future.plan = NULL)
[18:01:11.559]                   if (is.na(NA_character_)) 
[18:01:11.559]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:11.559]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:11.559]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:11.559]                     .init = FALSE)
[18:01:11.559]                 }
[18:01:11.559]             }
[18:01:11.559]         }
[18:01:11.559]     })
[18:01:11.559]     if (TRUE) {
[18:01:11.559]         base::sink(type = "output", split = FALSE)
[18:01:11.559]         if (TRUE) {
[18:01:11.559]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:11.559]         }
[18:01:11.559]         else {
[18:01:11.559]             ...future.result["stdout"] <- base::list(NULL)
[18:01:11.559]         }
[18:01:11.559]         base::close(...future.stdout)
[18:01:11.559]         ...future.stdout <- NULL
[18:01:11.559]     }
[18:01:11.559]     ...future.result$conditions <- ...future.conditions
[18:01:11.559]     ...future.result$finished <- base::Sys.time()
[18:01:11.559]     ...future.result
[18:01:11.559] }
[18:01:11.564] assign_globals() ...
[18:01:11.564] List of 5
[18:01:11.564]  $ ...future.FUN            :function (...)  
[18:01:11.564]  $ future.call.arguments    : list()
[18:01:11.564]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:11.564]  $ ...future.elements_ii    :List of 2
[18:01:11.564]   ..$ : int 0
[18:01:11.564]   ..$ : int 0
[18:01:11.564]  $ ...future.seeds_ii       :List of 2
[18:01:11.564]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[18:01:11.564]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[18:01:11.564]  $ ...future.globals.maxSize: NULL
[18:01:11.564]  - attr(*, "where")=List of 5
[18:01:11.564]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[18:01:11.564]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[18:01:11.564]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[18:01:11.564]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[18:01:11.564]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[18:01:11.564]  - attr(*, "resolved")= logi FALSE
[18:01:11.564]  - attr(*, "total_size")= num 616
[18:01:11.564]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:11.564]  - attr(*, "already-done")= logi TRUE
[18:01:11.576] - reassign environment for ‘...future.FUN’
[18:01:11.577] - copied ‘...future.FUN’ to environment
[18:01:11.577] - copied ‘future.call.arguments’ to environment
[18:01:11.577] - copied ‘...future.elements_ii’ to environment
[18:01:11.577] - copied ‘...future.seeds_ii’ to environment
[18:01:11.578] - copied ‘...future.globals.maxSize’ to environment
[18:01:11.578] assign_globals() ... done
[18:01:11.578] requestCore(): workers = 2
[18:01:11.581] MulticoreFuture started
[18:01:11.582] - Launch lazy future ... done
[18:01:11.583] run() for ‘MulticoreFuture’ ... done
[18:01:11.583] Created future:
[18:01:11.583] plan(): Setting new future strategy stack:
[18:01:11.584] List of future strategies:
[18:01:11.584] 1. sequential:
[18:01:11.584]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:11.584]    - tweaked: FALSE
[18:01:11.584]    - call: NULL
[18:01:11.586] plan(): nbrOfWorkers() = 1
[18:01:11.590] plan(): Setting new future strategy stack:
[18:01:11.590] List of future strategies:
[18:01:11.590] 1. multicore:
[18:01:11.590]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:01:11.590]    - tweaked: FALSE
[18:01:11.590]    - call: plan(strategy)
[18:01:11.583] MulticoreFuture:
[18:01:11.583] Label: ‘future_replicate-1’
[18:01:11.583] Expression:
[18:01:11.583] {
[18:01:11.583]     do.call(function(...) {
[18:01:11.583]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.583]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:11.583]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.583]             on.exit(options(oopts), add = TRUE)
[18:01:11.583]         }
[18:01:11.583]         {
[18:01:11.583]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:11.583]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.583]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.583]                   envir = globalenv(), inherits = FALSE)
[18:01:11.583]                 ...future.FUN(...future.X_jj, ...)
[18:01:11.583]             })
[18:01:11.583]         }
[18:01:11.583]     }, args = future.call.arguments)
[18:01:11.583] }
[18:01:11.583] Lazy evaluation: FALSE
[18:01:11.583] Asynchronous evaluation: TRUE
[18:01:11.583] Local evaluation: TRUE
[18:01:11.583] Environment: R_GlobalEnv
[18:01:11.583] Capture standard output: TRUE
[18:01:11.583] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:11.583] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:11.583] Packages: <none>
[18:01:11.583] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:11.583] Resolved: FALSE
[18:01:11.583] Value: <not collected>
[18:01:11.583] Conditions captured: <none>
[18:01:11.583] Early signaling: FALSE
[18:01:11.583] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:11.583] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:11.599] Chunk #1 of 2 ... DONE
[18:01:11.599] plan(): nbrOfWorkers() = 2
[18:01:11.599] Chunk #2 of 2 ...
[18:01:11.600]  - Finding globals in 'X' for chunk #2 ...
[18:01:11.600] getGlobalsAndPackages() ...
[18:01:11.600] Searching for globals...
[18:01:11.601] 
[18:01:11.601] Searching for globals ... DONE
[18:01:11.602] - globals: [0] <none>
[18:01:11.602] getGlobalsAndPackages() ... DONE
[18:01:11.602]    + additional globals found: [n=0] 
[18:01:11.602]    + additional namespaces needed: [n=0] 
[18:01:11.603]  - Finding globals in 'X' for chunk #2 ... DONE
[18:01:11.604]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:11.604]  - seeds: [3] <seeds>
[18:01:11.605]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.605] getGlobalsAndPackages() ...
[18:01:11.605] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.606] Resolving globals: FALSE
[18:01:11.606] Tweak future expression to call with '...' arguments ...
[18:01:11.607] {
[18:01:11.607]     do.call(function(...) {
[18:01:11.607]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.607]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:11.607]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.607]             on.exit(options(oopts), add = TRUE)
[18:01:11.607]         }
[18:01:11.607]         {
[18:01:11.607]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:11.607]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.607]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.607]                   envir = globalenv(), inherits = FALSE)
[18:01:11.607]                 ...future.FUN(...future.X_jj, ...)
[18:01:11.607]             })
[18:01:11.607]         }
[18:01:11.607]     }, args = future.call.arguments)
[18:01:11.607] }
[18:01:11.612] Tweak future expression to call with '...' arguments ... DONE
[18:01:11.614] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.615] 
[18:01:11.615] getGlobalsAndPackages() ... DONE
[18:01:11.616] run() for ‘Future’ ...
[18:01:11.616] - state: ‘created’
[18:01:11.617] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:01:11.627] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:11.627] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:01:11.628]   - Field: ‘label’
[18:01:11.628]   - Field: ‘local’
[18:01:11.629]   - Field: ‘owner’
[18:01:11.629]   - Field: ‘envir’
[18:01:11.629]   - Field: ‘workers’
[18:01:11.630]   - Field: ‘packages’
[18:01:11.630]   - Field: ‘gc’
[18:01:11.630]   - Field: ‘job’
[18:01:11.631]   - Field: ‘conditions’
[18:01:11.631]   - Field: ‘expr’
[18:01:11.631]   - Field: ‘uuid’
[18:01:11.632]   - Field: ‘seed’
[18:01:11.632]   - Field: ‘version’
[18:01:11.632]   - Field: ‘result’
[18:01:11.633]   - Field: ‘asynchronous’
[18:01:11.633]   - Field: ‘calls’
[18:01:11.633]   - Field: ‘globals’
[18:01:11.634]   - Field: ‘stdout’
[18:01:11.634]   - Field: ‘earlySignal’
[18:01:11.634]   - Field: ‘lazy’
[18:01:11.634]   - Field: ‘state’
[18:01:11.635] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:01:11.635] - Launch lazy future ...
[18:01:11.636] Packages needed by the future expression (n = 0): <none>
[18:01:11.636] Packages needed by future strategies (n = 0): <none>
[18:01:11.638] {
[18:01:11.638]     {
[18:01:11.638]         {
[18:01:11.638]             ...future.startTime <- base::Sys.time()
[18:01:11.638]             {
[18:01:11.638]                 {
[18:01:11.638]                   {
[18:01:11.638]                     {
[18:01:11.638]                       base::local({
[18:01:11.638]                         has_future <- base::requireNamespace("future", 
[18:01:11.638]                           quietly = TRUE)
[18:01:11.638]                         if (has_future) {
[18:01:11.638]                           ns <- base::getNamespace("future")
[18:01:11.638]                           version <- ns[[".package"]][["version"]]
[18:01:11.638]                           if (is.null(version)) 
[18:01:11.638]                             version <- utils::packageVersion("future")
[18:01:11.638]                         }
[18:01:11.638]                         else {
[18:01:11.638]                           version <- NULL
[18:01:11.638]                         }
[18:01:11.638]                         if (!has_future || version < "1.8.0") {
[18:01:11.638]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:11.638]                             "", base::R.version$version.string), 
[18:01:11.638]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:11.638]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:11.638]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:11.638]                               "release", "version")], collapse = " "), 
[18:01:11.638]                             hostname = base::Sys.info()[["nodename"]])
[18:01:11.638]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:11.638]                             info)
[18:01:11.638]                           info <- base::paste(info, collapse = "; ")
[18:01:11.638]                           if (!has_future) {
[18:01:11.638]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:11.638]                               info)
[18:01:11.638]                           }
[18:01:11.638]                           else {
[18:01:11.638]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:11.638]                               info, version)
[18:01:11.638]                           }
[18:01:11.638]                           base::stop(msg)
[18:01:11.638]                         }
[18:01:11.638]                       })
[18:01:11.638]                     }
[18:01:11.638]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:11.638]                     base::options(mc.cores = 1L)
[18:01:11.638]                   }
[18:01:11.638]                   ...future.strategy.old <- future::plan("list")
[18:01:11.638]                   options(future.plan = NULL)
[18:01:11.638]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:11.638]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:11.638]                 }
[18:01:11.638]                 ...future.workdir <- getwd()
[18:01:11.638]             }
[18:01:11.638]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:11.638]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:11.638]         }
[18:01:11.638]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:11.638]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:11.638]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:11.638]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:11.638]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:11.638]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:11.638]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:11.638]             base::names(...future.oldOptions))
[18:01:11.638]     }
[18:01:11.638]     if (FALSE) {
[18:01:11.638]     }
[18:01:11.638]     else {
[18:01:11.638]         if (TRUE) {
[18:01:11.638]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:11.638]                 open = "w")
[18:01:11.638]         }
[18:01:11.638]         else {
[18:01:11.638]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:11.638]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:11.638]         }
[18:01:11.638]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:11.638]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:11.638]             base::sink(type = "output", split = FALSE)
[18:01:11.638]             base::close(...future.stdout)
[18:01:11.638]         }, add = TRUE)
[18:01:11.638]     }
[18:01:11.638]     ...future.frame <- base::sys.nframe()
[18:01:11.638]     ...future.conditions <- base::list()
[18:01:11.638]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:11.638]     if (FALSE) {
[18:01:11.638]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:11.638]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:11.638]     }
[18:01:11.638]     ...future.result <- base::tryCatch({
[18:01:11.638]         base::withCallingHandlers({
[18:01:11.638]             ...future.value <- base::withVisible(base::local({
[18:01:11.638]                 withCallingHandlers({
[18:01:11.638]                   {
[18:01:11.638]                     do.call(function(...) {
[18:01:11.638]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.638]                       if (!identical(...future.globals.maxSize.org, 
[18:01:11.638]                         ...future.globals.maxSize)) {
[18:01:11.638]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.638]                         on.exit(options(oopts), add = TRUE)
[18:01:11.638]                       }
[18:01:11.638]                       {
[18:01:11.638]                         lapply(seq_along(...future.elements_ii), 
[18:01:11.638]                           FUN = function(jj) {
[18:01:11.638]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.638]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.638]                               envir = globalenv(), inherits = FALSE)
[18:01:11.638]                             ...future.FUN(...future.X_jj, ...)
[18:01:11.638]                           })
[18:01:11.638]                       }
[18:01:11.638]                     }, args = future.call.arguments)
[18:01:11.638]                   }
[18:01:11.638]                 }, immediateCondition = function(cond) {
[18:01:11.638]                   save_rds <- function (object, pathname, ...) 
[18:01:11.638]                   {
[18:01:11.638]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:01:11.638]                     if (file_test("-f", pathname_tmp)) {
[18:01:11.638]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.638]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:01:11.638]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.638]                         fi_tmp[["mtime"]])
[18:01:11.638]                     }
[18:01:11.638]                     tryCatch({
[18:01:11.638]                       saveRDS(object, file = pathname_tmp, ...)
[18:01:11.638]                     }, error = function(ex) {
[18:01:11.638]                       msg <- conditionMessage(ex)
[18:01:11.638]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.638]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:01:11.638]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.638]                         fi_tmp[["mtime"]], msg)
[18:01:11.638]                       ex$message <- msg
[18:01:11.638]                       stop(ex)
[18:01:11.638]                     })
[18:01:11.638]                     stopifnot(file_test("-f", pathname_tmp))
[18:01:11.638]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:01:11.638]                     if (!res || file_test("-f", pathname_tmp)) {
[18:01:11.638]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.638]                       fi <- file.info(pathname)
[18:01:11.638]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:01:11.638]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.638]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:01:11.638]                         fi[["size"]], fi[["mtime"]])
[18:01:11.638]                       stop(msg)
[18:01:11.638]                     }
[18:01:11.638]                     invisible(pathname)
[18:01:11.638]                   }
[18:01:11.638]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:01:11.638]                     rootPath = tempdir()) 
[18:01:11.638]                   {
[18:01:11.638]                     obj <- list(time = Sys.time(), condition = cond)
[18:01:11.638]                     file <- tempfile(pattern = class(cond)[1], 
[18:01:11.638]                       tmpdir = path, fileext = ".rds")
[18:01:11.638]                     save_rds(obj, file)
[18:01:11.638]                   }
[18:01:11.638]                   saveImmediateCondition(cond, path = "/tmp/RtmpTMmi8X/.future/immediateConditions")
[18:01:11.638]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.638]                   {
[18:01:11.638]                     inherits <- base::inherits
[18:01:11.638]                     invokeRestart <- base::invokeRestart
[18:01:11.638]                     is.null <- base::is.null
[18:01:11.638]                     muffled <- FALSE
[18:01:11.638]                     if (inherits(cond, "message")) {
[18:01:11.638]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:11.638]                       if (muffled) 
[18:01:11.638]                         invokeRestart("muffleMessage")
[18:01:11.638]                     }
[18:01:11.638]                     else if (inherits(cond, "warning")) {
[18:01:11.638]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:11.638]                       if (muffled) 
[18:01:11.638]                         invokeRestart("muffleWarning")
[18:01:11.638]                     }
[18:01:11.638]                     else if (inherits(cond, "condition")) {
[18:01:11.638]                       if (!is.null(pattern)) {
[18:01:11.638]                         computeRestarts <- base::computeRestarts
[18:01:11.638]                         grepl <- base::grepl
[18:01:11.638]                         restarts <- computeRestarts(cond)
[18:01:11.638]                         for (restart in restarts) {
[18:01:11.638]                           name <- restart$name
[18:01:11.638]                           if (is.null(name)) 
[18:01:11.638]                             next
[18:01:11.638]                           if (!grepl(pattern, name)) 
[18:01:11.638]                             next
[18:01:11.638]                           invokeRestart(restart)
[18:01:11.638]                           muffled <- TRUE
[18:01:11.638]                           break
[18:01:11.638]                         }
[18:01:11.638]                       }
[18:01:11.638]                     }
[18:01:11.638]                     invisible(muffled)
[18:01:11.638]                   }
[18:01:11.638]                   muffleCondition(cond)
[18:01:11.638]                 })
[18:01:11.638]             }))
[18:01:11.638]             future::FutureResult(value = ...future.value$value, 
[18:01:11.638]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:11.638]                   ...future.rng), globalenv = if (FALSE) 
[18:01:11.638]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:11.638]                     ...future.globalenv.names))
[18:01:11.638]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:11.638]         }, condition = base::local({
[18:01:11.638]             c <- base::c
[18:01:11.638]             inherits <- base::inherits
[18:01:11.638]             invokeRestart <- base::invokeRestart
[18:01:11.638]             length <- base::length
[18:01:11.638]             list <- base::list
[18:01:11.638]             seq.int <- base::seq.int
[18:01:11.638]             signalCondition <- base::signalCondition
[18:01:11.638]             sys.calls <- base::sys.calls
[18:01:11.638]             `[[` <- base::`[[`
[18:01:11.638]             `+` <- base::`+`
[18:01:11.638]             `<<-` <- base::`<<-`
[18:01:11.638]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:11.638]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:11.638]                   3L)]
[18:01:11.638]             }
[18:01:11.638]             function(cond) {
[18:01:11.638]                 is_error <- inherits(cond, "error")
[18:01:11.638]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:11.638]                   NULL)
[18:01:11.638]                 if (is_error) {
[18:01:11.638]                   sessionInformation <- function() {
[18:01:11.638]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:11.638]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:11.638]                       search = base::search(), system = base::Sys.info())
[18:01:11.638]                   }
[18:01:11.638]                   ...future.conditions[[length(...future.conditions) + 
[18:01:11.638]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:11.638]                     cond$call), session = sessionInformation(), 
[18:01:11.638]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:11.638]                   signalCondition(cond)
[18:01:11.638]                 }
[18:01:11.638]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:11.638]                 "immediateCondition"))) {
[18:01:11.638]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:11.638]                   ...future.conditions[[length(...future.conditions) + 
[18:01:11.638]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:11.638]                   if (TRUE && !signal) {
[18:01:11.638]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.638]                     {
[18:01:11.638]                       inherits <- base::inherits
[18:01:11.638]                       invokeRestart <- base::invokeRestart
[18:01:11.638]                       is.null <- base::is.null
[18:01:11.638]                       muffled <- FALSE
[18:01:11.638]                       if (inherits(cond, "message")) {
[18:01:11.638]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:11.638]                         if (muffled) 
[18:01:11.638]                           invokeRestart("muffleMessage")
[18:01:11.638]                       }
[18:01:11.638]                       else if (inherits(cond, "warning")) {
[18:01:11.638]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:11.638]                         if (muffled) 
[18:01:11.638]                           invokeRestart("muffleWarning")
[18:01:11.638]                       }
[18:01:11.638]                       else if (inherits(cond, "condition")) {
[18:01:11.638]                         if (!is.null(pattern)) {
[18:01:11.638]                           computeRestarts <- base::computeRestarts
[18:01:11.638]                           grepl <- base::grepl
[18:01:11.638]                           restarts <- computeRestarts(cond)
[18:01:11.638]                           for (restart in restarts) {
[18:01:11.638]                             name <- restart$name
[18:01:11.638]                             if (is.null(name)) 
[18:01:11.638]                               next
[18:01:11.638]                             if (!grepl(pattern, name)) 
[18:01:11.638]                               next
[18:01:11.638]                             invokeRestart(restart)
[18:01:11.638]                             muffled <- TRUE
[18:01:11.638]                             break
[18:01:11.638]                           }
[18:01:11.638]                         }
[18:01:11.638]                       }
[18:01:11.638]                       invisible(muffled)
[18:01:11.638]                     }
[18:01:11.638]                     muffleCondition(cond, pattern = "^muffle")
[18:01:11.638]                   }
[18:01:11.638]                 }
[18:01:11.638]                 else {
[18:01:11.638]                   if (TRUE) {
[18:01:11.638]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.638]                     {
[18:01:11.638]                       inherits <- base::inherits
[18:01:11.638]                       invokeRestart <- base::invokeRestart
[18:01:11.638]                       is.null <- base::is.null
[18:01:11.638]                       muffled <- FALSE
[18:01:11.638]                       if (inherits(cond, "message")) {
[18:01:11.638]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:11.638]                         if (muffled) 
[18:01:11.638]                           invokeRestart("muffleMessage")
[18:01:11.638]                       }
[18:01:11.638]                       else if (inherits(cond, "warning")) {
[18:01:11.638]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:11.638]                         if (muffled) 
[18:01:11.638]                           invokeRestart("muffleWarning")
[18:01:11.638]                       }
[18:01:11.638]                       else if (inherits(cond, "condition")) {
[18:01:11.638]                         if (!is.null(pattern)) {
[18:01:11.638]                           computeRestarts <- base::computeRestarts
[18:01:11.638]                           grepl <- base::grepl
[18:01:11.638]                           restarts <- computeRestarts(cond)
[18:01:11.638]                           for (restart in restarts) {
[18:01:11.638]                             name <- restart$name
[18:01:11.638]                             if (is.null(name)) 
[18:01:11.638]                               next
[18:01:11.638]                             if (!grepl(pattern, name)) 
[18:01:11.638]                               next
[18:01:11.638]                             invokeRestart(restart)
[18:01:11.638]                             muffled <- TRUE
[18:01:11.638]                             break
[18:01:11.638]                           }
[18:01:11.638]                         }
[18:01:11.638]                       }
[18:01:11.638]                       invisible(muffled)
[18:01:11.638]                     }
[18:01:11.638]                     muffleCondition(cond, pattern = "^muffle")
[18:01:11.638]                   }
[18:01:11.638]                 }
[18:01:11.638]             }
[18:01:11.638]         }))
[18:01:11.638]     }, error = function(ex) {
[18:01:11.638]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:11.638]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:11.638]                 ...future.rng), started = ...future.startTime, 
[18:01:11.638]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:11.638]             version = "1.8"), class = "FutureResult")
[18:01:11.638]     }, finally = {
[18:01:11.638]         if (!identical(...future.workdir, getwd())) 
[18:01:11.638]             setwd(...future.workdir)
[18:01:11.638]         {
[18:01:11.638]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:11.638]                 ...future.oldOptions$nwarnings <- NULL
[18:01:11.638]             }
[18:01:11.638]             base::options(...future.oldOptions)
[18:01:11.638]             if (.Platform$OS.type == "windows") {
[18:01:11.638]                 old_names <- names(...future.oldEnvVars)
[18:01:11.638]                 envs <- base::Sys.getenv()
[18:01:11.638]                 names <- names(envs)
[18:01:11.638]                 common <- intersect(names, old_names)
[18:01:11.638]                 added <- setdiff(names, old_names)
[18:01:11.638]                 removed <- setdiff(old_names, names)
[18:01:11.638]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:11.638]                   envs[common]]
[18:01:11.638]                 NAMES <- toupper(changed)
[18:01:11.638]                 args <- list()
[18:01:11.638]                 for (kk in seq_along(NAMES)) {
[18:01:11.638]                   name <- changed[[kk]]
[18:01:11.638]                   NAME <- NAMES[[kk]]
[18:01:11.638]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.638]                     next
[18:01:11.638]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:11.638]                 }
[18:01:11.638]                 NAMES <- toupper(added)
[18:01:11.638]                 for (kk in seq_along(NAMES)) {
[18:01:11.638]                   name <- added[[kk]]
[18:01:11.638]                   NAME <- NAMES[[kk]]
[18:01:11.638]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.638]                     next
[18:01:11.638]                   args[[name]] <- ""
[18:01:11.638]                 }
[18:01:11.638]                 NAMES <- toupper(removed)
[18:01:11.638]                 for (kk in seq_along(NAMES)) {
[18:01:11.638]                   name <- removed[[kk]]
[18:01:11.638]                   NAME <- NAMES[[kk]]
[18:01:11.638]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.638]                     next
[18:01:11.638]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:11.638]                 }
[18:01:11.638]                 if (length(args) > 0) 
[18:01:11.638]                   base::do.call(base::Sys.setenv, args = args)
[18:01:11.638]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:11.638]             }
[18:01:11.638]             else {
[18:01:11.638]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:11.638]             }
[18:01:11.638]             {
[18:01:11.638]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:11.638]                   0L) {
[18:01:11.638]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:11.638]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:11.638]                   base::options(opts)
[18:01:11.638]                 }
[18:01:11.638]                 {
[18:01:11.638]                   {
[18:01:11.638]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:11.638]                     NULL
[18:01:11.638]                   }
[18:01:11.638]                   options(future.plan = NULL)
[18:01:11.638]                   if (is.na(NA_character_)) 
[18:01:11.638]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:11.638]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:11.638]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:11.638]                     .init = FALSE)
[18:01:11.638]                 }
[18:01:11.638]             }
[18:01:11.638]         }
[18:01:11.638]     })
[18:01:11.638]     if (TRUE) {
[18:01:11.638]         base::sink(type = "output", split = FALSE)
[18:01:11.638]         if (TRUE) {
[18:01:11.638]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:11.638]         }
[18:01:11.638]         else {
[18:01:11.638]             ...future.result["stdout"] <- base::list(NULL)
[18:01:11.638]         }
[18:01:11.638]         base::close(...future.stdout)
[18:01:11.638]         ...future.stdout <- NULL
[18:01:11.638]     }
[18:01:11.638]     ...future.result$conditions <- ...future.conditions
[18:01:11.638]     ...future.result$finished <- base::Sys.time()
[18:01:11.638]     ...future.result
[18:01:11.638] }
[18:01:11.643] assign_globals() ...
[18:01:11.644] List of 5
[18:01:11.644]  $ ...future.FUN            :function (...)  
[18:01:11.644]  $ future.call.arguments    : list()
[18:01:11.644]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:11.644]  $ ...future.elements_ii    :List of 3
[18:01:11.644]   ..$ : int 0
[18:01:11.644]   ..$ : int 0
[18:01:11.644]   ..$ : int 0
[18:01:11.644]  $ ...future.seeds_ii       :List of 3
[18:01:11.644]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[18:01:11.644]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[18:01:11.644]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[18:01:11.644]  $ ...future.globals.maxSize: NULL
[18:01:11.644]  - attr(*, "where")=List of 5
[18:01:11.644]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[18:01:11.644]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[18:01:11.644]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[18:01:11.644]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[18:01:11.644]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[18:01:11.644]  - attr(*, "resolved")= logi FALSE
[18:01:11.644]  - attr(*, "total_size")= num 616
[18:01:11.644]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:11.644]  - attr(*, "already-done")= logi TRUE
[18:01:11.665] - reassign environment for ‘...future.FUN’
[18:01:11.665] - copied ‘...future.FUN’ to environment
[18:01:11.666] - copied ‘future.call.arguments’ to environment
[18:01:11.666] - copied ‘...future.elements_ii’ to environment
[18:01:11.666] - copied ‘...future.seeds_ii’ to environment
[18:01:11.667] - copied ‘...future.globals.maxSize’ to environment
[18:01:11.667] assign_globals() ... done
[18:01:11.667] requestCore(): workers = 2
[18:01:11.671] MulticoreFuture started
[18:01:11.672] - Launch lazy future ... done
[18:01:11.672] run() for ‘MulticoreFuture’ ... done
[18:01:11.672] Created future:
[18:01:11.673] plan(): Setting new future strategy stack:
[18:01:11.673] List of future strategies:
[18:01:11.673] 1. sequential:
[18:01:11.673]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:11.673]    - tweaked: FALSE
[18:01:11.673]    - call: NULL
[18:01:11.675] plan(): nbrOfWorkers() = 1
[18:01:11.680] plan(): Setting new future strategy stack:
[18:01:11.680] List of future strategies:
[18:01:11.680] 1. multicore:
[18:01:11.680]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:01:11.680]    - tweaked: FALSE
[18:01:11.680]    - call: plan(strategy)
[18:01:11.673] MulticoreFuture:
[18:01:11.673] Label: ‘future_replicate-2’
[18:01:11.673] Expression:
[18:01:11.673] {
[18:01:11.673]     do.call(function(...) {
[18:01:11.673]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.673]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:11.673]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.673]             on.exit(options(oopts), add = TRUE)
[18:01:11.673]         }
[18:01:11.673]         {
[18:01:11.673]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:11.673]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.673]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.673]                   envir = globalenv(), inherits = FALSE)
[18:01:11.673]                 ...future.FUN(...future.X_jj, ...)
[18:01:11.673]             })
[18:01:11.673]         }
[18:01:11.673]     }, args = future.call.arguments)
[18:01:11.673] }
[18:01:11.673] Lazy evaluation: FALSE
[18:01:11.673] Asynchronous evaluation: TRUE
[18:01:11.673] Local evaluation: TRUE
[18:01:11.673] Environment: R_GlobalEnv
[18:01:11.673] Capture standard output: TRUE
[18:01:11.673] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:11.673] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:11.673] Packages: <none>
[18:01:11.673] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:11.673] Resolved: FALSE
[18:01:11.673] Value: <not collected>
[18:01:11.673] Conditions captured: <none>
[18:01:11.673] Early signaling: FALSE
[18:01:11.673] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:11.673] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:11.688] Chunk #2 of 2 ... DONE
[18:01:11.689] Launching 2 futures (chunks) ... DONE
[18:01:11.688] plan(): nbrOfWorkers() = 2
[18:01:11.689] Resolving 2 futures (chunks) ...
[18:01:11.690] resolve() on list ...
[18:01:11.690]  recursive: 0
[18:01:11.690]  length: 2
[18:01:11.690] 
[18:01:11.691] Future #1
[18:01:11.692] result() for MulticoreFuture ...
[18:01:11.693] result() for MulticoreFuture ...
[18:01:11.694] result() for MulticoreFuture ... done
[18:01:11.694] result() for MulticoreFuture ... done
[18:01:11.694] result() for MulticoreFuture ...
[18:01:11.695] result() for MulticoreFuture ... done
[18:01:11.695] signalConditionsASAP(MulticoreFuture, pos=1) ...
[18:01:11.695] - nx: 2
[18:01:11.696] - relay: TRUE
[18:01:11.696] - stdout: TRUE
[18:01:11.696] - signal: TRUE
[18:01:11.696] - resignal: FALSE
[18:01:11.697] - force: TRUE
[18:01:11.697] - relayed: [n=2] FALSE, FALSE
[18:01:11.697] - queued futures: [n=2] FALSE, FALSE
[18:01:11.698]  - until=1
[18:01:11.698]  - relaying element #1
[18:01:11.698] result() for MulticoreFuture ...
[18:01:11.698] result() for MulticoreFuture ... done
[18:01:11.699] result() for MulticoreFuture ...
[18:01:11.699] result() for MulticoreFuture ... done
[18:01:11.699] result() for MulticoreFuture ...
[18:01:11.700] result() for MulticoreFuture ... done
[18:01:11.700] result() for MulticoreFuture ...
[18:01:11.700] result() for MulticoreFuture ... done
[18:01:11.701] - relayed: [n=2] TRUE, FALSE
[18:01:11.701] - queued futures: [n=2] TRUE, FALSE
[18:01:11.701] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[18:01:11.702]  length: 1 (resolved future 1)
[18:01:11.702] Future #2
[18:01:11.703] result() for MulticoreFuture ...
[18:01:11.704] result() for MulticoreFuture ...
[18:01:11.704] result() for MulticoreFuture ... done
[18:01:11.704] result() for MulticoreFuture ... done
[18:01:11.705] result() for MulticoreFuture ...
[18:01:11.705] result() for MulticoreFuture ... done
[18:01:11.705] signalConditionsASAP(MulticoreFuture, pos=2) ...
[18:01:11.706] - nx: 2
[18:01:11.706] - relay: TRUE
[18:01:11.706] - stdout: TRUE
[18:01:11.706] - signal: TRUE
[18:01:11.707] - resignal: FALSE
[18:01:11.707] - force: TRUE
[18:01:11.707] - relayed: [n=2] TRUE, FALSE
[18:01:11.707] - queued futures: [n=2] TRUE, FALSE
[18:01:11.708]  - until=2
[18:01:11.711]  - relaying element #2
[18:01:11.712] result() for MulticoreFuture ...
[18:01:11.712] result() for MulticoreFuture ... done
[18:01:11.712] result() for MulticoreFuture ...
[18:01:11.712] result() for MulticoreFuture ... done
[18:01:11.713] result() for MulticoreFuture ...
[18:01:11.713] result() for MulticoreFuture ... done
[18:01:11.713] result() for MulticoreFuture ...
[18:01:11.713] result() for MulticoreFuture ... done
[18:01:11.714] - relayed: [n=2] TRUE, TRUE
[18:01:11.714] - queued futures: [n=2] TRUE, TRUE
[18:01:11.714] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[18:01:11.715]  length: 0 (resolved future 2)
[18:01:11.715] Relaying remaining futures
[18:01:11.715] signalConditionsASAP(NULL, pos=0) ...
[18:01:11.715] - nx: 2
[18:01:11.716] - relay: TRUE
[18:01:11.716] - stdout: TRUE
[18:01:11.716] - signal: TRUE
[18:01:11.716] - resignal: FALSE
[18:01:11.716] - force: TRUE
[18:01:11.717] - relayed: [n=2] TRUE, TRUE
[18:01:11.717] - queued futures: [n=2] TRUE, TRUE
 - flush all
[18:01:11.717] - relayed: [n=2] TRUE, TRUE
[18:01:11.718] - queued futures: [n=2] TRUE, TRUE
[18:01:11.718] signalConditionsASAP(NULL, pos=0) ... done
[18:01:11.718] resolve() on list ... DONE
[18:01:11.718] result() for MulticoreFuture ...
[18:01:11.718] result() for MulticoreFuture ... done
[18:01:11.719] result() for MulticoreFuture ...
[18:01:11.719] result() for MulticoreFuture ... done
[18:01:11.719] result() for MulticoreFuture ...
[18:01:11.719] result() for MulticoreFuture ... done
[18:01:11.720] result() for MulticoreFuture ...
[18:01:11.720] result() for MulticoreFuture ... done
[18:01:11.720]  - Number of value chunks collected: 2
[18:01:11.720] Resolving 2 futures (chunks) ... DONE
[18:01:11.721] Reducing values from 2 chunks ...
[18:01:11.721]  - Number of values collected after concatenation: 5
[18:01:11.721]  - Number of values expected: 5
[18:01:11.721] Reducing values from 2 chunks ... DONE
[18:01:11.722] future_lapply() ... DONE
[18:01:11.722] future_lapply() ...
[18:01:11.723] Generating random seeds ...
[18:01:11.723] Generating random seed streams for 5 elements ...
[18:01:11.724] Generating random seed streams for 5 elements ... DONE
[18:01:11.724] Generating random seeds ... DONE
[18:01:11.724] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[18:01:11.732] Number of chunks: 2
[18:01:11.732] getGlobalsAndPackagesXApply() ...
[18:01:11.732]  - future.globals: TRUE
[18:01:11.732] getGlobalsAndPackages() ...
[18:01:11.733] Searching for globals...
[18:01:11.735] - globals found: [2] ‘FUN’, ‘sample’
[18:01:11.735] Searching for globals ... DONE
[18:01:11.736] Resolving globals: FALSE
[18:01:11.736] The total size of the 1 globals is 616 bytes (616 bytes)
[18:01:11.737] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[18:01:11.737] - globals: [1] ‘FUN’
[18:01:11.738] 
[18:01:11.738] getGlobalsAndPackages() ... DONE
[18:01:11.738]  - globals found/used: [n=1] ‘FUN’
[18:01:11.738]  - needed namespaces: [n=0] 
[18:01:11.739] Finding globals ... DONE
[18:01:11.739]  - use_args: TRUE
[18:01:11.739]  - Getting '...' globals ...
[18:01:11.740] resolve() on list ...
[18:01:11.740]  recursive: 0
[18:01:11.740]  length: 1
[18:01:11.741]  elements: ‘...’
[18:01:11.741]  length: 0 (resolved future 1)
[18:01:11.741] resolve() on list ... DONE
[18:01:11.741]    - '...' content: [n=0] 
[18:01:11.741] List of 1
[18:01:11.741]  $ ...: list()
[18:01:11.741]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:11.741]  - attr(*, "where")=List of 1
[18:01:11.741]   ..$ ...:<environment: 0x635eb2f5c9d0> 
[18:01:11.741]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:11.741]  - attr(*, "resolved")= logi TRUE
[18:01:11.741]  - attr(*, "total_size")= num NA
[18:01:11.747]  - Getting '...' globals ... DONE
[18:01:11.748] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[18:01:11.748] List of 2
[18:01:11.748]  $ ...future.FUN:function (...)  
[18:01:11.748]  $ ...          : list()
[18:01:11.748]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:11.748]  - attr(*, "where")=List of 2
[18:01:11.748]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[18:01:11.748]   ..$ ...          :<environment: 0x635eb2f5c9d0> 
[18:01:11.748]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:11.748]  - attr(*, "resolved")= logi FALSE
[18:01:11.748]  - attr(*, "total_size")= num 616
[18:01:11.753] Packages to be attached in all futures: [n=0] 
[18:01:11.754] getGlobalsAndPackagesXApply() ... DONE
[18:01:11.754] Number of futures (= number of chunks): 2
[18:01:11.754] Launching 2 futures (chunks) ...
[18:01:11.754] Chunk #1 of 2 ...
[18:01:11.755]  - Finding globals in 'X' for chunk #1 ...
[18:01:11.755] getGlobalsAndPackages() ...
[18:01:11.755] Searching for globals...
[18:01:11.756] 
[18:01:11.756] Searching for globals ... DONE
[18:01:11.756] - globals: [0] <none>
[18:01:11.756] getGlobalsAndPackages() ... DONE
[18:01:11.756]    + additional globals found: [n=0] 
[18:01:11.757]    + additional namespaces needed: [n=0] 
[18:01:11.757]  - Finding globals in 'X' for chunk #1 ... DONE
[18:01:11.757]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:11.757]  - seeds: [2] <seeds>
[18:01:11.757]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.758] getGlobalsAndPackages() ...
[18:01:11.758] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.758] Resolving globals: FALSE
[18:01:11.758] Tweak future expression to call with '...' arguments ...
[18:01:11.758] {
[18:01:11.758]     do.call(function(...) {
[18:01:11.758]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.758]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:11.758]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.758]             on.exit(options(oopts), add = TRUE)
[18:01:11.758]         }
[18:01:11.758]         {
[18:01:11.758]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:11.758]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.758]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.758]                   envir = globalenv(), inherits = FALSE)
[18:01:11.758]                 ...future.FUN(...future.X_jj, ...)
[18:01:11.758]             })
[18:01:11.758]         }
[18:01:11.758]     }, args = future.call.arguments)
[18:01:11.758] }
[18:01:11.759] Tweak future expression to call with '...' arguments ... DONE
[18:01:11.760] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.760] 
[18:01:11.760] getGlobalsAndPackages() ... DONE
[18:01:11.761] run() for ‘Future’ ...
[18:01:11.761] - state: ‘created’
[18:01:11.761] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:01:11.807] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:11.808] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:01:11.808]   - Field: ‘label’
[18:01:11.808]   - Field: ‘local’
[18:01:11.808]   - Field: ‘owner’
[18:01:11.809]   - Field: ‘envir’
[18:01:11.809]   - Field: ‘workers’
[18:01:11.809]   - Field: ‘packages’
[18:01:11.809]   - Field: ‘gc’
[18:01:11.809]   - Field: ‘job’
[18:01:11.810]   - Field: ‘conditions’
[18:01:11.810]   - Field: ‘expr’
[18:01:11.810]   - Field: ‘uuid’
[18:01:11.810]   - Field: ‘seed’
[18:01:11.810]   - Field: ‘version’
[18:01:11.811]   - Field: ‘result’
[18:01:11.811]   - Field: ‘asynchronous’
[18:01:11.811]   - Field: ‘calls’
[18:01:11.811]   - Field: ‘globals’
[18:01:11.811]   - Field: ‘stdout’
[18:01:11.812]   - Field: ‘earlySignal’
[18:01:11.812]   - Field: ‘lazy’
[18:01:11.812]   - Field: ‘state’
[18:01:11.812] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:01:11.812] - Launch lazy future ...
[18:01:11.813] Packages needed by the future expression (n = 0): <none>
[18:01:11.813] Packages needed by future strategies (n = 0): <none>
[18:01:11.814] {
[18:01:11.814]     {
[18:01:11.814]         {
[18:01:11.814]             ...future.startTime <- base::Sys.time()
[18:01:11.814]             {
[18:01:11.814]                 {
[18:01:11.814]                   {
[18:01:11.814]                     {
[18:01:11.814]                       base::local({
[18:01:11.814]                         has_future <- base::requireNamespace("future", 
[18:01:11.814]                           quietly = TRUE)
[18:01:11.814]                         if (has_future) {
[18:01:11.814]                           ns <- base::getNamespace("future")
[18:01:11.814]                           version <- ns[[".package"]][["version"]]
[18:01:11.814]                           if (is.null(version)) 
[18:01:11.814]                             version <- utils::packageVersion("future")
[18:01:11.814]                         }
[18:01:11.814]                         else {
[18:01:11.814]                           version <- NULL
[18:01:11.814]                         }
[18:01:11.814]                         if (!has_future || version < "1.8.0") {
[18:01:11.814]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:11.814]                             "", base::R.version$version.string), 
[18:01:11.814]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:11.814]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:11.814]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:11.814]                               "release", "version")], collapse = " "), 
[18:01:11.814]                             hostname = base::Sys.info()[["nodename"]])
[18:01:11.814]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:11.814]                             info)
[18:01:11.814]                           info <- base::paste(info, collapse = "; ")
[18:01:11.814]                           if (!has_future) {
[18:01:11.814]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:11.814]                               info)
[18:01:11.814]                           }
[18:01:11.814]                           else {
[18:01:11.814]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:11.814]                               info, version)
[18:01:11.814]                           }
[18:01:11.814]                           base::stop(msg)
[18:01:11.814]                         }
[18:01:11.814]                       })
[18:01:11.814]                     }
[18:01:11.814]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:11.814]                     base::options(mc.cores = 1L)
[18:01:11.814]                   }
[18:01:11.814]                   ...future.strategy.old <- future::plan("list")
[18:01:11.814]                   options(future.plan = NULL)
[18:01:11.814]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:11.814]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:11.814]                 }
[18:01:11.814]                 ...future.workdir <- getwd()
[18:01:11.814]             }
[18:01:11.814]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:11.814]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:11.814]         }
[18:01:11.814]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:11.814]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:11.814]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:11.814]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:11.814]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:11.814]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:11.814]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:11.814]             base::names(...future.oldOptions))
[18:01:11.814]     }
[18:01:11.814]     if (FALSE) {
[18:01:11.814]     }
[18:01:11.814]     else {
[18:01:11.814]         if (TRUE) {
[18:01:11.814]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:11.814]                 open = "w")
[18:01:11.814]         }
[18:01:11.814]         else {
[18:01:11.814]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:11.814]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:11.814]         }
[18:01:11.814]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:11.814]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:11.814]             base::sink(type = "output", split = FALSE)
[18:01:11.814]             base::close(...future.stdout)
[18:01:11.814]         }, add = TRUE)
[18:01:11.814]     }
[18:01:11.814]     ...future.frame <- base::sys.nframe()
[18:01:11.814]     ...future.conditions <- base::list()
[18:01:11.814]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:11.814]     if (FALSE) {
[18:01:11.814]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:11.814]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:11.814]     }
[18:01:11.814]     ...future.result <- base::tryCatch({
[18:01:11.814]         base::withCallingHandlers({
[18:01:11.814]             ...future.value <- base::withVisible(base::local({
[18:01:11.814]                 withCallingHandlers({
[18:01:11.814]                   {
[18:01:11.814]                     do.call(function(...) {
[18:01:11.814]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.814]                       if (!identical(...future.globals.maxSize.org, 
[18:01:11.814]                         ...future.globals.maxSize)) {
[18:01:11.814]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.814]                         on.exit(options(oopts), add = TRUE)
[18:01:11.814]                       }
[18:01:11.814]                       {
[18:01:11.814]                         lapply(seq_along(...future.elements_ii), 
[18:01:11.814]                           FUN = function(jj) {
[18:01:11.814]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.814]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.814]                               envir = globalenv(), inherits = FALSE)
[18:01:11.814]                             ...future.FUN(...future.X_jj, ...)
[18:01:11.814]                           })
[18:01:11.814]                       }
[18:01:11.814]                     }, args = future.call.arguments)
[18:01:11.814]                   }
[18:01:11.814]                 }, immediateCondition = function(cond) {
[18:01:11.814]                   save_rds <- function (object, pathname, ...) 
[18:01:11.814]                   {
[18:01:11.814]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:01:11.814]                     if (file_test("-f", pathname_tmp)) {
[18:01:11.814]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.814]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:01:11.814]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.814]                         fi_tmp[["mtime"]])
[18:01:11.814]                     }
[18:01:11.814]                     tryCatch({
[18:01:11.814]                       saveRDS(object, file = pathname_tmp, ...)
[18:01:11.814]                     }, error = function(ex) {
[18:01:11.814]                       msg <- conditionMessage(ex)
[18:01:11.814]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.814]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:01:11.814]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.814]                         fi_tmp[["mtime"]], msg)
[18:01:11.814]                       ex$message <- msg
[18:01:11.814]                       stop(ex)
[18:01:11.814]                     })
[18:01:11.814]                     stopifnot(file_test("-f", pathname_tmp))
[18:01:11.814]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:01:11.814]                     if (!res || file_test("-f", pathname_tmp)) {
[18:01:11.814]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.814]                       fi <- file.info(pathname)
[18:01:11.814]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:01:11.814]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.814]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:01:11.814]                         fi[["size"]], fi[["mtime"]])
[18:01:11.814]                       stop(msg)
[18:01:11.814]                     }
[18:01:11.814]                     invisible(pathname)
[18:01:11.814]                   }
[18:01:11.814]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:01:11.814]                     rootPath = tempdir()) 
[18:01:11.814]                   {
[18:01:11.814]                     obj <- list(time = Sys.time(), condition = cond)
[18:01:11.814]                     file <- tempfile(pattern = class(cond)[1], 
[18:01:11.814]                       tmpdir = path, fileext = ".rds")
[18:01:11.814]                     save_rds(obj, file)
[18:01:11.814]                   }
[18:01:11.814]                   saveImmediateCondition(cond, path = "/tmp/RtmpTMmi8X/.future/immediateConditions")
[18:01:11.814]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.814]                   {
[18:01:11.814]                     inherits <- base::inherits
[18:01:11.814]                     invokeRestart <- base::invokeRestart
[18:01:11.814]                     is.null <- base::is.null
[18:01:11.814]                     muffled <- FALSE
[18:01:11.814]                     if (inherits(cond, "message")) {
[18:01:11.814]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:11.814]                       if (muffled) 
[18:01:11.814]                         invokeRestart("muffleMessage")
[18:01:11.814]                     }
[18:01:11.814]                     else if (inherits(cond, "warning")) {
[18:01:11.814]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:11.814]                       if (muffled) 
[18:01:11.814]                         invokeRestart("muffleWarning")
[18:01:11.814]                     }
[18:01:11.814]                     else if (inherits(cond, "condition")) {
[18:01:11.814]                       if (!is.null(pattern)) {
[18:01:11.814]                         computeRestarts <- base::computeRestarts
[18:01:11.814]                         grepl <- base::grepl
[18:01:11.814]                         restarts <- computeRestarts(cond)
[18:01:11.814]                         for (restart in restarts) {
[18:01:11.814]                           name <- restart$name
[18:01:11.814]                           if (is.null(name)) 
[18:01:11.814]                             next
[18:01:11.814]                           if (!grepl(pattern, name)) 
[18:01:11.814]                             next
[18:01:11.814]                           invokeRestart(restart)
[18:01:11.814]                           muffled <- TRUE
[18:01:11.814]                           break
[18:01:11.814]                         }
[18:01:11.814]                       }
[18:01:11.814]                     }
[18:01:11.814]                     invisible(muffled)
[18:01:11.814]                   }
[18:01:11.814]                   muffleCondition(cond)
[18:01:11.814]                 })
[18:01:11.814]             }))
[18:01:11.814]             future::FutureResult(value = ...future.value$value, 
[18:01:11.814]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:11.814]                   ...future.rng), globalenv = if (FALSE) 
[18:01:11.814]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:11.814]                     ...future.globalenv.names))
[18:01:11.814]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:11.814]         }, condition = base::local({
[18:01:11.814]             c <- base::c
[18:01:11.814]             inherits <- base::inherits
[18:01:11.814]             invokeRestart <- base::invokeRestart
[18:01:11.814]             length <- base::length
[18:01:11.814]             list <- base::list
[18:01:11.814]             seq.int <- base::seq.int
[18:01:11.814]             signalCondition <- base::signalCondition
[18:01:11.814]             sys.calls <- base::sys.calls
[18:01:11.814]             `[[` <- base::`[[`
[18:01:11.814]             `+` <- base::`+`
[18:01:11.814]             `<<-` <- base::`<<-`
[18:01:11.814]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:11.814]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:11.814]                   3L)]
[18:01:11.814]             }
[18:01:11.814]             function(cond) {
[18:01:11.814]                 is_error <- inherits(cond, "error")
[18:01:11.814]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:11.814]                   NULL)
[18:01:11.814]                 if (is_error) {
[18:01:11.814]                   sessionInformation <- function() {
[18:01:11.814]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:11.814]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:11.814]                       search = base::search(), system = base::Sys.info())
[18:01:11.814]                   }
[18:01:11.814]                   ...future.conditions[[length(...future.conditions) + 
[18:01:11.814]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:11.814]                     cond$call), session = sessionInformation(), 
[18:01:11.814]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:11.814]                   signalCondition(cond)
[18:01:11.814]                 }
[18:01:11.814]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:11.814]                 "immediateCondition"))) {
[18:01:11.814]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:11.814]                   ...future.conditions[[length(...future.conditions) + 
[18:01:11.814]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:11.814]                   if (TRUE && !signal) {
[18:01:11.814]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.814]                     {
[18:01:11.814]                       inherits <- base::inherits
[18:01:11.814]                       invokeRestart <- base::invokeRestart
[18:01:11.814]                       is.null <- base::is.null
[18:01:11.814]                       muffled <- FALSE
[18:01:11.814]                       if (inherits(cond, "message")) {
[18:01:11.814]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:11.814]                         if (muffled) 
[18:01:11.814]                           invokeRestart("muffleMessage")
[18:01:11.814]                       }
[18:01:11.814]                       else if (inherits(cond, "warning")) {
[18:01:11.814]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:11.814]                         if (muffled) 
[18:01:11.814]                           invokeRestart("muffleWarning")
[18:01:11.814]                       }
[18:01:11.814]                       else if (inherits(cond, "condition")) {
[18:01:11.814]                         if (!is.null(pattern)) {
[18:01:11.814]                           computeRestarts <- base::computeRestarts
[18:01:11.814]                           grepl <- base::grepl
[18:01:11.814]                           restarts <- computeRestarts(cond)
[18:01:11.814]                           for (restart in restarts) {
[18:01:11.814]                             name <- restart$name
[18:01:11.814]                             if (is.null(name)) 
[18:01:11.814]                               next
[18:01:11.814]                             if (!grepl(pattern, name)) 
[18:01:11.814]                               next
[18:01:11.814]                             invokeRestart(restart)
[18:01:11.814]                             muffled <- TRUE
[18:01:11.814]                             break
[18:01:11.814]                           }
[18:01:11.814]                         }
[18:01:11.814]                       }
[18:01:11.814]                       invisible(muffled)
[18:01:11.814]                     }
[18:01:11.814]                     muffleCondition(cond, pattern = "^muffle")
[18:01:11.814]                   }
[18:01:11.814]                 }
[18:01:11.814]                 else {
[18:01:11.814]                   if (TRUE) {
[18:01:11.814]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.814]                     {
[18:01:11.814]                       inherits <- base::inherits
[18:01:11.814]                       invokeRestart <- base::invokeRestart
[18:01:11.814]                       is.null <- base::is.null
[18:01:11.814]                       muffled <- FALSE
[18:01:11.814]                       if (inherits(cond, "message")) {
[18:01:11.814]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:11.814]                         if (muffled) 
[18:01:11.814]                           invokeRestart("muffleMessage")
[18:01:11.814]                       }
[18:01:11.814]                       else if (inherits(cond, "warning")) {
[18:01:11.814]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:11.814]                         if (muffled) 
[18:01:11.814]                           invokeRestart("muffleWarning")
[18:01:11.814]                       }
[18:01:11.814]                       else if (inherits(cond, "condition")) {
[18:01:11.814]                         if (!is.null(pattern)) {
[18:01:11.814]                           computeRestarts <- base::computeRestarts
[18:01:11.814]                           grepl <- base::grepl
[18:01:11.814]                           restarts <- computeRestarts(cond)
[18:01:11.814]                           for (restart in restarts) {
[18:01:11.814]                             name <- restart$name
[18:01:11.814]                             if (is.null(name)) 
[18:01:11.814]                               next
[18:01:11.814]                             if (!grepl(pattern, name)) 
[18:01:11.814]                               next
[18:01:11.814]                             invokeRestart(restart)
[18:01:11.814]                             muffled <- TRUE
[18:01:11.814]                             break
[18:01:11.814]                           }
[18:01:11.814]                         }
[18:01:11.814]                       }
[18:01:11.814]                       invisible(muffled)
[18:01:11.814]                     }
[18:01:11.814]                     muffleCondition(cond, pattern = "^muffle")
[18:01:11.814]                   }
[18:01:11.814]                 }
[18:01:11.814]             }
[18:01:11.814]         }))
[18:01:11.814]     }, error = function(ex) {
[18:01:11.814]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:11.814]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:11.814]                 ...future.rng), started = ...future.startTime, 
[18:01:11.814]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:11.814]             version = "1.8"), class = "FutureResult")
[18:01:11.814]     }, finally = {
[18:01:11.814]         if (!identical(...future.workdir, getwd())) 
[18:01:11.814]             setwd(...future.workdir)
[18:01:11.814]         {
[18:01:11.814]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:11.814]                 ...future.oldOptions$nwarnings <- NULL
[18:01:11.814]             }
[18:01:11.814]             base::options(...future.oldOptions)
[18:01:11.814]             if (.Platform$OS.type == "windows") {
[18:01:11.814]                 old_names <- names(...future.oldEnvVars)
[18:01:11.814]                 envs <- base::Sys.getenv()
[18:01:11.814]                 names <- names(envs)
[18:01:11.814]                 common <- intersect(names, old_names)
[18:01:11.814]                 added <- setdiff(names, old_names)
[18:01:11.814]                 removed <- setdiff(old_names, names)
[18:01:11.814]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:11.814]                   envs[common]]
[18:01:11.814]                 NAMES <- toupper(changed)
[18:01:11.814]                 args <- list()
[18:01:11.814]                 for (kk in seq_along(NAMES)) {
[18:01:11.814]                   name <- changed[[kk]]
[18:01:11.814]                   NAME <- NAMES[[kk]]
[18:01:11.814]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.814]                     next
[18:01:11.814]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:11.814]                 }
[18:01:11.814]                 NAMES <- toupper(added)
[18:01:11.814]                 for (kk in seq_along(NAMES)) {
[18:01:11.814]                   name <- added[[kk]]
[18:01:11.814]                   NAME <- NAMES[[kk]]
[18:01:11.814]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.814]                     next
[18:01:11.814]                   args[[name]] <- ""
[18:01:11.814]                 }
[18:01:11.814]                 NAMES <- toupper(removed)
[18:01:11.814]                 for (kk in seq_along(NAMES)) {
[18:01:11.814]                   name <- removed[[kk]]
[18:01:11.814]                   NAME <- NAMES[[kk]]
[18:01:11.814]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.814]                     next
[18:01:11.814]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:11.814]                 }
[18:01:11.814]                 if (length(args) > 0) 
[18:01:11.814]                   base::do.call(base::Sys.setenv, args = args)
[18:01:11.814]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:11.814]             }
[18:01:11.814]             else {
[18:01:11.814]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:11.814]             }
[18:01:11.814]             {
[18:01:11.814]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:11.814]                   0L) {
[18:01:11.814]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:11.814]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:11.814]                   base::options(opts)
[18:01:11.814]                 }
[18:01:11.814]                 {
[18:01:11.814]                   {
[18:01:11.814]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:11.814]                     NULL
[18:01:11.814]                   }
[18:01:11.814]                   options(future.plan = NULL)
[18:01:11.814]                   if (is.na(NA_character_)) 
[18:01:11.814]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:11.814]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:11.814]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:11.814]                     .init = FALSE)
[18:01:11.814]                 }
[18:01:11.814]             }
[18:01:11.814]         }
[18:01:11.814]     })
[18:01:11.814]     if (TRUE) {
[18:01:11.814]         base::sink(type = "output", split = FALSE)
[18:01:11.814]         if (TRUE) {
[18:01:11.814]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:11.814]         }
[18:01:11.814]         else {
[18:01:11.814]             ...future.result["stdout"] <- base::list(NULL)
[18:01:11.814]         }
[18:01:11.814]         base::close(...future.stdout)
[18:01:11.814]         ...future.stdout <- NULL
[18:01:11.814]     }
[18:01:11.814]     ...future.result$conditions <- ...future.conditions
[18:01:11.814]     ...future.result$finished <- base::Sys.time()
[18:01:11.814]     ...future.result
[18:01:11.814] }
[18:01:11.818] assign_globals() ...
[18:01:11.818] List of 5
[18:01:11.818]  $ ...future.FUN            :function (...)  
[18:01:11.818]  $ future.call.arguments    : list()
[18:01:11.818]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:11.818]  $ ...future.elements_ii    :List of 2
[18:01:11.818]   ..$ : int 0
[18:01:11.818]   ..$ : int 0
[18:01:11.818]  $ ...future.seeds_ii       :List of 2
[18:01:11.818]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[18:01:11.818]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[18:01:11.818]  $ ...future.globals.maxSize: NULL
[18:01:11.818]  - attr(*, "where")=List of 5
[18:01:11.818]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[18:01:11.818]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[18:01:11.818]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[18:01:11.818]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[18:01:11.818]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[18:01:11.818]  - attr(*, "resolved")= logi FALSE
[18:01:11.818]  - attr(*, "total_size")= num 616
[18:01:11.818]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:11.818]  - attr(*, "already-done")= logi TRUE
[18:01:11.830] - reassign environment for ‘...future.FUN’
[18:01:11.831] - copied ‘...future.FUN’ to environment
[18:01:11.831] - copied ‘future.call.arguments’ to environment
[18:01:11.831] - copied ‘...future.elements_ii’ to environment
[18:01:11.831] - copied ‘...future.seeds_ii’ to environment
[18:01:11.832] - copied ‘...future.globals.maxSize’ to environment
[18:01:11.832] assign_globals() ... done
[18:01:11.832] requestCore(): workers = 2
[18:01:11.836] MulticoreFuture started
[18:01:11.837] - Launch lazy future ... done
[18:01:11.837] run() for ‘MulticoreFuture’ ... done
[18:01:11.838] Created future:
[18:01:11.841] plan(): Setting new future strategy stack:
[18:01:11.841] List of future strategies:
[18:01:11.841] 1. sequential:
[18:01:11.841]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:11.841]    - tweaked: FALSE
[18:01:11.841]    - call: NULL
[18:01:11.844] plan(): nbrOfWorkers() = 1
[18:01:11.849] plan(): Setting new future strategy stack:
[18:01:11.849] List of future strategies:
[18:01:11.849] 1. multicore:
[18:01:11.849]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:01:11.849]    - tweaked: FALSE
[18:01:11.849]    - call: plan(strategy)
[18:01:11.838] MulticoreFuture:
[18:01:11.838] Label: ‘future_replicate-1’
[18:01:11.838] Expression:
[18:01:11.838] {
[18:01:11.838]     do.call(function(...) {
[18:01:11.838]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.838]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:11.838]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.838]             on.exit(options(oopts), add = TRUE)
[18:01:11.838]         }
[18:01:11.838]         {
[18:01:11.838]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:11.838]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.838]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.838]                   envir = globalenv(), inherits = FALSE)
[18:01:11.838]                 ...future.FUN(...future.X_jj, ...)
[18:01:11.838]             })
[18:01:11.838]         }
[18:01:11.838]     }, args = future.call.arguments)
[18:01:11.838] }
[18:01:11.838] Lazy evaluation: FALSE
[18:01:11.838] Asynchronous evaluation: TRUE
[18:01:11.838] Local evaluation: TRUE
[18:01:11.838] Environment: R_GlobalEnv
[18:01:11.838] Capture standard output: TRUE
[18:01:11.838] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:11.838] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:11.838] Packages: <none>
[18:01:11.838] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:11.838] Resolved: FALSE
[18:01:11.838] Value: <not collected>
[18:01:11.838] Conditions captured: <none>
[18:01:11.838] Early signaling: FALSE
[18:01:11.838] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:11.838] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:11.854] Chunk #1 of 2 ... DONE
[18:01:11.855] Chunk #2 of 2 ...
[18:01:11.855]  - Finding globals in 'X' for chunk #2 ...
[18:01:11.855] getGlobalsAndPackages() ...
[18:01:11.856] Searching for globals...
[18:01:11.857] 
[18:01:11.857] Searching for globals ... DONE
[18:01:11.858] - globals: [0] <none>
[18:01:11.860] getGlobalsAndPackages() ... DONE
[18:01:11.860]    + additional globals found: [n=0] 
[18:01:11.861]    + additional namespaces needed: [n=0] 
[18:01:11.861]  - Finding globals in 'X' for chunk #2 ... DONE
[18:01:11.861]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:11.862]  - seeds: [3] <seeds>
[18:01:11.862]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.865] getGlobalsAndPackages() ...
[18:01:11.865] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.866] Resolving globals: FALSE
[18:01:11.866] Tweak future expression to call with '...' arguments ...
[18:01:11.865] plan(): nbrOfWorkers() = 2
[18:01:11.867] {
[18:01:11.867]     do.call(function(...) {
[18:01:11.867]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.867]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:11.867]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.867]             on.exit(options(oopts), add = TRUE)
[18:01:11.867]         }
[18:01:11.867]         {
[18:01:11.867]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:11.867]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.867]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.867]                   envir = globalenv(), inherits = FALSE)
[18:01:11.867]                 ...future.FUN(...future.X_jj, ...)
[18:01:11.867]             })
[18:01:11.867]         }
[18:01:11.867]     }, args = future.call.arguments)
[18:01:11.867] }
[18:01:11.868] Tweak future expression to call with '...' arguments ... DONE
[18:01:11.869] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:11.870] 
[18:01:11.870] getGlobalsAndPackages() ... DONE
[18:01:11.871] run() for ‘Future’ ...
[18:01:11.872] - state: ‘created’
[18:01:11.872] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:01:11.881] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:11.881] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:01:11.882]   - Field: ‘label’
[18:01:11.882]   - Field: ‘local’
[18:01:11.882]   - Field: ‘owner’
[18:01:11.883]   - Field: ‘envir’
[18:01:11.883]   - Field: ‘workers’
[18:01:11.883]   - Field: ‘packages’
[18:01:11.884]   - Field: ‘gc’
[18:01:11.884]   - Field: ‘job’
[18:01:11.884]   - Field: ‘conditions’
[18:01:11.885]   - Field: ‘expr’
[18:01:11.885]   - Field: ‘uuid’
[18:01:11.885]   - Field: ‘seed’
[18:01:11.886]   - Field: ‘version’
[18:01:11.886]   - Field: ‘result’
[18:01:11.886]   - Field: ‘asynchronous’
[18:01:11.887]   - Field: ‘calls’
[18:01:11.887]   - Field: ‘globals’
[18:01:11.887]   - Field: ‘stdout’
[18:01:11.888]   - Field: ‘earlySignal’
[18:01:11.888]   - Field: ‘lazy’
[18:01:11.888]   - Field: ‘state’
[18:01:11.888] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:01:11.889] - Launch lazy future ...
[18:01:11.890] Packages needed by the future expression (n = 0): <none>
[18:01:11.890] Packages needed by future strategies (n = 0): <none>
[18:01:11.892] {
[18:01:11.892]     {
[18:01:11.892]         {
[18:01:11.892]             ...future.startTime <- base::Sys.time()
[18:01:11.892]             {
[18:01:11.892]                 {
[18:01:11.892]                   {
[18:01:11.892]                     {
[18:01:11.892]                       base::local({
[18:01:11.892]                         has_future <- base::requireNamespace("future", 
[18:01:11.892]                           quietly = TRUE)
[18:01:11.892]                         if (has_future) {
[18:01:11.892]                           ns <- base::getNamespace("future")
[18:01:11.892]                           version <- ns[[".package"]][["version"]]
[18:01:11.892]                           if (is.null(version)) 
[18:01:11.892]                             version <- utils::packageVersion("future")
[18:01:11.892]                         }
[18:01:11.892]                         else {
[18:01:11.892]                           version <- NULL
[18:01:11.892]                         }
[18:01:11.892]                         if (!has_future || version < "1.8.0") {
[18:01:11.892]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:11.892]                             "", base::R.version$version.string), 
[18:01:11.892]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:11.892]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:11.892]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:11.892]                               "release", "version")], collapse = " "), 
[18:01:11.892]                             hostname = base::Sys.info()[["nodename"]])
[18:01:11.892]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:11.892]                             info)
[18:01:11.892]                           info <- base::paste(info, collapse = "; ")
[18:01:11.892]                           if (!has_future) {
[18:01:11.892]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:11.892]                               info)
[18:01:11.892]                           }
[18:01:11.892]                           else {
[18:01:11.892]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:11.892]                               info, version)
[18:01:11.892]                           }
[18:01:11.892]                           base::stop(msg)
[18:01:11.892]                         }
[18:01:11.892]                       })
[18:01:11.892]                     }
[18:01:11.892]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:11.892]                     base::options(mc.cores = 1L)
[18:01:11.892]                   }
[18:01:11.892]                   ...future.strategy.old <- future::plan("list")
[18:01:11.892]                   options(future.plan = NULL)
[18:01:11.892]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:11.892]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:11.892]                 }
[18:01:11.892]                 ...future.workdir <- getwd()
[18:01:11.892]             }
[18:01:11.892]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:11.892]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:11.892]         }
[18:01:11.892]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:11.892]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:11.892]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:11.892]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:11.892]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:11.892]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:11.892]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:11.892]             base::names(...future.oldOptions))
[18:01:11.892]     }
[18:01:11.892]     if (FALSE) {
[18:01:11.892]     }
[18:01:11.892]     else {
[18:01:11.892]         if (TRUE) {
[18:01:11.892]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:11.892]                 open = "w")
[18:01:11.892]         }
[18:01:11.892]         else {
[18:01:11.892]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:11.892]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:11.892]         }
[18:01:11.892]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:11.892]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:11.892]             base::sink(type = "output", split = FALSE)
[18:01:11.892]             base::close(...future.stdout)
[18:01:11.892]         }, add = TRUE)
[18:01:11.892]     }
[18:01:11.892]     ...future.frame <- base::sys.nframe()
[18:01:11.892]     ...future.conditions <- base::list()
[18:01:11.892]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:11.892]     if (FALSE) {
[18:01:11.892]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:11.892]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:11.892]     }
[18:01:11.892]     ...future.result <- base::tryCatch({
[18:01:11.892]         base::withCallingHandlers({
[18:01:11.892]             ...future.value <- base::withVisible(base::local({
[18:01:11.892]                 withCallingHandlers({
[18:01:11.892]                   {
[18:01:11.892]                     do.call(function(...) {
[18:01:11.892]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.892]                       if (!identical(...future.globals.maxSize.org, 
[18:01:11.892]                         ...future.globals.maxSize)) {
[18:01:11.892]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.892]                         on.exit(options(oopts), add = TRUE)
[18:01:11.892]                       }
[18:01:11.892]                       {
[18:01:11.892]                         lapply(seq_along(...future.elements_ii), 
[18:01:11.892]                           FUN = function(jj) {
[18:01:11.892]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.892]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.892]                               envir = globalenv(), inherits = FALSE)
[18:01:11.892]                             ...future.FUN(...future.X_jj, ...)
[18:01:11.892]                           })
[18:01:11.892]                       }
[18:01:11.892]                     }, args = future.call.arguments)
[18:01:11.892]                   }
[18:01:11.892]                 }, immediateCondition = function(cond) {
[18:01:11.892]                   save_rds <- function (object, pathname, ...) 
[18:01:11.892]                   {
[18:01:11.892]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:01:11.892]                     if (file_test("-f", pathname_tmp)) {
[18:01:11.892]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.892]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:01:11.892]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.892]                         fi_tmp[["mtime"]])
[18:01:11.892]                     }
[18:01:11.892]                     tryCatch({
[18:01:11.892]                       saveRDS(object, file = pathname_tmp, ...)
[18:01:11.892]                     }, error = function(ex) {
[18:01:11.892]                       msg <- conditionMessage(ex)
[18:01:11.892]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.892]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:01:11.892]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.892]                         fi_tmp[["mtime"]], msg)
[18:01:11.892]                       ex$message <- msg
[18:01:11.892]                       stop(ex)
[18:01:11.892]                     })
[18:01:11.892]                     stopifnot(file_test("-f", pathname_tmp))
[18:01:11.892]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:01:11.892]                     if (!res || file_test("-f", pathname_tmp)) {
[18:01:11.892]                       fi_tmp <- file.info(pathname_tmp)
[18:01:11.892]                       fi <- file.info(pathname)
[18:01:11.892]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:01:11.892]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:11.892]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:01:11.892]                         fi[["size"]], fi[["mtime"]])
[18:01:11.892]                       stop(msg)
[18:01:11.892]                     }
[18:01:11.892]                     invisible(pathname)
[18:01:11.892]                   }
[18:01:11.892]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:01:11.892]                     rootPath = tempdir()) 
[18:01:11.892]                   {
[18:01:11.892]                     obj <- list(time = Sys.time(), condition = cond)
[18:01:11.892]                     file <- tempfile(pattern = class(cond)[1], 
[18:01:11.892]                       tmpdir = path, fileext = ".rds")
[18:01:11.892]                     save_rds(obj, file)
[18:01:11.892]                   }
[18:01:11.892]                   saveImmediateCondition(cond, path = "/tmp/RtmpTMmi8X/.future/immediateConditions")
[18:01:11.892]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.892]                   {
[18:01:11.892]                     inherits <- base::inherits
[18:01:11.892]                     invokeRestart <- base::invokeRestart
[18:01:11.892]                     is.null <- base::is.null
[18:01:11.892]                     muffled <- FALSE
[18:01:11.892]                     if (inherits(cond, "message")) {
[18:01:11.892]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:11.892]                       if (muffled) 
[18:01:11.892]                         invokeRestart("muffleMessage")
[18:01:11.892]                     }
[18:01:11.892]                     else if (inherits(cond, "warning")) {
[18:01:11.892]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:11.892]                       if (muffled) 
[18:01:11.892]                         invokeRestart("muffleWarning")
[18:01:11.892]                     }
[18:01:11.892]                     else if (inherits(cond, "condition")) {
[18:01:11.892]                       if (!is.null(pattern)) {
[18:01:11.892]                         computeRestarts <- base::computeRestarts
[18:01:11.892]                         grepl <- base::grepl
[18:01:11.892]                         restarts <- computeRestarts(cond)
[18:01:11.892]                         for (restart in restarts) {
[18:01:11.892]                           name <- restart$name
[18:01:11.892]                           if (is.null(name)) 
[18:01:11.892]                             next
[18:01:11.892]                           if (!grepl(pattern, name)) 
[18:01:11.892]                             next
[18:01:11.892]                           invokeRestart(restart)
[18:01:11.892]                           muffled <- TRUE
[18:01:11.892]                           break
[18:01:11.892]                         }
[18:01:11.892]                       }
[18:01:11.892]                     }
[18:01:11.892]                     invisible(muffled)
[18:01:11.892]                   }
[18:01:11.892]                   muffleCondition(cond)
[18:01:11.892]                 })
[18:01:11.892]             }))
[18:01:11.892]             future::FutureResult(value = ...future.value$value, 
[18:01:11.892]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:11.892]                   ...future.rng), globalenv = if (FALSE) 
[18:01:11.892]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:11.892]                     ...future.globalenv.names))
[18:01:11.892]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:11.892]         }, condition = base::local({
[18:01:11.892]             c <- base::c
[18:01:11.892]             inherits <- base::inherits
[18:01:11.892]             invokeRestart <- base::invokeRestart
[18:01:11.892]             length <- base::length
[18:01:11.892]             list <- base::list
[18:01:11.892]             seq.int <- base::seq.int
[18:01:11.892]             signalCondition <- base::signalCondition
[18:01:11.892]             sys.calls <- base::sys.calls
[18:01:11.892]             `[[` <- base::`[[`
[18:01:11.892]             `+` <- base::`+`
[18:01:11.892]             `<<-` <- base::`<<-`
[18:01:11.892]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:11.892]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:11.892]                   3L)]
[18:01:11.892]             }
[18:01:11.892]             function(cond) {
[18:01:11.892]                 is_error <- inherits(cond, "error")
[18:01:11.892]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:11.892]                   NULL)
[18:01:11.892]                 if (is_error) {
[18:01:11.892]                   sessionInformation <- function() {
[18:01:11.892]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:11.892]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:11.892]                       search = base::search(), system = base::Sys.info())
[18:01:11.892]                   }
[18:01:11.892]                   ...future.conditions[[length(...future.conditions) + 
[18:01:11.892]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:11.892]                     cond$call), session = sessionInformation(), 
[18:01:11.892]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:11.892]                   signalCondition(cond)
[18:01:11.892]                 }
[18:01:11.892]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:11.892]                 "immediateCondition"))) {
[18:01:11.892]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:11.892]                   ...future.conditions[[length(...future.conditions) + 
[18:01:11.892]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:11.892]                   if (TRUE && !signal) {
[18:01:11.892]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.892]                     {
[18:01:11.892]                       inherits <- base::inherits
[18:01:11.892]                       invokeRestart <- base::invokeRestart
[18:01:11.892]                       is.null <- base::is.null
[18:01:11.892]                       muffled <- FALSE
[18:01:11.892]                       if (inherits(cond, "message")) {
[18:01:11.892]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:11.892]                         if (muffled) 
[18:01:11.892]                           invokeRestart("muffleMessage")
[18:01:11.892]                       }
[18:01:11.892]                       else if (inherits(cond, "warning")) {
[18:01:11.892]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:11.892]                         if (muffled) 
[18:01:11.892]                           invokeRestart("muffleWarning")
[18:01:11.892]                       }
[18:01:11.892]                       else if (inherits(cond, "condition")) {
[18:01:11.892]                         if (!is.null(pattern)) {
[18:01:11.892]                           computeRestarts <- base::computeRestarts
[18:01:11.892]                           grepl <- base::grepl
[18:01:11.892]                           restarts <- computeRestarts(cond)
[18:01:11.892]                           for (restart in restarts) {
[18:01:11.892]                             name <- restart$name
[18:01:11.892]                             if (is.null(name)) 
[18:01:11.892]                               next
[18:01:11.892]                             if (!grepl(pattern, name)) 
[18:01:11.892]                               next
[18:01:11.892]                             invokeRestart(restart)
[18:01:11.892]                             muffled <- TRUE
[18:01:11.892]                             break
[18:01:11.892]                           }
[18:01:11.892]                         }
[18:01:11.892]                       }
[18:01:11.892]                       invisible(muffled)
[18:01:11.892]                     }
[18:01:11.892]                     muffleCondition(cond, pattern = "^muffle")
[18:01:11.892]                   }
[18:01:11.892]                 }
[18:01:11.892]                 else {
[18:01:11.892]                   if (TRUE) {
[18:01:11.892]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:11.892]                     {
[18:01:11.892]                       inherits <- base::inherits
[18:01:11.892]                       invokeRestart <- base::invokeRestart
[18:01:11.892]                       is.null <- base::is.null
[18:01:11.892]                       muffled <- FALSE
[18:01:11.892]                       if (inherits(cond, "message")) {
[18:01:11.892]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:11.892]                         if (muffled) 
[18:01:11.892]                           invokeRestart("muffleMessage")
[18:01:11.892]                       }
[18:01:11.892]                       else if (inherits(cond, "warning")) {
[18:01:11.892]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:11.892]                         if (muffled) 
[18:01:11.892]                           invokeRestart("muffleWarning")
[18:01:11.892]                       }
[18:01:11.892]                       else if (inherits(cond, "condition")) {
[18:01:11.892]                         if (!is.null(pattern)) {
[18:01:11.892]                           computeRestarts <- base::computeRestarts
[18:01:11.892]                           grepl <- base::grepl
[18:01:11.892]                           restarts <- computeRestarts(cond)
[18:01:11.892]                           for (restart in restarts) {
[18:01:11.892]                             name <- restart$name
[18:01:11.892]                             if (is.null(name)) 
[18:01:11.892]                               next
[18:01:11.892]                             if (!grepl(pattern, name)) 
[18:01:11.892]                               next
[18:01:11.892]                             invokeRestart(restart)
[18:01:11.892]                             muffled <- TRUE
[18:01:11.892]                             break
[18:01:11.892]                           }
[18:01:11.892]                         }
[18:01:11.892]                       }
[18:01:11.892]                       invisible(muffled)
[18:01:11.892]                     }
[18:01:11.892]                     muffleCondition(cond, pattern = "^muffle")
[18:01:11.892]                   }
[18:01:11.892]                 }
[18:01:11.892]             }
[18:01:11.892]         }))
[18:01:11.892]     }, error = function(ex) {
[18:01:11.892]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:11.892]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:11.892]                 ...future.rng), started = ...future.startTime, 
[18:01:11.892]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:11.892]             version = "1.8"), class = "FutureResult")
[18:01:11.892]     }, finally = {
[18:01:11.892]         if (!identical(...future.workdir, getwd())) 
[18:01:11.892]             setwd(...future.workdir)
[18:01:11.892]         {
[18:01:11.892]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:11.892]                 ...future.oldOptions$nwarnings <- NULL
[18:01:11.892]             }
[18:01:11.892]             base::options(...future.oldOptions)
[18:01:11.892]             if (.Platform$OS.type == "windows") {
[18:01:11.892]                 old_names <- names(...future.oldEnvVars)
[18:01:11.892]                 envs <- base::Sys.getenv()
[18:01:11.892]                 names <- names(envs)
[18:01:11.892]                 common <- intersect(names, old_names)
[18:01:11.892]                 added <- setdiff(names, old_names)
[18:01:11.892]                 removed <- setdiff(old_names, names)
[18:01:11.892]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:11.892]                   envs[common]]
[18:01:11.892]                 NAMES <- toupper(changed)
[18:01:11.892]                 args <- list()
[18:01:11.892]                 for (kk in seq_along(NAMES)) {
[18:01:11.892]                   name <- changed[[kk]]
[18:01:11.892]                   NAME <- NAMES[[kk]]
[18:01:11.892]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.892]                     next
[18:01:11.892]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:11.892]                 }
[18:01:11.892]                 NAMES <- toupper(added)
[18:01:11.892]                 for (kk in seq_along(NAMES)) {
[18:01:11.892]                   name <- added[[kk]]
[18:01:11.892]                   NAME <- NAMES[[kk]]
[18:01:11.892]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.892]                     next
[18:01:11.892]                   args[[name]] <- ""
[18:01:11.892]                 }
[18:01:11.892]                 NAMES <- toupper(removed)
[18:01:11.892]                 for (kk in seq_along(NAMES)) {
[18:01:11.892]                   name <- removed[[kk]]
[18:01:11.892]                   NAME <- NAMES[[kk]]
[18:01:11.892]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:11.892]                     next
[18:01:11.892]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:11.892]                 }
[18:01:11.892]                 if (length(args) > 0) 
[18:01:11.892]                   base::do.call(base::Sys.setenv, args = args)
[18:01:11.892]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:11.892]             }
[18:01:11.892]             else {
[18:01:11.892]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:11.892]             }
[18:01:11.892]             {
[18:01:11.892]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:11.892]                   0L) {
[18:01:11.892]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:11.892]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:11.892]                   base::options(opts)
[18:01:11.892]                 }
[18:01:11.892]                 {
[18:01:11.892]                   {
[18:01:11.892]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:11.892]                     NULL
[18:01:11.892]                   }
[18:01:11.892]                   options(future.plan = NULL)
[18:01:11.892]                   if (is.na(NA_character_)) 
[18:01:11.892]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:11.892]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:11.892]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:11.892]                     .init = FALSE)
[18:01:11.892]                 }
[18:01:11.892]             }
[18:01:11.892]         }
[18:01:11.892]     })
[18:01:11.892]     if (TRUE) {
[18:01:11.892]         base::sink(type = "output", split = FALSE)
[18:01:11.892]         if (TRUE) {
[18:01:11.892]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:11.892]         }
[18:01:11.892]         else {
[18:01:11.892]             ...future.result["stdout"] <- base::list(NULL)
[18:01:11.892]         }
[18:01:11.892]         base::close(...future.stdout)
[18:01:11.892]         ...future.stdout <- NULL
[18:01:11.892]     }
[18:01:11.892]     ...future.result$conditions <- ...future.conditions
[18:01:11.892]     ...future.result$finished <- base::Sys.time()
[18:01:11.892]     ...future.result
[18:01:11.892] }
[18:01:11.899] assign_globals() ...
[18:01:11.899] List of 5
[18:01:11.899]  $ ...future.FUN            :function (...)  
[18:01:11.899]  $ future.call.arguments    : list()
[18:01:11.899]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:11.899]  $ ...future.elements_ii    :List of 3
[18:01:11.899]   ..$ : int 0
[18:01:11.899]   ..$ : int 0
[18:01:11.899]   ..$ : int 0
[18:01:11.899]  $ ...future.seeds_ii       :List of 3
[18:01:11.899]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[18:01:11.899]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[18:01:11.899]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[18:01:11.899]  $ ...future.globals.maxSize: NULL
[18:01:11.899]  - attr(*, "where")=List of 5
[18:01:11.899]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[18:01:11.899]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[18:01:11.899]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[18:01:11.899]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[18:01:11.899]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[18:01:11.899]  - attr(*, "resolved")= logi FALSE
[18:01:11.899]  - attr(*, "total_size")= num 616
[18:01:11.899]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:11.899]  - attr(*, "already-done")= logi TRUE
[18:01:11.926] - reassign environment for ‘...future.FUN’
[18:01:11.926] - copied ‘...future.FUN’ to environment
[18:01:11.927] - copied ‘future.call.arguments’ to environment
[18:01:11.927] - copied ‘...future.elements_ii’ to environment
[18:01:11.927] - copied ‘...future.seeds_ii’ to environment
[18:01:11.928] - copied ‘...future.globals.maxSize’ to environment
[18:01:11.928] assign_globals() ... done
[18:01:11.928] requestCore(): workers = 2
[18:01:11.933] MulticoreFuture started
[18:01:11.934] - Launch lazy future ... done
[18:01:11.934] run() for ‘MulticoreFuture’ ... done
[18:01:11.935] Created future:
[18:01:11.935] plan(): Setting new future strategy stack:
[18:01:11.936] List of future strategies:
[18:01:11.936] 1. sequential:
[18:01:11.936]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:11.936]    - tweaked: FALSE
[18:01:11.936]    - call: NULL
[18:01:11.938] plan(): nbrOfWorkers() = 1
[18:01:11.943] plan(): Setting new future strategy stack:
[18:01:11.943] List of future strategies:
[18:01:11.943] 1. multicore:
[18:01:11.943]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:01:11.943]    - tweaked: FALSE
[18:01:11.943]    - call: plan(strategy)
[18:01:11.935] MulticoreFuture:
[18:01:11.935] Label: ‘future_replicate-2’
[18:01:11.935] Expression:
[18:01:11.935] {
[18:01:11.935]     do.call(function(...) {
[18:01:11.935]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:11.935]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:11.935]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:11.935]             on.exit(options(oopts), add = TRUE)
[18:01:11.935]         }
[18:01:11.935]         {
[18:01:11.935]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:11.935]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:11.935]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:11.935]                   envir = globalenv(), inherits = FALSE)
[18:01:11.935]                 ...future.FUN(...future.X_jj, ...)
[18:01:11.935]             })
[18:01:11.935]         }
[18:01:11.935]     }, args = future.call.arguments)
[18:01:11.935] }
[18:01:11.935] Lazy evaluation: FALSE
[18:01:11.935] Asynchronous evaluation: TRUE
[18:01:11.935] Local evaluation: TRUE
[18:01:11.935] Environment: R_GlobalEnv
[18:01:11.935] Capture standard output: TRUE
[18:01:11.935] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:11.935] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:11.935] Packages: <none>
[18:01:11.935] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:11.935] Resolved: FALSE
[18:01:11.935] Value: <not collected>
[18:01:11.935] Conditions captured: <none>
[18:01:11.935] Early signaling: FALSE
[18:01:11.935] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:11.935] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:11.953] Chunk #2 of 2 ... DONE
[18:01:11.955] plan(): nbrOfWorkers() = 2
[18:01:11.954] Launching 2 futures (chunks) ... DONE
[18:01:11.956] Resolving 2 futures (chunks) ...
[18:01:11.956] resolve() on list ...
[18:01:11.957]  recursive: 0
[18:01:11.957]  length: 2
[18:01:11.957] 
[18:01:11.958] Future #1
[18:01:11.959] result() for MulticoreFuture ...
[18:01:11.962] result() for MulticoreFuture ...
[18:01:11.963] result() for MulticoreFuture ... done
[18:01:11.963] result() for MulticoreFuture ... done
[18:01:11.964] result() for MulticoreFuture ...
[18:01:11.966] result() for MulticoreFuture ... done
[18:01:11.967] signalConditionsASAP(MulticoreFuture, pos=1) ...
[18:01:11.967] - nx: 2
[18:01:11.967] - relay: TRUE
[18:01:11.968] - stdout: TRUE
[18:01:11.968] - signal: TRUE
[18:01:11.969] - resignal: FALSE
[18:01:11.969] - force: TRUE
[18:01:11.969] - relayed: [n=2] FALSE, FALSE
[18:01:11.970] - queued futures: [n=2] FALSE, FALSE
[18:01:11.970]  - until=1
[18:01:11.970]  - relaying element #1
[18:01:11.971] result() for MulticoreFuture ...
[18:01:11.971] result() for MulticoreFuture ... done
[18:01:11.971] result() for MulticoreFuture ...
[18:01:11.971] result() for MulticoreFuture ... done
[18:01:11.972] result() for MulticoreFuture ...
[18:01:11.972] result() for MulticoreFuture ... done
[18:01:11.973] result() for MulticoreFuture ...
[18:01:11.973] result() for MulticoreFuture ... done
[18:01:11.973] - relayed: [n=2] TRUE, FALSE
[18:01:11.973] - queued futures: [n=2] TRUE, FALSE
[18:01:11.974] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[18:01:11.974]  length: 1 (resolved future 1)
[18:01:11.975] Future #2
[18:01:11.975] result() for MulticoreFuture ...
[18:01:11.979] result() for MulticoreFuture ...
[18:01:11.980] result() for MulticoreFuture ... done
[18:01:11.980] result() for MulticoreFuture ... done
[18:01:11.980] result() for MulticoreFuture ...
[18:01:11.981] result() for MulticoreFuture ... done
[18:01:11.981] signalConditionsASAP(MulticoreFuture, pos=2) ...
[18:01:11.981] - nx: 2
[18:01:11.981] - relay: TRUE
[18:01:11.982] - stdout: TRUE
[18:01:11.982] - signal: TRUE
[18:01:11.982] - resignal: FALSE
[18:01:11.982] - force: TRUE
[18:01:11.982] - relayed: [n=2] TRUE, FALSE
[18:01:11.983] - queued futures: [n=2] TRUE, FALSE
[18:01:11.983]  - until=2
[18:01:11.983]  - relaying element #2
[18:01:11.983] result() for MulticoreFuture ...
[18:01:11.984] result() for MulticoreFuture ... done
[18:01:11.984] result() for MulticoreFuture ...
[18:01:11.984] result() for MulticoreFuture ... done
[18:01:11.984] result() for MulticoreFuture ...
[18:01:11.985] result() for MulticoreFuture ... done
[18:01:11.985] result() for MulticoreFuture ...
[18:01:11.985] result() for MulticoreFuture ... done
[18:01:11.985] - relayed: [n=2] TRUE, TRUE
[18:01:11.986] - queued futures: [n=2] TRUE, TRUE
[18:01:11.986] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[18:01:11.986]  length: 0 (resolved future 2)
[18:01:11.986] Relaying remaining futures
[18:01:11.987] signalConditionsASAP(NULL, pos=0) ...
[18:01:11.987] - nx: 2
[18:01:11.987] - relay: TRUE
[18:01:11.987] - stdout: TRUE
[18:01:11.987] - signal: TRUE
[18:01:11.988] - resignal: FALSE
[18:01:11.988] - force: TRUE
[18:01:11.988] - relayed: [n=2] TRUE, TRUE
[18:01:11.988] - queued futures: [n=2] TRUE, TRUE
 - flush all
[18:01:11.989] - relayed: [n=2] TRUE, TRUE
[18:01:11.989] - queued futures: [n=2] TRUE, TRUE
[18:01:11.989] signalConditionsASAP(NULL, pos=0) ... done
[18:01:11.989] resolve() on list ... DONE
[18:01:11.989] result() for MulticoreFuture ...
[18:01:11.990] result() for MulticoreFuture ... done
[18:01:11.990] result() for MulticoreFuture ...
[18:01:11.990] result() for MulticoreFuture ... done
[18:01:11.990] result() for MulticoreFuture ...
[18:01:11.991] result() for MulticoreFuture ... done
[18:01:11.991] result() for MulticoreFuture ...
[18:01:11.991] result() for MulticoreFuture ... done
[18:01:11.991]  - Number of value chunks collected: 2
[18:01:11.992] Resolving 2 futures (chunks) ... DONE
[18:01:11.992] Reducing values from 2 chunks ...
[18:01:11.992]  - Number of values collected after concatenation: 5
[18:01:11.992]  - Number of values expected: 5
[18:01:11.992] Reducing values from 2 chunks ... DONE
[18:01:11.993] future_lapply() ... DONE
[18:01:11.993] future_lapply() ...
[18:01:11.994] Generating random seeds ...
[18:01:11.994] Generating random seed streams for 5 elements ...
[18:01:11.995] Generating random seed streams for 5 elements ... DONE
[18:01:11.995] Generating random seeds ... DONE
[18:01:11.995] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[18:01:12.004] Number of chunks: 2
[18:01:12.004] getGlobalsAndPackagesXApply() ...
[18:01:12.004]  - future.globals: TRUE
[18:01:12.005] getGlobalsAndPackages() ...
[18:01:12.005] Searching for globals...
[18:01:12.007] - globals found: [2] ‘FUN’, ‘sample’
[18:01:12.008] Searching for globals ... DONE
[18:01:12.008] Resolving globals: FALSE
[18:01:12.009] The total size of the 1 globals is 616 bytes (616 bytes)
[18:01:12.009] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[18:01:12.010] - globals: [1] ‘FUN’
[18:01:12.010] 
[18:01:12.010] getGlobalsAndPackages() ... DONE
[18:01:12.010]  - globals found/used: [n=1] ‘FUN’
[18:01:12.011]  - needed namespaces: [n=0] 
[18:01:12.011] Finding globals ... DONE
[18:01:12.011]  - use_args: TRUE
[18:01:12.011]  - Getting '...' globals ...
[18:01:12.012] resolve() on list ...
[18:01:12.012]  recursive: 0
[18:01:12.012]  length: 1
[18:01:12.013]  elements: ‘...’
[18:01:12.013]  length: 0 (resolved future 1)
[18:01:12.013] resolve() on list ... DONE
[18:01:12.013]    - '...' content: [n=0] 
[18:01:12.014] List of 1
[18:01:12.014]  $ ...: list()
[18:01:12.014]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:12.014]  - attr(*, "where")=List of 1
[18:01:12.014]   ..$ ...:<environment: 0x635eb506a898> 
[18:01:12.014]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:12.014]  - attr(*, "resolved")= logi TRUE
[18:01:12.014]  - attr(*, "total_size")= num NA
[18:01:12.022]  - Getting '...' globals ... DONE
[18:01:12.023] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[18:01:12.023] List of 2
[18:01:12.023]  $ ...future.FUN:function (...)  
[18:01:12.023]  $ ...          : list()
[18:01:12.023]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:12.023]  - attr(*, "where")=List of 2
[18:01:12.023]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[18:01:12.023]   ..$ ...          :<environment: 0x635eb506a898> 
[18:01:12.023]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:12.023]  - attr(*, "resolved")= logi FALSE
[18:01:12.023]  - attr(*, "total_size")= num 616
[18:01:12.029] Packages to be attached in all futures: [n=0] 
[18:01:12.030] getGlobalsAndPackagesXApply() ... DONE
[18:01:12.030] Number of futures (= number of chunks): 2
[18:01:12.030] Launching 2 futures (chunks) ...
[18:01:12.031] Chunk #1 of 2 ...
[18:01:12.031]  - Finding globals in 'X' for chunk #1 ...
[18:01:12.031] getGlobalsAndPackages() ...
[18:01:12.031] Searching for globals...
[18:01:12.032] 
[18:01:12.032] Searching for globals ... DONE
[18:01:12.032] - globals: [0] <none>
[18:01:12.032] getGlobalsAndPackages() ... DONE
[18:01:12.032]    + additional globals found: [n=0] 
[18:01:12.033]    + additional namespaces needed: [n=0] 
[18:01:12.033]  - Finding globals in 'X' for chunk #1 ... DONE
[18:01:12.033]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:12.033]  - seeds: [2] <seeds>
[18:01:12.033]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:12.034] getGlobalsAndPackages() ...
[18:01:12.034] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:12.034] Resolving globals: FALSE
[18:01:12.034] Tweak future expression to call with '...' arguments ...
[18:01:12.035] {
[18:01:12.035]     do.call(function(...) {
[18:01:12.035]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:12.035]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:12.035]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:12.035]             on.exit(options(oopts), add = TRUE)
[18:01:12.035]         }
[18:01:12.035]         {
[18:01:12.035]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:12.035]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:12.035]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:12.035]                   envir = globalenv(), inherits = FALSE)
[18:01:12.035]                 ...future.FUN(...future.X_jj, ...)
[18:01:12.035]             })
[18:01:12.035]         }
[18:01:12.035]     }, args = future.call.arguments)
[18:01:12.035] }
[18:01:12.035] Tweak future expression to call with '...' arguments ... DONE
[18:01:12.036] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:12.036] 
[18:01:12.036] getGlobalsAndPackages() ... DONE
[18:01:12.037] run() for ‘Future’ ...
[18:01:12.037] - state: ‘created’
[18:01:12.037] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:01:12.044] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:12.044] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:01:12.044]   - Field: ‘label’
[18:01:12.045]   - Field: ‘local’
[18:01:12.045]   - Field: ‘owner’
[18:01:12.045]   - Field: ‘envir’
[18:01:12.045]   - Field: ‘workers’
[18:01:12.045]   - Field: ‘packages’
[18:01:12.046]   - Field: ‘gc’
[18:01:12.046]   - Field: ‘job’
[18:01:12.046]   - Field: ‘conditions’
[18:01:12.046]   - Field: ‘expr’
[18:01:12.046]   - Field: ‘uuid’
[18:01:12.047]   - Field: ‘seed’
[18:01:12.047]   - Field: ‘version’
[18:01:12.047]   - Field: ‘result’
[18:01:12.047]   - Field: ‘asynchronous’
[18:01:12.048]   - Field: ‘calls’
[18:01:12.048]   - Field: ‘globals’
[18:01:12.048]   - Field: ‘stdout’
[18:01:12.048]   - Field: ‘earlySignal’
[18:01:12.048]   - Field: ‘lazy’
[18:01:12.048]   - Field: ‘state’
[18:01:12.049] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:01:12.049] - Launch lazy future ...
[18:01:12.049] Packages needed by the future expression (n = 0): <none>
[18:01:12.050] Packages needed by future strategies (n = 0): <none>
[18:01:12.051] {
[18:01:12.051]     {
[18:01:12.051]         {
[18:01:12.051]             ...future.startTime <- base::Sys.time()
[18:01:12.051]             {
[18:01:12.051]                 {
[18:01:12.051]                   {
[18:01:12.051]                     {
[18:01:12.051]                       base::local({
[18:01:12.051]                         has_future <- base::requireNamespace("future", 
[18:01:12.051]                           quietly = TRUE)
[18:01:12.051]                         if (has_future) {
[18:01:12.051]                           ns <- base::getNamespace("future")
[18:01:12.051]                           version <- ns[[".package"]][["version"]]
[18:01:12.051]                           if (is.null(version)) 
[18:01:12.051]                             version <- utils::packageVersion("future")
[18:01:12.051]                         }
[18:01:12.051]                         else {
[18:01:12.051]                           version <- NULL
[18:01:12.051]                         }
[18:01:12.051]                         if (!has_future || version < "1.8.0") {
[18:01:12.051]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:12.051]                             "", base::R.version$version.string), 
[18:01:12.051]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:12.051]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:12.051]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:12.051]                               "release", "version")], collapse = " "), 
[18:01:12.051]                             hostname = base::Sys.info()[["nodename"]])
[18:01:12.051]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:12.051]                             info)
[18:01:12.051]                           info <- base::paste(info, collapse = "; ")
[18:01:12.051]                           if (!has_future) {
[18:01:12.051]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:12.051]                               info)
[18:01:12.051]                           }
[18:01:12.051]                           else {
[18:01:12.051]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:12.051]                               info, version)
[18:01:12.051]                           }
[18:01:12.051]                           base::stop(msg)
[18:01:12.051]                         }
[18:01:12.051]                       })
[18:01:12.051]                     }
[18:01:12.051]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:12.051]                     base::options(mc.cores = 1L)
[18:01:12.051]                   }
[18:01:12.051]                   ...future.strategy.old <- future::plan("list")
[18:01:12.051]                   options(future.plan = NULL)
[18:01:12.051]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:12.051]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:12.051]                 }
[18:01:12.051]                 ...future.workdir <- getwd()
[18:01:12.051]             }
[18:01:12.051]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:12.051]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:12.051]         }
[18:01:12.051]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:12.051]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:12.051]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:12.051]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:12.051]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:12.051]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:12.051]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:12.051]             base::names(...future.oldOptions))
[18:01:12.051]     }
[18:01:12.051]     if (FALSE) {
[18:01:12.051]     }
[18:01:12.051]     else {
[18:01:12.051]         if (TRUE) {
[18:01:12.051]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:12.051]                 open = "w")
[18:01:12.051]         }
[18:01:12.051]         else {
[18:01:12.051]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:12.051]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:12.051]         }
[18:01:12.051]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:12.051]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:12.051]             base::sink(type = "output", split = FALSE)
[18:01:12.051]             base::close(...future.stdout)
[18:01:12.051]         }, add = TRUE)
[18:01:12.051]     }
[18:01:12.051]     ...future.frame <- base::sys.nframe()
[18:01:12.051]     ...future.conditions <- base::list()
[18:01:12.051]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:12.051]     if (FALSE) {
[18:01:12.051]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:12.051]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:12.051]     }
[18:01:12.051]     ...future.result <- base::tryCatch({
[18:01:12.051]         base::withCallingHandlers({
[18:01:12.051]             ...future.value <- base::withVisible(base::local({
[18:01:12.051]                 withCallingHandlers({
[18:01:12.051]                   {
[18:01:12.051]                     do.call(function(...) {
[18:01:12.051]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:12.051]                       if (!identical(...future.globals.maxSize.org, 
[18:01:12.051]                         ...future.globals.maxSize)) {
[18:01:12.051]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:12.051]                         on.exit(options(oopts), add = TRUE)
[18:01:12.051]                       }
[18:01:12.051]                       {
[18:01:12.051]                         lapply(seq_along(...future.elements_ii), 
[18:01:12.051]                           FUN = function(jj) {
[18:01:12.051]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:12.051]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:12.051]                               envir = globalenv(), inherits = FALSE)
[18:01:12.051]                             ...future.FUN(...future.X_jj, ...)
[18:01:12.051]                           })
[18:01:12.051]                       }
[18:01:12.051]                     }, args = future.call.arguments)
[18:01:12.051]                   }
[18:01:12.051]                 }, immediateCondition = function(cond) {
[18:01:12.051]                   save_rds <- function (object, pathname, ...) 
[18:01:12.051]                   {
[18:01:12.051]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:01:12.051]                     if (file_test("-f", pathname_tmp)) {
[18:01:12.051]                       fi_tmp <- file.info(pathname_tmp)
[18:01:12.051]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:01:12.051]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:12.051]                         fi_tmp[["mtime"]])
[18:01:12.051]                     }
[18:01:12.051]                     tryCatch({
[18:01:12.051]                       saveRDS(object, file = pathname_tmp, ...)
[18:01:12.051]                     }, error = function(ex) {
[18:01:12.051]                       msg <- conditionMessage(ex)
[18:01:12.051]                       fi_tmp <- file.info(pathname_tmp)
[18:01:12.051]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:01:12.051]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:12.051]                         fi_tmp[["mtime"]], msg)
[18:01:12.051]                       ex$message <- msg
[18:01:12.051]                       stop(ex)
[18:01:12.051]                     })
[18:01:12.051]                     stopifnot(file_test("-f", pathname_tmp))
[18:01:12.051]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:01:12.051]                     if (!res || file_test("-f", pathname_tmp)) {
[18:01:12.051]                       fi_tmp <- file.info(pathname_tmp)
[18:01:12.051]                       fi <- file.info(pathname)
[18:01:12.051]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:01:12.051]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:12.051]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:01:12.051]                         fi[["size"]], fi[["mtime"]])
[18:01:12.051]                       stop(msg)
[18:01:12.051]                     }
[18:01:12.051]                     invisible(pathname)
[18:01:12.051]                   }
[18:01:12.051]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:01:12.051]                     rootPath = tempdir()) 
[18:01:12.051]                   {
[18:01:12.051]                     obj <- list(time = Sys.time(), condition = cond)
[18:01:12.051]                     file <- tempfile(pattern = class(cond)[1], 
[18:01:12.051]                       tmpdir = path, fileext = ".rds")
[18:01:12.051]                     save_rds(obj, file)
[18:01:12.051]                   }
[18:01:12.051]                   saveImmediateCondition(cond, path = "/tmp/RtmpTMmi8X/.future/immediateConditions")
[18:01:12.051]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:12.051]                   {
[18:01:12.051]                     inherits <- base::inherits
[18:01:12.051]                     invokeRestart <- base::invokeRestart
[18:01:12.051]                     is.null <- base::is.null
[18:01:12.051]                     muffled <- FALSE
[18:01:12.051]                     if (inherits(cond, "message")) {
[18:01:12.051]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:12.051]                       if (muffled) 
[18:01:12.051]                         invokeRestart("muffleMessage")
[18:01:12.051]                     }
[18:01:12.051]                     else if (inherits(cond, "warning")) {
[18:01:12.051]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:12.051]                       if (muffled) 
[18:01:12.051]                         invokeRestart("muffleWarning")
[18:01:12.051]                     }
[18:01:12.051]                     else if (inherits(cond, "condition")) {
[18:01:12.051]                       if (!is.null(pattern)) {
[18:01:12.051]                         computeRestarts <- base::computeRestarts
[18:01:12.051]                         grepl <- base::grepl
[18:01:12.051]                         restarts <- computeRestarts(cond)
[18:01:12.051]                         for (restart in restarts) {
[18:01:12.051]                           name <- restart$name
[18:01:12.051]                           if (is.null(name)) 
[18:01:12.051]                             next
[18:01:12.051]                           if (!grepl(pattern, name)) 
[18:01:12.051]                             next
[18:01:12.051]                           invokeRestart(restart)
[18:01:12.051]                           muffled <- TRUE
[18:01:12.051]                           break
[18:01:12.051]                         }
[18:01:12.051]                       }
[18:01:12.051]                     }
[18:01:12.051]                     invisible(muffled)
[18:01:12.051]                   }
[18:01:12.051]                   muffleCondition(cond)
[18:01:12.051]                 })
[18:01:12.051]             }))
[18:01:12.051]             future::FutureResult(value = ...future.value$value, 
[18:01:12.051]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:12.051]                   ...future.rng), globalenv = if (FALSE) 
[18:01:12.051]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:12.051]                     ...future.globalenv.names))
[18:01:12.051]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:12.051]         }, condition = base::local({
[18:01:12.051]             c <- base::c
[18:01:12.051]             inherits <- base::inherits
[18:01:12.051]             invokeRestart <- base::invokeRestart
[18:01:12.051]             length <- base::length
[18:01:12.051]             list <- base::list
[18:01:12.051]             seq.int <- base::seq.int
[18:01:12.051]             signalCondition <- base::signalCondition
[18:01:12.051]             sys.calls <- base::sys.calls
[18:01:12.051]             `[[` <- base::`[[`
[18:01:12.051]             `+` <- base::`+`
[18:01:12.051]             `<<-` <- base::`<<-`
[18:01:12.051]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:12.051]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:12.051]                   3L)]
[18:01:12.051]             }
[18:01:12.051]             function(cond) {
[18:01:12.051]                 is_error <- inherits(cond, "error")
[18:01:12.051]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:12.051]                   NULL)
[18:01:12.051]                 if (is_error) {
[18:01:12.051]                   sessionInformation <- function() {
[18:01:12.051]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:12.051]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:12.051]                       search = base::search(), system = base::Sys.info())
[18:01:12.051]                   }
[18:01:12.051]                   ...future.conditions[[length(...future.conditions) + 
[18:01:12.051]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:12.051]                     cond$call), session = sessionInformation(), 
[18:01:12.051]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:12.051]                   signalCondition(cond)
[18:01:12.051]                 }
[18:01:12.051]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:12.051]                 "immediateCondition"))) {
[18:01:12.051]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:12.051]                   ...future.conditions[[length(...future.conditions) + 
[18:01:12.051]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:12.051]                   if (TRUE && !signal) {
[18:01:12.051]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:12.051]                     {
[18:01:12.051]                       inherits <- base::inherits
[18:01:12.051]                       invokeRestart <- base::invokeRestart
[18:01:12.051]                       is.null <- base::is.null
[18:01:12.051]                       muffled <- FALSE
[18:01:12.051]                       if (inherits(cond, "message")) {
[18:01:12.051]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:12.051]                         if (muffled) 
[18:01:12.051]                           invokeRestart("muffleMessage")
[18:01:12.051]                       }
[18:01:12.051]                       else if (inherits(cond, "warning")) {
[18:01:12.051]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:12.051]                         if (muffled) 
[18:01:12.051]                           invokeRestart("muffleWarning")
[18:01:12.051]                       }
[18:01:12.051]                       else if (inherits(cond, "condition")) {
[18:01:12.051]                         if (!is.null(pattern)) {
[18:01:12.051]                           computeRestarts <- base::computeRestarts
[18:01:12.051]                           grepl <- base::grepl
[18:01:12.051]                           restarts <- computeRestarts(cond)
[18:01:12.051]                           for (restart in restarts) {
[18:01:12.051]                             name <- restart$name
[18:01:12.051]                             if (is.null(name)) 
[18:01:12.051]                               next
[18:01:12.051]                             if (!grepl(pattern, name)) 
[18:01:12.051]                               next
[18:01:12.051]                             invokeRestart(restart)
[18:01:12.051]                             muffled <- TRUE
[18:01:12.051]                             break
[18:01:12.051]                           }
[18:01:12.051]                         }
[18:01:12.051]                       }
[18:01:12.051]                       invisible(muffled)
[18:01:12.051]                     }
[18:01:12.051]                     muffleCondition(cond, pattern = "^muffle")
[18:01:12.051]                   }
[18:01:12.051]                 }
[18:01:12.051]                 else {
[18:01:12.051]                   if (TRUE) {
[18:01:12.051]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:12.051]                     {
[18:01:12.051]                       inherits <- base::inherits
[18:01:12.051]                       invokeRestart <- base::invokeRestart
[18:01:12.051]                       is.null <- base::is.null
[18:01:12.051]                       muffled <- FALSE
[18:01:12.051]                       if (inherits(cond, "message")) {
[18:01:12.051]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:12.051]                         if (muffled) 
[18:01:12.051]                           invokeRestart("muffleMessage")
[18:01:12.051]                       }
[18:01:12.051]                       else if (inherits(cond, "warning")) {
[18:01:12.051]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:12.051]                         if (muffled) 
[18:01:12.051]                           invokeRestart("muffleWarning")
[18:01:12.051]                       }
[18:01:12.051]                       else if (inherits(cond, "condition")) {
[18:01:12.051]                         if (!is.null(pattern)) {
[18:01:12.051]                           computeRestarts <- base::computeRestarts
[18:01:12.051]                           grepl <- base::grepl
[18:01:12.051]                           restarts <- computeRestarts(cond)
[18:01:12.051]                           for (restart in restarts) {
[18:01:12.051]                             name <- restart$name
[18:01:12.051]                             if (is.null(name)) 
[18:01:12.051]                               next
[18:01:12.051]                             if (!grepl(pattern, name)) 
[18:01:12.051]                               next
[18:01:12.051]                             invokeRestart(restart)
[18:01:12.051]                             muffled <- TRUE
[18:01:12.051]                             break
[18:01:12.051]                           }
[18:01:12.051]                         }
[18:01:12.051]                       }
[18:01:12.051]                       invisible(muffled)
[18:01:12.051]                     }
[18:01:12.051]                     muffleCondition(cond, pattern = "^muffle")
[18:01:12.051]                   }
[18:01:12.051]                 }
[18:01:12.051]             }
[18:01:12.051]         }))
[18:01:12.051]     }, error = function(ex) {
[18:01:12.051]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:12.051]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:12.051]                 ...future.rng), started = ...future.startTime, 
[18:01:12.051]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:12.051]             version = "1.8"), class = "FutureResult")
[18:01:12.051]     }, finally = {
[18:01:12.051]         if (!identical(...future.workdir, getwd())) 
[18:01:12.051]             setwd(...future.workdir)
[18:01:12.051]         {
[18:01:12.051]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:12.051]                 ...future.oldOptions$nwarnings <- NULL
[18:01:12.051]             }
[18:01:12.051]             base::options(...future.oldOptions)
[18:01:12.051]             if (.Platform$OS.type == "windows") {
[18:01:12.051]                 old_names <- names(...future.oldEnvVars)
[18:01:12.051]                 envs <- base::Sys.getenv()
[18:01:12.051]                 names <- names(envs)
[18:01:12.051]                 common <- intersect(names, old_names)
[18:01:12.051]                 added <- setdiff(names, old_names)
[18:01:12.051]                 removed <- setdiff(old_names, names)
[18:01:12.051]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:12.051]                   envs[common]]
[18:01:12.051]                 NAMES <- toupper(changed)
[18:01:12.051]                 args <- list()
[18:01:12.051]                 for (kk in seq_along(NAMES)) {
[18:01:12.051]                   name <- changed[[kk]]
[18:01:12.051]                   NAME <- NAMES[[kk]]
[18:01:12.051]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:12.051]                     next
[18:01:12.051]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:12.051]                 }
[18:01:12.051]                 NAMES <- toupper(added)
[18:01:12.051]                 for (kk in seq_along(NAMES)) {
[18:01:12.051]                   name <- added[[kk]]
[18:01:12.051]                   NAME <- NAMES[[kk]]
[18:01:12.051]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:12.051]                     next
[18:01:12.051]                   args[[name]] <- ""
[18:01:12.051]                 }
[18:01:12.051]                 NAMES <- toupper(removed)
[18:01:12.051]                 for (kk in seq_along(NAMES)) {
[18:01:12.051]                   name <- removed[[kk]]
[18:01:12.051]                   NAME <- NAMES[[kk]]
[18:01:12.051]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:12.051]                     next
[18:01:12.051]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:12.051]                 }
[18:01:12.051]                 if (length(args) > 0) 
[18:01:12.051]                   base::do.call(base::Sys.setenv, args = args)
[18:01:12.051]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:12.051]             }
[18:01:12.051]             else {
[18:01:12.051]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:12.051]             }
[18:01:12.051]             {
[18:01:12.051]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:12.051]                   0L) {
[18:01:12.051]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:12.051]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:12.051]                   base::options(opts)
[18:01:12.051]                 }
[18:01:12.051]                 {
[18:01:12.051]                   {
[18:01:12.051]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:12.051]                     NULL
[18:01:12.051]                   }
[18:01:12.051]                   options(future.plan = NULL)
[18:01:12.051]                   if (is.na(NA_character_)) 
[18:01:12.051]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:12.051]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:12.051]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:12.051]                     .init = FALSE)
[18:01:12.051]                 }
[18:01:12.051]             }
[18:01:12.051]         }
[18:01:12.051]     })
[18:01:12.051]     if (TRUE) {
[18:01:12.051]         base::sink(type = "output", split = FALSE)
[18:01:12.051]         if (TRUE) {
[18:01:12.051]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:12.051]         }
[18:01:12.051]         else {
[18:01:12.051]             ...future.result["stdout"] <- base::list(NULL)
[18:01:12.051]         }
[18:01:12.051]         base::close(...future.stdout)
[18:01:12.051]         ...future.stdout <- NULL
[18:01:12.051]     }
[18:01:12.051]     ...future.result$conditions <- ...future.conditions
[18:01:12.051]     ...future.result$finished <- base::Sys.time()
[18:01:12.051]     ...future.result
[18:01:12.051] }
[18:01:12.055] assign_globals() ...
[18:01:12.055] List of 5
[18:01:12.055]  $ ...future.FUN            :function (...)  
[18:01:12.055]  $ future.call.arguments    : list()
[18:01:12.055]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:12.055]  $ ...future.elements_ii    :List of 2
[18:01:12.055]   ..$ : int 0
[18:01:12.055]   ..$ : int 0
[18:01:12.055]  $ ...future.seeds_ii       :List of 2
[18:01:12.055]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[18:01:12.055]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[18:01:12.055]  $ ...future.globals.maxSize: NULL
[18:01:12.055]  - attr(*, "where")=List of 5
[18:01:12.055]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[18:01:12.055]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[18:01:12.055]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[18:01:12.055]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[18:01:12.055]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[18:01:12.055]  - attr(*, "resolved")= logi FALSE
[18:01:12.055]  - attr(*, "total_size")= num 616
[18:01:12.055]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:12.055]  - attr(*, "already-done")= logi TRUE
[18:01:12.067] - reassign environment for ‘...future.FUN’
[18:01:12.067] - copied ‘...future.FUN’ to environment
[18:01:12.067] - copied ‘future.call.arguments’ to environment
[18:01:12.067] - copied ‘...future.elements_ii’ to environment
[18:01:12.068] - copied ‘...future.seeds_ii’ to environment
[18:01:12.068] - copied ‘...future.globals.maxSize’ to environment
[18:01:12.068] assign_globals() ... done
[18:01:12.068] requestCore(): workers = 2
[18:01:12.072] MulticoreFuture started
[18:01:12.073] - Launch lazy future ... done
[18:01:12.073] run() for ‘MulticoreFuture’ ... done
[18:01:12.074] Created future:
[18:01:12.074] plan(): Setting new future strategy stack:
[18:01:12.075] List of future strategies:
[18:01:12.075] 1. sequential:
[18:01:12.075]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:12.075]    - tweaked: FALSE
[18:01:12.075]    - call: NULL
[18:01:12.076] plan(): nbrOfWorkers() = 1
[18:01:12.081] plan(): Setting new future strategy stack:
[18:01:12.082] List of future strategies:
[18:01:12.082] 1. multicore:
[18:01:12.082]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:01:12.082]    - tweaked: FALSE
[18:01:12.082]    - call: plan(strategy)
[18:01:12.074] MulticoreFuture:
[18:01:12.074] Label: ‘future_replicate-1’
[18:01:12.074] Expression:
[18:01:12.074] {
[18:01:12.074]     do.call(function(...) {
[18:01:12.074]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:12.074]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:12.074]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:12.074]             on.exit(options(oopts), add = TRUE)
[18:01:12.074]         }
[18:01:12.074]         {
[18:01:12.074]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:12.074]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:12.074]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:12.074]                   envir = globalenv(), inherits = FALSE)
[18:01:12.074]                 ...future.FUN(...future.X_jj, ...)
[18:01:12.074]             })
[18:01:12.074]         }
[18:01:12.074]     }, args = future.call.arguments)
[18:01:12.074] }
[18:01:12.074] Lazy evaluation: FALSE
[18:01:12.074] Asynchronous evaluation: TRUE
[18:01:12.074] Local evaluation: TRUE
[18:01:12.074] Environment: R_GlobalEnv
[18:01:12.074] Capture standard output: TRUE
[18:01:12.074] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:12.074] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:12.074] Packages: <none>
[18:01:12.074] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:12.074] Resolved: FALSE
[18:01:12.074] Value: <not collected>
[18:01:12.074] Conditions captured: <none>
[18:01:12.074] Early signaling: FALSE
[18:01:12.074] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:12.074] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:12.090] Chunk #1 of 2 ... DONE
[18:01:12.090] Chunk #2 of 2 ...
[18:01:12.091]  - Finding globals in 'X' for chunk #2 ...
[18:01:12.091] getGlobalsAndPackages() ...
[18:01:12.091] plan(): nbrOfWorkers() = 2
[18:01:12.091] Searching for globals...
[18:01:12.092] 
[18:01:12.093] Searching for globals ... DONE
[18:01:12.093] - globals: [0] <none>
[18:01:12.093] getGlobalsAndPackages() ... DONE
[18:01:12.094]    + additional globals found: [n=0] 
[18:01:12.094]    + additional namespaces needed: [n=0] 
[18:01:12.094]  - Finding globals in 'X' for chunk #2 ... DONE
[18:01:12.094]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:12.095]  - seeds: [3] <seeds>
[18:01:12.095]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:12.095] getGlobalsAndPackages() ...
[18:01:12.096] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:12.096] Resolving globals: FALSE
[18:01:12.096] Tweak future expression to call with '...' arguments ...
[18:01:12.097] {
[18:01:12.097]     do.call(function(...) {
[18:01:12.097]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:12.097]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:12.097]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:12.097]             on.exit(options(oopts), add = TRUE)
[18:01:12.097]         }
[18:01:12.097]         {
[18:01:12.097]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:12.097]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:12.097]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:12.097]                   envir = globalenv(), inherits = FALSE)
[18:01:12.097]                 ...future.FUN(...future.X_jj, ...)
[18:01:12.097]             })
[18:01:12.097]         }
[18:01:12.097]     }, args = future.call.arguments)
[18:01:12.097] }
[18:01:12.098] Tweak future expression to call with '...' arguments ... DONE
[18:01:12.099] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:12.099] 
[18:01:12.100] getGlobalsAndPackages() ... DONE
[18:01:12.106] run() for ‘Future’ ...
[18:01:12.107] - state: ‘created’
[18:01:12.107] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:01:12.118] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:12.119] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:01:12.119]   - Field: ‘label’
[18:01:12.120]   - Field: ‘local’
[18:01:12.120]   - Field: ‘owner’
[18:01:12.120]   - Field: ‘envir’
[18:01:12.121]   - Field: ‘workers’
[18:01:12.121]   - Field: ‘packages’
[18:01:12.121]   - Field: ‘gc’
[18:01:12.122]   - Field: ‘job’
[18:01:12.122]   - Field: ‘conditions’
[18:01:12.122]   - Field: ‘expr’
[18:01:12.122]   - Field: ‘uuid’
[18:01:12.123]   - Field: ‘seed’
[18:01:12.123]   - Field: ‘version’
[18:01:12.124]   - Field: ‘result’
[18:01:12.124]   - Field: ‘asynchronous’
[18:01:12.124]   - Field: ‘calls’
[18:01:12.125]   - Field: ‘globals’
[18:01:12.125]   - Field: ‘stdout’
[18:01:12.125]   - Field: ‘earlySignal’
[18:01:12.126]   - Field: ‘lazy’
[18:01:12.126]   - Field: ‘state’
[18:01:12.126] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:01:12.127] - Launch lazy future ...
[18:01:12.127] Packages needed by the future expression (n = 0): <none>
[18:01:12.128] Packages needed by future strategies (n = 0): <none>
[18:01:12.129] {
[18:01:12.129]     {
[18:01:12.129]         {
[18:01:12.129]             ...future.startTime <- base::Sys.time()
[18:01:12.129]             {
[18:01:12.129]                 {
[18:01:12.129]                   {
[18:01:12.129]                     {
[18:01:12.129]                       base::local({
[18:01:12.129]                         has_future <- base::requireNamespace("future", 
[18:01:12.129]                           quietly = TRUE)
[18:01:12.129]                         if (has_future) {
[18:01:12.129]                           ns <- base::getNamespace("future")
[18:01:12.129]                           version <- ns[[".package"]][["version"]]
[18:01:12.129]                           if (is.null(version)) 
[18:01:12.129]                             version <- utils::packageVersion("future")
[18:01:12.129]                         }
[18:01:12.129]                         else {
[18:01:12.129]                           version <- NULL
[18:01:12.129]                         }
[18:01:12.129]                         if (!has_future || version < "1.8.0") {
[18:01:12.129]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:12.129]                             "", base::R.version$version.string), 
[18:01:12.129]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:12.129]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:12.129]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:12.129]                               "release", "version")], collapse = " "), 
[18:01:12.129]                             hostname = base::Sys.info()[["nodename"]])
[18:01:12.129]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:12.129]                             info)
[18:01:12.129]                           info <- base::paste(info, collapse = "; ")
[18:01:12.129]                           if (!has_future) {
[18:01:12.129]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:12.129]                               info)
[18:01:12.129]                           }
[18:01:12.129]                           else {
[18:01:12.129]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:12.129]                               info, version)
[18:01:12.129]                           }
[18:01:12.129]                           base::stop(msg)
[18:01:12.129]                         }
[18:01:12.129]                       })
[18:01:12.129]                     }
[18:01:12.129]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:12.129]                     base::options(mc.cores = 1L)
[18:01:12.129]                   }
[18:01:12.129]                   ...future.strategy.old <- future::plan("list")
[18:01:12.129]                   options(future.plan = NULL)
[18:01:12.129]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:12.129]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:12.129]                 }
[18:01:12.129]                 ...future.workdir <- getwd()
[18:01:12.129]             }
[18:01:12.129]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:12.129]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:12.129]         }
[18:01:12.129]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:12.129]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:12.129]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:12.129]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:12.129]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:12.129]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:12.129]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:12.129]             base::names(...future.oldOptions))
[18:01:12.129]     }
[18:01:12.129]     if (FALSE) {
[18:01:12.129]     }
[18:01:12.129]     else {
[18:01:12.129]         if (TRUE) {
[18:01:12.129]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:12.129]                 open = "w")
[18:01:12.129]         }
[18:01:12.129]         else {
[18:01:12.129]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:12.129]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:12.129]         }
[18:01:12.129]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:12.129]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:12.129]             base::sink(type = "output", split = FALSE)
[18:01:12.129]             base::close(...future.stdout)
[18:01:12.129]         }, add = TRUE)
[18:01:12.129]     }
[18:01:12.129]     ...future.frame <- base::sys.nframe()
[18:01:12.129]     ...future.conditions <- base::list()
[18:01:12.129]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:12.129]     if (FALSE) {
[18:01:12.129]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:12.129]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:12.129]     }
[18:01:12.129]     ...future.result <- base::tryCatch({
[18:01:12.129]         base::withCallingHandlers({
[18:01:12.129]             ...future.value <- base::withVisible(base::local({
[18:01:12.129]                 withCallingHandlers({
[18:01:12.129]                   {
[18:01:12.129]                     do.call(function(...) {
[18:01:12.129]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:12.129]                       if (!identical(...future.globals.maxSize.org, 
[18:01:12.129]                         ...future.globals.maxSize)) {
[18:01:12.129]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:12.129]                         on.exit(options(oopts), add = TRUE)
[18:01:12.129]                       }
[18:01:12.129]                       {
[18:01:12.129]                         lapply(seq_along(...future.elements_ii), 
[18:01:12.129]                           FUN = function(jj) {
[18:01:12.129]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:12.129]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:12.129]                               envir = globalenv(), inherits = FALSE)
[18:01:12.129]                             ...future.FUN(...future.X_jj, ...)
[18:01:12.129]                           })
[18:01:12.129]                       }
[18:01:12.129]                     }, args = future.call.arguments)
[18:01:12.129]                   }
[18:01:12.129]                 }, immediateCondition = function(cond) {
[18:01:12.129]                   save_rds <- function (object, pathname, ...) 
[18:01:12.129]                   {
[18:01:12.129]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:01:12.129]                     if (file_test("-f", pathname_tmp)) {
[18:01:12.129]                       fi_tmp <- file.info(pathname_tmp)
[18:01:12.129]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:01:12.129]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:12.129]                         fi_tmp[["mtime"]])
[18:01:12.129]                     }
[18:01:12.129]                     tryCatch({
[18:01:12.129]                       saveRDS(object, file = pathname_tmp, ...)
[18:01:12.129]                     }, error = function(ex) {
[18:01:12.129]                       msg <- conditionMessage(ex)
[18:01:12.129]                       fi_tmp <- file.info(pathname_tmp)
[18:01:12.129]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:01:12.129]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:12.129]                         fi_tmp[["mtime"]], msg)
[18:01:12.129]                       ex$message <- msg
[18:01:12.129]                       stop(ex)
[18:01:12.129]                     })
[18:01:12.129]                     stopifnot(file_test("-f", pathname_tmp))
[18:01:12.129]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:01:12.129]                     if (!res || file_test("-f", pathname_tmp)) {
[18:01:12.129]                       fi_tmp <- file.info(pathname_tmp)
[18:01:12.129]                       fi <- file.info(pathname)
[18:01:12.129]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:01:12.129]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:12.129]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:01:12.129]                         fi[["size"]], fi[["mtime"]])
[18:01:12.129]                       stop(msg)
[18:01:12.129]                     }
[18:01:12.129]                     invisible(pathname)
[18:01:12.129]                   }
[18:01:12.129]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:01:12.129]                     rootPath = tempdir()) 
[18:01:12.129]                   {
[18:01:12.129]                     obj <- list(time = Sys.time(), condition = cond)
[18:01:12.129]                     file <- tempfile(pattern = class(cond)[1], 
[18:01:12.129]                       tmpdir = path, fileext = ".rds")
[18:01:12.129]                     save_rds(obj, file)
[18:01:12.129]                   }
[18:01:12.129]                   saveImmediateCondition(cond, path = "/tmp/RtmpTMmi8X/.future/immediateConditions")
[18:01:12.129]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:12.129]                   {
[18:01:12.129]                     inherits <- base::inherits
[18:01:12.129]                     invokeRestart <- base::invokeRestart
[18:01:12.129]                     is.null <- base::is.null
[18:01:12.129]                     muffled <- FALSE
[18:01:12.129]                     if (inherits(cond, "message")) {
[18:01:12.129]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:12.129]                       if (muffled) 
[18:01:12.129]                         invokeRestart("muffleMessage")
[18:01:12.129]                     }
[18:01:12.129]                     else if (inherits(cond, "warning")) {
[18:01:12.129]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:12.129]                       if (muffled) 
[18:01:12.129]                         invokeRestart("muffleWarning")
[18:01:12.129]                     }
[18:01:12.129]                     else if (inherits(cond, "condition")) {
[18:01:12.129]                       if (!is.null(pattern)) {
[18:01:12.129]                         computeRestarts <- base::computeRestarts
[18:01:12.129]                         grepl <- base::grepl
[18:01:12.129]                         restarts <- computeRestarts(cond)
[18:01:12.129]                         for (restart in restarts) {
[18:01:12.129]                           name <- restart$name
[18:01:12.129]                           if (is.null(name)) 
[18:01:12.129]                             next
[18:01:12.129]                           if (!grepl(pattern, name)) 
[18:01:12.129]                             next
[18:01:12.129]                           invokeRestart(restart)
[18:01:12.129]                           muffled <- TRUE
[18:01:12.129]                           break
[18:01:12.129]                         }
[18:01:12.129]                       }
[18:01:12.129]                     }
[18:01:12.129]                     invisible(muffled)
[18:01:12.129]                   }
[18:01:12.129]                   muffleCondition(cond)
[18:01:12.129]                 })
[18:01:12.129]             }))
[18:01:12.129]             future::FutureResult(value = ...future.value$value, 
[18:01:12.129]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:12.129]                   ...future.rng), globalenv = if (FALSE) 
[18:01:12.129]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:12.129]                     ...future.globalenv.names))
[18:01:12.129]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:12.129]         }, condition = base::local({
[18:01:12.129]             c <- base::c
[18:01:12.129]             inherits <- base::inherits
[18:01:12.129]             invokeRestart <- base::invokeRestart
[18:01:12.129]             length <- base::length
[18:01:12.129]             list <- base::list
[18:01:12.129]             seq.int <- base::seq.int
[18:01:12.129]             signalCondition <- base::signalCondition
[18:01:12.129]             sys.calls <- base::sys.calls
[18:01:12.129]             `[[` <- base::`[[`
[18:01:12.129]             `+` <- base::`+`
[18:01:12.129]             `<<-` <- base::`<<-`
[18:01:12.129]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:12.129]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:12.129]                   3L)]
[18:01:12.129]             }
[18:01:12.129]             function(cond) {
[18:01:12.129]                 is_error <- inherits(cond, "error")
[18:01:12.129]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:12.129]                   NULL)
[18:01:12.129]                 if (is_error) {
[18:01:12.129]                   sessionInformation <- function() {
[18:01:12.129]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:12.129]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:12.129]                       search = base::search(), system = base::Sys.info())
[18:01:12.129]                   }
[18:01:12.129]                   ...future.conditions[[length(...future.conditions) + 
[18:01:12.129]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:12.129]                     cond$call), session = sessionInformation(), 
[18:01:12.129]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:12.129]                   signalCondition(cond)
[18:01:12.129]                 }
[18:01:12.129]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:12.129]                 "immediateCondition"))) {
[18:01:12.129]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:12.129]                   ...future.conditions[[length(...future.conditions) + 
[18:01:12.129]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:12.129]                   if (TRUE && !signal) {
[18:01:12.129]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:12.129]                     {
[18:01:12.129]                       inherits <- base::inherits
[18:01:12.129]                       invokeRestart <- base::invokeRestart
[18:01:12.129]                       is.null <- base::is.null
[18:01:12.129]                       muffled <- FALSE
[18:01:12.129]                       if (inherits(cond, "message")) {
[18:01:12.129]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:12.129]                         if (muffled) 
[18:01:12.129]                           invokeRestart("muffleMessage")
[18:01:12.129]                       }
[18:01:12.129]                       else if (inherits(cond, "warning")) {
[18:01:12.129]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:12.129]                         if (muffled) 
[18:01:12.129]                           invokeRestart("muffleWarning")
[18:01:12.129]                       }
[18:01:12.129]                       else if (inherits(cond, "condition")) {
[18:01:12.129]                         if (!is.null(pattern)) {
[18:01:12.129]                           computeRestarts <- base::computeRestarts
[18:01:12.129]                           grepl <- base::grepl
[18:01:12.129]                           restarts <- computeRestarts(cond)
[18:01:12.129]                           for (restart in restarts) {
[18:01:12.129]                             name <- restart$name
[18:01:12.129]                             if (is.null(name)) 
[18:01:12.129]                               next
[18:01:12.129]                             if (!grepl(pattern, name)) 
[18:01:12.129]                               next
[18:01:12.129]                             invokeRestart(restart)
[18:01:12.129]                             muffled <- TRUE
[18:01:12.129]                             break
[18:01:12.129]                           }
[18:01:12.129]                         }
[18:01:12.129]                       }
[18:01:12.129]                       invisible(muffled)
[18:01:12.129]                     }
[18:01:12.129]                     muffleCondition(cond, pattern = "^muffle")
[18:01:12.129]                   }
[18:01:12.129]                 }
[18:01:12.129]                 else {
[18:01:12.129]                   if (TRUE) {
[18:01:12.129]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:12.129]                     {
[18:01:12.129]                       inherits <- base::inherits
[18:01:12.129]                       invokeRestart <- base::invokeRestart
[18:01:12.129]                       is.null <- base::is.null
[18:01:12.129]                       muffled <- FALSE
[18:01:12.129]                       if (inherits(cond, "message")) {
[18:01:12.129]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:12.129]                         if (muffled) 
[18:01:12.129]                           invokeRestart("muffleMessage")
[18:01:12.129]                       }
[18:01:12.129]                       else if (inherits(cond, "warning")) {
[18:01:12.129]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:12.129]                         if (muffled) 
[18:01:12.129]                           invokeRestart("muffleWarning")
[18:01:12.129]                       }
[18:01:12.129]                       else if (inherits(cond, "condition")) {
[18:01:12.129]                         if (!is.null(pattern)) {
[18:01:12.129]                           computeRestarts <- base::computeRestarts
[18:01:12.129]                           grepl <- base::grepl
[18:01:12.129]                           restarts <- computeRestarts(cond)
[18:01:12.129]                           for (restart in restarts) {
[18:01:12.129]                             name <- restart$name
[18:01:12.129]                             if (is.null(name)) 
[18:01:12.129]                               next
[18:01:12.129]                             if (!grepl(pattern, name)) 
[18:01:12.129]                               next
[18:01:12.129]                             invokeRestart(restart)
[18:01:12.129]                             muffled <- TRUE
[18:01:12.129]                             break
[18:01:12.129]                           }
[18:01:12.129]                         }
[18:01:12.129]                       }
[18:01:12.129]                       invisible(muffled)
[18:01:12.129]                     }
[18:01:12.129]                     muffleCondition(cond, pattern = "^muffle")
[18:01:12.129]                   }
[18:01:12.129]                 }
[18:01:12.129]             }
[18:01:12.129]         }))
[18:01:12.129]     }, error = function(ex) {
[18:01:12.129]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:12.129]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:12.129]                 ...future.rng), started = ...future.startTime, 
[18:01:12.129]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:12.129]             version = "1.8"), class = "FutureResult")
[18:01:12.129]     }, finally = {
[18:01:12.129]         if (!identical(...future.workdir, getwd())) 
[18:01:12.129]             setwd(...future.workdir)
[18:01:12.129]         {
[18:01:12.129]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:12.129]                 ...future.oldOptions$nwarnings <- NULL
[18:01:12.129]             }
[18:01:12.129]             base::options(...future.oldOptions)
[18:01:12.129]             if (.Platform$OS.type == "windows") {
[18:01:12.129]                 old_names <- names(...future.oldEnvVars)
[18:01:12.129]                 envs <- base::Sys.getenv()
[18:01:12.129]                 names <- names(envs)
[18:01:12.129]                 common <- intersect(names, old_names)
[18:01:12.129]                 added <- setdiff(names, old_names)
[18:01:12.129]                 removed <- setdiff(old_names, names)
[18:01:12.129]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:12.129]                   envs[common]]
[18:01:12.129]                 NAMES <- toupper(changed)
[18:01:12.129]                 args <- list()
[18:01:12.129]                 for (kk in seq_along(NAMES)) {
[18:01:12.129]                   name <- changed[[kk]]
[18:01:12.129]                   NAME <- NAMES[[kk]]
[18:01:12.129]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:12.129]                     next
[18:01:12.129]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:12.129]                 }
[18:01:12.129]                 NAMES <- toupper(added)
[18:01:12.129]                 for (kk in seq_along(NAMES)) {
[18:01:12.129]                   name <- added[[kk]]
[18:01:12.129]                   NAME <- NAMES[[kk]]
[18:01:12.129]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:12.129]                     next
[18:01:12.129]                   args[[name]] <- ""
[18:01:12.129]                 }
[18:01:12.129]                 NAMES <- toupper(removed)
[18:01:12.129]                 for (kk in seq_along(NAMES)) {
[18:01:12.129]                   name <- removed[[kk]]
[18:01:12.129]                   NAME <- NAMES[[kk]]
[18:01:12.129]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:12.129]                     next
[18:01:12.129]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:12.129]                 }
[18:01:12.129]                 if (length(args) > 0) 
[18:01:12.129]                   base::do.call(base::Sys.setenv, args = args)
[18:01:12.129]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:12.129]             }
[18:01:12.129]             else {
[18:01:12.129]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:12.129]             }
[18:01:12.129]             {
[18:01:12.129]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:12.129]                   0L) {
[18:01:12.129]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:12.129]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:12.129]                   base::options(opts)
[18:01:12.129]                 }
[18:01:12.129]                 {
[18:01:12.129]                   {
[18:01:12.129]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:12.129]                     NULL
[18:01:12.129]                   }
[18:01:12.129]                   options(future.plan = NULL)
[18:01:12.129]                   if (is.na(NA_character_)) 
[18:01:12.129]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:12.129]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:12.129]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:12.129]                     .init = FALSE)
[18:01:12.129]                 }
[18:01:12.129]             }
[18:01:12.129]         }
[18:01:12.129]     })
[18:01:12.129]     if (TRUE) {
[18:01:12.129]         base::sink(type = "output", split = FALSE)
[18:01:12.129]         if (TRUE) {
[18:01:12.129]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:12.129]         }
[18:01:12.129]         else {
[18:01:12.129]             ...future.result["stdout"] <- base::list(NULL)
[18:01:12.129]         }
[18:01:12.129]         base::close(...future.stdout)
[18:01:12.129]         ...future.stdout <- NULL
[18:01:12.129]     }
[18:01:12.129]     ...future.result$conditions <- ...future.conditions
[18:01:12.129]     ...future.result$finished <- base::Sys.time()
[18:01:12.129]     ...future.result
[18:01:12.129] }
[18:01:12.134] assign_globals() ...
[18:01:12.135] List of 5
[18:01:12.135]  $ ...future.FUN            :function (...)  
[18:01:12.135]  $ future.call.arguments    : list()
[18:01:12.135]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:12.135]  $ ...future.elements_ii    :List of 3
[18:01:12.135]   ..$ : int 0
[18:01:12.135]   ..$ : int 0
[18:01:12.135]   ..$ : int 0
[18:01:12.135]  $ ...future.seeds_ii       :List of 3
[18:01:12.135]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[18:01:12.135]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[18:01:12.135]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[18:01:12.135]  $ ...future.globals.maxSize: NULL
[18:01:12.135]  - attr(*, "where")=List of 5
[18:01:12.135]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[18:01:12.135]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[18:01:12.135]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[18:01:12.135]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[18:01:12.135]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[18:01:12.135]  - attr(*, "resolved")= logi FALSE
[18:01:12.135]  - attr(*, "total_size")= num 616
[18:01:12.135]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:12.135]  - attr(*, "already-done")= logi TRUE
[18:01:12.152] - reassign environment for ‘...future.FUN’
[18:01:12.153] - copied ‘...future.FUN’ to environment
[18:01:12.153] - copied ‘future.call.arguments’ to environment
[18:01:12.153] - copied ‘...future.elements_ii’ to environment
[18:01:12.153] - copied ‘...future.seeds_ii’ to environment
[18:01:12.154] - copied ‘...future.globals.maxSize’ to environment
[18:01:12.154] assign_globals() ... done
[18:01:12.154] requestCore(): workers = 2
[18:01:12.158] MulticoreFuture started
[18:01:12.159] - Launch lazy future ... done
[18:01:12.159] run() for ‘MulticoreFuture’ ... done
[18:01:12.160] Created future:
[18:01:12.160] plan(): Setting new future strategy stack:
[18:01:12.161] List of future strategies:
[18:01:12.161] 1. sequential:
[18:01:12.161]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:12.161]    - tweaked: FALSE
[18:01:12.161]    - call: NULL
[18:01:12.163] plan(): nbrOfWorkers() = 1
[18:01:12.168] plan(): Setting new future strategy stack:
[18:01:12.168] List of future strategies:
[18:01:12.168] 1. multicore:
[18:01:12.168]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:01:12.168]    - tweaked: FALSE
[18:01:12.168]    - call: plan(strategy)
[18:01:12.161] MulticoreFuture:
[18:01:12.161] Label: ‘future_replicate-2’
[18:01:12.161] Expression:
[18:01:12.161] {
[18:01:12.161]     do.call(function(...) {
[18:01:12.161]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:12.161]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:12.161]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:12.161]             on.exit(options(oopts), add = TRUE)
[18:01:12.161]         }
[18:01:12.161]         {
[18:01:12.161]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:12.161]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:12.161]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:12.161]                   envir = globalenv(), inherits = FALSE)
[18:01:12.161]                 ...future.FUN(...future.X_jj, ...)
[18:01:12.161]             })
[18:01:12.161]         }
[18:01:12.161]     }, args = future.call.arguments)
[18:01:12.161] }
[18:01:12.161] Lazy evaluation: FALSE
[18:01:12.161] Asynchronous evaluation: TRUE
[18:01:12.161] Local evaluation: TRUE
[18:01:12.161] Environment: R_GlobalEnv
[18:01:12.161] Capture standard output: TRUE
[18:01:12.161] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:12.161] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:12.161] Packages: <none>
[18:01:12.161] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:12.161] Resolved: FALSE
[18:01:12.161] Value: <not collected>
[18:01:12.161] Conditions captured: <none>
[18:01:12.161] Early signaling: FALSE
[18:01:12.161] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:12.161] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:12.177] Chunk #2 of 2 ... DONE
[18:01:12.177] Launching 2 futures (chunks) ... DONE
[18:01:12.178] plan(): nbrOfWorkers() = 2
[18:01:12.178] Resolving 2 futures (chunks) ...
[18:01:12.179] resolve() on list ...
[18:01:12.180]  recursive: 0
[18:01:12.180]  length: 2
[18:01:12.181] 
[18:01:12.182] Future #1
[18:01:12.182] result() for MulticoreFuture ...
[18:01:12.186] result() for MulticoreFuture ...
[18:01:12.187] result() for MulticoreFuture ... done
[18:01:12.187] result() for MulticoreFuture ... done
[18:01:12.187] result() for MulticoreFuture ...
[18:01:12.188] result() for MulticoreFuture ... done
[18:01:12.188] signalConditionsASAP(MulticoreFuture, pos=1) ...
[18:01:12.188] - nx: 2
[18:01:12.189] - relay: TRUE
[18:01:12.191] - stdout: TRUE
[18:01:12.191] - signal: TRUE
[18:01:12.191] - resignal: FALSE
[18:01:12.192] - force: TRUE
[18:01:12.192] - relayed: [n=2] FALSE, FALSE
[18:01:12.192] - queued futures: [n=2] FALSE, FALSE
[18:01:12.193]  - until=1
[18:01:12.193]  - relaying element #1
[18:01:12.194] result() for MulticoreFuture ...
[18:01:12.194] result() for MulticoreFuture ... done
[18:01:12.194] result() for MulticoreFuture ...
[18:01:12.195] result() for MulticoreFuture ... done
[18:01:12.195] result() for MulticoreFuture ...
[18:01:12.195] result() for MulticoreFuture ... done
[18:01:12.196] result() for MulticoreFuture ...
[18:01:12.196] result() for MulticoreFuture ... done
[18:01:12.196] - relayed: [n=2] TRUE, FALSE
[18:01:12.197] - queued futures: [n=2] TRUE, FALSE
[18:01:12.197] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[18:01:12.197]  length: 1 (resolved future 1)
[18:01:12.198] Future #2
[18:01:12.199] result() for MulticoreFuture ...
[18:01:12.202] result() for MulticoreFuture ...
[18:01:12.203] result() for MulticoreFuture ... done
[18:01:12.203] result() for MulticoreFuture ... done
[18:01:12.203] result() for MulticoreFuture ...
[18:01:12.204] result() for MulticoreFuture ... done
[18:01:12.204] signalConditionsASAP(MulticoreFuture, pos=2) ...
[18:01:12.204] - nx: 2
[18:01:12.206] - relay: TRUE
[18:01:12.206] - stdout: TRUE
[18:01:12.207] - signal: TRUE
[18:01:12.207] - resignal: FALSE
[18:01:12.207] - force: TRUE
[18:01:12.207] - relayed: [n=2] TRUE, FALSE
[18:01:12.207] - queued futures: [n=2] TRUE, FALSE
[18:01:12.208]  - until=2
[18:01:12.208]  - relaying element #2
[18:01:12.208] result() for MulticoreFuture ...
[18:01:12.208] result() for MulticoreFuture ... done
[18:01:12.209] result() for MulticoreFuture ...
[18:01:12.209] result() for MulticoreFuture ... done
[18:01:12.209] result() for MulticoreFuture ...
[18:01:12.210] result() for MulticoreFuture ... done
[18:01:12.210] result() for MulticoreFuture ...
[18:01:12.210] result() for MulticoreFuture ... done
[18:01:12.210] - relayed: [n=2] TRUE, TRUE
[18:01:12.211] - queued futures: [n=2] TRUE, TRUE
[18:01:12.211] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[18:01:12.211]  length: 0 (resolved future 2)
[18:01:12.211] Relaying remaining futures
[18:01:12.212] signalConditionsASAP(NULL, pos=0) ...
[18:01:12.212] - nx: 2
[18:01:12.212] - relay: TRUE
[18:01:12.212] - stdout: TRUE
[18:01:12.212] - signal: TRUE
[18:01:12.213] - resignal: FALSE
[18:01:12.213] - force: TRUE
[18:01:12.213] - relayed: [n=2] TRUE, TRUE
[18:01:12.213] - queued futures: [n=2] TRUE, TRUE
 - flush all
[18:01:12.214] - relayed: [n=2] TRUE, TRUE
[18:01:12.214] - queued futures: [n=2] TRUE, TRUE
[18:01:12.214] signalConditionsASAP(NULL, pos=0) ... done
[18:01:12.214] resolve() on list ... DONE
[18:01:12.215] result() for MulticoreFuture ...
[18:01:12.215] result() for MulticoreFuture ... done
[18:01:12.215] result() for MulticoreFuture ...
[18:01:12.215] result() for MulticoreFuture ... done
[18:01:12.216] result() for MulticoreFuture ...
[18:01:12.219] result() for MulticoreFuture ... done
[18:01:12.219] result() for MulticoreFuture ...
[18:01:12.220] result() for MulticoreFuture ... done
[18:01:12.220]  - Number of value chunks collected: 2
[18:01:12.221] Resolving 2 futures (chunks) ... DONE
[18:01:12.221] Reducing values from 2 chunks ...
[18:01:12.221]  - Number of values collected after concatenation: 5
[18:01:12.222]  - Number of values expected: 5
[18:01:12.222] Reducing values from 2 chunks ... DONE
[18:01:12.222] future_lapply() ... DONE
- example(replicate) ...
[18:01:12.223] future_lapply() ...
[18:01:12.225] Generating random seeds ...
[18:01:12.225] Generating random seed streams for 5 elements ...
[18:01:12.225] Generating random seed streams for 5 elements ... DONE
[18:01:12.226] Generating random seeds ... DONE
[18:01:12.226] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[18:01:12.234] Number of chunks: 2
[18:01:12.235] getGlobalsAndPackagesXApply() ...
[18:01:12.235]  - future.globals: TRUE
[18:01:12.235] getGlobalsAndPackages() ...
[18:01:12.235] Searching for globals...
[18:01:12.241] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[18:01:12.241] Searching for globals ... DONE
[18:01:12.241] Resolving globals: FALSE
[18:01:12.242] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[18:01:12.243] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[18:01:12.244] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[18:01:12.244] 
[18:01:12.244] getGlobalsAndPackages() ... DONE
[18:01:12.244]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[18:01:12.245]  - needed namespaces: [n=0] 
[18:01:12.245] Finding globals ... DONE
[18:01:12.245]  - use_args: TRUE
[18:01:12.245]  - Getting '...' globals ...
[18:01:12.246] resolve() on list ...
[18:01:12.246]  recursive: 0
[18:01:12.247]  length: 1
[18:01:12.247]  elements: ‘...’
[18:01:12.247]  length: 0 (resolved future 1)
[18:01:12.247] resolve() on list ... DONE
[18:01:12.248]    - '...' content: [n=0] 
[18:01:12.248] List of 1
[18:01:12.248]  $ ...: list()
[18:01:12.248]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:12.248]  - attr(*, "where")=List of 1
[18:01:12.248]   ..$ ...:<environment: 0x635eb382f428> 
[18:01:12.248]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:12.248]  - attr(*, "resolved")= logi TRUE
[18:01:12.248]  - attr(*, "total_size")= num NA
[18:01:12.254]  - Getting '...' globals ... DONE
[18:01:12.255] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[18:01:12.255] List of 4
[18:01:12.255]  $ ...future.FUN:function (...)  
[18:01:12.255]  $ foo          :function (x = 1, y = 2)  
[18:01:12.255]  $ x            : num 3
[18:01:12.255]  $ ...          : list()
[18:01:12.255]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:12.255]  - attr(*, "where")=List of 4
[18:01:12.255]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[18:01:12.255]   ..$ foo          :<environment: R_EmptyEnv> 
[18:01:12.255]   ..$ x            :<environment: R_EmptyEnv> 
[18:01:12.255]   ..$ ...          :<environment: 0x635eb382f428> 
[18:01:12.255]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:12.255]  - attr(*, "resolved")= logi FALSE
[18:01:12.255]  - attr(*, "total_size")= num 2200
[18:01:12.264] Packages to be attached in all futures: [n=0] 
[18:01:12.264] getGlobalsAndPackagesXApply() ... DONE
[18:01:12.264] Number of futures (= number of chunks): 2
[18:01:12.265] Launching 2 futures (chunks) ...
[18:01:12.265] Chunk #1 of 2 ...
[18:01:12.265]  - Finding globals in 'X' for chunk #1 ...
[18:01:12.265] getGlobalsAndPackages() ...
[18:01:12.265] Searching for globals...
[18:01:12.266] 
[18:01:12.266] Searching for globals ... DONE
[18:01:12.266] - globals: [0] <none>
[18:01:12.267] getGlobalsAndPackages() ... DONE
[18:01:12.267]    + additional globals found: [n=0] 
[18:01:12.267]    + additional namespaces needed: [n=0] 
[18:01:12.267]  - Finding globals in 'X' for chunk #1 ... DONE
[18:01:12.267]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:12.268]  - seeds: [2] <seeds>
[18:01:12.268]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:12.268] getGlobalsAndPackages() ...
[18:01:12.268] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:12.269] Resolving globals: FALSE
[18:01:12.269] Tweak future expression to call with '...' arguments ...
[18:01:12.269] {
[18:01:12.269]     do.call(function(...) {
[18:01:12.269]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:12.269]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:12.269]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:12.269]             on.exit(options(oopts), add = TRUE)
[18:01:12.269]         }
[18:01:12.269]         {
[18:01:12.269]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:12.269]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:12.269]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:12.269]                   envir = globalenv(), inherits = FALSE)
[18:01:12.269]                 ...future.FUN(...future.X_jj, ...)
[18:01:12.269]             })
[18:01:12.269]         }
[18:01:12.269]     }, args = future.call.arguments)
[18:01:12.269] }
[18:01:12.270] Tweak future expression to call with '...' arguments ... DONE
[18:01:12.271] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:12.271] 
[18:01:12.271] getGlobalsAndPackages() ... DONE
[18:01:12.272] run() for ‘Future’ ...
[18:01:12.272] - state: ‘created’
[18:01:12.272] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:01:12.279] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:12.279] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:01:12.279]   - Field: ‘label’
[18:01:12.280]   - Field: ‘local’
[18:01:12.280]   - Field: ‘owner’
[18:01:12.280]   - Field: ‘envir’
[18:01:12.280]   - Field: ‘workers’
[18:01:12.281]   - Field: ‘packages’
[18:01:12.281]   - Field: ‘gc’
[18:01:12.281]   - Field: ‘job’
[18:01:12.281]   - Field: ‘conditions’
[18:01:12.281]   - Field: ‘expr’
[18:01:12.282]   - Field: ‘uuid’
[18:01:12.282]   - Field: ‘seed’
[18:01:12.282]   - Field: ‘version’
[18:01:12.282]   - Field: ‘result’
[18:01:12.283]   - Field: ‘asynchronous’
[18:01:12.283]   - Field: ‘calls’
[18:01:12.283]   - Field: ‘globals’
[18:01:12.283]   - Field: ‘stdout’
[18:01:12.283]   - Field: ‘earlySignal’
[18:01:12.284]   - Field: ‘lazy’
[18:01:12.284]   - Field: ‘state’
[18:01:12.284] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:01:12.284] - Launch lazy future ...
[18:01:12.285] Packages needed by the future expression (n = 0): <none>
[18:01:12.285] Packages needed by future strategies (n = 0): <none>
[18:01:12.289] {
[18:01:12.289]     {
[18:01:12.289]         {
[18:01:12.289]             ...future.startTime <- base::Sys.time()
[18:01:12.289]             {
[18:01:12.289]                 {
[18:01:12.289]                   {
[18:01:12.289]                     {
[18:01:12.289]                       base::local({
[18:01:12.289]                         has_future <- base::requireNamespace("future", 
[18:01:12.289]                           quietly = TRUE)
[18:01:12.289]                         if (has_future) {
[18:01:12.289]                           ns <- base::getNamespace("future")
[18:01:12.289]                           version <- ns[[".package"]][["version"]]
[18:01:12.289]                           if (is.null(version)) 
[18:01:12.289]                             version <- utils::packageVersion("future")
[18:01:12.289]                         }
[18:01:12.289]                         else {
[18:01:12.289]                           version <- NULL
[18:01:12.289]                         }
[18:01:12.289]                         if (!has_future || version < "1.8.0") {
[18:01:12.289]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:12.289]                             "", base::R.version$version.string), 
[18:01:12.289]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:12.289]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:12.289]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:12.289]                               "release", "version")], collapse = " "), 
[18:01:12.289]                             hostname = base::Sys.info()[["nodename"]])
[18:01:12.289]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:12.289]                             info)
[18:01:12.289]                           info <- base::paste(info, collapse = "; ")
[18:01:12.289]                           if (!has_future) {
[18:01:12.289]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:12.289]                               info)
[18:01:12.289]                           }
[18:01:12.289]                           else {
[18:01:12.289]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:12.289]                               info, version)
[18:01:12.289]                           }
[18:01:12.289]                           base::stop(msg)
[18:01:12.289]                         }
[18:01:12.289]                       })
[18:01:12.289]                     }
[18:01:12.289]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:12.289]                     base::options(mc.cores = 1L)
[18:01:12.289]                   }
[18:01:12.289]                   ...future.strategy.old <- future::plan("list")
[18:01:12.289]                   options(future.plan = NULL)
[18:01:12.289]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:12.289]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:12.289]                 }
[18:01:12.289]                 ...future.workdir <- getwd()
[18:01:12.289]             }
[18:01:12.289]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:12.289]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:12.289]         }
[18:01:12.289]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:12.289]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:12.289]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:12.289]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:12.289]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:12.289]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:12.289]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:12.289]             base::names(...future.oldOptions))
[18:01:12.289]     }
[18:01:12.289]     if (FALSE) {
[18:01:12.289]     }
[18:01:12.289]     else {
[18:01:12.289]         if (TRUE) {
[18:01:12.289]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:12.289]                 open = "w")
[18:01:12.289]         }
[18:01:12.289]         else {
[18:01:12.289]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:12.289]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:12.289]         }
[18:01:12.289]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:12.289]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:12.289]             base::sink(type = "output", split = FALSE)
[18:01:12.289]             base::close(...future.stdout)
[18:01:12.289]         }, add = TRUE)
[18:01:12.289]     }
[18:01:12.289]     ...future.frame <- base::sys.nframe()
[18:01:12.289]     ...future.conditions <- base::list()
[18:01:12.289]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:12.289]     if (FALSE) {
[18:01:12.289]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:12.289]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:12.289]     }
[18:01:12.289]     ...future.result <- base::tryCatch({
[18:01:12.289]         base::withCallingHandlers({
[18:01:12.289]             ...future.value <- base::withVisible(base::local({
[18:01:12.289]                 withCallingHandlers({
[18:01:12.289]                   {
[18:01:12.289]                     do.call(function(...) {
[18:01:12.289]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:12.289]                       if (!identical(...future.globals.maxSize.org, 
[18:01:12.289]                         ...future.globals.maxSize)) {
[18:01:12.289]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:12.289]                         on.exit(options(oopts), add = TRUE)
[18:01:12.289]                       }
[18:01:12.289]                       {
[18:01:12.289]                         lapply(seq_along(...future.elements_ii), 
[18:01:12.289]                           FUN = function(jj) {
[18:01:12.289]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:12.289]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:12.289]                               envir = globalenv(), inherits = FALSE)
[18:01:12.289]                             ...future.FUN(...future.X_jj, ...)
[18:01:12.289]                           })
[18:01:12.289]                       }
[18:01:12.289]                     }, args = future.call.arguments)
[18:01:12.289]                   }
[18:01:12.289]                 }, immediateCondition = function(cond) {
[18:01:12.289]                   save_rds <- function (object, pathname, ...) 
[18:01:12.289]                   {
[18:01:12.289]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:01:12.289]                     if (file_test("-f", pathname_tmp)) {
[18:01:12.289]                       fi_tmp <- file.info(pathname_tmp)
[18:01:12.289]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:01:12.289]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:12.289]                         fi_tmp[["mtime"]])
[18:01:12.289]                     }
[18:01:12.289]                     tryCatch({
[18:01:12.289]                       saveRDS(object, file = pathname_tmp, ...)
[18:01:12.289]                     }, error = function(ex) {
[18:01:12.289]                       msg <- conditionMessage(ex)
[18:01:12.289]                       fi_tmp <- file.info(pathname_tmp)
[18:01:12.289]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:01:12.289]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:12.289]                         fi_tmp[["mtime"]], msg)
[18:01:12.289]                       ex$message <- msg
[18:01:12.289]                       stop(ex)
[18:01:12.289]                     })
[18:01:12.289]                     stopifnot(file_test("-f", pathname_tmp))
[18:01:12.289]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:01:12.289]                     if (!res || file_test("-f", pathname_tmp)) {
[18:01:12.289]                       fi_tmp <- file.info(pathname_tmp)
[18:01:12.289]                       fi <- file.info(pathname)
[18:01:12.289]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:01:12.289]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:12.289]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:01:12.289]                         fi[["size"]], fi[["mtime"]])
[18:01:12.289]                       stop(msg)
[18:01:12.289]                     }
[18:01:12.289]                     invisible(pathname)
[18:01:12.289]                   }
[18:01:12.289]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:01:12.289]                     rootPath = tempdir()) 
[18:01:12.289]                   {
[18:01:12.289]                     obj <- list(time = Sys.time(), condition = cond)
[18:01:12.289]                     file <- tempfile(pattern = class(cond)[1], 
[18:01:12.289]                       tmpdir = path, fileext = ".rds")
[18:01:12.289]                     save_rds(obj, file)
[18:01:12.289]                   }
[18:01:12.289]                   saveImmediateCondition(cond, path = "/tmp/RtmpTMmi8X/.future/immediateConditions")
[18:01:12.289]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:12.289]                   {
[18:01:12.289]                     inherits <- base::inherits
[18:01:12.289]                     invokeRestart <- base::invokeRestart
[18:01:12.289]                     is.null <- base::is.null
[18:01:12.289]                     muffled <- FALSE
[18:01:12.289]                     if (inherits(cond, "message")) {
[18:01:12.289]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:12.289]                       if (muffled) 
[18:01:12.289]                         invokeRestart("muffleMessage")
[18:01:12.289]                     }
[18:01:12.289]                     else if (inherits(cond, "warning")) {
[18:01:12.289]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:12.289]                       if (muffled) 
[18:01:12.289]                         invokeRestart("muffleWarning")
[18:01:12.289]                     }
[18:01:12.289]                     else if (inherits(cond, "condition")) {
[18:01:12.289]                       if (!is.null(pattern)) {
[18:01:12.289]                         computeRestarts <- base::computeRestarts
[18:01:12.289]                         grepl <- base::grepl
[18:01:12.289]                         restarts <- computeRestarts(cond)
[18:01:12.289]                         for (restart in restarts) {
[18:01:12.289]                           name <- restart$name
[18:01:12.289]                           if (is.null(name)) 
[18:01:12.289]                             next
[18:01:12.289]                           if (!grepl(pattern, name)) 
[18:01:12.289]                             next
[18:01:12.289]                           invokeRestart(restart)
[18:01:12.289]                           muffled <- TRUE
[18:01:12.289]                           break
[18:01:12.289]                         }
[18:01:12.289]                       }
[18:01:12.289]                     }
[18:01:12.289]                     invisible(muffled)
[18:01:12.289]                   }
[18:01:12.289]                   muffleCondition(cond)
[18:01:12.289]                 })
[18:01:12.289]             }))
[18:01:12.289]             future::FutureResult(value = ...future.value$value, 
[18:01:12.289]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:12.289]                   ...future.rng), globalenv = if (FALSE) 
[18:01:12.289]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:12.289]                     ...future.globalenv.names))
[18:01:12.289]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:12.289]         }, condition = base::local({
[18:01:12.289]             c <- base::c
[18:01:12.289]             inherits <- base::inherits
[18:01:12.289]             invokeRestart <- base::invokeRestart
[18:01:12.289]             length <- base::length
[18:01:12.289]             list <- base::list
[18:01:12.289]             seq.int <- base::seq.int
[18:01:12.289]             signalCondition <- base::signalCondition
[18:01:12.289]             sys.calls <- base::sys.calls
[18:01:12.289]             `[[` <- base::`[[`
[18:01:12.289]             `+` <- base::`+`
[18:01:12.289]             `<<-` <- base::`<<-`
[18:01:12.289]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:12.289]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:12.289]                   3L)]
[18:01:12.289]             }
[18:01:12.289]             function(cond) {
[18:01:12.289]                 is_error <- inherits(cond, "error")
[18:01:12.289]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:12.289]                   NULL)
[18:01:12.289]                 if (is_error) {
[18:01:12.289]                   sessionInformation <- function() {
[18:01:12.289]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:12.289]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:12.289]                       search = base::search(), system = base::Sys.info())
[18:01:12.289]                   }
[18:01:12.289]                   ...future.conditions[[length(...future.conditions) + 
[18:01:12.289]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:12.289]                     cond$call), session = sessionInformation(), 
[18:01:12.289]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:12.289]                   signalCondition(cond)
[18:01:12.289]                 }
[18:01:12.289]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:12.289]                 "immediateCondition"))) {
[18:01:12.289]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:12.289]                   ...future.conditions[[length(...future.conditions) + 
[18:01:12.289]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:12.289]                   if (TRUE && !signal) {
[18:01:12.289]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:12.289]                     {
[18:01:12.289]                       inherits <- base::inherits
[18:01:12.289]                       invokeRestart <- base::invokeRestart
[18:01:12.289]                       is.null <- base::is.null
[18:01:12.289]                       muffled <- FALSE
[18:01:12.289]                       if (inherits(cond, "message")) {
[18:01:12.289]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:12.289]                         if (muffled) 
[18:01:12.289]                           invokeRestart("muffleMessage")
[18:01:12.289]                       }
[18:01:12.289]                       else if (inherits(cond, "warning")) {
[18:01:12.289]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:12.289]                         if (muffled) 
[18:01:12.289]                           invokeRestart("muffleWarning")
[18:01:12.289]                       }
[18:01:12.289]                       else if (inherits(cond, "condition")) {
[18:01:12.289]                         if (!is.null(pattern)) {
[18:01:12.289]                           computeRestarts <- base::computeRestarts
[18:01:12.289]                           grepl <- base::grepl
[18:01:12.289]                           restarts <- computeRestarts(cond)
[18:01:12.289]                           for (restart in restarts) {
[18:01:12.289]                             name <- restart$name
[18:01:12.289]                             if (is.null(name)) 
[18:01:12.289]                               next
[18:01:12.289]                             if (!grepl(pattern, name)) 
[18:01:12.289]                               next
[18:01:12.289]                             invokeRestart(restart)
[18:01:12.289]                             muffled <- TRUE
[18:01:12.289]                             break
[18:01:12.289]                           }
[18:01:12.289]                         }
[18:01:12.289]                       }
[18:01:12.289]                       invisible(muffled)
[18:01:12.289]                     }
[18:01:12.289]                     muffleCondition(cond, pattern = "^muffle")
[18:01:12.289]                   }
[18:01:12.289]                 }
[18:01:12.289]                 else {
[18:01:12.289]                   if (TRUE) {
[18:01:12.289]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:12.289]                     {
[18:01:12.289]                       inherits <- base::inherits
[18:01:12.289]                       invokeRestart <- base::invokeRestart
[18:01:12.289]                       is.null <- base::is.null
[18:01:12.289]                       muffled <- FALSE
[18:01:12.289]                       if (inherits(cond, "message")) {
[18:01:12.289]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:12.289]                         if (muffled) 
[18:01:12.289]                           invokeRestart("muffleMessage")
[18:01:12.289]                       }
[18:01:12.289]                       else if (inherits(cond, "warning")) {
[18:01:12.289]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:12.289]                         if (muffled) 
[18:01:12.289]                           invokeRestart("muffleWarning")
[18:01:12.289]                       }
[18:01:12.289]                       else if (inherits(cond, "condition")) {
[18:01:12.289]                         if (!is.null(pattern)) {
[18:01:12.289]                           computeRestarts <- base::computeRestarts
[18:01:12.289]                           grepl <- base::grepl
[18:01:12.289]                           restarts <- computeRestarts(cond)
[18:01:12.289]                           for (restart in restarts) {
[18:01:12.289]                             name <- restart$name
[18:01:12.289]                             if (is.null(name)) 
[18:01:12.289]                               next
[18:01:12.289]                             if (!grepl(pattern, name)) 
[18:01:12.289]                               next
[18:01:12.289]                             invokeRestart(restart)
[18:01:12.289]                             muffled <- TRUE
[18:01:12.289]                             break
[18:01:12.289]                           }
[18:01:12.289]                         }
[18:01:12.289]                       }
[18:01:12.289]                       invisible(muffled)
[18:01:12.289]                     }
[18:01:12.289]                     muffleCondition(cond, pattern = "^muffle")
[18:01:12.289]                   }
[18:01:12.289]                 }
[18:01:12.289]             }
[18:01:12.289]         }))
[18:01:12.289]     }, error = function(ex) {
[18:01:12.289]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:12.289]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:12.289]                 ...future.rng), started = ...future.startTime, 
[18:01:12.289]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:12.289]             version = "1.8"), class = "FutureResult")
[18:01:12.289]     }, finally = {
[18:01:12.289]         if (!identical(...future.workdir, getwd())) 
[18:01:12.289]             setwd(...future.workdir)
[18:01:12.289]         {
[18:01:12.289]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:12.289]                 ...future.oldOptions$nwarnings <- NULL
[18:01:12.289]             }
[18:01:12.289]             base::options(...future.oldOptions)
[18:01:12.289]             if (.Platform$OS.type == "windows") {
[18:01:12.289]                 old_names <- names(...future.oldEnvVars)
[18:01:12.289]                 envs <- base::Sys.getenv()
[18:01:12.289]                 names <- names(envs)
[18:01:12.289]                 common <- intersect(names, old_names)
[18:01:12.289]                 added <- setdiff(names, old_names)
[18:01:12.289]                 removed <- setdiff(old_names, names)
[18:01:12.289]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:12.289]                   envs[common]]
[18:01:12.289]                 NAMES <- toupper(changed)
[18:01:12.289]                 args <- list()
[18:01:12.289]                 for (kk in seq_along(NAMES)) {
[18:01:12.289]                   name <- changed[[kk]]
[18:01:12.289]                   NAME <- NAMES[[kk]]
[18:01:12.289]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:12.289]                     next
[18:01:12.289]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:12.289]                 }
[18:01:12.289]                 NAMES <- toupper(added)
[18:01:12.289]                 for (kk in seq_along(NAMES)) {
[18:01:12.289]                   name <- added[[kk]]
[18:01:12.289]                   NAME <- NAMES[[kk]]
[18:01:12.289]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:12.289]                     next
[18:01:12.289]                   args[[name]] <- ""
[18:01:12.289]                 }
[18:01:12.289]                 NAMES <- toupper(removed)
[18:01:12.289]                 for (kk in seq_along(NAMES)) {
[18:01:12.289]                   name <- removed[[kk]]
[18:01:12.289]                   NAME <- NAMES[[kk]]
[18:01:12.289]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:12.289]                     next
[18:01:12.289]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:12.289]                 }
[18:01:12.289]                 if (length(args) > 0) 
[18:01:12.289]                   base::do.call(base::Sys.setenv, args = args)
[18:01:12.289]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:12.289]             }
[18:01:12.289]             else {
[18:01:12.289]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:12.289]             }
[18:01:12.289]             {
[18:01:12.289]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:12.289]                   0L) {
[18:01:12.289]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:12.289]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:12.289]                   base::options(opts)
[18:01:12.289]                 }
[18:01:12.289]                 {
[18:01:12.289]                   {
[18:01:12.289]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:12.289]                     NULL
[18:01:12.289]                   }
[18:01:12.289]                   options(future.plan = NULL)
[18:01:12.289]                   if (is.na(NA_character_)) 
[18:01:12.289]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:12.289]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:12.289]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:12.289]                     .init = FALSE)
[18:01:12.289]                 }
[18:01:12.289]             }
[18:01:12.289]         }
[18:01:12.289]     })
[18:01:12.289]     if (TRUE) {
[18:01:12.289]         base::sink(type = "output", split = FALSE)
[18:01:12.289]         if (TRUE) {
[18:01:12.289]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:12.289]         }
[18:01:12.289]         else {
[18:01:12.289]             ...future.result["stdout"] <- base::list(NULL)
[18:01:12.289]         }
[18:01:12.289]         base::close(...future.stdout)
[18:01:12.289]         ...future.stdout <- NULL
[18:01:12.289]     }
[18:01:12.289]     ...future.result$conditions <- ...future.conditions
[18:01:12.289]     ...future.result$finished <- base::Sys.time()
[18:01:12.289]     ...future.result
[18:01:12.289] }
[18:01:12.294] assign_globals() ...
[18:01:12.294] List of 7
[18:01:12.294]  $ ...future.FUN            :function (...)  
[18:01:12.294]  $ foo                      :function (x = 1, y = 2)  
[18:01:12.294]  $ x                        : num 3
[18:01:12.294]  $ future.call.arguments    : list()
[18:01:12.294]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:12.294]  $ ...future.elements_ii    :List of 2
[18:01:12.294]   ..$ : int 0
[18:01:12.294]   ..$ : int 0
[18:01:12.294]  $ ...future.seeds_ii       :List of 2
[18:01:12.294]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[18:01:12.294]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[18:01:12.294]  $ ...future.globals.maxSize: NULL
[18:01:12.294]  - attr(*, "where")=List of 7
[18:01:12.294]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[18:01:12.294]   ..$ foo                      :<environment: R_EmptyEnv> 
[18:01:12.294]   ..$ x                        :<environment: R_EmptyEnv> 
[18:01:12.294]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[18:01:12.294]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[18:01:12.294]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[18:01:12.294]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[18:01:12.294]  - attr(*, "resolved")= logi FALSE
[18:01:12.294]  - attr(*, "total_size")= num 2200
[18:01:12.294]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:12.294]  - attr(*, "already-done")= logi TRUE
[18:01:12.309] - reassign environment for ‘...future.FUN’
[18:01:12.309] - copied ‘...future.FUN’ to environment
[18:01:12.309] - reassign environment for ‘foo’
[18:01:12.310] - copied ‘foo’ to environment
[18:01:12.310] - copied ‘x’ to environment
[18:01:12.310] - copied ‘future.call.arguments’ to environment
[18:01:12.310] - copied ‘...future.elements_ii’ to environment
[18:01:12.310] - copied ‘...future.seeds_ii’ to environment
[18:01:12.311] - copied ‘...future.globals.maxSize’ to environment
[18:01:12.311] assign_globals() ... done
[18:01:12.311] requestCore(): workers = 2
[18:01:12.315] MulticoreFuture started
[18:01:12.316] - Launch lazy future ... done
[18:01:12.316] run() for ‘MulticoreFuture’ ... done
[18:01:12.317] Created future:
[18:01:12.317] plan(): Setting new future strategy stack:
[18:01:12.317] List of future strategies:
[18:01:12.317] 1. sequential:
[18:01:12.317]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:12.317]    - tweaked: FALSE
[18:01:12.317]    - call: NULL
[18:01:12.320] plan(): nbrOfWorkers() = 1
[18:01:12.324] plan(): Setting new future strategy stack:
[18:01:12.324] List of future strategies:
[18:01:12.324] 1. multicore:
[18:01:12.324]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:01:12.324]    - tweaked: FALSE
[18:01:12.324]    - call: plan(strategy)
[18:01:12.333] plan(): nbrOfWorkers() = 2
[18:01:12.317] MulticoreFuture:
[18:01:12.317] Label: ‘future_replicate-1’
[18:01:12.317] Expression:
[18:01:12.317] {
[18:01:12.317]     do.call(function(...) {
[18:01:12.317]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:12.317]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:12.317]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:12.317]             on.exit(options(oopts), add = TRUE)
[18:01:12.317]         }
[18:01:12.317]         {
[18:01:12.317]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:12.317]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:12.317]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:12.317]                   envir = globalenv(), inherits = FALSE)
[18:01:12.317]                 ...future.FUN(...future.X_jj, ...)
[18:01:12.317]             })
[18:01:12.317]         }
[18:01:12.317]     }, args = future.call.arguments)
[18:01:12.317] }
[18:01:12.317] Lazy evaluation: FALSE
[18:01:12.317] Asynchronous evaluation: TRUE
[18:01:12.317] Local evaluation: TRUE
[18:01:12.317] Environment: 0x635eb53307d0
[18:01:12.317] Capture standard output: TRUE
[18:01:12.317] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:12.317] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[18:01:12.317] Packages: <none>
[18:01:12.317] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:12.317] Resolved: FALSE
[18:01:12.317] Value: <not collected>
[18:01:12.317] Conditions captured: <none>
[18:01:12.317] Early signaling: FALSE
[18:01:12.317] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:12.317] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:12.335] Chunk #1 of 2 ... DONE
[18:01:12.335] Chunk #2 of 2 ...
[18:01:12.336]  - Finding globals in 'X' for chunk #2 ...
[18:01:12.336] getGlobalsAndPackages() ...
[18:01:12.336] Searching for globals...
[18:01:12.337] 
[18:01:12.338] Searching for globals ... DONE
[18:01:12.338] - globals: [0] <none>
[18:01:12.338] getGlobalsAndPackages() ... DONE
[18:01:12.339]    + additional globals found: [n=0] 
[18:01:12.339]    + additional namespaces needed: [n=0] 
[18:01:12.339]  - Finding globals in 'X' for chunk #2 ... DONE
[18:01:12.339]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:12.342]  - seeds: [3] <seeds>
[18:01:12.342]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:12.343] getGlobalsAndPackages() ...
[18:01:12.343] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:12.344] Resolving globals: FALSE
[18:01:12.344] Tweak future expression to call with '...' arguments ...
[18:01:12.345] {
[18:01:12.345]     do.call(function(...) {
[18:01:12.345]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:12.345]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:12.345]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:12.345]             on.exit(options(oopts), add = TRUE)
[18:01:12.345]         }
[18:01:12.345]         {
[18:01:12.345]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:12.345]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:12.345]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:12.345]                   envir = globalenv(), inherits = FALSE)
[18:01:12.345]                 ...future.FUN(...future.X_jj, ...)
[18:01:12.345]             })
[18:01:12.345]         }
[18:01:12.345]     }, args = future.call.arguments)
[18:01:12.345] }
[18:01:12.348] Tweak future expression to call with '...' arguments ... DONE
[18:01:12.351] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:12.352] 
[18:01:12.352] getGlobalsAndPackages() ... DONE
[18:01:12.353] run() for ‘Future’ ...
[18:01:12.354] - state: ‘created’
[18:01:12.354] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:01:12.363] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:12.364] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:01:12.364]   - Field: ‘label’
[18:01:12.364]   - Field: ‘local’
[18:01:12.365]   - Field: ‘owner’
[18:01:12.365]   - Field: ‘envir’
[18:01:12.365]   - Field: ‘workers’
[18:01:12.366]   - Field: ‘packages’
[18:01:12.366]   - Field: ‘gc’
[18:01:12.366]   - Field: ‘job’
[18:01:12.367]   - Field: ‘conditions’
[18:01:12.367]   - Field: ‘expr’
[18:01:12.367]   - Field: ‘uuid’
[18:01:12.368]   - Field: ‘seed’
[18:01:12.368]   - Field: ‘version’
[18:01:12.368]   - Field: ‘result’
[18:01:12.369]   - Field: ‘asynchronous’
[18:01:12.369]   - Field: ‘calls’
[18:01:12.369]   - Field: ‘globals’
[18:01:12.370]   - Field: ‘stdout’
[18:01:12.370]   - Field: ‘earlySignal’
[18:01:12.370]   - Field: ‘lazy’
[18:01:12.371]   - Field: ‘state’
[18:01:12.371] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:01:12.371] - Launch lazy future ...
[18:01:12.372] Packages needed by the future expression (n = 0): <none>
[18:01:12.372] Packages needed by future strategies (n = 0): <none>
[18:01:12.374] {
[18:01:12.374]     {
[18:01:12.374]         {
[18:01:12.374]             ...future.startTime <- base::Sys.time()
[18:01:12.374]             {
[18:01:12.374]                 {
[18:01:12.374]                   {
[18:01:12.374]                     {
[18:01:12.374]                       base::local({
[18:01:12.374]                         has_future <- base::requireNamespace("future", 
[18:01:12.374]                           quietly = TRUE)
[18:01:12.374]                         if (has_future) {
[18:01:12.374]                           ns <- base::getNamespace("future")
[18:01:12.374]                           version <- ns[[".package"]][["version"]]
[18:01:12.374]                           if (is.null(version)) 
[18:01:12.374]                             version <- utils::packageVersion("future")
[18:01:12.374]                         }
[18:01:12.374]                         else {
[18:01:12.374]                           version <- NULL
[18:01:12.374]                         }
[18:01:12.374]                         if (!has_future || version < "1.8.0") {
[18:01:12.374]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:12.374]                             "", base::R.version$version.string), 
[18:01:12.374]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:12.374]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:12.374]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:12.374]                               "release", "version")], collapse = " "), 
[18:01:12.374]                             hostname = base::Sys.info()[["nodename"]])
[18:01:12.374]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:12.374]                             info)
[18:01:12.374]                           info <- base::paste(info, collapse = "; ")
[18:01:12.374]                           if (!has_future) {
[18:01:12.374]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:12.374]                               info)
[18:01:12.374]                           }
[18:01:12.374]                           else {
[18:01:12.374]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:12.374]                               info, version)
[18:01:12.374]                           }
[18:01:12.374]                           base::stop(msg)
[18:01:12.374]                         }
[18:01:12.374]                       })
[18:01:12.374]                     }
[18:01:12.374]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:12.374]                     base::options(mc.cores = 1L)
[18:01:12.374]                   }
[18:01:12.374]                   ...future.strategy.old <- future::plan("list")
[18:01:12.374]                   options(future.plan = NULL)
[18:01:12.374]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:12.374]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:12.374]                 }
[18:01:12.374]                 ...future.workdir <- getwd()
[18:01:12.374]             }
[18:01:12.374]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:12.374]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:12.374]         }
[18:01:12.374]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:12.374]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:12.374]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:12.374]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:12.374]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:12.374]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:12.374]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:12.374]             base::names(...future.oldOptions))
[18:01:12.374]     }
[18:01:12.374]     if (FALSE) {
[18:01:12.374]     }
[18:01:12.374]     else {
[18:01:12.374]         if (TRUE) {
[18:01:12.374]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:12.374]                 open = "w")
[18:01:12.374]         }
[18:01:12.374]         else {
[18:01:12.374]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:12.374]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:12.374]         }
[18:01:12.374]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:12.374]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:12.374]             base::sink(type = "output", split = FALSE)
[18:01:12.374]             base::close(...future.stdout)
[18:01:12.374]         }, add = TRUE)
[18:01:12.374]     }
[18:01:12.374]     ...future.frame <- base::sys.nframe()
[18:01:12.374]     ...future.conditions <- base::list()
[18:01:12.374]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:12.374]     if (FALSE) {
[18:01:12.374]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:12.374]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:12.374]     }
[18:01:12.374]     ...future.result <- base::tryCatch({
[18:01:12.374]         base::withCallingHandlers({
[18:01:12.374]             ...future.value <- base::withVisible(base::local({
[18:01:12.374]                 withCallingHandlers({
[18:01:12.374]                   {
[18:01:12.374]                     do.call(function(...) {
[18:01:12.374]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:12.374]                       if (!identical(...future.globals.maxSize.org, 
[18:01:12.374]                         ...future.globals.maxSize)) {
[18:01:12.374]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:12.374]                         on.exit(options(oopts), add = TRUE)
[18:01:12.374]                       }
[18:01:12.374]                       {
[18:01:12.374]                         lapply(seq_along(...future.elements_ii), 
[18:01:12.374]                           FUN = function(jj) {
[18:01:12.374]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:12.374]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:12.374]                               envir = globalenv(), inherits = FALSE)
[18:01:12.374]                             ...future.FUN(...future.X_jj, ...)
[18:01:12.374]                           })
[18:01:12.374]                       }
[18:01:12.374]                     }, args = future.call.arguments)
[18:01:12.374]                   }
[18:01:12.374]                 }, immediateCondition = function(cond) {
[18:01:12.374]                   save_rds <- function (object, pathname, ...) 
[18:01:12.374]                   {
[18:01:12.374]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:01:12.374]                     if (file_test("-f", pathname_tmp)) {
[18:01:12.374]                       fi_tmp <- file.info(pathname_tmp)
[18:01:12.374]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:01:12.374]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:12.374]                         fi_tmp[["mtime"]])
[18:01:12.374]                     }
[18:01:12.374]                     tryCatch({
[18:01:12.374]                       saveRDS(object, file = pathname_tmp, ...)
[18:01:12.374]                     }, error = function(ex) {
[18:01:12.374]                       msg <- conditionMessage(ex)
[18:01:12.374]                       fi_tmp <- file.info(pathname_tmp)
[18:01:12.374]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:01:12.374]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:12.374]                         fi_tmp[["mtime"]], msg)
[18:01:12.374]                       ex$message <- msg
[18:01:12.374]                       stop(ex)
[18:01:12.374]                     })
[18:01:12.374]                     stopifnot(file_test("-f", pathname_tmp))
[18:01:12.374]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:01:12.374]                     if (!res || file_test("-f", pathname_tmp)) {
[18:01:12.374]                       fi_tmp <- file.info(pathname_tmp)
[18:01:12.374]                       fi <- file.info(pathname)
[18:01:12.374]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:01:12.374]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:01:12.374]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:01:12.374]                         fi[["size"]], fi[["mtime"]])
[18:01:12.374]                       stop(msg)
[18:01:12.374]                     }
[18:01:12.374]                     invisible(pathname)
[18:01:12.374]                   }
[18:01:12.374]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:01:12.374]                     rootPath = tempdir()) 
[18:01:12.374]                   {
[18:01:12.374]                     obj <- list(time = Sys.time(), condition = cond)
[18:01:12.374]                     file <- tempfile(pattern = class(cond)[1], 
[18:01:12.374]                       tmpdir = path, fileext = ".rds")
[18:01:12.374]                     save_rds(obj, file)
[18:01:12.374]                   }
[18:01:12.374]                   saveImmediateCondition(cond, path = "/tmp/RtmpTMmi8X/.future/immediateConditions")
[18:01:12.374]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:12.374]                   {
[18:01:12.374]                     inherits <- base::inherits
[18:01:12.374]                     invokeRestart <- base::invokeRestart
[18:01:12.374]                     is.null <- base::is.null
[18:01:12.374]                     muffled <- FALSE
[18:01:12.374]                     if (inherits(cond, "message")) {
[18:01:12.374]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:12.374]                       if (muffled) 
[18:01:12.374]                         invokeRestart("muffleMessage")
[18:01:12.374]                     }
[18:01:12.374]                     else if (inherits(cond, "warning")) {
[18:01:12.374]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:12.374]                       if (muffled) 
[18:01:12.374]                         invokeRestart("muffleWarning")
[18:01:12.374]                     }
[18:01:12.374]                     else if (inherits(cond, "condition")) {
[18:01:12.374]                       if (!is.null(pattern)) {
[18:01:12.374]                         computeRestarts <- base::computeRestarts
[18:01:12.374]                         grepl <- base::grepl
[18:01:12.374]                         restarts <- computeRestarts(cond)
[18:01:12.374]                         for (restart in restarts) {
[18:01:12.374]                           name <- restart$name
[18:01:12.374]                           if (is.null(name)) 
[18:01:12.374]                             next
[18:01:12.374]                           if (!grepl(pattern, name)) 
[18:01:12.374]                             next
[18:01:12.374]                           invokeRestart(restart)
[18:01:12.374]                           muffled <- TRUE
[18:01:12.374]                           break
[18:01:12.374]                         }
[18:01:12.374]                       }
[18:01:12.374]                     }
[18:01:12.374]                     invisible(muffled)
[18:01:12.374]                   }
[18:01:12.374]                   muffleCondition(cond)
[18:01:12.374]                 })
[18:01:12.374]             }))
[18:01:12.374]             future::FutureResult(value = ...future.value$value, 
[18:01:12.374]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:12.374]                   ...future.rng), globalenv = if (FALSE) 
[18:01:12.374]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:12.374]                     ...future.globalenv.names))
[18:01:12.374]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:12.374]         }, condition = base::local({
[18:01:12.374]             c <- base::c
[18:01:12.374]             inherits <- base::inherits
[18:01:12.374]             invokeRestart <- base::invokeRestart
[18:01:12.374]             length <- base::length
[18:01:12.374]             list <- base::list
[18:01:12.374]             seq.int <- base::seq.int
[18:01:12.374]             signalCondition <- base::signalCondition
[18:01:12.374]             sys.calls <- base::sys.calls
[18:01:12.374]             `[[` <- base::`[[`
[18:01:12.374]             `+` <- base::`+`
[18:01:12.374]             `<<-` <- base::`<<-`
[18:01:12.374]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:12.374]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:12.374]                   3L)]
[18:01:12.374]             }
[18:01:12.374]             function(cond) {
[18:01:12.374]                 is_error <- inherits(cond, "error")
[18:01:12.374]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:12.374]                   NULL)
[18:01:12.374]                 if (is_error) {
[18:01:12.374]                   sessionInformation <- function() {
[18:01:12.374]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:12.374]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:12.374]                       search = base::search(), system = base::Sys.info())
[18:01:12.374]                   }
[18:01:12.374]                   ...future.conditions[[length(...future.conditions) + 
[18:01:12.374]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:12.374]                     cond$call), session = sessionInformation(), 
[18:01:12.374]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:12.374]                   signalCondition(cond)
[18:01:12.374]                 }
[18:01:12.374]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:12.374]                 "immediateCondition"))) {
[18:01:12.374]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:12.374]                   ...future.conditions[[length(...future.conditions) + 
[18:01:12.374]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:12.374]                   if (TRUE && !signal) {
[18:01:12.374]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:12.374]                     {
[18:01:12.374]                       inherits <- base::inherits
[18:01:12.374]                       invokeRestart <- base::invokeRestart
[18:01:12.374]                       is.null <- base::is.null
[18:01:12.374]                       muffled <- FALSE
[18:01:12.374]                       if (inherits(cond, "message")) {
[18:01:12.374]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:12.374]                         if (muffled) 
[18:01:12.374]                           invokeRestart("muffleMessage")
[18:01:12.374]                       }
[18:01:12.374]                       else if (inherits(cond, "warning")) {
[18:01:12.374]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:12.374]                         if (muffled) 
[18:01:12.374]                           invokeRestart("muffleWarning")
[18:01:12.374]                       }
[18:01:12.374]                       else if (inherits(cond, "condition")) {
[18:01:12.374]                         if (!is.null(pattern)) {
[18:01:12.374]                           computeRestarts <- base::computeRestarts
[18:01:12.374]                           grepl <- base::grepl
[18:01:12.374]                           restarts <- computeRestarts(cond)
[18:01:12.374]                           for (restart in restarts) {
[18:01:12.374]                             name <- restart$name
[18:01:12.374]                             if (is.null(name)) 
[18:01:12.374]                               next
[18:01:12.374]                             if (!grepl(pattern, name)) 
[18:01:12.374]                               next
[18:01:12.374]                             invokeRestart(restart)
[18:01:12.374]                             muffled <- TRUE
[18:01:12.374]                             break
[18:01:12.374]                           }
[18:01:12.374]                         }
[18:01:12.374]                       }
[18:01:12.374]                       invisible(muffled)
[18:01:12.374]                     }
[18:01:12.374]                     muffleCondition(cond, pattern = "^muffle")
[18:01:12.374]                   }
[18:01:12.374]                 }
[18:01:12.374]                 else {
[18:01:12.374]                   if (TRUE) {
[18:01:12.374]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:12.374]                     {
[18:01:12.374]                       inherits <- base::inherits
[18:01:12.374]                       invokeRestart <- base::invokeRestart
[18:01:12.374]                       is.null <- base::is.null
[18:01:12.374]                       muffled <- FALSE
[18:01:12.374]                       if (inherits(cond, "message")) {
[18:01:12.374]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:12.374]                         if (muffled) 
[18:01:12.374]                           invokeRestart("muffleMessage")
[18:01:12.374]                       }
[18:01:12.374]                       else if (inherits(cond, "warning")) {
[18:01:12.374]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:12.374]                         if (muffled) 
[18:01:12.374]                           invokeRestart("muffleWarning")
[18:01:12.374]                       }
[18:01:12.374]                       else if (inherits(cond, "condition")) {
[18:01:12.374]                         if (!is.null(pattern)) {
[18:01:12.374]                           computeRestarts <- base::computeRestarts
[18:01:12.374]                           grepl <- base::grepl
[18:01:12.374]                           restarts <- computeRestarts(cond)
[18:01:12.374]                           for (restart in restarts) {
[18:01:12.374]                             name <- restart$name
[18:01:12.374]                             if (is.null(name)) 
[18:01:12.374]                               next
[18:01:12.374]                             if (!grepl(pattern, name)) 
[18:01:12.374]                               next
[18:01:12.374]                             invokeRestart(restart)
[18:01:12.374]                             muffled <- TRUE
[18:01:12.374]                             break
[18:01:12.374]                           }
[18:01:12.374]                         }
[18:01:12.374]                       }
[18:01:12.374]                       invisible(muffled)
[18:01:12.374]                     }
[18:01:12.374]                     muffleCondition(cond, pattern = "^muffle")
[18:01:12.374]                   }
[18:01:12.374]                 }
[18:01:12.374]             }
[18:01:12.374]         }))
[18:01:12.374]     }, error = function(ex) {
[18:01:12.374]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:12.374]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:12.374]                 ...future.rng), started = ...future.startTime, 
[18:01:12.374]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:12.374]             version = "1.8"), class = "FutureResult")
[18:01:12.374]     }, finally = {
[18:01:12.374]         if (!identical(...future.workdir, getwd())) 
[18:01:12.374]             setwd(...future.workdir)
[18:01:12.374]         {
[18:01:12.374]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:12.374]                 ...future.oldOptions$nwarnings <- NULL
[18:01:12.374]             }
[18:01:12.374]             base::options(...future.oldOptions)
[18:01:12.374]             if (.Platform$OS.type == "windows") {
[18:01:12.374]                 old_names <- names(...future.oldEnvVars)
[18:01:12.374]                 envs <- base::Sys.getenv()
[18:01:12.374]                 names <- names(envs)
[18:01:12.374]                 common <- intersect(names, old_names)
[18:01:12.374]                 added <- setdiff(names, old_names)
[18:01:12.374]                 removed <- setdiff(old_names, names)
[18:01:12.374]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:12.374]                   envs[common]]
[18:01:12.374]                 NAMES <- toupper(changed)
[18:01:12.374]                 args <- list()
[18:01:12.374]                 for (kk in seq_along(NAMES)) {
[18:01:12.374]                   name <- changed[[kk]]
[18:01:12.374]                   NAME <- NAMES[[kk]]
[18:01:12.374]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:12.374]                     next
[18:01:12.374]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:12.374]                 }
[18:01:12.374]                 NAMES <- toupper(added)
[18:01:12.374]                 for (kk in seq_along(NAMES)) {
[18:01:12.374]                   name <- added[[kk]]
[18:01:12.374]                   NAME <- NAMES[[kk]]
[18:01:12.374]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:12.374]                     next
[18:01:12.374]                   args[[name]] <- ""
[18:01:12.374]                 }
[18:01:12.374]                 NAMES <- toupper(removed)
[18:01:12.374]                 for (kk in seq_along(NAMES)) {
[18:01:12.374]                   name <- removed[[kk]]
[18:01:12.374]                   NAME <- NAMES[[kk]]
[18:01:12.374]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:12.374]                     next
[18:01:12.374]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:12.374]                 }
[18:01:12.374]                 if (length(args) > 0) 
[18:01:12.374]                   base::do.call(base::Sys.setenv, args = args)
[18:01:12.374]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:12.374]             }
[18:01:12.374]             else {
[18:01:12.374]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:12.374]             }
[18:01:12.374]             {
[18:01:12.374]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:12.374]                   0L) {
[18:01:12.374]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:12.374]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:12.374]                   base::options(opts)
[18:01:12.374]                 }
[18:01:12.374]                 {
[18:01:12.374]                   {
[18:01:12.374]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:12.374]                     NULL
[18:01:12.374]                   }
[18:01:12.374]                   options(future.plan = NULL)
[18:01:12.374]                   if (is.na(NA_character_)) 
[18:01:12.374]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:12.374]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:12.374]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:12.374]                     .init = FALSE)
[18:01:12.374]                 }
[18:01:12.374]             }
[18:01:12.374]         }
[18:01:12.374]     })
[18:01:12.374]     if (TRUE) {
[18:01:12.374]         base::sink(type = "output", split = FALSE)
[18:01:12.374]         if (TRUE) {
[18:01:12.374]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:12.374]         }
[18:01:12.374]         else {
[18:01:12.374]             ...future.result["stdout"] <- base::list(NULL)
[18:01:12.374]         }
[18:01:12.374]         base::close(...future.stdout)
[18:01:12.374]         ...future.stdout <- NULL
[18:01:12.374]     }
[18:01:12.374]     ...future.result$conditions <- ...future.conditions
[18:01:12.374]     ...future.result$finished <- base::Sys.time()
[18:01:12.374]     ...future.result
[18:01:12.374] }
[18:01:12.380] assign_globals() ...
[18:01:12.381] List of 7
[18:01:12.381]  $ ...future.FUN            :function (...)  
[18:01:12.381]  $ foo                      :function (x = 1, y = 2)  
[18:01:12.381]  $ x                        : num 3
[18:01:12.381]  $ future.call.arguments    : list()
[18:01:12.381]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:12.381]  $ ...future.elements_ii    :List of 3
[18:01:12.381]   ..$ : int 0
[18:01:12.381]   ..$ : int 0
[18:01:12.381]   ..$ : int 0
[18:01:12.381]  $ ...future.seeds_ii       :List of 3
[18:01:12.381]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[18:01:12.381]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[18:01:12.381]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[18:01:12.381]  $ ...future.globals.maxSize: NULL
[18:01:12.381]  - attr(*, "where")=List of 7
[18:01:12.381]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[18:01:12.381]   ..$ foo                      :<environment: R_EmptyEnv> 
[18:01:12.381]   ..$ x                        :<environment: R_EmptyEnv> 
[18:01:12.381]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[18:01:12.381]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[18:01:12.381]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[18:01:12.381]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[18:01:12.381]  - attr(*, "resolved")= logi FALSE
[18:01:12.381]  - attr(*, "total_size")= num 2200
[18:01:12.381]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:12.381]  - attr(*, "already-done")= logi TRUE
[18:01:12.412] - reassign environment for ‘...future.FUN’
[18:01:12.412] - copied ‘...future.FUN’ to environment
[18:01:12.412] - reassign environment for ‘foo’
[18:01:12.413] - copied ‘foo’ to environment
[18:01:12.413] - copied ‘x’ to environment
[18:01:12.413] - copied ‘future.call.arguments’ to environment
[18:01:12.414] - copied ‘...future.elements_ii’ to environment
[18:01:12.414] - copied ‘...future.seeds_ii’ to environment
[18:01:12.414] - copied ‘...future.globals.maxSize’ to environment
[18:01:12.415] assign_globals() ... done
[18:01:12.415] requestCore(): workers = 2
[18:01:12.419] MulticoreFuture started
[18:01:12.420] - Launch lazy future ... done
[18:01:12.421] run() for ‘MulticoreFuture’ ... done
[18:01:12.421] Created future:
[18:01:12.421] plan(): Setting new future strategy stack:
[18:01:12.422] List of future strategies:
[18:01:12.422] 1. sequential:
[18:01:12.422]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:12.422]    - tweaked: FALSE
[18:01:12.422]    - call: NULL
[18:01:12.424] plan(): nbrOfWorkers() = 1
[18:01:12.429] plan(): Setting new future strategy stack:
[18:01:12.429] List of future strategies:
[18:01:12.429] 1. multicore:
[18:01:12.429]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:01:12.429]    - tweaked: FALSE
[18:01:12.429]    - call: plan(strategy)
[18:01:12.438] plan(): nbrOfWorkers() = 2
[18:01:12.422] MulticoreFuture:
[18:01:12.422] Label: ‘future_replicate-2’
[18:01:12.422] Expression:
[18:01:12.422] {
[18:01:12.422]     do.call(function(...) {
[18:01:12.422]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:12.422]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:12.422]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:12.422]             on.exit(options(oopts), add = TRUE)
[18:01:12.422]         }
[18:01:12.422]         {
[18:01:12.422]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:12.422]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:12.422]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:12.422]                   envir = globalenv(), inherits = FALSE)
[18:01:12.422]                 ...future.FUN(...future.X_jj, ...)
[18:01:12.422]             })
[18:01:12.422]         }
[18:01:12.422]     }, args = future.call.arguments)
[18:01:12.422] }
[18:01:12.422] Lazy evaluation: FALSE
[18:01:12.422] Asynchronous evaluation: TRUE
[18:01:12.422] Local evaluation: TRUE
[18:01:12.422] Environment: 0x635eb53307d0
[18:01:12.422] Capture standard output: TRUE
[18:01:12.422] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:12.422] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[18:01:12.422] Packages: <none>
[18:01:12.422] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:12.422] Resolved: FALSE
[18:01:12.422] Value: <not collected>
[18:01:12.422] Conditions captured: <none>
[18:01:12.422] Early signaling: FALSE
[18:01:12.422] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:12.422] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:12.438] Chunk #2 of 2 ... DONE
[18:01:12.439] Launching 2 futures (chunks) ... DONE
[18:01:12.439] Resolving 2 futures (chunks) ...
[18:01:12.439] resolve() on list ...
[18:01:12.440]  recursive: 0
[18:01:12.440]  length: 2
[18:01:12.440] 
[18:01:12.441] Future #1
[18:01:12.441] result() for MulticoreFuture ...
[18:01:12.443] result() for MulticoreFuture ...
[18:01:12.444] result() for MulticoreFuture ... done
[18:01:12.444] result() for MulticoreFuture ... done
[18:01:12.444] result() for MulticoreFuture ...
[18:01:12.445] result() for MulticoreFuture ... done
[18:01:12.445] signalConditionsASAP(MulticoreFuture, pos=1) ...
[18:01:12.445] - nx: 2
[18:01:12.446] - relay: TRUE
[18:01:12.446] - stdout: TRUE
[18:01:12.446] - signal: TRUE
[18:01:12.446] - resignal: FALSE
[18:01:12.447] - force: TRUE
[18:01:12.447] - relayed: [n=2] FALSE, FALSE
[18:01:12.447] - queued futures: [n=2] FALSE, FALSE
[18:01:12.448]  - until=1
[18:01:12.448]  - relaying element #1
[18:01:12.448] result() for MulticoreFuture ...
[18:01:12.449] result() for MulticoreFuture ... done
[18:01:12.449] result() for MulticoreFuture ...
[18:01:12.449] result() for MulticoreFuture ... done
[18:01:12.450] result() for MulticoreFuture ...
[18:01:12.450] result() for MulticoreFuture ... done
[18:01:12.450] result() for MulticoreFuture ...
[18:01:12.451] result() for MulticoreFuture ... done
[18:01:12.451] - relayed: [n=2] TRUE, FALSE
[18:01:12.451] - queued futures: [n=2] TRUE, FALSE
[18:01:12.452] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[18:01:12.452]  length: 1 (resolved future 1)
[18:01:12.453] Future #2
[18:01:12.453] result() for MulticoreFuture ...
[18:01:12.455] result() for MulticoreFuture ...
[18:01:12.455] result() for MulticoreFuture ... done
[18:01:12.455] result() for MulticoreFuture ... done
[18:01:12.456] result() for MulticoreFuture ...
[18:01:12.456] result() for MulticoreFuture ... done
[18:01:12.456] signalConditionsASAP(MulticoreFuture, pos=2) ...
[18:01:12.457] - nx: 2
[18:01:12.457] - relay: TRUE
[18:01:12.457] - stdout: TRUE
[18:01:12.457] - signal: TRUE
[18:01:12.458] - resignal: FALSE
[18:01:12.458] - force: TRUE
[18:01:12.458] - relayed: [n=2] TRUE, FALSE
[18:01:12.458] - queued futures: [n=2] TRUE, FALSE
[18:01:12.459]  - until=2
[18:01:12.459]  - relaying element #2
[18:01:12.459] result() for MulticoreFuture ...
[18:01:12.459] result() for MulticoreFuture ... done
[18:01:12.460] result() for MulticoreFuture ...
[18:01:12.460] result() for MulticoreFuture ... done
[18:01:12.460] result() for MulticoreFuture ...
[18:01:12.460] result() for MulticoreFuture ... done
[18:01:12.461] result() for MulticoreFuture ...
[18:01:12.461] result() for MulticoreFuture ... done
[18:01:12.461] - relayed: [n=2] TRUE, TRUE
[18:01:12.461] - queued futures: [n=2] TRUE, TRUE
[18:01:12.462] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[18:01:12.462]  length: 0 (resolved future 2)
[18:01:12.462] Relaying remaining futures
[18:01:12.462] signalConditionsASAP(NULL, pos=0) ...
[18:01:12.462] - nx: 2
[18:01:12.463] - relay: TRUE
[18:01:12.463] - stdout: TRUE
[18:01:12.463] - signal: TRUE
[18:01:12.463] - resignal: FALSE
[18:01:12.463] - force: TRUE
[18:01:12.464] - relayed: [n=2] TRUE, TRUE
[18:01:12.464] - queued futures: [n=2] TRUE, TRUE
 - flush all
[18:01:12.464] - relayed: [n=2] TRUE, TRUE
[18:01:12.464] - queued futures: [n=2] TRUE, TRUE
[18:01:12.465] signalConditionsASAP(NULL, pos=0) ... done
[18:01:12.465] resolve() on list ... DONE
[18:01:12.465] result() for MulticoreFuture ...
[18:01:12.465] result() for MulticoreFuture ... done
[18:01:12.466] result() for MulticoreFuture ...
[18:01:12.466] result() for MulticoreFuture ... done
[18:01:12.466] result() for MulticoreFuture ...
[18:01:12.466] result() for MulticoreFuture ... done
[18:01:12.467] result() for MulticoreFuture ...
[18:01:12.467] result() for MulticoreFuture ... done
[18:01:12.467]  - Number of value chunks collected: 2
[18:01:12.467] Resolving 2 futures (chunks) ... DONE
[18:01:12.467] Reducing values from 2 chunks ...
[18:01:12.468]  - Number of values collected after concatenation: 5
[18:01:12.468]  - Number of values expected: 5
[18:01:12.468] Reducing values from 2 chunks ... DONE
[18:01:12.468] future_lapply() ... DONE
[18:01:12.469] plan(): Setting new future strategy stack:
[18:01:12.469] List of future strategies:
[18:01:12.469] 1. sequential:
[18:01:12.469]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:12.469]    - tweaked: FALSE
[18:01:12.469]    - call: plan(sequential)
[18:01:12.471] plan(): nbrOfWorkers() = 1
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[18:01:12.472] plan(): Setting new future strategy stack:
[18:01:12.472] List of future strategies:
[18:01:12.472] 1. multisession:
[18:01:12.472]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:01:12.472]    - tweaked: FALSE
[18:01:12.472]    - call: plan(strategy)
[18:01:12.473] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[18:01:12.473] multisession:
[18:01:12.473] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:01:12.473] - tweaked: FALSE
[18:01:12.473] - call: plan(strategy)
[18:01:12.483] getGlobalsAndPackages() ...
[18:01:12.484] Not searching for globals
[18:01:12.484] - globals: [0] <none>
[18:01:12.484] getGlobalsAndPackages() ... DONE
[18:01:12.485] [local output] makeClusterPSOCK() ...
[18:01:12.553] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[18:01:12.554] [local output] Base port: 11322
[18:01:12.555] [local output] Getting setup options for 2 cluster nodes ...
[18:01:12.555] [local output]  - Node 1 of 2 ...
[18:01:12.556] [local output] localMachine=TRUE => revtunnel=FALSE

[18:01:12.557] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpTMmi8X/worker.rank=1.parallelly.parent=314749.4cd7d1cea837f.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpTMmi8X/worker.rank=1.parallelly.parent=314749.4cd7d1cea837f.pid")'’
[18:01:12.819] - Possible to infer worker's PID: TRUE
[18:01:12.820] [local output] Rscript port: 11322

[18:01:12.820] [local output]  - Node 2 of 2 ...
[18:01:12.821] [local output] localMachine=TRUE => revtunnel=FALSE

[18:01:12.822] [local output] Rscript port: 11322

[18:01:12.823] [local output] Getting setup options for 2 cluster nodes ... done
[18:01:12.823] [local output]  - Parallel setup requested for some PSOCK nodes
[18:01:12.824] [local output] Setting up PSOCK nodes in parallel
[18:01:12.824] List of 36
[18:01:12.824]  $ worker          : chr "localhost"
[18:01:12.824]   ..- attr(*, "localhost")= logi TRUE
[18:01:12.824]  $ master          : chr "localhost"
[18:01:12.824]  $ port            : int 11322
[18:01:12.824]  $ connectTimeout  : num 120
[18:01:12.824]  $ timeout         : num 2592000
[18:01:12.824]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[18:01:12.824]  $ homogeneous     : logi TRUE
[18:01:12.824]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[18:01:12.824]  $ rscript_envs    : NULL
[18:01:12.824]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:01:12.824]  $ rscript_startup : NULL
[18:01:12.824]  $ rscript_sh      : chr "sh"
[18:01:12.824]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:01:12.824]  $ methods         : logi TRUE
[18:01:12.824]  $ socketOptions   : chr "no-delay"
[18:01:12.824]  $ useXDR          : logi FALSE
[18:01:12.824]  $ outfile         : chr "/dev/null"
[18:01:12.824]  $ renice          : int NA
[18:01:12.824]  $ rshcmd          : NULL
[18:01:12.824]  $ user            : chr(0) 
[18:01:12.824]  $ revtunnel       : logi FALSE
[18:01:12.824]  $ rshlogfile      : NULL
[18:01:12.824]  $ rshopts         : chr(0) 
[18:01:12.824]  $ rank            : int 1
[18:01:12.824]  $ manual          : logi FALSE
[18:01:12.824]  $ dryrun          : logi FALSE
[18:01:12.824]  $ quiet           : logi FALSE
[18:01:12.824]  $ setup_strategy  : chr "parallel"
[18:01:12.824]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:01:12.824]  $ pidfile         : chr "/tmp/RtmpTMmi8X/worker.rank=1.parallelly.parent=314749.4cd7d1cea837f.pid"
[18:01:12.824]  $ rshcmd_label    : NULL
[18:01:12.824]  $ rsh_call        : NULL
[18:01:12.824]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:01:12.824]  $ localMachine    : logi TRUE
[18:01:12.824]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[18:01:12.824]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[18:01:12.824]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[18:01:12.824]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[18:01:12.824]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[18:01:12.824]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[18:01:12.824]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[18:01:12.824]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[18:01:12.824]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[18:01:12.824]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[18:01:12.824]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[18:01:12.824]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[18:01:12.824]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[18:01:12.824]  $ arguments       :List of 28
[18:01:12.824]   ..$ worker          : chr "localhost"
[18:01:12.824]   ..$ master          : NULL
[18:01:12.824]   ..$ port            : int 11322
[18:01:12.824]   ..$ connectTimeout  : num 120
[18:01:12.824]   ..$ timeout         : num 2592000
[18:01:12.824]   ..$ rscript         : NULL
[18:01:12.824]   ..$ homogeneous     : NULL
[18:01:12.824]   ..$ rscript_args    : NULL
[18:01:12.824]   ..$ rscript_envs    : NULL
[18:01:12.824]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:01:12.824]   ..$ rscript_startup : NULL
[18:01:12.824]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[18:01:12.824]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:01:12.824]   ..$ methods         : logi TRUE
[18:01:12.824]   ..$ socketOptions   : chr "no-delay"
[18:01:12.824]   ..$ useXDR          : logi FALSE
[18:01:12.824]   ..$ outfile         : chr "/dev/null"
[18:01:12.824]   ..$ renice          : int NA
[18:01:12.824]   ..$ rshcmd          : NULL
[18:01:12.824]   ..$ user            : NULL
[18:01:12.824]   ..$ revtunnel       : logi NA
[18:01:12.824]   ..$ rshlogfile      : NULL
[18:01:12.824]   ..$ rshopts         : NULL
[18:01:12.824]   ..$ rank            : int 1
[18:01:12.824]   ..$ manual          : logi FALSE
[18:01:12.824]   ..$ dryrun          : logi FALSE
[18:01:12.824]   ..$ quiet           : logi FALSE
[18:01:12.824]   ..$ setup_strategy  : chr "parallel"
[18:01:12.824]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[18:01:12.860] [local output] System call to launch all workers:
[18:01:12.860] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpTMmi8X/worker.rank=1.parallelly.parent=314749.4cd7d1cea837f.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11322 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[18:01:12.861] [local output] Starting PSOCK main server
[18:01:12.869] [local output] Workers launched
[18:01:12.869] [local output] Waiting for workers to connect back
[18:01:12.869]  - [local output] 0 workers out of 2 ready
[18:01:13.247]  - [local output] 0 workers out of 2 ready
[18:01:13.247]  - [local output] 1 workers out of 2 ready
[18:01:13.255]  - [local output] 1 workers out of 2 ready
[18:01:13.255]  - [local output] 2 workers out of 2 ready
[18:01:13.255] [local output] Launching of workers completed
[18:01:13.256] [local output] Collecting session information from workers
[18:01:13.257] [local output]  - Worker #1 of 2
[18:01:13.258] [local output]  - Worker #2 of 2
[18:01:13.259] [local output] makeClusterPSOCK() ... done
[18:01:13.278] Packages needed by the future expression (n = 0): <none>
[18:01:13.278] Packages needed by future strategies (n = 0): <none>
[18:01:13.279] {
[18:01:13.279]     {
[18:01:13.279]         {
[18:01:13.279]             ...future.startTime <- base::Sys.time()
[18:01:13.279]             {
[18:01:13.279]                 {
[18:01:13.279]                   {
[18:01:13.279]                     {
[18:01:13.279]                       base::local({
[18:01:13.279]                         has_future <- base::requireNamespace("future", 
[18:01:13.279]                           quietly = TRUE)
[18:01:13.279]                         if (has_future) {
[18:01:13.279]                           ns <- base::getNamespace("future")
[18:01:13.279]                           version <- ns[[".package"]][["version"]]
[18:01:13.279]                           if (is.null(version)) 
[18:01:13.279]                             version <- utils::packageVersion("future")
[18:01:13.279]                         }
[18:01:13.279]                         else {
[18:01:13.279]                           version <- NULL
[18:01:13.279]                         }
[18:01:13.279]                         if (!has_future || version < "1.8.0") {
[18:01:13.279]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:13.279]                             "", base::R.version$version.string), 
[18:01:13.279]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:13.279]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:13.279]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:13.279]                               "release", "version")], collapse = " "), 
[18:01:13.279]                             hostname = base::Sys.info()[["nodename"]])
[18:01:13.279]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:13.279]                             info)
[18:01:13.279]                           info <- base::paste(info, collapse = "; ")
[18:01:13.279]                           if (!has_future) {
[18:01:13.279]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:13.279]                               info)
[18:01:13.279]                           }
[18:01:13.279]                           else {
[18:01:13.279]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:13.279]                               info, version)
[18:01:13.279]                           }
[18:01:13.279]                           base::stop(msg)
[18:01:13.279]                         }
[18:01:13.279]                       })
[18:01:13.279]                     }
[18:01:13.279]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:13.279]                     base::options(mc.cores = 1L)
[18:01:13.279]                   }
[18:01:13.279]                   ...future.strategy.old <- future::plan("list")
[18:01:13.279]                   options(future.plan = NULL)
[18:01:13.279]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:13.279]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:13.279]                 }
[18:01:13.279]                 ...future.workdir <- getwd()
[18:01:13.279]             }
[18:01:13.279]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:13.279]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:13.279]         }
[18:01:13.279]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:13.279]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:01:13.279]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:13.279]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:13.279]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:13.279]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:13.279]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:13.279]             base::names(...future.oldOptions))
[18:01:13.279]     }
[18:01:13.279]     if (FALSE) {
[18:01:13.279]     }
[18:01:13.279]     else {
[18:01:13.279]         if (TRUE) {
[18:01:13.279]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:13.279]                 open = "w")
[18:01:13.279]         }
[18:01:13.279]         else {
[18:01:13.279]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:13.279]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:13.279]         }
[18:01:13.279]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:13.279]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:13.279]             base::sink(type = "output", split = FALSE)
[18:01:13.279]             base::close(...future.stdout)
[18:01:13.279]         }, add = TRUE)
[18:01:13.279]     }
[18:01:13.279]     ...future.frame <- base::sys.nframe()
[18:01:13.279]     ...future.conditions <- base::list()
[18:01:13.279]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:13.279]     if (FALSE) {
[18:01:13.279]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:13.279]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:13.279]     }
[18:01:13.279]     ...future.result <- base::tryCatch({
[18:01:13.279]         base::withCallingHandlers({
[18:01:13.279]             ...future.value <- base::withVisible(base::local({
[18:01:13.279]                 ...future.makeSendCondition <- base::local({
[18:01:13.279]                   sendCondition <- NULL
[18:01:13.279]                   function(frame = 1L) {
[18:01:13.279]                     if (is.function(sendCondition)) 
[18:01:13.279]                       return(sendCondition)
[18:01:13.279]                     ns <- getNamespace("parallel")
[18:01:13.279]                     if (exists("sendData", mode = "function", 
[18:01:13.279]                       envir = ns)) {
[18:01:13.279]                       parallel_sendData <- get("sendData", mode = "function", 
[18:01:13.279]                         envir = ns)
[18:01:13.279]                       envir <- sys.frame(frame)
[18:01:13.279]                       master <- NULL
[18:01:13.279]                       while (!identical(envir, .GlobalEnv) && 
[18:01:13.279]                         !identical(envir, emptyenv())) {
[18:01:13.279]                         if (exists("master", mode = "list", envir = envir, 
[18:01:13.279]                           inherits = FALSE)) {
[18:01:13.279]                           master <- get("master", mode = "list", 
[18:01:13.279]                             envir = envir, inherits = FALSE)
[18:01:13.279]                           if (inherits(master, c("SOCKnode", 
[18:01:13.279]                             "SOCK0node"))) {
[18:01:13.279]                             sendCondition <<- function(cond) {
[18:01:13.279]                               data <- list(type = "VALUE", value = cond, 
[18:01:13.279]                                 success = TRUE)
[18:01:13.279]                               parallel_sendData(master, data)
[18:01:13.279]                             }
[18:01:13.279]                             return(sendCondition)
[18:01:13.279]                           }
[18:01:13.279]                         }
[18:01:13.279]                         frame <- frame + 1L
[18:01:13.279]                         envir <- sys.frame(frame)
[18:01:13.279]                       }
[18:01:13.279]                     }
[18:01:13.279]                     sendCondition <<- function(cond) NULL
[18:01:13.279]                   }
[18:01:13.279]                 })
[18:01:13.279]                 withCallingHandlers({
[18:01:13.279]                   NA
[18:01:13.279]                 }, immediateCondition = function(cond) {
[18:01:13.279]                   sendCondition <- ...future.makeSendCondition()
[18:01:13.279]                   sendCondition(cond)
[18:01:13.279]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:13.279]                   {
[18:01:13.279]                     inherits <- base::inherits
[18:01:13.279]                     invokeRestart <- base::invokeRestart
[18:01:13.279]                     is.null <- base::is.null
[18:01:13.279]                     muffled <- FALSE
[18:01:13.279]                     if (inherits(cond, "message")) {
[18:01:13.279]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:13.279]                       if (muffled) 
[18:01:13.279]                         invokeRestart("muffleMessage")
[18:01:13.279]                     }
[18:01:13.279]                     else if (inherits(cond, "warning")) {
[18:01:13.279]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:13.279]                       if (muffled) 
[18:01:13.279]                         invokeRestart("muffleWarning")
[18:01:13.279]                     }
[18:01:13.279]                     else if (inherits(cond, "condition")) {
[18:01:13.279]                       if (!is.null(pattern)) {
[18:01:13.279]                         computeRestarts <- base::computeRestarts
[18:01:13.279]                         grepl <- base::grepl
[18:01:13.279]                         restarts <- computeRestarts(cond)
[18:01:13.279]                         for (restart in restarts) {
[18:01:13.279]                           name <- restart$name
[18:01:13.279]                           if (is.null(name)) 
[18:01:13.279]                             next
[18:01:13.279]                           if (!grepl(pattern, name)) 
[18:01:13.279]                             next
[18:01:13.279]                           invokeRestart(restart)
[18:01:13.279]                           muffled <- TRUE
[18:01:13.279]                           break
[18:01:13.279]                         }
[18:01:13.279]                       }
[18:01:13.279]                     }
[18:01:13.279]                     invisible(muffled)
[18:01:13.279]                   }
[18:01:13.279]                   muffleCondition(cond)
[18:01:13.279]                 })
[18:01:13.279]             }))
[18:01:13.279]             future::FutureResult(value = ...future.value$value, 
[18:01:13.279]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:13.279]                   ...future.rng), globalenv = if (FALSE) 
[18:01:13.279]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:13.279]                     ...future.globalenv.names))
[18:01:13.279]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:13.279]         }, condition = base::local({
[18:01:13.279]             c <- base::c
[18:01:13.279]             inherits <- base::inherits
[18:01:13.279]             invokeRestart <- base::invokeRestart
[18:01:13.279]             length <- base::length
[18:01:13.279]             list <- base::list
[18:01:13.279]             seq.int <- base::seq.int
[18:01:13.279]             signalCondition <- base::signalCondition
[18:01:13.279]             sys.calls <- base::sys.calls
[18:01:13.279]             `[[` <- base::`[[`
[18:01:13.279]             `+` <- base::`+`
[18:01:13.279]             `<<-` <- base::`<<-`
[18:01:13.279]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:13.279]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:13.279]                   3L)]
[18:01:13.279]             }
[18:01:13.279]             function(cond) {
[18:01:13.279]                 is_error <- inherits(cond, "error")
[18:01:13.279]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:13.279]                   NULL)
[18:01:13.279]                 if (is_error) {
[18:01:13.279]                   sessionInformation <- function() {
[18:01:13.279]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:13.279]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:13.279]                       search = base::search(), system = base::Sys.info())
[18:01:13.279]                   }
[18:01:13.279]                   ...future.conditions[[length(...future.conditions) + 
[18:01:13.279]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:13.279]                     cond$call), session = sessionInformation(), 
[18:01:13.279]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:13.279]                   signalCondition(cond)
[18:01:13.279]                 }
[18:01:13.279]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:13.279]                 "immediateCondition"))) {
[18:01:13.279]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:13.279]                   ...future.conditions[[length(...future.conditions) + 
[18:01:13.279]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:13.279]                   if (TRUE && !signal) {
[18:01:13.279]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:13.279]                     {
[18:01:13.279]                       inherits <- base::inherits
[18:01:13.279]                       invokeRestart <- base::invokeRestart
[18:01:13.279]                       is.null <- base::is.null
[18:01:13.279]                       muffled <- FALSE
[18:01:13.279]                       if (inherits(cond, "message")) {
[18:01:13.279]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:13.279]                         if (muffled) 
[18:01:13.279]                           invokeRestart("muffleMessage")
[18:01:13.279]                       }
[18:01:13.279]                       else if (inherits(cond, "warning")) {
[18:01:13.279]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:13.279]                         if (muffled) 
[18:01:13.279]                           invokeRestart("muffleWarning")
[18:01:13.279]                       }
[18:01:13.279]                       else if (inherits(cond, "condition")) {
[18:01:13.279]                         if (!is.null(pattern)) {
[18:01:13.279]                           computeRestarts <- base::computeRestarts
[18:01:13.279]                           grepl <- base::grepl
[18:01:13.279]                           restarts <- computeRestarts(cond)
[18:01:13.279]                           for (restart in restarts) {
[18:01:13.279]                             name <- restart$name
[18:01:13.279]                             if (is.null(name)) 
[18:01:13.279]                               next
[18:01:13.279]                             if (!grepl(pattern, name)) 
[18:01:13.279]                               next
[18:01:13.279]                             invokeRestart(restart)
[18:01:13.279]                             muffled <- TRUE
[18:01:13.279]                             break
[18:01:13.279]                           }
[18:01:13.279]                         }
[18:01:13.279]                       }
[18:01:13.279]                       invisible(muffled)
[18:01:13.279]                     }
[18:01:13.279]                     muffleCondition(cond, pattern = "^muffle")
[18:01:13.279]                   }
[18:01:13.279]                 }
[18:01:13.279]                 else {
[18:01:13.279]                   if (TRUE) {
[18:01:13.279]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:13.279]                     {
[18:01:13.279]                       inherits <- base::inherits
[18:01:13.279]                       invokeRestart <- base::invokeRestart
[18:01:13.279]                       is.null <- base::is.null
[18:01:13.279]                       muffled <- FALSE
[18:01:13.279]                       if (inherits(cond, "message")) {
[18:01:13.279]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:13.279]                         if (muffled) 
[18:01:13.279]                           invokeRestart("muffleMessage")
[18:01:13.279]                       }
[18:01:13.279]                       else if (inherits(cond, "warning")) {
[18:01:13.279]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:13.279]                         if (muffled) 
[18:01:13.279]                           invokeRestart("muffleWarning")
[18:01:13.279]                       }
[18:01:13.279]                       else if (inherits(cond, "condition")) {
[18:01:13.279]                         if (!is.null(pattern)) {
[18:01:13.279]                           computeRestarts <- base::computeRestarts
[18:01:13.279]                           grepl <- base::grepl
[18:01:13.279]                           restarts <- computeRestarts(cond)
[18:01:13.279]                           for (restart in restarts) {
[18:01:13.279]                             name <- restart$name
[18:01:13.279]                             if (is.null(name)) 
[18:01:13.279]                               next
[18:01:13.279]                             if (!grepl(pattern, name)) 
[18:01:13.279]                               next
[18:01:13.279]                             invokeRestart(restart)
[18:01:13.279]                             muffled <- TRUE
[18:01:13.279]                             break
[18:01:13.279]                           }
[18:01:13.279]                         }
[18:01:13.279]                       }
[18:01:13.279]                       invisible(muffled)
[18:01:13.279]                     }
[18:01:13.279]                     muffleCondition(cond, pattern = "^muffle")
[18:01:13.279]                   }
[18:01:13.279]                 }
[18:01:13.279]             }
[18:01:13.279]         }))
[18:01:13.279]     }, error = function(ex) {
[18:01:13.279]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:13.279]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:13.279]                 ...future.rng), started = ...future.startTime, 
[18:01:13.279]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:13.279]             version = "1.8"), class = "FutureResult")
[18:01:13.279]     }, finally = {
[18:01:13.279]         if (!identical(...future.workdir, getwd())) 
[18:01:13.279]             setwd(...future.workdir)
[18:01:13.279]         {
[18:01:13.279]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:13.279]                 ...future.oldOptions$nwarnings <- NULL
[18:01:13.279]             }
[18:01:13.279]             base::options(...future.oldOptions)
[18:01:13.279]             if (.Platform$OS.type == "windows") {
[18:01:13.279]                 old_names <- names(...future.oldEnvVars)
[18:01:13.279]                 envs <- base::Sys.getenv()
[18:01:13.279]                 names <- names(envs)
[18:01:13.279]                 common <- intersect(names, old_names)
[18:01:13.279]                 added <- setdiff(names, old_names)
[18:01:13.279]                 removed <- setdiff(old_names, names)
[18:01:13.279]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:13.279]                   envs[common]]
[18:01:13.279]                 NAMES <- toupper(changed)
[18:01:13.279]                 args <- list()
[18:01:13.279]                 for (kk in seq_along(NAMES)) {
[18:01:13.279]                   name <- changed[[kk]]
[18:01:13.279]                   NAME <- NAMES[[kk]]
[18:01:13.279]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:13.279]                     next
[18:01:13.279]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:13.279]                 }
[18:01:13.279]                 NAMES <- toupper(added)
[18:01:13.279]                 for (kk in seq_along(NAMES)) {
[18:01:13.279]                   name <- added[[kk]]
[18:01:13.279]                   NAME <- NAMES[[kk]]
[18:01:13.279]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:13.279]                     next
[18:01:13.279]                   args[[name]] <- ""
[18:01:13.279]                 }
[18:01:13.279]                 NAMES <- toupper(removed)
[18:01:13.279]                 for (kk in seq_along(NAMES)) {
[18:01:13.279]                   name <- removed[[kk]]
[18:01:13.279]                   NAME <- NAMES[[kk]]
[18:01:13.279]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:13.279]                     next
[18:01:13.279]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:13.279]                 }
[18:01:13.279]                 if (length(args) > 0) 
[18:01:13.279]                   base::do.call(base::Sys.setenv, args = args)
[18:01:13.279]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:13.279]             }
[18:01:13.279]             else {
[18:01:13.279]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:13.279]             }
[18:01:13.279]             {
[18:01:13.279]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:13.279]                   0L) {
[18:01:13.279]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:13.279]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:13.279]                   base::options(opts)
[18:01:13.279]                 }
[18:01:13.279]                 {
[18:01:13.279]                   {
[18:01:13.279]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:13.279]                     NULL
[18:01:13.279]                   }
[18:01:13.279]                   options(future.plan = NULL)
[18:01:13.279]                   if (is.na(NA_character_)) 
[18:01:13.279]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:13.279]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:13.279]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:13.279]                     .init = FALSE)
[18:01:13.279]                 }
[18:01:13.279]             }
[18:01:13.279]         }
[18:01:13.279]     })
[18:01:13.279]     if (TRUE) {
[18:01:13.279]         base::sink(type = "output", split = FALSE)
[18:01:13.279]         if (TRUE) {
[18:01:13.279]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:13.279]         }
[18:01:13.279]         else {
[18:01:13.279]             ...future.result["stdout"] <- base::list(NULL)
[18:01:13.279]         }
[18:01:13.279]         base::close(...future.stdout)
[18:01:13.279]         ...future.stdout <- NULL
[18:01:13.279]     }
[18:01:13.279]     ...future.result$conditions <- ...future.conditions
[18:01:13.279]     ...future.result$finished <- base::Sys.time()
[18:01:13.279]     ...future.result
[18:01:13.279] }
[18:01:13.381] MultisessionFuture started
[18:01:13.382] result() for ClusterFuture ...
[18:01:13.383] receiveMessageFromWorker() for ClusterFuture ...
[18:01:13.383] - Validating connection of MultisessionFuture
[18:01:13.447] - received message: FutureResult
[18:01:13.448] - Received FutureResult
[18:01:13.448] - Erased future from FutureRegistry
[18:01:13.448] result() for ClusterFuture ...
[18:01:13.449] - result already collected: FutureResult
[18:01:13.449] result() for ClusterFuture ... done
[18:01:13.449] receiveMessageFromWorker() for ClusterFuture ... done
[18:01:13.450] result() for ClusterFuture ... done
[18:01:13.450] result() for ClusterFuture ...
[18:01:13.450] - result already collected: FutureResult
[18:01:13.450] result() for ClusterFuture ... done
[18:01:13.451] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[18:01:13.458] plan(): nbrOfWorkers() = 2
[18:01:13.459] future_lapply() ...
[18:01:13.460] Generating random seeds ...
[18:01:13.460] Generating random seed streams for 5 elements ...
[18:01:13.460] Generating random seed streams for 5 elements ... DONE
[18:01:13.461] Generating random seeds ... DONE
[18:01:13.461] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[18:01:13.468] Number of chunks: 2
[18:01:13.469] getGlobalsAndPackagesXApply() ...
[18:01:13.469]  - future.globals: TRUE
[18:01:13.469] getGlobalsAndPackages() ...
[18:01:13.469] Searching for globals...
[18:01:13.472] - globals found: [2] ‘FUN’, ‘sample’
[18:01:13.473] Searching for globals ... DONE
[18:01:13.473] Resolving globals: FALSE
[18:01:13.474] The total size of the 1 globals is 616 bytes (616 bytes)
[18:01:13.475] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[18:01:13.475] - globals: [1] ‘FUN’
[18:01:13.475] 
[18:01:13.476] getGlobalsAndPackages() ... DONE
[18:01:13.476]  - globals found/used: [n=1] ‘FUN’
[18:01:13.476]  - needed namespaces: [n=0] 
[18:01:13.476] Finding globals ... DONE
[18:01:13.477]  - use_args: TRUE
[18:01:13.477]  - Getting '...' globals ...
[18:01:13.478] resolve() on list ...
[18:01:13.478]  recursive: 0
[18:01:13.478]  length: 1
[18:01:13.478]  elements: ‘...’
[18:01:13.479]  length: 0 (resolved future 1)
[18:01:13.479] resolve() on list ... DONE
[18:01:13.479]    - '...' content: [n=0] 
[18:01:13.479] List of 1
[18:01:13.479]  $ ...: list()
[18:01:13.479]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:13.479]  - attr(*, "where")=List of 1
[18:01:13.479]   ..$ ...:<environment: 0x635eb6236710> 
[18:01:13.479]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:13.479]  - attr(*, "resolved")= logi TRUE
[18:01:13.479]  - attr(*, "total_size")= num NA
[18:01:13.486]  - Getting '...' globals ... DONE
[18:01:13.487] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[18:01:13.487] List of 2
[18:01:13.487]  $ ...future.FUN:function (...)  
[18:01:13.487]  $ ...          : list()
[18:01:13.487]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:13.487]  - attr(*, "where")=List of 2
[18:01:13.487]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[18:01:13.487]   ..$ ...          :<environment: 0x635eb6236710> 
[18:01:13.487]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:13.487]  - attr(*, "resolved")= logi FALSE
[18:01:13.487]  - attr(*, "total_size")= num 616
[18:01:13.494] Packages to be attached in all futures: [n=0] 
[18:01:13.494] getGlobalsAndPackagesXApply() ... DONE
[18:01:13.495] Number of futures (= number of chunks): 2
[18:01:13.495] Launching 2 futures (chunks) ...
[18:01:13.495] Chunk #1 of 2 ...
[18:01:13.496]  - Finding globals in 'X' for chunk #1 ...
[18:01:13.496] getGlobalsAndPackages() ...
[18:01:13.496] Searching for globals...
[18:01:13.497] 
[18:01:13.497] Searching for globals ... DONE
[18:01:13.497] - globals: [0] <none>
[18:01:13.497] getGlobalsAndPackages() ... DONE
[18:01:13.498]    + additional globals found: [n=0] 
[18:01:13.498]    + additional namespaces needed: [n=0] 
[18:01:13.498]  - Finding globals in 'X' for chunk #1 ... DONE
[18:01:13.498]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:13.499]  - seeds: [2] <seeds>
[18:01:13.499]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:13.499] getGlobalsAndPackages() ...
[18:01:13.500] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:13.500] Resolving globals: FALSE
[18:01:13.500] Tweak future expression to call with '...' arguments ...
[18:01:13.500] {
[18:01:13.500]     do.call(function(...) {
[18:01:13.500]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:13.500]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:13.500]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:13.500]             on.exit(options(oopts), add = TRUE)
[18:01:13.500]         }
[18:01:13.500]         {
[18:01:13.500]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:13.500]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:13.500]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:13.500]                   envir = globalenv(), inherits = FALSE)
[18:01:13.500]                 ...future.FUN(...future.X_jj, ...)
[18:01:13.500]             })
[18:01:13.500]         }
[18:01:13.500]     }, args = future.call.arguments)
[18:01:13.500] }
[18:01:13.501] Tweak future expression to call with '...' arguments ... DONE
[18:01:13.502] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:13.502] 
[18:01:13.503] getGlobalsAndPackages() ... DONE
[18:01:13.504] run() for ‘Future’ ...
[18:01:13.504] - state: ‘created’
[18:01:13.504] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:01:13.530] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:13.531] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:01:13.531]   - Field: ‘node’
[18:01:13.531]   - Field: ‘label’
[18:01:13.531]   - Field: ‘local’
[18:01:13.532]   - Field: ‘owner’
[18:01:13.532]   - Field: ‘envir’
[18:01:13.532]   - Field: ‘workers’
[18:01:13.532]   - Field: ‘packages’
[18:01:13.532]   - Field: ‘gc’
[18:01:13.533]   - Field: ‘conditions’
[18:01:13.533]   - Field: ‘persistent’
[18:01:13.533]   - Field: ‘expr’
[18:01:13.533]   - Field: ‘uuid’
[18:01:13.534]   - Field: ‘seed’
[18:01:13.534]   - Field: ‘version’
[18:01:13.534]   - Field: ‘result’
[18:01:13.534]   - Field: ‘asynchronous’
[18:01:13.535]   - Field: ‘calls’
[18:01:13.535]   - Field: ‘globals’
[18:01:13.535]   - Field: ‘stdout’
[18:01:13.535]   - Field: ‘earlySignal’
[18:01:13.536]   - Field: ‘lazy’
[18:01:13.536]   - Field: ‘state’
[18:01:13.536] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:01:13.536] - Launch lazy future ...
[18:01:13.537] Packages needed by the future expression (n = 0): <none>
[18:01:13.537] Packages needed by future strategies (n = 0): <none>
[18:01:13.538] {
[18:01:13.538]     {
[18:01:13.538]         {
[18:01:13.538]             ...future.startTime <- base::Sys.time()
[18:01:13.538]             {
[18:01:13.538]                 {
[18:01:13.538]                   {
[18:01:13.538]                     {
[18:01:13.538]                       base::local({
[18:01:13.538]                         has_future <- base::requireNamespace("future", 
[18:01:13.538]                           quietly = TRUE)
[18:01:13.538]                         if (has_future) {
[18:01:13.538]                           ns <- base::getNamespace("future")
[18:01:13.538]                           version <- ns[[".package"]][["version"]]
[18:01:13.538]                           if (is.null(version)) 
[18:01:13.538]                             version <- utils::packageVersion("future")
[18:01:13.538]                         }
[18:01:13.538]                         else {
[18:01:13.538]                           version <- NULL
[18:01:13.538]                         }
[18:01:13.538]                         if (!has_future || version < "1.8.0") {
[18:01:13.538]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:13.538]                             "", base::R.version$version.string), 
[18:01:13.538]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:13.538]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:13.538]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:13.538]                               "release", "version")], collapse = " "), 
[18:01:13.538]                             hostname = base::Sys.info()[["nodename"]])
[18:01:13.538]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:13.538]                             info)
[18:01:13.538]                           info <- base::paste(info, collapse = "; ")
[18:01:13.538]                           if (!has_future) {
[18:01:13.538]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:13.538]                               info)
[18:01:13.538]                           }
[18:01:13.538]                           else {
[18:01:13.538]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:13.538]                               info, version)
[18:01:13.538]                           }
[18:01:13.538]                           base::stop(msg)
[18:01:13.538]                         }
[18:01:13.538]                       })
[18:01:13.538]                     }
[18:01:13.538]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:13.538]                     base::options(mc.cores = 1L)
[18:01:13.538]                   }
[18:01:13.538]                   ...future.strategy.old <- future::plan("list")
[18:01:13.538]                   options(future.plan = NULL)
[18:01:13.538]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:13.538]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:13.538]                 }
[18:01:13.538]                 ...future.workdir <- getwd()
[18:01:13.538]             }
[18:01:13.538]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:13.538]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:13.538]         }
[18:01:13.538]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:13.538]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:13.538]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:13.538]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:13.538]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:13.538]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:13.538]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:13.538]             base::names(...future.oldOptions))
[18:01:13.538]     }
[18:01:13.538]     if (FALSE) {
[18:01:13.538]     }
[18:01:13.538]     else {
[18:01:13.538]         if (TRUE) {
[18:01:13.538]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:13.538]                 open = "w")
[18:01:13.538]         }
[18:01:13.538]         else {
[18:01:13.538]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:13.538]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:13.538]         }
[18:01:13.538]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:13.538]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:13.538]             base::sink(type = "output", split = FALSE)
[18:01:13.538]             base::close(...future.stdout)
[18:01:13.538]         }, add = TRUE)
[18:01:13.538]     }
[18:01:13.538]     ...future.frame <- base::sys.nframe()
[18:01:13.538]     ...future.conditions <- base::list()
[18:01:13.538]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:13.538]     if (FALSE) {
[18:01:13.538]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:13.538]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:13.538]     }
[18:01:13.538]     ...future.result <- base::tryCatch({
[18:01:13.538]         base::withCallingHandlers({
[18:01:13.538]             ...future.value <- base::withVisible(base::local({
[18:01:13.538]                 ...future.makeSendCondition <- base::local({
[18:01:13.538]                   sendCondition <- NULL
[18:01:13.538]                   function(frame = 1L) {
[18:01:13.538]                     if (is.function(sendCondition)) 
[18:01:13.538]                       return(sendCondition)
[18:01:13.538]                     ns <- getNamespace("parallel")
[18:01:13.538]                     if (exists("sendData", mode = "function", 
[18:01:13.538]                       envir = ns)) {
[18:01:13.538]                       parallel_sendData <- get("sendData", mode = "function", 
[18:01:13.538]                         envir = ns)
[18:01:13.538]                       envir <- sys.frame(frame)
[18:01:13.538]                       master <- NULL
[18:01:13.538]                       while (!identical(envir, .GlobalEnv) && 
[18:01:13.538]                         !identical(envir, emptyenv())) {
[18:01:13.538]                         if (exists("master", mode = "list", envir = envir, 
[18:01:13.538]                           inherits = FALSE)) {
[18:01:13.538]                           master <- get("master", mode = "list", 
[18:01:13.538]                             envir = envir, inherits = FALSE)
[18:01:13.538]                           if (inherits(master, c("SOCKnode", 
[18:01:13.538]                             "SOCK0node"))) {
[18:01:13.538]                             sendCondition <<- function(cond) {
[18:01:13.538]                               data <- list(type = "VALUE", value = cond, 
[18:01:13.538]                                 success = TRUE)
[18:01:13.538]                               parallel_sendData(master, data)
[18:01:13.538]                             }
[18:01:13.538]                             return(sendCondition)
[18:01:13.538]                           }
[18:01:13.538]                         }
[18:01:13.538]                         frame <- frame + 1L
[18:01:13.538]                         envir <- sys.frame(frame)
[18:01:13.538]                       }
[18:01:13.538]                     }
[18:01:13.538]                     sendCondition <<- function(cond) NULL
[18:01:13.538]                   }
[18:01:13.538]                 })
[18:01:13.538]                 withCallingHandlers({
[18:01:13.538]                   {
[18:01:13.538]                     do.call(function(...) {
[18:01:13.538]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:13.538]                       if (!identical(...future.globals.maxSize.org, 
[18:01:13.538]                         ...future.globals.maxSize)) {
[18:01:13.538]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:13.538]                         on.exit(options(oopts), add = TRUE)
[18:01:13.538]                       }
[18:01:13.538]                       {
[18:01:13.538]                         lapply(seq_along(...future.elements_ii), 
[18:01:13.538]                           FUN = function(jj) {
[18:01:13.538]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:13.538]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:13.538]                               envir = globalenv(), inherits = FALSE)
[18:01:13.538]                             ...future.FUN(...future.X_jj, ...)
[18:01:13.538]                           })
[18:01:13.538]                       }
[18:01:13.538]                     }, args = future.call.arguments)
[18:01:13.538]                   }
[18:01:13.538]                 }, immediateCondition = function(cond) {
[18:01:13.538]                   sendCondition <- ...future.makeSendCondition()
[18:01:13.538]                   sendCondition(cond)
[18:01:13.538]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:13.538]                   {
[18:01:13.538]                     inherits <- base::inherits
[18:01:13.538]                     invokeRestart <- base::invokeRestart
[18:01:13.538]                     is.null <- base::is.null
[18:01:13.538]                     muffled <- FALSE
[18:01:13.538]                     if (inherits(cond, "message")) {
[18:01:13.538]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:13.538]                       if (muffled) 
[18:01:13.538]                         invokeRestart("muffleMessage")
[18:01:13.538]                     }
[18:01:13.538]                     else if (inherits(cond, "warning")) {
[18:01:13.538]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:13.538]                       if (muffled) 
[18:01:13.538]                         invokeRestart("muffleWarning")
[18:01:13.538]                     }
[18:01:13.538]                     else if (inherits(cond, "condition")) {
[18:01:13.538]                       if (!is.null(pattern)) {
[18:01:13.538]                         computeRestarts <- base::computeRestarts
[18:01:13.538]                         grepl <- base::grepl
[18:01:13.538]                         restarts <- computeRestarts(cond)
[18:01:13.538]                         for (restart in restarts) {
[18:01:13.538]                           name <- restart$name
[18:01:13.538]                           if (is.null(name)) 
[18:01:13.538]                             next
[18:01:13.538]                           if (!grepl(pattern, name)) 
[18:01:13.538]                             next
[18:01:13.538]                           invokeRestart(restart)
[18:01:13.538]                           muffled <- TRUE
[18:01:13.538]                           break
[18:01:13.538]                         }
[18:01:13.538]                       }
[18:01:13.538]                     }
[18:01:13.538]                     invisible(muffled)
[18:01:13.538]                   }
[18:01:13.538]                   muffleCondition(cond)
[18:01:13.538]                 })
[18:01:13.538]             }))
[18:01:13.538]             future::FutureResult(value = ...future.value$value, 
[18:01:13.538]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:13.538]                   ...future.rng), globalenv = if (FALSE) 
[18:01:13.538]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:13.538]                     ...future.globalenv.names))
[18:01:13.538]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:13.538]         }, condition = base::local({
[18:01:13.538]             c <- base::c
[18:01:13.538]             inherits <- base::inherits
[18:01:13.538]             invokeRestart <- base::invokeRestart
[18:01:13.538]             length <- base::length
[18:01:13.538]             list <- base::list
[18:01:13.538]             seq.int <- base::seq.int
[18:01:13.538]             signalCondition <- base::signalCondition
[18:01:13.538]             sys.calls <- base::sys.calls
[18:01:13.538]             `[[` <- base::`[[`
[18:01:13.538]             `+` <- base::`+`
[18:01:13.538]             `<<-` <- base::`<<-`
[18:01:13.538]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:13.538]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:13.538]                   3L)]
[18:01:13.538]             }
[18:01:13.538]             function(cond) {
[18:01:13.538]                 is_error <- inherits(cond, "error")
[18:01:13.538]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:13.538]                   NULL)
[18:01:13.538]                 if (is_error) {
[18:01:13.538]                   sessionInformation <- function() {
[18:01:13.538]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:13.538]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:13.538]                       search = base::search(), system = base::Sys.info())
[18:01:13.538]                   }
[18:01:13.538]                   ...future.conditions[[length(...future.conditions) + 
[18:01:13.538]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:13.538]                     cond$call), session = sessionInformation(), 
[18:01:13.538]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:13.538]                   signalCondition(cond)
[18:01:13.538]                 }
[18:01:13.538]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:13.538]                 "immediateCondition"))) {
[18:01:13.538]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:13.538]                   ...future.conditions[[length(...future.conditions) + 
[18:01:13.538]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:13.538]                   if (TRUE && !signal) {
[18:01:13.538]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:13.538]                     {
[18:01:13.538]                       inherits <- base::inherits
[18:01:13.538]                       invokeRestart <- base::invokeRestart
[18:01:13.538]                       is.null <- base::is.null
[18:01:13.538]                       muffled <- FALSE
[18:01:13.538]                       if (inherits(cond, "message")) {
[18:01:13.538]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:13.538]                         if (muffled) 
[18:01:13.538]                           invokeRestart("muffleMessage")
[18:01:13.538]                       }
[18:01:13.538]                       else if (inherits(cond, "warning")) {
[18:01:13.538]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:13.538]                         if (muffled) 
[18:01:13.538]                           invokeRestart("muffleWarning")
[18:01:13.538]                       }
[18:01:13.538]                       else if (inherits(cond, "condition")) {
[18:01:13.538]                         if (!is.null(pattern)) {
[18:01:13.538]                           computeRestarts <- base::computeRestarts
[18:01:13.538]                           grepl <- base::grepl
[18:01:13.538]                           restarts <- computeRestarts(cond)
[18:01:13.538]                           for (restart in restarts) {
[18:01:13.538]                             name <- restart$name
[18:01:13.538]                             if (is.null(name)) 
[18:01:13.538]                               next
[18:01:13.538]                             if (!grepl(pattern, name)) 
[18:01:13.538]                               next
[18:01:13.538]                             invokeRestart(restart)
[18:01:13.538]                             muffled <- TRUE
[18:01:13.538]                             break
[18:01:13.538]                           }
[18:01:13.538]                         }
[18:01:13.538]                       }
[18:01:13.538]                       invisible(muffled)
[18:01:13.538]                     }
[18:01:13.538]                     muffleCondition(cond, pattern = "^muffle")
[18:01:13.538]                   }
[18:01:13.538]                 }
[18:01:13.538]                 else {
[18:01:13.538]                   if (TRUE) {
[18:01:13.538]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:13.538]                     {
[18:01:13.538]                       inherits <- base::inherits
[18:01:13.538]                       invokeRestart <- base::invokeRestart
[18:01:13.538]                       is.null <- base::is.null
[18:01:13.538]                       muffled <- FALSE
[18:01:13.538]                       if (inherits(cond, "message")) {
[18:01:13.538]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:13.538]                         if (muffled) 
[18:01:13.538]                           invokeRestart("muffleMessage")
[18:01:13.538]                       }
[18:01:13.538]                       else if (inherits(cond, "warning")) {
[18:01:13.538]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:13.538]                         if (muffled) 
[18:01:13.538]                           invokeRestart("muffleWarning")
[18:01:13.538]                       }
[18:01:13.538]                       else if (inherits(cond, "condition")) {
[18:01:13.538]                         if (!is.null(pattern)) {
[18:01:13.538]                           computeRestarts <- base::computeRestarts
[18:01:13.538]                           grepl <- base::grepl
[18:01:13.538]                           restarts <- computeRestarts(cond)
[18:01:13.538]                           for (restart in restarts) {
[18:01:13.538]                             name <- restart$name
[18:01:13.538]                             if (is.null(name)) 
[18:01:13.538]                               next
[18:01:13.538]                             if (!grepl(pattern, name)) 
[18:01:13.538]                               next
[18:01:13.538]                             invokeRestart(restart)
[18:01:13.538]                             muffled <- TRUE
[18:01:13.538]                             break
[18:01:13.538]                           }
[18:01:13.538]                         }
[18:01:13.538]                       }
[18:01:13.538]                       invisible(muffled)
[18:01:13.538]                     }
[18:01:13.538]                     muffleCondition(cond, pattern = "^muffle")
[18:01:13.538]                   }
[18:01:13.538]                 }
[18:01:13.538]             }
[18:01:13.538]         }))
[18:01:13.538]     }, error = function(ex) {
[18:01:13.538]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:13.538]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:13.538]                 ...future.rng), started = ...future.startTime, 
[18:01:13.538]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:13.538]             version = "1.8"), class = "FutureResult")
[18:01:13.538]     }, finally = {
[18:01:13.538]         if (!identical(...future.workdir, getwd())) 
[18:01:13.538]             setwd(...future.workdir)
[18:01:13.538]         {
[18:01:13.538]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:13.538]                 ...future.oldOptions$nwarnings <- NULL
[18:01:13.538]             }
[18:01:13.538]             base::options(...future.oldOptions)
[18:01:13.538]             if (.Platform$OS.type == "windows") {
[18:01:13.538]                 old_names <- names(...future.oldEnvVars)
[18:01:13.538]                 envs <- base::Sys.getenv()
[18:01:13.538]                 names <- names(envs)
[18:01:13.538]                 common <- intersect(names, old_names)
[18:01:13.538]                 added <- setdiff(names, old_names)
[18:01:13.538]                 removed <- setdiff(old_names, names)
[18:01:13.538]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:13.538]                   envs[common]]
[18:01:13.538]                 NAMES <- toupper(changed)
[18:01:13.538]                 args <- list()
[18:01:13.538]                 for (kk in seq_along(NAMES)) {
[18:01:13.538]                   name <- changed[[kk]]
[18:01:13.538]                   NAME <- NAMES[[kk]]
[18:01:13.538]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:13.538]                     next
[18:01:13.538]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:13.538]                 }
[18:01:13.538]                 NAMES <- toupper(added)
[18:01:13.538]                 for (kk in seq_along(NAMES)) {
[18:01:13.538]                   name <- added[[kk]]
[18:01:13.538]                   NAME <- NAMES[[kk]]
[18:01:13.538]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:13.538]                     next
[18:01:13.538]                   args[[name]] <- ""
[18:01:13.538]                 }
[18:01:13.538]                 NAMES <- toupper(removed)
[18:01:13.538]                 for (kk in seq_along(NAMES)) {
[18:01:13.538]                   name <- removed[[kk]]
[18:01:13.538]                   NAME <- NAMES[[kk]]
[18:01:13.538]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:13.538]                     next
[18:01:13.538]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:13.538]                 }
[18:01:13.538]                 if (length(args) > 0) 
[18:01:13.538]                   base::do.call(base::Sys.setenv, args = args)
[18:01:13.538]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:13.538]             }
[18:01:13.538]             else {
[18:01:13.538]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:13.538]             }
[18:01:13.538]             {
[18:01:13.538]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:13.538]                   0L) {
[18:01:13.538]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:13.538]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:13.538]                   base::options(opts)
[18:01:13.538]                 }
[18:01:13.538]                 {
[18:01:13.538]                   {
[18:01:13.538]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:13.538]                     NULL
[18:01:13.538]                   }
[18:01:13.538]                   options(future.plan = NULL)
[18:01:13.538]                   if (is.na(NA_character_)) 
[18:01:13.538]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:13.538]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:13.538]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:13.538]                     .init = FALSE)
[18:01:13.538]                 }
[18:01:13.538]             }
[18:01:13.538]         }
[18:01:13.538]     })
[18:01:13.538]     if (TRUE) {
[18:01:13.538]         base::sink(type = "output", split = FALSE)
[18:01:13.538]         if (TRUE) {
[18:01:13.538]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:13.538]         }
[18:01:13.538]         else {
[18:01:13.538]             ...future.result["stdout"] <- base::list(NULL)
[18:01:13.538]         }
[18:01:13.538]         base::close(...future.stdout)
[18:01:13.538]         ...future.stdout <- NULL
[18:01:13.538]     }
[18:01:13.538]     ...future.result$conditions <- ...future.conditions
[18:01:13.538]     ...future.result$finished <- base::Sys.time()
[18:01:13.538]     ...future.result
[18:01:13.538] }
[18:01:13.544] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[18:01:13.544] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[18:01:13.546] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[18:01:13.546] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[18:01:13.547] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[18:01:13.547] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[18:01:13.548] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[18:01:13.549] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[18:01:13.550] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[18:01:13.550] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[18:01:13.551] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[18:01:13.551] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[18:01:13.552] MultisessionFuture started
[18:01:13.552] - Launch lazy future ... done
[18:01:13.553] run() for ‘MultisessionFuture’ ... done
[18:01:13.553] Created future:
[18:01:13.553] MultisessionFuture:
[18:01:13.553] Label: ‘future_replicate-1’
[18:01:13.553] Expression:
[18:01:13.553] {
[18:01:13.553]     do.call(function(...) {
[18:01:13.553]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:13.553]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:13.553]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:13.553]             on.exit(options(oopts), add = TRUE)
[18:01:13.553]         }
[18:01:13.553]         {
[18:01:13.553]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:13.553]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:13.553]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:13.553]                   envir = globalenv(), inherits = FALSE)
[18:01:13.553]                 ...future.FUN(...future.X_jj, ...)
[18:01:13.553]             })
[18:01:13.553]         }
[18:01:13.553]     }, args = future.call.arguments)
[18:01:13.553] }
[18:01:13.553] Lazy evaluation: FALSE
[18:01:13.553] Asynchronous evaluation: TRUE
[18:01:13.553] Local evaluation: TRUE
[18:01:13.553] Environment: R_GlobalEnv
[18:01:13.553] Capture standard output: TRUE
[18:01:13.553] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:13.553] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:13.553] Packages: <none>
[18:01:13.553] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:13.553] Resolved: FALSE
[18:01:13.553] Value: <not collected>
[18:01:13.553] Conditions captured: <none>
[18:01:13.553] Early signaling: FALSE
[18:01:13.553] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:13.553] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:13.567] Chunk #1 of 2 ... DONE
[18:01:13.568] Chunk #2 of 2 ...
[18:01:13.568]  - Finding globals in 'X' for chunk #2 ...
[18:01:13.568] getGlobalsAndPackages() ...
[18:01:13.568] Searching for globals...
[18:01:13.569] 
[18:01:13.569] Searching for globals ... DONE
[18:01:13.569] - globals: [0] <none>
[18:01:13.570] getGlobalsAndPackages() ... DONE
[18:01:13.570]    + additional globals found: [n=0] 
[18:01:13.570]    + additional namespaces needed: [n=0] 
[18:01:13.570]  - Finding globals in 'X' for chunk #2 ... DONE
[18:01:13.571]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:13.571]  - seeds: [3] <seeds>
[18:01:13.571]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:13.571] getGlobalsAndPackages() ...
[18:01:13.572] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:13.572] Resolving globals: FALSE
[18:01:13.572] Tweak future expression to call with '...' arguments ...
[18:01:13.572] {
[18:01:13.572]     do.call(function(...) {
[18:01:13.572]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:13.572]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:13.572]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:13.572]             on.exit(options(oopts), add = TRUE)
[18:01:13.572]         }
[18:01:13.572]         {
[18:01:13.572]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:13.572]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:13.572]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:13.572]                   envir = globalenv(), inherits = FALSE)
[18:01:13.572]                 ...future.FUN(...future.X_jj, ...)
[18:01:13.572]             })
[18:01:13.572]         }
[18:01:13.572]     }, args = future.call.arguments)
[18:01:13.572] }
[18:01:13.573] Tweak future expression to call with '...' arguments ... DONE
[18:01:13.574] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:13.574] 
[18:01:13.574] getGlobalsAndPackages() ... DONE
[18:01:13.575] run() for ‘Future’ ...
[18:01:13.575] - state: ‘created’
[18:01:13.575] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:01:13.601] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:13.601] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:01:13.601]   - Field: ‘node’
[18:01:13.602]   - Field: ‘label’
[18:01:13.602]   - Field: ‘local’
[18:01:13.602]   - Field: ‘owner’
[18:01:13.602]   - Field: ‘envir’
[18:01:13.602]   - Field: ‘workers’
[18:01:13.603]   - Field: ‘packages’
[18:01:13.603]   - Field: ‘gc’
[18:01:13.603]   - Field: ‘conditions’
[18:01:13.603]   - Field: ‘persistent’
[18:01:13.604]   - Field: ‘expr’
[18:01:13.604]   - Field: ‘uuid’
[18:01:13.604]   - Field: ‘seed’
[18:01:13.604]   - Field: ‘version’
[18:01:13.605]   - Field: ‘result’
[18:01:13.605]   - Field: ‘asynchronous’
[18:01:13.605]   - Field: ‘calls’
[18:01:13.605]   - Field: ‘globals’
[18:01:13.606]   - Field: ‘stdout’
[18:01:13.606]   - Field: ‘earlySignal’
[18:01:13.606]   - Field: ‘lazy’
[18:01:13.606]   - Field: ‘state’
[18:01:13.606] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:01:13.607] - Launch lazy future ...
[18:01:13.607] Packages needed by the future expression (n = 0): <none>
[18:01:13.608] Packages needed by future strategies (n = 0): <none>
[18:01:13.609] {
[18:01:13.609]     {
[18:01:13.609]         {
[18:01:13.609]             ...future.startTime <- base::Sys.time()
[18:01:13.609]             {
[18:01:13.609]                 {
[18:01:13.609]                   {
[18:01:13.609]                     {
[18:01:13.609]                       base::local({
[18:01:13.609]                         has_future <- base::requireNamespace("future", 
[18:01:13.609]                           quietly = TRUE)
[18:01:13.609]                         if (has_future) {
[18:01:13.609]                           ns <- base::getNamespace("future")
[18:01:13.609]                           version <- ns[[".package"]][["version"]]
[18:01:13.609]                           if (is.null(version)) 
[18:01:13.609]                             version <- utils::packageVersion("future")
[18:01:13.609]                         }
[18:01:13.609]                         else {
[18:01:13.609]                           version <- NULL
[18:01:13.609]                         }
[18:01:13.609]                         if (!has_future || version < "1.8.0") {
[18:01:13.609]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:13.609]                             "", base::R.version$version.string), 
[18:01:13.609]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:13.609]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:13.609]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:13.609]                               "release", "version")], collapse = " "), 
[18:01:13.609]                             hostname = base::Sys.info()[["nodename"]])
[18:01:13.609]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:13.609]                             info)
[18:01:13.609]                           info <- base::paste(info, collapse = "; ")
[18:01:13.609]                           if (!has_future) {
[18:01:13.609]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:13.609]                               info)
[18:01:13.609]                           }
[18:01:13.609]                           else {
[18:01:13.609]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:13.609]                               info, version)
[18:01:13.609]                           }
[18:01:13.609]                           base::stop(msg)
[18:01:13.609]                         }
[18:01:13.609]                       })
[18:01:13.609]                     }
[18:01:13.609]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:13.609]                     base::options(mc.cores = 1L)
[18:01:13.609]                   }
[18:01:13.609]                   ...future.strategy.old <- future::plan("list")
[18:01:13.609]                   options(future.plan = NULL)
[18:01:13.609]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:13.609]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:13.609]                 }
[18:01:13.609]                 ...future.workdir <- getwd()
[18:01:13.609]             }
[18:01:13.609]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:13.609]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:13.609]         }
[18:01:13.609]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:13.609]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:13.609]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:13.609]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:13.609]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:13.609]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:13.609]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:13.609]             base::names(...future.oldOptions))
[18:01:13.609]     }
[18:01:13.609]     if (FALSE) {
[18:01:13.609]     }
[18:01:13.609]     else {
[18:01:13.609]         if (TRUE) {
[18:01:13.609]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:13.609]                 open = "w")
[18:01:13.609]         }
[18:01:13.609]         else {
[18:01:13.609]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:13.609]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:13.609]         }
[18:01:13.609]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:13.609]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:13.609]             base::sink(type = "output", split = FALSE)
[18:01:13.609]             base::close(...future.stdout)
[18:01:13.609]         }, add = TRUE)
[18:01:13.609]     }
[18:01:13.609]     ...future.frame <- base::sys.nframe()
[18:01:13.609]     ...future.conditions <- base::list()
[18:01:13.609]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:13.609]     if (FALSE) {
[18:01:13.609]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:13.609]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:13.609]     }
[18:01:13.609]     ...future.result <- base::tryCatch({
[18:01:13.609]         base::withCallingHandlers({
[18:01:13.609]             ...future.value <- base::withVisible(base::local({
[18:01:13.609]                 ...future.makeSendCondition <- base::local({
[18:01:13.609]                   sendCondition <- NULL
[18:01:13.609]                   function(frame = 1L) {
[18:01:13.609]                     if (is.function(sendCondition)) 
[18:01:13.609]                       return(sendCondition)
[18:01:13.609]                     ns <- getNamespace("parallel")
[18:01:13.609]                     if (exists("sendData", mode = "function", 
[18:01:13.609]                       envir = ns)) {
[18:01:13.609]                       parallel_sendData <- get("sendData", mode = "function", 
[18:01:13.609]                         envir = ns)
[18:01:13.609]                       envir <- sys.frame(frame)
[18:01:13.609]                       master <- NULL
[18:01:13.609]                       while (!identical(envir, .GlobalEnv) && 
[18:01:13.609]                         !identical(envir, emptyenv())) {
[18:01:13.609]                         if (exists("master", mode = "list", envir = envir, 
[18:01:13.609]                           inherits = FALSE)) {
[18:01:13.609]                           master <- get("master", mode = "list", 
[18:01:13.609]                             envir = envir, inherits = FALSE)
[18:01:13.609]                           if (inherits(master, c("SOCKnode", 
[18:01:13.609]                             "SOCK0node"))) {
[18:01:13.609]                             sendCondition <<- function(cond) {
[18:01:13.609]                               data <- list(type = "VALUE", value = cond, 
[18:01:13.609]                                 success = TRUE)
[18:01:13.609]                               parallel_sendData(master, data)
[18:01:13.609]                             }
[18:01:13.609]                             return(sendCondition)
[18:01:13.609]                           }
[18:01:13.609]                         }
[18:01:13.609]                         frame <- frame + 1L
[18:01:13.609]                         envir <- sys.frame(frame)
[18:01:13.609]                       }
[18:01:13.609]                     }
[18:01:13.609]                     sendCondition <<- function(cond) NULL
[18:01:13.609]                   }
[18:01:13.609]                 })
[18:01:13.609]                 withCallingHandlers({
[18:01:13.609]                   {
[18:01:13.609]                     do.call(function(...) {
[18:01:13.609]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:13.609]                       if (!identical(...future.globals.maxSize.org, 
[18:01:13.609]                         ...future.globals.maxSize)) {
[18:01:13.609]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:13.609]                         on.exit(options(oopts), add = TRUE)
[18:01:13.609]                       }
[18:01:13.609]                       {
[18:01:13.609]                         lapply(seq_along(...future.elements_ii), 
[18:01:13.609]                           FUN = function(jj) {
[18:01:13.609]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:13.609]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:13.609]                               envir = globalenv(), inherits = FALSE)
[18:01:13.609]                             ...future.FUN(...future.X_jj, ...)
[18:01:13.609]                           })
[18:01:13.609]                       }
[18:01:13.609]                     }, args = future.call.arguments)
[18:01:13.609]                   }
[18:01:13.609]                 }, immediateCondition = function(cond) {
[18:01:13.609]                   sendCondition <- ...future.makeSendCondition()
[18:01:13.609]                   sendCondition(cond)
[18:01:13.609]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:13.609]                   {
[18:01:13.609]                     inherits <- base::inherits
[18:01:13.609]                     invokeRestart <- base::invokeRestart
[18:01:13.609]                     is.null <- base::is.null
[18:01:13.609]                     muffled <- FALSE
[18:01:13.609]                     if (inherits(cond, "message")) {
[18:01:13.609]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:13.609]                       if (muffled) 
[18:01:13.609]                         invokeRestart("muffleMessage")
[18:01:13.609]                     }
[18:01:13.609]                     else if (inherits(cond, "warning")) {
[18:01:13.609]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:13.609]                       if (muffled) 
[18:01:13.609]                         invokeRestart("muffleWarning")
[18:01:13.609]                     }
[18:01:13.609]                     else if (inherits(cond, "condition")) {
[18:01:13.609]                       if (!is.null(pattern)) {
[18:01:13.609]                         computeRestarts <- base::computeRestarts
[18:01:13.609]                         grepl <- base::grepl
[18:01:13.609]                         restarts <- computeRestarts(cond)
[18:01:13.609]                         for (restart in restarts) {
[18:01:13.609]                           name <- restart$name
[18:01:13.609]                           if (is.null(name)) 
[18:01:13.609]                             next
[18:01:13.609]                           if (!grepl(pattern, name)) 
[18:01:13.609]                             next
[18:01:13.609]                           invokeRestart(restart)
[18:01:13.609]                           muffled <- TRUE
[18:01:13.609]                           break
[18:01:13.609]                         }
[18:01:13.609]                       }
[18:01:13.609]                     }
[18:01:13.609]                     invisible(muffled)
[18:01:13.609]                   }
[18:01:13.609]                   muffleCondition(cond)
[18:01:13.609]                 })
[18:01:13.609]             }))
[18:01:13.609]             future::FutureResult(value = ...future.value$value, 
[18:01:13.609]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:13.609]                   ...future.rng), globalenv = if (FALSE) 
[18:01:13.609]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:13.609]                     ...future.globalenv.names))
[18:01:13.609]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:13.609]         }, condition = base::local({
[18:01:13.609]             c <- base::c
[18:01:13.609]             inherits <- base::inherits
[18:01:13.609]             invokeRestart <- base::invokeRestart
[18:01:13.609]             length <- base::length
[18:01:13.609]             list <- base::list
[18:01:13.609]             seq.int <- base::seq.int
[18:01:13.609]             signalCondition <- base::signalCondition
[18:01:13.609]             sys.calls <- base::sys.calls
[18:01:13.609]             `[[` <- base::`[[`
[18:01:13.609]             `+` <- base::`+`
[18:01:13.609]             `<<-` <- base::`<<-`
[18:01:13.609]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:13.609]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:13.609]                   3L)]
[18:01:13.609]             }
[18:01:13.609]             function(cond) {
[18:01:13.609]                 is_error <- inherits(cond, "error")
[18:01:13.609]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:13.609]                   NULL)
[18:01:13.609]                 if (is_error) {
[18:01:13.609]                   sessionInformation <- function() {
[18:01:13.609]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:13.609]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:13.609]                       search = base::search(), system = base::Sys.info())
[18:01:13.609]                   }
[18:01:13.609]                   ...future.conditions[[length(...future.conditions) + 
[18:01:13.609]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:13.609]                     cond$call), session = sessionInformation(), 
[18:01:13.609]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:13.609]                   signalCondition(cond)
[18:01:13.609]                 }
[18:01:13.609]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:13.609]                 "immediateCondition"))) {
[18:01:13.609]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:13.609]                   ...future.conditions[[length(...future.conditions) + 
[18:01:13.609]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:13.609]                   if (TRUE && !signal) {
[18:01:13.609]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:13.609]                     {
[18:01:13.609]                       inherits <- base::inherits
[18:01:13.609]                       invokeRestart <- base::invokeRestart
[18:01:13.609]                       is.null <- base::is.null
[18:01:13.609]                       muffled <- FALSE
[18:01:13.609]                       if (inherits(cond, "message")) {
[18:01:13.609]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:13.609]                         if (muffled) 
[18:01:13.609]                           invokeRestart("muffleMessage")
[18:01:13.609]                       }
[18:01:13.609]                       else if (inherits(cond, "warning")) {
[18:01:13.609]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:13.609]                         if (muffled) 
[18:01:13.609]                           invokeRestart("muffleWarning")
[18:01:13.609]                       }
[18:01:13.609]                       else if (inherits(cond, "condition")) {
[18:01:13.609]                         if (!is.null(pattern)) {
[18:01:13.609]                           computeRestarts <- base::computeRestarts
[18:01:13.609]                           grepl <- base::grepl
[18:01:13.609]                           restarts <- computeRestarts(cond)
[18:01:13.609]                           for (restart in restarts) {
[18:01:13.609]                             name <- restart$name
[18:01:13.609]                             if (is.null(name)) 
[18:01:13.609]                               next
[18:01:13.609]                             if (!grepl(pattern, name)) 
[18:01:13.609]                               next
[18:01:13.609]                             invokeRestart(restart)
[18:01:13.609]                             muffled <- TRUE
[18:01:13.609]                             break
[18:01:13.609]                           }
[18:01:13.609]                         }
[18:01:13.609]                       }
[18:01:13.609]                       invisible(muffled)
[18:01:13.609]                     }
[18:01:13.609]                     muffleCondition(cond, pattern = "^muffle")
[18:01:13.609]                   }
[18:01:13.609]                 }
[18:01:13.609]                 else {
[18:01:13.609]                   if (TRUE) {
[18:01:13.609]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:13.609]                     {
[18:01:13.609]                       inherits <- base::inherits
[18:01:13.609]                       invokeRestart <- base::invokeRestart
[18:01:13.609]                       is.null <- base::is.null
[18:01:13.609]                       muffled <- FALSE
[18:01:13.609]                       if (inherits(cond, "message")) {
[18:01:13.609]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:13.609]                         if (muffled) 
[18:01:13.609]                           invokeRestart("muffleMessage")
[18:01:13.609]                       }
[18:01:13.609]                       else if (inherits(cond, "warning")) {
[18:01:13.609]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:13.609]                         if (muffled) 
[18:01:13.609]                           invokeRestart("muffleWarning")
[18:01:13.609]                       }
[18:01:13.609]                       else if (inherits(cond, "condition")) {
[18:01:13.609]                         if (!is.null(pattern)) {
[18:01:13.609]                           computeRestarts <- base::computeRestarts
[18:01:13.609]                           grepl <- base::grepl
[18:01:13.609]                           restarts <- computeRestarts(cond)
[18:01:13.609]                           for (restart in restarts) {
[18:01:13.609]                             name <- restart$name
[18:01:13.609]                             if (is.null(name)) 
[18:01:13.609]                               next
[18:01:13.609]                             if (!grepl(pattern, name)) 
[18:01:13.609]                               next
[18:01:13.609]                             invokeRestart(restart)
[18:01:13.609]                             muffled <- TRUE
[18:01:13.609]                             break
[18:01:13.609]                           }
[18:01:13.609]                         }
[18:01:13.609]                       }
[18:01:13.609]                       invisible(muffled)
[18:01:13.609]                     }
[18:01:13.609]                     muffleCondition(cond, pattern = "^muffle")
[18:01:13.609]                   }
[18:01:13.609]                 }
[18:01:13.609]             }
[18:01:13.609]         }))
[18:01:13.609]     }, error = function(ex) {
[18:01:13.609]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:13.609]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:13.609]                 ...future.rng), started = ...future.startTime, 
[18:01:13.609]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:13.609]             version = "1.8"), class = "FutureResult")
[18:01:13.609]     }, finally = {
[18:01:13.609]         if (!identical(...future.workdir, getwd())) 
[18:01:13.609]             setwd(...future.workdir)
[18:01:13.609]         {
[18:01:13.609]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:13.609]                 ...future.oldOptions$nwarnings <- NULL
[18:01:13.609]             }
[18:01:13.609]             base::options(...future.oldOptions)
[18:01:13.609]             if (.Platform$OS.type == "windows") {
[18:01:13.609]                 old_names <- names(...future.oldEnvVars)
[18:01:13.609]                 envs <- base::Sys.getenv()
[18:01:13.609]                 names <- names(envs)
[18:01:13.609]                 common <- intersect(names, old_names)
[18:01:13.609]                 added <- setdiff(names, old_names)
[18:01:13.609]                 removed <- setdiff(old_names, names)
[18:01:13.609]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:13.609]                   envs[common]]
[18:01:13.609]                 NAMES <- toupper(changed)
[18:01:13.609]                 args <- list()
[18:01:13.609]                 for (kk in seq_along(NAMES)) {
[18:01:13.609]                   name <- changed[[kk]]
[18:01:13.609]                   NAME <- NAMES[[kk]]
[18:01:13.609]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:13.609]                     next
[18:01:13.609]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:13.609]                 }
[18:01:13.609]                 NAMES <- toupper(added)
[18:01:13.609]                 for (kk in seq_along(NAMES)) {
[18:01:13.609]                   name <- added[[kk]]
[18:01:13.609]                   NAME <- NAMES[[kk]]
[18:01:13.609]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:13.609]                     next
[18:01:13.609]                   args[[name]] <- ""
[18:01:13.609]                 }
[18:01:13.609]                 NAMES <- toupper(removed)
[18:01:13.609]                 for (kk in seq_along(NAMES)) {
[18:01:13.609]                   name <- removed[[kk]]
[18:01:13.609]                   NAME <- NAMES[[kk]]
[18:01:13.609]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:13.609]                     next
[18:01:13.609]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:13.609]                 }
[18:01:13.609]                 if (length(args) > 0) 
[18:01:13.609]                   base::do.call(base::Sys.setenv, args = args)
[18:01:13.609]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:13.609]             }
[18:01:13.609]             else {
[18:01:13.609]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:13.609]             }
[18:01:13.609]             {
[18:01:13.609]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:13.609]                   0L) {
[18:01:13.609]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:13.609]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:13.609]                   base::options(opts)
[18:01:13.609]                 }
[18:01:13.609]                 {
[18:01:13.609]                   {
[18:01:13.609]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:13.609]                     NULL
[18:01:13.609]                   }
[18:01:13.609]                   options(future.plan = NULL)
[18:01:13.609]                   if (is.na(NA_character_)) 
[18:01:13.609]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:13.609]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:13.609]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:13.609]                     .init = FALSE)
[18:01:13.609]                 }
[18:01:13.609]             }
[18:01:13.609]         }
[18:01:13.609]     })
[18:01:13.609]     if (TRUE) {
[18:01:13.609]         base::sink(type = "output", split = FALSE)
[18:01:13.609]         if (TRUE) {
[18:01:13.609]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:13.609]         }
[18:01:13.609]         else {
[18:01:13.609]             ...future.result["stdout"] <- base::list(NULL)
[18:01:13.609]         }
[18:01:13.609]         base::close(...future.stdout)
[18:01:13.609]         ...future.stdout <- NULL
[18:01:13.609]     }
[18:01:13.609]     ...future.result$conditions <- ...future.conditions
[18:01:13.609]     ...future.result$finished <- base::Sys.time()
[18:01:13.609]     ...future.result
[18:01:13.609] }
[18:01:13.710] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[18:01:13.710] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[18:01:13.711] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[18:01:13.712] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[18:01:13.712] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[18:01:13.713] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[18:01:13.714] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[18:01:13.715] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[18:01:13.716] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[18:01:13.716] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[18:01:13.717] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[18:01:13.718] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[18:01:13.720] MultisessionFuture started
[18:01:13.720] - Launch lazy future ... done
[18:01:13.720] run() for ‘MultisessionFuture’ ... done
[18:01:13.721] Created future:
[18:01:13.721] MultisessionFuture:
[18:01:13.721] Label: ‘future_replicate-2’
[18:01:13.721] Expression:
[18:01:13.721] {
[18:01:13.721]     do.call(function(...) {
[18:01:13.721]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:13.721]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:13.721]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:13.721]             on.exit(options(oopts), add = TRUE)
[18:01:13.721]         }
[18:01:13.721]         {
[18:01:13.721]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:13.721]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:13.721]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:13.721]                   envir = globalenv(), inherits = FALSE)
[18:01:13.721]                 ...future.FUN(...future.X_jj, ...)
[18:01:13.721]             })
[18:01:13.721]         }
[18:01:13.721]     }, args = future.call.arguments)
[18:01:13.721] }
[18:01:13.721] Lazy evaluation: FALSE
[18:01:13.721] Asynchronous evaluation: TRUE
[18:01:13.721] Local evaluation: TRUE
[18:01:13.721] Environment: R_GlobalEnv
[18:01:13.721] Capture standard output: TRUE
[18:01:13.721] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:13.721] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:13.721] Packages: <none>
[18:01:13.721] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:13.721] Resolved: FALSE
[18:01:13.721] Value: <not collected>
[18:01:13.721] Conditions captured: <none>
[18:01:13.721] Early signaling: FALSE
[18:01:13.721] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:13.721] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:13.736] Chunk #2 of 2 ... DONE
[18:01:13.737] Launching 2 futures (chunks) ... DONE
[18:01:13.737] Resolving 2 futures (chunks) ...
[18:01:13.738] resolve() on list ...
[18:01:13.738]  recursive: 0
[18:01:13.738]  length: 2
[18:01:13.739] 
[18:01:13.740] receiveMessageFromWorker() for ClusterFuture ...
[18:01:13.741] - Validating connection of MultisessionFuture
[18:01:13.742] - received message: FutureResult
[18:01:13.742] - Received FutureResult
[18:01:13.742] - Erased future from FutureRegistry
[18:01:13.743] result() for ClusterFuture ...
[18:01:13.743] - result already collected: FutureResult
[18:01:13.744] result() for ClusterFuture ... done
[18:01:13.748] receiveMessageFromWorker() for ClusterFuture ... done
[18:01:13.748] Future #1
[18:01:13.749] result() for ClusterFuture ...
[18:01:13.749] - result already collected: FutureResult
[18:01:13.749] result() for ClusterFuture ... done
[18:01:13.750] result() for ClusterFuture ...
[18:01:13.750] - result already collected: FutureResult
[18:01:13.750] result() for ClusterFuture ... done
[18:01:13.751] signalConditionsASAP(MultisessionFuture, pos=1) ...
[18:01:13.751] - nx: 2
[18:01:13.751] - relay: TRUE
[18:01:13.752] - stdout: TRUE
[18:01:13.752] - signal: TRUE
[18:01:13.752] - resignal: FALSE
[18:01:13.752] - force: TRUE
[18:01:13.753] - relayed: [n=2] FALSE, FALSE
[18:01:13.753] - queued futures: [n=2] FALSE, FALSE
[18:01:13.753]  - until=1
[18:01:13.754]  - relaying element #1
[18:01:13.754] result() for ClusterFuture ...
[18:01:13.754] - result already collected: FutureResult
[18:01:13.754] result() for ClusterFuture ... done
[18:01:13.755] result() for ClusterFuture ...
[18:01:13.755] - result already collected: FutureResult
[18:01:13.755] result() for ClusterFuture ... done
[18:01:13.756] result() for ClusterFuture ...
[18:01:13.756] - result already collected: FutureResult
[18:01:13.756] result() for ClusterFuture ... done
[18:01:13.757] result() for ClusterFuture ...
[18:01:13.757] - result already collected: FutureResult
[18:01:13.757] result() for ClusterFuture ... done
[18:01:13.757] - relayed: [n=2] TRUE, FALSE
[18:01:13.758] - queued futures: [n=2] TRUE, FALSE
[18:01:13.758] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[18:01:13.758]  length: 1 (resolved future 1)
[18:01:13.827] receiveMessageFromWorker() for ClusterFuture ...
[18:01:13.828] - Validating connection of MultisessionFuture
[18:01:13.828] - received message: FutureResult
[18:01:13.829] - Received FutureResult
[18:01:13.829] - Erased future from FutureRegistry
[18:01:13.829] result() for ClusterFuture ...
[18:01:13.829] - result already collected: FutureResult
[18:01:13.830] result() for ClusterFuture ... done
[18:01:13.830] receiveMessageFromWorker() for ClusterFuture ... done
[18:01:13.830] Future #2
[18:01:13.831] result() for ClusterFuture ...
[18:01:13.831] - result already collected: FutureResult
[18:01:13.831] result() for ClusterFuture ... done
[18:01:13.832] result() for ClusterFuture ...
[18:01:13.832] - result already collected: FutureResult
[18:01:13.832] result() for ClusterFuture ... done
[18:01:13.833] signalConditionsASAP(MultisessionFuture, pos=2) ...
[18:01:13.833] - nx: 2
[18:01:13.833] - relay: TRUE
[18:01:13.833] - stdout: TRUE
[18:01:13.834] - signal: TRUE
[18:01:13.834] - resignal: FALSE
[18:01:13.834] - force: TRUE
[18:01:13.835] - relayed: [n=2] TRUE, FALSE
[18:01:13.835] - queued futures: [n=2] TRUE, FALSE
[18:01:13.835]  - until=2
[18:01:13.836]  - relaying element #2
[18:01:13.836] result() for ClusterFuture ...
[18:01:13.836] - result already collected: FutureResult
[18:01:13.836] result() for ClusterFuture ... done
[18:01:13.837] result() for ClusterFuture ...
[18:01:13.837] - result already collected: FutureResult
[18:01:13.837] result() for ClusterFuture ... done
[18:01:13.838] result() for ClusterFuture ...
[18:01:13.838] - result already collected: FutureResult
[18:01:13.838] result() for ClusterFuture ... done
[18:01:13.839] result() for ClusterFuture ...
[18:01:13.839] - result already collected: FutureResult
[18:01:13.839] result() for ClusterFuture ... done
[18:01:13.840] - relayed: [n=2] TRUE, TRUE
[18:01:13.840] - queued futures: [n=2] TRUE, TRUE
[18:01:13.840] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[18:01:13.841]  length: 0 (resolved future 2)
[18:01:13.841] Relaying remaining futures
[18:01:13.841] signalConditionsASAP(NULL, pos=0) ...
[18:01:13.841] - nx: 2
[18:01:13.842] - relay: TRUE
[18:01:13.842] - stdout: TRUE
[18:01:13.842] - signal: TRUE
[18:01:13.843] - resignal: FALSE
[18:01:13.843] - force: TRUE
[18:01:13.843] - relayed: [n=2] TRUE, TRUE
[18:01:13.843] - queued futures: [n=2] TRUE, TRUE
 - flush all
[18:01:13.844] - relayed: [n=2] TRUE, TRUE
[18:01:13.844] - queued futures: [n=2] TRUE, TRUE
[18:01:13.844] signalConditionsASAP(NULL, pos=0) ... done
[18:01:13.845] resolve() on list ... DONE
[18:01:13.845] result() for ClusterFuture ...
[18:01:13.845] - result already collected: FutureResult
[18:01:13.846] result() for ClusterFuture ... done
[18:01:13.846] result() for ClusterFuture ...
[18:01:13.846] - result already collected: FutureResult
[18:01:13.847] result() for ClusterFuture ... done
[18:01:13.847] result() for ClusterFuture ...
[18:01:13.847] - result already collected: FutureResult
[18:01:13.847] result() for ClusterFuture ... done
[18:01:13.848] result() for ClusterFuture ...
[18:01:13.848] - result already collected: FutureResult
[18:01:13.848] result() for ClusterFuture ... done
[18:01:13.849]  - Number of value chunks collected: 2
[18:01:13.849] Resolving 2 futures (chunks) ... DONE
[18:01:13.849] Reducing values from 2 chunks ...
[18:01:13.850]  - Number of values collected after concatenation: 5
[18:01:13.850]  - Number of values expected: 5
[18:01:13.850] Reducing values from 2 chunks ... DONE
[18:01:13.851] future_lapply() ... DONE
[18:01:13.851] future_lapply() ...
[18:01:13.852] Generating random seeds ...
[18:01:13.853] Generating random seed streams for 5 elements ...
[18:01:13.853] Generating random seed streams for 5 elements ... DONE
[18:01:13.853] Generating random seeds ... DONE
[18:01:13.854] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[18:01:13.863] Number of chunks: 2
[18:01:13.863] getGlobalsAndPackagesXApply() ...
[18:01:13.863]  - future.globals: TRUE
[18:01:13.863] getGlobalsAndPackages() ...
[18:01:13.864] Searching for globals...
[18:01:13.866] - globals found: [2] ‘FUN’, ‘sample’
[18:01:13.866] Searching for globals ... DONE
[18:01:13.867] Resolving globals: FALSE
[18:01:13.867] The total size of the 1 globals is 616 bytes (616 bytes)
[18:01:13.868] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[18:01:13.868] - globals: [1] ‘FUN’
[18:01:13.869] 
[18:01:13.869] getGlobalsAndPackages() ... DONE
[18:01:13.869]  - globals found/used: [n=1] ‘FUN’
[18:01:13.869]  - needed namespaces: [n=0] 
[18:01:13.870] Finding globals ... DONE
[18:01:13.870]  - use_args: TRUE
[18:01:13.870]  - Getting '...' globals ...
[18:01:13.871] resolve() on list ...
[18:01:13.871]  recursive: 0
[18:01:13.871]  length: 1
[18:01:13.871]  elements: ‘...’
[18:01:13.872]  length: 0 (resolved future 1)
[18:01:13.872] resolve() on list ... DONE
[18:01:13.872]    - '...' content: [n=0] 
[18:01:13.872] List of 1
[18:01:13.872]  $ ...: list()
[18:01:13.872]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:13.872]  - attr(*, "where")=List of 1
[18:01:13.872]   ..$ ...:<environment: 0x635eb5047470> 
[18:01:13.872]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:13.872]  - attr(*, "resolved")= logi TRUE
[18:01:13.872]  - attr(*, "total_size")= num NA
[18:01:13.878]  - Getting '...' globals ... DONE
[18:01:13.878] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[18:01:13.879] List of 2
[18:01:13.879]  $ ...future.FUN:function (...)  
[18:01:13.879]  $ ...          : list()
[18:01:13.879]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:13.879]  - attr(*, "where")=List of 2
[18:01:13.879]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[18:01:13.879]   ..$ ...          :<environment: 0x635eb5047470> 
[18:01:13.879]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:13.879]  - attr(*, "resolved")= logi FALSE
[18:01:13.879]  - attr(*, "total_size")= num 616
[18:01:13.885] Packages to be attached in all futures: [n=0] 
[18:01:13.886] getGlobalsAndPackagesXApply() ... DONE
[18:01:13.886] Number of futures (= number of chunks): 2
[18:01:13.886] Launching 2 futures (chunks) ...
[18:01:13.887] Chunk #1 of 2 ...
[18:01:13.887]  - Finding globals in 'X' for chunk #1 ...
[18:01:13.887] getGlobalsAndPackages() ...
[18:01:13.887] Searching for globals...
[18:01:13.888] 
[18:01:13.888] Searching for globals ... DONE
[18:01:13.889] - globals: [0] <none>
[18:01:13.889] getGlobalsAndPackages() ... DONE
[18:01:13.889]    + additional globals found: [n=0] 
[18:01:13.889]    + additional namespaces needed: [n=0] 
[18:01:13.889]  - Finding globals in 'X' for chunk #1 ... DONE
[18:01:13.890]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:13.890]  - seeds: [2] <seeds>
[18:01:13.890]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:13.891] getGlobalsAndPackages() ...
[18:01:13.891] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:13.891] Resolving globals: FALSE
[18:01:13.891] Tweak future expression to call with '...' arguments ...
[18:01:13.892] {
[18:01:13.892]     do.call(function(...) {
[18:01:13.892]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:13.892]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:13.892]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:13.892]             on.exit(options(oopts), add = TRUE)
[18:01:13.892]         }
[18:01:13.892]         {
[18:01:13.892]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:13.892]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:13.892]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:13.892]                   envir = globalenv(), inherits = FALSE)
[18:01:13.892]                 ...future.FUN(...future.X_jj, ...)
[18:01:13.892]             })
[18:01:13.892]         }
[18:01:13.892]     }, args = future.call.arguments)
[18:01:13.892] }
[18:01:13.892] Tweak future expression to call with '...' arguments ... DONE
[18:01:13.893] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:13.893] 
[18:01:13.894] getGlobalsAndPackages() ... DONE
[18:01:13.894] run() for ‘Future’ ...
[18:01:13.895] - state: ‘created’
[18:01:13.895] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:01:13.919] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:13.920] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:01:13.920]   - Field: ‘node’
[18:01:13.920]   - Field: ‘label’
[18:01:13.920]   - Field: ‘local’
[18:01:13.921]   - Field: ‘owner’
[18:01:13.921]   - Field: ‘envir’
[18:01:13.921]   - Field: ‘workers’
[18:01:13.921]   - Field: ‘packages’
[18:01:13.921]   - Field: ‘gc’
[18:01:13.922]   - Field: ‘conditions’
[18:01:13.922]   - Field: ‘persistent’
[18:01:13.922]   - Field: ‘expr’
[18:01:13.922]   - Field: ‘uuid’
[18:01:13.922]   - Field: ‘seed’
[18:01:13.923]   - Field: ‘version’
[18:01:13.923]   - Field: ‘result’
[18:01:13.923]   - Field: ‘asynchronous’
[18:01:13.923]   - Field: ‘calls’
[18:01:13.923]   - Field: ‘globals’
[18:01:13.924]   - Field: ‘stdout’
[18:01:13.924]   - Field: ‘earlySignal’
[18:01:13.924]   - Field: ‘lazy’
[18:01:13.924]   - Field: ‘state’
[18:01:13.925] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:01:13.925] - Launch lazy future ...
[18:01:13.925] Packages needed by the future expression (n = 0): <none>
[18:01:13.926] Packages needed by future strategies (n = 0): <none>
[18:01:13.926] {
[18:01:13.926]     {
[18:01:13.926]         {
[18:01:13.926]             ...future.startTime <- base::Sys.time()
[18:01:13.926]             {
[18:01:13.926]                 {
[18:01:13.926]                   {
[18:01:13.926]                     {
[18:01:13.926]                       base::local({
[18:01:13.926]                         has_future <- base::requireNamespace("future", 
[18:01:13.926]                           quietly = TRUE)
[18:01:13.926]                         if (has_future) {
[18:01:13.926]                           ns <- base::getNamespace("future")
[18:01:13.926]                           version <- ns[[".package"]][["version"]]
[18:01:13.926]                           if (is.null(version)) 
[18:01:13.926]                             version <- utils::packageVersion("future")
[18:01:13.926]                         }
[18:01:13.926]                         else {
[18:01:13.926]                           version <- NULL
[18:01:13.926]                         }
[18:01:13.926]                         if (!has_future || version < "1.8.0") {
[18:01:13.926]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:13.926]                             "", base::R.version$version.string), 
[18:01:13.926]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:13.926]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:13.926]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:13.926]                               "release", "version")], collapse = " "), 
[18:01:13.926]                             hostname = base::Sys.info()[["nodename"]])
[18:01:13.926]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:13.926]                             info)
[18:01:13.926]                           info <- base::paste(info, collapse = "; ")
[18:01:13.926]                           if (!has_future) {
[18:01:13.926]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:13.926]                               info)
[18:01:13.926]                           }
[18:01:13.926]                           else {
[18:01:13.926]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:13.926]                               info, version)
[18:01:13.926]                           }
[18:01:13.926]                           base::stop(msg)
[18:01:13.926]                         }
[18:01:13.926]                       })
[18:01:13.926]                     }
[18:01:13.926]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:13.926]                     base::options(mc.cores = 1L)
[18:01:13.926]                   }
[18:01:13.926]                   ...future.strategy.old <- future::plan("list")
[18:01:13.926]                   options(future.plan = NULL)
[18:01:13.926]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:13.926]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:13.926]                 }
[18:01:13.926]                 ...future.workdir <- getwd()
[18:01:13.926]             }
[18:01:13.926]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:13.926]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:13.926]         }
[18:01:13.926]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:13.926]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:13.926]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:13.926]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:13.926]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:13.926]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:13.926]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:13.926]             base::names(...future.oldOptions))
[18:01:13.926]     }
[18:01:13.926]     if (FALSE) {
[18:01:13.926]     }
[18:01:13.926]     else {
[18:01:13.926]         if (TRUE) {
[18:01:13.926]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:13.926]                 open = "w")
[18:01:13.926]         }
[18:01:13.926]         else {
[18:01:13.926]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:13.926]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:13.926]         }
[18:01:13.926]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:13.926]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:13.926]             base::sink(type = "output", split = FALSE)
[18:01:13.926]             base::close(...future.stdout)
[18:01:13.926]         }, add = TRUE)
[18:01:13.926]     }
[18:01:13.926]     ...future.frame <- base::sys.nframe()
[18:01:13.926]     ...future.conditions <- base::list()
[18:01:13.926]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:13.926]     if (FALSE) {
[18:01:13.926]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:13.926]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:13.926]     }
[18:01:13.926]     ...future.result <- base::tryCatch({
[18:01:13.926]         base::withCallingHandlers({
[18:01:13.926]             ...future.value <- base::withVisible(base::local({
[18:01:13.926]                 ...future.makeSendCondition <- base::local({
[18:01:13.926]                   sendCondition <- NULL
[18:01:13.926]                   function(frame = 1L) {
[18:01:13.926]                     if (is.function(sendCondition)) 
[18:01:13.926]                       return(sendCondition)
[18:01:13.926]                     ns <- getNamespace("parallel")
[18:01:13.926]                     if (exists("sendData", mode = "function", 
[18:01:13.926]                       envir = ns)) {
[18:01:13.926]                       parallel_sendData <- get("sendData", mode = "function", 
[18:01:13.926]                         envir = ns)
[18:01:13.926]                       envir <- sys.frame(frame)
[18:01:13.926]                       master <- NULL
[18:01:13.926]                       while (!identical(envir, .GlobalEnv) && 
[18:01:13.926]                         !identical(envir, emptyenv())) {
[18:01:13.926]                         if (exists("master", mode = "list", envir = envir, 
[18:01:13.926]                           inherits = FALSE)) {
[18:01:13.926]                           master <- get("master", mode = "list", 
[18:01:13.926]                             envir = envir, inherits = FALSE)
[18:01:13.926]                           if (inherits(master, c("SOCKnode", 
[18:01:13.926]                             "SOCK0node"))) {
[18:01:13.926]                             sendCondition <<- function(cond) {
[18:01:13.926]                               data <- list(type = "VALUE", value = cond, 
[18:01:13.926]                                 success = TRUE)
[18:01:13.926]                               parallel_sendData(master, data)
[18:01:13.926]                             }
[18:01:13.926]                             return(sendCondition)
[18:01:13.926]                           }
[18:01:13.926]                         }
[18:01:13.926]                         frame <- frame + 1L
[18:01:13.926]                         envir <- sys.frame(frame)
[18:01:13.926]                       }
[18:01:13.926]                     }
[18:01:13.926]                     sendCondition <<- function(cond) NULL
[18:01:13.926]                   }
[18:01:13.926]                 })
[18:01:13.926]                 withCallingHandlers({
[18:01:13.926]                   {
[18:01:13.926]                     do.call(function(...) {
[18:01:13.926]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:13.926]                       if (!identical(...future.globals.maxSize.org, 
[18:01:13.926]                         ...future.globals.maxSize)) {
[18:01:13.926]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:13.926]                         on.exit(options(oopts), add = TRUE)
[18:01:13.926]                       }
[18:01:13.926]                       {
[18:01:13.926]                         lapply(seq_along(...future.elements_ii), 
[18:01:13.926]                           FUN = function(jj) {
[18:01:13.926]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:13.926]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:13.926]                               envir = globalenv(), inherits = FALSE)
[18:01:13.926]                             ...future.FUN(...future.X_jj, ...)
[18:01:13.926]                           })
[18:01:13.926]                       }
[18:01:13.926]                     }, args = future.call.arguments)
[18:01:13.926]                   }
[18:01:13.926]                 }, immediateCondition = function(cond) {
[18:01:13.926]                   sendCondition <- ...future.makeSendCondition()
[18:01:13.926]                   sendCondition(cond)
[18:01:13.926]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:13.926]                   {
[18:01:13.926]                     inherits <- base::inherits
[18:01:13.926]                     invokeRestart <- base::invokeRestart
[18:01:13.926]                     is.null <- base::is.null
[18:01:13.926]                     muffled <- FALSE
[18:01:13.926]                     if (inherits(cond, "message")) {
[18:01:13.926]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:13.926]                       if (muffled) 
[18:01:13.926]                         invokeRestart("muffleMessage")
[18:01:13.926]                     }
[18:01:13.926]                     else if (inherits(cond, "warning")) {
[18:01:13.926]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:13.926]                       if (muffled) 
[18:01:13.926]                         invokeRestart("muffleWarning")
[18:01:13.926]                     }
[18:01:13.926]                     else if (inherits(cond, "condition")) {
[18:01:13.926]                       if (!is.null(pattern)) {
[18:01:13.926]                         computeRestarts <- base::computeRestarts
[18:01:13.926]                         grepl <- base::grepl
[18:01:13.926]                         restarts <- computeRestarts(cond)
[18:01:13.926]                         for (restart in restarts) {
[18:01:13.926]                           name <- restart$name
[18:01:13.926]                           if (is.null(name)) 
[18:01:13.926]                             next
[18:01:13.926]                           if (!grepl(pattern, name)) 
[18:01:13.926]                             next
[18:01:13.926]                           invokeRestart(restart)
[18:01:13.926]                           muffled <- TRUE
[18:01:13.926]                           break
[18:01:13.926]                         }
[18:01:13.926]                       }
[18:01:13.926]                     }
[18:01:13.926]                     invisible(muffled)
[18:01:13.926]                   }
[18:01:13.926]                   muffleCondition(cond)
[18:01:13.926]                 })
[18:01:13.926]             }))
[18:01:13.926]             future::FutureResult(value = ...future.value$value, 
[18:01:13.926]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:13.926]                   ...future.rng), globalenv = if (FALSE) 
[18:01:13.926]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:13.926]                     ...future.globalenv.names))
[18:01:13.926]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:13.926]         }, condition = base::local({
[18:01:13.926]             c <- base::c
[18:01:13.926]             inherits <- base::inherits
[18:01:13.926]             invokeRestart <- base::invokeRestart
[18:01:13.926]             length <- base::length
[18:01:13.926]             list <- base::list
[18:01:13.926]             seq.int <- base::seq.int
[18:01:13.926]             signalCondition <- base::signalCondition
[18:01:13.926]             sys.calls <- base::sys.calls
[18:01:13.926]             `[[` <- base::`[[`
[18:01:13.926]             `+` <- base::`+`
[18:01:13.926]             `<<-` <- base::`<<-`
[18:01:13.926]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:13.926]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:13.926]                   3L)]
[18:01:13.926]             }
[18:01:13.926]             function(cond) {
[18:01:13.926]                 is_error <- inherits(cond, "error")
[18:01:13.926]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:13.926]                   NULL)
[18:01:13.926]                 if (is_error) {
[18:01:13.926]                   sessionInformation <- function() {
[18:01:13.926]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:13.926]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:13.926]                       search = base::search(), system = base::Sys.info())
[18:01:13.926]                   }
[18:01:13.926]                   ...future.conditions[[length(...future.conditions) + 
[18:01:13.926]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:13.926]                     cond$call), session = sessionInformation(), 
[18:01:13.926]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:13.926]                   signalCondition(cond)
[18:01:13.926]                 }
[18:01:13.926]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:13.926]                 "immediateCondition"))) {
[18:01:13.926]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:13.926]                   ...future.conditions[[length(...future.conditions) + 
[18:01:13.926]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:13.926]                   if (TRUE && !signal) {
[18:01:13.926]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:13.926]                     {
[18:01:13.926]                       inherits <- base::inherits
[18:01:13.926]                       invokeRestart <- base::invokeRestart
[18:01:13.926]                       is.null <- base::is.null
[18:01:13.926]                       muffled <- FALSE
[18:01:13.926]                       if (inherits(cond, "message")) {
[18:01:13.926]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:13.926]                         if (muffled) 
[18:01:13.926]                           invokeRestart("muffleMessage")
[18:01:13.926]                       }
[18:01:13.926]                       else if (inherits(cond, "warning")) {
[18:01:13.926]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:13.926]                         if (muffled) 
[18:01:13.926]                           invokeRestart("muffleWarning")
[18:01:13.926]                       }
[18:01:13.926]                       else if (inherits(cond, "condition")) {
[18:01:13.926]                         if (!is.null(pattern)) {
[18:01:13.926]                           computeRestarts <- base::computeRestarts
[18:01:13.926]                           grepl <- base::grepl
[18:01:13.926]                           restarts <- computeRestarts(cond)
[18:01:13.926]                           for (restart in restarts) {
[18:01:13.926]                             name <- restart$name
[18:01:13.926]                             if (is.null(name)) 
[18:01:13.926]                               next
[18:01:13.926]                             if (!grepl(pattern, name)) 
[18:01:13.926]                               next
[18:01:13.926]                             invokeRestart(restart)
[18:01:13.926]                             muffled <- TRUE
[18:01:13.926]                             break
[18:01:13.926]                           }
[18:01:13.926]                         }
[18:01:13.926]                       }
[18:01:13.926]                       invisible(muffled)
[18:01:13.926]                     }
[18:01:13.926]                     muffleCondition(cond, pattern = "^muffle")
[18:01:13.926]                   }
[18:01:13.926]                 }
[18:01:13.926]                 else {
[18:01:13.926]                   if (TRUE) {
[18:01:13.926]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:13.926]                     {
[18:01:13.926]                       inherits <- base::inherits
[18:01:13.926]                       invokeRestart <- base::invokeRestart
[18:01:13.926]                       is.null <- base::is.null
[18:01:13.926]                       muffled <- FALSE
[18:01:13.926]                       if (inherits(cond, "message")) {
[18:01:13.926]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:13.926]                         if (muffled) 
[18:01:13.926]                           invokeRestart("muffleMessage")
[18:01:13.926]                       }
[18:01:13.926]                       else if (inherits(cond, "warning")) {
[18:01:13.926]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:13.926]                         if (muffled) 
[18:01:13.926]                           invokeRestart("muffleWarning")
[18:01:13.926]                       }
[18:01:13.926]                       else if (inherits(cond, "condition")) {
[18:01:13.926]                         if (!is.null(pattern)) {
[18:01:13.926]                           computeRestarts <- base::computeRestarts
[18:01:13.926]                           grepl <- base::grepl
[18:01:13.926]                           restarts <- computeRestarts(cond)
[18:01:13.926]                           for (restart in restarts) {
[18:01:13.926]                             name <- restart$name
[18:01:13.926]                             if (is.null(name)) 
[18:01:13.926]                               next
[18:01:13.926]                             if (!grepl(pattern, name)) 
[18:01:13.926]                               next
[18:01:13.926]                             invokeRestart(restart)
[18:01:13.926]                             muffled <- TRUE
[18:01:13.926]                             break
[18:01:13.926]                           }
[18:01:13.926]                         }
[18:01:13.926]                       }
[18:01:13.926]                       invisible(muffled)
[18:01:13.926]                     }
[18:01:13.926]                     muffleCondition(cond, pattern = "^muffle")
[18:01:13.926]                   }
[18:01:13.926]                 }
[18:01:13.926]             }
[18:01:13.926]         }))
[18:01:13.926]     }, error = function(ex) {
[18:01:13.926]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:13.926]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:13.926]                 ...future.rng), started = ...future.startTime, 
[18:01:13.926]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:13.926]             version = "1.8"), class = "FutureResult")
[18:01:13.926]     }, finally = {
[18:01:13.926]         if (!identical(...future.workdir, getwd())) 
[18:01:13.926]             setwd(...future.workdir)
[18:01:13.926]         {
[18:01:13.926]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:13.926]                 ...future.oldOptions$nwarnings <- NULL
[18:01:13.926]             }
[18:01:13.926]             base::options(...future.oldOptions)
[18:01:13.926]             if (.Platform$OS.type == "windows") {
[18:01:13.926]                 old_names <- names(...future.oldEnvVars)
[18:01:13.926]                 envs <- base::Sys.getenv()
[18:01:13.926]                 names <- names(envs)
[18:01:13.926]                 common <- intersect(names, old_names)
[18:01:13.926]                 added <- setdiff(names, old_names)
[18:01:13.926]                 removed <- setdiff(old_names, names)
[18:01:13.926]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:13.926]                   envs[common]]
[18:01:13.926]                 NAMES <- toupper(changed)
[18:01:13.926]                 args <- list()
[18:01:13.926]                 for (kk in seq_along(NAMES)) {
[18:01:13.926]                   name <- changed[[kk]]
[18:01:13.926]                   NAME <- NAMES[[kk]]
[18:01:13.926]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:13.926]                     next
[18:01:13.926]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:13.926]                 }
[18:01:13.926]                 NAMES <- toupper(added)
[18:01:13.926]                 for (kk in seq_along(NAMES)) {
[18:01:13.926]                   name <- added[[kk]]
[18:01:13.926]                   NAME <- NAMES[[kk]]
[18:01:13.926]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:13.926]                     next
[18:01:13.926]                   args[[name]] <- ""
[18:01:13.926]                 }
[18:01:13.926]                 NAMES <- toupper(removed)
[18:01:13.926]                 for (kk in seq_along(NAMES)) {
[18:01:13.926]                   name <- removed[[kk]]
[18:01:13.926]                   NAME <- NAMES[[kk]]
[18:01:13.926]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:13.926]                     next
[18:01:13.926]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:13.926]                 }
[18:01:13.926]                 if (length(args) > 0) 
[18:01:13.926]                   base::do.call(base::Sys.setenv, args = args)
[18:01:13.926]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:13.926]             }
[18:01:13.926]             else {
[18:01:13.926]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:13.926]             }
[18:01:13.926]             {
[18:01:13.926]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:13.926]                   0L) {
[18:01:13.926]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:13.926]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:13.926]                   base::options(opts)
[18:01:13.926]                 }
[18:01:13.926]                 {
[18:01:13.926]                   {
[18:01:13.926]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:13.926]                     NULL
[18:01:13.926]                   }
[18:01:13.926]                   options(future.plan = NULL)
[18:01:13.926]                   if (is.na(NA_character_)) 
[18:01:13.926]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:13.926]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:13.926]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:13.926]                     .init = FALSE)
[18:01:13.926]                 }
[18:01:13.926]             }
[18:01:13.926]         }
[18:01:13.926]     })
[18:01:13.926]     if (TRUE) {
[18:01:13.926]         base::sink(type = "output", split = FALSE)
[18:01:13.926]         if (TRUE) {
[18:01:13.926]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:13.926]         }
[18:01:13.926]         else {
[18:01:13.926]             ...future.result["stdout"] <- base::list(NULL)
[18:01:13.926]         }
[18:01:13.926]         base::close(...future.stdout)
[18:01:13.926]         ...future.stdout <- NULL
[18:01:13.926]     }
[18:01:13.926]     ...future.result$conditions <- ...future.conditions
[18:01:13.926]     ...future.result$finished <- base::Sys.time()
[18:01:13.926]     ...future.result
[18:01:13.926] }
[18:01:13.932] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[18:01:13.932] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[18:01:13.933] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[18:01:13.934] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[18:01:13.935] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[18:01:13.935] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[18:01:13.936] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[18:01:13.936] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[18:01:13.937] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[18:01:13.937] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[18:01:13.938] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[18:01:13.938] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[18:01:13.940] MultisessionFuture started
[18:01:13.940] - Launch lazy future ... done
[18:01:13.941] run() for ‘MultisessionFuture’ ... done
[18:01:13.941] Created future:
[18:01:13.941] MultisessionFuture:
[18:01:13.941] Label: ‘future_replicate-1’
[18:01:13.941] Expression:
[18:01:13.941] {
[18:01:13.941]     do.call(function(...) {
[18:01:13.941]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:13.941]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:13.941]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:13.941]             on.exit(options(oopts), add = TRUE)
[18:01:13.941]         }
[18:01:13.941]         {
[18:01:13.941]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:13.941]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:13.941]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:13.941]                   envir = globalenv(), inherits = FALSE)
[18:01:13.941]                 ...future.FUN(...future.X_jj, ...)
[18:01:13.941]             })
[18:01:13.941]         }
[18:01:13.941]     }, args = future.call.arguments)
[18:01:13.941] }
[18:01:13.941] Lazy evaluation: FALSE
[18:01:13.941] Asynchronous evaluation: TRUE
[18:01:13.941] Local evaluation: TRUE
[18:01:13.941] Environment: R_GlobalEnv
[18:01:13.941] Capture standard output: TRUE
[18:01:13.941] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:13.941] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:13.941] Packages: <none>
[18:01:13.941] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:13.941] Resolved: FALSE
[18:01:13.941] Value: <not collected>
[18:01:13.941] Conditions captured: <none>
[18:01:13.941] Early signaling: FALSE
[18:01:13.941] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:13.941] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:13.954] Chunk #1 of 2 ... DONE
[18:01:13.954] Chunk #2 of 2 ...
[18:01:13.955]  - Finding globals in 'X' for chunk #2 ...
[18:01:13.955] getGlobalsAndPackages() ...
[18:01:13.955] Searching for globals...
[18:01:13.956] 
[18:01:13.956] Searching for globals ... DONE
[18:01:13.956] - globals: [0] <none>
[18:01:13.956] getGlobalsAndPackages() ... DONE
[18:01:13.956]    + additional globals found: [n=0] 
[18:01:13.957]    + additional namespaces needed: [n=0] 
[18:01:13.957]  - Finding globals in 'X' for chunk #2 ... DONE
[18:01:13.957]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:13.957]  - seeds: [3] <seeds>
[18:01:13.957]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:13.958] getGlobalsAndPackages() ...
[18:01:13.958] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:13.958] Resolving globals: FALSE
[18:01:13.958] Tweak future expression to call with '...' arguments ...
[18:01:13.959] {
[18:01:13.959]     do.call(function(...) {
[18:01:13.959]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:13.959]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:13.959]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:13.959]             on.exit(options(oopts), add = TRUE)
[18:01:13.959]         }
[18:01:13.959]         {
[18:01:13.959]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:13.959]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:13.959]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:13.959]                   envir = globalenv(), inherits = FALSE)
[18:01:13.959]                 ...future.FUN(...future.X_jj, ...)
[18:01:13.959]             })
[18:01:13.959]         }
[18:01:13.959]     }, args = future.call.arguments)
[18:01:13.959] }
[18:01:13.959] Tweak future expression to call with '...' arguments ... DONE
[18:01:13.960] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:13.960] 
[18:01:13.960] getGlobalsAndPackages() ... DONE
[18:01:13.961] run() for ‘Future’ ...
[18:01:13.961] - state: ‘created’
[18:01:13.961] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:01:13.985] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:13.986] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:01:13.986]   - Field: ‘node’
[18:01:13.986]   - Field: ‘label’
[18:01:13.986]   - Field: ‘local’
[18:01:13.986]   - Field: ‘owner’
[18:01:13.987]   - Field: ‘envir’
[18:01:13.987]   - Field: ‘workers’
[18:01:13.987]   - Field: ‘packages’
[18:01:13.987]   - Field: ‘gc’
[18:01:13.987]   - Field: ‘conditions’
[18:01:13.988]   - Field: ‘persistent’
[18:01:13.988]   - Field: ‘expr’
[18:01:13.988]   - Field: ‘uuid’
[18:01:13.988]   - Field: ‘seed’
[18:01:13.988]   - Field: ‘version’
[18:01:13.989]   - Field: ‘result’
[18:01:13.989]   - Field: ‘asynchronous’
[18:01:13.989]   - Field: ‘calls’
[18:01:13.989]   - Field: ‘globals’
[18:01:13.989]   - Field: ‘stdout’
[18:01:13.990]   - Field: ‘earlySignal’
[18:01:13.990]   - Field: ‘lazy’
[18:01:13.990]   - Field: ‘state’
[18:01:13.990] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:01:13.990] - Launch lazy future ...
[18:01:13.991] Packages needed by the future expression (n = 0): <none>
[18:01:13.991] Packages needed by future strategies (n = 0): <none>
[18:01:13.992] {
[18:01:13.992]     {
[18:01:13.992]         {
[18:01:13.992]             ...future.startTime <- base::Sys.time()
[18:01:13.992]             {
[18:01:13.992]                 {
[18:01:13.992]                   {
[18:01:13.992]                     {
[18:01:13.992]                       base::local({
[18:01:13.992]                         has_future <- base::requireNamespace("future", 
[18:01:13.992]                           quietly = TRUE)
[18:01:13.992]                         if (has_future) {
[18:01:13.992]                           ns <- base::getNamespace("future")
[18:01:13.992]                           version <- ns[[".package"]][["version"]]
[18:01:13.992]                           if (is.null(version)) 
[18:01:13.992]                             version <- utils::packageVersion("future")
[18:01:13.992]                         }
[18:01:13.992]                         else {
[18:01:13.992]                           version <- NULL
[18:01:13.992]                         }
[18:01:13.992]                         if (!has_future || version < "1.8.0") {
[18:01:13.992]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:13.992]                             "", base::R.version$version.string), 
[18:01:13.992]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:13.992]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:13.992]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:13.992]                               "release", "version")], collapse = " "), 
[18:01:13.992]                             hostname = base::Sys.info()[["nodename"]])
[18:01:13.992]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:13.992]                             info)
[18:01:13.992]                           info <- base::paste(info, collapse = "; ")
[18:01:13.992]                           if (!has_future) {
[18:01:13.992]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:13.992]                               info)
[18:01:13.992]                           }
[18:01:13.992]                           else {
[18:01:13.992]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:13.992]                               info, version)
[18:01:13.992]                           }
[18:01:13.992]                           base::stop(msg)
[18:01:13.992]                         }
[18:01:13.992]                       })
[18:01:13.992]                     }
[18:01:13.992]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:13.992]                     base::options(mc.cores = 1L)
[18:01:13.992]                   }
[18:01:13.992]                   ...future.strategy.old <- future::plan("list")
[18:01:13.992]                   options(future.plan = NULL)
[18:01:13.992]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:13.992]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:13.992]                 }
[18:01:13.992]                 ...future.workdir <- getwd()
[18:01:13.992]             }
[18:01:13.992]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:13.992]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:13.992]         }
[18:01:13.992]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:13.992]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:13.992]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:13.992]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:13.992]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:13.992]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:13.992]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:13.992]             base::names(...future.oldOptions))
[18:01:13.992]     }
[18:01:13.992]     if (FALSE) {
[18:01:13.992]     }
[18:01:13.992]     else {
[18:01:13.992]         if (TRUE) {
[18:01:13.992]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:13.992]                 open = "w")
[18:01:13.992]         }
[18:01:13.992]         else {
[18:01:13.992]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:13.992]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:13.992]         }
[18:01:13.992]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:13.992]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:13.992]             base::sink(type = "output", split = FALSE)
[18:01:13.992]             base::close(...future.stdout)
[18:01:13.992]         }, add = TRUE)
[18:01:13.992]     }
[18:01:13.992]     ...future.frame <- base::sys.nframe()
[18:01:13.992]     ...future.conditions <- base::list()
[18:01:13.992]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:13.992]     if (FALSE) {
[18:01:13.992]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:13.992]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:13.992]     }
[18:01:13.992]     ...future.result <- base::tryCatch({
[18:01:13.992]         base::withCallingHandlers({
[18:01:13.992]             ...future.value <- base::withVisible(base::local({
[18:01:13.992]                 ...future.makeSendCondition <- base::local({
[18:01:13.992]                   sendCondition <- NULL
[18:01:13.992]                   function(frame = 1L) {
[18:01:13.992]                     if (is.function(sendCondition)) 
[18:01:13.992]                       return(sendCondition)
[18:01:13.992]                     ns <- getNamespace("parallel")
[18:01:13.992]                     if (exists("sendData", mode = "function", 
[18:01:13.992]                       envir = ns)) {
[18:01:13.992]                       parallel_sendData <- get("sendData", mode = "function", 
[18:01:13.992]                         envir = ns)
[18:01:13.992]                       envir <- sys.frame(frame)
[18:01:13.992]                       master <- NULL
[18:01:13.992]                       while (!identical(envir, .GlobalEnv) && 
[18:01:13.992]                         !identical(envir, emptyenv())) {
[18:01:13.992]                         if (exists("master", mode = "list", envir = envir, 
[18:01:13.992]                           inherits = FALSE)) {
[18:01:13.992]                           master <- get("master", mode = "list", 
[18:01:13.992]                             envir = envir, inherits = FALSE)
[18:01:13.992]                           if (inherits(master, c("SOCKnode", 
[18:01:13.992]                             "SOCK0node"))) {
[18:01:13.992]                             sendCondition <<- function(cond) {
[18:01:13.992]                               data <- list(type = "VALUE", value = cond, 
[18:01:13.992]                                 success = TRUE)
[18:01:13.992]                               parallel_sendData(master, data)
[18:01:13.992]                             }
[18:01:13.992]                             return(sendCondition)
[18:01:13.992]                           }
[18:01:13.992]                         }
[18:01:13.992]                         frame <- frame + 1L
[18:01:13.992]                         envir <- sys.frame(frame)
[18:01:13.992]                       }
[18:01:13.992]                     }
[18:01:13.992]                     sendCondition <<- function(cond) NULL
[18:01:13.992]                   }
[18:01:13.992]                 })
[18:01:13.992]                 withCallingHandlers({
[18:01:13.992]                   {
[18:01:13.992]                     do.call(function(...) {
[18:01:13.992]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:13.992]                       if (!identical(...future.globals.maxSize.org, 
[18:01:13.992]                         ...future.globals.maxSize)) {
[18:01:13.992]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:13.992]                         on.exit(options(oopts), add = TRUE)
[18:01:13.992]                       }
[18:01:13.992]                       {
[18:01:13.992]                         lapply(seq_along(...future.elements_ii), 
[18:01:13.992]                           FUN = function(jj) {
[18:01:13.992]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:13.992]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:13.992]                               envir = globalenv(), inherits = FALSE)
[18:01:13.992]                             ...future.FUN(...future.X_jj, ...)
[18:01:13.992]                           })
[18:01:13.992]                       }
[18:01:13.992]                     }, args = future.call.arguments)
[18:01:13.992]                   }
[18:01:13.992]                 }, immediateCondition = function(cond) {
[18:01:13.992]                   sendCondition <- ...future.makeSendCondition()
[18:01:13.992]                   sendCondition(cond)
[18:01:13.992]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:13.992]                   {
[18:01:13.992]                     inherits <- base::inherits
[18:01:13.992]                     invokeRestart <- base::invokeRestart
[18:01:13.992]                     is.null <- base::is.null
[18:01:13.992]                     muffled <- FALSE
[18:01:13.992]                     if (inherits(cond, "message")) {
[18:01:13.992]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:13.992]                       if (muffled) 
[18:01:13.992]                         invokeRestart("muffleMessage")
[18:01:13.992]                     }
[18:01:13.992]                     else if (inherits(cond, "warning")) {
[18:01:13.992]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:13.992]                       if (muffled) 
[18:01:13.992]                         invokeRestart("muffleWarning")
[18:01:13.992]                     }
[18:01:13.992]                     else if (inherits(cond, "condition")) {
[18:01:13.992]                       if (!is.null(pattern)) {
[18:01:13.992]                         computeRestarts <- base::computeRestarts
[18:01:13.992]                         grepl <- base::grepl
[18:01:13.992]                         restarts <- computeRestarts(cond)
[18:01:13.992]                         for (restart in restarts) {
[18:01:13.992]                           name <- restart$name
[18:01:13.992]                           if (is.null(name)) 
[18:01:13.992]                             next
[18:01:13.992]                           if (!grepl(pattern, name)) 
[18:01:13.992]                             next
[18:01:13.992]                           invokeRestart(restart)
[18:01:13.992]                           muffled <- TRUE
[18:01:13.992]                           break
[18:01:13.992]                         }
[18:01:13.992]                       }
[18:01:13.992]                     }
[18:01:13.992]                     invisible(muffled)
[18:01:13.992]                   }
[18:01:13.992]                   muffleCondition(cond)
[18:01:13.992]                 })
[18:01:13.992]             }))
[18:01:13.992]             future::FutureResult(value = ...future.value$value, 
[18:01:13.992]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:13.992]                   ...future.rng), globalenv = if (FALSE) 
[18:01:13.992]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:13.992]                     ...future.globalenv.names))
[18:01:13.992]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:13.992]         }, condition = base::local({
[18:01:13.992]             c <- base::c
[18:01:13.992]             inherits <- base::inherits
[18:01:13.992]             invokeRestart <- base::invokeRestart
[18:01:13.992]             length <- base::length
[18:01:13.992]             list <- base::list
[18:01:13.992]             seq.int <- base::seq.int
[18:01:13.992]             signalCondition <- base::signalCondition
[18:01:13.992]             sys.calls <- base::sys.calls
[18:01:13.992]             `[[` <- base::`[[`
[18:01:13.992]             `+` <- base::`+`
[18:01:13.992]             `<<-` <- base::`<<-`
[18:01:13.992]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:13.992]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:13.992]                   3L)]
[18:01:13.992]             }
[18:01:13.992]             function(cond) {
[18:01:13.992]                 is_error <- inherits(cond, "error")
[18:01:13.992]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:13.992]                   NULL)
[18:01:13.992]                 if (is_error) {
[18:01:13.992]                   sessionInformation <- function() {
[18:01:13.992]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:13.992]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:13.992]                       search = base::search(), system = base::Sys.info())
[18:01:13.992]                   }
[18:01:13.992]                   ...future.conditions[[length(...future.conditions) + 
[18:01:13.992]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:13.992]                     cond$call), session = sessionInformation(), 
[18:01:13.992]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:13.992]                   signalCondition(cond)
[18:01:13.992]                 }
[18:01:13.992]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:13.992]                 "immediateCondition"))) {
[18:01:13.992]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:13.992]                   ...future.conditions[[length(...future.conditions) + 
[18:01:13.992]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:13.992]                   if (TRUE && !signal) {
[18:01:13.992]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:13.992]                     {
[18:01:13.992]                       inherits <- base::inherits
[18:01:13.992]                       invokeRestart <- base::invokeRestart
[18:01:13.992]                       is.null <- base::is.null
[18:01:13.992]                       muffled <- FALSE
[18:01:13.992]                       if (inherits(cond, "message")) {
[18:01:13.992]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:13.992]                         if (muffled) 
[18:01:13.992]                           invokeRestart("muffleMessage")
[18:01:13.992]                       }
[18:01:13.992]                       else if (inherits(cond, "warning")) {
[18:01:13.992]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:13.992]                         if (muffled) 
[18:01:13.992]                           invokeRestart("muffleWarning")
[18:01:13.992]                       }
[18:01:13.992]                       else if (inherits(cond, "condition")) {
[18:01:13.992]                         if (!is.null(pattern)) {
[18:01:13.992]                           computeRestarts <- base::computeRestarts
[18:01:13.992]                           grepl <- base::grepl
[18:01:13.992]                           restarts <- computeRestarts(cond)
[18:01:13.992]                           for (restart in restarts) {
[18:01:13.992]                             name <- restart$name
[18:01:13.992]                             if (is.null(name)) 
[18:01:13.992]                               next
[18:01:13.992]                             if (!grepl(pattern, name)) 
[18:01:13.992]                               next
[18:01:13.992]                             invokeRestart(restart)
[18:01:13.992]                             muffled <- TRUE
[18:01:13.992]                             break
[18:01:13.992]                           }
[18:01:13.992]                         }
[18:01:13.992]                       }
[18:01:13.992]                       invisible(muffled)
[18:01:13.992]                     }
[18:01:13.992]                     muffleCondition(cond, pattern = "^muffle")
[18:01:13.992]                   }
[18:01:13.992]                 }
[18:01:13.992]                 else {
[18:01:13.992]                   if (TRUE) {
[18:01:13.992]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:13.992]                     {
[18:01:13.992]                       inherits <- base::inherits
[18:01:13.992]                       invokeRestart <- base::invokeRestart
[18:01:13.992]                       is.null <- base::is.null
[18:01:13.992]                       muffled <- FALSE
[18:01:13.992]                       if (inherits(cond, "message")) {
[18:01:13.992]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:13.992]                         if (muffled) 
[18:01:13.992]                           invokeRestart("muffleMessage")
[18:01:13.992]                       }
[18:01:13.992]                       else if (inherits(cond, "warning")) {
[18:01:13.992]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:13.992]                         if (muffled) 
[18:01:13.992]                           invokeRestart("muffleWarning")
[18:01:13.992]                       }
[18:01:13.992]                       else if (inherits(cond, "condition")) {
[18:01:13.992]                         if (!is.null(pattern)) {
[18:01:13.992]                           computeRestarts <- base::computeRestarts
[18:01:13.992]                           grepl <- base::grepl
[18:01:13.992]                           restarts <- computeRestarts(cond)
[18:01:13.992]                           for (restart in restarts) {
[18:01:13.992]                             name <- restart$name
[18:01:13.992]                             if (is.null(name)) 
[18:01:13.992]                               next
[18:01:13.992]                             if (!grepl(pattern, name)) 
[18:01:13.992]                               next
[18:01:13.992]                             invokeRestart(restart)
[18:01:13.992]                             muffled <- TRUE
[18:01:13.992]                             break
[18:01:13.992]                           }
[18:01:13.992]                         }
[18:01:13.992]                       }
[18:01:13.992]                       invisible(muffled)
[18:01:13.992]                     }
[18:01:13.992]                     muffleCondition(cond, pattern = "^muffle")
[18:01:13.992]                   }
[18:01:13.992]                 }
[18:01:13.992]             }
[18:01:13.992]         }))
[18:01:13.992]     }, error = function(ex) {
[18:01:13.992]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:13.992]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:13.992]                 ...future.rng), started = ...future.startTime, 
[18:01:13.992]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:13.992]             version = "1.8"), class = "FutureResult")
[18:01:13.992]     }, finally = {
[18:01:13.992]         if (!identical(...future.workdir, getwd())) 
[18:01:13.992]             setwd(...future.workdir)
[18:01:13.992]         {
[18:01:13.992]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:13.992]                 ...future.oldOptions$nwarnings <- NULL
[18:01:13.992]             }
[18:01:13.992]             base::options(...future.oldOptions)
[18:01:13.992]             if (.Platform$OS.type == "windows") {
[18:01:13.992]                 old_names <- names(...future.oldEnvVars)
[18:01:13.992]                 envs <- base::Sys.getenv()
[18:01:13.992]                 names <- names(envs)
[18:01:13.992]                 common <- intersect(names, old_names)
[18:01:13.992]                 added <- setdiff(names, old_names)
[18:01:13.992]                 removed <- setdiff(old_names, names)
[18:01:13.992]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:13.992]                   envs[common]]
[18:01:13.992]                 NAMES <- toupper(changed)
[18:01:13.992]                 args <- list()
[18:01:13.992]                 for (kk in seq_along(NAMES)) {
[18:01:13.992]                   name <- changed[[kk]]
[18:01:13.992]                   NAME <- NAMES[[kk]]
[18:01:13.992]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:13.992]                     next
[18:01:13.992]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:13.992]                 }
[18:01:13.992]                 NAMES <- toupper(added)
[18:01:13.992]                 for (kk in seq_along(NAMES)) {
[18:01:13.992]                   name <- added[[kk]]
[18:01:13.992]                   NAME <- NAMES[[kk]]
[18:01:13.992]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:13.992]                     next
[18:01:13.992]                   args[[name]] <- ""
[18:01:13.992]                 }
[18:01:13.992]                 NAMES <- toupper(removed)
[18:01:13.992]                 for (kk in seq_along(NAMES)) {
[18:01:13.992]                   name <- removed[[kk]]
[18:01:13.992]                   NAME <- NAMES[[kk]]
[18:01:13.992]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:13.992]                     next
[18:01:13.992]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:13.992]                 }
[18:01:13.992]                 if (length(args) > 0) 
[18:01:13.992]                   base::do.call(base::Sys.setenv, args = args)
[18:01:13.992]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:13.992]             }
[18:01:13.992]             else {
[18:01:13.992]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:13.992]             }
[18:01:13.992]             {
[18:01:13.992]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:13.992]                   0L) {
[18:01:13.992]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:13.992]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:13.992]                   base::options(opts)
[18:01:13.992]                 }
[18:01:13.992]                 {
[18:01:13.992]                   {
[18:01:13.992]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:13.992]                     NULL
[18:01:13.992]                   }
[18:01:13.992]                   options(future.plan = NULL)
[18:01:13.992]                   if (is.na(NA_character_)) 
[18:01:13.992]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:13.992]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:13.992]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:13.992]                     .init = FALSE)
[18:01:13.992]                 }
[18:01:13.992]             }
[18:01:13.992]         }
[18:01:13.992]     })
[18:01:13.992]     if (TRUE) {
[18:01:13.992]         base::sink(type = "output", split = FALSE)
[18:01:13.992]         if (TRUE) {
[18:01:13.992]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:13.992]         }
[18:01:13.992]         else {
[18:01:13.992]             ...future.result["stdout"] <- base::list(NULL)
[18:01:13.992]         }
[18:01:13.992]         base::close(...future.stdout)
[18:01:13.992]         ...future.stdout <- NULL
[18:01:13.992]     }
[18:01:13.992]     ...future.result$conditions <- ...future.conditions
[18:01:13.992]     ...future.result$finished <- base::Sys.time()
[18:01:13.992]     ...future.result
[18:01:13.992] }
[18:01:13.997] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[18:01:13.997] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[18:01:13.998] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[18:01:13.999] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[18:01:13.999] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[18:01:14.000] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[18:01:14.001] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[18:01:14.001] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[18:01:14.002] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[18:01:14.002] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[18:01:14.003] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[18:01:14.003] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[18:01:14.004] MultisessionFuture started
[18:01:14.004] - Launch lazy future ... done
[18:01:14.005] run() for ‘MultisessionFuture’ ... done
[18:01:14.005] Created future:
[18:01:14.005] MultisessionFuture:
[18:01:14.005] Label: ‘future_replicate-2’
[18:01:14.005] Expression:
[18:01:14.005] {
[18:01:14.005]     do.call(function(...) {
[18:01:14.005]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.005]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:14.005]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.005]             on.exit(options(oopts), add = TRUE)
[18:01:14.005]         }
[18:01:14.005]         {
[18:01:14.005]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:14.005]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.005]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.005]                   envir = globalenv(), inherits = FALSE)
[18:01:14.005]                 ...future.FUN(...future.X_jj, ...)
[18:01:14.005]             })
[18:01:14.005]         }
[18:01:14.005]     }, args = future.call.arguments)
[18:01:14.005] }
[18:01:14.005] Lazy evaluation: FALSE
[18:01:14.005] Asynchronous evaluation: TRUE
[18:01:14.005] Local evaluation: TRUE
[18:01:14.005] Environment: R_GlobalEnv
[18:01:14.005] Capture standard output: TRUE
[18:01:14.005] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:14.005] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:14.005] Packages: <none>
[18:01:14.005] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:14.005] Resolved: FALSE
[18:01:14.005] Value: <not collected>
[18:01:14.005] Conditions captured: <none>
[18:01:14.005] Early signaling: FALSE
[18:01:14.005] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:14.005] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:14.018] Chunk #2 of 2 ... DONE
[18:01:14.019] Launching 2 futures (chunks) ... DONE
[18:01:14.019] Resolving 2 futures (chunks) ...
[18:01:14.019] resolve() on list ...
[18:01:14.019]  recursive: 0
[18:01:14.019]  length: 2
[18:01:14.020] 
[18:01:14.021] receiveMessageFromWorker() for ClusterFuture ...
[18:01:14.021] - Validating connection of MultisessionFuture
[18:01:14.021] - received message: FutureResult
[18:01:14.021] - Received FutureResult
[18:01:14.022] - Erased future from FutureRegistry
[18:01:14.022] result() for ClusterFuture ...
[18:01:14.022] - result already collected: FutureResult
[18:01:14.022] result() for ClusterFuture ... done
[18:01:14.022] receiveMessageFromWorker() for ClusterFuture ... done
[18:01:14.023] Future #1
[18:01:14.023] result() for ClusterFuture ...
[18:01:14.023] - result already collected: FutureResult
[18:01:14.023] result() for ClusterFuture ... done
[18:01:14.023] result() for ClusterFuture ...
[18:01:14.023] - result already collected: FutureResult
[18:01:14.024] result() for ClusterFuture ... done
[18:01:14.024] signalConditionsASAP(MultisessionFuture, pos=1) ...
[18:01:14.024] - nx: 2
[18:01:14.024] - relay: TRUE
[18:01:14.024] - stdout: TRUE
[18:01:14.025] - signal: TRUE
[18:01:14.025] - resignal: FALSE
[18:01:14.025] - force: TRUE
[18:01:14.025] - relayed: [n=2] FALSE, FALSE
[18:01:14.025] - queued futures: [n=2] FALSE, FALSE
[18:01:14.026]  - until=1
[18:01:14.026]  - relaying element #1
[18:01:14.026] result() for ClusterFuture ...
[18:01:14.026] - result already collected: FutureResult
[18:01:14.026] result() for ClusterFuture ... done
[18:01:14.026] result() for ClusterFuture ...
[18:01:14.027] - result already collected: FutureResult
[18:01:14.027] result() for ClusterFuture ... done
[18:01:14.027] result() for ClusterFuture ...
[18:01:14.027] - result already collected: FutureResult
[18:01:14.027] result() for ClusterFuture ... done
[18:01:14.028] result() for ClusterFuture ...
[18:01:14.028] - result already collected: FutureResult
[18:01:14.028] result() for ClusterFuture ... done
[18:01:14.028] - relayed: [n=2] TRUE, FALSE
[18:01:14.028] - queued futures: [n=2] TRUE, FALSE
[18:01:14.028] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[18:01:14.029]  length: 1 (resolved future 1)
[18:01:14.051] receiveMessageFromWorker() for ClusterFuture ...
[18:01:14.051] - Validating connection of MultisessionFuture
[18:01:14.051] - received message: FutureResult
[18:01:14.052] - Received FutureResult
[18:01:14.052] - Erased future from FutureRegistry
[18:01:14.052] result() for ClusterFuture ...
[18:01:14.052] - result already collected: FutureResult
[18:01:14.053] result() for ClusterFuture ... done
[18:01:14.053] receiveMessageFromWorker() for ClusterFuture ... done
[18:01:14.053] Future #2
[18:01:14.053] result() for ClusterFuture ...
[18:01:14.053] - result already collected: FutureResult
[18:01:14.054] result() for ClusterFuture ... done
[18:01:14.054] result() for ClusterFuture ...
[18:01:14.054] - result already collected: FutureResult
[18:01:14.054] result() for ClusterFuture ... done
[18:01:14.054] signalConditionsASAP(MultisessionFuture, pos=2) ...
[18:01:14.055] - nx: 2
[18:01:14.055] - relay: TRUE
[18:01:14.055] - stdout: TRUE
[18:01:14.055] - signal: TRUE
[18:01:14.055] - resignal: FALSE
[18:01:14.055] - force: TRUE
[18:01:14.056] - relayed: [n=2] TRUE, FALSE
[18:01:14.056] - queued futures: [n=2] TRUE, FALSE
[18:01:14.056]  - until=2
[18:01:14.056]  - relaying element #2
[18:01:14.056] result() for ClusterFuture ...
[18:01:14.057] - result already collected: FutureResult
[18:01:14.057] result() for ClusterFuture ... done
[18:01:14.057] result() for ClusterFuture ...
[18:01:14.057] - result already collected: FutureResult
[18:01:14.057] result() for ClusterFuture ... done
[18:01:14.058] result() for ClusterFuture ...
[18:01:14.058] - result already collected: FutureResult
[18:01:14.058] result() for ClusterFuture ... done
[18:01:14.058] result() for ClusterFuture ...
[18:01:14.058] - result already collected: FutureResult
[18:01:14.059] result() for ClusterFuture ... done
[18:01:14.059] - relayed: [n=2] TRUE, TRUE
[18:01:14.059] - queued futures: [n=2] TRUE, TRUE
[18:01:14.059] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[18:01:14.059]  length: 0 (resolved future 2)
[18:01:14.059] Relaying remaining futures
[18:01:14.060] signalConditionsASAP(NULL, pos=0) ...
[18:01:14.060] - nx: 2
[18:01:14.060] - relay: TRUE
[18:01:14.060] - stdout: TRUE
[18:01:14.060] - signal: TRUE
[18:01:14.061] - resignal: FALSE
[18:01:14.061] - force: TRUE
[18:01:14.061] - relayed: [n=2] TRUE, TRUE
[18:01:14.061] - queued futures: [n=2] TRUE, TRUE
 - flush all
[18:01:14.061] - relayed: [n=2] TRUE, TRUE
[18:01:14.062] - queued futures: [n=2] TRUE, TRUE
[18:01:14.062] signalConditionsASAP(NULL, pos=0) ... done
[18:01:14.062] resolve() on list ... DONE
[18:01:14.062] result() for ClusterFuture ...
[18:01:14.062] - result already collected: FutureResult
[18:01:14.063] result() for ClusterFuture ... done
[18:01:14.063] result() for ClusterFuture ...
[18:01:14.063] - result already collected: FutureResult
[18:01:14.063] result() for ClusterFuture ... done
[18:01:14.063] result() for ClusterFuture ...
[18:01:14.064] - result already collected: FutureResult
[18:01:14.064] result() for ClusterFuture ... done
[18:01:14.064] result() for ClusterFuture ...
[18:01:14.064] - result already collected: FutureResult
[18:01:14.064] result() for ClusterFuture ... done
[18:01:14.065]  - Number of value chunks collected: 2
[18:01:14.065] Resolving 2 futures (chunks) ... DONE
[18:01:14.065] Reducing values from 2 chunks ...
[18:01:14.065]  - Number of values collected after concatenation: 5
[18:01:14.065]  - Number of values expected: 5
[18:01:14.065] Reducing values from 2 chunks ... DONE
[18:01:14.066] future_lapply() ... DONE
[18:01:14.066] future_lapply() ...
[18:01:14.067] Generating random seeds ...
[18:01:14.067] Generating random seed streams for 5 elements ...
[18:01:14.067] Generating random seed streams for 5 elements ... DONE
[18:01:14.068] Generating random seeds ... DONE
[18:01:14.068] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[18:01:14.075] Number of chunks: 2
[18:01:14.075] getGlobalsAndPackagesXApply() ...
[18:01:14.075]  - future.globals: TRUE
[18:01:14.075] getGlobalsAndPackages() ...
[18:01:14.075] Searching for globals...
[18:01:14.078] - globals found: [2] ‘FUN’, ‘sample’
[18:01:14.079] Searching for globals ... DONE
[18:01:14.079] Resolving globals: FALSE
[18:01:14.079] The total size of the 1 globals is 616 bytes (616 bytes)
[18:01:14.080] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[18:01:14.080] - globals: [1] ‘FUN’
[18:01:14.081] 
[18:01:14.081] getGlobalsAndPackages() ... DONE
[18:01:14.081]  - globals found/used: [n=1] ‘FUN’
[18:01:14.081]  - needed namespaces: [n=0] 
[18:01:14.081] Finding globals ... DONE
[18:01:14.082]  - use_args: TRUE
[18:01:14.082]  - Getting '...' globals ...
[18:01:14.082] resolve() on list ...
[18:01:14.083]  recursive: 0
[18:01:14.083]  length: 1
[18:01:14.083]  elements: ‘...’
[18:01:14.083]  length: 0 (resolved future 1)
[18:01:14.083] resolve() on list ... DONE
[18:01:14.084]    - '...' content: [n=0] 
[18:01:14.084] List of 1
[18:01:14.084]  $ ...: list()
[18:01:14.084]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:14.084]  - attr(*, "where")=List of 1
[18:01:14.084]   ..$ ...:<environment: 0x635eb70c5028> 
[18:01:14.084]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:14.084]  - attr(*, "resolved")= logi TRUE
[18:01:14.084]  - attr(*, "total_size")= num NA
[18:01:14.089]  - Getting '...' globals ... DONE
[18:01:14.089] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[18:01:14.089] List of 2
[18:01:14.089]  $ ...future.FUN:function (...)  
[18:01:14.089]  $ ...          : list()
[18:01:14.089]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:14.089]  - attr(*, "where")=List of 2
[18:01:14.089]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[18:01:14.089]   ..$ ...          :<environment: 0x635eb70c5028> 
[18:01:14.089]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:14.089]  - attr(*, "resolved")= logi FALSE
[18:01:14.089]  - attr(*, "total_size")= num 616
[18:01:14.098] Packages to be attached in all futures: [n=0] 
[18:01:14.098] getGlobalsAndPackagesXApply() ... DONE
[18:01:14.098] Number of futures (= number of chunks): 2
[18:01:14.099] Launching 2 futures (chunks) ...
[18:01:14.099] Chunk #1 of 2 ...
[18:01:14.099]  - Finding globals in 'X' for chunk #1 ...
[18:01:14.099] getGlobalsAndPackages() ...
[18:01:14.099] Searching for globals...
[18:01:14.100] 
[18:01:14.100] Searching for globals ... DONE
[18:01:14.100] - globals: [0] <none>
[18:01:14.100] getGlobalsAndPackages() ... DONE
[18:01:14.101]    + additional globals found: [n=0] 
[18:01:14.101]    + additional namespaces needed: [n=0] 
[18:01:14.101]  - Finding globals in 'X' for chunk #1 ... DONE
[18:01:14.101]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:14.101]  - seeds: [2] <seeds>
[18:01:14.102]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.102] getGlobalsAndPackages() ...
[18:01:14.102] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.102] Resolving globals: FALSE
[18:01:14.103] Tweak future expression to call with '...' arguments ...
[18:01:14.103] {
[18:01:14.103]     do.call(function(...) {
[18:01:14.103]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.103]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:14.103]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.103]             on.exit(options(oopts), add = TRUE)
[18:01:14.103]         }
[18:01:14.103]         {
[18:01:14.103]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:14.103]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.103]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.103]                   envir = globalenv(), inherits = FALSE)
[18:01:14.103]                 ...future.FUN(...future.X_jj, ...)
[18:01:14.103]             })
[18:01:14.103]         }
[18:01:14.103]     }, args = future.call.arguments)
[18:01:14.103] }
[18:01:14.103] Tweak future expression to call with '...' arguments ... DONE
[18:01:14.104] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.104] 
[18:01:14.104] getGlobalsAndPackages() ... DONE
[18:01:14.105] run() for ‘Future’ ...
[18:01:14.105] - state: ‘created’
[18:01:14.105] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:01:14.127] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:14.128] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:01:14.128]   - Field: ‘node’
[18:01:14.128]   - Field: ‘label’
[18:01:14.128]   - Field: ‘local’
[18:01:14.128]   - Field: ‘owner’
[18:01:14.129]   - Field: ‘envir’
[18:01:14.129]   - Field: ‘workers’
[18:01:14.129]   - Field: ‘packages’
[18:01:14.129]   - Field: ‘gc’
[18:01:14.129]   - Field: ‘conditions’
[18:01:14.130]   - Field: ‘persistent’
[18:01:14.130]   - Field: ‘expr’
[18:01:14.130]   - Field: ‘uuid’
[18:01:14.130]   - Field: ‘seed’
[18:01:14.130]   - Field: ‘version’
[18:01:14.131]   - Field: ‘result’
[18:01:14.131]   - Field: ‘asynchronous’
[18:01:14.131]   - Field: ‘calls’
[18:01:14.131]   - Field: ‘globals’
[18:01:14.131]   - Field: ‘stdout’
[18:01:14.132]   - Field: ‘earlySignal’
[18:01:14.132]   - Field: ‘lazy’
[18:01:14.132]   - Field: ‘state’
[18:01:14.132] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:01:14.132] - Launch lazy future ...
[18:01:14.133] Packages needed by the future expression (n = 0): <none>
[18:01:14.133] Packages needed by future strategies (n = 0): <none>
[18:01:14.134] {
[18:01:14.134]     {
[18:01:14.134]         {
[18:01:14.134]             ...future.startTime <- base::Sys.time()
[18:01:14.134]             {
[18:01:14.134]                 {
[18:01:14.134]                   {
[18:01:14.134]                     {
[18:01:14.134]                       base::local({
[18:01:14.134]                         has_future <- base::requireNamespace("future", 
[18:01:14.134]                           quietly = TRUE)
[18:01:14.134]                         if (has_future) {
[18:01:14.134]                           ns <- base::getNamespace("future")
[18:01:14.134]                           version <- ns[[".package"]][["version"]]
[18:01:14.134]                           if (is.null(version)) 
[18:01:14.134]                             version <- utils::packageVersion("future")
[18:01:14.134]                         }
[18:01:14.134]                         else {
[18:01:14.134]                           version <- NULL
[18:01:14.134]                         }
[18:01:14.134]                         if (!has_future || version < "1.8.0") {
[18:01:14.134]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:14.134]                             "", base::R.version$version.string), 
[18:01:14.134]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:14.134]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:14.134]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:14.134]                               "release", "version")], collapse = " "), 
[18:01:14.134]                             hostname = base::Sys.info()[["nodename"]])
[18:01:14.134]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:14.134]                             info)
[18:01:14.134]                           info <- base::paste(info, collapse = "; ")
[18:01:14.134]                           if (!has_future) {
[18:01:14.134]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:14.134]                               info)
[18:01:14.134]                           }
[18:01:14.134]                           else {
[18:01:14.134]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:14.134]                               info, version)
[18:01:14.134]                           }
[18:01:14.134]                           base::stop(msg)
[18:01:14.134]                         }
[18:01:14.134]                       })
[18:01:14.134]                     }
[18:01:14.134]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:14.134]                     base::options(mc.cores = 1L)
[18:01:14.134]                   }
[18:01:14.134]                   ...future.strategy.old <- future::plan("list")
[18:01:14.134]                   options(future.plan = NULL)
[18:01:14.134]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:14.134]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:14.134]                 }
[18:01:14.134]                 ...future.workdir <- getwd()
[18:01:14.134]             }
[18:01:14.134]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:14.134]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:14.134]         }
[18:01:14.134]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:14.134]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:14.134]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:14.134]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:14.134]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:14.134]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:14.134]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:14.134]             base::names(...future.oldOptions))
[18:01:14.134]     }
[18:01:14.134]     if (FALSE) {
[18:01:14.134]     }
[18:01:14.134]     else {
[18:01:14.134]         if (TRUE) {
[18:01:14.134]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:14.134]                 open = "w")
[18:01:14.134]         }
[18:01:14.134]         else {
[18:01:14.134]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:14.134]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:14.134]         }
[18:01:14.134]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:14.134]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:14.134]             base::sink(type = "output", split = FALSE)
[18:01:14.134]             base::close(...future.stdout)
[18:01:14.134]         }, add = TRUE)
[18:01:14.134]     }
[18:01:14.134]     ...future.frame <- base::sys.nframe()
[18:01:14.134]     ...future.conditions <- base::list()
[18:01:14.134]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:14.134]     if (FALSE) {
[18:01:14.134]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:14.134]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:14.134]     }
[18:01:14.134]     ...future.result <- base::tryCatch({
[18:01:14.134]         base::withCallingHandlers({
[18:01:14.134]             ...future.value <- base::withVisible(base::local({
[18:01:14.134]                 ...future.makeSendCondition <- base::local({
[18:01:14.134]                   sendCondition <- NULL
[18:01:14.134]                   function(frame = 1L) {
[18:01:14.134]                     if (is.function(sendCondition)) 
[18:01:14.134]                       return(sendCondition)
[18:01:14.134]                     ns <- getNamespace("parallel")
[18:01:14.134]                     if (exists("sendData", mode = "function", 
[18:01:14.134]                       envir = ns)) {
[18:01:14.134]                       parallel_sendData <- get("sendData", mode = "function", 
[18:01:14.134]                         envir = ns)
[18:01:14.134]                       envir <- sys.frame(frame)
[18:01:14.134]                       master <- NULL
[18:01:14.134]                       while (!identical(envir, .GlobalEnv) && 
[18:01:14.134]                         !identical(envir, emptyenv())) {
[18:01:14.134]                         if (exists("master", mode = "list", envir = envir, 
[18:01:14.134]                           inherits = FALSE)) {
[18:01:14.134]                           master <- get("master", mode = "list", 
[18:01:14.134]                             envir = envir, inherits = FALSE)
[18:01:14.134]                           if (inherits(master, c("SOCKnode", 
[18:01:14.134]                             "SOCK0node"))) {
[18:01:14.134]                             sendCondition <<- function(cond) {
[18:01:14.134]                               data <- list(type = "VALUE", value = cond, 
[18:01:14.134]                                 success = TRUE)
[18:01:14.134]                               parallel_sendData(master, data)
[18:01:14.134]                             }
[18:01:14.134]                             return(sendCondition)
[18:01:14.134]                           }
[18:01:14.134]                         }
[18:01:14.134]                         frame <- frame + 1L
[18:01:14.134]                         envir <- sys.frame(frame)
[18:01:14.134]                       }
[18:01:14.134]                     }
[18:01:14.134]                     sendCondition <<- function(cond) NULL
[18:01:14.134]                   }
[18:01:14.134]                 })
[18:01:14.134]                 withCallingHandlers({
[18:01:14.134]                   {
[18:01:14.134]                     do.call(function(...) {
[18:01:14.134]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.134]                       if (!identical(...future.globals.maxSize.org, 
[18:01:14.134]                         ...future.globals.maxSize)) {
[18:01:14.134]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.134]                         on.exit(options(oopts), add = TRUE)
[18:01:14.134]                       }
[18:01:14.134]                       {
[18:01:14.134]                         lapply(seq_along(...future.elements_ii), 
[18:01:14.134]                           FUN = function(jj) {
[18:01:14.134]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.134]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.134]                               envir = globalenv(), inherits = FALSE)
[18:01:14.134]                             ...future.FUN(...future.X_jj, ...)
[18:01:14.134]                           })
[18:01:14.134]                       }
[18:01:14.134]                     }, args = future.call.arguments)
[18:01:14.134]                   }
[18:01:14.134]                 }, immediateCondition = function(cond) {
[18:01:14.134]                   sendCondition <- ...future.makeSendCondition()
[18:01:14.134]                   sendCondition(cond)
[18:01:14.134]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.134]                   {
[18:01:14.134]                     inherits <- base::inherits
[18:01:14.134]                     invokeRestart <- base::invokeRestart
[18:01:14.134]                     is.null <- base::is.null
[18:01:14.134]                     muffled <- FALSE
[18:01:14.134]                     if (inherits(cond, "message")) {
[18:01:14.134]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:14.134]                       if (muffled) 
[18:01:14.134]                         invokeRestart("muffleMessage")
[18:01:14.134]                     }
[18:01:14.134]                     else if (inherits(cond, "warning")) {
[18:01:14.134]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:14.134]                       if (muffled) 
[18:01:14.134]                         invokeRestart("muffleWarning")
[18:01:14.134]                     }
[18:01:14.134]                     else if (inherits(cond, "condition")) {
[18:01:14.134]                       if (!is.null(pattern)) {
[18:01:14.134]                         computeRestarts <- base::computeRestarts
[18:01:14.134]                         grepl <- base::grepl
[18:01:14.134]                         restarts <- computeRestarts(cond)
[18:01:14.134]                         for (restart in restarts) {
[18:01:14.134]                           name <- restart$name
[18:01:14.134]                           if (is.null(name)) 
[18:01:14.134]                             next
[18:01:14.134]                           if (!grepl(pattern, name)) 
[18:01:14.134]                             next
[18:01:14.134]                           invokeRestart(restart)
[18:01:14.134]                           muffled <- TRUE
[18:01:14.134]                           break
[18:01:14.134]                         }
[18:01:14.134]                       }
[18:01:14.134]                     }
[18:01:14.134]                     invisible(muffled)
[18:01:14.134]                   }
[18:01:14.134]                   muffleCondition(cond)
[18:01:14.134]                 })
[18:01:14.134]             }))
[18:01:14.134]             future::FutureResult(value = ...future.value$value, 
[18:01:14.134]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:14.134]                   ...future.rng), globalenv = if (FALSE) 
[18:01:14.134]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:14.134]                     ...future.globalenv.names))
[18:01:14.134]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:14.134]         }, condition = base::local({
[18:01:14.134]             c <- base::c
[18:01:14.134]             inherits <- base::inherits
[18:01:14.134]             invokeRestart <- base::invokeRestart
[18:01:14.134]             length <- base::length
[18:01:14.134]             list <- base::list
[18:01:14.134]             seq.int <- base::seq.int
[18:01:14.134]             signalCondition <- base::signalCondition
[18:01:14.134]             sys.calls <- base::sys.calls
[18:01:14.134]             `[[` <- base::`[[`
[18:01:14.134]             `+` <- base::`+`
[18:01:14.134]             `<<-` <- base::`<<-`
[18:01:14.134]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:14.134]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:14.134]                   3L)]
[18:01:14.134]             }
[18:01:14.134]             function(cond) {
[18:01:14.134]                 is_error <- inherits(cond, "error")
[18:01:14.134]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:14.134]                   NULL)
[18:01:14.134]                 if (is_error) {
[18:01:14.134]                   sessionInformation <- function() {
[18:01:14.134]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:14.134]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:14.134]                       search = base::search(), system = base::Sys.info())
[18:01:14.134]                   }
[18:01:14.134]                   ...future.conditions[[length(...future.conditions) + 
[18:01:14.134]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:14.134]                     cond$call), session = sessionInformation(), 
[18:01:14.134]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:14.134]                   signalCondition(cond)
[18:01:14.134]                 }
[18:01:14.134]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:14.134]                 "immediateCondition"))) {
[18:01:14.134]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:14.134]                   ...future.conditions[[length(...future.conditions) + 
[18:01:14.134]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:14.134]                   if (TRUE && !signal) {
[18:01:14.134]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.134]                     {
[18:01:14.134]                       inherits <- base::inherits
[18:01:14.134]                       invokeRestart <- base::invokeRestart
[18:01:14.134]                       is.null <- base::is.null
[18:01:14.134]                       muffled <- FALSE
[18:01:14.134]                       if (inherits(cond, "message")) {
[18:01:14.134]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:14.134]                         if (muffled) 
[18:01:14.134]                           invokeRestart("muffleMessage")
[18:01:14.134]                       }
[18:01:14.134]                       else if (inherits(cond, "warning")) {
[18:01:14.134]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:14.134]                         if (muffled) 
[18:01:14.134]                           invokeRestart("muffleWarning")
[18:01:14.134]                       }
[18:01:14.134]                       else if (inherits(cond, "condition")) {
[18:01:14.134]                         if (!is.null(pattern)) {
[18:01:14.134]                           computeRestarts <- base::computeRestarts
[18:01:14.134]                           grepl <- base::grepl
[18:01:14.134]                           restarts <- computeRestarts(cond)
[18:01:14.134]                           for (restart in restarts) {
[18:01:14.134]                             name <- restart$name
[18:01:14.134]                             if (is.null(name)) 
[18:01:14.134]                               next
[18:01:14.134]                             if (!grepl(pattern, name)) 
[18:01:14.134]                               next
[18:01:14.134]                             invokeRestart(restart)
[18:01:14.134]                             muffled <- TRUE
[18:01:14.134]                             break
[18:01:14.134]                           }
[18:01:14.134]                         }
[18:01:14.134]                       }
[18:01:14.134]                       invisible(muffled)
[18:01:14.134]                     }
[18:01:14.134]                     muffleCondition(cond, pattern = "^muffle")
[18:01:14.134]                   }
[18:01:14.134]                 }
[18:01:14.134]                 else {
[18:01:14.134]                   if (TRUE) {
[18:01:14.134]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.134]                     {
[18:01:14.134]                       inherits <- base::inherits
[18:01:14.134]                       invokeRestart <- base::invokeRestart
[18:01:14.134]                       is.null <- base::is.null
[18:01:14.134]                       muffled <- FALSE
[18:01:14.134]                       if (inherits(cond, "message")) {
[18:01:14.134]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:14.134]                         if (muffled) 
[18:01:14.134]                           invokeRestart("muffleMessage")
[18:01:14.134]                       }
[18:01:14.134]                       else if (inherits(cond, "warning")) {
[18:01:14.134]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:14.134]                         if (muffled) 
[18:01:14.134]                           invokeRestart("muffleWarning")
[18:01:14.134]                       }
[18:01:14.134]                       else if (inherits(cond, "condition")) {
[18:01:14.134]                         if (!is.null(pattern)) {
[18:01:14.134]                           computeRestarts <- base::computeRestarts
[18:01:14.134]                           grepl <- base::grepl
[18:01:14.134]                           restarts <- computeRestarts(cond)
[18:01:14.134]                           for (restart in restarts) {
[18:01:14.134]                             name <- restart$name
[18:01:14.134]                             if (is.null(name)) 
[18:01:14.134]                               next
[18:01:14.134]                             if (!grepl(pattern, name)) 
[18:01:14.134]                               next
[18:01:14.134]                             invokeRestart(restart)
[18:01:14.134]                             muffled <- TRUE
[18:01:14.134]                             break
[18:01:14.134]                           }
[18:01:14.134]                         }
[18:01:14.134]                       }
[18:01:14.134]                       invisible(muffled)
[18:01:14.134]                     }
[18:01:14.134]                     muffleCondition(cond, pattern = "^muffle")
[18:01:14.134]                   }
[18:01:14.134]                 }
[18:01:14.134]             }
[18:01:14.134]         }))
[18:01:14.134]     }, error = function(ex) {
[18:01:14.134]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:14.134]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:14.134]                 ...future.rng), started = ...future.startTime, 
[18:01:14.134]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:14.134]             version = "1.8"), class = "FutureResult")
[18:01:14.134]     }, finally = {
[18:01:14.134]         if (!identical(...future.workdir, getwd())) 
[18:01:14.134]             setwd(...future.workdir)
[18:01:14.134]         {
[18:01:14.134]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:14.134]                 ...future.oldOptions$nwarnings <- NULL
[18:01:14.134]             }
[18:01:14.134]             base::options(...future.oldOptions)
[18:01:14.134]             if (.Platform$OS.type == "windows") {
[18:01:14.134]                 old_names <- names(...future.oldEnvVars)
[18:01:14.134]                 envs <- base::Sys.getenv()
[18:01:14.134]                 names <- names(envs)
[18:01:14.134]                 common <- intersect(names, old_names)
[18:01:14.134]                 added <- setdiff(names, old_names)
[18:01:14.134]                 removed <- setdiff(old_names, names)
[18:01:14.134]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:14.134]                   envs[common]]
[18:01:14.134]                 NAMES <- toupper(changed)
[18:01:14.134]                 args <- list()
[18:01:14.134]                 for (kk in seq_along(NAMES)) {
[18:01:14.134]                   name <- changed[[kk]]
[18:01:14.134]                   NAME <- NAMES[[kk]]
[18:01:14.134]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.134]                     next
[18:01:14.134]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:14.134]                 }
[18:01:14.134]                 NAMES <- toupper(added)
[18:01:14.134]                 for (kk in seq_along(NAMES)) {
[18:01:14.134]                   name <- added[[kk]]
[18:01:14.134]                   NAME <- NAMES[[kk]]
[18:01:14.134]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.134]                     next
[18:01:14.134]                   args[[name]] <- ""
[18:01:14.134]                 }
[18:01:14.134]                 NAMES <- toupper(removed)
[18:01:14.134]                 for (kk in seq_along(NAMES)) {
[18:01:14.134]                   name <- removed[[kk]]
[18:01:14.134]                   NAME <- NAMES[[kk]]
[18:01:14.134]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.134]                     next
[18:01:14.134]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:14.134]                 }
[18:01:14.134]                 if (length(args) > 0) 
[18:01:14.134]                   base::do.call(base::Sys.setenv, args = args)
[18:01:14.134]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:14.134]             }
[18:01:14.134]             else {
[18:01:14.134]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:14.134]             }
[18:01:14.134]             {
[18:01:14.134]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:14.134]                   0L) {
[18:01:14.134]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:14.134]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:14.134]                   base::options(opts)
[18:01:14.134]                 }
[18:01:14.134]                 {
[18:01:14.134]                   {
[18:01:14.134]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:14.134]                     NULL
[18:01:14.134]                   }
[18:01:14.134]                   options(future.plan = NULL)
[18:01:14.134]                   if (is.na(NA_character_)) 
[18:01:14.134]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:14.134]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:14.134]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:14.134]                     .init = FALSE)
[18:01:14.134]                 }
[18:01:14.134]             }
[18:01:14.134]         }
[18:01:14.134]     })
[18:01:14.134]     if (TRUE) {
[18:01:14.134]         base::sink(type = "output", split = FALSE)
[18:01:14.134]         if (TRUE) {
[18:01:14.134]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:14.134]         }
[18:01:14.134]         else {
[18:01:14.134]             ...future.result["stdout"] <- base::list(NULL)
[18:01:14.134]         }
[18:01:14.134]         base::close(...future.stdout)
[18:01:14.134]         ...future.stdout <- NULL
[18:01:14.134]     }
[18:01:14.134]     ...future.result$conditions <- ...future.conditions
[18:01:14.134]     ...future.result$finished <- base::Sys.time()
[18:01:14.134]     ...future.result
[18:01:14.134] }
[18:01:14.139] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[18:01:14.139] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[18:01:14.140] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[18:01:14.141] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[18:01:14.141] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[18:01:14.142] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[18:01:14.143] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[18:01:14.143] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[18:01:14.144] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[18:01:14.144] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[18:01:14.145] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[18:01:14.145] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[18:01:14.146] MultisessionFuture started
[18:01:14.146] - Launch lazy future ... done
[18:01:14.146] run() for ‘MultisessionFuture’ ... done
[18:01:14.147] Created future:
[18:01:14.147] MultisessionFuture:
[18:01:14.147] Label: ‘future_replicate-1’
[18:01:14.147] Expression:
[18:01:14.147] {
[18:01:14.147]     do.call(function(...) {
[18:01:14.147]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.147]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:14.147]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.147]             on.exit(options(oopts), add = TRUE)
[18:01:14.147]         }
[18:01:14.147]         {
[18:01:14.147]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:14.147]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.147]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.147]                   envir = globalenv(), inherits = FALSE)
[18:01:14.147]                 ...future.FUN(...future.X_jj, ...)
[18:01:14.147]             })
[18:01:14.147]         }
[18:01:14.147]     }, args = future.call.arguments)
[18:01:14.147] }
[18:01:14.147] Lazy evaluation: FALSE
[18:01:14.147] Asynchronous evaluation: TRUE
[18:01:14.147] Local evaluation: TRUE
[18:01:14.147] Environment: R_GlobalEnv
[18:01:14.147] Capture standard output: TRUE
[18:01:14.147] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:14.147] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:14.147] Packages: <none>
[18:01:14.147] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:14.147] Resolved: FALSE
[18:01:14.147] Value: <not collected>
[18:01:14.147] Conditions captured: <none>
[18:01:14.147] Early signaling: FALSE
[18:01:14.147] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:14.147] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:14.160] Chunk #1 of 2 ... DONE
[18:01:14.160] Chunk #2 of 2 ...
[18:01:14.160]  - Finding globals in 'X' for chunk #2 ...
[18:01:14.161] getGlobalsAndPackages() ...
[18:01:14.161] Searching for globals...
[18:01:14.161] 
[18:01:14.162] Searching for globals ... DONE
[18:01:14.162] - globals: [0] <none>
[18:01:14.162] getGlobalsAndPackages() ... DONE
[18:01:14.162]    + additional globals found: [n=0] 
[18:01:14.162]    + additional namespaces needed: [n=0] 
[18:01:14.163]  - Finding globals in 'X' for chunk #2 ... DONE
[18:01:14.163]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:14.163]  - seeds: [3] <seeds>
[18:01:14.163]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.163] getGlobalsAndPackages() ...
[18:01:14.164] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.164] Resolving globals: FALSE
[18:01:14.164] Tweak future expression to call with '...' arguments ...
[18:01:14.164] {
[18:01:14.164]     do.call(function(...) {
[18:01:14.164]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.164]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:14.164]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.164]             on.exit(options(oopts), add = TRUE)
[18:01:14.164]         }
[18:01:14.164]         {
[18:01:14.164]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:14.164]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.164]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.164]                   envir = globalenv(), inherits = FALSE)
[18:01:14.164]                 ...future.FUN(...future.X_jj, ...)
[18:01:14.164]             })
[18:01:14.164]         }
[18:01:14.164]     }, args = future.call.arguments)
[18:01:14.164] }
[18:01:14.165] Tweak future expression to call with '...' arguments ... DONE
[18:01:14.166] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.166] 
[18:01:14.166] getGlobalsAndPackages() ... DONE
[18:01:14.167] run() for ‘Future’ ...
[18:01:14.167] - state: ‘created’
[18:01:14.167] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:01:14.192] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:14.192] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:01:14.192]   - Field: ‘node’
[18:01:14.193]   - Field: ‘label’
[18:01:14.193]   - Field: ‘local’
[18:01:14.193]   - Field: ‘owner’
[18:01:14.193]   - Field: ‘envir’
[18:01:14.193]   - Field: ‘workers’
[18:01:14.194]   - Field: ‘packages’
[18:01:14.194]   - Field: ‘gc’
[18:01:14.194]   - Field: ‘conditions’
[18:01:14.194]   - Field: ‘persistent’
[18:01:14.194]   - Field: ‘expr’
[18:01:14.195]   - Field: ‘uuid’
[18:01:14.195]   - Field: ‘seed’
[18:01:14.195]   - Field: ‘version’
[18:01:14.195]   - Field: ‘result’
[18:01:14.195]   - Field: ‘asynchronous’
[18:01:14.195]   - Field: ‘calls’
[18:01:14.196]   - Field: ‘globals’
[18:01:14.196]   - Field: ‘stdout’
[18:01:14.196]   - Field: ‘earlySignal’
[18:01:14.196]   - Field: ‘lazy’
[18:01:14.196]   - Field: ‘state’
[18:01:14.197] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:01:14.197] - Launch lazy future ...
[18:01:14.197] Packages needed by the future expression (n = 0): <none>
[18:01:14.198] Packages needed by future strategies (n = 0): <none>
[18:01:14.198] {
[18:01:14.198]     {
[18:01:14.198]         {
[18:01:14.198]             ...future.startTime <- base::Sys.time()
[18:01:14.198]             {
[18:01:14.198]                 {
[18:01:14.198]                   {
[18:01:14.198]                     {
[18:01:14.198]                       base::local({
[18:01:14.198]                         has_future <- base::requireNamespace("future", 
[18:01:14.198]                           quietly = TRUE)
[18:01:14.198]                         if (has_future) {
[18:01:14.198]                           ns <- base::getNamespace("future")
[18:01:14.198]                           version <- ns[[".package"]][["version"]]
[18:01:14.198]                           if (is.null(version)) 
[18:01:14.198]                             version <- utils::packageVersion("future")
[18:01:14.198]                         }
[18:01:14.198]                         else {
[18:01:14.198]                           version <- NULL
[18:01:14.198]                         }
[18:01:14.198]                         if (!has_future || version < "1.8.0") {
[18:01:14.198]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:14.198]                             "", base::R.version$version.string), 
[18:01:14.198]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:14.198]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:14.198]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:14.198]                               "release", "version")], collapse = " "), 
[18:01:14.198]                             hostname = base::Sys.info()[["nodename"]])
[18:01:14.198]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:14.198]                             info)
[18:01:14.198]                           info <- base::paste(info, collapse = "; ")
[18:01:14.198]                           if (!has_future) {
[18:01:14.198]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:14.198]                               info)
[18:01:14.198]                           }
[18:01:14.198]                           else {
[18:01:14.198]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:14.198]                               info, version)
[18:01:14.198]                           }
[18:01:14.198]                           base::stop(msg)
[18:01:14.198]                         }
[18:01:14.198]                       })
[18:01:14.198]                     }
[18:01:14.198]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:14.198]                     base::options(mc.cores = 1L)
[18:01:14.198]                   }
[18:01:14.198]                   ...future.strategy.old <- future::plan("list")
[18:01:14.198]                   options(future.plan = NULL)
[18:01:14.198]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:14.198]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:14.198]                 }
[18:01:14.198]                 ...future.workdir <- getwd()
[18:01:14.198]             }
[18:01:14.198]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:14.198]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:14.198]         }
[18:01:14.198]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:14.198]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:14.198]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:14.198]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:14.198]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:14.198]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:14.198]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:14.198]             base::names(...future.oldOptions))
[18:01:14.198]     }
[18:01:14.198]     if (FALSE) {
[18:01:14.198]     }
[18:01:14.198]     else {
[18:01:14.198]         if (TRUE) {
[18:01:14.198]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:14.198]                 open = "w")
[18:01:14.198]         }
[18:01:14.198]         else {
[18:01:14.198]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:14.198]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:14.198]         }
[18:01:14.198]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:14.198]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:14.198]             base::sink(type = "output", split = FALSE)
[18:01:14.198]             base::close(...future.stdout)
[18:01:14.198]         }, add = TRUE)
[18:01:14.198]     }
[18:01:14.198]     ...future.frame <- base::sys.nframe()
[18:01:14.198]     ...future.conditions <- base::list()
[18:01:14.198]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:14.198]     if (FALSE) {
[18:01:14.198]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:14.198]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:14.198]     }
[18:01:14.198]     ...future.result <- base::tryCatch({
[18:01:14.198]         base::withCallingHandlers({
[18:01:14.198]             ...future.value <- base::withVisible(base::local({
[18:01:14.198]                 ...future.makeSendCondition <- base::local({
[18:01:14.198]                   sendCondition <- NULL
[18:01:14.198]                   function(frame = 1L) {
[18:01:14.198]                     if (is.function(sendCondition)) 
[18:01:14.198]                       return(sendCondition)
[18:01:14.198]                     ns <- getNamespace("parallel")
[18:01:14.198]                     if (exists("sendData", mode = "function", 
[18:01:14.198]                       envir = ns)) {
[18:01:14.198]                       parallel_sendData <- get("sendData", mode = "function", 
[18:01:14.198]                         envir = ns)
[18:01:14.198]                       envir <- sys.frame(frame)
[18:01:14.198]                       master <- NULL
[18:01:14.198]                       while (!identical(envir, .GlobalEnv) && 
[18:01:14.198]                         !identical(envir, emptyenv())) {
[18:01:14.198]                         if (exists("master", mode = "list", envir = envir, 
[18:01:14.198]                           inherits = FALSE)) {
[18:01:14.198]                           master <- get("master", mode = "list", 
[18:01:14.198]                             envir = envir, inherits = FALSE)
[18:01:14.198]                           if (inherits(master, c("SOCKnode", 
[18:01:14.198]                             "SOCK0node"))) {
[18:01:14.198]                             sendCondition <<- function(cond) {
[18:01:14.198]                               data <- list(type = "VALUE", value = cond, 
[18:01:14.198]                                 success = TRUE)
[18:01:14.198]                               parallel_sendData(master, data)
[18:01:14.198]                             }
[18:01:14.198]                             return(sendCondition)
[18:01:14.198]                           }
[18:01:14.198]                         }
[18:01:14.198]                         frame <- frame + 1L
[18:01:14.198]                         envir <- sys.frame(frame)
[18:01:14.198]                       }
[18:01:14.198]                     }
[18:01:14.198]                     sendCondition <<- function(cond) NULL
[18:01:14.198]                   }
[18:01:14.198]                 })
[18:01:14.198]                 withCallingHandlers({
[18:01:14.198]                   {
[18:01:14.198]                     do.call(function(...) {
[18:01:14.198]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.198]                       if (!identical(...future.globals.maxSize.org, 
[18:01:14.198]                         ...future.globals.maxSize)) {
[18:01:14.198]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.198]                         on.exit(options(oopts), add = TRUE)
[18:01:14.198]                       }
[18:01:14.198]                       {
[18:01:14.198]                         lapply(seq_along(...future.elements_ii), 
[18:01:14.198]                           FUN = function(jj) {
[18:01:14.198]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.198]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.198]                               envir = globalenv(), inherits = FALSE)
[18:01:14.198]                             ...future.FUN(...future.X_jj, ...)
[18:01:14.198]                           })
[18:01:14.198]                       }
[18:01:14.198]                     }, args = future.call.arguments)
[18:01:14.198]                   }
[18:01:14.198]                 }, immediateCondition = function(cond) {
[18:01:14.198]                   sendCondition <- ...future.makeSendCondition()
[18:01:14.198]                   sendCondition(cond)
[18:01:14.198]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.198]                   {
[18:01:14.198]                     inherits <- base::inherits
[18:01:14.198]                     invokeRestart <- base::invokeRestart
[18:01:14.198]                     is.null <- base::is.null
[18:01:14.198]                     muffled <- FALSE
[18:01:14.198]                     if (inherits(cond, "message")) {
[18:01:14.198]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:14.198]                       if (muffled) 
[18:01:14.198]                         invokeRestart("muffleMessage")
[18:01:14.198]                     }
[18:01:14.198]                     else if (inherits(cond, "warning")) {
[18:01:14.198]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:14.198]                       if (muffled) 
[18:01:14.198]                         invokeRestart("muffleWarning")
[18:01:14.198]                     }
[18:01:14.198]                     else if (inherits(cond, "condition")) {
[18:01:14.198]                       if (!is.null(pattern)) {
[18:01:14.198]                         computeRestarts <- base::computeRestarts
[18:01:14.198]                         grepl <- base::grepl
[18:01:14.198]                         restarts <- computeRestarts(cond)
[18:01:14.198]                         for (restart in restarts) {
[18:01:14.198]                           name <- restart$name
[18:01:14.198]                           if (is.null(name)) 
[18:01:14.198]                             next
[18:01:14.198]                           if (!grepl(pattern, name)) 
[18:01:14.198]                             next
[18:01:14.198]                           invokeRestart(restart)
[18:01:14.198]                           muffled <- TRUE
[18:01:14.198]                           break
[18:01:14.198]                         }
[18:01:14.198]                       }
[18:01:14.198]                     }
[18:01:14.198]                     invisible(muffled)
[18:01:14.198]                   }
[18:01:14.198]                   muffleCondition(cond)
[18:01:14.198]                 })
[18:01:14.198]             }))
[18:01:14.198]             future::FutureResult(value = ...future.value$value, 
[18:01:14.198]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:14.198]                   ...future.rng), globalenv = if (FALSE) 
[18:01:14.198]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:14.198]                     ...future.globalenv.names))
[18:01:14.198]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:14.198]         }, condition = base::local({
[18:01:14.198]             c <- base::c
[18:01:14.198]             inherits <- base::inherits
[18:01:14.198]             invokeRestart <- base::invokeRestart
[18:01:14.198]             length <- base::length
[18:01:14.198]             list <- base::list
[18:01:14.198]             seq.int <- base::seq.int
[18:01:14.198]             signalCondition <- base::signalCondition
[18:01:14.198]             sys.calls <- base::sys.calls
[18:01:14.198]             `[[` <- base::`[[`
[18:01:14.198]             `+` <- base::`+`
[18:01:14.198]             `<<-` <- base::`<<-`
[18:01:14.198]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:14.198]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:14.198]                   3L)]
[18:01:14.198]             }
[18:01:14.198]             function(cond) {
[18:01:14.198]                 is_error <- inherits(cond, "error")
[18:01:14.198]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:14.198]                   NULL)
[18:01:14.198]                 if (is_error) {
[18:01:14.198]                   sessionInformation <- function() {
[18:01:14.198]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:14.198]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:14.198]                       search = base::search(), system = base::Sys.info())
[18:01:14.198]                   }
[18:01:14.198]                   ...future.conditions[[length(...future.conditions) + 
[18:01:14.198]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:14.198]                     cond$call), session = sessionInformation(), 
[18:01:14.198]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:14.198]                   signalCondition(cond)
[18:01:14.198]                 }
[18:01:14.198]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:14.198]                 "immediateCondition"))) {
[18:01:14.198]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:14.198]                   ...future.conditions[[length(...future.conditions) + 
[18:01:14.198]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:14.198]                   if (TRUE && !signal) {
[18:01:14.198]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.198]                     {
[18:01:14.198]                       inherits <- base::inherits
[18:01:14.198]                       invokeRestart <- base::invokeRestart
[18:01:14.198]                       is.null <- base::is.null
[18:01:14.198]                       muffled <- FALSE
[18:01:14.198]                       if (inherits(cond, "message")) {
[18:01:14.198]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:14.198]                         if (muffled) 
[18:01:14.198]                           invokeRestart("muffleMessage")
[18:01:14.198]                       }
[18:01:14.198]                       else if (inherits(cond, "warning")) {
[18:01:14.198]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:14.198]                         if (muffled) 
[18:01:14.198]                           invokeRestart("muffleWarning")
[18:01:14.198]                       }
[18:01:14.198]                       else if (inherits(cond, "condition")) {
[18:01:14.198]                         if (!is.null(pattern)) {
[18:01:14.198]                           computeRestarts <- base::computeRestarts
[18:01:14.198]                           grepl <- base::grepl
[18:01:14.198]                           restarts <- computeRestarts(cond)
[18:01:14.198]                           for (restart in restarts) {
[18:01:14.198]                             name <- restart$name
[18:01:14.198]                             if (is.null(name)) 
[18:01:14.198]                               next
[18:01:14.198]                             if (!grepl(pattern, name)) 
[18:01:14.198]                               next
[18:01:14.198]                             invokeRestart(restart)
[18:01:14.198]                             muffled <- TRUE
[18:01:14.198]                             break
[18:01:14.198]                           }
[18:01:14.198]                         }
[18:01:14.198]                       }
[18:01:14.198]                       invisible(muffled)
[18:01:14.198]                     }
[18:01:14.198]                     muffleCondition(cond, pattern = "^muffle")
[18:01:14.198]                   }
[18:01:14.198]                 }
[18:01:14.198]                 else {
[18:01:14.198]                   if (TRUE) {
[18:01:14.198]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.198]                     {
[18:01:14.198]                       inherits <- base::inherits
[18:01:14.198]                       invokeRestart <- base::invokeRestart
[18:01:14.198]                       is.null <- base::is.null
[18:01:14.198]                       muffled <- FALSE
[18:01:14.198]                       if (inherits(cond, "message")) {
[18:01:14.198]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:14.198]                         if (muffled) 
[18:01:14.198]                           invokeRestart("muffleMessage")
[18:01:14.198]                       }
[18:01:14.198]                       else if (inherits(cond, "warning")) {
[18:01:14.198]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:14.198]                         if (muffled) 
[18:01:14.198]                           invokeRestart("muffleWarning")
[18:01:14.198]                       }
[18:01:14.198]                       else if (inherits(cond, "condition")) {
[18:01:14.198]                         if (!is.null(pattern)) {
[18:01:14.198]                           computeRestarts <- base::computeRestarts
[18:01:14.198]                           grepl <- base::grepl
[18:01:14.198]                           restarts <- computeRestarts(cond)
[18:01:14.198]                           for (restart in restarts) {
[18:01:14.198]                             name <- restart$name
[18:01:14.198]                             if (is.null(name)) 
[18:01:14.198]                               next
[18:01:14.198]                             if (!grepl(pattern, name)) 
[18:01:14.198]                               next
[18:01:14.198]                             invokeRestart(restart)
[18:01:14.198]                             muffled <- TRUE
[18:01:14.198]                             break
[18:01:14.198]                           }
[18:01:14.198]                         }
[18:01:14.198]                       }
[18:01:14.198]                       invisible(muffled)
[18:01:14.198]                     }
[18:01:14.198]                     muffleCondition(cond, pattern = "^muffle")
[18:01:14.198]                   }
[18:01:14.198]                 }
[18:01:14.198]             }
[18:01:14.198]         }))
[18:01:14.198]     }, error = function(ex) {
[18:01:14.198]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:14.198]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:14.198]                 ...future.rng), started = ...future.startTime, 
[18:01:14.198]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:14.198]             version = "1.8"), class = "FutureResult")
[18:01:14.198]     }, finally = {
[18:01:14.198]         if (!identical(...future.workdir, getwd())) 
[18:01:14.198]             setwd(...future.workdir)
[18:01:14.198]         {
[18:01:14.198]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:14.198]                 ...future.oldOptions$nwarnings <- NULL
[18:01:14.198]             }
[18:01:14.198]             base::options(...future.oldOptions)
[18:01:14.198]             if (.Platform$OS.type == "windows") {
[18:01:14.198]                 old_names <- names(...future.oldEnvVars)
[18:01:14.198]                 envs <- base::Sys.getenv()
[18:01:14.198]                 names <- names(envs)
[18:01:14.198]                 common <- intersect(names, old_names)
[18:01:14.198]                 added <- setdiff(names, old_names)
[18:01:14.198]                 removed <- setdiff(old_names, names)
[18:01:14.198]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:14.198]                   envs[common]]
[18:01:14.198]                 NAMES <- toupper(changed)
[18:01:14.198]                 args <- list()
[18:01:14.198]                 for (kk in seq_along(NAMES)) {
[18:01:14.198]                   name <- changed[[kk]]
[18:01:14.198]                   NAME <- NAMES[[kk]]
[18:01:14.198]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.198]                     next
[18:01:14.198]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:14.198]                 }
[18:01:14.198]                 NAMES <- toupper(added)
[18:01:14.198]                 for (kk in seq_along(NAMES)) {
[18:01:14.198]                   name <- added[[kk]]
[18:01:14.198]                   NAME <- NAMES[[kk]]
[18:01:14.198]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.198]                     next
[18:01:14.198]                   args[[name]] <- ""
[18:01:14.198]                 }
[18:01:14.198]                 NAMES <- toupper(removed)
[18:01:14.198]                 for (kk in seq_along(NAMES)) {
[18:01:14.198]                   name <- removed[[kk]]
[18:01:14.198]                   NAME <- NAMES[[kk]]
[18:01:14.198]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.198]                     next
[18:01:14.198]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:14.198]                 }
[18:01:14.198]                 if (length(args) > 0) 
[18:01:14.198]                   base::do.call(base::Sys.setenv, args = args)
[18:01:14.198]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:14.198]             }
[18:01:14.198]             else {
[18:01:14.198]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:14.198]             }
[18:01:14.198]             {
[18:01:14.198]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:14.198]                   0L) {
[18:01:14.198]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:14.198]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:14.198]                   base::options(opts)
[18:01:14.198]                 }
[18:01:14.198]                 {
[18:01:14.198]                   {
[18:01:14.198]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:14.198]                     NULL
[18:01:14.198]                   }
[18:01:14.198]                   options(future.plan = NULL)
[18:01:14.198]                   if (is.na(NA_character_)) 
[18:01:14.198]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:14.198]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:14.198]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:14.198]                     .init = FALSE)
[18:01:14.198]                 }
[18:01:14.198]             }
[18:01:14.198]         }
[18:01:14.198]     })
[18:01:14.198]     if (TRUE) {
[18:01:14.198]         base::sink(type = "output", split = FALSE)
[18:01:14.198]         if (TRUE) {
[18:01:14.198]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:14.198]         }
[18:01:14.198]         else {
[18:01:14.198]             ...future.result["stdout"] <- base::list(NULL)
[18:01:14.198]         }
[18:01:14.198]         base::close(...future.stdout)
[18:01:14.198]         ...future.stdout <- NULL
[18:01:14.198]     }
[18:01:14.198]     ...future.result$conditions <- ...future.conditions
[18:01:14.198]     ...future.result$finished <- base::Sys.time()
[18:01:14.198]     ...future.result
[18:01:14.198] }
[18:01:14.204] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[18:01:14.204] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[18:01:14.205] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[18:01:14.206] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[18:01:14.206] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[18:01:14.207] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[18:01:14.208] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[18:01:14.208] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[18:01:14.209] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[18:01:14.209] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[18:01:14.210] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[18:01:14.210] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[18:01:14.211] MultisessionFuture started
[18:01:14.211] - Launch lazy future ... done
[18:01:14.212] run() for ‘MultisessionFuture’ ... done
[18:01:14.213] Created future:
[18:01:14.213] MultisessionFuture:
[18:01:14.213] Label: ‘future_replicate-2’
[18:01:14.213] Expression:
[18:01:14.213] {
[18:01:14.213]     do.call(function(...) {
[18:01:14.213]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.213]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:14.213]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.213]             on.exit(options(oopts), add = TRUE)
[18:01:14.213]         }
[18:01:14.213]         {
[18:01:14.213]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:14.213]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.213]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.213]                   envir = globalenv(), inherits = FALSE)
[18:01:14.213]                 ...future.FUN(...future.X_jj, ...)
[18:01:14.213]             })
[18:01:14.213]         }
[18:01:14.213]     }, args = future.call.arguments)
[18:01:14.213] }
[18:01:14.213] Lazy evaluation: FALSE
[18:01:14.213] Asynchronous evaluation: TRUE
[18:01:14.213] Local evaluation: TRUE
[18:01:14.213] Environment: R_GlobalEnv
[18:01:14.213] Capture standard output: TRUE
[18:01:14.213] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:14.213] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:14.213] Packages: <none>
[18:01:14.213] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:14.213] Resolved: FALSE
[18:01:14.213] Value: <not collected>
[18:01:14.213] Conditions captured: <none>
[18:01:14.213] Early signaling: FALSE
[18:01:14.213] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:14.213] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:14.226] Chunk #2 of 2 ... DONE
[18:01:14.226] Launching 2 futures (chunks) ... DONE
[18:01:14.227] Resolving 2 futures (chunks) ...
[18:01:14.227] resolve() on list ...
[18:01:14.227]  recursive: 0
[18:01:14.227]  length: 2
[18:01:14.227] 
[18:01:14.228] receiveMessageFromWorker() for ClusterFuture ...
[18:01:14.229] - Validating connection of MultisessionFuture
[18:01:14.229] - received message: FutureResult
[18:01:14.229] - Received FutureResult
[18:01:14.230] - Erased future from FutureRegistry
[18:01:14.230] result() for ClusterFuture ...
[18:01:14.230] - result already collected: FutureResult
[18:01:14.230] result() for ClusterFuture ... done
[18:01:14.230] receiveMessageFromWorker() for ClusterFuture ... done
[18:01:14.231] Future #1
[18:01:14.231] result() for ClusterFuture ...
[18:01:14.231] - result already collected: FutureResult
[18:01:14.231] result() for ClusterFuture ... done
[18:01:14.231] result() for ClusterFuture ...
[18:01:14.231] - result already collected: FutureResult
[18:01:14.232] result() for ClusterFuture ... done
[18:01:14.232] signalConditionsASAP(MultisessionFuture, pos=1) ...
[18:01:14.232] - nx: 2
[18:01:14.232] - relay: TRUE
[18:01:14.232] - stdout: TRUE
[18:01:14.233] - signal: TRUE
[18:01:14.233] - resignal: FALSE
[18:01:14.233] - force: TRUE
[18:01:14.233] - relayed: [n=2] FALSE, FALSE
[18:01:14.233] - queued futures: [n=2] FALSE, FALSE
[18:01:14.233]  - until=1
[18:01:14.234]  - relaying element #1
[18:01:14.234] result() for ClusterFuture ...
[18:01:14.234] - result already collected: FutureResult
[18:01:14.234] result() for ClusterFuture ... done
[18:01:14.234] result() for ClusterFuture ...
[18:01:14.235] - result already collected: FutureResult
[18:01:14.235] result() for ClusterFuture ... done
[18:01:14.235] result() for ClusterFuture ...
[18:01:14.235] - result already collected: FutureResult
[18:01:14.235] result() for ClusterFuture ... done
[18:01:14.236] result() for ClusterFuture ...
[18:01:14.236] - result already collected: FutureResult
[18:01:14.236] result() for ClusterFuture ... done
[18:01:14.236] - relayed: [n=2] TRUE, FALSE
[18:01:14.236] - queued futures: [n=2] TRUE, FALSE
[18:01:14.236] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[18:01:14.237]  length: 1 (resolved future 1)
[18:01:14.259] receiveMessageFromWorker() for ClusterFuture ...
[18:01:14.259] - Validating connection of MultisessionFuture
[18:01:14.259] - received message: FutureResult
[18:01:14.260] - Received FutureResult
[18:01:14.260] - Erased future from FutureRegistry
[18:01:14.260] result() for ClusterFuture ...
[18:01:14.260] - result already collected: FutureResult
[18:01:14.260] result() for ClusterFuture ... done
[18:01:14.261] receiveMessageFromWorker() for ClusterFuture ... done
[18:01:14.261] Future #2
[18:01:14.261] result() for ClusterFuture ...
[18:01:14.261] - result already collected: FutureResult
[18:01:14.261] result() for ClusterFuture ... done
[18:01:14.261] result() for ClusterFuture ...
[18:01:14.262] - result already collected: FutureResult
[18:01:14.262] result() for ClusterFuture ... done
[18:01:14.262] signalConditionsASAP(MultisessionFuture, pos=2) ...
[18:01:14.262] - nx: 2
[18:01:14.262] - relay: TRUE
[18:01:14.263] - stdout: TRUE
[18:01:14.263] - signal: TRUE
[18:01:14.263] - resignal: FALSE
[18:01:14.263] - force: TRUE
[18:01:14.263] - relayed: [n=2] TRUE, FALSE
[18:01:14.263] - queued futures: [n=2] TRUE, FALSE
[18:01:14.264]  - until=2
[18:01:14.264]  - relaying element #2
[18:01:14.264] result() for ClusterFuture ...
[18:01:14.264] - result already collected: FutureResult
[18:01:14.264] result() for ClusterFuture ... done
[18:01:14.265] result() for ClusterFuture ...
[18:01:14.265] - result already collected: FutureResult
[18:01:14.265] result() for ClusterFuture ... done
[18:01:14.265] result() for ClusterFuture ...
[18:01:14.265] - result already collected: FutureResult
[18:01:14.266] result() for ClusterFuture ... done
[18:01:14.266] result() for ClusterFuture ...
[18:01:14.266] - result already collected: FutureResult
[18:01:14.266] result() for ClusterFuture ... done
[18:01:14.266] - relayed: [n=2] TRUE, TRUE
[18:01:14.266] - queued futures: [n=2] TRUE, TRUE
[18:01:14.267] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[18:01:14.267]  length: 0 (resolved future 2)
[18:01:14.267] Relaying remaining futures
[18:01:14.267] signalConditionsASAP(NULL, pos=0) ...
[18:01:14.267] - nx: 2
[18:01:14.268] - relay: TRUE
[18:01:14.268] - stdout: TRUE
[18:01:14.268] - signal: TRUE
[18:01:14.268] - resignal: FALSE
[18:01:14.268] - force: TRUE
[18:01:14.268] - relayed: [n=2] TRUE, TRUE
[18:01:14.269] - queued futures: [n=2] TRUE, TRUE
 - flush all
[18:01:14.269] - relayed: [n=2] TRUE, TRUE
[18:01:14.269] - queued futures: [n=2] TRUE, TRUE
[18:01:14.269] signalConditionsASAP(NULL, pos=0) ... done
[18:01:14.269] resolve() on list ... DONE
[18:01:14.270] result() for ClusterFuture ...
[18:01:14.270] - result already collected: FutureResult
[18:01:14.270] result() for ClusterFuture ... done
[18:01:14.270] result() for ClusterFuture ...
[18:01:14.270] - result already collected: FutureResult
[18:01:14.271] result() for ClusterFuture ... done
[18:01:14.271] result() for ClusterFuture ...
[18:01:14.271] - result already collected: FutureResult
[18:01:14.271] result() for ClusterFuture ... done
[18:01:14.271] result() for ClusterFuture ...
[18:01:14.272] - result already collected: FutureResult
[18:01:14.272] result() for ClusterFuture ... done
[18:01:14.272]  - Number of value chunks collected: 2
[18:01:14.272] Resolving 2 futures (chunks) ... DONE
[18:01:14.272] Reducing values from 2 chunks ...
[18:01:14.272]  - Number of values collected after concatenation: 5
[18:01:14.273]  - Number of values expected: 5
[18:01:14.273] Reducing values from 2 chunks ... DONE
[18:01:14.273] future_lapply() ... DONE
[18:01:14.273] future_lapply() ...
[18:01:14.274] Generating random seeds ...
[18:01:14.274] Generating random seed streams for 5 elements ...
[18:01:14.275] Generating random seed streams for 5 elements ... DONE
[18:01:14.275] Generating random seeds ... DONE
[18:01:14.275] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[18:01:14.282] Number of chunks: 2
[18:01:14.282] getGlobalsAndPackagesXApply() ...
[18:01:14.282]  - future.globals: TRUE
[18:01:14.283] getGlobalsAndPackages() ...
[18:01:14.283] Searching for globals...
[18:01:14.285] - globals found: [2] ‘FUN’, ‘sample’
[18:01:14.285] Searching for globals ... DONE
[18:01:14.285] Resolving globals: FALSE
[18:01:14.286] The total size of the 1 globals is 616 bytes (616 bytes)
[18:01:14.287] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[18:01:14.287] - globals: [1] ‘FUN’
[18:01:14.287] 
[18:01:14.288] getGlobalsAndPackages() ... DONE
[18:01:14.288]  - globals found/used: [n=1] ‘FUN’
[18:01:14.288]  - needed namespaces: [n=0] 
[18:01:14.288] Finding globals ... DONE
[18:01:14.288]  - use_args: TRUE
[18:01:14.289]  - Getting '...' globals ...
[18:01:14.289] resolve() on list ...
[18:01:14.289]  recursive: 0
[18:01:14.290]  length: 1
[18:01:14.290]  elements: ‘...’
[18:01:14.290]  length: 0 (resolved future 1)
[18:01:14.290] resolve() on list ... DONE
[18:01:14.290]    - '...' content: [n=0] 
[18:01:14.291] List of 1
[18:01:14.291]  $ ...: list()
[18:01:14.291]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:14.291]  - attr(*, "where")=List of 1
[18:01:14.291]   ..$ ...:<environment: 0x635eb65f9cd0> 
[18:01:14.291]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:14.291]  - attr(*, "resolved")= logi TRUE
[18:01:14.291]  - attr(*, "total_size")= num NA
[18:01:14.296]  - Getting '...' globals ... DONE
[18:01:14.296] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[18:01:14.296] List of 2
[18:01:14.296]  $ ...future.FUN:function (...)  
[18:01:14.296]  $ ...          : list()
[18:01:14.296]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:14.296]  - attr(*, "where")=List of 2
[18:01:14.296]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[18:01:14.296]   ..$ ...          :<environment: 0x635eb65f9cd0> 
[18:01:14.296]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:14.296]  - attr(*, "resolved")= logi FALSE
[18:01:14.296]  - attr(*, "total_size")= num 616
[18:01:14.302] Packages to be attached in all futures: [n=0] 
[18:01:14.302] getGlobalsAndPackagesXApply() ... DONE
[18:01:14.303] Number of futures (= number of chunks): 2
[18:01:14.303] Launching 2 futures (chunks) ...
[18:01:14.303] Chunk #1 of 2 ...
[18:01:14.303]  - Finding globals in 'X' for chunk #1 ...
[18:01:14.303] getGlobalsAndPackages() ...
[18:01:14.304] Searching for globals...
[18:01:14.304] 
[18:01:14.304] Searching for globals ... DONE
[18:01:14.305] - globals: [0] <none>
[18:01:14.305] getGlobalsAndPackages() ... DONE
[18:01:14.305]    + additional globals found: [n=0] 
[18:01:14.305]    + additional namespaces needed: [n=0] 
[18:01:14.305]  - Finding globals in 'X' for chunk #1 ... DONE
[18:01:14.305]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:14.306]  - seeds: [2] <seeds>
[18:01:14.306]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.306] getGlobalsAndPackages() ...
[18:01:14.306] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.307] Resolving globals: FALSE
[18:01:14.307] Tweak future expression to call with '...' arguments ...
[18:01:14.307] {
[18:01:14.307]     do.call(function(...) {
[18:01:14.307]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.307]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:14.307]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.307]             on.exit(options(oopts), add = TRUE)
[18:01:14.307]         }
[18:01:14.307]         {
[18:01:14.307]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:14.307]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.307]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.307]                   envir = globalenv(), inherits = FALSE)
[18:01:14.307]                 ...future.FUN(...future.X_jj, ...)
[18:01:14.307]             })
[18:01:14.307]         }
[18:01:14.307]     }, args = future.call.arguments)
[18:01:14.307] }
[18:01:14.307] Tweak future expression to call with '...' arguments ... DONE
[18:01:14.308] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.308] 
[18:01:14.309] getGlobalsAndPackages() ... DONE
[18:01:14.309] run() for ‘Future’ ...
[18:01:14.309] - state: ‘created’
[18:01:14.310] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:01:14.336] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:14.336] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:01:14.336]   - Field: ‘node’
[18:01:14.336]   - Field: ‘label’
[18:01:14.337]   - Field: ‘local’
[18:01:14.337]   - Field: ‘owner’
[18:01:14.337]   - Field: ‘envir’
[18:01:14.337]   - Field: ‘workers’
[18:01:14.337]   - Field: ‘packages’
[18:01:14.338]   - Field: ‘gc’
[18:01:14.338]   - Field: ‘conditions’
[18:01:14.338]   - Field: ‘persistent’
[18:01:14.338]   - Field: ‘expr’
[18:01:14.338]   - Field: ‘uuid’
[18:01:14.339]   - Field: ‘seed’
[18:01:14.339]   - Field: ‘version’
[18:01:14.339]   - Field: ‘result’
[18:01:14.339]   - Field: ‘asynchronous’
[18:01:14.339]   - Field: ‘calls’
[18:01:14.339]   - Field: ‘globals’
[18:01:14.340]   - Field: ‘stdout’
[18:01:14.340]   - Field: ‘earlySignal’
[18:01:14.340]   - Field: ‘lazy’
[18:01:14.340]   - Field: ‘state’
[18:01:14.341] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:01:14.341] - Launch lazy future ...
[18:01:14.341] Packages needed by the future expression (n = 0): <none>
[18:01:14.342] Packages needed by future strategies (n = 0): <none>
[18:01:14.343] {
[18:01:14.343]     {
[18:01:14.343]         {
[18:01:14.343]             ...future.startTime <- base::Sys.time()
[18:01:14.343]             {
[18:01:14.343]                 {
[18:01:14.343]                   {
[18:01:14.343]                     {
[18:01:14.343]                       base::local({
[18:01:14.343]                         has_future <- base::requireNamespace("future", 
[18:01:14.343]                           quietly = TRUE)
[18:01:14.343]                         if (has_future) {
[18:01:14.343]                           ns <- base::getNamespace("future")
[18:01:14.343]                           version <- ns[[".package"]][["version"]]
[18:01:14.343]                           if (is.null(version)) 
[18:01:14.343]                             version <- utils::packageVersion("future")
[18:01:14.343]                         }
[18:01:14.343]                         else {
[18:01:14.343]                           version <- NULL
[18:01:14.343]                         }
[18:01:14.343]                         if (!has_future || version < "1.8.0") {
[18:01:14.343]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:14.343]                             "", base::R.version$version.string), 
[18:01:14.343]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:14.343]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:14.343]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:14.343]                               "release", "version")], collapse = " "), 
[18:01:14.343]                             hostname = base::Sys.info()[["nodename"]])
[18:01:14.343]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:14.343]                             info)
[18:01:14.343]                           info <- base::paste(info, collapse = "; ")
[18:01:14.343]                           if (!has_future) {
[18:01:14.343]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:14.343]                               info)
[18:01:14.343]                           }
[18:01:14.343]                           else {
[18:01:14.343]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:14.343]                               info, version)
[18:01:14.343]                           }
[18:01:14.343]                           base::stop(msg)
[18:01:14.343]                         }
[18:01:14.343]                       })
[18:01:14.343]                     }
[18:01:14.343]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:14.343]                     base::options(mc.cores = 1L)
[18:01:14.343]                   }
[18:01:14.343]                   ...future.strategy.old <- future::plan("list")
[18:01:14.343]                   options(future.plan = NULL)
[18:01:14.343]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:14.343]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:14.343]                 }
[18:01:14.343]                 ...future.workdir <- getwd()
[18:01:14.343]             }
[18:01:14.343]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:14.343]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:14.343]         }
[18:01:14.343]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:14.343]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:14.343]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:14.343]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:14.343]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:14.343]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:14.343]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:14.343]             base::names(...future.oldOptions))
[18:01:14.343]     }
[18:01:14.343]     if (FALSE) {
[18:01:14.343]     }
[18:01:14.343]     else {
[18:01:14.343]         if (TRUE) {
[18:01:14.343]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:14.343]                 open = "w")
[18:01:14.343]         }
[18:01:14.343]         else {
[18:01:14.343]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:14.343]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:14.343]         }
[18:01:14.343]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:14.343]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:14.343]             base::sink(type = "output", split = FALSE)
[18:01:14.343]             base::close(...future.stdout)
[18:01:14.343]         }, add = TRUE)
[18:01:14.343]     }
[18:01:14.343]     ...future.frame <- base::sys.nframe()
[18:01:14.343]     ...future.conditions <- base::list()
[18:01:14.343]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:14.343]     if (FALSE) {
[18:01:14.343]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:14.343]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:14.343]     }
[18:01:14.343]     ...future.result <- base::tryCatch({
[18:01:14.343]         base::withCallingHandlers({
[18:01:14.343]             ...future.value <- base::withVisible(base::local({
[18:01:14.343]                 ...future.makeSendCondition <- base::local({
[18:01:14.343]                   sendCondition <- NULL
[18:01:14.343]                   function(frame = 1L) {
[18:01:14.343]                     if (is.function(sendCondition)) 
[18:01:14.343]                       return(sendCondition)
[18:01:14.343]                     ns <- getNamespace("parallel")
[18:01:14.343]                     if (exists("sendData", mode = "function", 
[18:01:14.343]                       envir = ns)) {
[18:01:14.343]                       parallel_sendData <- get("sendData", mode = "function", 
[18:01:14.343]                         envir = ns)
[18:01:14.343]                       envir <- sys.frame(frame)
[18:01:14.343]                       master <- NULL
[18:01:14.343]                       while (!identical(envir, .GlobalEnv) && 
[18:01:14.343]                         !identical(envir, emptyenv())) {
[18:01:14.343]                         if (exists("master", mode = "list", envir = envir, 
[18:01:14.343]                           inherits = FALSE)) {
[18:01:14.343]                           master <- get("master", mode = "list", 
[18:01:14.343]                             envir = envir, inherits = FALSE)
[18:01:14.343]                           if (inherits(master, c("SOCKnode", 
[18:01:14.343]                             "SOCK0node"))) {
[18:01:14.343]                             sendCondition <<- function(cond) {
[18:01:14.343]                               data <- list(type = "VALUE", value = cond, 
[18:01:14.343]                                 success = TRUE)
[18:01:14.343]                               parallel_sendData(master, data)
[18:01:14.343]                             }
[18:01:14.343]                             return(sendCondition)
[18:01:14.343]                           }
[18:01:14.343]                         }
[18:01:14.343]                         frame <- frame + 1L
[18:01:14.343]                         envir <- sys.frame(frame)
[18:01:14.343]                       }
[18:01:14.343]                     }
[18:01:14.343]                     sendCondition <<- function(cond) NULL
[18:01:14.343]                   }
[18:01:14.343]                 })
[18:01:14.343]                 withCallingHandlers({
[18:01:14.343]                   {
[18:01:14.343]                     do.call(function(...) {
[18:01:14.343]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.343]                       if (!identical(...future.globals.maxSize.org, 
[18:01:14.343]                         ...future.globals.maxSize)) {
[18:01:14.343]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.343]                         on.exit(options(oopts), add = TRUE)
[18:01:14.343]                       }
[18:01:14.343]                       {
[18:01:14.343]                         lapply(seq_along(...future.elements_ii), 
[18:01:14.343]                           FUN = function(jj) {
[18:01:14.343]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.343]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.343]                               envir = globalenv(), inherits = FALSE)
[18:01:14.343]                             ...future.FUN(...future.X_jj, ...)
[18:01:14.343]                           })
[18:01:14.343]                       }
[18:01:14.343]                     }, args = future.call.arguments)
[18:01:14.343]                   }
[18:01:14.343]                 }, immediateCondition = function(cond) {
[18:01:14.343]                   sendCondition <- ...future.makeSendCondition()
[18:01:14.343]                   sendCondition(cond)
[18:01:14.343]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.343]                   {
[18:01:14.343]                     inherits <- base::inherits
[18:01:14.343]                     invokeRestart <- base::invokeRestart
[18:01:14.343]                     is.null <- base::is.null
[18:01:14.343]                     muffled <- FALSE
[18:01:14.343]                     if (inherits(cond, "message")) {
[18:01:14.343]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:14.343]                       if (muffled) 
[18:01:14.343]                         invokeRestart("muffleMessage")
[18:01:14.343]                     }
[18:01:14.343]                     else if (inherits(cond, "warning")) {
[18:01:14.343]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:14.343]                       if (muffled) 
[18:01:14.343]                         invokeRestart("muffleWarning")
[18:01:14.343]                     }
[18:01:14.343]                     else if (inherits(cond, "condition")) {
[18:01:14.343]                       if (!is.null(pattern)) {
[18:01:14.343]                         computeRestarts <- base::computeRestarts
[18:01:14.343]                         grepl <- base::grepl
[18:01:14.343]                         restarts <- computeRestarts(cond)
[18:01:14.343]                         for (restart in restarts) {
[18:01:14.343]                           name <- restart$name
[18:01:14.343]                           if (is.null(name)) 
[18:01:14.343]                             next
[18:01:14.343]                           if (!grepl(pattern, name)) 
[18:01:14.343]                             next
[18:01:14.343]                           invokeRestart(restart)
[18:01:14.343]                           muffled <- TRUE
[18:01:14.343]                           break
[18:01:14.343]                         }
[18:01:14.343]                       }
[18:01:14.343]                     }
[18:01:14.343]                     invisible(muffled)
[18:01:14.343]                   }
[18:01:14.343]                   muffleCondition(cond)
[18:01:14.343]                 })
[18:01:14.343]             }))
[18:01:14.343]             future::FutureResult(value = ...future.value$value, 
[18:01:14.343]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:14.343]                   ...future.rng), globalenv = if (FALSE) 
[18:01:14.343]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:14.343]                     ...future.globalenv.names))
[18:01:14.343]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:14.343]         }, condition = base::local({
[18:01:14.343]             c <- base::c
[18:01:14.343]             inherits <- base::inherits
[18:01:14.343]             invokeRestart <- base::invokeRestart
[18:01:14.343]             length <- base::length
[18:01:14.343]             list <- base::list
[18:01:14.343]             seq.int <- base::seq.int
[18:01:14.343]             signalCondition <- base::signalCondition
[18:01:14.343]             sys.calls <- base::sys.calls
[18:01:14.343]             `[[` <- base::`[[`
[18:01:14.343]             `+` <- base::`+`
[18:01:14.343]             `<<-` <- base::`<<-`
[18:01:14.343]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:14.343]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:14.343]                   3L)]
[18:01:14.343]             }
[18:01:14.343]             function(cond) {
[18:01:14.343]                 is_error <- inherits(cond, "error")
[18:01:14.343]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:14.343]                   NULL)
[18:01:14.343]                 if (is_error) {
[18:01:14.343]                   sessionInformation <- function() {
[18:01:14.343]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:14.343]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:14.343]                       search = base::search(), system = base::Sys.info())
[18:01:14.343]                   }
[18:01:14.343]                   ...future.conditions[[length(...future.conditions) + 
[18:01:14.343]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:14.343]                     cond$call), session = sessionInformation(), 
[18:01:14.343]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:14.343]                   signalCondition(cond)
[18:01:14.343]                 }
[18:01:14.343]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:14.343]                 "immediateCondition"))) {
[18:01:14.343]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:14.343]                   ...future.conditions[[length(...future.conditions) + 
[18:01:14.343]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:14.343]                   if (TRUE && !signal) {
[18:01:14.343]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.343]                     {
[18:01:14.343]                       inherits <- base::inherits
[18:01:14.343]                       invokeRestart <- base::invokeRestart
[18:01:14.343]                       is.null <- base::is.null
[18:01:14.343]                       muffled <- FALSE
[18:01:14.343]                       if (inherits(cond, "message")) {
[18:01:14.343]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:14.343]                         if (muffled) 
[18:01:14.343]                           invokeRestart("muffleMessage")
[18:01:14.343]                       }
[18:01:14.343]                       else if (inherits(cond, "warning")) {
[18:01:14.343]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:14.343]                         if (muffled) 
[18:01:14.343]                           invokeRestart("muffleWarning")
[18:01:14.343]                       }
[18:01:14.343]                       else if (inherits(cond, "condition")) {
[18:01:14.343]                         if (!is.null(pattern)) {
[18:01:14.343]                           computeRestarts <- base::computeRestarts
[18:01:14.343]                           grepl <- base::grepl
[18:01:14.343]                           restarts <- computeRestarts(cond)
[18:01:14.343]                           for (restart in restarts) {
[18:01:14.343]                             name <- restart$name
[18:01:14.343]                             if (is.null(name)) 
[18:01:14.343]                               next
[18:01:14.343]                             if (!grepl(pattern, name)) 
[18:01:14.343]                               next
[18:01:14.343]                             invokeRestart(restart)
[18:01:14.343]                             muffled <- TRUE
[18:01:14.343]                             break
[18:01:14.343]                           }
[18:01:14.343]                         }
[18:01:14.343]                       }
[18:01:14.343]                       invisible(muffled)
[18:01:14.343]                     }
[18:01:14.343]                     muffleCondition(cond, pattern = "^muffle")
[18:01:14.343]                   }
[18:01:14.343]                 }
[18:01:14.343]                 else {
[18:01:14.343]                   if (TRUE) {
[18:01:14.343]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.343]                     {
[18:01:14.343]                       inherits <- base::inherits
[18:01:14.343]                       invokeRestart <- base::invokeRestart
[18:01:14.343]                       is.null <- base::is.null
[18:01:14.343]                       muffled <- FALSE
[18:01:14.343]                       if (inherits(cond, "message")) {
[18:01:14.343]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:14.343]                         if (muffled) 
[18:01:14.343]                           invokeRestart("muffleMessage")
[18:01:14.343]                       }
[18:01:14.343]                       else if (inherits(cond, "warning")) {
[18:01:14.343]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:14.343]                         if (muffled) 
[18:01:14.343]                           invokeRestart("muffleWarning")
[18:01:14.343]                       }
[18:01:14.343]                       else if (inherits(cond, "condition")) {
[18:01:14.343]                         if (!is.null(pattern)) {
[18:01:14.343]                           computeRestarts <- base::computeRestarts
[18:01:14.343]                           grepl <- base::grepl
[18:01:14.343]                           restarts <- computeRestarts(cond)
[18:01:14.343]                           for (restart in restarts) {
[18:01:14.343]                             name <- restart$name
[18:01:14.343]                             if (is.null(name)) 
[18:01:14.343]                               next
[18:01:14.343]                             if (!grepl(pattern, name)) 
[18:01:14.343]                               next
[18:01:14.343]                             invokeRestart(restart)
[18:01:14.343]                             muffled <- TRUE
[18:01:14.343]                             break
[18:01:14.343]                           }
[18:01:14.343]                         }
[18:01:14.343]                       }
[18:01:14.343]                       invisible(muffled)
[18:01:14.343]                     }
[18:01:14.343]                     muffleCondition(cond, pattern = "^muffle")
[18:01:14.343]                   }
[18:01:14.343]                 }
[18:01:14.343]             }
[18:01:14.343]         }))
[18:01:14.343]     }, error = function(ex) {
[18:01:14.343]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:14.343]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:14.343]                 ...future.rng), started = ...future.startTime, 
[18:01:14.343]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:14.343]             version = "1.8"), class = "FutureResult")
[18:01:14.343]     }, finally = {
[18:01:14.343]         if (!identical(...future.workdir, getwd())) 
[18:01:14.343]             setwd(...future.workdir)
[18:01:14.343]         {
[18:01:14.343]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:14.343]                 ...future.oldOptions$nwarnings <- NULL
[18:01:14.343]             }
[18:01:14.343]             base::options(...future.oldOptions)
[18:01:14.343]             if (.Platform$OS.type == "windows") {
[18:01:14.343]                 old_names <- names(...future.oldEnvVars)
[18:01:14.343]                 envs <- base::Sys.getenv()
[18:01:14.343]                 names <- names(envs)
[18:01:14.343]                 common <- intersect(names, old_names)
[18:01:14.343]                 added <- setdiff(names, old_names)
[18:01:14.343]                 removed <- setdiff(old_names, names)
[18:01:14.343]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:14.343]                   envs[common]]
[18:01:14.343]                 NAMES <- toupper(changed)
[18:01:14.343]                 args <- list()
[18:01:14.343]                 for (kk in seq_along(NAMES)) {
[18:01:14.343]                   name <- changed[[kk]]
[18:01:14.343]                   NAME <- NAMES[[kk]]
[18:01:14.343]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.343]                     next
[18:01:14.343]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:14.343]                 }
[18:01:14.343]                 NAMES <- toupper(added)
[18:01:14.343]                 for (kk in seq_along(NAMES)) {
[18:01:14.343]                   name <- added[[kk]]
[18:01:14.343]                   NAME <- NAMES[[kk]]
[18:01:14.343]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.343]                     next
[18:01:14.343]                   args[[name]] <- ""
[18:01:14.343]                 }
[18:01:14.343]                 NAMES <- toupper(removed)
[18:01:14.343]                 for (kk in seq_along(NAMES)) {
[18:01:14.343]                   name <- removed[[kk]]
[18:01:14.343]                   NAME <- NAMES[[kk]]
[18:01:14.343]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.343]                     next
[18:01:14.343]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:14.343]                 }
[18:01:14.343]                 if (length(args) > 0) 
[18:01:14.343]                   base::do.call(base::Sys.setenv, args = args)
[18:01:14.343]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:14.343]             }
[18:01:14.343]             else {
[18:01:14.343]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:14.343]             }
[18:01:14.343]             {
[18:01:14.343]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:14.343]                   0L) {
[18:01:14.343]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:14.343]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:14.343]                   base::options(opts)
[18:01:14.343]                 }
[18:01:14.343]                 {
[18:01:14.343]                   {
[18:01:14.343]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:14.343]                     NULL
[18:01:14.343]                   }
[18:01:14.343]                   options(future.plan = NULL)
[18:01:14.343]                   if (is.na(NA_character_)) 
[18:01:14.343]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:14.343]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:14.343]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:14.343]                     .init = FALSE)
[18:01:14.343]                 }
[18:01:14.343]             }
[18:01:14.343]         }
[18:01:14.343]     })
[18:01:14.343]     if (TRUE) {
[18:01:14.343]         base::sink(type = "output", split = FALSE)
[18:01:14.343]         if (TRUE) {
[18:01:14.343]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:14.343]         }
[18:01:14.343]         else {
[18:01:14.343]             ...future.result["stdout"] <- base::list(NULL)
[18:01:14.343]         }
[18:01:14.343]         base::close(...future.stdout)
[18:01:14.343]         ...future.stdout <- NULL
[18:01:14.343]     }
[18:01:14.343]     ...future.result$conditions <- ...future.conditions
[18:01:14.343]     ...future.result$finished <- base::Sys.time()
[18:01:14.343]     ...future.result
[18:01:14.343] }
[18:01:14.348] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[18:01:14.348] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[18:01:14.349] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[18:01:14.349] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[18:01:14.350] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[18:01:14.351] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[18:01:14.351] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[18:01:14.352] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[18:01:14.352] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[18:01:14.353] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[18:01:14.354] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[18:01:14.354] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[18:01:14.355] MultisessionFuture started
[18:01:14.355] - Launch lazy future ... done
[18:01:14.355] run() for ‘MultisessionFuture’ ... done
[18:01:14.356] Created future:
[18:01:14.356] MultisessionFuture:
[18:01:14.356] Label: ‘future_replicate-1’
[18:01:14.356] Expression:
[18:01:14.356] {
[18:01:14.356]     do.call(function(...) {
[18:01:14.356]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.356]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:14.356]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.356]             on.exit(options(oopts), add = TRUE)
[18:01:14.356]         }
[18:01:14.356]         {
[18:01:14.356]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:14.356]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.356]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.356]                   envir = globalenv(), inherits = FALSE)
[18:01:14.356]                 ...future.FUN(...future.X_jj, ...)
[18:01:14.356]             })
[18:01:14.356]         }
[18:01:14.356]     }, args = future.call.arguments)
[18:01:14.356] }
[18:01:14.356] Lazy evaluation: FALSE
[18:01:14.356] Asynchronous evaluation: TRUE
[18:01:14.356] Local evaluation: TRUE
[18:01:14.356] Environment: R_GlobalEnv
[18:01:14.356] Capture standard output: TRUE
[18:01:14.356] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:14.356] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:14.356] Packages: <none>
[18:01:14.356] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:14.356] Resolved: FALSE
[18:01:14.356] Value: <not collected>
[18:01:14.356] Conditions captured: <none>
[18:01:14.356] Early signaling: FALSE
[18:01:14.356] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:14.356] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:14.369] Chunk #1 of 2 ... DONE
[18:01:14.369] Chunk #2 of 2 ...
[18:01:14.369]  - Finding globals in 'X' for chunk #2 ...
[18:01:14.370] getGlobalsAndPackages() ...
[18:01:14.370] Searching for globals...
[18:01:14.371] 
[18:01:14.371] Searching for globals ... DONE
[18:01:14.371] - globals: [0] <none>
[18:01:14.371] getGlobalsAndPackages() ... DONE
[18:01:14.372]    + additional globals found: [n=0] 
[18:01:14.372]    + additional namespaces needed: [n=0] 
[18:01:14.372]  - Finding globals in 'X' for chunk #2 ... DONE
[18:01:14.372]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:14.372]  - seeds: [3] <seeds>
[18:01:14.373]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.373] getGlobalsAndPackages() ...
[18:01:14.373] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.373] Resolving globals: FALSE
[18:01:14.373] Tweak future expression to call with '...' arguments ...
[18:01:14.374] {
[18:01:14.374]     do.call(function(...) {
[18:01:14.374]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.374]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:14.374]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.374]             on.exit(options(oopts), add = TRUE)
[18:01:14.374]         }
[18:01:14.374]         {
[18:01:14.374]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:14.374]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.374]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.374]                   envir = globalenv(), inherits = FALSE)
[18:01:14.374]                 ...future.FUN(...future.X_jj, ...)
[18:01:14.374]             })
[18:01:14.374]         }
[18:01:14.374]     }, args = future.call.arguments)
[18:01:14.374] }
[18:01:14.374] Tweak future expression to call with '...' arguments ... DONE
[18:01:14.375] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.375] 
[18:01:14.375] getGlobalsAndPackages() ... DONE
[18:01:14.376] run() for ‘Future’ ...
[18:01:14.376] - state: ‘created’
[18:01:14.376] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:01:14.402] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:14.402] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:01:14.402]   - Field: ‘node’
[18:01:14.403]   - Field: ‘label’
[18:01:14.403]   - Field: ‘local’
[18:01:14.403]   - Field: ‘owner’
[18:01:14.403]   - Field: ‘envir’
[18:01:14.403]   - Field: ‘workers’
[18:01:14.404]   - Field: ‘packages’
[18:01:14.404]   - Field: ‘gc’
[18:01:14.404]   - Field: ‘conditions’
[18:01:14.404]   - Field: ‘persistent’
[18:01:14.404]   - Field: ‘expr’
[18:01:14.404]   - Field: ‘uuid’
[18:01:14.405]   - Field: ‘seed’
[18:01:14.405]   - Field: ‘version’
[18:01:14.405]   - Field: ‘result’
[18:01:14.405]   - Field: ‘asynchronous’
[18:01:14.405]   - Field: ‘calls’
[18:01:14.406]   - Field: ‘globals’
[18:01:14.406]   - Field: ‘stdout’
[18:01:14.406]   - Field: ‘earlySignal’
[18:01:14.406]   - Field: ‘lazy’
[18:01:14.406]   - Field: ‘state’
[18:01:14.407] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:01:14.407] - Launch lazy future ...
[18:01:14.407] Packages needed by the future expression (n = 0): <none>
[18:01:14.408] Packages needed by future strategies (n = 0): <none>
[18:01:14.408] {
[18:01:14.408]     {
[18:01:14.408]         {
[18:01:14.408]             ...future.startTime <- base::Sys.time()
[18:01:14.408]             {
[18:01:14.408]                 {
[18:01:14.408]                   {
[18:01:14.408]                     {
[18:01:14.408]                       base::local({
[18:01:14.408]                         has_future <- base::requireNamespace("future", 
[18:01:14.408]                           quietly = TRUE)
[18:01:14.408]                         if (has_future) {
[18:01:14.408]                           ns <- base::getNamespace("future")
[18:01:14.408]                           version <- ns[[".package"]][["version"]]
[18:01:14.408]                           if (is.null(version)) 
[18:01:14.408]                             version <- utils::packageVersion("future")
[18:01:14.408]                         }
[18:01:14.408]                         else {
[18:01:14.408]                           version <- NULL
[18:01:14.408]                         }
[18:01:14.408]                         if (!has_future || version < "1.8.0") {
[18:01:14.408]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:14.408]                             "", base::R.version$version.string), 
[18:01:14.408]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:14.408]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:14.408]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:14.408]                               "release", "version")], collapse = " "), 
[18:01:14.408]                             hostname = base::Sys.info()[["nodename"]])
[18:01:14.408]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:14.408]                             info)
[18:01:14.408]                           info <- base::paste(info, collapse = "; ")
[18:01:14.408]                           if (!has_future) {
[18:01:14.408]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:14.408]                               info)
[18:01:14.408]                           }
[18:01:14.408]                           else {
[18:01:14.408]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:14.408]                               info, version)
[18:01:14.408]                           }
[18:01:14.408]                           base::stop(msg)
[18:01:14.408]                         }
[18:01:14.408]                       })
[18:01:14.408]                     }
[18:01:14.408]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:14.408]                     base::options(mc.cores = 1L)
[18:01:14.408]                   }
[18:01:14.408]                   ...future.strategy.old <- future::plan("list")
[18:01:14.408]                   options(future.plan = NULL)
[18:01:14.408]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:14.408]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:14.408]                 }
[18:01:14.408]                 ...future.workdir <- getwd()
[18:01:14.408]             }
[18:01:14.408]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:14.408]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:14.408]         }
[18:01:14.408]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:14.408]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:14.408]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:14.408]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:14.408]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:14.408]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:14.408]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:14.408]             base::names(...future.oldOptions))
[18:01:14.408]     }
[18:01:14.408]     if (FALSE) {
[18:01:14.408]     }
[18:01:14.408]     else {
[18:01:14.408]         if (TRUE) {
[18:01:14.408]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:14.408]                 open = "w")
[18:01:14.408]         }
[18:01:14.408]         else {
[18:01:14.408]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:14.408]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:14.408]         }
[18:01:14.408]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:14.408]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:14.408]             base::sink(type = "output", split = FALSE)
[18:01:14.408]             base::close(...future.stdout)
[18:01:14.408]         }, add = TRUE)
[18:01:14.408]     }
[18:01:14.408]     ...future.frame <- base::sys.nframe()
[18:01:14.408]     ...future.conditions <- base::list()
[18:01:14.408]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:14.408]     if (FALSE) {
[18:01:14.408]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:14.408]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:14.408]     }
[18:01:14.408]     ...future.result <- base::tryCatch({
[18:01:14.408]         base::withCallingHandlers({
[18:01:14.408]             ...future.value <- base::withVisible(base::local({
[18:01:14.408]                 ...future.makeSendCondition <- base::local({
[18:01:14.408]                   sendCondition <- NULL
[18:01:14.408]                   function(frame = 1L) {
[18:01:14.408]                     if (is.function(sendCondition)) 
[18:01:14.408]                       return(sendCondition)
[18:01:14.408]                     ns <- getNamespace("parallel")
[18:01:14.408]                     if (exists("sendData", mode = "function", 
[18:01:14.408]                       envir = ns)) {
[18:01:14.408]                       parallel_sendData <- get("sendData", mode = "function", 
[18:01:14.408]                         envir = ns)
[18:01:14.408]                       envir <- sys.frame(frame)
[18:01:14.408]                       master <- NULL
[18:01:14.408]                       while (!identical(envir, .GlobalEnv) && 
[18:01:14.408]                         !identical(envir, emptyenv())) {
[18:01:14.408]                         if (exists("master", mode = "list", envir = envir, 
[18:01:14.408]                           inherits = FALSE)) {
[18:01:14.408]                           master <- get("master", mode = "list", 
[18:01:14.408]                             envir = envir, inherits = FALSE)
[18:01:14.408]                           if (inherits(master, c("SOCKnode", 
[18:01:14.408]                             "SOCK0node"))) {
[18:01:14.408]                             sendCondition <<- function(cond) {
[18:01:14.408]                               data <- list(type = "VALUE", value = cond, 
[18:01:14.408]                                 success = TRUE)
[18:01:14.408]                               parallel_sendData(master, data)
[18:01:14.408]                             }
[18:01:14.408]                             return(sendCondition)
[18:01:14.408]                           }
[18:01:14.408]                         }
[18:01:14.408]                         frame <- frame + 1L
[18:01:14.408]                         envir <- sys.frame(frame)
[18:01:14.408]                       }
[18:01:14.408]                     }
[18:01:14.408]                     sendCondition <<- function(cond) NULL
[18:01:14.408]                   }
[18:01:14.408]                 })
[18:01:14.408]                 withCallingHandlers({
[18:01:14.408]                   {
[18:01:14.408]                     do.call(function(...) {
[18:01:14.408]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.408]                       if (!identical(...future.globals.maxSize.org, 
[18:01:14.408]                         ...future.globals.maxSize)) {
[18:01:14.408]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.408]                         on.exit(options(oopts), add = TRUE)
[18:01:14.408]                       }
[18:01:14.408]                       {
[18:01:14.408]                         lapply(seq_along(...future.elements_ii), 
[18:01:14.408]                           FUN = function(jj) {
[18:01:14.408]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.408]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.408]                               envir = globalenv(), inherits = FALSE)
[18:01:14.408]                             ...future.FUN(...future.X_jj, ...)
[18:01:14.408]                           })
[18:01:14.408]                       }
[18:01:14.408]                     }, args = future.call.arguments)
[18:01:14.408]                   }
[18:01:14.408]                 }, immediateCondition = function(cond) {
[18:01:14.408]                   sendCondition <- ...future.makeSendCondition()
[18:01:14.408]                   sendCondition(cond)
[18:01:14.408]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.408]                   {
[18:01:14.408]                     inherits <- base::inherits
[18:01:14.408]                     invokeRestart <- base::invokeRestart
[18:01:14.408]                     is.null <- base::is.null
[18:01:14.408]                     muffled <- FALSE
[18:01:14.408]                     if (inherits(cond, "message")) {
[18:01:14.408]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:14.408]                       if (muffled) 
[18:01:14.408]                         invokeRestart("muffleMessage")
[18:01:14.408]                     }
[18:01:14.408]                     else if (inherits(cond, "warning")) {
[18:01:14.408]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:14.408]                       if (muffled) 
[18:01:14.408]                         invokeRestart("muffleWarning")
[18:01:14.408]                     }
[18:01:14.408]                     else if (inherits(cond, "condition")) {
[18:01:14.408]                       if (!is.null(pattern)) {
[18:01:14.408]                         computeRestarts <- base::computeRestarts
[18:01:14.408]                         grepl <- base::grepl
[18:01:14.408]                         restarts <- computeRestarts(cond)
[18:01:14.408]                         for (restart in restarts) {
[18:01:14.408]                           name <- restart$name
[18:01:14.408]                           if (is.null(name)) 
[18:01:14.408]                             next
[18:01:14.408]                           if (!grepl(pattern, name)) 
[18:01:14.408]                             next
[18:01:14.408]                           invokeRestart(restart)
[18:01:14.408]                           muffled <- TRUE
[18:01:14.408]                           break
[18:01:14.408]                         }
[18:01:14.408]                       }
[18:01:14.408]                     }
[18:01:14.408]                     invisible(muffled)
[18:01:14.408]                   }
[18:01:14.408]                   muffleCondition(cond)
[18:01:14.408]                 })
[18:01:14.408]             }))
[18:01:14.408]             future::FutureResult(value = ...future.value$value, 
[18:01:14.408]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:14.408]                   ...future.rng), globalenv = if (FALSE) 
[18:01:14.408]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:14.408]                     ...future.globalenv.names))
[18:01:14.408]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:14.408]         }, condition = base::local({
[18:01:14.408]             c <- base::c
[18:01:14.408]             inherits <- base::inherits
[18:01:14.408]             invokeRestart <- base::invokeRestart
[18:01:14.408]             length <- base::length
[18:01:14.408]             list <- base::list
[18:01:14.408]             seq.int <- base::seq.int
[18:01:14.408]             signalCondition <- base::signalCondition
[18:01:14.408]             sys.calls <- base::sys.calls
[18:01:14.408]             `[[` <- base::`[[`
[18:01:14.408]             `+` <- base::`+`
[18:01:14.408]             `<<-` <- base::`<<-`
[18:01:14.408]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:14.408]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:14.408]                   3L)]
[18:01:14.408]             }
[18:01:14.408]             function(cond) {
[18:01:14.408]                 is_error <- inherits(cond, "error")
[18:01:14.408]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:14.408]                   NULL)
[18:01:14.408]                 if (is_error) {
[18:01:14.408]                   sessionInformation <- function() {
[18:01:14.408]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:14.408]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:14.408]                       search = base::search(), system = base::Sys.info())
[18:01:14.408]                   }
[18:01:14.408]                   ...future.conditions[[length(...future.conditions) + 
[18:01:14.408]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:14.408]                     cond$call), session = sessionInformation(), 
[18:01:14.408]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:14.408]                   signalCondition(cond)
[18:01:14.408]                 }
[18:01:14.408]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:14.408]                 "immediateCondition"))) {
[18:01:14.408]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:14.408]                   ...future.conditions[[length(...future.conditions) + 
[18:01:14.408]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:14.408]                   if (TRUE && !signal) {
[18:01:14.408]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.408]                     {
[18:01:14.408]                       inherits <- base::inherits
[18:01:14.408]                       invokeRestart <- base::invokeRestart
[18:01:14.408]                       is.null <- base::is.null
[18:01:14.408]                       muffled <- FALSE
[18:01:14.408]                       if (inherits(cond, "message")) {
[18:01:14.408]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:14.408]                         if (muffled) 
[18:01:14.408]                           invokeRestart("muffleMessage")
[18:01:14.408]                       }
[18:01:14.408]                       else if (inherits(cond, "warning")) {
[18:01:14.408]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:14.408]                         if (muffled) 
[18:01:14.408]                           invokeRestart("muffleWarning")
[18:01:14.408]                       }
[18:01:14.408]                       else if (inherits(cond, "condition")) {
[18:01:14.408]                         if (!is.null(pattern)) {
[18:01:14.408]                           computeRestarts <- base::computeRestarts
[18:01:14.408]                           grepl <- base::grepl
[18:01:14.408]                           restarts <- computeRestarts(cond)
[18:01:14.408]                           for (restart in restarts) {
[18:01:14.408]                             name <- restart$name
[18:01:14.408]                             if (is.null(name)) 
[18:01:14.408]                               next
[18:01:14.408]                             if (!grepl(pattern, name)) 
[18:01:14.408]                               next
[18:01:14.408]                             invokeRestart(restart)
[18:01:14.408]                             muffled <- TRUE
[18:01:14.408]                             break
[18:01:14.408]                           }
[18:01:14.408]                         }
[18:01:14.408]                       }
[18:01:14.408]                       invisible(muffled)
[18:01:14.408]                     }
[18:01:14.408]                     muffleCondition(cond, pattern = "^muffle")
[18:01:14.408]                   }
[18:01:14.408]                 }
[18:01:14.408]                 else {
[18:01:14.408]                   if (TRUE) {
[18:01:14.408]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.408]                     {
[18:01:14.408]                       inherits <- base::inherits
[18:01:14.408]                       invokeRestart <- base::invokeRestart
[18:01:14.408]                       is.null <- base::is.null
[18:01:14.408]                       muffled <- FALSE
[18:01:14.408]                       if (inherits(cond, "message")) {
[18:01:14.408]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:14.408]                         if (muffled) 
[18:01:14.408]                           invokeRestart("muffleMessage")
[18:01:14.408]                       }
[18:01:14.408]                       else if (inherits(cond, "warning")) {
[18:01:14.408]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:14.408]                         if (muffled) 
[18:01:14.408]                           invokeRestart("muffleWarning")
[18:01:14.408]                       }
[18:01:14.408]                       else if (inherits(cond, "condition")) {
[18:01:14.408]                         if (!is.null(pattern)) {
[18:01:14.408]                           computeRestarts <- base::computeRestarts
[18:01:14.408]                           grepl <- base::grepl
[18:01:14.408]                           restarts <- computeRestarts(cond)
[18:01:14.408]                           for (restart in restarts) {
[18:01:14.408]                             name <- restart$name
[18:01:14.408]                             if (is.null(name)) 
[18:01:14.408]                               next
[18:01:14.408]                             if (!grepl(pattern, name)) 
[18:01:14.408]                               next
[18:01:14.408]                             invokeRestart(restart)
[18:01:14.408]                             muffled <- TRUE
[18:01:14.408]                             break
[18:01:14.408]                           }
[18:01:14.408]                         }
[18:01:14.408]                       }
[18:01:14.408]                       invisible(muffled)
[18:01:14.408]                     }
[18:01:14.408]                     muffleCondition(cond, pattern = "^muffle")
[18:01:14.408]                   }
[18:01:14.408]                 }
[18:01:14.408]             }
[18:01:14.408]         }))
[18:01:14.408]     }, error = function(ex) {
[18:01:14.408]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:14.408]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:14.408]                 ...future.rng), started = ...future.startTime, 
[18:01:14.408]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:14.408]             version = "1.8"), class = "FutureResult")
[18:01:14.408]     }, finally = {
[18:01:14.408]         if (!identical(...future.workdir, getwd())) 
[18:01:14.408]             setwd(...future.workdir)
[18:01:14.408]         {
[18:01:14.408]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:14.408]                 ...future.oldOptions$nwarnings <- NULL
[18:01:14.408]             }
[18:01:14.408]             base::options(...future.oldOptions)
[18:01:14.408]             if (.Platform$OS.type == "windows") {
[18:01:14.408]                 old_names <- names(...future.oldEnvVars)
[18:01:14.408]                 envs <- base::Sys.getenv()
[18:01:14.408]                 names <- names(envs)
[18:01:14.408]                 common <- intersect(names, old_names)
[18:01:14.408]                 added <- setdiff(names, old_names)
[18:01:14.408]                 removed <- setdiff(old_names, names)
[18:01:14.408]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:14.408]                   envs[common]]
[18:01:14.408]                 NAMES <- toupper(changed)
[18:01:14.408]                 args <- list()
[18:01:14.408]                 for (kk in seq_along(NAMES)) {
[18:01:14.408]                   name <- changed[[kk]]
[18:01:14.408]                   NAME <- NAMES[[kk]]
[18:01:14.408]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.408]                     next
[18:01:14.408]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:14.408]                 }
[18:01:14.408]                 NAMES <- toupper(added)
[18:01:14.408]                 for (kk in seq_along(NAMES)) {
[18:01:14.408]                   name <- added[[kk]]
[18:01:14.408]                   NAME <- NAMES[[kk]]
[18:01:14.408]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.408]                     next
[18:01:14.408]                   args[[name]] <- ""
[18:01:14.408]                 }
[18:01:14.408]                 NAMES <- toupper(removed)
[18:01:14.408]                 for (kk in seq_along(NAMES)) {
[18:01:14.408]                   name <- removed[[kk]]
[18:01:14.408]                   NAME <- NAMES[[kk]]
[18:01:14.408]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.408]                     next
[18:01:14.408]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:14.408]                 }
[18:01:14.408]                 if (length(args) > 0) 
[18:01:14.408]                   base::do.call(base::Sys.setenv, args = args)
[18:01:14.408]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:14.408]             }
[18:01:14.408]             else {
[18:01:14.408]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:14.408]             }
[18:01:14.408]             {
[18:01:14.408]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:14.408]                   0L) {
[18:01:14.408]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:14.408]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:14.408]                   base::options(opts)
[18:01:14.408]                 }
[18:01:14.408]                 {
[18:01:14.408]                   {
[18:01:14.408]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:14.408]                     NULL
[18:01:14.408]                   }
[18:01:14.408]                   options(future.plan = NULL)
[18:01:14.408]                   if (is.na(NA_character_)) 
[18:01:14.408]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:14.408]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:14.408]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:14.408]                     .init = FALSE)
[18:01:14.408]                 }
[18:01:14.408]             }
[18:01:14.408]         }
[18:01:14.408]     })
[18:01:14.408]     if (TRUE) {
[18:01:14.408]         base::sink(type = "output", split = FALSE)
[18:01:14.408]         if (TRUE) {
[18:01:14.408]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:14.408]         }
[18:01:14.408]         else {
[18:01:14.408]             ...future.result["stdout"] <- base::list(NULL)
[18:01:14.408]         }
[18:01:14.408]         base::close(...future.stdout)
[18:01:14.408]         ...future.stdout <- NULL
[18:01:14.408]     }
[18:01:14.408]     ...future.result$conditions <- ...future.conditions
[18:01:14.408]     ...future.result$finished <- base::Sys.time()
[18:01:14.408]     ...future.result
[18:01:14.408] }
[18:01:14.413] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[18:01:14.414] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[18:01:14.415] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[18:01:14.415] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[18:01:14.416] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[18:01:14.417] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[18:01:14.418] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[18:01:14.418] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[18:01:14.419] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[18:01:14.419] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[18:01:14.420] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[18:01:14.420] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[18:01:14.421] MultisessionFuture started
[18:01:14.421] - Launch lazy future ... done
[18:01:14.422] run() for ‘MultisessionFuture’ ... done
[18:01:14.422] Created future:
[18:01:14.423] MultisessionFuture:
[18:01:14.423] Label: ‘future_replicate-2’
[18:01:14.423] Expression:
[18:01:14.423] {
[18:01:14.423]     do.call(function(...) {
[18:01:14.423]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.423]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:14.423]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.423]             on.exit(options(oopts), add = TRUE)
[18:01:14.423]         }
[18:01:14.423]         {
[18:01:14.423]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:14.423]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.423]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.423]                   envir = globalenv(), inherits = FALSE)
[18:01:14.423]                 ...future.FUN(...future.X_jj, ...)
[18:01:14.423]             })
[18:01:14.423]         }
[18:01:14.423]     }, args = future.call.arguments)
[18:01:14.423] }
[18:01:14.423] Lazy evaluation: FALSE
[18:01:14.423] Asynchronous evaluation: TRUE
[18:01:14.423] Local evaluation: TRUE
[18:01:14.423] Environment: R_GlobalEnv
[18:01:14.423] Capture standard output: TRUE
[18:01:14.423] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:14.423] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:14.423] Packages: <none>
[18:01:14.423] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:14.423] Resolved: FALSE
[18:01:14.423] Value: <not collected>
[18:01:14.423] Conditions captured: <none>
[18:01:14.423] Early signaling: FALSE
[18:01:14.423] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:14.423] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:14.436] Chunk #2 of 2 ... DONE
[18:01:14.437] Launching 2 futures (chunks) ... DONE
[18:01:14.437] Resolving 2 futures (chunks) ...
[18:01:14.437] resolve() on list ...
[18:01:14.437]  recursive: 0
[18:01:14.437]  length: 2
[18:01:14.438] 
[18:01:14.441] receiveMessageFromWorker() for ClusterFuture ...
[18:01:14.441] - Validating connection of MultisessionFuture
[18:01:14.441] - received message: FutureResult
[18:01:14.442] - Received FutureResult
[18:01:14.444] - Erased future from FutureRegistry
[18:01:14.444] result() for ClusterFuture ...
[18:01:14.444] - result already collected: FutureResult
[18:01:14.445] result() for ClusterFuture ... done
[18:01:14.445] receiveMessageFromWorker() for ClusterFuture ... done
[18:01:14.445] Future #1
[18:01:14.445] result() for ClusterFuture ...
[18:01:14.445] - result already collected: FutureResult
[18:01:14.446] result() for ClusterFuture ... done
[18:01:14.446] result() for ClusterFuture ...
[18:01:14.448] - result already collected: FutureResult
[18:01:14.448] result() for ClusterFuture ... done
[18:01:14.449] signalConditionsASAP(MultisessionFuture, pos=1) ...
[18:01:14.449] - nx: 2
[18:01:14.449] - relay: TRUE
[18:01:14.449] - stdout: TRUE
[18:01:14.449] - signal: TRUE
[18:01:14.449] - resignal: FALSE
[18:01:14.450] - force: TRUE
[18:01:14.452] - relayed: [n=2] FALSE, FALSE
[18:01:14.452] - queued futures: [n=2] FALSE, FALSE
[18:01:14.452]  - until=1
[18:01:14.452]  - relaying element #1
[18:01:14.453] result() for ClusterFuture ...
[18:01:14.453] - result already collected: FutureResult
[18:01:14.453] result() for ClusterFuture ... done
[18:01:14.453] result() for ClusterFuture ...
[18:01:14.453] - result already collected: FutureResult
[18:01:14.454] result() for ClusterFuture ... done
[18:01:14.456] result() for ClusterFuture ...
[18:01:14.456] - result already collected: FutureResult
[18:01:14.456] result() for ClusterFuture ... done
[18:01:14.457] result() for ClusterFuture ...
[18:01:14.457] - result already collected: FutureResult
[18:01:14.457] result() for ClusterFuture ... done
[18:01:14.457] - relayed: [n=2] TRUE, FALSE
[18:01:14.457] - queued futures: [n=2] TRUE, FALSE
[18:01:14.458] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[18:01:14.460]  length: 1 (resolved future 1)
[18:01:14.469] receiveMessageFromWorker() for ClusterFuture ...
[18:01:14.469] - Validating connection of MultisessionFuture
[18:01:14.470] - received message: FutureResult
[18:01:14.471] - Received FutureResult
[18:01:14.471] - Erased future from FutureRegistry
[18:01:14.471] result() for ClusterFuture ...
[18:01:14.471] - result already collected: FutureResult
[18:01:14.471] result() for ClusterFuture ... done
[18:01:14.472] receiveMessageFromWorker() for ClusterFuture ... done
[18:01:14.472] Future #2
[18:01:14.472] result() for ClusterFuture ...
[18:01:14.472] - result already collected: FutureResult
[18:01:14.472] result() for ClusterFuture ... done
[18:01:14.473] result() for ClusterFuture ...
[18:01:14.473] - result already collected: FutureResult
[18:01:14.473] result() for ClusterFuture ... done
[18:01:14.473] signalConditionsASAP(MultisessionFuture, pos=2) ...
[18:01:14.473] - nx: 2
[18:01:14.474] - relay: TRUE
[18:01:14.474] - stdout: TRUE
[18:01:14.474] - signal: TRUE
[18:01:14.474] - resignal: FALSE
[18:01:14.474] - force: TRUE
[18:01:14.474] - relayed: [n=2] TRUE, FALSE
[18:01:14.475] - queued futures: [n=2] TRUE, FALSE
[18:01:14.475]  - until=2
[18:01:14.475]  - relaying element #2
[18:01:14.475] result() for ClusterFuture ...
[18:01:14.475] - result already collected: FutureResult
[18:01:14.476] result() for ClusterFuture ... done
[18:01:14.476] result() for ClusterFuture ...
[18:01:14.476] - result already collected: FutureResult
[18:01:14.476] result() for ClusterFuture ... done
[18:01:14.476] result() for ClusterFuture ...
[18:01:14.477] - result already collected: FutureResult
[18:01:14.477] result() for ClusterFuture ... done
[18:01:14.477] result() for ClusterFuture ...
[18:01:14.477] - result already collected: FutureResult
[18:01:14.478] result() for ClusterFuture ... done
[18:01:14.478] - relayed: [n=2] TRUE, TRUE
[18:01:14.478] - queued futures: [n=2] TRUE, TRUE
[18:01:14.478] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[18:01:14.479]  length: 0 (resolved future 2)
[18:01:14.479] Relaying remaining futures
[18:01:14.479] signalConditionsASAP(NULL, pos=0) ...
[18:01:14.479] - nx: 2
[18:01:14.479] - relay: TRUE
[18:01:14.479] - stdout: TRUE
[18:01:14.480] - signal: TRUE
[18:01:14.480] - resignal: FALSE
[18:01:14.480] - force: TRUE
[18:01:14.480] - relayed: [n=2] TRUE, TRUE
[18:01:14.480] - queued futures: [n=2] TRUE, TRUE
 - flush all
[18:01:14.481] - relayed: [n=2] TRUE, TRUE
[18:01:14.481] - queued futures: [n=2] TRUE, TRUE
[18:01:14.481] signalConditionsASAP(NULL, pos=0) ... done
[18:01:14.481] resolve() on list ... DONE
[18:01:14.482] result() for ClusterFuture ...
[18:01:14.482] - result already collected: FutureResult
[18:01:14.482] result() for ClusterFuture ... done
[18:01:14.482] result() for ClusterFuture ...
[18:01:14.482] - result already collected: FutureResult
[18:01:14.483] result() for ClusterFuture ... done
[18:01:14.483] result() for ClusterFuture ...
[18:01:14.483] - result already collected: FutureResult
[18:01:14.483] result() for ClusterFuture ... done
[18:01:14.483] result() for ClusterFuture ...
[18:01:14.484] - result already collected: FutureResult
[18:01:14.484] result() for ClusterFuture ... done
[18:01:14.484]  - Number of value chunks collected: 2
[18:01:14.484] Resolving 2 futures (chunks) ... DONE
[18:01:14.484] Reducing values from 2 chunks ...
[18:01:14.485]  - Number of values collected after concatenation: 5
[18:01:14.485]  - Number of values expected: 5
[18:01:14.485] Reducing values from 2 chunks ... DONE
[18:01:14.485] future_lapply() ... DONE
[18:01:14.485] future_lapply() ...
[18:01:14.486] Generating random seeds ...
[18:01:14.487] Generating random seed streams for 5 elements ...
[18:01:14.487] Generating random seed streams for 5 elements ... DONE
[18:01:14.487] Generating random seeds ... DONE
[18:01:14.487] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[18:01:14.494] Number of chunks: 2
[18:01:14.494] getGlobalsAndPackagesXApply() ...
[18:01:14.494]  - future.globals: TRUE
[18:01:14.495] getGlobalsAndPackages() ...
[18:01:14.495] Searching for globals...
[18:01:14.497] - globals found: [2] ‘FUN’, ‘sample’
[18:01:14.497] Searching for globals ... DONE
[18:01:14.497] Resolving globals: FALSE
[18:01:14.498] The total size of the 1 globals is 616 bytes (616 bytes)
[18:01:14.499] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[18:01:14.499] - globals: [1] ‘FUN’
[18:01:14.499] 
[18:01:14.500] getGlobalsAndPackages() ... DONE
[18:01:14.500]  - globals found/used: [n=1] ‘FUN’
[18:01:14.500]  - needed namespaces: [n=0] 
[18:01:14.500] Finding globals ... DONE
[18:01:14.501]  - use_args: TRUE
[18:01:14.501]  - Getting '...' globals ...
[18:01:14.501] resolve() on list ...
[18:01:14.502]  recursive: 0
[18:01:14.502]  length: 1
[18:01:14.502]  elements: ‘...’
[18:01:14.502]  length: 0 (resolved future 1)
[18:01:14.502] resolve() on list ... DONE
[18:01:14.503]    - '...' content: [n=0] 
[18:01:14.503] List of 1
[18:01:14.503]  $ ...: list()
[18:01:14.503]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:14.503]  - attr(*, "where")=List of 1
[18:01:14.503]   ..$ ...:<environment: 0x635eb3aa5850> 
[18:01:14.503]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:14.503]  - attr(*, "resolved")= logi TRUE
[18:01:14.503]  - attr(*, "total_size")= num NA
[18:01:14.508]  - Getting '...' globals ... DONE
[18:01:14.509] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[18:01:14.509] List of 2
[18:01:14.509]  $ ...future.FUN:function (...)  
[18:01:14.509]  $ ...          : list()
[18:01:14.509]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:14.509]  - attr(*, "where")=List of 2
[18:01:14.509]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[18:01:14.509]   ..$ ...          :<environment: 0x635eb3aa5850> 
[18:01:14.509]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:14.509]  - attr(*, "resolved")= logi FALSE
[18:01:14.509]  - attr(*, "total_size")= num 616
[18:01:14.515] Packages to be attached in all futures: [n=0] 
[18:01:14.515] getGlobalsAndPackagesXApply() ... DONE
[18:01:14.515] Number of futures (= number of chunks): 2
[18:01:14.515] Launching 2 futures (chunks) ...
[18:01:14.516] Chunk #1 of 2 ...
[18:01:14.516]  - Finding globals in 'X' for chunk #1 ...
[18:01:14.516] getGlobalsAndPackages() ...
[18:01:14.516] Searching for globals...
[18:01:14.517] 
[18:01:14.517] Searching for globals ... DONE
[18:01:14.517] - globals: [0] <none>
[18:01:14.517] getGlobalsAndPackages() ... DONE
[18:01:14.518]    + additional globals found: [n=0] 
[18:01:14.518]    + additional namespaces needed: [n=0] 
[18:01:14.518]  - Finding globals in 'X' for chunk #1 ... DONE
[18:01:14.518]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:14.518]  - seeds: [2] <seeds>
[18:01:14.519]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.519] getGlobalsAndPackages() ...
[18:01:14.519] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.519] Resolving globals: FALSE
[18:01:14.520] Tweak future expression to call with '...' arguments ...
[18:01:14.520] {
[18:01:14.520]     do.call(function(...) {
[18:01:14.520]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.520]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:14.520]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.520]             on.exit(options(oopts), add = TRUE)
[18:01:14.520]         }
[18:01:14.520]         {
[18:01:14.520]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:14.520]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.520]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.520]                   envir = globalenv(), inherits = FALSE)
[18:01:14.520]                 ...future.FUN(...future.X_jj, ...)
[18:01:14.520]             })
[18:01:14.520]         }
[18:01:14.520]     }, args = future.call.arguments)
[18:01:14.520] }
[18:01:14.520] Tweak future expression to call with '...' arguments ... DONE
[18:01:14.521] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.522] 
[18:01:14.522] getGlobalsAndPackages() ... DONE
[18:01:14.522] run() for ‘Future’ ...
[18:01:14.523] - state: ‘created’
[18:01:14.523] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:01:14.557] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:14.558] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:01:14.558]   - Field: ‘node’
[18:01:14.558]   - Field: ‘label’
[18:01:14.558]   - Field: ‘local’
[18:01:14.559]   - Field: ‘owner’
[18:01:14.559]   - Field: ‘envir’
[18:01:14.559]   - Field: ‘workers’
[18:01:14.559]   - Field: ‘packages’
[18:01:14.560]   - Field: ‘gc’
[18:01:14.560]   - Field: ‘conditions’
[18:01:14.560]   - Field: ‘persistent’
[18:01:14.560]   - Field: ‘expr’
[18:01:14.560]   - Field: ‘uuid’
[18:01:14.561]   - Field: ‘seed’
[18:01:14.561]   - Field: ‘version’
[18:01:14.561]   - Field: ‘result’
[18:01:14.561]   - Field: ‘asynchronous’
[18:01:14.561]   - Field: ‘calls’
[18:01:14.561]   - Field: ‘globals’
[18:01:14.562]   - Field: ‘stdout’
[18:01:14.562]   - Field: ‘earlySignal’
[18:01:14.562]   - Field: ‘lazy’
[18:01:14.562]   - Field: ‘state’
[18:01:14.562] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:01:14.563] - Launch lazy future ...
[18:01:14.563] Packages needed by the future expression (n = 0): <none>
[18:01:14.563] Packages needed by future strategies (n = 0): <none>
[18:01:14.564] {
[18:01:14.564]     {
[18:01:14.564]         {
[18:01:14.564]             ...future.startTime <- base::Sys.time()
[18:01:14.564]             {
[18:01:14.564]                 {
[18:01:14.564]                   {
[18:01:14.564]                     {
[18:01:14.564]                       base::local({
[18:01:14.564]                         has_future <- base::requireNamespace("future", 
[18:01:14.564]                           quietly = TRUE)
[18:01:14.564]                         if (has_future) {
[18:01:14.564]                           ns <- base::getNamespace("future")
[18:01:14.564]                           version <- ns[[".package"]][["version"]]
[18:01:14.564]                           if (is.null(version)) 
[18:01:14.564]                             version <- utils::packageVersion("future")
[18:01:14.564]                         }
[18:01:14.564]                         else {
[18:01:14.564]                           version <- NULL
[18:01:14.564]                         }
[18:01:14.564]                         if (!has_future || version < "1.8.0") {
[18:01:14.564]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:14.564]                             "", base::R.version$version.string), 
[18:01:14.564]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:14.564]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:14.564]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:14.564]                               "release", "version")], collapse = " "), 
[18:01:14.564]                             hostname = base::Sys.info()[["nodename"]])
[18:01:14.564]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:14.564]                             info)
[18:01:14.564]                           info <- base::paste(info, collapse = "; ")
[18:01:14.564]                           if (!has_future) {
[18:01:14.564]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:14.564]                               info)
[18:01:14.564]                           }
[18:01:14.564]                           else {
[18:01:14.564]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:14.564]                               info, version)
[18:01:14.564]                           }
[18:01:14.564]                           base::stop(msg)
[18:01:14.564]                         }
[18:01:14.564]                       })
[18:01:14.564]                     }
[18:01:14.564]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:14.564]                     base::options(mc.cores = 1L)
[18:01:14.564]                   }
[18:01:14.564]                   ...future.strategy.old <- future::plan("list")
[18:01:14.564]                   options(future.plan = NULL)
[18:01:14.564]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:14.564]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:14.564]                 }
[18:01:14.564]                 ...future.workdir <- getwd()
[18:01:14.564]             }
[18:01:14.564]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:14.564]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:14.564]         }
[18:01:14.564]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:14.564]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:14.564]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:14.564]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:14.564]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:14.564]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:14.564]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:14.564]             base::names(...future.oldOptions))
[18:01:14.564]     }
[18:01:14.564]     if (FALSE) {
[18:01:14.564]     }
[18:01:14.564]     else {
[18:01:14.564]         if (TRUE) {
[18:01:14.564]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:14.564]                 open = "w")
[18:01:14.564]         }
[18:01:14.564]         else {
[18:01:14.564]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:14.564]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:14.564]         }
[18:01:14.564]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:14.564]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:14.564]             base::sink(type = "output", split = FALSE)
[18:01:14.564]             base::close(...future.stdout)
[18:01:14.564]         }, add = TRUE)
[18:01:14.564]     }
[18:01:14.564]     ...future.frame <- base::sys.nframe()
[18:01:14.564]     ...future.conditions <- base::list()
[18:01:14.564]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:14.564]     if (FALSE) {
[18:01:14.564]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:14.564]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:14.564]     }
[18:01:14.564]     ...future.result <- base::tryCatch({
[18:01:14.564]         base::withCallingHandlers({
[18:01:14.564]             ...future.value <- base::withVisible(base::local({
[18:01:14.564]                 ...future.makeSendCondition <- base::local({
[18:01:14.564]                   sendCondition <- NULL
[18:01:14.564]                   function(frame = 1L) {
[18:01:14.564]                     if (is.function(sendCondition)) 
[18:01:14.564]                       return(sendCondition)
[18:01:14.564]                     ns <- getNamespace("parallel")
[18:01:14.564]                     if (exists("sendData", mode = "function", 
[18:01:14.564]                       envir = ns)) {
[18:01:14.564]                       parallel_sendData <- get("sendData", mode = "function", 
[18:01:14.564]                         envir = ns)
[18:01:14.564]                       envir <- sys.frame(frame)
[18:01:14.564]                       master <- NULL
[18:01:14.564]                       while (!identical(envir, .GlobalEnv) && 
[18:01:14.564]                         !identical(envir, emptyenv())) {
[18:01:14.564]                         if (exists("master", mode = "list", envir = envir, 
[18:01:14.564]                           inherits = FALSE)) {
[18:01:14.564]                           master <- get("master", mode = "list", 
[18:01:14.564]                             envir = envir, inherits = FALSE)
[18:01:14.564]                           if (inherits(master, c("SOCKnode", 
[18:01:14.564]                             "SOCK0node"))) {
[18:01:14.564]                             sendCondition <<- function(cond) {
[18:01:14.564]                               data <- list(type = "VALUE", value = cond, 
[18:01:14.564]                                 success = TRUE)
[18:01:14.564]                               parallel_sendData(master, data)
[18:01:14.564]                             }
[18:01:14.564]                             return(sendCondition)
[18:01:14.564]                           }
[18:01:14.564]                         }
[18:01:14.564]                         frame <- frame + 1L
[18:01:14.564]                         envir <- sys.frame(frame)
[18:01:14.564]                       }
[18:01:14.564]                     }
[18:01:14.564]                     sendCondition <<- function(cond) NULL
[18:01:14.564]                   }
[18:01:14.564]                 })
[18:01:14.564]                 withCallingHandlers({
[18:01:14.564]                   {
[18:01:14.564]                     do.call(function(...) {
[18:01:14.564]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.564]                       if (!identical(...future.globals.maxSize.org, 
[18:01:14.564]                         ...future.globals.maxSize)) {
[18:01:14.564]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.564]                         on.exit(options(oopts), add = TRUE)
[18:01:14.564]                       }
[18:01:14.564]                       {
[18:01:14.564]                         lapply(seq_along(...future.elements_ii), 
[18:01:14.564]                           FUN = function(jj) {
[18:01:14.564]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.564]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.564]                               envir = globalenv(), inherits = FALSE)
[18:01:14.564]                             ...future.FUN(...future.X_jj, ...)
[18:01:14.564]                           })
[18:01:14.564]                       }
[18:01:14.564]                     }, args = future.call.arguments)
[18:01:14.564]                   }
[18:01:14.564]                 }, immediateCondition = function(cond) {
[18:01:14.564]                   sendCondition <- ...future.makeSendCondition()
[18:01:14.564]                   sendCondition(cond)
[18:01:14.564]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.564]                   {
[18:01:14.564]                     inherits <- base::inherits
[18:01:14.564]                     invokeRestart <- base::invokeRestart
[18:01:14.564]                     is.null <- base::is.null
[18:01:14.564]                     muffled <- FALSE
[18:01:14.564]                     if (inherits(cond, "message")) {
[18:01:14.564]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:14.564]                       if (muffled) 
[18:01:14.564]                         invokeRestart("muffleMessage")
[18:01:14.564]                     }
[18:01:14.564]                     else if (inherits(cond, "warning")) {
[18:01:14.564]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:14.564]                       if (muffled) 
[18:01:14.564]                         invokeRestart("muffleWarning")
[18:01:14.564]                     }
[18:01:14.564]                     else if (inherits(cond, "condition")) {
[18:01:14.564]                       if (!is.null(pattern)) {
[18:01:14.564]                         computeRestarts <- base::computeRestarts
[18:01:14.564]                         grepl <- base::grepl
[18:01:14.564]                         restarts <- computeRestarts(cond)
[18:01:14.564]                         for (restart in restarts) {
[18:01:14.564]                           name <- restart$name
[18:01:14.564]                           if (is.null(name)) 
[18:01:14.564]                             next
[18:01:14.564]                           if (!grepl(pattern, name)) 
[18:01:14.564]                             next
[18:01:14.564]                           invokeRestart(restart)
[18:01:14.564]                           muffled <- TRUE
[18:01:14.564]                           break
[18:01:14.564]                         }
[18:01:14.564]                       }
[18:01:14.564]                     }
[18:01:14.564]                     invisible(muffled)
[18:01:14.564]                   }
[18:01:14.564]                   muffleCondition(cond)
[18:01:14.564]                 })
[18:01:14.564]             }))
[18:01:14.564]             future::FutureResult(value = ...future.value$value, 
[18:01:14.564]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:14.564]                   ...future.rng), globalenv = if (FALSE) 
[18:01:14.564]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:14.564]                     ...future.globalenv.names))
[18:01:14.564]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:14.564]         }, condition = base::local({
[18:01:14.564]             c <- base::c
[18:01:14.564]             inherits <- base::inherits
[18:01:14.564]             invokeRestart <- base::invokeRestart
[18:01:14.564]             length <- base::length
[18:01:14.564]             list <- base::list
[18:01:14.564]             seq.int <- base::seq.int
[18:01:14.564]             signalCondition <- base::signalCondition
[18:01:14.564]             sys.calls <- base::sys.calls
[18:01:14.564]             `[[` <- base::`[[`
[18:01:14.564]             `+` <- base::`+`
[18:01:14.564]             `<<-` <- base::`<<-`
[18:01:14.564]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:14.564]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:14.564]                   3L)]
[18:01:14.564]             }
[18:01:14.564]             function(cond) {
[18:01:14.564]                 is_error <- inherits(cond, "error")
[18:01:14.564]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:14.564]                   NULL)
[18:01:14.564]                 if (is_error) {
[18:01:14.564]                   sessionInformation <- function() {
[18:01:14.564]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:14.564]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:14.564]                       search = base::search(), system = base::Sys.info())
[18:01:14.564]                   }
[18:01:14.564]                   ...future.conditions[[length(...future.conditions) + 
[18:01:14.564]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:14.564]                     cond$call), session = sessionInformation(), 
[18:01:14.564]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:14.564]                   signalCondition(cond)
[18:01:14.564]                 }
[18:01:14.564]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:14.564]                 "immediateCondition"))) {
[18:01:14.564]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:14.564]                   ...future.conditions[[length(...future.conditions) + 
[18:01:14.564]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:14.564]                   if (TRUE && !signal) {
[18:01:14.564]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.564]                     {
[18:01:14.564]                       inherits <- base::inherits
[18:01:14.564]                       invokeRestart <- base::invokeRestart
[18:01:14.564]                       is.null <- base::is.null
[18:01:14.564]                       muffled <- FALSE
[18:01:14.564]                       if (inherits(cond, "message")) {
[18:01:14.564]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:14.564]                         if (muffled) 
[18:01:14.564]                           invokeRestart("muffleMessage")
[18:01:14.564]                       }
[18:01:14.564]                       else if (inherits(cond, "warning")) {
[18:01:14.564]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:14.564]                         if (muffled) 
[18:01:14.564]                           invokeRestart("muffleWarning")
[18:01:14.564]                       }
[18:01:14.564]                       else if (inherits(cond, "condition")) {
[18:01:14.564]                         if (!is.null(pattern)) {
[18:01:14.564]                           computeRestarts <- base::computeRestarts
[18:01:14.564]                           grepl <- base::grepl
[18:01:14.564]                           restarts <- computeRestarts(cond)
[18:01:14.564]                           for (restart in restarts) {
[18:01:14.564]                             name <- restart$name
[18:01:14.564]                             if (is.null(name)) 
[18:01:14.564]                               next
[18:01:14.564]                             if (!grepl(pattern, name)) 
[18:01:14.564]                               next
[18:01:14.564]                             invokeRestart(restart)
[18:01:14.564]                             muffled <- TRUE
[18:01:14.564]                             break
[18:01:14.564]                           }
[18:01:14.564]                         }
[18:01:14.564]                       }
[18:01:14.564]                       invisible(muffled)
[18:01:14.564]                     }
[18:01:14.564]                     muffleCondition(cond, pattern = "^muffle")
[18:01:14.564]                   }
[18:01:14.564]                 }
[18:01:14.564]                 else {
[18:01:14.564]                   if (TRUE) {
[18:01:14.564]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.564]                     {
[18:01:14.564]                       inherits <- base::inherits
[18:01:14.564]                       invokeRestart <- base::invokeRestart
[18:01:14.564]                       is.null <- base::is.null
[18:01:14.564]                       muffled <- FALSE
[18:01:14.564]                       if (inherits(cond, "message")) {
[18:01:14.564]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:14.564]                         if (muffled) 
[18:01:14.564]                           invokeRestart("muffleMessage")
[18:01:14.564]                       }
[18:01:14.564]                       else if (inherits(cond, "warning")) {
[18:01:14.564]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:14.564]                         if (muffled) 
[18:01:14.564]                           invokeRestart("muffleWarning")
[18:01:14.564]                       }
[18:01:14.564]                       else if (inherits(cond, "condition")) {
[18:01:14.564]                         if (!is.null(pattern)) {
[18:01:14.564]                           computeRestarts <- base::computeRestarts
[18:01:14.564]                           grepl <- base::grepl
[18:01:14.564]                           restarts <- computeRestarts(cond)
[18:01:14.564]                           for (restart in restarts) {
[18:01:14.564]                             name <- restart$name
[18:01:14.564]                             if (is.null(name)) 
[18:01:14.564]                               next
[18:01:14.564]                             if (!grepl(pattern, name)) 
[18:01:14.564]                               next
[18:01:14.564]                             invokeRestart(restart)
[18:01:14.564]                             muffled <- TRUE
[18:01:14.564]                             break
[18:01:14.564]                           }
[18:01:14.564]                         }
[18:01:14.564]                       }
[18:01:14.564]                       invisible(muffled)
[18:01:14.564]                     }
[18:01:14.564]                     muffleCondition(cond, pattern = "^muffle")
[18:01:14.564]                   }
[18:01:14.564]                 }
[18:01:14.564]             }
[18:01:14.564]         }))
[18:01:14.564]     }, error = function(ex) {
[18:01:14.564]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:14.564]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:14.564]                 ...future.rng), started = ...future.startTime, 
[18:01:14.564]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:14.564]             version = "1.8"), class = "FutureResult")
[18:01:14.564]     }, finally = {
[18:01:14.564]         if (!identical(...future.workdir, getwd())) 
[18:01:14.564]             setwd(...future.workdir)
[18:01:14.564]         {
[18:01:14.564]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:14.564]                 ...future.oldOptions$nwarnings <- NULL
[18:01:14.564]             }
[18:01:14.564]             base::options(...future.oldOptions)
[18:01:14.564]             if (.Platform$OS.type == "windows") {
[18:01:14.564]                 old_names <- names(...future.oldEnvVars)
[18:01:14.564]                 envs <- base::Sys.getenv()
[18:01:14.564]                 names <- names(envs)
[18:01:14.564]                 common <- intersect(names, old_names)
[18:01:14.564]                 added <- setdiff(names, old_names)
[18:01:14.564]                 removed <- setdiff(old_names, names)
[18:01:14.564]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:14.564]                   envs[common]]
[18:01:14.564]                 NAMES <- toupper(changed)
[18:01:14.564]                 args <- list()
[18:01:14.564]                 for (kk in seq_along(NAMES)) {
[18:01:14.564]                   name <- changed[[kk]]
[18:01:14.564]                   NAME <- NAMES[[kk]]
[18:01:14.564]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.564]                     next
[18:01:14.564]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:14.564]                 }
[18:01:14.564]                 NAMES <- toupper(added)
[18:01:14.564]                 for (kk in seq_along(NAMES)) {
[18:01:14.564]                   name <- added[[kk]]
[18:01:14.564]                   NAME <- NAMES[[kk]]
[18:01:14.564]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.564]                     next
[18:01:14.564]                   args[[name]] <- ""
[18:01:14.564]                 }
[18:01:14.564]                 NAMES <- toupper(removed)
[18:01:14.564]                 for (kk in seq_along(NAMES)) {
[18:01:14.564]                   name <- removed[[kk]]
[18:01:14.564]                   NAME <- NAMES[[kk]]
[18:01:14.564]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.564]                     next
[18:01:14.564]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:14.564]                 }
[18:01:14.564]                 if (length(args) > 0) 
[18:01:14.564]                   base::do.call(base::Sys.setenv, args = args)
[18:01:14.564]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:14.564]             }
[18:01:14.564]             else {
[18:01:14.564]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:14.564]             }
[18:01:14.564]             {
[18:01:14.564]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:14.564]                   0L) {
[18:01:14.564]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:14.564]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:14.564]                   base::options(opts)
[18:01:14.564]                 }
[18:01:14.564]                 {
[18:01:14.564]                   {
[18:01:14.564]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:14.564]                     NULL
[18:01:14.564]                   }
[18:01:14.564]                   options(future.plan = NULL)
[18:01:14.564]                   if (is.na(NA_character_)) 
[18:01:14.564]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:14.564]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:14.564]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:14.564]                     .init = FALSE)
[18:01:14.564]                 }
[18:01:14.564]             }
[18:01:14.564]         }
[18:01:14.564]     })
[18:01:14.564]     if (TRUE) {
[18:01:14.564]         base::sink(type = "output", split = FALSE)
[18:01:14.564]         if (TRUE) {
[18:01:14.564]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:14.564]         }
[18:01:14.564]         else {
[18:01:14.564]             ...future.result["stdout"] <- base::list(NULL)
[18:01:14.564]         }
[18:01:14.564]         base::close(...future.stdout)
[18:01:14.564]         ...future.stdout <- NULL
[18:01:14.564]     }
[18:01:14.564]     ...future.result$conditions <- ...future.conditions
[18:01:14.564]     ...future.result$finished <- base::Sys.time()
[18:01:14.564]     ...future.result
[18:01:14.564] }
[18:01:14.570] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[18:01:14.570] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[18:01:14.571] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[18:01:14.571] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[18:01:14.572] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[18:01:14.572] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[18:01:14.573] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[18:01:14.573] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[18:01:14.574] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[18:01:14.574] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[18:01:14.575] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[18:01:14.575] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[18:01:14.577] MultisessionFuture started
[18:01:14.577] - Launch lazy future ... done
[18:01:14.577] run() for ‘MultisessionFuture’ ... done
[18:01:14.578] Created future:
[18:01:14.578] MultisessionFuture:
[18:01:14.578] Label: ‘future_replicate-1’
[18:01:14.578] Expression:
[18:01:14.578] {
[18:01:14.578]     do.call(function(...) {
[18:01:14.578]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.578]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:14.578]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.578]             on.exit(options(oopts), add = TRUE)
[18:01:14.578]         }
[18:01:14.578]         {
[18:01:14.578]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:14.578]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.578]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.578]                   envir = globalenv(), inherits = FALSE)
[18:01:14.578]                 ...future.FUN(...future.X_jj, ...)
[18:01:14.578]             })
[18:01:14.578]         }
[18:01:14.578]     }, args = future.call.arguments)
[18:01:14.578] }
[18:01:14.578] Lazy evaluation: FALSE
[18:01:14.578] Asynchronous evaluation: TRUE
[18:01:14.578] Local evaluation: TRUE
[18:01:14.578] Environment: R_GlobalEnv
[18:01:14.578] Capture standard output: TRUE
[18:01:14.578] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:14.578] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:14.578] Packages: <none>
[18:01:14.578] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:14.578] Resolved: FALSE
[18:01:14.578] Value: <not collected>
[18:01:14.578] Conditions captured: <none>
[18:01:14.578] Early signaling: FALSE
[18:01:14.578] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:14.578] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:14.595] Chunk #1 of 2 ... DONE
[18:01:14.596] Chunk #2 of 2 ...
[18:01:14.596]  - Finding globals in 'X' for chunk #2 ...
[18:01:14.596] getGlobalsAndPackages() ...
[18:01:14.596] Searching for globals...
[18:01:14.600] 
[18:01:14.600] Searching for globals ... DONE
[18:01:14.600] - globals: [0] <none>
[18:01:14.600] getGlobalsAndPackages() ... DONE
[18:01:14.601]    + additional globals found: [n=0] 
[18:01:14.607]    + additional namespaces needed: [n=0] 
[18:01:14.607]  - Finding globals in 'X' for chunk #2 ... DONE
[18:01:14.607]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:14.608]  - seeds: [3] <seeds>
[18:01:14.613]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.613] getGlobalsAndPackages() ...
[18:01:14.614] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.614] Resolving globals: FALSE
[18:01:14.614] Tweak future expression to call with '...' arguments ...
[18:01:14.614] {
[18:01:14.614]     do.call(function(...) {
[18:01:14.614]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.614]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:14.614]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.614]             on.exit(options(oopts), add = TRUE)
[18:01:14.614]         }
[18:01:14.614]         {
[18:01:14.614]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:14.614]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.614]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.614]                   envir = globalenv(), inherits = FALSE)
[18:01:14.614]                 ...future.FUN(...future.X_jj, ...)
[18:01:14.614]             })
[18:01:14.614]         }
[18:01:14.614]     }, args = future.call.arguments)
[18:01:14.614] }
[18:01:14.617] Tweak future expression to call with '...' arguments ... DONE
[18:01:14.618] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.619] 
[18:01:14.619] getGlobalsAndPackages() ... DONE
[18:01:14.619] run() for ‘Future’ ...
[18:01:14.620] - state: ‘created’
[18:01:14.620] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:01:14.661] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:14.661] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:01:14.661]   - Field: ‘node’
[18:01:14.662]   - Field: ‘label’
[18:01:14.662]   - Field: ‘local’
[18:01:14.662]   - Field: ‘owner’
[18:01:14.662]   - Field: ‘envir’
[18:01:14.662]   - Field: ‘workers’
[18:01:14.663]   - Field: ‘packages’
[18:01:14.663]   - Field: ‘gc’
[18:01:14.663]   - Field: ‘conditions’
[18:01:14.663]   - Field: ‘persistent’
[18:01:14.663]   - Field: ‘expr’
[18:01:14.664]   - Field: ‘uuid’
[18:01:14.664]   - Field: ‘seed’
[18:01:14.664]   - Field: ‘version’
[18:01:14.664]   - Field: ‘result’
[18:01:14.664]   - Field: ‘asynchronous’
[18:01:14.665]   - Field: ‘calls’
[18:01:14.665]   - Field: ‘globals’
[18:01:14.665]   - Field: ‘stdout’
[18:01:14.665]   - Field: ‘earlySignal’
[18:01:14.665]   - Field: ‘lazy’
[18:01:14.666]   - Field: ‘state’
[18:01:14.666] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:01:14.666] - Launch lazy future ...
[18:01:14.667] Packages needed by the future expression (n = 0): <none>
[18:01:14.667] Packages needed by future strategies (n = 0): <none>
[18:01:14.668] {
[18:01:14.668]     {
[18:01:14.668]         {
[18:01:14.668]             ...future.startTime <- base::Sys.time()
[18:01:14.668]             {
[18:01:14.668]                 {
[18:01:14.668]                   {
[18:01:14.668]                     {
[18:01:14.668]                       base::local({
[18:01:14.668]                         has_future <- base::requireNamespace("future", 
[18:01:14.668]                           quietly = TRUE)
[18:01:14.668]                         if (has_future) {
[18:01:14.668]                           ns <- base::getNamespace("future")
[18:01:14.668]                           version <- ns[[".package"]][["version"]]
[18:01:14.668]                           if (is.null(version)) 
[18:01:14.668]                             version <- utils::packageVersion("future")
[18:01:14.668]                         }
[18:01:14.668]                         else {
[18:01:14.668]                           version <- NULL
[18:01:14.668]                         }
[18:01:14.668]                         if (!has_future || version < "1.8.0") {
[18:01:14.668]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:14.668]                             "", base::R.version$version.string), 
[18:01:14.668]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:14.668]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:14.668]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:14.668]                               "release", "version")], collapse = " "), 
[18:01:14.668]                             hostname = base::Sys.info()[["nodename"]])
[18:01:14.668]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:14.668]                             info)
[18:01:14.668]                           info <- base::paste(info, collapse = "; ")
[18:01:14.668]                           if (!has_future) {
[18:01:14.668]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:14.668]                               info)
[18:01:14.668]                           }
[18:01:14.668]                           else {
[18:01:14.668]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:14.668]                               info, version)
[18:01:14.668]                           }
[18:01:14.668]                           base::stop(msg)
[18:01:14.668]                         }
[18:01:14.668]                       })
[18:01:14.668]                     }
[18:01:14.668]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:14.668]                     base::options(mc.cores = 1L)
[18:01:14.668]                   }
[18:01:14.668]                   ...future.strategy.old <- future::plan("list")
[18:01:14.668]                   options(future.plan = NULL)
[18:01:14.668]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:14.668]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:14.668]                 }
[18:01:14.668]                 ...future.workdir <- getwd()
[18:01:14.668]             }
[18:01:14.668]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:14.668]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:14.668]         }
[18:01:14.668]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:14.668]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:14.668]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:14.668]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:14.668]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:14.668]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:14.668]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:14.668]             base::names(...future.oldOptions))
[18:01:14.668]     }
[18:01:14.668]     if (FALSE) {
[18:01:14.668]     }
[18:01:14.668]     else {
[18:01:14.668]         if (TRUE) {
[18:01:14.668]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:14.668]                 open = "w")
[18:01:14.668]         }
[18:01:14.668]         else {
[18:01:14.668]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:14.668]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:14.668]         }
[18:01:14.668]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:14.668]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:14.668]             base::sink(type = "output", split = FALSE)
[18:01:14.668]             base::close(...future.stdout)
[18:01:14.668]         }, add = TRUE)
[18:01:14.668]     }
[18:01:14.668]     ...future.frame <- base::sys.nframe()
[18:01:14.668]     ...future.conditions <- base::list()
[18:01:14.668]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:14.668]     if (FALSE) {
[18:01:14.668]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:14.668]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:14.668]     }
[18:01:14.668]     ...future.result <- base::tryCatch({
[18:01:14.668]         base::withCallingHandlers({
[18:01:14.668]             ...future.value <- base::withVisible(base::local({
[18:01:14.668]                 ...future.makeSendCondition <- base::local({
[18:01:14.668]                   sendCondition <- NULL
[18:01:14.668]                   function(frame = 1L) {
[18:01:14.668]                     if (is.function(sendCondition)) 
[18:01:14.668]                       return(sendCondition)
[18:01:14.668]                     ns <- getNamespace("parallel")
[18:01:14.668]                     if (exists("sendData", mode = "function", 
[18:01:14.668]                       envir = ns)) {
[18:01:14.668]                       parallel_sendData <- get("sendData", mode = "function", 
[18:01:14.668]                         envir = ns)
[18:01:14.668]                       envir <- sys.frame(frame)
[18:01:14.668]                       master <- NULL
[18:01:14.668]                       while (!identical(envir, .GlobalEnv) && 
[18:01:14.668]                         !identical(envir, emptyenv())) {
[18:01:14.668]                         if (exists("master", mode = "list", envir = envir, 
[18:01:14.668]                           inherits = FALSE)) {
[18:01:14.668]                           master <- get("master", mode = "list", 
[18:01:14.668]                             envir = envir, inherits = FALSE)
[18:01:14.668]                           if (inherits(master, c("SOCKnode", 
[18:01:14.668]                             "SOCK0node"))) {
[18:01:14.668]                             sendCondition <<- function(cond) {
[18:01:14.668]                               data <- list(type = "VALUE", value = cond, 
[18:01:14.668]                                 success = TRUE)
[18:01:14.668]                               parallel_sendData(master, data)
[18:01:14.668]                             }
[18:01:14.668]                             return(sendCondition)
[18:01:14.668]                           }
[18:01:14.668]                         }
[18:01:14.668]                         frame <- frame + 1L
[18:01:14.668]                         envir <- sys.frame(frame)
[18:01:14.668]                       }
[18:01:14.668]                     }
[18:01:14.668]                     sendCondition <<- function(cond) NULL
[18:01:14.668]                   }
[18:01:14.668]                 })
[18:01:14.668]                 withCallingHandlers({
[18:01:14.668]                   {
[18:01:14.668]                     do.call(function(...) {
[18:01:14.668]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.668]                       if (!identical(...future.globals.maxSize.org, 
[18:01:14.668]                         ...future.globals.maxSize)) {
[18:01:14.668]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.668]                         on.exit(options(oopts), add = TRUE)
[18:01:14.668]                       }
[18:01:14.668]                       {
[18:01:14.668]                         lapply(seq_along(...future.elements_ii), 
[18:01:14.668]                           FUN = function(jj) {
[18:01:14.668]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.668]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.668]                               envir = globalenv(), inherits = FALSE)
[18:01:14.668]                             ...future.FUN(...future.X_jj, ...)
[18:01:14.668]                           })
[18:01:14.668]                       }
[18:01:14.668]                     }, args = future.call.arguments)
[18:01:14.668]                   }
[18:01:14.668]                 }, immediateCondition = function(cond) {
[18:01:14.668]                   sendCondition <- ...future.makeSendCondition()
[18:01:14.668]                   sendCondition(cond)
[18:01:14.668]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.668]                   {
[18:01:14.668]                     inherits <- base::inherits
[18:01:14.668]                     invokeRestart <- base::invokeRestart
[18:01:14.668]                     is.null <- base::is.null
[18:01:14.668]                     muffled <- FALSE
[18:01:14.668]                     if (inherits(cond, "message")) {
[18:01:14.668]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:14.668]                       if (muffled) 
[18:01:14.668]                         invokeRestart("muffleMessage")
[18:01:14.668]                     }
[18:01:14.668]                     else if (inherits(cond, "warning")) {
[18:01:14.668]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:14.668]                       if (muffled) 
[18:01:14.668]                         invokeRestart("muffleWarning")
[18:01:14.668]                     }
[18:01:14.668]                     else if (inherits(cond, "condition")) {
[18:01:14.668]                       if (!is.null(pattern)) {
[18:01:14.668]                         computeRestarts <- base::computeRestarts
[18:01:14.668]                         grepl <- base::grepl
[18:01:14.668]                         restarts <- computeRestarts(cond)
[18:01:14.668]                         for (restart in restarts) {
[18:01:14.668]                           name <- restart$name
[18:01:14.668]                           if (is.null(name)) 
[18:01:14.668]                             next
[18:01:14.668]                           if (!grepl(pattern, name)) 
[18:01:14.668]                             next
[18:01:14.668]                           invokeRestart(restart)
[18:01:14.668]                           muffled <- TRUE
[18:01:14.668]                           break
[18:01:14.668]                         }
[18:01:14.668]                       }
[18:01:14.668]                     }
[18:01:14.668]                     invisible(muffled)
[18:01:14.668]                   }
[18:01:14.668]                   muffleCondition(cond)
[18:01:14.668]                 })
[18:01:14.668]             }))
[18:01:14.668]             future::FutureResult(value = ...future.value$value, 
[18:01:14.668]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:14.668]                   ...future.rng), globalenv = if (FALSE) 
[18:01:14.668]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:14.668]                     ...future.globalenv.names))
[18:01:14.668]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:14.668]         }, condition = base::local({
[18:01:14.668]             c <- base::c
[18:01:14.668]             inherits <- base::inherits
[18:01:14.668]             invokeRestart <- base::invokeRestart
[18:01:14.668]             length <- base::length
[18:01:14.668]             list <- base::list
[18:01:14.668]             seq.int <- base::seq.int
[18:01:14.668]             signalCondition <- base::signalCondition
[18:01:14.668]             sys.calls <- base::sys.calls
[18:01:14.668]             `[[` <- base::`[[`
[18:01:14.668]             `+` <- base::`+`
[18:01:14.668]             `<<-` <- base::`<<-`
[18:01:14.668]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:14.668]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:14.668]                   3L)]
[18:01:14.668]             }
[18:01:14.668]             function(cond) {
[18:01:14.668]                 is_error <- inherits(cond, "error")
[18:01:14.668]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:14.668]                   NULL)
[18:01:14.668]                 if (is_error) {
[18:01:14.668]                   sessionInformation <- function() {
[18:01:14.668]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:14.668]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:14.668]                       search = base::search(), system = base::Sys.info())
[18:01:14.668]                   }
[18:01:14.668]                   ...future.conditions[[length(...future.conditions) + 
[18:01:14.668]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:14.668]                     cond$call), session = sessionInformation(), 
[18:01:14.668]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:14.668]                   signalCondition(cond)
[18:01:14.668]                 }
[18:01:14.668]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:14.668]                 "immediateCondition"))) {
[18:01:14.668]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:14.668]                   ...future.conditions[[length(...future.conditions) + 
[18:01:14.668]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:14.668]                   if (TRUE && !signal) {
[18:01:14.668]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.668]                     {
[18:01:14.668]                       inherits <- base::inherits
[18:01:14.668]                       invokeRestart <- base::invokeRestart
[18:01:14.668]                       is.null <- base::is.null
[18:01:14.668]                       muffled <- FALSE
[18:01:14.668]                       if (inherits(cond, "message")) {
[18:01:14.668]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:14.668]                         if (muffled) 
[18:01:14.668]                           invokeRestart("muffleMessage")
[18:01:14.668]                       }
[18:01:14.668]                       else if (inherits(cond, "warning")) {
[18:01:14.668]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:14.668]                         if (muffled) 
[18:01:14.668]                           invokeRestart("muffleWarning")
[18:01:14.668]                       }
[18:01:14.668]                       else if (inherits(cond, "condition")) {
[18:01:14.668]                         if (!is.null(pattern)) {
[18:01:14.668]                           computeRestarts <- base::computeRestarts
[18:01:14.668]                           grepl <- base::grepl
[18:01:14.668]                           restarts <- computeRestarts(cond)
[18:01:14.668]                           for (restart in restarts) {
[18:01:14.668]                             name <- restart$name
[18:01:14.668]                             if (is.null(name)) 
[18:01:14.668]                               next
[18:01:14.668]                             if (!grepl(pattern, name)) 
[18:01:14.668]                               next
[18:01:14.668]                             invokeRestart(restart)
[18:01:14.668]                             muffled <- TRUE
[18:01:14.668]                             break
[18:01:14.668]                           }
[18:01:14.668]                         }
[18:01:14.668]                       }
[18:01:14.668]                       invisible(muffled)
[18:01:14.668]                     }
[18:01:14.668]                     muffleCondition(cond, pattern = "^muffle")
[18:01:14.668]                   }
[18:01:14.668]                 }
[18:01:14.668]                 else {
[18:01:14.668]                   if (TRUE) {
[18:01:14.668]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.668]                     {
[18:01:14.668]                       inherits <- base::inherits
[18:01:14.668]                       invokeRestart <- base::invokeRestart
[18:01:14.668]                       is.null <- base::is.null
[18:01:14.668]                       muffled <- FALSE
[18:01:14.668]                       if (inherits(cond, "message")) {
[18:01:14.668]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:14.668]                         if (muffled) 
[18:01:14.668]                           invokeRestart("muffleMessage")
[18:01:14.668]                       }
[18:01:14.668]                       else if (inherits(cond, "warning")) {
[18:01:14.668]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:14.668]                         if (muffled) 
[18:01:14.668]                           invokeRestart("muffleWarning")
[18:01:14.668]                       }
[18:01:14.668]                       else if (inherits(cond, "condition")) {
[18:01:14.668]                         if (!is.null(pattern)) {
[18:01:14.668]                           computeRestarts <- base::computeRestarts
[18:01:14.668]                           grepl <- base::grepl
[18:01:14.668]                           restarts <- computeRestarts(cond)
[18:01:14.668]                           for (restart in restarts) {
[18:01:14.668]                             name <- restart$name
[18:01:14.668]                             if (is.null(name)) 
[18:01:14.668]                               next
[18:01:14.668]                             if (!grepl(pattern, name)) 
[18:01:14.668]                               next
[18:01:14.668]                             invokeRestart(restart)
[18:01:14.668]                             muffled <- TRUE
[18:01:14.668]                             break
[18:01:14.668]                           }
[18:01:14.668]                         }
[18:01:14.668]                       }
[18:01:14.668]                       invisible(muffled)
[18:01:14.668]                     }
[18:01:14.668]                     muffleCondition(cond, pattern = "^muffle")
[18:01:14.668]                   }
[18:01:14.668]                 }
[18:01:14.668]             }
[18:01:14.668]         }))
[18:01:14.668]     }, error = function(ex) {
[18:01:14.668]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:14.668]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:14.668]                 ...future.rng), started = ...future.startTime, 
[18:01:14.668]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:14.668]             version = "1.8"), class = "FutureResult")
[18:01:14.668]     }, finally = {
[18:01:14.668]         if (!identical(...future.workdir, getwd())) 
[18:01:14.668]             setwd(...future.workdir)
[18:01:14.668]         {
[18:01:14.668]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:14.668]                 ...future.oldOptions$nwarnings <- NULL
[18:01:14.668]             }
[18:01:14.668]             base::options(...future.oldOptions)
[18:01:14.668]             if (.Platform$OS.type == "windows") {
[18:01:14.668]                 old_names <- names(...future.oldEnvVars)
[18:01:14.668]                 envs <- base::Sys.getenv()
[18:01:14.668]                 names <- names(envs)
[18:01:14.668]                 common <- intersect(names, old_names)
[18:01:14.668]                 added <- setdiff(names, old_names)
[18:01:14.668]                 removed <- setdiff(old_names, names)
[18:01:14.668]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:14.668]                   envs[common]]
[18:01:14.668]                 NAMES <- toupper(changed)
[18:01:14.668]                 args <- list()
[18:01:14.668]                 for (kk in seq_along(NAMES)) {
[18:01:14.668]                   name <- changed[[kk]]
[18:01:14.668]                   NAME <- NAMES[[kk]]
[18:01:14.668]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.668]                     next
[18:01:14.668]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:14.668]                 }
[18:01:14.668]                 NAMES <- toupper(added)
[18:01:14.668]                 for (kk in seq_along(NAMES)) {
[18:01:14.668]                   name <- added[[kk]]
[18:01:14.668]                   NAME <- NAMES[[kk]]
[18:01:14.668]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.668]                     next
[18:01:14.668]                   args[[name]] <- ""
[18:01:14.668]                 }
[18:01:14.668]                 NAMES <- toupper(removed)
[18:01:14.668]                 for (kk in seq_along(NAMES)) {
[18:01:14.668]                   name <- removed[[kk]]
[18:01:14.668]                   NAME <- NAMES[[kk]]
[18:01:14.668]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.668]                     next
[18:01:14.668]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:14.668]                 }
[18:01:14.668]                 if (length(args) > 0) 
[18:01:14.668]                   base::do.call(base::Sys.setenv, args = args)
[18:01:14.668]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:14.668]             }
[18:01:14.668]             else {
[18:01:14.668]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:14.668]             }
[18:01:14.668]             {
[18:01:14.668]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:14.668]                   0L) {
[18:01:14.668]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:14.668]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:14.668]                   base::options(opts)
[18:01:14.668]                 }
[18:01:14.668]                 {
[18:01:14.668]                   {
[18:01:14.668]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:14.668]                     NULL
[18:01:14.668]                   }
[18:01:14.668]                   options(future.plan = NULL)
[18:01:14.668]                   if (is.na(NA_character_)) 
[18:01:14.668]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:14.668]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:14.668]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:14.668]                     .init = FALSE)
[18:01:14.668]                 }
[18:01:14.668]             }
[18:01:14.668]         }
[18:01:14.668]     })
[18:01:14.668]     if (TRUE) {
[18:01:14.668]         base::sink(type = "output", split = FALSE)
[18:01:14.668]         if (TRUE) {
[18:01:14.668]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:14.668]         }
[18:01:14.668]         else {
[18:01:14.668]             ...future.result["stdout"] <- base::list(NULL)
[18:01:14.668]         }
[18:01:14.668]         base::close(...future.stdout)
[18:01:14.668]         ...future.stdout <- NULL
[18:01:14.668]     }
[18:01:14.668]     ...future.result$conditions <- ...future.conditions
[18:01:14.668]     ...future.result$finished <- base::Sys.time()
[18:01:14.668]     ...future.result
[18:01:14.668] }
[18:01:14.673] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[18:01:14.673] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[18:01:14.674] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[18:01:14.674] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[18:01:14.675] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[18:01:14.675] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[18:01:14.676] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[18:01:14.676] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[18:01:14.677] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[18:01:14.677] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[18:01:14.678] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[18:01:14.678] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[18:01:14.679] MultisessionFuture started
[18:01:14.680] - Launch lazy future ... done
[18:01:14.680] run() for ‘MultisessionFuture’ ... done
[18:01:14.680] Created future:
[18:01:14.680] MultisessionFuture:
[18:01:14.680] Label: ‘future_replicate-2’
[18:01:14.680] Expression:
[18:01:14.680] {
[18:01:14.680]     do.call(function(...) {
[18:01:14.680]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.680]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:14.680]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.680]             on.exit(options(oopts), add = TRUE)
[18:01:14.680]         }
[18:01:14.680]         {
[18:01:14.680]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:14.680]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.680]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.680]                   envir = globalenv(), inherits = FALSE)
[18:01:14.680]                 ...future.FUN(...future.X_jj, ...)
[18:01:14.680]             })
[18:01:14.680]         }
[18:01:14.680]     }, args = future.call.arguments)
[18:01:14.680] }
[18:01:14.680] Lazy evaluation: FALSE
[18:01:14.680] Asynchronous evaluation: TRUE
[18:01:14.680] Local evaluation: TRUE
[18:01:14.680] Environment: R_GlobalEnv
[18:01:14.680] Capture standard output: TRUE
[18:01:14.680] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:14.680] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[18:01:14.680] Packages: <none>
[18:01:14.680] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:14.680] Resolved: FALSE
[18:01:14.680] Value: <not collected>
[18:01:14.680] Conditions captured: <none>
[18:01:14.680] Early signaling: FALSE
[18:01:14.680] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:14.680] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:14.693] Chunk #2 of 2 ... DONE
[18:01:14.693] Launching 2 futures (chunks) ... DONE
[18:01:14.694] Resolving 2 futures (chunks) ...
[18:01:14.694] resolve() on list ...
[18:01:14.694]  recursive: 0
[18:01:14.694]  length: 2
[18:01:14.694] 
[18:01:14.695] receiveMessageFromWorker() for ClusterFuture ...
[18:01:14.696] - Validating connection of MultisessionFuture
[18:01:14.696] - received message: FutureResult
[18:01:14.696] - Received FutureResult
[18:01:14.696] - Erased future from FutureRegistry
[18:01:14.697] result() for ClusterFuture ...
[18:01:14.697] - result already collected: FutureResult
[18:01:14.697] result() for ClusterFuture ... done
[18:01:14.697] receiveMessageFromWorker() for ClusterFuture ... done
[18:01:14.697] Future #1
[18:01:14.698] result() for ClusterFuture ...
[18:01:14.698] - result already collected: FutureResult
[18:01:14.698] result() for ClusterFuture ... done
[18:01:14.698] result() for ClusterFuture ...
[18:01:14.698] - result already collected: FutureResult
[18:01:14.698] result() for ClusterFuture ... done
[18:01:14.699] signalConditionsASAP(MultisessionFuture, pos=1) ...
[18:01:14.699] - nx: 2
[18:01:14.699] - relay: TRUE
[18:01:14.699] - stdout: TRUE
[18:01:14.699] - signal: TRUE
[18:01:14.700] - resignal: FALSE
[18:01:14.700] - force: TRUE
[18:01:14.700] - relayed: [n=2] FALSE, FALSE
[18:01:14.700] - queued futures: [n=2] FALSE, FALSE
[18:01:14.700]  - until=1
[18:01:14.700]  - relaying element #1
[18:01:14.701] result() for ClusterFuture ...
[18:01:14.701] - result already collected: FutureResult
[18:01:14.701] result() for ClusterFuture ... done
[18:01:14.701] result() for ClusterFuture ...
[18:01:14.701] - result already collected: FutureResult
[18:01:14.702] result() for ClusterFuture ... done
[18:01:14.702] result() for ClusterFuture ...
[18:01:14.702] - result already collected: FutureResult
[18:01:14.702] result() for ClusterFuture ... done
[18:01:14.702] result() for ClusterFuture ...
[18:01:14.703] - result already collected: FutureResult
[18:01:14.703] result() for ClusterFuture ... done
[18:01:14.703] - relayed: [n=2] TRUE, FALSE
[18:01:14.703] - queued futures: [n=2] TRUE, FALSE
[18:01:14.703] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[18:01:14.704]  length: 1 (resolved future 1)
[18:01:14.726] receiveMessageFromWorker() for ClusterFuture ...
[18:01:14.726] - Validating connection of MultisessionFuture
[18:01:14.726] - received message: FutureResult
[18:01:14.726] - Received FutureResult
[18:01:14.727] - Erased future from FutureRegistry
[18:01:14.727] result() for ClusterFuture ...
[18:01:14.727] - result already collected: FutureResult
[18:01:14.727] result() for ClusterFuture ... done
[18:01:14.727] receiveMessageFromWorker() for ClusterFuture ... done
[18:01:14.728] Future #2
[18:01:14.728] result() for ClusterFuture ...
[18:01:14.728] - result already collected: FutureResult
[18:01:14.728] result() for ClusterFuture ... done
[18:01:14.728] result() for ClusterFuture ...
[18:01:14.729] - result already collected: FutureResult
[18:01:14.729] result() for ClusterFuture ... done
[18:01:14.729] signalConditionsASAP(MultisessionFuture, pos=2) ...
[18:01:14.729] - nx: 2
[18:01:14.729] - relay: TRUE
[18:01:14.730] - stdout: TRUE
[18:01:14.730] - signal: TRUE
[18:01:14.730] - resignal: FALSE
[18:01:14.730] - force: TRUE
[18:01:14.730] - relayed: [n=2] TRUE, FALSE
[18:01:14.730] - queued futures: [n=2] TRUE, FALSE
[18:01:14.731]  - until=2
[18:01:14.731]  - relaying element #2
[18:01:14.731] result() for ClusterFuture ...
[18:01:14.731] - result already collected: FutureResult
[18:01:14.731] result() for ClusterFuture ... done
[18:01:14.732] result() for ClusterFuture ...
[18:01:14.732] - result already collected: FutureResult
[18:01:14.732] result() for ClusterFuture ... done
[18:01:14.732] result() for ClusterFuture ...
[18:01:14.732] - result already collected: FutureResult
[18:01:14.733] result() for ClusterFuture ... done
[18:01:14.733] result() for ClusterFuture ...
[18:01:14.733] - result already collected: FutureResult
[18:01:14.733] result() for ClusterFuture ... done
[18:01:14.733] - relayed: [n=2] TRUE, TRUE
[18:01:14.733] - queued futures: [n=2] TRUE, TRUE
[18:01:14.734] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[18:01:14.734]  length: 0 (resolved future 2)
[18:01:14.734] Relaying remaining futures
[18:01:14.734] signalConditionsASAP(NULL, pos=0) ...
[18:01:14.734] - nx: 2
[18:01:14.735] - relay: TRUE
[18:01:14.735] - stdout: TRUE
[18:01:14.735] - signal: TRUE
[18:01:14.735] - resignal: FALSE
[18:01:14.735] - force: TRUE
[18:01:14.735] - relayed: [n=2] TRUE, TRUE
[18:01:14.736] - queued futures: [n=2] TRUE, TRUE
 - flush all
[18:01:14.736] - relayed: [n=2] TRUE, TRUE
[18:01:14.736] - queued futures: [n=2] TRUE, TRUE
[18:01:14.736] signalConditionsASAP(NULL, pos=0) ... done
[18:01:14.737] resolve() on list ... DONE
[18:01:14.737] result() for ClusterFuture ...
[18:01:14.737] - result already collected: FutureResult
[18:01:14.737] result() for ClusterFuture ... done
[18:01:14.737] result() for ClusterFuture ...
[18:01:14.737] - result already collected: FutureResult
[18:01:14.738] result() for ClusterFuture ... done
[18:01:14.738] result() for ClusterFuture ...
[18:01:14.741] - result already collected: FutureResult
[18:01:14.741] result() for ClusterFuture ... done
[18:01:14.741] result() for ClusterFuture ...
[18:01:14.742] - result already collected: FutureResult
[18:01:14.742] result() for ClusterFuture ... done
[18:01:14.742]  - Number of value chunks collected: 2
[18:01:14.742] Resolving 2 futures (chunks) ... DONE
[18:01:14.742] Reducing values from 2 chunks ...
[18:01:14.743]  - Number of values collected after concatenation: 5
[18:01:14.743]  - Number of values expected: 5
[18:01:14.743] Reducing values from 2 chunks ... DONE
[18:01:14.743] future_lapply() ... DONE
- example(replicate) ...
[18:01:14.744] future_lapply() ...
[18:01:14.745] Generating random seeds ...
[18:01:14.745] Generating random seed streams for 5 elements ...
[18:01:14.745] Generating random seed streams for 5 elements ... DONE
[18:01:14.745] Generating random seeds ... DONE
[18:01:14.745] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[18:01:14.753] Number of chunks: 2
[18:01:14.753] getGlobalsAndPackagesXApply() ...
[18:01:14.753]  - future.globals: TRUE
[18:01:14.753] getGlobalsAndPackages() ...
[18:01:14.753] Searching for globals...
[18:01:14.757] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[18:01:14.757] Searching for globals ... DONE
[18:01:14.757] Resolving globals: FALSE
[18:01:14.758] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[18:01:14.759] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[18:01:14.759] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[18:01:14.760] 
[18:01:14.760] getGlobalsAndPackages() ... DONE
[18:01:14.760]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[18:01:14.760]  - needed namespaces: [n=0] 
[18:01:14.760] Finding globals ... DONE
[18:01:14.761]  - use_args: TRUE
[18:01:14.761]  - Getting '...' globals ...
[18:01:14.761] resolve() on list ...
[18:01:14.762]  recursive: 0
[18:01:14.762]  length: 1
[18:01:14.762]  elements: ‘...’
[18:01:14.762]  length: 0 (resolved future 1)
[18:01:14.762] resolve() on list ... DONE
[18:01:14.763]    - '...' content: [n=0] 
[18:01:14.763] List of 1
[18:01:14.763]  $ ...: list()
[18:01:14.763]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:14.763]  - attr(*, "where")=List of 1
[18:01:14.763]   ..$ ...:<environment: 0x635eb5973460> 
[18:01:14.763]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:14.763]  - attr(*, "resolved")= logi TRUE
[18:01:14.763]  - attr(*, "total_size")= num NA
[18:01:14.768]  - Getting '...' globals ... DONE
[18:01:14.768] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[18:01:14.768] List of 4
[18:01:14.768]  $ ...future.FUN:function (...)  
[18:01:14.768]  $ foo          :function (x = 1, y = 2)  
[18:01:14.768]  $ x            : num 3
[18:01:14.768]  $ ...          : list()
[18:01:14.768]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:01:14.768]  - attr(*, "where")=List of 4
[18:01:14.768]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[18:01:14.768]   ..$ foo          :<environment: R_EmptyEnv> 
[18:01:14.768]   ..$ x            :<environment: R_EmptyEnv> 
[18:01:14.768]   ..$ ...          :<environment: 0x635eb5973460> 
[18:01:14.768]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:01:14.768]  - attr(*, "resolved")= logi FALSE
[18:01:14.768]  - attr(*, "total_size")= num 2200
[18:01:14.776] Packages to be attached in all futures: [n=0] 
[18:01:14.776] getGlobalsAndPackagesXApply() ... DONE
[18:01:14.776] Number of futures (= number of chunks): 2
[18:01:14.777] Launching 2 futures (chunks) ...
[18:01:14.777] Chunk #1 of 2 ...
[18:01:14.777]  - Finding globals in 'X' for chunk #1 ...
[18:01:14.777] getGlobalsAndPackages() ...
[18:01:14.777] Searching for globals...
[18:01:14.778] 
[18:01:14.778] Searching for globals ... DONE
[18:01:14.778] - globals: [0] <none>
[18:01:14.778] getGlobalsAndPackages() ... DONE
[18:01:14.779]    + additional globals found: [n=0] 
[18:01:14.779]    + additional namespaces needed: [n=0] 
[18:01:14.779]  - Finding globals in 'X' for chunk #1 ... DONE
[18:01:14.779]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:14.779]  - seeds: [2] <seeds>
[18:01:14.780]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.780] getGlobalsAndPackages() ...
[18:01:14.780] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.780] Resolving globals: FALSE
[18:01:14.780] Tweak future expression to call with '...' arguments ...
[18:01:14.781] {
[18:01:14.781]     do.call(function(...) {
[18:01:14.781]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.781]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:14.781]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.781]             on.exit(options(oopts), add = TRUE)
[18:01:14.781]         }
[18:01:14.781]         {
[18:01:14.781]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:14.781]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.781]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.781]                   envir = globalenv(), inherits = FALSE)
[18:01:14.781]                 ...future.FUN(...future.X_jj, ...)
[18:01:14.781]             })
[18:01:14.781]         }
[18:01:14.781]     }, args = future.call.arguments)
[18:01:14.781] }
[18:01:14.781] Tweak future expression to call with '...' arguments ... DONE
[18:01:14.782] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.782] 
[18:01:14.782] getGlobalsAndPackages() ... DONE
[18:01:14.783] run() for ‘Future’ ...
[18:01:14.783] - state: ‘created’
[18:01:14.783] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:01:14.807] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:14.808] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:01:14.808]   - Field: ‘node’
[18:01:14.808]   - Field: ‘label’
[18:01:14.808]   - Field: ‘local’
[18:01:14.809]   - Field: ‘owner’
[18:01:14.809]   - Field: ‘envir’
[18:01:14.809]   - Field: ‘workers’
[18:01:14.809]   - Field: ‘packages’
[18:01:14.809]   - Field: ‘gc’
[18:01:14.810]   - Field: ‘conditions’
[18:01:14.810]   - Field: ‘persistent’
[18:01:14.810]   - Field: ‘expr’
[18:01:14.810]   - Field: ‘uuid’
[18:01:14.810]   - Field: ‘seed’
[18:01:14.811]   - Field: ‘version’
[18:01:14.811]   - Field: ‘result’
[18:01:14.811]   - Field: ‘asynchronous’
[18:01:14.811]   - Field: ‘calls’
[18:01:14.811]   - Field: ‘globals’
[18:01:14.812]   - Field: ‘stdout’
[18:01:14.812]   - Field: ‘earlySignal’
[18:01:14.812]   - Field: ‘lazy’
[18:01:14.812]   - Field: ‘state’
[18:01:14.812] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:01:14.813] - Launch lazy future ...
[18:01:14.814] Packages needed by the future expression (n = 0): <none>
[18:01:14.814] Packages needed by future strategies (n = 0): <none>
[18:01:14.815] {
[18:01:14.815]     {
[18:01:14.815]         {
[18:01:14.815]             ...future.startTime <- base::Sys.time()
[18:01:14.815]             {
[18:01:14.815]                 {
[18:01:14.815]                   {
[18:01:14.815]                     {
[18:01:14.815]                       base::local({
[18:01:14.815]                         has_future <- base::requireNamespace("future", 
[18:01:14.815]                           quietly = TRUE)
[18:01:14.815]                         if (has_future) {
[18:01:14.815]                           ns <- base::getNamespace("future")
[18:01:14.815]                           version <- ns[[".package"]][["version"]]
[18:01:14.815]                           if (is.null(version)) 
[18:01:14.815]                             version <- utils::packageVersion("future")
[18:01:14.815]                         }
[18:01:14.815]                         else {
[18:01:14.815]                           version <- NULL
[18:01:14.815]                         }
[18:01:14.815]                         if (!has_future || version < "1.8.0") {
[18:01:14.815]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:14.815]                             "", base::R.version$version.string), 
[18:01:14.815]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:14.815]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:14.815]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:14.815]                               "release", "version")], collapse = " "), 
[18:01:14.815]                             hostname = base::Sys.info()[["nodename"]])
[18:01:14.815]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:14.815]                             info)
[18:01:14.815]                           info <- base::paste(info, collapse = "; ")
[18:01:14.815]                           if (!has_future) {
[18:01:14.815]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:14.815]                               info)
[18:01:14.815]                           }
[18:01:14.815]                           else {
[18:01:14.815]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:14.815]                               info, version)
[18:01:14.815]                           }
[18:01:14.815]                           base::stop(msg)
[18:01:14.815]                         }
[18:01:14.815]                       })
[18:01:14.815]                     }
[18:01:14.815]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:14.815]                     base::options(mc.cores = 1L)
[18:01:14.815]                   }
[18:01:14.815]                   ...future.strategy.old <- future::plan("list")
[18:01:14.815]                   options(future.plan = NULL)
[18:01:14.815]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:14.815]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:14.815]                 }
[18:01:14.815]                 ...future.workdir <- getwd()
[18:01:14.815]             }
[18:01:14.815]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:14.815]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:14.815]         }
[18:01:14.815]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:14.815]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:14.815]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:14.815]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:14.815]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:14.815]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:14.815]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:14.815]             base::names(...future.oldOptions))
[18:01:14.815]     }
[18:01:14.815]     if (FALSE) {
[18:01:14.815]     }
[18:01:14.815]     else {
[18:01:14.815]         if (TRUE) {
[18:01:14.815]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:14.815]                 open = "w")
[18:01:14.815]         }
[18:01:14.815]         else {
[18:01:14.815]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:14.815]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:14.815]         }
[18:01:14.815]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:14.815]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:14.815]             base::sink(type = "output", split = FALSE)
[18:01:14.815]             base::close(...future.stdout)
[18:01:14.815]         }, add = TRUE)
[18:01:14.815]     }
[18:01:14.815]     ...future.frame <- base::sys.nframe()
[18:01:14.815]     ...future.conditions <- base::list()
[18:01:14.815]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:14.815]     if (FALSE) {
[18:01:14.815]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:14.815]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:14.815]     }
[18:01:14.815]     ...future.result <- base::tryCatch({
[18:01:14.815]         base::withCallingHandlers({
[18:01:14.815]             ...future.value <- base::withVisible(base::local({
[18:01:14.815]                 ...future.makeSendCondition <- base::local({
[18:01:14.815]                   sendCondition <- NULL
[18:01:14.815]                   function(frame = 1L) {
[18:01:14.815]                     if (is.function(sendCondition)) 
[18:01:14.815]                       return(sendCondition)
[18:01:14.815]                     ns <- getNamespace("parallel")
[18:01:14.815]                     if (exists("sendData", mode = "function", 
[18:01:14.815]                       envir = ns)) {
[18:01:14.815]                       parallel_sendData <- get("sendData", mode = "function", 
[18:01:14.815]                         envir = ns)
[18:01:14.815]                       envir <- sys.frame(frame)
[18:01:14.815]                       master <- NULL
[18:01:14.815]                       while (!identical(envir, .GlobalEnv) && 
[18:01:14.815]                         !identical(envir, emptyenv())) {
[18:01:14.815]                         if (exists("master", mode = "list", envir = envir, 
[18:01:14.815]                           inherits = FALSE)) {
[18:01:14.815]                           master <- get("master", mode = "list", 
[18:01:14.815]                             envir = envir, inherits = FALSE)
[18:01:14.815]                           if (inherits(master, c("SOCKnode", 
[18:01:14.815]                             "SOCK0node"))) {
[18:01:14.815]                             sendCondition <<- function(cond) {
[18:01:14.815]                               data <- list(type = "VALUE", value = cond, 
[18:01:14.815]                                 success = TRUE)
[18:01:14.815]                               parallel_sendData(master, data)
[18:01:14.815]                             }
[18:01:14.815]                             return(sendCondition)
[18:01:14.815]                           }
[18:01:14.815]                         }
[18:01:14.815]                         frame <- frame + 1L
[18:01:14.815]                         envir <- sys.frame(frame)
[18:01:14.815]                       }
[18:01:14.815]                     }
[18:01:14.815]                     sendCondition <<- function(cond) NULL
[18:01:14.815]                   }
[18:01:14.815]                 })
[18:01:14.815]                 withCallingHandlers({
[18:01:14.815]                   {
[18:01:14.815]                     do.call(function(...) {
[18:01:14.815]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.815]                       if (!identical(...future.globals.maxSize.org, 
[18:01:14.815]                         ...future.globals.maxSize)) {
[18:01:14.815]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.815]                         on.exit(options(oopts), add = TRUE)
[18:01:14.815]                       }
[18:01:14.815]                       {
[18:01:14.815]                         lapply(seq_along(...future.elements_ii), 
[18:01:14.815]                           FUN = function(jj) {
[18:01:14.815]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.815]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.815]                               envir = globalenv(), inherits = FALSE)
[18:01:14.815]                             ...future.FUN(...future.X_jj, ...)
[18:01:14.815]                           })
[18:01:14.815]                       }
[18:01:14.815]                     }, args = future.call.arguments)
[18:01:14.815]                   }
[18:01:14.815]                 }, immediateCondition = function(cond) {
[18:01:14.815]                   sendCondition <- ...future.makeSendCondition()
[18:01:14.815]                   sendCondition(cond)
[18:01:14.815]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.815]                   {
[18:01:14.815]                     inherits <- base::inherits
[18:01:14.815]                     invokeRestart <- base::invokeRestart
[18:01:14.815]                     is.null <- base::is.null
[18:01:14.815]                     muffled <- FALSE
[18:01:14.815]                     if (inherits(cond, "message")) {
[18:01:14.815]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:14.815]                       if (muffled) 
[18:01:14.815]                         invokeRestart("muffleMessage")
[18:01:14.815]                     }
[18:01:14.815]                     else if (inherits(cond, "warning")) {
[18:01:14.815]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:14.815]                       if (muffled) 
[18:01:14.815]                         invokeRestart("muffleWarning")
[18:01:14.815]                     }
[18:01:14.815]                     else if (inherits(cond, "condition")) {
[18:01:14.815]                       if (!is.null(pattern)) {
[18:01:14.815]                         computeRestarts <- base::computeRestarts
[18:01:14.815]                         grepl <- base::grepl
[18:01:14.815]                         restarts <- computeRestarts(cond)
[18:01:14.815]                         for (restart in restarts) {
[18:01:14.815]                           name <- restart$name
[18:01:14.815]                           if (is.null(name)) 
[18:01:14.815]                             next
[18:01:14.815]                           if (!grepl(pattern, name)) 
[18:01:14.815]                             next
[18:01:14.815]                           invokeRestart(restart)
[18:01:14.815]                           muffled <- TRUE
[18:01:14.815]                           break
[18:01:14.815]                         }
[18:01:14.815]                       }
[18:01:14.815]                     }
[18:01:14.815]                     invisible(muffled)
[18:01:14.815]                   }
[18:01:14.815]                   muffleCondition(cond)
[18:01:14.815]                 })
[18:01:14.815]             }))
[18:01:14.815]             future::FutureResult(value = ...future.value$value, 
[18:01:14.815]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:14.815]                   ...future.rng), globalenv = if (FALSE) 
[18:01:14.815]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:14.815]                     ...future.globalenv.names))
[18:01:14.815]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:14.815]         }, condition = base::local({
[18:01:14.815]             c <- base::c
[18:01:14.815]             inherits <- base::inherits
[18:01:14.815]             invokeRestart <- base::invokeRestart
[18:01:14.815]             length <- base::length
[18:01:14.815]             list <- base::list
[18:01:14.815]             seq.int <- base::seq.int
[18:01:14.815]             signalCondition <- base::signalCondition
[18:01:14.815]             sys.calls <- base::sys.calls
[18:01:14.815]             `[[` <- base::`[[`
[18:01:14.815]             `+` <- base::`+`
[18:01:14.815]             `<<-` <- base::`<<-`
[18:01:14.815]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:14.815]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:14.815]                   3L)]
[18:01:14.815]             }
[18:01:14.815]             function(cond) {
[18:01:14.815]                 is_error <- inherits(cond, "error")
[18:01:14.815]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:14.815]                   NULL)
[18:01:14.815]                 if (is_error) {
[18:01:14.815]                   sessionInformation <- function() {
[18:01:14.815]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:14.815]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:14.815]                       search = base::search(), system = base::Sys.info())
[18:01:14.815]                   }
[18:01:14.815]                   ...future.conditions[[length(...future.conditions) + 
[18:01:14.815]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:14.815]                     cond$call), session = sessionInformation(), 
[18:01:14.815]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:14.815]                   signalCondition(cond)
[18:01:14.815]                 }
[18:01:14.815]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:14.815]                 "immediateCondition"))) {
[18:01:14.815]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:14.815]                   ...future.conditions[[length(...future.conditions) + 
[18:01:14.815]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:14.815]                   if (TRUE && !signal) {
[18:01:14.815]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.815]                     {
[18:01:14.815]                       inherits <- base::inherits
[18:01:14.815]                       invokeRestart <- base::invokeRestart
[18:01:14.815]                       is.null <- base::is.null
[18:01:14.815]                       muffled <- FALSE
[18:01:14.815]                       if (inherits(cond, "message")) {
[18:01:14.815]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:14.815]                         if (muffled) 
[18:01:14.815]                           invokeRestart("muffleMessage")
[18:01:14.815]                       }
[18:01:14.815]                       else if (inherits(cond, "warning")) {
[18:01:14.815]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:14.815]                         if (muffled) 
[18:01:14.815]                           invokeRestart("muffleWarning")
[18:01:14.815]                       }
[18:01:14.815]                       else if (inherits(cond, "condition")) {
[18:01:14.815]                         if (!is.null(pattern)) {
[18:01:14.815]                           computeRestarts <- base::computeRestarts
[18:01:14.815]                           grepl <- base::grepl
[18:01:14.815]                           restarts <- computeRestarts(cond)
[18:01:14.815]                           for (restart in restarts) {
[18:01:14.815]                             name <- restart$name
[18:01:14.815]                             if (is.null(name)) 
[18:01:14.815]                               next
[18:01:14.815]                             if (!grepl(pattern, name)) 
[18:01:14.815]                               next
[18:01:14.815]                             invokeRestart(restart)
[18:01:14.815]                             muffled <- TRUE
[18:01:14.815]                             break
[18:01:14.815]                           }
[18:01:14.815]                         }
[18:01:14.815]                       }
[18:01:14.815]                       invisible(muffled)
[18:01:14.815]                     }
[18:01:14.815]                     muffleCondition(cond, pattern = "^muffle")
[18:01:14.815]                   }
[18:01:14.815]                 }
[18:01:14.815]                 else {
[18:01:14.815]                   if (TRUE) {
[18:01:14.815]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.815]                     {
[18:01:14.815]                       inherits <- base::inherits
[18:01:14.815]                       invokeRestart <- base::invokeRestart
[18:01:14.815]                       is.null <- base::is.null
[18:01:14.815]                       muffled <- FALSE
[18:01:14.815]                       if (inherits(cond, "message")) {
[18:01:14.815]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:14.815]                         if (muffled) 
[18:01:14.815]                           invokeRestart("muffleMessage")
[18:01:14.815]                       }
[18:01:14.815]                       else if (inherits(cond, "warning")) {
[18:01:14.815]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:14.815]                         if (muffled) 
[18:01:14.815]                           invokeRestart("muffleWarning")
[18:01:14.815]                       }
[18:01:14.815]                       else if (inherits(cond, "condition")) {
[18:01:14.815]                         if (!is.null(pattern)) {
[18:01:14.815]                           computeRestarts <- base::computeRestarts
[18:01:14.815]                           grepl <- base::grepl
[18:01:14.815]                           restarts <- computeRestarts(cond)
[18:01:14.815]                           for (restart in restarts) {
[18:01:14.815]                             name <- restart$name
[18:01:14.815]                             if (is.null(name)) 
[18:01:14.815]                               next
[18:01:14.815]                             if (!grepl(pattern, name)) 
[18:01:14.815]                               next
[18:01:14.815]                             invokeRestart(restart)
[18:01:14.815]                             muffled <- TRUE
[18:01:14.815]                             break
[18:01:14.815]                           }
[18:01:14.815]                         }
[18:01:14.815]                       }
[18:01:14.815]                       invisible(muffled)
[18:01:14.815]                     }
[18:01:14.815]                     muffleCondition(cond, pattern = "^muffle")
[18:01:14.815]                   }
[18:01:14.815]                 }
[18:01:14.815]             }
[18:01:14.815]         }))
[18:01:14.815]     }, error = function(ex) {
[18:01:14.815]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:14.815]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:14.815]                 ...future.rng), started = ...future.startTime, 
[18:01:14.815]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:14.815]             version = "1.8"), class = "FutureResult")
[18:01:14.815]     }, finally = {
[18:01:14.815]         if (!identical(...future.workdir, getwd())) 
[18:01:14.815]             setwd(...future.workdir)
[18:01:14.815]         {
[18:01:14.815]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:14.815]                 ...future.oldOptions$nwarnings <- NULL
[18:01:14.815]             }
[18:01:14.815]             base::options(...future.oldOptions)
[18:01:14.815]             if (.Platform$OS.type == "windows") {
[18:01:14.815]                 old_names <- names(...future.oldEnvVars)
[18:01:14.815]                 envs <- base::Sys.getenv()
[18:01:14.815]                 names <- names(envs)
[18:01:14.815]                 common <- intersect(names, old_names)
[18:01:14.815]                 added <- setdiff(names, old_names)
[18:01:14.815]                 removed <- setdiff(old_names, names)
[18:01:14.815]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:14.815]                   envs[common]]
[18:01:14.815]                 NAMES <- toupper(changed)
[18:01:14.815]                 args <- list()
[18:01:14.815]                 for (kk in seq_along(NAMES)) {
[18:01:14.815]                   name <- changed[[kk]]
[18:01:14.815]                   NAME <- NAMES[[kk]]
[18:01:14.815]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.815]                     next
[18:01:14.815]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:14.815]                 }
[18:01:14.815]                 NAMES <- toupper(added)
[18:01:14.815]                 for (kk in seq_along(NAMES)) {
[18:01:14.815]                   name <- added[[kk]]
[18:01:14.815]                   NAME <- NAMES[[kk]]
[18:01:14.815]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.815]                     next
[18:01:14.815]                   args[[name]] <- ""
[18:01:14.815]                 }
[18:01:14.815]                 NAMES <- toupper(removed)
[18:01:14.815]                 for (kk in seq_along(NAMES)) {
[18:01:14.815]                   name <- removed[[kk]]
[18:01:14.815]                   NAME <- NAMES[[kk]]
[18:01:14.815]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.815]                     next
[18:01:14.815]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:14.815]                 }
[18:01:14.815]                 if (length(args) > 0) 
[18:01:14.815]                   base::do.call(base::Sys.setenv, args = args)
[18:01:14.815]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:14.815]             }
[18:01:14.815]             else {
[18:01:14.815]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:14.815]             }
[18:01:14.815]             {
[18:01:14.815]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:14.815]                   0L) {
[18:01:14.815]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:14.815]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:14.815]                   base::options(opts)
[18:01:14.815]                 }
[18:01:14.815]                 {
[18:01:14.815]                   {
[18:01:14.815]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:14.815]                     NULL
[18:01:14.815]                   }
[18:01:14.815]                   options(future.plan = NULL)
[18:01:14.815]                   if (is.na(NA_character_)) 
[18:01:14.815]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:14.815]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:14.815]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:14.815]                     .init = FALSE)
[18:01:14.815]                 }
[18:01:14.815]             }
[18:01:14.815]         }
[18:01:14.815]     })
[18:01:14.815]     if (TRUE) {
[18:01:14.815]         base::sink(type = "output", split = FALSE)
[18:01:14.815]         if (TRUE) {
[18:01:14.815]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:14.815]         }
[18:01:14.815]         else {
[18:01:14.815]             ...future.result["stdout"] <- base::list(NULL)
[18:01:14.815]         }
[18:01:14.815]         base::close(...future.stdout)
[18:01:14.815]         ...future.stdout <- NULL
[18:01:14.815]     }
[18:01:14.815]     ...future.result$conditions <- ...future.conditions
[18:01:14.815]     ...future.result$finished <- base::Sys.time()
[18:01:14.815]     ...future.result
[18:01:14.815] }
[18:01:14.820] Exporting 7 global objects (2.15 KiB) to cluster node #1 ...
[18:01:14.820] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ...
[18:01:14.821] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ... DONE
[18:01:14.822] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ...
[18:01:14.822] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ... DONE
[18:01:14.823] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[18:01:14.824] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[18:01:14.824] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[18:01:14.825] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[18:01:14.826] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[18:01:14.826] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[18:01:14.827] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[18:01:14.828] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[18:01:14.828] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[18:01:14.829] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[18:01:14.829] Exporting 7 global objects (2.15 KiB) to cluster node #1 ... DONE
[18:01:14.830] MultisessionFuture started
[18:01:14.831] - Launch lazy future ... done
[18:01:14.832] run() for ‘MultisessionFuture’ ... done
[18:01:14.832] Created future:
[18:01:14.832] MultisessionFuture:
[18:01:14.832] Label: ‘future_replicate-1’
[18:01:14.832] Expression:
[18:01:14.832] {
[18:01:14.832]     do.call(function(...) {
[18:01:14.832]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.832]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:14.832]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.832]             on.exit(options(oopts), add = TRUE)
[18:01:14.832]         }
[18:01:14.832]         {
[18:01:14.832]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:14.832]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.832]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.832]                   envir = globalenv(), inherits = FALSE)
[18:01:14.832]                 ...future.FUN(...future.X_jj, ...)
[18:01:14.832]             })
[18:01:14.832]         }
[18:01:14.832]     }, args = future.call.arguments)
[18:01:14.832] }
[18:01:14.832] Lazy evaluation: FALSE
[18:01:14.832] Asynchronous evaluation: TRUE
[18:01:14.832] Local evaluation: TRUE
[18:01:14.832] Environment: 0x635eb597df58
[18:01:14.832] Capture standard output: TRUE
[18:01:14.832] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:14.832] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[18:01:14.832] Packages: <none>
[18:01:14.832] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:14.832] Resolved: FALSE
[18:01:14.832] Value: <not collected>
[18:01:14.832] Conditions captured: <none>
[18:01:14.832] Early signaling: FALSE
[18:01:14.832] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:14.832] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:14.846] Chunk #1 of 2 ... DONE
[18:01:14.846] Chunk #2 of 2 ...
[18:01:14.846]  - Finding globals in 'X' for chunk #2 ...
[18:01:14.847] getGlobalsAndPackages() ...
[18:01:14.847] Searching for globals...
[18:01:14.847] 
[18:01:14.848] Searching for globals ... DONE
[18:01:14.848] - globals: [0] <none>
[18:01:14.848] getGlobalsAndPackages() ... DONE
[18:01:14.848]    + additional globals found: [n=0] 
[18:01:14.848]    + additional namespaces needed: [n=0] 
[18:01:14.849]  - Finding globals in 'X' for chunk #2 ... DONE
[18:01:14.849]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[18:01:14.849]  - seeds: [3] <seeds>
[18:01:14.849]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.850] getGlobalsAndPackages() ...
[18:01:14.850] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.850] Resolving globals: FALSE
[18:01:14.850] Tweak future expression to call with '...' arguments ...
[18:01:14.851] {
[18:01:14.851]     do.call(function(...) {
[18:01:14.851]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.851]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:14.851]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.851]             on.exit(options(oopts), add = TRUE)
[18:01:14.851]         }
[18:01:14.851]         {
[18:01:14.851]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:14.851]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.851]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.851]                   envir = globalenv(), inherits = FALSE)
[18:01:14.851]                 ...future.FUN(...future.X_jj, ...)
[18:01:14.851]             })
[18:01:14.851]         }
[18:01:14.851]     }, args = future.call.arguments)
[18:01:14.851] }
[18:01:14.851] Tweak future expression to call with '...' arguments ... DONE
[18:01:14.852] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[18:01:14.852] 
[18:01:14.852] getGlobalsAndPackages() ... DONE
[18:01:14.853] run() for ‘Future’ ...
[18:01:14.853] - state: ‘created’
[18:01:14.854] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:01:14.882] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:14.883] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:01:14.883]   - Field: ‘node’
[18:01:14.883]   - Field: ‘label’
[18:01:14.883]   - Field: ‘local’
[18:01:14.884]   - Field: ‘owner’
[18:01:14.884]   - Field: ‘envir’
[18:01:14.884]   - Field: ‘workers’
[18:01:14.884]   - Field: ‘packages’
[18:01:14.884]   - Field: ‘gc’
[18:01:14.885]   - Field: ‘conditions’
[18:01:14.885]   - Field: ‘persistent’
[18:01:14.885]   - Field: ‘expr’
[18:01:14.885]   - Field: ‘uuid’
[18:01:14.886]   - Field: ‘seed’
[18:01:14.886]   - Field: ‘version’
[18:01:14.886]   - Field: ‘result’
[18:01:14.886]   - Field: ‘asynchronous’
[18:01:14.886]   - Field: ‘calls’
[18:01:14.887]   - Field: ‘globals’
[18:01:14.887]   - Field: ‘stdout’
[18:01:14.887]   - Field: ‘earlySignal’
[18:01:14.887]   - Field: ‘lazy’
[18:01:14.887]   - Field: ‘state’
[18:01:14.888] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:01:14.888] - Launch lazy future ...
[18:01:14.888] Packages needed by the future expression (n = 0): <none>
[18:01:14.889] Packages needed by future strategies (n = 0): <none>
[18:01:14.890] {
[18:01:14.890]     {
[18:01:14.890]         {
[18:01:14.890]             ...future.startTime <- base::Sys.time()
[18:01:14.890]             {
[18:01:14.890]                 {
[18:01:14.890]                   {
[18:01:14.890]                     {
[18:01:14.890]                       base::local({
[18:01:14.890]                         has_future <- base::requireNamespace("future", 
[18:01:14.890]                           quietly = TRUE)
[18:01:14.890]                         if (has_future) {
[18:01:14.890]                           ns <- base::getNamespace("future")
[18:01:14.890]                           version <- ns[[".package"]][["version"]]
[18:01:14.890]                           if (is.null(version)) 
[18:01:14.890]                             version <- utils::packageVersion("future")
[18:01:14.890]                         }
[18:01:14.890]                         else {
[18:01:14.890]                           version <- NULL
[18:01:14.890]                         }
[18:01:14.890]                         if (!has_future || version < "1.8.0") {
[18:01:14.890]                           info <- base::c(r_version = base::gsub("R version ", 
[18:01:14.890]                             "", base::R.version$version.string), 
[18:01:14.890]                             platform = base::sprintf("%s (%s-bit)", 
[18:01:14.890]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:01:14.890]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:01:14.890]                               "release", "version")], collapse = " "), 
[18:01:14.890]                             hostname = base::Sys.info()[["nodename"]])
[18:01:14.890]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:01:14.890]                             info)
[18:01:14.890]                           info <- base::paste(info, collapse = "; ")
[18:01:14.890]                           if (!has_future) {
[18:01:14.890]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:01:14.890]                               info)
[18:01:14.890]                           }
[18:01:14.890]                           else {
[18:01:14.890]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:01:14.890]                               info, version)
[18:01:14.890]                           }
[18:01:14.890]                           base::stop(msg)
[18:01:14.890]                         }
[18:01:14.890]                       })
[18:01:14.890]                     }
[18:01:14.890]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:01:14.890]                     base::options(mc.cores = 1L)
[18:01:14.890]                   }
[18:01:14.890]                   ...future.strategy.old <- future::plan("list")
[18:01:14.890]                   options(future.plan = NULL)
[18:01:14.890]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:01:14.890]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:01:14.890]                 }
[18:01:14.890]                 ...future.workdir <- getwd()
[18:01:14.890]             }
[18:01:14.890]             ...future.oldOptions <- base::as.list(base::.Options)
[18:01:14.890]             ...future.oldEnvVars <- base::Sys.getenv()
[18:01:14.890]         }
[18:01:14.890]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:01:14.890]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[18:01:14.890]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:01:14.890]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:01:14.890]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:01:14.890]             future.stdout.windows.reencode = NULL, width = 80L)
[18:01:14.890]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:01:14.890]             base::names(...future.oldOptions))
[18:01:14.890]     }
[18:01:14.890]     if (FALSE) {
[18:01:14.890]     }
[18:01:14.890]     else {
[18:01:14.890]         if (TRUE) {
[18:01:14.890]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:01:14.890]                 open = "w")
[18:01:14.890]         }
[18:01:14.890]         else {
[18:01:14.890]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:01:14.890]                 windows = "NUL", "/dev/null"), open = "w")
[18:01:14.890]         }
[18:01:14.890]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:01:14.890]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:01:14.890]             base::sink(type = "output", split = FALSE)
[18:01:14.890]             base::close(...future.stdout)
[18:01:14.890]         }, add = TRUE)
[18:01:14.890]     }
[18:01:14.890]     ...future.frame <- base::sys.nframe()
[18:01:14.890]     ...future.conditions <- base::list()
[18:01:14.890]     ...future.rng <- base::globalenv()$.Random.seed
[18:01:14.890]     if (FALSE) {
[18:01:14.890]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:01:14.890]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:01:14.890]     }
[18:01:14.890]     ...future.result <- base::tryCatch({
[18:01:14.890]         base::withCallingHandlers({
[18:01:14.890]             ...future.value <- base::withVisible(base::local({
[18:01:14.890]                 ...future.makeSendCondition <- base::local({
[18:01:14.890]                   sendCondition <- NULL
[18:01:14.890]                   function(frame = 1L) {
[18:01:14.890]                     if (is.function(sendCondition)) 
[18:01:14.890]                       return(sendCondition)
[18:01:14.890]                     ns <- getNamespace("parallel")
[18:01:14.890]                     if (exists("sendData", mode = "function", 
[18:01:14.890]                       envir = ns)) {
[18:01:14.890]                       parallel_sendData <- get("sendData", mode = "function", 
[18:01:14.890]                         envir = ns)
[18:01:14.890]                       envir <- sys.frame(frame)
[18:01:14.890]                       master <- NULL
[18:01:14.890]                       while (!identical(envir, .GlobalEnv) && 
[18:01:14.890]                         !identical(envir, emptyenv())) {
[18:01:14.890]                         if (exists("master", mode = "list", envir = envir, 
[18:01:14.890]                           inherits = FALSE)) {
[18:01:14.890]                           master <- get("master", mode = "list", 
[18:01:14.890]                             envir = envir, inherits = FALSE)
[18:01:14.890]                           if (inherits(master, c("SOCKnode", 
[18:01:14.890]                             "SOCK0node"))) {
[18:01:14.890]                             sendCondition <<- function(cond) {
[18:01:14.890]                               data <- list(type = "VALUE", value = cond, 
[18:01:14.890]                                 success = TRUE)
[18:01:14.890]                               parallel_sendData(master, data)
[18:01:14.890]                             }
[18:01:14.890]                             return(sendCondition)
[18:01:14.890]                           }
[18:01:14.890]                         }
[18:01:14.890]                         frame <- frame + 1L
[18:01:14.890]                         envir <- sys.frame(frame)
[18:01:14.890]                       }
[18:01:14.890]                     }
[18:01:14.890]                     sendCondition <<- function(cond) NULL
[18:01:14.890]                   }
[18:01:14.890]                 })
[18:01:14.890]                 withCallingHandlers({
[18:01:14.890]                   {
[18:01:14.890]                     do.call(function(...) {
[18:01:14.890]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.890]                       if (!identical(...future.globals.maxSize.org, 
[18:01:14.890]                         ...future.globals.maxSize)) {
[18:01:14.890]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.890]                         on.exit(options(oopts), add = TRUE)
[18:01:14.890]                       }
[18:01:14.890]                       {
[18:01:14.890]                         lapply(seq_along(...future.elements_ii), 
[18:01:14.890]                           FUN = function(jj) {
[18:01:14.890]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.890]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.890]                               envir = globalenv(), inherits = FALSE)
[18:01:14.890]                             ...future.FUN(...future.X_jj, ...)
[18:01:14.890]                           })
[18:01:14.890]                       }
[18:01:14.890]                     }, args = future.call.arguments)
[18:01:14.890]                   }
[18:01:14.890]                 }, immediateCondition = function(cond) {
[18:01:14.890]                   sendCondition <- ...future.makeSendCondition()
[18:01:14.890]                   sendCondition(cond)
[18:01:14.890]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.890]                   {
[18:01:14.890]                     inherits <- base::inherits
[18:01:14.890]                     invokeRestart <- base::invokeRestart
[18:01:14.890]                     is.null <- base::is.null
[18:01:14.890]                     muffled <- FALSE
[18:01:14.890]                     if (inherits(cond, "message")) {
[18:01:14.890]                       muffled <- grepl(pattern, "muffleMessage")
[18:01:14.890]                       if (muffled) 
[18:01:14.890]                         invokeRestart("muffleMessage")
[18:01:14.890]                     }
[18:01:14.890]                     else if (inherits(cond, "warning")) {
[18:01:14.890]                       muffled <- grepl(pattern, "muffleWarning")
[18:01:14.890]                       if (muffled) 
[18:01:14.890]                         invokeRestart("muffleWarning")
[18:01:14.890]                     }
[18:01:14.890]                     else if (inherits(cond, "condition")) {
[18:01:14.890]                       if (!is.null(pattern)) {
[18:01:14.890]                         computeRestarts <- base::computeRestarts
[18:01:14.890]                         grepl <- base::grepl
[18:01:14.890]                         restarts <- computeRestarts(cond)
[18:01:14.890]                         for (restart in restarts) {
[18:01:14.890]                           name <- restart$name
[18:01:14.890]                           if (is.null(name)) 
[18:01:14.890]                             next
[18:01:14.890]                           if (!grepl(pattern, name)) 
[18:01:14.890]                             next
[18:01:14.890]                           invokeRestart(restart)
[18:01:14.890]                           muffled <- TRUE
[18:01:14.890]                           break
[18:01:14.890]                         }
[18:01:14.890]                       }
[18:01:14.890]                     }
[18:01:14.890]                     invisible(muffled)
[18:01:14.890]                   }
[18:01:14.890]                   muffleCondition(cond)
[18:01:14.890]                 })
[18:01:14.890]             }))
[18:01:14.890]             future::FutureResult(value = ...future.value$value, 
[18:01:14.890]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:14.890]                   ...future.rng), globalenv = if (FALSE) 
[18:01:14.890]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:01:14.890]                     ...future.globalenv.names))
[18:01:14.890]                 else NULL, started = ...future.startTime, version = "1.8")
[18:01:14.890]         }, condition = base::local({
[18:01:14.890]             c <- base::c
[18:01:14.890]             inherits <- base::inherits
[18:01:14.890]             invokeRestart <- base::invokeRestart
[18:01:14.890]             length <- base::length
[18:01:14.890]             list <- base::list
[18:01:14.890]             seq.int <- base::seq.int
[18:01:14.890]             signalCondition <- base::signalCondition
[18:01:14.890]             sys.calls <- base::sys.calls
[18:01:14.890]             `[[` <- base::`[[`
[18:01:14.890]             `+` <- base::`+`
[18:01:14.890]             `<<-` <- base::`<<-`
[18:01:14.890]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:01:14.890]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:01:14.890]                   3L)]
[18:01:14.890]             }
[18:01:14.890]             function(cond) {
[18:01:14.890]                 is_error <- inherits(cond, "error")
[18:01:14.890]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:01:14.890]                   NULL)
[18:01:14.890]                 if (is_error) {
[18:01:14.890]                   sessionInformation <- function() {
[18:01:14.890]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:01:14.890]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:01:14.890]                       search = base::search(), system = base::Sys.info())
[18:01:14.890]                   }
[18:01:14.890]                   ...future.conditions[[length(...future.conditions) + 
[18:01:14.890]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:01:14.890]                     cond$call), session = sessionInformation(), 
[18:01:14.890]                     timestamp = base::Sys.time(), signaled = 0L)
[18:01:14.890]                   signalCondition(cond)
[18:01:14.890]                 }
[18:01:14.890]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:01:14.890]                 "immediateCondition"))) {
[18:01:14.890]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:01:14.890]                   ...future.conditions[[length(...future.conditions) + 
[18:01:14.890]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:01:14.890]                   if (TRUE && !signal) {
[18:01:14.890]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.890]                     {
[18:01:14.890]                       inherits <- base::inherits
[18:01:14.890]                       invokeRestart <- base::invokeRestart
[18:01:14.890]                       is.null <- base::is.null
[18:01:14.890]                       muffled <- FALSE
[18:01:14.890]                       if (inherits(cond, "message")) {
[18:01:14.890]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:14.890]                         if (muffled) 
[18:01:14.890]                           invokeRestart("muffleMessage")
[18:01:14.890]                       }
[18:01:14.890]                       else if (inherits(cond, "warning")) {
[18:01:14.890]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:14.890]                         if (muffled) 
[18:01:14.890]                           invokeRestart("muffleWarning")
[18:01:14.890]                       }
[18:01:14.890]                       else if (inherits(cond, "condition")) {
[18:01:14.890]                         if (!is.null(pattern)) {
[18:01:14.890]                           computeRestarts <- base::computeRestarts
[18:01:14.890]                           grepl <- base::grepl
[18:01:14.890]                           restarts <- computeRestarts(cond)
[18:01:14.890]                           for (restart in restarts) {
[18:01:14.890]                             name <- restart$name
[18:01:14.890]                             if (is.null(name)) 
[18:01:14.890]                               next
[18:01:14.890]                             if (!grepl(pattern, name)) 
[18:01:14.890]                               next
[18:01:14.890]                             invokeRestart(restart)
[18:01:14.890]                             muffled <- TRUE
[18:01:14.890]                             break
[18:01:14.890]                           }
[18:01:14.890]                         }
[18:01:14.890]                       }
[18:01:14.890]                       invisible(muffled)
[18:01:14.890]                     }
[18:01:14.890]                     muffleCondition(cond, pattern = "^muffle")
[18:01:14.890]                   }
[18:01:14.890]                 }
[18:01:14.890]                 else {
[18:01:14.890]                   if (TRUE) {
[18:01:14.890]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:01:14.890]                     {
[18:01:14.890]                       inherits <- base::inherits
[18:01:14.890]                       invokeRestart <- base::invokeRestart
[18:01:14.890]                       is.null <- base::is.null
[18:01:14.890]                       muffled <- FALSE
[18:01:14.890]                       if (inherits(cond, "message")) {
[18:01:14.890]                         muffled <- grepl(pattern, "muffleMessage")
[18:01:14.890]                         if (muffled) 
[18:01:14.890]                           invokeRestart("muffleMessage")
[18:01:14.890]                       }
[18:01:14.890]                       else if (inherits(cond, "warning")) {
[18:01:14.890]                         muffled <- grepl(pattern, "muffleWarning")
[18:01:14.890]                         if (muffled) 
[18:01:14.890]                           invokeRestart("muffleWarning")
[18:01:14.890]                       }
[18:01:14.890]                       else if (inherits(cond, "condition")) {
[18:01:14.890]                         if (!is.null(pattern)) {
[18:01:14.890]                           computeRestarts <- base::computeRestarts
[18:01:14.890]                           grepl <- base::grepl
[18:01:14.890]                           restarts <- computeRestarts(cond)
[18:01:14.890]                           for (restart in restarts) {
[18:01:14.890]                             name <- restart$name
[18:01:14.890]                             if (is.null(name)) 
[18:01:14.890]                               next
[18:01:14.890]                             if (!grepl(pattern, name)) 
[18:01:14.890]                               next
[18:01:14.890]                             invokeRestart(restart)
[18:01:14.890]                             muffled <- TRUE
[18:01:14.890]                             break
[18:01:14.890]                           }
[18:01:14.890]                         }
[18:01:14.890]                       }
[18:01:14.890]                       invisible(muffled)
[18:01:14.890]                     }
[18:01:14.890]                     muffleCondition(cond, pattern = "^muffle")
[18:01:14.890]                   }
[18:01:14.890]                 }
[18:01:14.890]             }
[18:01:14.890]         }))
[18:01:14.890]     }, error = function(ex) {
[18:01:14.890]         base::structure(base::list(value = NULL, visible = NULL, 
[18:01:14.890]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:01:14.890]                 ...future.rng), started = ...future.startTime, 
[18:01:14.890]             finished = Sys.time(), session_uuid = NA_character_, 
[18:01:14.890]             version = "1.8"), class = "FutureResult")
[18:01:14.890]     }, finally = {
[18:01:14.890]         if (!identical(...future.workdir, getwd())) 
[18:01:14.890]             setwd(...future.workdir)
[18:01:14.890]         {
[18:01:14.890]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:01:14.890]                 ...future.oldOptions$nwarnings <- NULL
[18:01:14.890]             }
[18:01:14.890]             base::options(...future.oldOptions)
[18:01:14.890]             if (.Platform$OS.type == "windows") {
[18:01:14.890]                 old_names <- names(...future.oldEnvVars)
[18:01:14.890]                 envs <- base::Sys.getenv()
[18:01:14.890]                 names <- names(envs)
[18:01:14.890]                 common <- intersect(names, old_names)
[18:01:14.890]                 added <- setdiff(names, old_names)
[18:01:14.890]                 removed <- setdiff(old_names, names)
[18:01:14.890]                 changed <- common[...future.oldEnvVars[common] != 
[18:01:14.890]                   envs[common]]
[18:01:14.890]                 NAMES <- toupper(changed)
[18:01:14.890]                 args <- list()
[18:01:14.890]                 for (kk in seq_along(NAMES)) {
[18:01:14.890]                   name <- changed[[kk]]
[18:01:14.890]                   NAME <- NAMES[[kk]]
[18:01:14.890]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.890]                     next
[18:01:14.890]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:14.890]                 }
[18:01:14.890]                 NAMES <- toupper(added)
[18:01:14.890]                 for (kk in seq_along(NAMES)) {
[18:01:14.890]                   name <- added[[kk]]
[18:01:14.890]                   NAME <- NAMES[[kk]]
[18:01:14.890]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.890]                     next
[18:01:14.890]                   args[[name]] <- ""
[18:01:14.890]                 }
[18:01:14.890]                 NAMES <- toupper(removed)
[18:01:14.890]                 for (kk in seq_along(NAMES)) {
[18:01:14.890]                   name <- removed[[kk]]
[18:01:14.890]                   NAME <- NAMES[[kk]]
[18:01:14.890]                   if (name != NAME && is.element(NAME, old_names)) 
[18:01:14.890]                     next
[18:01:14.890]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:01:14.890]                 }
[18:01:14.890]                 if (length(args) > 0) 
[18:01:14.890]                   base::do.call(base::Sys.setenv, args = args)
[18:01:14.890]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:01:14.890]             }
[18:01:14.890]             else {
[18:01:14.890]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:01:14.890]             }
[18:01:14.890]             {
[18:01:14.890]                 if (base::length(...future.futureOptionsAdded) > 
[18:01:14.890]                   0L) {
[18:01:14.890]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:01:14.890]                   base::names(opts) <- ...future.futureOptionsAdded
[18:01:14.890]                   base::options(opts)
[18:01:14.890]                 }
[18:01:14.890]                 {
[18:01:14.890]                   {
[18:01:14.890]                     base::options(mc.cores = ...future.mc.cores.old)
[18:01:14.890]                     NULL
[18:01:14.890]                   }
[18:01:14.890]                   options(future.plan = NULL)
[18:01:14.890]                   if (is.na(NA_character_)) 
[18:01:14.890]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:01:14.890]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:01:14.890]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:01:14.890]                     .init = FALSE)
[18:01:14.890]                 }
[18:01:14.890]             }
[18:01:14.890]         }
[18:01:14.890]     })
[18:01:14.890]     if (TRUE) {
[18:01:14.890]         base::sink(type = "output", split = FALSE)
[18:01:14.890]         if (TRUE) {
[18:01:14.890]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:01:14.890]         }
[18:01:14.890]         else {
[18:01:14.890]             ...future.result["stdout"] <- base::list(NULL)
[18:01:14.890]         }
[18:01:14.890]         base::close(...future.stdout)
[18:01:14.890]         ...future.stdout <- NULL
[18:01:14.890]     }
[18:01:14.890]     ...future.result$conditions <- ...future.conditions
[18:01:14.890]     ...future.result$finished <- base::Sys.time()
[18:01:14.890]     ...future.result
[18:01:14.890] }
[18:01:14.895] Exporting 7 global objects (2.15 KiB) to cluster node #2 ...
[18:01:14.895] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ...
[18:01:14.896] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ... DONE
[18:01:14.896] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ...
[18:01:14.897] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ... DONE
[18:01:14.897] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[18:01:14.898] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[18:01:14.898] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[18:01:14.899] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[18:01:14.899] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[18:01:14.900] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[18:01:14.900] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[18:01:14.901] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[18:01:14.901] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[18:01:14.902] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[18:01:14.902] Exporting 7 global objects (2.15 KiB) to cluster node #2 ... DONE
[18:01:14.903] MultisessionFuture started
[18:01:14.903] - Launch lazy future ... done
[18:01:14.903] run() for ‘MultisessionFuture’ ... done
[18:01:14.904] Created future:
[18:01:14.904] MultisessionFuture:
[18:01:14.904] Label: ‘future_replicate-2’
[18:01:14.904] Expression:
[18:01:14.904] {
[18:01:14.904]     do.call(function(...) {
[18:01:14.904]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[18:01:14.904]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[18:01:14.904]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[18:01:14.904]             on.exit(options(oopts), add = TRUE)
[18:01:14.904]         }
[18:01:14.904]         {
[18:01:14.904]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[18:01:14.904]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[18:01:14.904]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[18:01:14.904]                   envir = globalenv(), inherits = FALSE)
[18:01:14.904]                 ...future.FUN(...future.X_jj, ...)
[18:01:14.904]             })
[18:01:14.904]         }
[18:01:14.904]     }, args = future.call.arguments)
[18:01:14.904] }
[18:01:14.904] Lazy evaluation: FALSE
[18:01:14.904] Asynchronous evaluation: TRUE
[18:01:14.904] Local evaluation: TRUE
[18:01:14.904] Environment: 0x635eb597df58
[18:01:14.904] Capture standard output: TRUE
[18:01:14.904] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:01:14.904] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[18:01:14.904] Packages: <none>
[18:01:14.904] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[18:01:14.904] Resolved: FALSE
[18:01:14.904] Value: <not collected>
[18:01:14.904] Conditions captured: <none>
[18:01:14.904] Early signaling: FALSE
[18:01:14.904] Owner process: 1d391d0f-58c9-31fb-1bbb-fdaa8983b65e
[18:01:14.904] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:01:14.917] Chunk #2 of 2 ... DONE
[18:01:14.917] Launching 2 futures (chunks) ... DONE
[18:01:14.918] Resolving 2 futures (chunks) ...
[18:01:14.918] resolve() on list ...
[18:01:14.918]  recursive: 0
[18:01:14.918]  length: 2
[18:01:14.918] 
[18:01:14.919] receiveMessageFromWorker() for ClusterFuture ...
[18:01:14.919] - Validating connection of MultisessionFuture
[18:01:14.920] - received message: FutureResult
[18:01:14.920] - Received FutureResult
[18:01:14.920] - Erased future from FutureRegistry
[18:01:14.920] result() for ClusterFuture ...
[18:01:14.921] - result already collected: FutureResult
[18:01:14.921] result() for ClusterFuture ... done
[18:01:14.921] receiveMessageFromWorker() for ClusterFuture ... done
[18:01:14.921] Future #1
[18:01:14.921] result() for ClusterFuture ...
[18:01:14.922] - result already collected: FutureResult
[18:01:14.922] result() for ClusterFuture ... done
[18:01:14.922] result() for ClusterFuture ...
[18:01:14.922] - result already collected: FutureResult
[18:01:14.922] result() for ClusterFuture ... done
[18:01:14.923] signalConditionsASAP(MultisessionFuture, pos=1) ...
[18:01:14.923] - nx: 2
[18:01:14.923] - relay: TRUE
[18:01:14.923] - stdout: TRUE
[18:01:14.923] - signal: TRUE
[18:01:14.923] - resignal: FALSE
[18:01:14.924] - force: TRUE
[18:01:14.924] - relayed: [n=2] FALSE, FALSE
[18:01:14.924] - queued futures: [n=2] FALSE, FALSE
[18:01:14.924]  - until=1
[18:01:14.924]  - relaying element #1
[18:01:14.925] result() for ClusterFuture ...
[18:01:14.925] - result already collected: FutureResult
[18:01:14.925] result() for ClusterFuture ... done
[18:01:14.925] result() for ClusterFuture ...
[18:01:14.925] - result already collected: FutureResult
[18:01:14.925] result() for ClusterFuture ... done
[18:01:14.926] result() for ClusterFuture ...
[18:01:14.926] - result already collected: FutureResult
[18:01:14.926] result() for ClusterFuture ... done
[18:01:14.926] result() for ClusterFuture ...
[18:01:14.926] - result already collected: FutureResult
[18:01:14.927] result() for ClusterFuture ... done
[18:01:14.927] - relayed: [n=2] TRUE, FALSE
[18:01:14.927] - queued futures: [n=2] TRUE, FALSE
[18:01:14.927] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[18:01:14.927]  length: 1 (resolved future 1)
[18:01:14.949] receiveMessageFromWorker() for ClusterFuture ...
[18:01:14.950] - Validating connection of MultisessionFuture
[18:01:14.950] - received message: FutureResult
[18:01:14.950] - Received FutureResult
[18:01:14.951] - Erased future from FutureRegistry
[18:01:14.951] result() for ClusterFuture ...
[18:01:14.951] - result already collected: FutureResult
[18:01:14.951] result() for ClusterFuture ... done
[18:01:14.951] receiveMessageFromWorker() for ClusterFuture ... done
[18:01:14.951] Future #2
[18:01:14.952] result() for ClusterFuture ...
[18:01:14.952] - result already collected: FutureResult
[18:01:14.952] result() for ClusterFuture ... done
[18:01:14.952] result() for ClusterFuture ...
[18:01:14.952] - result already collected: FutureResult
[18:01:14.953] result() for ClusterFuture ... done
[18:01:14.953] signalConditionsASAP(MultisessionFuture, pos=2) ...
[18:01:14.953] - nx: 2
[18:01:14.953] - relay: TRUE
[18:01:14.953] - stdout: TRUE
[18:01:14.954] - signal: TRUE
[18:01:14.954] - resignal: FALSE
[18:01:14.954] - force: TRUE
[18:01:14.954] - relayed: [n=2] TRUE, FALSE
[18:01:14.954] - queued futures: [n=2] TRUE, FALSE
[18:01:14.954]  - until=2
[18:01:14.955]  - relaying element #2
[18:01:14.955] result() for ClusterFuture ...
[18:01:14.955] - result already collected: FutureResult
[18:01:14.955] result() for ClusterFuture ... done
[18:01:14.955] result() for ClusterFuture ...
[18:01:14.956] - result already collected: FutureResult
[18:01:14.956] result() for ClusterFuture ... done
[18:01:14.956] result() for ClusterFuture ...
[18:01:14.956] - result already collected: FutureResult
[18:01:14.956] result() for ClusterFuture ... done
[18:01:14.957] result() for ClusterFuture ...
[18:01:14.957] - result already collected: FutureResult
[18:01:14.957] result() for ClusterFuture ... done
[18:01:14.957] - relayed: [n=2] TRUE, TRUE
[18:01:14.957] - queued futures: [n=2] TRUE, TRUE
[18:01:14.957] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[18:01:14.958]  length: 0 (resolved future 2)
[18:01:14.958] Relaying remaining futures
[18:01:14.958] signalConditionsASAP(NULL, pos=0) ...
[18:01:14.958] - nx: 2
[18:01:14.958] - relay: TRUE
[18:01:14.959] - stdout: TRUE
[18:01:14.959] - signal: TRUE
[18:01:14.959] - resignal: FALSE
[18:01:14.959] - force: TRUE
[18:01:14.959] - relayed: [n=2] TRUE, TRUE
[18:01:14.959] - queued futures: [n=2] TRUE, TRUE
 - flush all
[18:01:14.960] - relayed: [n=2] TRUE, TRUE
[18:01:14.960] - queued futures: [n=2] TRUE, TRUE
[18:01:14.960] signalConditionsASAP(NULL, pos=0) ... done
[18:01:14.960] resolve() on list ... DONE
[18:01:14.960] result() for ClusterFuture ...
[18:01:14.961] - result already collected: FutureResult
[18:01:14.961] result() for ClusterFuture ... done
[18:01:14.961] result() for ClusterFuture ...
[18:01:14.961] - result already collected: FutureResult
[18:01:14.961] result() for ClusterFuture ... done
[18:01:14.962] result() for ClusterFuture ...
[18:01:14.962] - result already collected: FutureResult
[18:01:14.962] result() for ClusterFuture ... done
[18:01:14.962] result() for ClusterFuture ...
[18:01:14.962] - result already collected: FutureResult
[18:01:14.962] result() for ClusterFuture ... done
[18:01:14.963]  - Number of value chunks collected: 2
[18:01:14.963] Resolving 2 futures (chunks) ... DONE
[18:01:14.963] Reducing values from 2 chunks ...
[18:01:14.963]  - Number of values collected after concatenation: 5
[18:01:14.963]  - Number of values expected: 5
[18:01:14.964] Reducing values from 2 chunks ... DONE
[18:01:14.964] future_lapply() ... DONE
[18:01:14.964] plan(): Setting new future strategy stack:
[18:01:14.965] List of future strategies:
[18:01:14.965] 1. sequential:
[18:01:14.965]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:14.965]    - tweaked: FALSE
[18:01:14.965]    - call: plan(sequential)
[18:01:14.966] plan(): nbrOfWorkers() = 1
*** strategy = ‘multisession’ ... done
> 
> message("*** future_replicate() ... DONE")
*** future_replicate() ... DONE
> 
> source("incl/end.R")
[18:01:14.968] plan(): Setting new future strategy stack:
[18:01:14.968] List of future strategies:
[18:01:14.968] 1. FutureStrategy:
[18:01:14.968]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:01:14.968]    - tweaked: FALSE
[18:01:14.968]    - call: future::plan(oplan)
[18:01:14.970] plan(): nbrOfWorkers() = 1
> 
