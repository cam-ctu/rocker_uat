
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[17:00:35.772] plan(): Setting new future strategy stack:
[17:00:35.772] List of future strategies:
[17:00:35.772] 1. sequential:
[17:00:35.772]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:35.772]    - tweaked: FALSE
[17:00:35.772]    - call: future::plan("sequential")
[17:00:35.787] plan(): nbrOfWorkers() = 1
> 
> message("*** future_replicate() ...")
*** future_replicate() ...
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+   
+   y0 <- replicate(5L, sample(10L, size = 1L))
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(length(y0) == length(y1))
+   
+   set.seed(0xBEEF)
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   set.seed(0xBEEF)
+   y2 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(all.equal(y2, y1))
+   
+   y3 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   y4 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   stopifnot(all.equal(y4, y3))
+   
+   
+   message("- example(replicate) ...")
+   
+   foo <- function(x = 1, y = 2) c(x, y)
+   bar0 <- function(n, x) replicate(n, foo(x = x))
+   y0 <- bar0(5, x = 3)
+   
+   bar1 <- function(n, x) future_replicate(n, foo(x = x))
+   y1 <- bar1(5, x = 3)
+   stopifnot(all.equal(y1, y0))
+   
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[17:00:35.811] plan(): Setting new future strategy stack:
[17:00:35.812] List of future strategies:
[17:00:35.812] 1. sequential:
[17:00:35.812]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:35.812]    - tweaked: FALSE
[17:00:35.812]    - call: plan(strategy)
[17:00:35.824] plan(): nbrOfWorkers() = 1
[17:00:35.826] future_lapply() ...
[17:00:35.829] Generating random seeds ...
[17:00:35.830] Generating random seed streams for 5 elements ...
[17:00:35.830] Generating random seed streams for 5 elements ... DONE
[17:00:35.830] Generating random seeds ... DONE
[17:00:35.830] Will set RNG state on exit: 10403, 17, -77845502, -1562453708, -1515638089, 1039584941, -1682415676, -813209622, 2084907093, 560117231, -450331146, -1975719136, 950183139, -1536876159, -1593772048, 339891854, 2121071097, 1096119179, 177921978, -758067524, 1270072831, 926163797, -1187228564, -468971326, -915877091, -1748850281, -888565506, -1464917320, -1842348901, -188151047, 857029704, 827039606, -1042945359, 1082346211, 280193458, 1925650948, -1928359609, -1972503523, -945024364, -2017387974, -1837558651, 715090271, 1649265126, 1755125872, 393210771, 1350859825, 1058509536, -604707970, -2030364151, 1914466875, -1547875318, -540552212, -633194385, -366569563, 120168284, 416432946, 1437289005, -790746905, 1260939790, 1951274984, -362321429, 1997372041, 1241870872, 213973318, 254539681, 942438963, -1011648606, 39645844, 101656855, 1935759117, 910904868, 2099656202, -1657688203, 911006415, 1049697750, 88977792, 1158203843, -377438367, -1148951088, 2100655406, 787342553, -856047893, -629949606, -756138724, 268008479, 1974018165, 2024283404, -1745702686, -594773571, -926253513, -2050755362, -1181487080, -1020489861, -676606183, -546622552, -817560746, 1881455569, -1178546301, 70547986, -917836380, 783292775, -1325037891, -905974220, 1990849946, -1211026971, -429949569, -1203882746, -789590384, 563496755, 1224479953, -1913663872, 1905776478, -435604311, -150157477, -1044431510, -1439313908, 181831759, -931929851, -1677747780, 2118077586, -882542707, 1790373831, -1452338002, -1883056888, -163970293, 274312681, -1846576456, -316908186, -1408412159, -1603190637, 359234, -1783089932, -1379393289, 877566189, -1386439804, 1912452522, -243061995, -122955345, -168765002, 202702816, 92524323, 1634345025, -2029257936, 273133902, -817519687, 1903351243, 699016826, 698190716, -20216897, -1295913835, -1760005460, -1566822270, 608075869, -333039785, 1177299518, -1948541320, 1885240667, 729509049, 1085867272, 1218906038, 249867505, 375319331, -616600206, -372799548, -810081401, 1939272029, 569159508, -600607366, 603771077, -1895566817, 635729318, 2020603696, 1926364627, -1768485903, 1528982816, -2088866882, 1449354185, -2038516869, -1918463670, 506985900, -1077835601, 662508133, 48417308, 1443292274, -193471763, -378583257, -396893362, -1376523352, 1035980715, 1487199433, -390353704, 1887695238, -344733599, 1118841331, 154097762, 338317012, -760670249, -1961212467, -1464573596, -34593462, 1343399093, 2024645647, -1814676202, -1851127872, 462795651, 1891762593, -1019826800, -58958226, -936835047, 1148015787, -498734950, 1919350876, 217544031, 1014333237, -180170036, -2049601502, -1495418243, -1807921289, -1914404706, -1217675432, 535882427, 239760473, -326045720, 692238870, -1862943343, -23583165, -402344622, -264857116, -666118105, 860175472, -768793788, 1831254488, 1593150586, 1953013296, -709217604, -1870320812, 400187458, 917055904, -542337348, -1189374512, -1345344158, 1972707304, 1762389964, -1395131652, 867626482, -27696000, -708288268, -815906168, 993887034, 1635712848, -1012239764, 93173908, -382721710, 1408214752, -952885556, 1995571360, -1856788606, -818239768, 1498324716, 1449934908, 486116978, -2023744400, 651936292, 1043697720, -984606694, 596530896, -643015620, 2070201492, 1565059202, -800239680, 2143627580, -1827991920, 897386530, -1582905336, -787989364, 472069148, 1995801234, 2072162432, -876993516, 1160093992, -1616963014, -1589160752, 1819622508, -430621004, -486053870, -602230816, 632998860, 1594476000, 1830623778, -2017667800, 1798712588, -879065540, 100587762, 202041072, 239435588, -713193896, 93801018, -259272976, 820820156, 655399444, 2139462850, -1286509472, 1387466108, -1080928048, -536327134, 683992744, 1731013516, -1223600708, -439360462, 1585958720, -859626316, -1729962168, 1701065402, -1856291056, -2057747220, 1721887828, -468488430, 471719840, -1796168756, 1841027936, -641243966, 2079931944, -492569172, -1832195268, -1464445070, -2020507856, -333646300, -681497544, -1368233766, 679181712, 1059642108, 1972937620, -490381502, 1146160640, -1449136580, -377482672, 1708727970, 105073480, 1222631948, 30955740, -1235740078, 1702951040, -1582841004, -778908184, -35401990, 605178704, 333483052, 198785396, 1850414738, 1849253472, -1861192052, 1800148832, 1008870114, 1017630888, -1633821492, 1727107580, -1148983374, -1008711184, -1215908412, 755790680, 4312954, 2064049584, 2034277820, 705932372, -16920638, 1685591840, 529310652, -695869872, 1291033058, 1378526568, 1568658764, 1098071292, 94610162, -1767781632, 1401253492, 1230765064, -1869674054, 1374628816, -1426926100, -1160478828, -1317679406, -1505031584, -218802868, -1666674400, 796026498, -481524248, 1087724524, -109929924, 831268466, 666590064, -755418844, 1232054840, 899590554, -1591988784, -996602436, -1684101996, -66400126, -1958513216, 202147644, -1685841776, -1692136670, -1843428856, -739606260, -1900598884, -1220109806, 970088320, 1662677780, 2059114792, 472391738, -1832037424, 1820558956, 697725492, -1249356142, 1140526432, -393207476, -1985186848, 1380303266, 1939792296, 585531020, 14316988, 1192436338, -964613136, 183016004, 285089880, -2018200518, 1306827888, -511376324, -722543340, 202564290, 1884264160, -837329796, -1499856176, 117367202, 1008505896, -394946804, 89359804, 1853466418, 234065600, 744155188, -2035700024, 1989830842, 1367163536, -140859668, 969953876, -1526853998, 1819628832, -181002804, -836178208, 310754498, 498523176, 608543660, 759498428, -1250473998, 1767125552, -1056941148, 1941284280, 1443503959, 57324192, 544185342, -74482997, 267132109, 1785872378, -552127432, -841648671, 1084915347, 1172917428, -950495806, 880731607, 761711137, -2098906650, -261648156, -1300336619, -1087246273, 1238048728, -56221194, -62512637, 713717061, 1565024610, 545647312, 371443193, 1749986603, 1734766236, 1022426314, 801412543, -663131895, -1560622562, 1533724620, -823970403, -1806372825, -1033118128, 73919214, 55022491, 518685181, 1602122986, 1219067784, -316991183, -778098269, -304112220, -1729658798, -234515545, -591001615, 688890678, 836087764, -1613310619, 1318001007, 1161012136, 478759174, 2046421043, -960381291, -1639344398, -31791296, 637088937, -751154917, -1933783316, 1846342394, -2012816593, -846167239, -1982966450, -1996184676, -623171315, 866560887, -583188608, -1648316962, -626502997, -957903443, -23158246, 357348568, -697239231, -2027462157, -2055739372, -266326622, 777005751, 1948451969, -1334791034, -1972637500, 668126709, 1018009695, 1287176888, -881189994, -2074187357, -740467355, 1732263042, 461493744, 1917100953, 2030470539, 2036232316, 1375867562, 3295, 1993198185, 1134864510, -1969000340, 897222845, -1114621561, 2135403888, -1529604082, 948786491, 1088272925, -1424187702, 313645544, 170299089, 1256934083, 2102329796, -1681873294, -943302841, 89540369, -1006421354, 762372084, 933882245, 243950799, 621895112, -160091034, 1360425619, 99400181, -1795714094, 565987360, -1139629559, 526727995, 1432686220, 578855706, -1749408369, 1917745881, 2124633454, 1814395132, 1205387885, -190865897, 699636704, 1634396094, -506227317, 656836109, -1359652294, 1311912568, 1709873697, 320025811, -216648716, -456747902, -1602568937, 1398729697, -455099098, 329219108, -67504427, -2124696961, -273652968, 1000176182, 1301224643, 1091809541, 2063837346, -673186160, 1085995577, -335871253, 1158480860, -465476086, -630662913, -526713527, -1230885154, -180448116, -321772451, 886004327, 1929085840, 814933934, -154425765, -443843, 705268906, -1431421624, 278200689, -1340610845, 1906479421
[17:00:35.831] Number of chunks: 1
[17:00:35.831] getGlobalsAndPackagesXApply() ...
[17:00:35.831]  - future.globals: TRUE
[17:00:35.832] getGlobalsAndPackages() ...
[17:00:35.832] Searching for globals...
[17:00:35.834] - globals found: [2] ‘FUN’, ‘sample’
[17:00:35.834] Searching for globals ... DONE
[17:00:35.834] Resolving globals: FALSE
[17:00:35.835] The total size of the 1 globals is 616 bytes (616 bytes)
[17:00:35.836] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:00:35.836] - globals: [1] ‘FUN’
[17:00:35.836] 
[17:00:35.836] getGlobalsAndPackages() ... DONE
[17:00:35.836]  - globals found/used: [n=1] ‘FUN’
[17:00:35.836]  - needed namespaces: [n=0] 
[17:00:35.836] Finding globals ... DONE
[17:00:35.836]  - use_args: TRUE
[17:00:35.837]  - Getting '...' globals ...
[17:00:35.837] resolve() on list ...
[17:00:35.837]  recursive: 0
[17:00:35.838]  length: 1
[17:00:35.838]  elements: ‘...’
[17:00:35.838]  length: 0 (resolved future 1)
[17:00:35.838] resolve() on list ... DONE
[17:00:35.838]    - '...' content: [n=0] 
[17:00:35.838] List of 1
[17:00:35.838]  $ ...: list()
[17:00:35.838]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:35.838]  - attr(*, "where")=List of 1
[17:00:35.838]   ..$ ...:<environment: 0x558560ccb7e8> 
[17:00:35.838]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:35.838]  - attr(*, "resolved")= logi TRUE
[17:00:35.838]  - attr(*, "total_size")= num NA
[17:00:35.843]  - Getting '...' globals ... DONE
[17:00:35.843] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:00:35.843] List of 2
[17:00:35.843]  $ ...future.FUN:function (...)  
[17:00:35.843]  $ ...          : list()
[17:00:35.843]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:35.843]  - attr(*, "where")=List of 2
[17:00:35.843]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:00:35.843]   ..$ ...          :<environment: 0x558560ccb7e8> 
[17:00:35.843]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:35.843]  - attr(*, "resolved")= logi FALSE
[17:00:35.843]  - attr(*, "total_size")= num 616
[17:00:35.846] Packages to be attached in all futures: [n=0] 
[17:00:35.846] getGlobalsAndPackagesXApply() ... DONE
[17:00:35.846] Number of futures (= number of chunks): 1
[17:00:35.846] Launching 1 futures (chunks) ...
[17:00:35.846] Chunk #1 of 1 ...
[17:00:35.846]  - Finding globals in 'X' for chunk #1 ...
[17:00:35.847] getGlobalsAndPackages() ...
[17:00:35.847] Searching for globals...
[17:00:35.847] 
[17:00:35.847] Searching for globals ... DONE
[17:00:35.847] - globals: [0] <none>
[17:00:35.847] getGlobalsAndPackages() ... DONE
[17:00:35.847]    + additional globals found: [n=0] 
[17:00:35.847]    + additional namespaces needed: [n=0] 
[17:00:35.848]  - Finding globals in 'X' for chunk #1 ... DONE
[17:00:35.848]  - seeds: [5] <seeds>
[17:00:35.848]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:35.848] getGlobalsAndPackages() ...
[17:00:35.848] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:35.848] Resolving globals: FALSE
[17:00:35.848] Tweak future expression to call with '...' arguments ...
[17:00:35.848] {
[17:00:35.848]     do.call(function(...) {
[17:00:35.848]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:35.848]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:35.848]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:35.848]             on.exit(options(oopts), add = TRUE)
[17:00:35.848]         }
[17:00:35.848]         {
[17:00:35.848]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:35.848]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:35.848]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:35.848]                   envir = globalenv(), inherits = FALSE)
[17:00:35.848]                 ...future.FUN(...future.X_jj, ...)
[17:00:35.848]             })
[17:00:35.848]         }
[17:00:35.848]     }, args = future.call.arguments)
[17:00:35.848] }
[17:00:35.849] Tweak future expression to call with '...' arguments ... DONE
[17:00:35.849] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:35.849] 
[17:00:35.849] getGlobalsAndPackages() ... DONE
[17:00:35.850] run() for ‘Future’ ...
[17:00:35.850] - state: ‘created’
[17:00:35.850] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:00:35.850] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:00:35.851] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:00:35.851]   - Field: ‘label’
[17:00:35.851]   - Field: ‘local’
[17:00:35.851]   - Field: ‘owner’
[17:00:35.851]   - Field: ‘envir’
[17:00:35.851]   - Field: ‘packages’
[17:00:35.851]   - Field: ‘gc’
[17:00:35.851]   - Field: ‘conditions’
[17:00:35.851]   - Field: ‘expr’
[17:00:35.851]   - Field: ‘uuid’
[17:00:35.852]   - Field: ‘seed’
[17:00:35.852]   - Field: ‘version’
[17:00:35.852]   - Field: ‘result’
[17:00:35.852]   - Field: ‘asynchronous’
[17:00:35.852]   - Field: ‘calls’
[17:00:35.852]   - Field: ‘globals’
[17:00:35.852]   - Field: ‘stdout’
[17:00:35.852]   - Field: ‘earlySignal’
[17:00:35.852]   - Field: ‘lazy’
[17:00:35.852]   - Field: ‘state’
[17:00:35.852] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:00:35.853] - Launch lazy future ...
[17:00:35.853] Packages needed by the future expression (n = 0): <none>
[17:00:35.856] Packages needed by future strategies (n = 0): <none>
[17:00:35.857] {
[17:00:35.857]     {
[17:00:35.857]         {
[17:00:35.857]             ...future.startTime <- base::Sys.time()
[17:00:35.857]             {
[17:00:35.857]                 {
[17:00:35.857]                   {
[17:00:35.857]                     base::local({
[17:00:35.857]                       has_future <- base::requireNamespace("future", 
[17:00:35.857]                         quietly = TRUE)
[17:00:35.857]                       if (has_future) {
[17:00:35.857]                         ns <- base::getNamespace("future")
[17:00:35.857]                         version <- ns[[".package"]][["version"]]
[17:00:35.857]                         if (is.null(version)) 
[17:00:35.857]                           version <- utils::packageVersion("future")
[17:00:35.857]                       }
[17:00:35.857]                       else {
[17:00:35.857]                         version <- NULL
[17:00:35.857]                       }
[17:00:35.857]                       if (!has_future || version < "1.8.0") {
[17:00:35.857]                         info <- base::c(r_version = base::gsub("R version ", 
[17:00:35.857]                           "", base::R.version$version.string), 
[17:00:35.857]                           platform = base::sprintf("%s (%s-bit)", 
[17:00:35.857]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:35.857]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:35.857]                             "release", "version")], collapse = " "), 
[17:00:35.857]                           hostname = base::Sys.info()[["nodename"]])
[17:00:35.857]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:00:35.857]                           info)
[17:00:35.857]                         info <- base::paste(info, collapse = "; ")
[17:00:35.857]                         if (!has_future) {
[17:00:35.857]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:35.857]                             info)
[17:00:35.857]                         }
[17:00:35.857]                         else {
[17:00:35.857]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:35.857]                             info, version)
[17:00:35.857]                         }
[17:00:35.857]                         base::stop(msg)
[17:00:35.857]                       }
[17:00:35.857]                     })
[17:00:35.857]                   }
[17:00:35.857]                   ...future.strategy.old <- future::plan("list")
[17:00:35.857]                   options(future.plan = NULL)
[17:00:35.857]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:35.857]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:35.857]                 }
[17:00:35.857]                 ...future.workdir <- getwd()
[17:00:35.857]             }
[17:00:35.857]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:35.857]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:35.857]         }
[17:00:35.857]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:35.857]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:00:35.857]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:35.857]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:35.857]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:35.857]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:35.857]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:35.857]             base::names(...future.oldOptions))
[17:00:35.857]     }
[17:00:35.857]     if (FALSE) {
[17:00:35.857]     }
[17:00:35.857]     else {
[17:00:35.857]         if (TRUE) {
[17:00:35.857]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:35.857]                 open = "w")
[17:00:35.857]         }
[17:00:35.857]         else {
[17:00:35.857]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:35.857]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:35.857]         }
[17:00:35.857]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:35.857]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:35.857]             base::sink(type = "output", split = FALSE)
[17:00:35.857]             base::close(...future.stdout)
[17:00:35.857]         }, add = TRUE)
[17:00:35.857]     }
[17:00:35.857]     ...future.frame <- base::sys.nframe()
[17:00:35.857]     ...future.conditions <- base::list()
[17:00:35.857]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:35.857]     if (FALSE) {
[17:00:35.857]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:35.857]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:35.857]     }
[17:00:35.857]     ...future.result <- base::tryCatch({
[17:00:35.857]         base::withCallingHandlers({
[17:00:35.857]             ...future.value <- base::withVisible(base::local({
[17:00:35.857]                 do.call(function(...) {
[17:00:35.857]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:35.857]                   if (!identical(...future.globals.maxSize.org, 
[17:00:35.857]                     ...future.globals.maxSize)) {
[17:00:35.857]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:35.857]                     on.exit(options(oopts), add = TRUE)
[17:00:35.857]                   }
[17:00:35.857]                   {
[17:00:35.857]                     lapply(seq_along(...future.elements_ii), 
[17:00:35.857]                       FUN = function(jj) {
[17:00:35.857]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:35.857]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:35.857]                           envir = globalenv(), inherits = FALSE)
[17:00:35.857]                         ...future.FUN(...future.X_jj, ...)
[17:00:35.857]                       })
[17:00:35.857]                   }
[17:00:35.857]                 }, args = future.call.arguments)
[17:00:35.857]             }))
[17:00:35.857]             future::FutureResult(value = ...future.value$value, 
[17:00:35.857]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:35.857]                   ...future.rng), globalenv = if (FALSE) 
[17:00:35.857]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:35.857]                     ...future.globalenv.names))
[17:00:35.857]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:35.857]         }, condition = base::local({
[17:00:35.857]             c <- base::c
[17:00:35.857]             inherits <- base::inherits
[17:00:35.857]             invokeRestart <- base::invokeRestart
[17:00:35.857]             length <- base::length
[17:00:35.857]             list <- base::list
[17:00:35.857]             seq.int <- base::seq.int
[17:00:35.857]             signalCondition <- base::signalCondition
[17:00:35.857]             sys.calls <- base::sys.calls
[17:00:35.857]             `[[` <- base::`[[`
[17:00:35.857]             `+` <- base::`+`
[17:00:35.857]             `<<-` <- base::`<<-`
[17:00:35.857]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:35.857]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:35.857]                   3L)]
[17:00:35.857]             }
[17:00:35.857]             function(cond) {
[17:00:35.857]                 is_error <- inherits(cond, "error")
[17:00:35.857]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:35.857]                   NULL)
[17:00:35.857]                 if (is_error) {
[17:00:35.857]                   sessionInformation <- function() {
[17:00:35.857]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:35.857]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:35.857]                       search = base::search(), system = base::Sys.info())
[17:00:35.857]                   }
[17:00:35.857]                   ...future.conditions[[length(...future.conditions) + 
[17:00:35.857]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:35.857]                     cond$call), session = sessionInformation(), 
[17:00:35.857]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:35.857]                   signalCondition(cond)
[17:00:35.857]                 }
[17:00:35.857]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:35.857]                 "immediateCondition"))) {
[17:00:35.857]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:35.857]                   ...future.conditions[[length(...future.conditions) + 
[17:00:35.857]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:35.857]                   if (TRUE && !signal) {
[17:00:35.857]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:35.857]                     {
[17:00:35.857]                       inherits <- base::inherits
[17:00:35.857]                       invokeRestart <- base::invokeRestart
[17:00:35.857]                       is.null <- base::is.null
[17:00:35.857]                       muffled <- FALSE
[17:00:35.857]                       if (inherits(cond, "message")) {
[17:00:35.857]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:35.857]                         if (muffled) 
[17:00:35.857]                           invokeRestart("muffleMessage")
[17:00:35.857]                       }
[17:00:35.857]                       else if (inherits(cond, "warning")) {
[17:00:35.857]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:35.857]                         if (muffled) 
[17:00:35.857]                           invokeRestart("muffleWarning")
[17:00:35.857]                       }
[17:00:35.857]                       else if (inherits(cond, "condition")) {
[17:00:35.857]                         if (!is.null(pattern)) {
[17:00:35.857]                           computeRestarts <- base::computeRestarts
[17:00:35.857]                           grepl <- base::grepl
[17:00:35.857]                           restarts <- computeRestarts(cond)
[17:00:35.857]                           for (restart in restarts) {
[17:00:35.857]                             name <- restart$name
[17:00:35.857]                             if (is.null(name)) 
[17:00:35.857]                               next
[17:00:35.857]                             if (!grepl(pattern, name)) 
[17:00:35.857]                               next
[17:00:35.857]                             invokeRestart(restart)
[17:00:35.857]                             muffled <- TRUE
[17:00:35.857]                             break
[17:00:35.857]                           }
[17:00:35.857]                         }
[17:00:35.857]                       }
[17:00:35.857]                       invisible(muffled)
[17:00:35.857]                     }
[17:00:35.857]                     muffleCondition(cond, pattern = "^muffle")
[17:00:35.857]                   }
[17:00:35.857]                 }
[17:00:35.857]                 else {
[17:00:35.857]                   if (TRUE) {
[17:00:35.857]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:35.857]                     {
[17:00:35.857]                       inherits <- base::inherits
[17:00:35.857]                       invokeRestart <- base::invokeRestart
[17:00:35.857]                       is.null <- base::is.null
[17:00:35.857]                       muffled <- FALSE
[17:00:35.857]                       if (inherits(cond, "message")) {
[17:00:35.857]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:35.857]                         if (muffled) 
[17:00:35.857]                           invokeRestart("muffleMessage")
[17:00:35.857]                       }
[17:00:35.857]                       else if (inherits(cond, "warning")) {
[17:00:35.857]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:35.857]                         if (muffled) 
[17:00:35.857]                           invokeRestart("muffleWarning")
[17:00:35.857]                       }
[17:00:35.857]                       else if (inherits(cond, "condition")) {
[17:00:35.857]                         if (!is.null(pattern)) {
[17:00:35.857]                           computeRestarts <- base::computeRestarts
[17:00:35.857]                           grepl <- base::grepl
[17:00:35.857]                           restarts <- computeRestarts(cond)
[17:00:35.857]                           for (restart in restarts) {
[17:00:35.857]                             name <- restart$name
[17:00:35.857]                             if (is.null(name)) 
[17:00:35.857]                               next
[17:00:35.857]                             if (!grepl(pattern, name)) 
[17:00:35.857]                               next
[17:00:35.857]                             invokeRestart(restart)
[17:00:35.857]                             muffled <- TRUE
[17:00:35.857]                             break
[17:00:35.857]                           }
[17:00:35.857]                         }
[17:00:35.857]                       }
[17:00:35.857]                       invisible(muffled)
[17:00:35.857]                     }
[17:00:35.857]                     muffleCondition(cond, pattern = "^muffle")
[17:00:35.857]                   }
[17:00:35.857]                 }
[17:00:35.857]             }
[17:00:35.857]         }))
[17:00:35.857]     }, error = function(ex) {
[17:00:35.857]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:35.857]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:35.857]                 ...future.rng), started = ...future.startTime, 
[17:00:35.857]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:35.857]             version = "1.8"), class = "FutureResult")
[17:00:35.857]     }, finally = {
[17:00:35.857]         if (!identical(...future.workdir, getwd())) 
[17:00:35.857]             setwd(...future.workdir)
[17:00:35.857]         {
[17:00:35.857]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:35.857]                 ...future.oldOptions$nwarnings <- NULL
[17:00:35.857]             }
[17:00:35.857]             base::options(...future.oldOptions)
[17:00:35.857]             if (.Platform$OS.type == "windows") {
[17:00:35.857]                 old_names <- names(...future.oldEnvVars)
[17:00:35.857]                 envs <- base::Sys.getenv()
[17:00:35.857]                 names <- names(envs)
[17:00:35.857]                 common <- intersect(names, old_names)
[17:00:35.857]                 added <- setdiff(names, old_names)
[17:00:35.857]                 removed <- setdiff(old_names, names)
[17:00:35.857]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:35.857]                   envs[common]]
[17:00:35.857]                 NAMES <- toupper(changed)
[17:00:35.857]                 args <- list()
[17:00:35.857]                 for (kk in seq_along(NAMES)) {
[17:00:35.857]                   name <- changed[[kk]]
[17:00:35.857]                   NAME <- NAMES[[kk]]
[17:00:35.857]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:35.857]                     next
[17:00:35.857]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:35.857]                 }
[17:00:35.857]                 NAMES <- toupper(added)
[17:00:35.857]                 for (kk in seq_along(NAMES)) {
[17:00:35.857]                   name <- added[[kk]]
[17:00:35.857]                   NAME <- NAMES[[kk]]
[17:00:35.857]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:35.857]                     next
[17:00:35.857]                   args[[name]] <- ""
[17:00:35.857]                 }
[17:00:35.857]                 NAMES <- toupper(removed)
[17:00:35.857]                 for (kk in seq_along(NAMES)) {
[17:00:35.857]                   name <- removed[[kk]]
[17:00:35.857]                   NAME <- NAMES[[kk]]
[17:00:35.857]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:35.857]                     next
[17:00:35.857]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:35.857]                 }
[17:00:35.857]                 if (length(args) > 0) 
[17:00:35.857]                   base::do.call(base::Sys.setenv, args = args)
[17:00:35.857]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:35.857]             }
[17:00:35.857]             else {
[17:00:35.857]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:35.857]             }
[17:00:35.857]             {
[17:00:35.857]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:35.857]                   0L) {
[17:00:35.857]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:35.857]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:35.857]                   base::options(opts)
[17:00:35.857]                 }
[17:00:35.857]                 {
[17:00:35.857]                   {
[17:00:35.857]                     base::assign(".Random.seed", c(10403L, 17L, 
[17:00:35.857]                     -77845502L, -1562453708L, -1515638089L, 1039584941L, 
[17:00:35.857]                     -1682415676L, -813209622L, 2084907093L, 560117231L, 
[17:00:35.857]                     -450331146L, -1975719136L, 950183139L, -1536876159L, 
[17:00:35.857]                     -1593772048L, 339891854L, 2121071097L, 1096119179L, 
[17:00:35.857]                     177921978L, -758067524L, 1270072831L, 926163797L, 
[17:00:35.857]                     -1187228564L, -468971326L, -915877091L, -1748850281L, 
[17:00:35.857]                     -888565506L, -1464917320L, -1842348901L, 
[17:00:35.857]                     -188151047L, 857029704L, 827039606L, -1042945359L, 
[17:00:35.857]                     1082346211L, 280193458L, 1925650948L, -1928359609L, 
[17:00:35.857]                     -1972503523L, -945024364L, -2017387974L, 
[17:00:35.857]                     -1837558651L, 715090271L, 1649265126L, 1755125872L, 
[17:00:35.857]                     393210771L, 1350859825L, 1058509536L, -604707970L, 
[17:00:35.857]                     -2030364151L, 1914466875L, -1547875318L, 
[17:00:35.857]                     -540552212L, -633194385L, -366569563L, 120168284L, 
[17:00:35.857]                     416432946L, 1437289005L, -790746905L, 1260939790L, 
[17:00:35.857]                     1951274984L, -362321429L, 1997372041L, 1241870872L, 
[17:00:35.857]                     213973318L, 254539681L, 942438963L, -1011648606L, 
[17:00:35.857]                     39645844L, 101656855L, 1935759117L, 910904868L, 
[17:00:35.857]                     2099656202L, -1657688203L, 911006415L, 1049697750L, 
[17:00:35.857]                     88977792L, 1158203843L, -377438367L, -1148951088L, 
[17:00:35.857]                     2100655406L, 787342553L, -856047893L, -629949606L, 
[17:00:35.857]                     -756138724L, 268008479L, 1974018165L, 2024283404L, 
[17:00:35.857]                     -1745702686L, -594773571L, -926253513L, -2050755362L, 
[17:00:35.857]                     -1181487080L, -1020489861L, -676606183L, 
[17:00:35.857]                     -546622552L, -817560746L, 1881455569L, -1178546301L, 
[17:00:35.857]                     70547986L, -917836380L, 783292775L, -1325037891L, 
[17:00:35.857]                     -905974220L, 1990849946L, -1211026971L, -429949569L, 
[17:00:35.857]                     -1203882746L, -789590384L, 563496755L, 1224479953L, 
[17:00:35.857]                     -1913663872L, 1905776478L, -435604311L, -150157477L, 
[17:00:35.857]                     -1044431510L, -1439313908L, 181831759L, -931929851L, 
[17:00:35.857]                     -1677747780L, 2118077586L, -882542707L, 1790373831L, 
[17:00:35.857]                     -1452338002L, -1883056888L, -163970293L, 
[17:00:35.857]                     274312681L, -1846576456L, -316908186L, -1408412159L, 
[17:00:35.857]                     -1603190637L, 359234L, -1783089932L, -1379393289L, 
[17:00:35.857]                     877566189L, -1386439804L, 1912452522L, -243061995L, 
[17:00:35.857]                     -122955345L, -168765002L, 202702816L, 92524323L, 
[17:00:35.857]                     1634345025L, -2029257936L, 273133902L, -817519687L, 
[17:00:35.857]                     1903351243L, 699016826L, 698190716L, -20216897L, 
[17:00:35.857]                     -1295913835L, -1760005460L, -1566822270L, 
[17:00:35.857]                     608075869L, -333039785L, 1177299518L, -1948541320L, 
[17:00:35.857]                     1885240667L, 729509049L, 1085867272L, 1218906038L, 
[17:00:35.857]                     249867505L, 375319331L, -616600206L, -372799548L, 
[17:00:35.857]                     -810081401L, 1939272029L, 569159508L, -600607366L, 
[17:00:35.857]                     603771077L, -1895566817L, 635729318L, 2020603696L, 
[17:00:35.857]                     1926364627L, -1768485903L, 1528982816L, -2088866882L, 
[17:00:35.857]                     1449354185L, -2038516869L, -1918463670L, 
[17:00:35.857]                     506985900L, -1077835601L, 662508133L, 48417308L, 
[17:00:35.857]                     1443292274L, -193471763L, -378583257L, -396893362L, 
[17:00:35.857]                     -1376523352L, 1035980715L, 1487199433L, -390353704L, 
[17:00:35.857]                     1887695238L, -344733599L, 1118841331L, 154097762L, 
[17:00:35.857]                     338317012L, -760670249L, -1961212467L, -1464573596L, 
[17:00:35.857]                     -34593462L, 1343399093L, 2024645647L, -1814676202L, 
[17:00:35.857]                     -1851127872L, 462795651L, 1891762593L, -1019826800L, 
[17:00:35.857]                     -58958226L, -936835047L, 1148015787L, -498734950L, 
[17:00:35.857]                     1919350876L, 217544031L, 1014333237L, -180170036L, 
[17:00:35.857]                     -2049601502L, -1495418243L, -1807921289L, 
[17:00:35.857]                     -1914404706L, -1217675432L, 535882427L, 239760473L, 
[17:00:35.857]                     -326045720L, 692238870L, -1862943343L, -23583165L, 
[17:00:35.857]                     -402344622L, -264857116L, -666118105L, 860175472L, 
[17:00:35.857]                     -768793788L, 1831254488L, 1593150586L, 1953013296L, 
[17:00:35.857]                     -709217604L, -1870320812L, 400187458L, 917055904L, 
[17:00:35.857]                     -542337348L, -1189374512L, -1345344158L, 
[17:00:35.857]                     1972707304L, 1762389964L, -1395131652L, 867626482L, 
[17:00:35.857]                     -27696000L, -708288268L, -815906168L, 993887034L, 
[17:00:35.857]                     1635712848L, -1012239764L, 93173908L, -382721710L, 
[17:00:35.857]                     1408214752L, -952885556L, 1995571360L, -1856788606L, 
[17:00:35.857]                     -818239768L, 1498324716L, 1449934908L, 486116978L, 
[17:00:35.857]                     -2023744400L, 651936292L, 1043697720L, -984606694L, 
[17:00:35.857]                     596530896L, -643015620L, 2070201492L, 1565059202L, 
[17:00:35.857]                     -800239680L, 2143627580L, -1827991920L, 897386530L, 
[17:00:35.857]                     -1582905336L, -787989364L, 472069148L, 1995801234L, 
[17:00:35.857]                     2072162432L, -876993516L, 1160093992L, -1616963014L, 
[17:00:35.857]                     -1589160752L, 1819622508L, -430621004L, -486053870L, 
[17:00:35.857]                     -602230816L, 632998860L, 1594476000L, 1830623778L, 
[17:00:35.857]                     -2017667800L, 1798712588L, -879065540L, 100587762L, 
[17:00:35.857]                     202041072L, 239435588L, -713193896L, 93801018L, 
[17:00:35.857]                     -259272976L, 820820156L, 655399444L, 2139462850L, 
[17:00:35.857]                     -1286509472L, 1387466108L, -1080928048L, 
[17:00:35.857]                     -536327134L, 683992744L, 1731013516L, -1223600708L, 
[17:00:35.857]                     -439360462L, 1585958720L, -859626316L, -1729962168L, 
[17:00:35.857]                     1701065402L, -1856291056L, -2057747220L, 
[17:00:35.857]                     1721887828L, -468488430L, 471719840L, -1796168756L, 
[17:00:35.857]                     1841027936L, -641243966L, 2079931944L, -492569172L, 
[17:00:35.857]                     -1832195268L, -1464445070L, -2020507856L, 
[17:00:35.857]                     -333646300L, -681497544L, -1368233766L, 679181712L, 
[17:00:35.857]                     1059642108L, 1972937620L, -490381502L, 1146160640L, 
[17:00:35.857]                     -1449136580L, -377482672L, 1708727970L, 105073480L, 
[17:00:35.857]                     1222631948L, 30955740L, -1235740078L, 1702951040L, 
[17:00:35.857]                     -1582841004L, -778908184L, -35401990L, 605178704L, 
[17:00:35.857]                     333483052L, 198785396L, 1850414738L, 1849253472L, 
[17:00:35.857]                     -1861192052L, 1800148832L, 1008870114L, 1017630888L, 
[17:00:35.857]                     -1633821492L, 1727107580L, -1148983374L, 
[17:00:35.857]                     -1008711184L, -1215908412L, 755790680L, 4312954L, 
[17:00:35.857]                     2064049584L, 2034277820L, 705932372L, -16920638L, 
[17:00:35.857]                     1685591840L, 529310652L, -695869872L, 1291033058L, 
[17:00:35.857]                     1378526568L, 1568658764L, 1098071292L, 94610162L, 
[17:00:35.857]                     -1767781632L, 1401253492L, 1230765064L, -1869674054L, 
[17:00:35.857]                     1374628816L, -1426926100L, -1160478828L, 
[17:00:35.857]                     -1317679406L, -1505031584L, -218802868L, 
[17:00:35.857]                     -1666674400L, 796026498L, -481524248L, 1087724524L, 
[17:00:35.857]                     -109929924L, 831268466L, 666590064L, -755418844L, 
[17:00:35.857]                     1232054840L, 899590554L, -1591988784L, -996602436L, 
[17:00:35.857]                     -1684101996L, -66400126L, -1958513216L, 202147644L, 
[17:00:35.857]                     -1685841776L, -1692136670L, -1843428856L, 
[17:00:35.857]                     -739606260L, -1900598884L, -1220109806L, 
[17:00:35.857]                     970088320L, 1662677780L, 2059114792L, 472391738L, 
[17:00:35.857]                     -1832037424L, 1820558956L, 697725492L, -1249356142L, 
[17:00:35.857]                     1140526432L, -393207476L, -1985186848L, 1380303266L, 
[17:00:35.857]                     1939792296L, 585531020L, 14316988L, 1192436338L, 
[17:00:35.857]                     -964613136L, 183016004L, 285089880L, -2018200518L, 
[17:00:35.857]                     1306827888L, -511376324L, -722543340L, 202564290L, 
[17:00:35.857]                     1884264160L, -837329796L, -1499856176L, 117367202L, 
[17:00:35.857]                     1008505896L, -394946804L, 89359804L, 1853466418L, 
[17:00:35.857]                     234065600L, 744155188L, -2035700024L, 1989830842L, 
[17:00:35.857]                     1367163536L, -140859668L, 969953876L, -1526853998L, 
[17:00:35.857]                     1819628832L, -181002804L, -836178208L, 310754498L, 
[17:00:35.857]                     498523176L, 608543660L, 759498428L, -1250473998L, 
[17:00:35.857]                     1767125552L, -1056941148L, 1941284280L, 1443503959L, 
[17:00:35.857]                     57324192L, 544185342L, -74482997L, 267132109L, 
[17:00:35.857]                     1785872378L, -552127432L, -841648671L, 1084915347L, 
[17:00:35.857]                     1172917428L, -950495806L, 880731607L, 761711137L, 
[17:00:35.857]                     -2098906650L, -261648156L, -1300336619L, 
[17:00:35.857]                     -1087246273L, 1238048728L, -56221194L, -62512637L, 
[17:00:35.857]                     713717061L, 1565024610L, 545647312L, 371443193L, 
[17:00:35.857]                     1749986603L, 1734766236L, 1022426314L, 801412543L, 
[17:00:35.857]                     -663131895L, -1560622562L, 1533724620L, -823970403L, 
[17:00:35.857]                     -1806372825L, -1033118128L, 73919214L, 55022491L, 
[17:00:35.857]                     518685181L, 1602122986L, 1219067784L, -316991183L, 
[17:00:35.857]                     -778098269L, -304112220L, -1729658798L, -234515545L, 
[17:00:35.857]                     -591001615L, 688890678L, 836087764L, -1613310619L, 
[17:00:35.857]                     1318001007L, 1161012136L, 478759174L, 2046421043L, 
[17:00:35.857]                     -960381291L, -1639344398L, -31791296L, 637088937L, 
[17:00:35.857]                     -751154917L, -1933783316L, 1846342394L, -2012816593L, 
[17:00:35.857]                     -846167239L, -1982966450L, -1996184676L, 
[17:00:35.857]                     -623171315L, 866560887L, -583188608L, -1648316962L, 
[17:00:35.857]                     -626502997L, -957903443L, -23158246L, 357348568L, 
[17:00:35.857]                     -697239231L, -2027462157L, -2055739372L, 
[17:00:35.857]                     -266326622L, 777005751L, 1948451969L, -1334791034L, 
[17:00:35.857]                     -1972637500L, 668126709L, 1018009695L, 1287176888L, 
[17:00:35.857]                     -881189994L, -2074187357L, -740467355L, 1732263042L, 
[17:00:35.857]                     461493744L, 1917100953L, 2030470539L, 2036232316L, 
[17:00:35.857]                     1375867562L, 3295L, 1993198185L, 1134864510L, 
[17:00:35.857]                     -1969000340L, 897222845L, -1114621561L, 2135403888L, 
[17:00:35.857]                     -1529604082L, 948786491L, 1088272925L, -1424187702L, 
[17:00:35.857]                     313645544L, 170299089L, 1256934083L, 2102329796L, 
[17:00:35.857]                     -1681873294L, -943302841L, 89540369L, -1006421354L, 
[17:00:35.857]                     762372084L, 933882245L, 243950799L, 621895112L, 
[17:00:35.857]                     -160091034L, 1360425619L, 99400181L, -1795714094L, 
[17:00:35.857]                     565987360L, -1139629559L, 526727995L, 1432686220L, 
[17:00:35.857]                     578855706L, -1749408369L, 1917745881L, 2124633454L, 
[17:00:35.857]                     1814395132L, 1205387885L, -190865897L, 699636704L, 
[17:00:35.857]                     1634396094L, -506227317L, 656836109L, -1359652294L, 
[17:00:35.857]                     1311912568L, 1709873697L, 320025811L, -216648716L, 
[17:00:35.857]                     -456747902L, -1602568937L, 1398729697L, -455099098L, 
[17:00:35.857]                     329219108L, -67504427L, -2124696961L, -273652968L, 
[17:00:35.857]                     1000176182L, 1301224643L, 1091809541L, 2063837346L, 
[17:00:35.857]                     -673186160L, 1085995577L, -335871253L, 1158480860L, 
[17:00:35.857]                     -465476086L, -630662913L, -526713527L, -1230885154L, 
[17:00:35.857]                     -180448116L, -321772451L, 886004327L, 1929085840L, 
[17:00:35.857]                     814933934L, -154425765L, -443843L, 705268906L, 
[17:00:35.857]                     -1431421624L, 278200689L, -1340610845L, 1906479421L
[17:00:35.857]                     ), envir = base::globalenv(), inherits = FALSE)
[17:00:35.857]                     NULL
[17:00:35.857]                   }
[17:00:35.857]                   options(future.plan = NULL)
[17:00:35.857]                   if (is.na(NA_character_)) 
[17:00:35.857]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:35.857]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:35.857]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:35.857]                     .init = FALSE)
[17:00:35.857]                 }
[17:00:35.857]             }
[17:00:35.857]         }
[17:00:35.857]     })
[17:00:35.857]     if (TRUE) {
[17:00:35.857]         base::sink(type = "output", split = FALSE)
[17:00:35.857]         if (TRUE) {
[17:00:35.857]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:35.857]         }
[17:00:35.857]         else {
[17:00:35.857]             ...future.result["stdout"] <- base::list(NULL)
[17:00:35.857]         }
[17:00:35.857]         base::close(...future.stdout)
[17:00:35.857]         ...future.stdout <- NULL
[17:00:35.857]     }
[17:00:35.857]     ...future.result$conditions <- ...future.conditions
[17:00:35.857]     ...future.result$finished <- base::Sys.time()
[17:00:35.857]     ...future.result
[17:00:35.857] }
[17:00:35.860] assign_globals() ...
[17:00:35.860] List of 5
[17:00:35.860]  $ ...future.FUN            :function (...)  
[17:00:35.860]  $ future.call.arguments    : list()
[17:00:35.860]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:35.860]  $ ...future.elements_ii    :List of 5
[17:00:35.860]   ..$ : int 0
[17:00:35.860]   ..$ : int 0
[17:00:35.860]   ..$ : int 0
[17:00:35.860]   ..$ : int 0
[17:00:35.860]   ..$ : int 0
[17:00:35.860]  $ ...future.seeds_ii       :List of 5
[17:00:35.860]   ..$ : int [1:7] 10407 1616969284 -318165684 -483323066 1019856746 -670036702 2023288569
[17:00:35.860]   ..$ : int [1:7] 10407 -591182119 1003553611 626317758 -1883536096 -2003337590 -565993065
[17:00:35.860]   ..$ : int [1:7] 10407 -454348235 503292643 -474573477 -334581994 896498605 -1610893634
[17:00:35.860]   ..$ : int [1:7] 10407 1730142250 -572922141 1228257001 1515012624 -654838775 1935719653
[17:00:35.860]   ..$ : int [1:7] 10407 399195642 1843431364 185128481 -26540199 1856238176 -1463111454
[17:00:35.860]  $ ...future.globals.maxSize: NULL
[17:00:35.860]  - attr(*, "where")=List of 5
[17:00:35.860]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:00:35.860]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:00:35.860]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:00:35.860]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:00:35.860]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:00:35.860]  - attr(*, "resolved")= logi FALSE
[17:00:35.860]  - attr(*, "total_size")= num 616
[17:00:35.860]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:35.860]  - attr(*, "already-done")= logi TRUE
[17:00:35.867] - reassign environment for ‘...future.FUN’
[17:00:35.867] - copied ‘...future.FUN’ to environment
[17:00:35.867] - copied ‘future.call.arguments’ to environment
[17:00:35.867] - copied ‘...future.elements_ii’ to environment
[17:00:35.867] - copied ‘...future.seeds_ii’ to environment
[17:00:35.868] - copied ‘...future.globals.maxSize’ to environment
[17:00:35.868] assign_globals() ... done
[17:00:35.868] plan(): Setting new future strategy stack:
[17:00:35.868] List of future strategies:
[17:00:35.868] 1. sequential:
[17:00:35.868]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:35.868]    - tweaked: FALSE
[17:00:35.868]    - call: NULL
[17:00:35.869] plan(): nbrOfWorkers() = 1
[17:00:35.870] plan(): Setting new future strategy stack:
[17:00:35.870] List of future strategies:
[17:00:35.870] 1. sequential:
[17:00:35.870]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:35.870]    - tweaked: FALSE
[17:00:35.870]    - call: plan(strategy)
[17:00:35.870] plan(): nbrOfWorkers() = 1
[17:00:35.871] SequentialFuture started (and completed)
[17:00:35.871] - Launch lazy future ... done
[17:00:35.871] run() for ‘SequentialFuture’ ... done
[17:00:35.871] Created future:
[17:00:35.871] SequentialFuture:
[17:00:35.871] Label: ‘future_replicate-1’
[17:00:35.871] Expression:
[17:00:35.871] {
[17:00:35.871]     do.call(function(...) {
[17:00:35.871]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:35.871]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:35.871]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:35.871]             on.exit(options(oopts), add = TRUE)
[17:00:35.871]         }
[17:00:35.871]         {
[17:00:35.871]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:35.871]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:35.871]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:35.871]                   envir = globalenv(), inherits = FALSE)
[17:00:35.871]                 ...future.FUN(...future.X_jj, ...)
[17:00:35.871]             })
[17:00:35.871]         }
[17:00:35.871]     }, args = future.call.arguments)
[17:00:35.871] }
[17:00:35.871] Lazy evaluation: FALSE
[17:00:35.871] Asynchronous evaluation: FALSE
[17:00:35.871] Local evaluation: TRUE
[17:00:35.871] Environment: R_GlobalEnv
[17:00:35.871] Capture standard output: TRUE
[17:00:35.871] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:35.871] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:35.871] Packages: <none>
[17:00:35.871] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:35.871] Resolved: TRUE
[17:00:35.871] Value: 280 bytes of class ‘list’
[17:00:35.871] Early signaling: FALSE
[17:00:35.871] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:35.871] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:00:35.873] Chunk #1 of 1 ... DONE
[17:00:35.873] Launching 1 futures (chunks) ... DONE
[17:00:35.873] Resolving 1 futures (chunks) ...
[17:00:35.873] resolve() on list ...
[17:00:35.873]  recursive: 0
[17:00:35.873]  length: 1
[17:00:35.873] 
[17:00:35.874] resolved() for ‘SequentialFuture’ ...
[17:00:35.874] - state: ‘finished’
[17:00:35.874] - run: TRUE
[17:00:35.874] - result: ‘FutureResult’
[17:00:35.874] resolved() for ‘SequentialFuture’ ... done
[17:00:35.874] Future #1
[17:00:35.875] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:00:35.875] - nx: 1
[17:00:35.875] - relay: TRUE
[17:00:35.875] - stdout: TRUE
[17:00:35.875] - signal: TRUE
[17:00:35.875] - resignal: FALSE
[17:00:35.875] - force: TRUE
[17:00:35.875] - relayed: [n=1] FALSE
[17:00:35.875] - queued futures: [n=1] FALSE
[17:00:35.875]  - until=1
[17:00:35.875]  - relaying element #1
[17:00:35.876] - relayed: [n=1] TRUE
[17:00:35.876] - queued futures: [n=1] TRUE
[17:00:35.876] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:00:35.876]  length: 0 (resolved future 1)
[17:00:35.876] Relaying remaining futures
[17:00:35.876] signalConditionsASAP(NULL, pos=0) ...
[17:00:35.876] - nx: 1
[17:00:35.876] - relay: TRUE
[17:00:35.876] - stdout: TRUE
[17:00:35.877] - signal: TRUE
[17:00:35.877] - resignal: FALSE
[17:00:35.877] - force: TRUE
[17:00:35.877] - relayed: [n=1] TRUE
[17:00:35.877] - queued futures: [n=1] TRUE
 - flush all
[17:00:35.877] - relayed: [n=1] TRUE
[17:00:35.877] - queued futures: [n=1] TRUE
[17:00:35.877] signalConditionsASAP(NULL, pos=0) ... done
[17:00:35.877] resolve() on list ... DONE
[17:00:35.877]  - Number of value chunks collected: 1
[17:00:35.878] Resolving 1 futures (chunks) ... DONE
[17:00:35.878] Reducing values from 1 chunks ...
[17:00:35.878]  - Number of values collected after concatenation: 5
[17:00:35.878]  - Number of values expected: 5
[17:00:35.878] Reducing values from 1 chunks ... DONE
[17:00:35.878] future_lapply() ... DONE
[17:00:35.878] future_lapply() ...
[17:00:35.879] Generating random seeds ...
[17:00:35.879] Generating random seed streams for 5 elements ...
[17:00:35.879] Generating random seed streams for 5 elements ... DONE
[17:00:35.879] Generating random seeds ... DONE
[17:00:35.879] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:00:35.880] Number of chunks: 1
[17:00:35.880] getGlobalsAndPackagesXApply() ...
[17:00:35.880]  - future.globals: TRUE
[17:00:35.880] getGlobalsAndPackages() ...
[17:00:35.880] Searching for globals...
[17:00:35.881] - globals found: [2] ‘FUN’, ‘sample’
[17:00:35.881] Searching for globals ... DONE
[17:00:35.881] Resolving globals: FALSE
[17:00:35.882] The total size of the 1 globals is 616 bytes (616 bytes)
[17:00:35.882] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:00:35.882] - globals: [1] ‘FUN’
[17:00:35.882] 
[17:00:35.882] getGlobalsAndPackages() ... DONE
[17:00:35.882]  - globals found/used: [n=1] ‘FUN’
[17:00:35.882]  - needed namespaces: [n=0] 
[17:00:35.883] Finding globals ... DONE
[17:00:35.883]  - use_args: TRUE
[17:00:35.883]  - Getting '...' globals ...
[17:00:35.883] resolve() on list ...
[17:00:35.883]  recursive: 0
[17:00:35.883]  length: 1
[17:00:35.883]  elements: ‘...’
[17:00:35.883]  length: 0 (resolved future 1)
[17:00:35.884] resolve() on list ... DONE
[17:00:35.884]    - '...' content: [n=0] 
[17:00:35.884] List of 1
[17:00:35.884]  $ ...: list()
[17:00:35.884]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:35.884]  - attr(*, "where")=List of 1
[17:00:35.884]   ..$ ...:<environment: 0x5585631bfab8> 
[17:00:35.884]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:35.884]  - attr(*, "resolved")= logi TRUE
[17:00:35.884]  - attr(*, "total_size")= num NA
[17:00:35.888]  - Getting '...' globals ... DONE
[17:00:35.888] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:00:35.888] List of 2
[17:00:35.888]  $ ...future.FUN:function (...)  
[17:00:35.888]  $ ...          : list()
[17:00:35.888]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:35.888]  - attr(*, "where")=List of 2
[17:00:35.888]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:00:35.888]   ..$ ...          :<environment: 0x5585631bfab8> 
[17:00:35.888]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:35.888]  - attr(*, "resolved")= logi FALSE
[17:00:35.888]  - attr(*, "total_size")= num 616
[17:00:35.891] Packages to be attached in all futures: [n=0] 
[17:00:35.891] getGlobalsAndPackagesXApply() ... DONE
[17:00:35.891] Number of futures (= number of chunks): 1
[17:00:35.891] Launching 1 futures (chunks) ...
[17:00:35.891] Chunk #1 of 1 ...
[17:00:35.892]  - Finding globals in 'X' for chunk #1 ...
[17:00:35.892] getGlobalsAndPackages() ...
[17:00:35.892] Searching for globals...
[17:00:35.892] 
[17:00:35.892] Searching for globals ... DONE
[17:00:35.892] - globals: [0] <none>
[17:00:35.892] getGlobalsAndPackages() ... DONE
[17:00:35.892]    + additional globals found: [n=0] 
[17:00:35.893]    + additional namespaces needed: [n=0] 
[17:00:35.893]  - Finding globals in 'X' for chunk #1 ... DONE
[17:00:35.893]  - seeds: [5] <seeds>
[17:00:35.893]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:35.893] getGlobalsAndPackages() ...
[17:00:35.893] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:35.893] Resolving globals: FALSE
[17:00:35.893] Tweak future expression to call with '...' arguments ...
[17:00:35.893] {
[17:00:35.893]     do.call(function(...) {
[17:00:35.893]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:35.893]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:35.893]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:35.893]             on.exit(options(oopts), add = TRUE)
[17:00:35.893]         }
[17:00:35.893]         {
[17:00:35.893]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:35.893]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:35.893]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:35.893]                   envir = globalenv(), inherits = FALSE)
[17:00:35.893]                 ...future.FUN(...future.X_jj, ...)
[17:00:35.893]             })
[17:00:35.893]         }
[17:00:35.893]     }, args = future.call.arguments)
[17:00:35.893] }
[17:00:35.894] Tweak future expression to call with '...' arguments ... DONE
[17:00:35.894] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:35.894] 
[17:00:35.894] getGlobalsAndPackages() ... DONE
[17:00:35.894] run() for ‘Future’ ...
[17:00:35.895] - state: ‘created’
[17:00:35.895] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:00:35.895] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:00:35.895] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:00:35.895]   - Field: ‘label’
[17:00:35.895]   - Field: ‘local’
[17:00:35.895]   - Field: ‘owner’
[17:00:35.895]   - Field: ‘envir’
[17:00:35.896]   - Field: ‘packages’
[17:00:35.896]   - Field: ‘gc’
[17:00:35.896]   - Field: ‘conditions’
[17:00:35.896]   - Field: ‘expr’
[17:00:35.896]   - Field: ‘uuid’
[17:00:35.896]   - Field: ‘seed’
[17:00:35.896]   - Field: ‘version’
[17:00:35.896]   - Field: ‘result’
[17:00:35.896]   - Field: ‘asynchronous’
[17:00:35.896]   - Field: ‘calls’
[17:00:35.896]   - Field: ‘globals’
[17:00:35.897]   - Field: ‘stdout’
[17:00:35.897]   - Field: ‘earlySignal’
[17:00:35.897]   - Field: ‘lazy’
[17:00:35.897]   - Field: ‘state’
[17:00:35.897] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:00:35.897] - Launch lazy future ...
[17:00:35.897] Packages needed by the future expression (n = 0): <none>
[17:00:35.897] Packages needed by future strategies (n = 0): <none>
[17:00:35.898] {
[17:00:35.898]     {
[17:00:35.898]         {
[17:00:35.898]             ...future.startTime <- base::Sys.time()
[17:00:35.898]             {
[17:00:35.898]                 {
[17:00:35.898]                   {
[17:00:35.898]                     base::local({
[17:00:35.898]                       has_future <- base::requireNamespace("future", 
[17:00:35.898]                         quietly = TRUE)
[17:00:35.898]                       if (has_future) {
[17:00:35.898]                         ns <- base::getNamespace("future")
[17:00:35.898]                         version <- ns[[".package"]][["version"]]
[17:00:35.898]                         if (is.null(version)) 
[17:00:35.898]                           version <- utils::packageVersion("future")
[17:00:35.898]                       }
[17:00:35.898]                       else {
[17:00:35.898]                         version <- NULL
[17:00:35.898]                       }
[17:00:35.898]                       if (!has_future || version < "1.8.0") {
[17:00:35.898]                         info <- base::c(r_version = base::gsub("R version ", 
[17:00:35.898]                           "", base::R.version$version.string), 
[17:00:35.898]                           platform = base::sprintf("%s (%s-bit)", 
[17:00:35.898]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:35.898]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:35.898]                             "release", "version")], collapse = " "), 
[17:00:35.898]                           hostname = base::Sys.info()[["nodename"]])
[17:00:35.898]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:00:35.898]                           info)
[17:00:35.898]                         info <- base::paste(info, collapse = "; ")
[17:00:35.898]                         if (!has_future) {
[17:00:35.898]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:35.898]                             info)
[17:00:35.898]                         }
[17:00:35.898]                         else {
[17:00:35.898]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:35.898]                             info, version)
[17:00:35.898]                         }
[17:00:35.898]                         base::stop(msg)
[17:00:35.898]                       }
[17:00:35.898]                     })
[17:00:35.898]                   }
[17:00:35.898]                   ...future.strategy.old <- future::plan("list")
[17:00:35.898]                   options(future.plan = NULL)
[17:00:35.898]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:35.898]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:35.898]                 }
[17:00:35.898]                 ...future.workdir <- getwd()
[17:00:35.898]             }
[17:00:35.898]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:35.898]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:35.898]         }
[17:00:35.898]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:35.898]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:00:35.898]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:35.898]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:35.898]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:35.898]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:35.898]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:35.898]             base::names(...future.oldOptions))
[17:00:35.898]     }
[17:00:35.898]     if (FALSE) {
[17:00:35.898]     }
[17:00:35.898]     else {
[17:00:35.898]         if (TRUE) {
[17:00:35.898]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:35.898]                 open = "w")
[17:00:35.898]         }
[17:00:35.898]         else {
[17:00:35.898]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:35.898]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:35.898]         }
[17:00:35.898]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:35.898]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:35.898]             base::sink(type = "output", split = FALSE)
[17:00:35.898]             base::close(...future.stdout)
[17:00:35.898]         }, add = TRUE)
[17:00:35.898]     }
[17:00:35.898]     ...future.frame <- base::sys.nframe()
[17:00:35.898]     ...future.conditions <- base::list()
[17:00:35.898]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:35.898]     if (FALSE) {
[17:00:35.898]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:35.898]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:35.898]     }
[17:00:35.898]     ...future.result <- base::tryCatch({
[17:00:35.898]         base::withCallingHandlers({
[17:00:35.898]             ...future.value <- base::withVisible(base::local({
[17:00:35.898]                 do.call(function(...) {
[17:00:35.898]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:35.898]                   if (!identical(...future.globals.maxSize.org, 
[17:00:35.898]                     ...future.globals.maxSize)) {
[17:00:35.898]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:35.898]                     on.exit(options(oopts), add = TRUE)
[17:00:35.898]                   }
[17:00:35.898]                   {
[17:00:35.898]                     lapply(seq_along(...future.elements_ii), 
[17:00:35.898]                       FUN = function(jj) {
[17:00:35.898]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:35.898]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:35.898]                           envir = globalenv(), inherits = FALSE)
[17:00:35.898]                         ...future.FUN(...future.X_jj, ...)
[17:00:35.898]                       })
[17:00:35.898]                   }
[17:00:35.898]                 }, args = future.call.arguments)
[17:00:35.898]             }))
[17:00:35.898]             future::FutureResult(value = ...future.value$value, 
[17:00:35.898]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:35.898]                   ...future.rng), globalenv = if (FALSE) 
[17:00:35.898]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:35.898]                     ...future.globalenv.names))
[17:00:35.898]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:35.898]         }, condition = base::local({
[17:00:35.898]             c <- base::c
[17:00:35.898]             inherits <- base::inherits
[17:00:35.898]             invokeRestart <- base::invokeRestart
[17:00:35.898]             length <- base::length
[17:00:35.898]             list <- base::list
[17:00:35.898]             seq.int <- base::seq.int
[17:00:35.898]             signalCondition <- base::signalCondition
[17:00:35.898]             sys.calls <- base::sys.calls
[17:00:35.898]             `[[` <- base::`[[`
[17:00:35.898]             `+` <- base::`+`
[17:00:35.898]             `<<-` <- base::`<<-`
[17:00:35.898]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:35.898]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:35.898]                   3L)]
[17:00:35.898]             }
[17:00:35.898]             function(cond) {
[17:00:35.898]                 is_error <- inherits(cond, "error")
[17:00:35.898]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:35.898]                   NULL)
[17:00:35.898]                 if (is_error) {
[17:00:35.898]                   sessionInformation <- function() {
[17:00:35.898]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:35.898]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:35.898]                       search = base::search(), system = base::Sys.info())
[17:00:35.898]                   }
[17:00:35.898]                   ...future.conditions[[length(...future.conditions) + 
[17:00:35.898]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:35.898]                     cond$call), session = sessionInformation(), 
[17:00:35.898]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:35.898]                   signalCondition(cond)
[17:00:35.898]                 }
[17:00:35.898]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:35.898]                 "immediateCondition"))) {
[17:00:35.898]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:35.898]                   ...future.conditions[[length(...future.conditions) + 
[17:00:35.898]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:35.898]                   if (TRUE && !signal) {
[17:00:35.898]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:35.898]                     {
[17:00:35.898]                       inherits <- base::inherits
[17:00:35.898]                       invokeRestart <- base::invokeRestart
[17:00:35.898]                       is.null <- base::is.null
[17:00:35.898]                       muffled <- FALSE
[17:00:35.898]                       if (inherits(cond, "message")) {
[17:00:35.898]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:35.898]                         if (muffled) 
[17:00:35.898]                           invokeRestart("muffleMessage")
[17:00:35.898]                       }
[17:00:35.898]                       else if (inherits(cond, "warning")) {
[17:00:35.898]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:35.898]                         if (muffled) 
[17:00:35.898]                           invokeRestart("muffleWarning")
[17:00:35.898]                       }
[17:00:35.898]                       else if (inherits(cond, "condition")) {
[17:00:35.898]                         if (!is.null(pattern)) {
[17:00:35.898]                           computeRestarts <- base::computeRestarts
[17:00:35.898]                           grepl <- base::grepl
[17:00:35.898]                           restarts <- computeRestarts(cond)
[17:00:35.898]                           for (restart in restarts) {
[17:00:35.898]                             name <- restart$name
[17:00:35.898]                             if (is.null(name)) 
[17:00:35.898]                               next
[17:00:35.898]                             if (!grepl(pattern, name)) 
[17:00:35.898]                               next
[17:00:35.898]                             invokeRestart(restart)
[17:00:35.898]                             muffled <- TRUE
[17:00:35.898]                             break
[17:00:35.898]                           }
[17:00:35.898]                         }
[17:00:35.898]                       }
[17:00:35.898]                       invisible(muffled)
[17:00:35.898]                     }
[17:00:35.898]                     muffleCondition(cond, pattern = "^muffle")
[17:00:35.898]                   }
[17:00:35.898]                 }
[17:00:35.898]                 else {
[17:00:35.898]                   if (TRUE) {
[17:00:35.898]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:35.898]                     {
[17:00:35.898]                       inherits <- base::inherits
[17:00:35.898]                       invokeRestart <- base::invokeRestart
[17:00:35.898]                       is.null <- base::is.null
[17:00:35.898]                       muffled <- FALSE
[17:00:35.898]                       if (inherits(cond, "message")) {
[17:00:35.898]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:35.898]                         if (muffled) 
[17:00:35.898]                           invokeRestart("muffleMessage")
[17:00:35.898]                       }
[17:00:35.898]                       else if (inherits(cond, "warning")) {
[17:00:35.898]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:35.898]                         if (muffled) 
[17:00:35.898]                           invokeRestart("muffleWarning")
[17:00:35.898]                       }
[17:00:35.898]                       else if (inherits(cond, "condition")) {
[17:00:35.898]                         if (!is.null(pattern)) {
[17:00:35.898]                           computeRestarts <- base::computeRestarts
[17:00:35.898]                           grepl <- base::grepl
[17:00:35.898]                           restarts <- computeRestarts(cond)
[17:00:35.898]                           for (restart in restarts) {
[17:00:35.898]                             name <- restart$name
[17:00:35.898]                             if (is.null(name)) 
[17:00:35.898]                               next
[17:00:35.898]                             if (!grepl(pattern, name)) 
[17:00:35.898]                               next
[17:00:35.898]                             invokeRestart(restart)
[17:00:35.898]                             muffled <- TRUE
[17:00:35.898]                             break
[17:00:35.898]                           }
[17:00:35.898]                         }
[17:00:35.898]                       }
[17:00:35.898]                       invisible(muffled)
[17:00:35.898]                     }
[17:00:35.898]                     muffleCondition(cond, pattern = "^muffle")
[17:00:35.898]                   }
[17:00:35.898]                 }
[17:00:35.898]             }
[17:00:35.898]         }))
[17:00:35.898]     }, error = function(ex) {
[17:00:35.898]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:35.898]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:35.898]                 ...future.rng), started = ...future.startTime, 
[17:00:35.898]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:35.898]             version = "1.8"), class = "FutureResult")
[17:00:35.898]     }, finally = {
[17:00:35.898]         if (!identical(...future.workdir, getwd())) 
[17:00:35.898]             setwd(...future.workdir)
[17:00:35.898]         {
[17:00:35.898]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:35.898]                 ...future.oldOptions$nwarnings <- NULL
[17:00:35.898]             }
[17:00:35.898]             base::options(...future.oldOptions)
[17:00:35.898]             if (.Platform$OS.type == "windows") {
[17:00:35.898]                 old_names <- names(...future.oldEnvVars)
[17:00:35.898]                 envs <- base::Sys.getenv()
[17:00:35.898]                 names <- names(envs)
[17:00:35.898]                 common <- intersect(names, old_names)
[17:00:35.898]                 added <- setdiff(names, old_names)
[17:00:35.898]                 removed <- setdiff(old_names, names)
[17:00:35.898]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:35.898]                   envs[common]]
[17:00:35.898]                 NAMES <- toupper(changed)
[17:00:35.898]                 args <- list()
[17:00:35.898]                 for (kk in seq_along(NAMES)) {
[17:00:35.898]                   name <- changed[[kk]]
[17:00:35.898]                   NAME <- NAMES[[kk]]
[17:00:35.898]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:35.898]                     next
[17:00:35.898]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:35.898]                 }
[17:00:35.898]                 NAMES <- toupper(added)
[17:00:35.898]                 for (kk in seq_along(NAMES)) {
[17:00:35.898]                   name <- added[[kk]]
[17:00:35.898]                   NAME <- NAMES[[kk]]
[17:00:35.898]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:35.898]                     next
[17:00:35.898]                   args[[name]] <- ""
[17:00:35.898]                 }
[17:00:35.898]                 NAMES <- toupper(removed)
[17:00:35.898]                 for (kk in seq_along(NAMES)) {
[17:00:35.898]                   name <- removed[[kk]]
[17:00:35.898]                   NAME <- NAMES[[kk]]
[17:00:35.898]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:35.898]                     next
[17:00:35.898]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:35.898]                 }
[17:00:35.898]                 if (length(args) > 0) 
[17:00:35.898]                   base::do.call(base::Sys.setenv, args = args)
[17:00:35.898]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:35.898]             }
[17:00:35.898]             else {
[17:00:35.898]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:35.898]             }
[17:00:35.898]             {
[17:00:35.898]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:35.898]                   0L) {
[17:00:35.898]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:35.898]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:35.898]                   base::options(opts)
[17:00:35.898]                 }
[17:00:35.898]                 {
[17:00:35.898]                   {
[17:00:35.898]                     base::assign(".Random.seed", c(10403L, 2L, 
[17:00:35.898]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[17:00:35.898]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[17:00:35.898]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[17:00:35.898]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[17:00:35.898]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[17:00:35.898]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[17:00:35.898]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[17:00:35.898]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[17:00:35.898]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[17:00:35.898]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[17:00:35.898]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[17:00:35.898]                     -1512233174L, -1985955764L, -425390065L, 
[17:00:35.898]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[17:00:35.898]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[17:00:35.898]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[17:00:35.898]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[17:00:35.898]                     1818328109L, -1284085436L, -1981489558L, 
[17:00:35.898]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[17:00:35.898]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[17:00:35.898]                     -1718567047L, -793788661L, -1133789126L, 
[17:00:35.898]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[17:00:35.898]                     -1823521982L, -1345991523L, -1672661737L, 
[17:00:35.898]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[17:00:35.898]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[17:00:35.898]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[17:00:35.898]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[17:00:35.898]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[17:00:35.898]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[17:00:35.898]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[17:00:35.898]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[17:00:35.898]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[17:00:35.898]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[17:00:35.898]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[17:00:35.898]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[17:00:35.898]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[17:00:35.898]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[17:00:35.898]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[17:00:35.898]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[17:00:35.898]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[17:00:35.898]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[17:00:35.898]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[17:00:35.898]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[17:00:35.898]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[17:00:35.898]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[17:00:35.898]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[17:00:35.898]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[17:00:35.898]                     -1119334354L, -1521015416L, -2041922421L, 
[17:00:35.898]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[17:00:35.898]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[17:00:35.898]                     1232111981L, -1801753084L, -1608606422L, 
[17:00:35.898]                     -1172096363L, 1420874031L, -1210473418L, 
[17:00:35.898]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[17:00:35.898]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[17:00:35.898]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[17:00:35.898]                     679371266L, -591318819L, -104578089L, -172818754L, 
[17:00:35.898]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[17:00:35.898]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[17:00:35.898]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[17:00:35.898]                     -332493318L, -1978392251L, -1691039632L, 
[17:00:35.898]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[17:00:35.898]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[17:00:35.898]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[17:00:35.898]                     87560756L, -87565624L, 426345146L, -699970416L, 
[17:00:35.898]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[17:00:35.898]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[17:00:35.898]                     -1178330196L, -687617348L, -1701912078L, 
[17:00:35.898]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[17:00:35.898]                     -1345416048L, 1816730492L, -1570431212L, 
[17:00:35.898]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[17:00:35.898]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[17:00:35.898]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[17:00:35.898]                     -1493184262L, -1943836976L, -590788308L, 
[17:00:35.898]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[17:00:35.898]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[17:00:35.898]                     1274857340L, -1205842638L, -1938479504L, 
[17:00:35.898]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[17:00:35.898]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[17:00:35.898]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[17:00:35.898]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[17:00:35.898]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[17:00:35.898]                     -1460751252L, 1201879444L, -1459788718L, 
[17:00:35.898]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[17:00:35.898]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[17:00:35.898]                     -420945808L, -1997735900L, -1838404552L, 
[17:00:35.898]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[17:00:35.898]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[17:00:35.898]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[17:00:35.898]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[17:00:35.898]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[17:00:35.898]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[17:00:35.898]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[17:00:35.898]                     942193650L, 751741680L, 689743428L, -18455976L, 
[17:00:35.898]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[17:00:35.898]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[17:00:35.898]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[17:00:35.898]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[17:00:35.898]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[17:00:35.898]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[17:00:35.898]                     -1357570110L, 1896595240L, -2066952276L, 
[17:00:35.898]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[17:00:35.898]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[17:00:35.898]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[17:00:35.898]                     769655120L, 236357794L, 181393736L, -13334772L, 
[17:00:35.898]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[17:00:35.898]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[17:00:35.898]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[17:00:35.898]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[17:00:35.898]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[17:00:35.898]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[17:00:35.898]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[17:00:35.898]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[17:00:35.898]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[17:00:35.898]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[17:00:35.898]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[17:00:35.898]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[17:00:35.898]                     -1365842884L, -438961294L, -1851472272L, 
[17:00:35.898]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[17:00:35.898]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[17:00:35.898]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[17:00:35.898]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[17:00:35.898]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[17:00:35.898]                     -594809770L, -2146766621L, -2013964635L, 
[17:00:35.898]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[17:00:35.898]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[17:00:35.898]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[17:00:35.898]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[17:00:35.898]                     -1426021878L, -1285634264L, 1507547537L, 
[17:00:35.898]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[17:00:35.898]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[17:00:35.898]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[17:00:35.898]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[17:00:35.898]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[17:00:35.898]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[17:00:35.898]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[17:00:35.898]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[17:00:35.898]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[17:00:35.898]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[17:00:35.898]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[17:00:35.898]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[17:00:35.898]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[17:00:35.898]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[17:00:35.898]                     -1604604761L, 1421229008L, -1268333714L, 
[17:00:35.898]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[17:00:35.898]                     -2070476623L, -2099222749L, 1141171236L, 
[17:00:35.898]                     -146426158L, -1797385433L, -1129376399L, 
[17:00:35.898]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[17:00:35.898]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[17:00:35.898]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[17:00:35.898]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[17:00:35.898]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[17:00:35.898]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[17:00:35.898]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[17:00:35.898]                     -1092079724L, -1765622238L, -1882554057L, 
[17:00:35.898]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[17:00:35.898]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[17:00:35.898]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[17:00:35.898]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[17:00:35.898]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[17:00:35.898]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[17:00:35.898]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[17:00:35.898]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[17:00:35.898]                     865377681L, -1127426242L), envir = base::globalenv(), 
[17:00:35.898]                       inherits = FALSE)
[17:00:35.898]                     NULL
[17:00:35.898]                   }
[17:00:35.898]                   options(future.plan = NULL)
[17:00:35.898]                   if (is.na(NA_character_)) 
[17:00:35.898]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:35.898]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:35.898]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:35.898]                     .init = FALSE)
[17:00:35.898]                 }
[17:00:35.898]             }
[17:00:35.898]         }
[17:00:35.898]     })
[17:00:35.898]     if (TRUE) {
[17:00:35.898]         base::sink(type = "output", split = FALSE)
[17:00:35.898]         if (TRUE) {
[17:00:35.898]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:35.898]         }
[17:00:35.898]         else {
[17:00:35.898]             ...future.result["stdout"] <- base::list(NULL)
[17:00:35.898]         }
[17:00:35.898]         base::close(...future.stdout)
[17:00:35.898]         ...future.stdout <- NULL
[17:00:35.898]     }
[17:00:35.898]     ...future.result$conditions <- ...future.conditions
[17:00:35.898]     ...future.result$finished <- base::Sys.time()
[17:00:35.898]     ...future.result
[17:00:35.898] }
[17:00:35.900] assign_globals() ...
[17:00:35.900] List of 5
[17:00:35.900]  $ ...future.FUN            :function (...)  
[17:00:35.900]  $ future.call.arguments    : list()
[17:00:35.900]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:35.900]  $ ...future.elements_ii    :List of 5
[17:00:35.900]   ..$ : int 0
[17:00:35.900]   ..$ : int 0
[17:00:35.900]   ..$ : int 0
[17:00:35.900]   ..$ : int 0
[17:00:35.900]   ..$ : int 0
[17:00:35.900]  $ ...future.seeds_ii       :List of 5
[17:00:35.900]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[17:00:35.900]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[17:00:35.900]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[17:00:35.900]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[17:00:35.900]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[17:00:35.900]  $ ...future.globals.maxSize: NULL
[17:00:35.900]  - attr(*, "where")=List of 5
[17:00:35.900]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:00:35.900]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:00:35.900]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:00:35.900]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:00:35.900]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:00:35.900]  - attr(*, "resolved")= logi FALSE
[17:00:35.900]  - attr(*, "total_size")= num 616
[17:00:35.900]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:35.900]  - attr(*, "already-done")= logi TRUE
[17:00:35.907] - reassign environment for ‘...future.FUN’
[17:00:35.907] - copied ‘...future.FUN’ to environment
[17:00:35.908] - copied ‘future.call.arguments’ to environment
[17:00:35.908] - copied ‘...future.elements_ii’ to environment
[17:00:35.908] - copied ‘...future.seeds_ii’ to environment
[17:00:35.908] - copied ‘...future.globals.maxSize’ to environment
[17:00:35.908] assign_globals() ... done
[17:00:35.908] plan(): Setting new future strategy stack:
[17:00:35.908] List of future strategies:
[17:00:35.908] 1. sequential:
[17:00:35.908]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:35.908]    - tweaked: FALSE
[17:00:35.908]    - call: NULL
[17:00:35.909] plan(): nbrOfWorkers() = 1
[17:00:35.910] plan(): Setting new future strategy stack:
[17:00:35.910] List of future strategies:
[17:00:35.910] 1. sequential:
[17:00:35.910]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:35.910]    - tweaked: FALSE
[17:00:35.910]    - call: plan(strategy)
[17:00:35.910] plan(): nbrOfWorkers() = 1
[17:00:35.910] SequentialFuture started (and completed)
[17:00:35.910] - Launch lazy future ... done
[17:00:35.910] run() for ‘SequentialFuture’ ... done
[17:00:35.911] Created future:
[17:00:35.911] SequentialFuture:
[17:00:35.911] Label: ‘future_replicate-1’
[17:00:35.911] Expression:
[17:00:35.911] {
[17:00:35.911]     do.call(function(...) {
[17:00:35.911]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:35.911]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:35.911]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:35.911]             on.exit(options(oopts), add = TRUE)
[17:00:35.911]         }
[17:00:35.911]         {
[17:00:35.911]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:35.911]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:35.911]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:35.911]                   envir = globalenv(), inherits = FALSE)
[17:00:35.911]                 ...future.FUN(...future.X_jj, ...)
[17:00:35.911]             })
[17:00:35.911]         }
[17:00:35.911]     }, args = future.call.arguments)
[17:00:35.911] }
[17:00:35.911] Lazy evaluation: FALSE
[17:00:35.911] Asynchronous evaluation: FALSE
[17:00:35.911] Local evaluation: TRUE
[17:00:35.911] Environment: R_GlobalEnv
[17:00:35.911] Capture standard output: TRUE
[17:00:35.911] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:35.911] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:35.911] Packages: <none>
[17:00:35.911] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:35.911] Resolved: TRUE
[17:00:35.911] Value: 280 bytes of class ‘list’
[17:00:35.911] Early signaling: FALSE
[17:00:35.911] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:35.911] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:00:35.912] Chunk #1 of 1 ... DONE
[17:00:35.912] Launching 1 futures (chunks) ... DONE
[17:00:35.912] Resolving 1 futures (chunks) ...
[17:00:35.912] resolve() on list ...
[17:00:35.912]  recursive: 0
[17:00:35.912]  length: 1
[17:00:35.912] 
[17:00:35.912] resolved() for ‘SequentialFuture’ ...
[17:00:35.913] - state: ‘finished’
[17:00:35.913] - run: TRUE
[17:00:35.913] - result: ‘FutureResult’
[17:00:35.913] resolved() for ‘SequentialFuture’ ... done
[17:00:35.913] Future #1
[17:00:35.913] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:00:35.913] - nx: 1
[17:00:35.913] - relay: TRUE
[17:00:35.913] - stdout: TRUE
[17:00:35.913] - signal: TRUE
[17:00:35.913] - resignal: FALSE
[17:00:35.914] - force: TRUE
[17:00:35.914] - relayed: [n=1] FALSE
[17:00:35.914] - queued futures: [n=1] FALSE
[17:00:35.914]  - until=1
[17:00:35.916]  - relaying element #1
[17:00:35.916] - relayed: [n=1] TRUE
[17:00:35.916] - queued futures: [n=1] TRUE
[17:00:35.916] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:00:35.916]  length: 0 (resolved future 1)
[17:00:35.916] Relaying remaining futures
[17:00:35.916] signalConditionsASAP(NULL, pos=0) ...
[17:00:35.916] - nx: 1
[17:00:35.916] - relay: TRUE
[17:00:35.916] - stdout: TRUE
[17:00:35.917] - signal: TRUE
[17:00:35.917] - resignal: FALSE
[17:00:35.917] - force: TRUE
[17:00:35.917] - relayed: [n=1] TRUE
[17:00:35.917] - queued futures: [n=1] TRUE
 - flush all
[17:00:35.917] - relayed: [n=1] TRUE
[17:00:35.917] - queued futures: [n=1] TRUE
[17:00:35.917] signalConditionsASAP(NULL, pos=0) ... done
[17:00:35.917] resolve() on list ... DONE
[17:00:35.917]  - Number of value chunks collected: 1
[17:00:35.918] Resolving 1 futures (chunks) ... DONE
[17:00:35.918] Reducing values from 1 chunks ...
[17:00:35.918]  - Number of values collected after concatenation: 5
[17:00:35.918]  - Number of values expected: 5
[17:00:35.918] Reducing values from 1 chunks ... DONE
[17:00:35.918] future_lapply() ... DONE
[17:00:35.918] future_lapply() ...
[17:00:35.919] Generating random seeds ...
[17:00:35.919] Generating random seed streams for 5 elements ...
[17:00:35.919] Generating random seed streams for 5 elements ... DONE
[17:00:35.919] Generating random seeds ... DONE
[17:00:35.919] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:00:35.920] Number of chunks: 1
[17:00:35.920] getGlobalsAndPackagesXApply() ...
[17:00:35.920]  - future.globals: TRUE
[17:00:35.920] getGlobalsAndPackages() ...
[17:00:35.920] Searching for globals...
[17:00:35.921] - globals found: [2] ‘FUN’, ‘sample’
[17:00:35.921] Searching for globals ... DONE
[17:00:35.921] Resolving globals: FALSE
[17:00:35.922] The total size of the 1 globals is 616 bytes (616 bytes)
[17:00:35.922] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:00:35.922] - globals: [1] ‘FUN’
[17:00:35.922] 
[17:00:35.922] getGlobalsAndPackages() ... DONE
[17:00:35.922]  - globals found/used: [n=1] ‘FUN’
[17:00:35.922]  - needed namespaces: [n=0] 
[17:00:35.922] Finding globals ... DONE
[17:00:35.923]  - use_args: TRUE
[17:00:35.923]  - Getting '...' globals ...
[17:00:35.923] resolve() on list ...
[17:00:35.923]  recursive: 0
[17:00:35.923]  length: 1
[17:00:35.923]  elements: ‘...’
[17:00:35.923]  length: 0 (resolved future 1)
[17:00:35.924] resolve() on list ... DONE
[17:00:35.924]    - '...' content: [n=0] 
[17:00:35.924] List of 1
[17:00:35.924]  $ ...: list()
[17:00:35.924]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:35.924]  - attr(*, "where")=List of 1
[17:00:35.924]   ..$ ...:<environment: 0x558561852c48> 
[17:00:35.924]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:35.924]  - attr(*, "resolved")= logi TRUE
[17:00:35.924]  - attr(*, "total_size")= num NA
[17:00:35.926]  - Getting '...' globals ... DONE
[17:00:35.926] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:00:35.927] List of 2
[17:00:35.927]  $ ...future.FUN:function (...)  
[17:00:35.927]  $ ...          : list()
[17:00:35.927]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:35.927]  - attr(*, "where")=List of 2
[17:00:35.927]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:00:35.927]   ..$ ...          :<environment: 0x558561852c48> 
[17:00:35.927]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:35.927]  - attr(*, "resolved")= logi FALSE
[17:00:35.927]  - attr(*, "total_size")= num 616
[17:00:35.929] Packages to be attached in all futures: [n=0] 
[17:00:35.929] getGlobalsAndPackagesXApply() ... DONE
[17:00:35.929] Number of futures (= number of chunks): 1
[17:00:35.929] Launching 1 futures (chunks) ...
[17:00:35.930] Chunk #1 of 1 ...
[17:00:35.930]  - Finding globals in 'X' for chunk #1 ...
[17:00:35.930] getGlobalsAndPackages() ...
[17:00:35.930] Searching for globals...
[17:00:35.930] 
[17:00:35.930] Searching for globals ... DONE
[17:00:35.930] - globals: [0] <none>
[17:00:35.930] getGlobalsAndPackages() ... DONE
[17:00:35.930]    + additional globals found: [n=0] 
[17:00:35.931]    + additional namespaces needed: [n=0] 
[17:00:35.931]  - Finding globals in 'X' for chunk #1 ... DONE
[17:00:35.931]  - seeds: [5] <seeds>
[17:00:35.931]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:35.931] getGlobalsAndPackages() ...
[17:00:35.931] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:35.931] Resolving globals: FALSE
[17:00:35.931] Tweak future expression to call with '...' arguments ...
[17:00:35.931] {
[17:00:35.931]     do.call(function(...) {
[17:00:35.931]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:35.931]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:35.931]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:35.931]             on.exit(options(oopts), add = TRUE)
[17:00:35.931]         }
[17:00:35.931]         {
[17:00:35.931]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:35.931]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:35.931]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:35.931]                   envir = globalenv(), inherits = FALSE)
[17:00:35.931]                 ...future.FUN(...future.X_jj, ...)
[17:00:35.931]             })
[17:00:35.931]         }
[17:00:35.931]     }, args = future.call.arguments)
[17:00:35.931] }
[17:00:35.932] Tweak future expression to call with '...' arguments ... DONE
[17:00:35.932] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:35.932] 
[17:00:35.932] getGlobalsAndPackages() ... DONE
[17:00:35.933] run() for ‘Future’ ...
[17:00:35.933] - state: ‘created’
[17:00:35.933] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:00:35.933] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:00:35.933] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:00:35.933]   - Field: ‘label’
[17:00:35.933]   - Field: ‘local’
[17:00:35.933]   - Field: ‘owner’
[17:00:35.934]   - Field: ‘envir’
[17:00:35.934]   - Field: ‘packages’
[17:00:35.934]   - Field: ‘gc’
[17:00:35.934]   - Field: ‘conditions’
[17:00:35.934]   - Field: ‘expr’
[17:00:35.934]   - Field: ‘uuid’
[17:00:35.934]   - Field: ‘seed’
[17:00:35.934]   - Field: ‘version’
[17:00:35.934]   - Field: ‘result’
[17:00:35.934]   - Field: ‘asynchronous’
[17:00:35.934]   - Field: ‘calls’
[17:00:35.935]   - Field: ‘globals’
[17:00:35.935]   - Field: ‘stdout’
[17:00:35.935]   - Field: ‘earlySignal’
[17:00:35.935]   - Field: ‘lazy’
[17:00:35.935]   - Field: ‘state’
[17:00:35.935] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:00:35.935] - Launch lazy future ...
[17:00:35.935] Packages needed by the future expression (n = 0): <none>
[17:00:35.935] Packages needed by future strategies (n = 0): <none>
[17:00:35.936] {
[17:00:35.936]     {
[17:00:35.936]         {
[17:00:35.936]             ...future.startTime <- base::Sys.time()
[17:00:35.936]             {
[17:00:35.936]                 {
[17:00:35.936]                   {
[17:00:35.936]                     base::local({
[17:00:35.936]                       has_future <- base::requireNamespace("future", 
[17:00:35.936]                         quietly = TRUE)
[17:00:35.936]                       if (has_future) {
[17:00:35.936]                         ns <- base::getNamespace("future")
[17:00:35.936]                         version <- ns[[".package"]][["version"]]
[17:00:35.936]                         if (is.null(version)) 
[17:00:35.936]                           version <- utils::packageVersion("future")
[17:00:35.936]                       }
[17:00:35.936]                       else {
[17:00:35.936]                         version <- NULL
[17:00:35.936]                       }
[17:00:35.936]                       if (!has_future || version < "1.8.0") {
[17:00:35.936]                         info <- base::c(r_version = base::gsub("R version ", 
[17:00:35.936]                           "", base::R.version$version.string), 
[17:00:35.936]                           platform = base::sprintf("%s (%s-bit)", 
[17:00:35.936]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:35.936]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:35.936]                             "release", "version")], collapse = " "), 
[17:00:35.936]                           hostname = base::Sys.info()[["nodename"]])
[17:00:35.936]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:00:35.936]                           info)
[17:00:35.936]                         info <- base::paste(info, collapse = "; ")
[17:00:35.936]                         if (!has_future) {
[17:00:35.936]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:35.936]                             info)
[17:00:35.936]                         }
[17:00:35.936]                         else {
[17:00:35.936]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:35.936]                             info, version)
[17:00:35.936]                         }
[17:00:35.936]                         base::stop(msg)
[17:00:35.936]                       }
[17:00:35.936]                     })
[17:00:35.936]                   }
[17:00:35.936]                   ...future.strategy.old <- future::plan("list")
[17:00:35.936]                   options(future.plan = NULL)
[17:00:35.936]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:35.936]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:35.936]                 }
[17:00:35.936]                 ...future.workdir <- getwd()
[17:00:35.936]             }
[17:00:35.936]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:35.936]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:35.936]         }
[17:00:35.936]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:35.936]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:00:35.936]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:35.936]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:35.936]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:35.936]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:35.936]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:35.936]             base::names(...future.oldOptions))
[17:00:35.936]     }
[17:00:35.936]     if (FALSE) {
[17:00:35.936]     }
[17:00:35.936]     else {
[17:00:35.936]         if (TRUE) {
[17:00:35.936]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:35.936]                 open = "w")
[17:00:35.936]         }
[17:00:35.936]         else {
[17:00:35.936]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:35.936]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:35.936]         }
[17:00:35.936]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:35.936]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:35.936]             base::sink(type = "output", split = FALSE)
[17:00:35.936]             base::close(...future.stdout)
[17:00:35.936]         }, add = TRUE)
[17:00:35.936]     }
[17:00:35.936]     ...future.frame <- base::sys.nframe()
[17:00:35.936]     ...future.conditions <- base::list()
[17:00:35.936]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:35.936]     if (FALSE) {
[17:00:35.936]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:35.936]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:35.936]     }
[17:00:35.936]     ...future.result <- base::tryCatch({
[17:00:35.936]         base::withCallingHandlers({
[17:00:35.936]             ...future.value <- base::withVisible(base::local({
[17:00:35.936]                 do.call(function(...) {
[17:00:35.936]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:35.936]                   if (!identical(...future.globals.maxSize.org, 
[17:00:35.936]                     ...future.globals.maxSize)) {
[17:00:35.936]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:35.936]                     on.exit(options(oopts), add = TRUE)
[17:00:35.936]                   }
[17:00:35.936]                   {
[17:00:35.936]                     lapply(seq_along(...future.elements_ii), 
[17:00:35.936]                       FUN = function(jj) {
[17:00:35.936]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:35.936]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:35.936]                           envir = globalenv(), inherits = FALSE)
[17:00:35.936]                         ...future.FUN(...future.X_jj, ...)
[17:00:35.936]                       })
[17:00:35.936]                   }
[17:00:35.936]                 }, args = future.call.arguments)
[17:00:35.936]             }))
[17:00:35.936]             future::FutureResult(value = ...future.value$value, 
[17:00:35.936]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:35.936]                   ...future.rng), globalenv = if (FALSE) 
[17:00:35.936]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:35.936]                     ...future.globalenv.names))
[17:00:35.936]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:35.936]         }, condition = base::local({
[17:00:35.936]             c <- base::c
[17:00:35.936]             inherits <- base::inherits
[17:00:35.936]             invokeRestart <- base::invokeRestart
[17:00:35.936]             length <- base::length
[17:00:35.936]             list <- base::list
[17:00:35.936]             seq.int <- base::seq.int
[17:00:35.936]             signalCondition <- base::signalCondition
[17:00:35.936]             sys.calls <- base::sys.calls
[17:00:35.936]             `[[` <- base::`[[`
[17:00:35.936]             `+` <- base::`+`
[17:00:35.936]             `<<-` <- base::`<<-`
[17:00:35.936]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:35.936]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:35.936]                   3L)]
[17:00:35.936]             }
[17:00:35.936]             function(cond) {
[17:00:35.936]                 is_error <- inherits(cond, "error")
[17:00:35.936]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:35.936]                   NULL)
[17:00:35.936]                 if (is_error) {
[17:00:35.936]                   sessionInformation <- function() {
[17:00:35.936]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:35.936]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:35.936]                       search = base::search(), system = base::Sys.info())
[17:00:35.936]                   }
[17:00:35.936]                   ...future.conditions[[length(...future.conditions) + 
[17:00:35.936]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:35.936]                     cond$call), session = sessionInformation(), 
[17:00:35.936]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:35.936]                   signalCondition(cond)
[17:00:35.936]                 }
[17:00:35.936]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:35.936]                 "immediateCondition"))) {
[17:00:35.936]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:35.936]                   ...future.conditions[[length(...future.conditions) + 
[17:00:35.936]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:35.936]                   if (TRUE && !signal) {
[17:00:35.936]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:35.936]                     {
[17:00:35.936]                       inherits <- base::inherits
[17:00:35.936]                       invokeRestart <- base::invokeRestart
[17:00:35.936]                       is.null <- base::is.null
[17:00:35.936]                       muffled <- FALSE
[17:00:35.936]                       if (inherits(cond, "message")) {
[17:00:35.936]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:35.936]                         if (muffled) 
[17:00:35.936]                           invokeRestart("muffleMessage")
[17:00:35.936]                       }
[17:00:35.936]                       else if (inherits(cond, "warning")) {
[17:00:35.936]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:35.936]                         if (muffled) 
[17:00:35.936]                           invokeRestart("muffleWarning")
[17:00:35.936]                       }
[17:00:35.936]                       else if (inherits(cond, "condition")) {
[17:00:35.936]                         if (!is.null(pattern)) {
[17:00:35.936]                           computeRestarts <- base::computeRestarts
[17:00:35.936]                           grepl <- base::grepl
[17:00:35.936]                           restarts <- computeRestarts(cond)
[17:00:35.936]                           for (restart in restarts) {
[17:00:35.936]                             name <- restart$name
[17:00:35.936]                             if (is.null(name)) 
[17:00:35.936]                               next
[17:00:35.936]                             if (!grepl(pattern, name)) 
[17:00:35.936]                               next
[17:00:35.936]                             invokeRestart(restart)
[17:00:35.936]                             muffled <- TRUE
[17:00:35.936]                             break
[17:00:35.936]                           }
[17:00:35.936]                         }
[17:00:35.936]                       }
[17:00:35.936]                       invisible(muffled)
[17:00:35.936]                     }
[17:00:35.936]                     muffleCondition(cond, pattern = "^muffle")
[17:00:35.936]                   }
[17:00:35.936]                 }
[17:00:35.936]                 else {
[17:00:35.936]                   if (TRUE) {
[17:00:35.936]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:35.936]                     {
[17:00:35.936]                       inherits <- base::inherits
[17:00:35.936]                       invokeRestart <- base::invokeRestart
[17:00:35.936]                       is.null <- base::is.null
[17:00:35.936]                       muffled <- FALSE
[17:00:35.936]                       if (inherits(cond, "message")) {
[17:00:35.936]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:35.936]                         if (muffled) 
[17:00:35.936]                           invokeRestart("muffleMessage")
[17:00:35.936]                       }
[17:00:35.936]                       else if (inherits(cond, "warning")) {
[17:00:35.936]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:35.936]                         if (muffled) 
[17:00:35.936]                           invokeRestart("muffleWarning")
[17:00:35.936]                       }
[17:00:35.936]                       else if (inherits(cond, "condition")) {
[17:00:35.936]                         if (!is.null(pattern)) {
[17:00:35.936]                           computeRestarts <- base::computeRestarts
[17:00:35.936]                           grepl <- base::grepl
[17:00:35.936]                           restarts <- computeRestarts(cond)
[17:00:35.936]                           for (restart in restarts) {
[17:00:35.936]                             name <- restart$name
[17:00:35.936]                             if (is.null(name)) 
[17:00:35.936]                               next
[17:00:35.936]                             if (!grepl(pattern, name)) 
[17:00:35.936]                               next
[17:00:35.936]                             invokeRestart(restart)
[17:00:35.936]                             muffled <- TRUE
[17:00:35.936]                             break
[17:00:35.936]                           }
[17:00:35.936]                         }
[17:00:35.936]                       }
[17:00:35.936]                       invisible(muffled)
[17:00:35.936]                     }
[17:00:35.936]                     muffleCondition(cond, pattern = "^muffle")
[17:00:35.936]                   }
[17:00:35.936]                 }
[17:00:35.936]             }
[17:00:35.936]         }))
[17:00:35.936]     }, error = function(ex) {
[17:00:35.936]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:35.936]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:35.936]                 ...future.rng), started = ...future.startTime, 
[17:00:35.936]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:35.936]             version = "1.8"), class = "FutureResult")
[17:00:35.936]     }, finally = {
[17:00:35.936]         if (!identical(...future.workdir, getwd())) 
[17:00:35.936]             setwd(...future.workdir)
[17:00:35.936]         {
[17:00:35.936]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:35.936]                 ...future.oldOptions$nwarnings <- NULL
[17:00:35.936]             }
[17:00:35.936]             base::options(...future.oldOptions)
[17:00:35.936]             if (.Platform$OS.type == "windows") {
[17:00:35.936]                 old_names <- names(...future.oldEnvVars)
[17:00:35.936]                 envs <- base::Sys.getenv()
[17:00:35.936]                 names <- names(envs)
[17:00:35.936]                 common <- intersect(names, old_names)
[17:00:35.936]                 added <- setdiff(names, old_names)
[17:00:35.936]                 removed <- setdiff(old_names, names)
[17:00:35.936]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:35.936]                   envs[common]]
[17:00:35.936]                 NAMES <- toupper(changed)
[17:00:35.936]                 args <- list()
[17:00:35.936]                 for (kk in seq_along(NAMES)) {
[17:00:35.936]                   name <- changed[[kk]]
[17:00:35.936]                   NAME <- NAMES[[kk]]
[17:00:35.936]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:35.936]                     next
[17:00:35.936]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:35.936]                 }
[17:00:35.936]                 NAMES <- toupper(added)
[17:00:35.936]                 for (kk in seq_along(NAMES)) {
[17:00:35.936]                   name <- added[[kk]]
[17:00:35.936]                   NAME <- NAMES[[kk]]
[17:00:35.936]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:35.936]                     next
[17:00:35.936]                   args[[name]] <- ""
[17:00:35.936]                 }
[17:00:35.936]                 NAMES <- toupper(removed)
[17:00:35.936]                 for (kk in seq_along(NAMES)) {
[17:00:35.936]                   name <- removed[[kk]]
[17:00:35.936]                   NAME <- NAMES[[kk]]
[17:00:35.936]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:35.936]                     next
[17:00:35.936]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:35.936]                 }
[17:00:35.936]                 if (length(args) > 0) 
[17:00:35.936]                   base::do.call(base::Sys.setenv, args = args)
[17:00:35.936]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:35.936]             }
[17:00:35.936]             else {
[17:00:35.936]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:35.936]             }
[17:00:35.936]             {
[17:00:35.936]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:35.936]                   0L) {
[17:00:35.936]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:35.936]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:35.936]                   base::options(opts)
[17:00:35.936]                 }
[17:00:35.936]                 {
[17:00:35.936]                   {
[17:00:35.936]                     base::assign(".Random.seed", c(10403L, 2L, 
[17:00:35.936]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[17:00:35.936]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[17:00:35.936]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[17:00:35.936]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[17:00:35.936]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[17:00:35.936]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[17:00:35.936]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[17:00:35.936]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[17:00:35.936]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[17:00:35.936]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[17:00:35.936]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[17:00:35.936]                     -1512233174L, -1985955764L, -425390065L, 
[17:00:35.936]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[17:00:35.936]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[17:00:35.936]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[17:00:35.936]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[17:00:35.936]                     1818328109L, -1284085436L, -1981489558L, 
[17:00:35.936]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[17:00:35.936]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[17:00:35.936]                     -1718567047L, -793788661L, -1133789126L, 
[17:00:35.936]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[17:00:35.936]                     -1823521982L, -1345991523L, -1672661737L, 
[17:00:35.936]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[17:00:35.936]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[17:00:35.936]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[17:00:35.936]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[17:00:35.936]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[17:00:35.936]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[17:00:35.936]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[17:00:35.936]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[17:00:35.936]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[17:00:35.936]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[17:00:35.936]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[17:00:35.936]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[17:00:35.936]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[17:00:35.936]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[17:00:35.936]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[17:00:35.936]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[17:00:35.936]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[17:00:35.936]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[17:00:35.936]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[17:00:35.936]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[17:00:35.936]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[17:00:35.936]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[17:00:35.936]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[17:00:35.936]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[17:00:35.936]                     -1119334354L, -1521015416L, -2041922421L, 
[17:00:35.936]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[17:00:35.936]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[17:00:35.936]                     1232111981L, -1801753084L, -1608606422L, 
[17:00:35.936]                     -1172096363L, 1420874031L, -1210473418L, 
[17:00:35.936]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[17:00:35.936]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[17:00:35.936]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[17:00:35.936]                     679371266L, -591318819L, -104578089L, -172818754L, 
[17:00:35.936]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[17:00:35.936]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[17:00:35.936]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[17:00:35.936]                     -332493318L, -1978392251L, -1691039632L, 
[17:00:35.936]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[17:00:35.936]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[17:00:35.936]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[17:00:35.936]                     87560756L, -87565624L, 426345146L, -699970416L, 
[17:00:35.936]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[17:00:35.936]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[17:00:35.936]                     -1178330196L, -687617348L, -1701912078L, 
[17:00:35.936]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[17:00:35.936]                     -1345416048L, 1816730492L, -1570431212L, 
[17:00:35.936]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[17:00:35.936]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[17:00:35.936]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[17:00:35.936]                     -1493184262L, -1943836976L, -590788308L, 
[17:00:35.936]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[17:00:35.936]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[17:00:35.936]                     1274857340L, -1205842638L, -1938479504L, 
[17:00:35.936]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[17:00:35.936]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[17:00:35.936]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[17:00:35.936]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[17:00:35.936]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[17:00:35.936]                     -1460751252L, 1201879444L, -1459788718L, 
[17:00:35.936]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[17:00:35.936]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[17:00:35.936]                     -420945808L, -1997735900L, -1838404552L, 
[17:00:35.936]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[17:00:35.936]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[17:00:35.936]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[17:00:35.936]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[17:00:35.936]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[17:00:35.936]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[17:00:35.936]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[17:00:35.936]                     942193650L, 751741680L, 689743428L, -18455976L, 
[17:00:35.936]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[17:00:35.936]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[17:00:35.936]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[17:00:35.936]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[17:00:35.936]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[17:00:35.936]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[17:00:35.936]                     -1357570110L, 1896595240L, -2066952276L, 
[17:00:35.936]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[17:00:35.936]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[17:00:35.936]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[17:00:35.936]                     769655120L, 236357794L, 181393736L, -13334772L, 
[17:00:35.936]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[17:00:35.936]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[17:00:35.936]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[17:00:35.936]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[17:00:35.936]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[17:00:35.936]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[17:00:35.936]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[17:00:35.936]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[17:00:35.936]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[17:00:35.936]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[17:00:35.936]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[17:00:35.936]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[17:00:35.936]                     -1365842884L, -438961294L, -1851472272L, 
[17:00:35.936]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[17:00:35.936]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[17:00:35.936]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[17:00:35.936]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[17:00:35.936]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[17:00:35.936]                     -594809770L, -2146766621L, -2013964635L, 
[17:00:35.936]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[17:00:35.936]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[17:00:35.936]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[17:00:35.936]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[17:00:35.936]                     -1426021878L, -1285634264L, 1507547537L, 
[17:00:35.936]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[17:00:35.936]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[17:00:35.936]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[17:00:35.936]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[17:00:35.936]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[17:00:35.936]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[17:00:35.936]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[17:00:35.936]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[17:00:35.936]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[17:00:35.936]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[17:00:35.936]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[17:00:35.936]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[17:00:35.936]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[17:00:35.936]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[17:00:35.936]                     -1604604761L, 1421229008L, -1268333714L, 
[17:00:35.936]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[17:00:35.936]                     -2070476623L, -2099222749L, 1141171236L, 
[17:00:35.936]                     -146426158L, -1797385433L, -1129376399L, 
[17:00:35.936]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[17:00:35.936]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[17:00:35.936]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[17:00:35.936]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[17:00:35.936]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[17:00:35.936]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[17:00:35.936]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[17:00:35.936]                     -1092079724L, -1765622238L, -1882554057L, 
[17:00:35.936]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[17:00:35.936]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[17:00:35.936]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[17:00:35.936]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[17:00:35.936]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[17:00:35.936]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[17:00:35.936]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[17:00:35.936]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[17:00:35.936]                     865377681L, -1127426242L), envir = base::globalenv(), 
[17:00:35.936]                       inherits = FALSE)
[17:00:35.936]                     NULL
[17:00:35.936]                   }
[17:00:35.936]                   options(future.plan = NULL)
[17:00:35.936]                   if (is.na(NA_character_)) 
[17:00:35.936]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:35.936]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:35.936]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:35.936]                     .init = FALSE)
[17:00:35.936]                 }
[17:00:35.936]             }
[17:00:35.936]         }
[17:00:35.936]     })
[17:00:35.936]     if (TRUE) {
[17:00:35.936]         base::sink(type = "output", split = FALSE)
[17:00:35.936]         if (TRUE) {
[17:00:35.936]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:35.936]         }
[17:00:35.936]         else {
[17:00:35.936]             ...future.result["stdout"] <- base::list(NULL)
[17:00:35.936]         }
[17:00:35.936]         base::close(...future.stdout)
[17:00:35.936]         ...future.stdout <- NULL
[17:00:35.936]     }
[17:00:35.936]     ...future.result$conditions <- ...future.conditions
[17:00:35.936]     ...future.result$finished <- base::Sys.time()
[17:00:35.936]     ...future.result
[17:00:35.936] }
[17:00:35.938] assign_globals() ...
[17:00:35.939] List of 5
[17:00:35.939]  $ ...future.FUN            :function (...)  
[17:00:35.939]  $ future.call.arguments    : list()
[17:00:35.939]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:35.939]  $ ...future.elements_ii    :List of 5
[17:00:35.939]   ..$ : int 0
[17:00:35.939]   ..$ : int 0
[17:00:35.939]   ..$ : int 0
[17:00:35.939]   ..$ : int 0
[17:00:35.939]   ..$ : int 0
[17:00:35.939]  $ ...future.seeds_ii       :List of 5
[17:00:35.939]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[17:00:35.939]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[17:00:35.939]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[17:00:35.939]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[17:00:35.939]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[17:00:35.939]  $ ...future.globals.maxSize: NULL
[17:00:35.939]  - attr(*, "where")=List of 5
[17:00:35.939]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:00:35.939]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:00:35.939]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:00:35.939]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:00:35.939]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:00:35.939]  - attr(*, "resolved")= logi FALSE
[17:00:35.939]  - attr(*, "total_size")= num 616
[17:00:35.939]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:35.939]  - attr(*, "already-done")= logi TRUE
[17:00:35.947] - reassign environment for ‘...future.FUN’
[17:00:35.948] - copied ‘...future.FUN’ to environment
[17:00:35.948] - copied ‘future.call.arguments’ to environment
[17:00:35.948] - copied ‘...future.elements_ii’ to environment
[17:00:35.948] - copied ‘...future.seeds_ii’ to environment
[17:00:35.948] - copied ‘...future.globals.maxSize’ to environment
[17:00:35.948] assign_globals() ... done
[17:00:35.948] plan(): Setting new future strategy stack:
[17:00:35.948] List of future strategies:
[17:00:35.948] 1. sequential:
[17:00:35.948]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:35.948]    - tweaked: FALSE
[17:00:35.948]    - call: NULL
[17:00:35.949] plan(): nbrOfWorkers() = 1
[17:00:35.950] plan(): Setting new future strategy stack:
[17:00:35.950] List of future strategies:
[17:00:35.950] 1. sequential:
[17:00:35.950]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:35.950]    - tweaked: FALSE
[17:00:35.950]    - call: plan(strategy)
[17:00:35.950] plan(): nbrOfWorkers() = 1
[17:00:35.950] SequentialFuture started (and completed)
[17:00:35.950] - Launch lazy future ... done
[17:00:35.951] run() for ‘SequentialFuture’ ... done
[17:00:35.951] Created future:
[17:00:35.951] SequentialFuture:
[17:00:35.951] Label: ‘future_replicate-1’
[17:00:35.951] Expression:
[17:00:35.951] {
[17:00:35.951]     do.call(function(...) {
[17:00:35.951]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:35.951]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:35.951]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:35.951]             on.exit(options(oopts), add = TRUE)
[17:00:35.951]         }
[17:00:35.951]         {
[17:00:35.951]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:35.951]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:35.951]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:35.951]                   envir = globalenv(), inherits = FALSE)
[17:00:35.951]                 ...future.FUN(...future.X_jj, ...)
[17:00:35.951]             })
[17:00:35.951]         }
[17:00:35.951]     }, args = future.call.arguments)
[17:00:35.951] }
[17:00:35.951] Lazy evaluation: FALSE
[17:00:35.951] Asynchronous evaluation: FALSE
[17:00:35.951] Local evaluation: TRUE
[17:00:35.951] Environment: R_GlobalEnv
[17:00:35.951] Capture standard output: TRUE
[17:00:35.951] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:35.951] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:35.951] Packages: <none>
[17:00:35.951] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:35.951] Resolved: TRUE
[17:00:35.951] Value: 280 bytes of class ‘list’
[17:00:35.951] Early signaling: FALSE
[17:00:35.951] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:35.951] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:00:35.952] Chunk #1 of 1 ... DONE
[17:00:35.952] Launching 1 futures (chunks) ... DONE
[17:00:35.952] Resolving 1 futures (chunks) ...
[17:00:35.952] resolve() on list ...
[17:00:35.952]  recursive: 0
[17:00:35.952]  length: 1
[17:00:35.952] 
[17:00:35.953] resolved() for ‘SequentialFuture’ ...
[17:00:35.953] - state: ‘finished’
[17:00:35.953] - run: TRUE
[17:00:35.953] - result: ‘FutureResult’
[17:00:35.953] resolved() for ‘SequentialFuture’ ... done
[17:00:35.953] Future #1
[17:00:35.953] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:00:35.953] - nx: 1
[17:00:35.953] - relay: TRUE
[17:00:35.953] - stdout: TRUE
[17:00:35.953] - signal: TRUE
[17:00:35.954] - resignal: FALSE
[17:00:35.954] - force: TRUE
[17:00:35.954] - relayed: [n=1] FALSE
[17:00:35.954] - queued futures: [n=1] FALSE
[17:00:35.954]  - until=1
[17:00:35.954]  - relaying element #1
[17:00:35.954] - relayed: [n=1] TRUE
[17:00:35.954] - queued futures: [n=1] TRUE
[17:00:35.954] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:00:35.954]  length: 0 (resolved future 1)
[17:00:35.955] Relaying remaining futures
[17:00:35.955] signalConditionsASAP(NULL, pos=0) ...
[17:00:35.955] - nx: 1
[17:00:35.955] - relay: TRUE
[17:00:35.955] - stdout: TRUE
[17:00:35.955] - signal: TRUE
[17:00:35.955] - resignal: FALSE
[17:00:35.955] - force: TRUE
[17:00:35.955] - relayed: [n=1] TRUE
[17:00:35.955] - queued futures: [n=1] TRUE
 - flush all
[17:00:35.956] - relayed: [n=1] TRUE
[17:00:35.956] - queued futures: [n=1] TRUE
[17:00:35.956] signalConditionsASAP(NULL, pos=0) ... done
[17:00:35.956] resolve() on list ... DONE
[17:00:35.956]  - Number of value chunks collected: 1
[17:00:35.956] Resolving 1 futures (chunks) ... DONE
[17:00:35.956] Reducing values from 1 chunks ...
[17:00:35.956]  - Number of values collected after concatenation: 5
[17:00:35.956]  - Number of values expected: 5
[17:00:35.956] Reducing values from 1 chunks ... DONE
[17:00:35.956] future_lapply() ... DONE
[17:00:35.957] future_lapply() ...
[17:00:35.957] Generating random seeds ...
[17:00:35.958] Generating random seed streams for 5 elements ...
[17:00:35.958] Generating random seed streams for 5 elements ... DONE
[17:00:35.958] Generating random seeds ... DONE
[17:00:35.958] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:00:35.958] Number of chunks: 1
[17:00:35.958] getGlobalsAndPackagesXApply() ...
[17:00:35.959]  - future.globals: TRUE
[17:00:35.959] getGlobalsAndPackages() ...
[17:00:35.959] Searching for globals...
[17:00:35.960] - globals found: [2] ‘FUN’, ‘sample’
[17:00:35.960] Searching for globals ... DONE
[17:00:35.960] Resolving globals: FALSE
[17:00:35.960] The total size of the 1 globals is 616 bytes (616 bytes)
[17:00:35.961] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:00:35.961] - globals: [1] ‘FUN’
[17:00:35.961] 
[17:00:35.961] getGlobalsAndPackages() ... DONE
[17:00:35.961]  - globals found/used: [n=1] ‘FUN’
[17:00:35.961]  - needed namespaces: [n=0] 
[17:00:35.961] Finding globals ... DONE
[17:00:35.962]  - use_args: TRUE
[17:00:35.962]  - Getting '...' globals ...
[17:00:35.962] resolve() on list ...
[17:00:35.962]  recursive: 0
[17:00:35.962]  length: 1
[17:00:35.962]  elements: ‘...’
[17:00:35.962]  length: 0 (resolved future 1)
[17:00:35.962] resolve() on list ... DONE
[17:00:35.963]    - '...' content: [n=0] 
[17:00:35.963] List of 1
[17:00:35.963]  $ ...: list()
[17:00:35.963]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:35.963]  - attr(*, "where")=List of 1
[17:00:35.963]   ..$ ...:<environment: 0x558562e44560> 
[17:00:35.963]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:35.963]  - attr(*, "resolved")= logi TRUE
[17:00:35.963]  - attr(*, "total_size")= num NA
[17:00:35.966]  - Getting '...' globals ... DONE
[17:00:35.966] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:00:35.966] List of 2
[17:00:35.966]  $ ...future.FUN:function (...)  
[17:00:35.966]  $ ...          : list()
[17:00:35.966]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:35.966]  - attr(*, "where")=List of 2
[17:00:35.966]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:00:35.966]   ..$ ...          :<environment: 0x558562e44560> 
[17:00:35.966]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:35.966]  - attr(*, "resolved")= logi FALSE
[17:00:35.966]  - attr(*, "total_size")= num 616
[17:00:35.968] Packages to be attached in all futures: [n=0] 
[17:00:35.969] getGlobalsAndPackagesXApply() ... DONE
[17:00:35.969] Number of futures (= number of chunks): 1
[17:00:35.969] Launching 1 futures (chunks) ...
[17:00:35.969] Chunk #1 of 1 ...
[17:00:35.969]  - Finding globals in 'X' for chunk #1 ...
[17:00:35.971] getGlobalsAndPackages() ...
[17:00:35.971] Searching for globals...
[17:00:35.971] 
[17:00:35.971] Searching for globals ... DONE
[17:00:35.971] - globals: [0] <none>
[17:00:35.972] getGlobalsAndPackages() ... DONE
[17:00:35.972]    + additional globals found: [n=0] 
[17:00:35.972]    + additional namespaces needed: [n=0] 
[17:00:35.972]  - Finding globals in 'X' for chunk #1 ... DONE
[17:00:35.972]  - seeds: [5] <seeds>
[17:00:35.972]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:35.972] getGlobalsAndPackages() ...
[17:00:35.972] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:35.972] Resolving globals: FALSE
[17:00:35.972] Tweak future expression to call with '...' arguments ...
[17:00:35.973] {
[17:00:35.973]     do.call(function(...) {
[17:00:35.973]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:35.973]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:35.973]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:35.973]             on.exit(options(oopts), add = TRUE)
[17:00:35.973]         }
[17:00:35.973]         {
[17:00:35.973]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:35.973]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:35.973]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:35.973]                   envir = globalenv(), inherits = FALSE)
[17:00:35.973]                 ...future.FUN(...future.X_jj, ...)
[17:00:35.973]             })
[17:00:35.973]         }
[17:00:35.973]     }, args = future.call.arguments)
[17:00:35.973] }
[17:00:35.973] Tweak future expression to call with '...' arguments ... DONE
[17:00:35.973] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:35.973] 
[17:00:35.973] getGlobalsAndPackages() ... DONE
[17:00:35.974] run() for ‘Future’ ...
[17:00:35.974] - state: ‘created’
[17:00:35.974] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:00:35.974] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:00:35.974] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:00:35.974]   - Field: ‘label’
[17:00:35.975]   - Field: ‘local’
[17:00:35.975]   - Field: ‘owner’
[17:00:35.975]   - Field: ‘envir’
[17:00:35.975]   - Field: ‘packages’
[17:00:35.975]   - Field: ‘gc’
[17:00:35.975]   - Field: ‘conditions’
[17:00:35.975]   - Field: ‘expr’
[17:00:35.975]   - Field: ‘uuid’
[17:00:35.975]   - Field: ‘seed’
[17:00:35.975]   - Field: ‘version’
[17:00:35.976]   - Field: ‘result’
[17:00:35.976]   - Field: ‘asynchronous’
[17:00:35.976]   - Field: ‘calls’
[17:00:35.976]   - Field: ‘globals’
[17:00:35.976]   - Field: ‘stdout’
[17:00:35.976]   - Field: ‘earlySignal’
[17:00:35.976]   - Field: ‘lazy’
[17:00:35.976]   - Field: ‘state’
[17:00:35.976] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:00:35.976] - Launch lazy future ...
[17:00:35.977] Packages needed by the future expression (n = 0): <none>
[17:00:35.977] Packages needed by future strategies (n = 0): <none>
[17:00:35.977] {
[17:00:35.977]     {
[17:00:35.977]         {
[17:00:35.977]             ...future.startTime <- base::Sys.time()
[17:00:35.977]             {
[17:00:35.977]                 {
[17:00:35.977]                   {
[17:00:35.977]                     base::local({
[17:00:35.977]                       has_future <- base::requireNamespace("future", 
[17:00:35.977]                         quietly = TRUE)
[17:00:35.977]                       if (has_future) {
[17:00:35.977]                         ns <- base::getNamespace("future")
[17:00:35.977]                         version <- ns[[".package"]][["version"]]
[17:00:35.977]                         if (is.null(version)) 
[17:00:35.977]                           version <- utils::packageVersion("future")
[17:00:35.977]                       }
[17:00:35.977]                       else {
[17:00:35.977]                         version <- NULL
[17:00:35.977]                       }
[17:00:35.977]                       if (!has_future || version < "1.8.0") {
[17:00:35.977]                         info <- base::c(r_version = base::gsub("R version ", 
[17:00:35.977]                           "", base::R.version$version.string), 
[17:00:35.977]                           platform = base::sprintf("%s (%s-bit)", 
[17:00:35.977]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:35.977]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:35.977]                             "release", "version")], collapse = " "), 
[17:00:35.977]                           hostname = base::Sys.info()[["nodename"]])
[17:00:35.977]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:00:35.977]                           info)
[17:00:35.977]                         info <- base::paste(info, collapse = "; ")
[17:00:35.977]                         if (!has_future) {
[17:00:35.977]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:35.977]                             info)
[17:00:35.977]                         }
[17:00:35.977]                         else {
[17:00:35.977]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:35.977]                             info, version)
[17:00:35.977]                         }
[17:00:35.977]                         base::stop(msg)
[17:00:35.977]                       }
[17:00:35.977]                     })
[17:00:35.977]                   }
[17:00:35.977]                   ...future.strategy.old <- future::plan("list")
[17:00:35.977]                   options(future.plan = NULL)
[17:00:35.977]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:35.977]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:35.977]                 }
[17:00:35.977]                 ...future.workdir <- getwd()
[17:00:35.977]             }
[17:00:35.977]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:35.977]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:35.977]         }
[17:00:35.977]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:35.977]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:00:35.977]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:35.977]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:35.977]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:35.977]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:35.977]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:35.977]             base::names(...future.oldOptions))
[17:00:35.977]     }
[17:00:35.977]     if (FALSE) {
[17:00:35.977]     }
[17:00:35.977]     else {
[17:00:35.977]         if (TRUE) {
[17:00:35.977]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:35.977]                 open = "w")
[17:00:35.977]         }
[17:00:35.977]         else {
[17:00:35.977]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:35.977]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:35.977]         }
[17:00:35.977]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:35.977]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:35.977]             base::sink(type = "output", split = FALSE)
[17:00:35.977]             base::close(...future.stdout)
[17:00:35.977]         }, add = TRUE)
[17:00:35.977]     }
[17:00:35.977]     ...future.frame <- base::sys.nframe()
[17:00:35.977]     ...future.conditions <- base::list()
[17:00:35.977]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:35.977]     if (FALSE) {
[17:00:35.977]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:35.977]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:35.977]     }
[17:00:35.977]     ...future.result <- base::tryCatch({
[17:00:35.977]         base::withCallingHandlers({
[17:00:35.977]             ...future.value <- base::withVisible(base::local({
[17:00:35.977]                 do.call(function(...) {
[17:00:35.977]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:35.977]                   if (!identical(...future.globals.maxSize.org, 
[17:00:35.977]                     ...future.globals.maxSize)) {
[17:00:35.977]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:35.977]                     on.exit(options(oopts), add = TRUE)
[17:00:35.977]                   }
[17:00:35.977]                   {
[17:00:35.977]                     lapply(seq_along(...future.elements_ii), 
[17:00:35.977]                       FUN = function(jj) {
[17:00:35.977]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:35.977]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:35.977]                           envir = globalenv(), inherits = FALSE)
[17:00:35.977]                         ...future.FUN(...future.X_jj, ...)
[17:00:35.977]                       })
[17:00:35.977]                   }
[17:00:35.977]                 }, args = future.call.arguments)
[17:00:35.977]             }))
[17:00:35.977]             future::FutureResult(value = ...future.value$value, 
[17:00:35.977]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:35.977]                   ...future.rng), globalenv = if (FALSE) 
[17:00:35.977]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:35.977]                     ...future.globalenv.names))
[17:00:35.977]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:35.977]         }, condition = base::local({
[17:00:35.977]             c <- base::c
[17:00:35.977]             inherits <- base::inherits
[17:00:35.977]             invokeRestart <- base::invokeRestart
[17:00:35.977]             length <- base::length
[17:00:35.977]             list <- base::list
[17:00:35.977]             seq.int <- base::seq.int
[17:00:35.977]             signalCondition <- base::signalCondition
[17:00:35.977]             sys.calls <- base::sys.calls
[17:00:35.977]             `[[` <- base::`[[`
[17:00:35.977]             `+` <- base::`+`
[17:00:35.977]             `<<-` <- base::`<<-`
[17:00:35.977]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:35.977]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:35.977]                   3L)]
[17:00:35.977]             }
[17:00:35.977]             function(cond) {
[17:00:35.977]                 is_error <- inherits(cond, "error")
[17:00:35.977]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:35.977]                   NULL)
[17:00:35.977]                 if (is_error) {
[17:00:35.977]                   sessionInformation <- function() {
[17:00:35.977]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:35.977]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:35.977]                       search = base::search(), system = base::Sys.info())
[17:00:35.977]                   }
[17:00:35.977]                   ...future.conditions[[length(...future.conditions) + 
[17:00:35.977]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:35.977]                     cond$call), session = sessionInformation(), 
[17:00:35.977]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:35.977]                   signalCondition(cond)
[17:00:35.977]                 }
[17:00:35.977]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:35.977]                 "immediateCondition"))) {
[17:00:35.977]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:35.977]                   ...future.conditions[[length(...future.conditions) + 
[17:00:35.977]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:35.977]                   if (TRUE && !signal) {
[17:00:35.977]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:35.977]                     {
[17:00:35.977]                       inherits <- base::inherits
[17:00:35.977]                       invokeRestart <- base::invokeRestart
[17:00:35.977]                       is.null <- base::is.null
[17:00:35.977]                       muffled <- FALSE
[17:00:35.977]                       if (inherits(cond, "message")) {
[17:00:35.977]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:35.977]                         if (muffled) 
[17:00:35.977]                           invokeRestart("muffleMessage")
[17:00:35.977]                       }
[17:00:35.977]                       else if (inherits(cond, "warning")) {
[17:00:35.977]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:35.977]                         if (muffled) 
[17:00:35.977]                           invokeRestart("muffleWarning")
[17:00:35.977]                       }
[17:00:35.977]                       else if (inherits(cond, "condition")) {
[17:00:35.977]                         if (!is.null(pattern)) {
[17:00:35.977]                           computeRestarts <- base::computeRestarts
[17:00:35.977]                           grepl <- base::grepl
[17:00:35.977]                           restarts <- computeRestarts(cond)
[17:00:35.977]                           for (restart in restarts) {
[17:00:35.977]                             name <- restart$name
[17:00:35.977]                             if (is.null(name)) 
[17:00:35.977]                               next
[17:00:35.977]                             if (!grepl(pattern, name)) 
[17:00:35.977]                               next
[17:00:35.977]                             invokeRestart(restart)
[17:00:35.977]                             muffled <- TRUE
[17:00:35.977]                             break
[17:00:35.977]                           }
[17:00:35.977]                         }
[17:00:35.977]                       }
[17:00:35.977]                       invisible(muffled)
[17:00:35.977]                     }
[17:00:35.977]                     muffleCondition(cond, pattern = "^muffle")
[17:00:35.977]                   }
[17:00:35.977]                 }
[17:00:35.977]                 else {
[17:00:35.977]                   if (TRUE) {
[17:00:35.977]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:35.977]                     {
[17:00:35.977]                       inherits <- base::inherits
[17:00:35.977]                       invokeRestart <- base::invokeRestart
[17:00:35.977]                       is.null <- base::is.null
[17:00:35.977]                       muffled <- FALSE
[17:00:35.977]                       if (inherits(cond, "message")) {
[17:00:35.977]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:35.977]                         if (muffled) 
[17:00:35.977]                           invokeRestart("muffleMessage")
[17:00:35.977]                       }
[17:00:35.977]                       else if (inherits(cond, "warning")) {
[17:00:35.977]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:35.977]                         if (muffled) 
[17:00:35.977]                           invokeRestart("muffleWarning")
[17:00:35.977]                       }
[17:00:35.977]                       else if (inherits(cond, "condition")) {
[17:00:35.977]                         if (!is.null(pattern)) {
[17:00:35.977]                           computeRestarts <- base::computeRestarts
[17:00:35.977]                           grepl <- base::grepl
[17:00:35.977]                           restarts <- computeRestarts(cond)
[17:00:35.977]                           for (restart in restarts) {
[17:00:35.977]                             name <- restart$name
[17:00:35.977]                             if (is.null(name)) 
[17:00:35.977]                               next
[17:00:35.977]                             if (!grepl(pattern, name)) 
[17:00:35.977]                               next
[17:00:35.977]                             invokeRestart(restart)
[17:00:35.977]                             muffled <- TRUE
[17:00:35.977]                             break
[17:00:35.977]                           }
[17:00:35.977]                         }
[17:00:35.977]                       }
[17:00:35.977]                       invisible(muffled)
[17:00:35.977]                     }
[17:00:35.977]                     muffleCondition(cond, pattern = "^muffle")
[17:00:35.977]                   }
[17:00:35.977]                 }
[17:00:35.977]             }
[17:00:35.977]         }))
[17:00:35.977]     }, error = function(ex) {
[17:00:35.977]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:35.977]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:35.977]                 ...future.rng), started = ...future.startTime, 
[17:00:35.977]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:35.977]             version = "1.8"), class = "FutureResult")
[17:00:35.977]     }, finally = {
[17:00:35.977]         if (!identical(...future.workdir, getwd())) 
[17:00:35.977]             setwd(...future.workdir)
[17:00:35.977]         {
[17:00:35.977]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:35.977]                 ...future.oldOptions$nwarnings <- NULL
[17:00:35.977]             }
[17:00:35.977]             base::options(...future.oldOptions)
[17:00:35.977]             if (.Platform$OS.type == "windows") {
[17:00:35.977]                 old_names <- names(...future.oldEnvVars)
[17:00:35.977]                 envs <- base::Sys.getenv()
[17:00:35.977]                 names <- names(envs)
[17:00:35.977]                 common <- intersect(names, old_names)
[17:00:35.977]                 added <- setdiff(names, old_names)
[17:00:35.977]                 removed <- setdiff(old_names, names)
[17:00:35.977]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:35.977]                   envs[common]]
[17:00:35.977]                 NAMES <- toupper(changed)
[17:00:35.977]                 args <- list()
[17:00:35.977]                 for (kk in seq_along(NAMES)) {
[17:00:35.977]                   name <- changed[[kk]]
[17:00:35.977]                   NAME <- NAMES[[kk]]
[17:00:35.977]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:35.977]                     next
[17:00:35.977]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:35.977]                 }
[17:00:35.977]                 NAMES <- toupper(added)
[17:00:35.977]                 for (kk in seq_along(NAMES)) {
[17:00:35.977]                   name <- added[[kk]]
[17:00:35.977]                   NAME <- NAMES[[kk]]
[17:00:35.977]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:35.977]                     next
[17:00:35.977]                   args[[name]] <- ""
[17:00:35.977]                 }
[17:00:35.977]                 NAMES <- toupper(removed)
[17:00:35.977]                 for (kk in seq_along(NAMES)) {
[17:00:35.977]                   name <- removed[[kk]]
[17:00:35.977]                   NAME <- NAMES[[kk]]
[17:00:35.977]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:35.977]                     next
[17:00:35.977]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:35.977]                 }
[17:00:35.977]                 if (length(args) > 0) 
[17:00:35.977]                   base::do.call(base::Sys.setenv, args = args)
[17:00:35.977]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:35.977]             }
[17:00:35.977]             else {
[17:00:35.977]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:35.977]             }
[17:00:35.977]             {
[17:00:35.977]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:35.977]                   0L) {
[17:00:35.977]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:35.977]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:35.977]                   base::options(opts)
[17:00:35.977]                 }
[17:00:35.977]                 {
[17:00:35.977]                   {
[17:00:35.977]                     base::assign(".Random.seed", c(10403L, 4L, 
[17:00:35.977]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[17:00:35.977]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[17:00:35.977]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[17:00:35.977]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[17:00:35.977]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[17:00:35.977]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[17:00:35.977]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[17:00:35.977]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[17:00:35.977]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[17:00:35.977]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[17:00:35.977]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[17:00:35.977]                     -1512233174L, -1985955764L, -425390065L, 
[17:00:35.977]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[17:00:35.977]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[17:00:35.977]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[17:00:35.977]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[17:00:35.977]                     1818328109L, -1284085436L, -1981489558L, 
[17:00:35.977]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[17:00:35.977]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[17:00:35.977]                     -1718567047L, -793788661L, -1133789126L, 
[17:00:35.977]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[17:00:35.977]                     -1823521982L, -1345991523L, -1672661737L, 
[17:00:35.977]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[17:00:35.977]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[17:00:35.977]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[17:00:35.977]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[17:00:35.977]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[17:00:35.977]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[17:00:35.977]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[17:00:35.977]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[17:00:35.977]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[17:00:35.977]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[17:00:35.977]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[17:00:35.977]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[17:00:35.977]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[17:00:35.977]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[17:00:35.977]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[17:00:35.977]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[17:00:35.977]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[17:00:35.977]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[17:00:35.977]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[17:00:35.977]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[17:00:35.977]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[17:00:35.977]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[17:00:35.977]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[17:00:35.977]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[17:00:35.977]                     -1119334354L, -1521015416L, -2041922421L, 
[17:00:35.977]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[17:00:35.977]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[17:00:35.977]                     1232111981L, -1801753084L, -1608606422L, 
[17:00:35.977]                     -1172096363L, 1420874031L, -1210473418L, 
[17:00:35.977]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[17:00:35.977]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[17:00:35.977]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[17:00:35.977]                     679371266L, -591318819L, -104578089L, -172818754L, 
[17:00:35.977]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[17:00:35.977]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[17:00:35.977]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[17:00:35.977]                     -332493318L, -1978392251L, -1691039632L, 
[17:00:35.977]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[17:00:35.977]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[17:00:35.977]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[17:00:35.977]                     87560756L, -87565624L, 426345146L, -699970416L, 
[17:00:35.977]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[17:00:35.977]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[17:00:35.977]                     -1178330196L, -687617348L, -1701912078L, 
[17:00:35.977]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[17:00:35.977]                     -1345416048L, 1816730492L, -1570431212L, 
[17:00:35.977]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[17:00:35.977]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[17:00:35.977]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[17:00:35.977]                     -1493184262L, -1943836976L, -590788308L, 
[17:00:35.977]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[17:00:35.977]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[17:00:35.977]                     1274857340L, -1205842638L, -1938479504L, 
[17:00:35.977]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[17:00:35.977]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[17:00:35.977]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[17:00:35.977]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[17:00:35.977]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[17:00:35.977]                     -1460751252L, 1201879444L, -1459788718L, 
[17:00:35.977]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[17:00:35.977]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[17:00:35.977]                     -420945808L, -1997735900L, -1838404552L, 
[17:00:35.977]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[17:00:35.977]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[17:00:35.977]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[17:00:35.977]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[17:00:35.977]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[17:00:35.977]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[17:00:35.977]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[17:00:35.977]                     942193650L, 751741680L, 689743428L, -18455976L, 
[17:00:35.977]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[17:00:35.977]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[17:00:35.977]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[17:00:35.977]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[17:00:35.977]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[17:00:35.977]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[17:00:35.977]                     -1357570110L, 1896595240L, -2066952276L, 
[17:00:35.977]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[17:00:35.977]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[17:00:35.977]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[17:00:35.977]                     769655120L, 236357794L, 181393736L, -13334772L, 
[17:00:35.977]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[17:00:35.977]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[17:00:35.977]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[17:00:35.977]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[17:00:35.977]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[17:00:35.977]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[17:00:35.977]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[17:00:35.977]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[17:00:35.977]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[17:00:35.977]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[17:00:35.977]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[17:00:35.977]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[17:00:35.977]                     -1365842884L, -438961294L, -1851472272L, 
[17:00:35.977]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[17:00:35.977]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[17:00:35.977]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[17:00:35.977]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[17:00:35.977]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[17:00:35.977]                     -594809770L, -2146766621L, -2013964635L, 
[17:00:35.977]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[17:00:35.977]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[17:00:35.977]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[17:00:35.977]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[17:00:35.977]                     -1426021878L, -1285634264L, 1507547537L, 
[17:00:35.977]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[17:00:35.977]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[17:00:35.977]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[17:00:35.977]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[17:00:35.977]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[17:00:35.977]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[17:00:35.977]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[17:00:35.977]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[17:00:35.977]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[17:00:35.977]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[17:00:35.977]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[17:00:35.977]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[17:00:35.977]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[17:00:35.977]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[17:00:35.977]                     -1604604761L, 1421229008L, -1268333714L, 
[17:00:35.977]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[17:00:35.977]                     -2070476623L, -2099222749L, 1141171236L, 
[17:00:35.977]                     -146426158L, -1797385433L, -1129376399L, 
[17:00:35.977]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[17:00:35.977]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[17:00:35.977]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[17:00:35.977]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[17:00:35.977]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[17:00:35.977]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[17:00:35.977]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[17:00:35.977]                     -1092079724L, -1765622238L, -1882554057L, 
[17:00:35.977]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[17:00:35.977]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[17:00:35.977]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[17:00:35.977]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[17:00:35.977]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[17:00:35.977]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[17:00:35.977]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[17:00:35.977]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[17:00:35.977]                     865377681L, -1127426242L), envir = base::globalenv(), 
[17:00:35.977]                       inherits = FALSE)
[17:00:35.977]                     NULL
[17:00:35.977]                   }
[17:00:35.977]                   options(future.plan = NULL)
[17:00:35.977]                   if (is.na(NA_character_)) 
[17:00:35.977]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:35.977]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:35.977]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:35.977]                     .init = FALSE)
[17:00:35.977]                 }
[17:00:35.977]             }
[17:00:35.977]         }
[17:00:35.977]     })
[17:00:35.977]     if (TRUE) {
[17:00:35.977]         base::sink(type = "output", split = FALSE)
[17:00:35.977]         if (TRUE) {
[17:00:35.977]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:35.977]         }
[17:00:35.977]         else {
[17:00:35.977]             ...future.result["stdout"] <- base::list(NULL)
[17:00:35.977]         }
[17:00:35.977]         base::close(...future.stdout)
[17:00:35.977]         ...future.stdout <- NULL
[17:00:35.977]     }
[17:00:35.977]     ...future.result$conditions <- ...future.conditions
[17:00:35.977]     ...future.result$finished <- base::Sys.time()
[17:00:35.977]     ...future.result
[17:00:35.977] }
[17:00:35.980] assign_globals() ...
[17:00:35.980] List of 5
[17:00:35.980]  $ ...future.FUN            :function (...)  
[17:00:35.980]  $ future.call.arguments    : list()
[17:00:35.980]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:35.980]  $ ...future.elements_ii    :List of 5
[17:00:35.980]   ..$ : int 0
[17:00:35.980]   ..$ : int 0
[17:00:35.980]   ..$ : int 0
[17:00:35.980]   ..$ : int 0
[17:00:35.980]   ..$ : int 0
[17:00:35.980]  $ ...future.seeds_ii       :List of 5
[17:00:35.980]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[17:00:35.980]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[17:00:35.980]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[17:00:35.980]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[17:00:35.980]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[17:00:35.980]  $ ...future.globals.maxSize: NULL
[17:00:35.980]  - attr(*, "where")=List of 5
[17:00:35.980]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:00:35.980]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:00:35.980]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:00:35.980]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:00:35.980]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:00:35.980]  - attr(*, "resolved")= logi FALSE
[17:00:35.980]  - attr(*, "total_size")= num 616
[17:00:35.980]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:35.980]  - attr(*, "already-done")= logi TRUE
[17:00:35.987] - reassign environment for ‘...future.FUN’
[17:00:35.987] - copied ‘...future.FUN’ to environment
[17:00:35.987] - copied ‘future.call.arguments’ to environment
[17:00:35.987] - copied ‘...future.elements_ii’ to environment
[17:00:35.987] - copied ‘...future.seeds_ii’ to environment
[17:00:35.988] - copied ‘...future.globals.maxSize’ to environment
[17:00:35.988] assign_globals() ... done
[17:00:35.988] plan(): Setting new future strategy stack:
[17:00:35.988] List of future strategies:
[17:00:35.988] 1. sequential:
[17:00:35.988]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:35.988]    - tweaked: FALSE
[17:00:35.988]    - call: NULL
[17:00:35.988] plan(): nbrOfWorkers() = 1
[17:00:35.989] plan(): Setting new future strategy stack:
[17:00:35.989] List of future strategies:
[17:00:35.989] 1. sequential:
[17:00:35.989]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:35.989]    - tweaked: FALSE
[17:00:35.989]    - call: plan(strategy)
[17:00:35.990] plan(): nbrOfWorkers() = 1
[17:00:35.990] SequentialFuture started (and completed)
[17:00:35.990] - Launch lazy future ... done
[17:00:35.990] run() for ‘SequentialFuture’ ... done
[17:00:35.990] Created future:
[17:00:35.990] SequentialFuture:
[17:00:35.990] Label: ‘future_replicate-1’
[17:00:35.990] Expression:
[17:00:35.990] {
[17:00:35.990]     do.call(function(...) {
[17:00:35.990]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:35.990]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:35.990]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:35.990]             on.exit(options(oopts), add = TRUE)
[17:00:35.990]         }
[17:00:35.990]         {
[17:00:35.990]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:35.990]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:35.990]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:35.990]                   envir = globalenv(), inherits = FALSE)
[17:00:35.990]                 ...future.FUN(...future.X_jj, ...)
[17:00:35.990]             })
[17:00:35.990]         }
[17:00:35.990]     }, args = future.call.arguments)
[17:00:35.990] }
[17:00:35.990] Lazy evaluation: FALSE
[17:00:35.990] Asynchronous evaluation: FALSE
[17:00:35.990] Local evaluation: TRUE
[17:00:35.990] Environment: R_GlobalEnv
[17:00:35.990] Capture standard output: TRUE
[17:00:35.990] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:35.990] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:35.990] Packages: <none>
[17:00:35.990] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:35.990] Resolved: TRUE
[17:00:35.990] Value: 280 bytes of class ‘list’
[17:00:35.990] Early signaling: FALSE
[17:00:35.990] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:35.990] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:00:35.992] Chunk #1 of 1 ... DONE
[17:00:35.992] Launching 1 futures (chunks) ... DONE
[17:00:35.992] Resolving 1 futures (chunks) ...
[17:00:35.992] resolve() on list ...
[17:00:35.992]  recursive: 0
[17:00:35.992]  length: 1
[17:00:35.992] 
[17:00:35.992] resolved() for ‘SequentialFuture’ ...
[17:00:35.992] - state: ‘finished’
[17:00:35.992] - run: TRUE
[17:00:35.993] - result: ‘FutureResult’
[17:00:35.993] resolved() for ‘SequentialFuture’ ... done
[17:00:35.993] Future #1
[17:00:35.993] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:00:35.993] - nx: 1
[17:00:35.993] - relay: TRUE
[17:00:35.993] - stdout: TRUE
[17:00:35.993] - signal: TRUE
[17:00:35.993] - resignal: FALSE
[17:00:35.993] - force: TRUE
[17:00:35.993] - relayed: [n=1] FALSE
[17:00:35.994] - queued futures: [n=1] FALSE
[17:00:35.994]  - until=1
[17:00:35.994]  - relaying element #1
[17:00:35.994] - relayed: [n=1] TRUE
[17:00:35.994] - queued futures: [n=1] TRUE
[17:00:35.994] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:00:35.994]  length: 0 (resolved future 1)
[17:00:35.994] Relaying remaining futures
[17:00:35.994] signalConditionsASAP(NULL, pos=0) ...
[17:00:35.994] - nx: 1
[17:00:35.995] - relay: TRUE
[17:00:35.995] - stdout: TRUE
[17:00:35.995] - signal: TRUE
[17:00:35.995] - resignal: FALSE
[17:00:35.995] - force: TRUE
[17:00:35.995] - relayed: [n=1] TRUE
[17:00:35.995] - queued futures: [n=1] TRUE
 - flush all
[17:00:35.995] - relayed: [n=1] TRUE
[17:00:35.995] - queued futures: [n=1] TRUE
[17:00:35.995] signalConditionsASAP(NULL, pos=0) ... done
[17:00:35.995] resolve() on list ... DONE
[17:00:35.996]  - Number of value chunks collected: 1
[17:00:35.996] Resolving 1 futures (chunks) ... DONE
[17:00:35.996] Reducing values from 1 chunks ...
[17:00:35.996]  - Number of values collected after concatenation: 5
[17:00:35.996]  - Number of values expected: 5
[17:00:35.996] Reducing values from 1 chunks ... DONE
[17:00:35.996] future_lapply() ... DONE
[17:00:35.996] future_lapply() ...
[17:00:35.997] Generating random seeds ...
[17:00:35.997] Generating random seed streams for 5 elements ...
[17:00:35.997] Generating random seed streams for 5 elements ... DONE
[17:00:35.997] Generating random seeds ... DONE
[17:00:35.999] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:00:35.999] Number of chunks: 1
[17:00:36.000] getGlobalsAndPackagesXApply() ...
[17:00:36.000]  - future.globals: TRUE
[17:00:36.000] getGlobalsAndPackages() ...
[17:00:36.000] Searching for globals...
[17:00:36.001] - globals found: [2] ‘FUN’, ‘sample’
[17:00:36.001] Searching for globals ... DONE
[17:00:36.001] Resolving globals: FALSE
[17:00:36.001] The total size of the 1 globals is 616 bytes (616 bytes)
[17:00:36.002] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:00:36.002] - globals: [1] ‘FUN’
[17:00:36.002] 
[17:00:36.002] getGlobalsAndPackages() ... DONE
[17:00:36.002]  - globals found/used: [n=1] ‘FUN’
[17:00:36.002]  - needed namespaces: [n=0] 
[17:00:36.002] Finding globals ... DONE
[17:00:36.002]  - use_args: TRUE
[17:00:36.003]  - Getting '...' globals ...
[17:00:36.003] resolve() on list ...
[17:00:36.003]  recursive: 0
[17:00:36.003]  length: 1
[17:00:36.003]  elements: ‘...’
[17:00:36.003]  length: 0 (resolved future 1)
[17:00:36.003] resolve() on list ... DONE
[17:00:36.004]    - '...' content: [n=0] 
[17:00:36.004] List of 1
[17:00:36.004]  $ ...: list()
[17:00:36.004]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.004]  - attr(*, "where")=List of 1
[17:00:36.004]   ..$ ...:<environment: 0x5585637e6f18> 
[17:00:36.004]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.004]  - attr(*, "resolved")= logi TRUE
[17:00:36.004]  - attr(*, "total_size")= num NA
[17:00:36.006]  - Getting '...' globals ... DONE
[17:00:36.006] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:00:36.006] List of 2
[17:00:36.006]  $ ...future.FUN:function (...)  
[17:00:36.006]  $ ...          : list()
[17:00:36.006]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.006]  - attr(*, "where")=List of 2
[17:00:36.006]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:00:36.006]   ..$ ...          :<environment: 0x5585637e6f18> 
[17:00:36.006]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.006]  - attr(*, "resolved")= logi FALSE
[17:00:36.006]  - attr(*, "total_size")= num 616
[17:00:36.009] Packages to be attached in all futures: [n=0] 
[17:00:36.009] getGlobalsAndPackagesXApply() ... DONE
[17:00:36.009] Number of futures (= number of chunks): 1
[17:00:36.009] Launching 1 futures (chunks) ...
[17:00:36.010] Chunk #1 of 1 ...
[17:00:36.010]  - Finding globals in 'X' for chunk #1 ...
[17:00:36.010] getGlobalsAndPackages() ...
[17:00:36.010] Searching for globals...
[17:00:36.010] 
[17:00:36.010] Searching for globals ... DONE
[17:00:36.010] - globals: [0] <none>
[17:00:36.010] getGlobalsAndPackages() ... DONE
[17:00:36.010]    + additional globals found: [n=0] 
[17:00:36.011]    + additional namespaces needed: [n=0] 
[17:00:36.011]  - Finding globals in 'X' for chunk #1 ... DONE
[17:00:36.011]  - seeds: [5] <seeds>
[17:00:36.011]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.011] getGlobalsAndPackages() ...
[17:00:36.011] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.011] Resolving globals: FALSE
[17:00:36.011] Tweak future expression to call with '...' arguments ...
[17:00:36.011] {
[17:00:36.011]     do.call(function(...) {
[17:00:36.011]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.011]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.011]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.011]             on.exit(options(oopts), add = TRUE)
[17:00:36.011]         }
[17:00:36.011]         {
[17:00:36.011]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.011]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.011]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.011]                   envir = globalenv(), inherits = FALSE)
[17:00:36.011]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.011]             })
[17:00:36.011]         }
[17:00:36.011]     }, args = future.call.arguments)
[17:00:36.011] }
[17:00:36.012] Tweak future expression to call with '...' arguments ... DONE
[17:00:36.012] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.012] 
[17:00:36.012] getGlobalsAndPackages() ... DONE
[17:00:36.013] run() for ‘Future’ ...
[17:00:36.013] - state: ‘created’
[17:00:36.013] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:00:36.013] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:00:36.013] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:00:36.013]   - Field: ‘label’
[17:00:36.013]   - Field: ‘local’
[17:00:36.013]   - Field: ‘owner’
[17:00:36.014]   - Field: ‘envir’
[17:00:36.014]   - Field: ‘packages’
[17:00:36.014]   - Field: ‘gc’
[17:00:36.014]   - Field: ‘conditions’
[17:00:36.014]   - Field: ‘expr’
[17:00:36.014]   - Field: ‘uuid’
[17:00:36.014]   - Field: ‘seed’
[17:00:36.014]   - Field: ‘version’
[17:00:36.014]   - Field: ‘result’
[17:00:36.014]   - Field: ‘asynchronous’
[17:00:36.014]   - Field: ‘calls’
[17:00:36.015]   - Field: ‘globals’
[17:00:36.015]   - Field: ‘stdout’
[17:00:36.015]   - Field: ‘earlySignal’
[17:00:36.015]   - Field: ‘lazy’
[17:00:36.015]   - Field: ‘state’
[17:00:36.015] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:00:36.015] - Launch lazy future ...
[17:00:36.015] Packages needed by the future expression (n = 0): <none>
[17:00:36.015] Packages needed by future strategies (n = 0): <none>
[17:00:36.016] {
[17:00:36.016]     {
[17:00:36.016]         {
[17:00:36.016]             ...future.startTime <- base::Sys.time()
[17:00:36.016]             {
[17:00:36.016]                 {
[17:00:36.016]                   {
[17:00:36.016]                     base::local({
[17:00:36.016]                       has_future <- base::requireNamespace("future", 
[17:00:36.016]                         quietly = TRUE)
[17:00:36.016]                       if (has_future) {
[17:00:36.016]                         ns <- base::getNamespace("future")
[17:00:36.016]                         version <- ns[[".package"]][["version"]]
[17:00:36.016]                         if (is.null(version)) 
[17:00:36.016]                           version <- utils::packageVersion("future")
[17:00:36.016]                       }
[17:00:36.016]                       else {
[17:00:36.016]                         version <- NULL
[17:00:36.016]                       }
[17:00:36.016]                       if (!has_future || version < "1.8.0") {
[17:00:36.016]                         info <- base::c(r_version = base::gsub("R version ", 
[17:00:36.016]                           "", base::R.version$version.string), 
[17:00:36.016]                           platform = base::sprintf("%s (%s-bit)", 
[17:00:36.016]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:36.016]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:36.016]                             "release", "version")], collapse = " "), 
[17:00:36.016]                           hostname = base::Sys.info()[["nodename"]])
[17:00:36.016]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:00:36.016]                           info)
[17:00:36.016]                         info <- base::paste(info, collapse = "; ")
[17:00:36.016]                         if (!has_future) {
[17:00:36.016]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:36.016]                             info)
[17:00:36.016]                         }
[17:00:36.016]                         else {
[17:00:36.016]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:36.016]                             info, version)
[17:00:36.016]                         }
[17:00:36.016]                         base::stop(msg)
[17:00:36.016]                       }
[17:00:36.016]                     })
[17:00:36.016]                   }
[17:00:36.016]                   ...future.strategy.old <- future::plan("list")
[17:00:36.016]                   options(future.plan = NULL)
[17:00:36.016]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.016]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:36.016]                 }
[17:00:36.016]                 ...future.workdir <- getwd()
[17:00:36.016]             }
[17:00:36.016]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:36.016]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:36.016]         }
[17:00:36.016]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:36.016]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:00:36.016]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:36.016]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:36.016]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:36.016]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:36.016]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:36.016]             base::names(...future.oldOptions))
[17:00:36.016]     }
[17:00:36.016]     if (FALSE) {
[17:00:36.016]     }
[17:00:36.016]     else {
[17:00:36.016]         if (TRUE) {
[17:00:36.016]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:36.016]                 open = "w")
[17:00:36.016]         }
[17:00:36.016]         else {
[17:00:36.016]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:36.016]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:36.016]         }
[17:00:36.016]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:36.016]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:36.016]             base::sink(type = "output", split = FALSE)
[17:00:36.016]             base::close(...future.stdout)
[17:00:36.016]         }, add = TRUE)
[17:00:36.016]     }
[17:00:36.016]     ...future.frame <- base::sys.nframe()
[17:00:36.016]     ...future.conditions <- base::list()
[17:00:36.016]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:36.016]     if (FALSE) {
[17:00:36.016]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:36.016]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:36.016]     }
[17:00:36.016]     ...future.result <- base::tryCatch({
[17:00:36.016]         base::withCallingHandlers({
[17:00:36.016]             ...future.value <- base::withVisible(base::local({
[17:00:36.016]                 do.call(function(...) {
[17:00:36.016]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.016]                   if (!identical(...future.globals.maxSize.org, 
[17:00:36.016]                     ...future.globals.maxSize)) {
[17:00:36.016]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.016]                     on.exit(options(oopts), add = TRUE)
[17:00:36.016]                   }
[17:00:36.016]                   {
[17:00:36.016]                     lapply(seq_along(...future.elements_ii), 
[17:00:36.016]                       FUN = function(jj) {
[17:00:36.016]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.016]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.016]                           envir = globalenv(), inherits = FALSE)
[17:00:36.016]                         ...future.FUN(...future.X_jj, ...)
[17:00:36.016]                       })
[17:00:36.016]                   }
[17:00:36.016]                 }, args = future.call.arguments)
[17:00:36.016]             }))
[17:00:36.016]             future::FutureResult(value = ...future.value$value, 
[17:00:36.016]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.016]                   ...future.rng), globalenv = if (FALSE) 
[17:00:36.016]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:36.016]                     ...future.globalenv.names))
[17:00:36.016]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:36.016]         }, condition = base::local({
[17:00:36.016]             c <- base::c
[17:00:36.016]             inherits <- base::inherits
[17:00:36.016]             invokeRestart <- base::invokeRestart
[17:00:36.016]             length <- base::length
[17:00:36.016]             list <- base::list
[17:00:36.016]             seq.int <- base::seq.int
[17:00:36.016]             signalCondition <- base::signalCondition
[17:00:36.016]             sys.calls <- base::sys.calls
[17:00:36.016]             `[[` <- base::`[[`
[17:00:36.016]             `+` <- base::`+`
[17:00:36.016]             `<<-` <- base::`<<-`
[17:00:36.016]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:36.016]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:36.016]                   3L)]
[17:00:36.016]             }
[17:00:36.016]             function(cond) {
[17:00:36.016]                 is_error <- inherits(cond, "error")
[17:00:36.016]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:36.016]                   NULL)
[17:00:36.016]                 if (is_error) {
[17:00:36.016]                   sessionInformation <- function() {
[17:00:36.016]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:36.016]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:36.016]                       search = base::search(), system = base::Sys.info())
[17:00:36.016]                   }
[17:00:36.016]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.016]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:36.016]                     cond$call), session = sessionInformation(), 
[17:00:36.016]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:36.016]                   signalCondition(cond)
[17:00:36.016]                 }
[17:00:36.016]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:36.016]                 "immediateCondition"))) {
[17:00:36.016]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:36.016]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.016]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:36.016]                   if (TRUE && !signal) {
[17:00:36.016]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.016]                     {
[17:00:36.016]                       inherits <- base::inherits
[17:00:36.016]                       invokeRestart <- base::invokeRestart
[17:00:36.016]                       is.null <- base::is.null
[17:00:36.016]                       muffled <- FALSE
[17:00:36.016]                       if (inherits(cond, "message")) {
[17:00:36.016]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.016]                         if (muffled) 
[17:00:36.016]                           invokeRestart("muffleMessage")
[17:00:36.016]                       }
[17:00:36.016]                       else if (inherits(cond, "warning")) {
[17:00:36.016]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.016]                         if (muffled) 
[17:00:36.016]                           invokeRestart("muffleWarning")
[17:00:36.016]                       }
[17:00:36.016]                       else if (inherits(cond, "condition")) {
[17:00:36.016]                         if (!is.null(pattern)) {
[17:00:36.016]                           computeRestarts <- base::computeRestarts
[17:00:36.016]                           grepl <- base::grepl
[17:00:36.016]                           restarts <- computeRestarts(cond)
[17:00:36.016]                           for (restart in restarts) {
[17:00:36.016]                             name <- restart$name
[17:00:36.016]                             if (is.null(name)) 
[17:00:36.016]                               next
[17:00:36.016]                             if (!grepl(pattern, name)) 
[17:00:36.016]                               next
[17:00:36.016]                             invokeRestart(restart)
[17:00:36.016]                             muffled <- TRUE
[17:00:36.016]                             break
[17:00:36.016]                           }
[17:00:36.016]                         }
[17:00:36.016]                       }
[17:00:36.016]                       invisible(muffled)
[17:00:36.016]                     }
[17:00:36.016]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.016]                   }
[17:00:36.016]                 }
[17:00:36.016]                 else {
[17:00:36.016]                   if (TRUE) {
[17:00:36.016]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.016]                     {
[17:00:36.016]                       inherits <- base::inherits
[17:00:36.016]                       invokeRestart <- base::invokeRestart
[17:00:36.016]                       is.null <- base::is.null
[17:00:36.016]                       muffled <- FALSE
[17:00:36.016]                       if (inherits(cond, "message")) {
[17:00:36.016]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.016]                         if (muffled) 
[17:00:36.016]                           invokeRestart("muffleMessage")
[17:00:36.016]                       }
[17:00:36.016]                       else if (inherits(cond, "warning")) {
[17:00:36.016]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.016]                         if (muffled) 
[17:00:36.016]                           invokeRestart("muffleWarning")
[17:00:36.016]                       }
[17:00:36.016]                       else if (inherits(cond, "condition")) {
[17:00:36.016]                         if (!is.null(pattern)) {
[17:00:36.016]                           computeRestarts <- base::computeRestarts
[17:00:36.016]                           grepl <- base::grepl
[17:00:36.016]                           restarts <- computeRestarts(cond)
[17:00:36.016]                           for (restart in restarts) {
[17:00:36.016]                             name <- restart$name
[17:00:36.016]                             if (is.null(name)) 
[17:00:36.016]                               next
[17:00:36.016]                             if (!grepl(pattern, name)) 
[17:00:36.016]                               next
[17:00:36.016]                             invokeRestart(restart)
[17:00:36.016]                             muffled <- TRUE
[17:00:36.016]                             break
[17:00:36.016]                           }
[17:00:36.016]                         }
[17:00:36.016]                       }
[17:00:36.016]                       invisible(muffled)
[17:00:36.016]                     }
[17:00:36.016]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.016]                   }
[17:00:36.016]                 }
[17:00:36.016]             }
[17:00:36.016]         }))
[17:00:36.016]     }, error = function(ex) {
[17:00:36.016]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:36.016]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.016]                 ...future.rng), started = ...future.startTime, 
[17:00:36.016]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:36.016]             version = "1.8"), class = "FutureResult")
[17:00:36.016]     }, finally = {
[17:00:36.016]         if (!identical(...future.workdir, getwd())) 
[17:00:36.016]             setwd(...future.workdir)
[17:00:36.016]         {
[17:00:36.016]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:36.016]                 ...future.oldOptions$nwarnings <- NULL
[17:00:36.016]             }
[17:00:36.016]             base::options(...future.oldOptions)
[17:00:36.016]             if (.Platform$OS.type == "windows") {
[17:00:36.016]                 old_names <- names(...future.oldEnvVars)
[17:00:36.016]                 envs <- base::Sys.getenv()
[17:00:36.016]                 names <- names(envs)
[17:00:36.016]                 common <- intersect(names, old_names)
[17:00:36.016]                 added <- setdiff(names, old_names)
[17:00:36.016]                 removed <- setdiff(old_names, names)
[17:00:36.016]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:36.016]                   envs[common]]
[17:00:36.016]                 NAMES <- toupper(changed)
[17:00:36.016]                 args <- list()
[17:00:36.016]                 for (kk in seq_along(NAMES)) {
[17:00:36.016]                   name <- changed[[kk]]
[17:00:36.016]                   NAME <- NAMES[[kk]]
[17:00:36.016]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.016]                     next
[17:00:36.016]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.016]                 }
[17:00:36.016]                 NAMES <- toupper(added)
[17:00:36.016]                 for (kk in seq_along(NAMES)) {
[17:00:36.016]                   name <- added[[kk]]
[17:00:36.016]                   NAME <- NAMES[[kk]]
[17:00:36.016]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.016]                     next
[17:00:36.016]                   args[[name]] <- ""
[17:00:36.016]                 }
[17:00:36.016]                 NAMES <- toupper(removed)
[17:00:36.016]                 for (kk in seq_along(NAMES)) {
[17:00:36.016]                   name <- removed[[kk]]
[17:00:36.016]                   NAME <- NAMES[[kk]]
[17:00:36.016]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.016]                     next
[17:00:36.016]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.016]                 }
[17:00:36.016]                 if (length(args) > 0) 
[17:00:36.016]                   base::do.call(base::Sys.setenv, args = args)
[17:00:36.016]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:36.016]             }
[17:00:36.016]             else {
[17:00:36.016]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:36.016]             }
[17:00:36.016]             {
[17:00:36.016]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:36.016]                   0L) {
[17:00:36.016]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:36.016]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:36.016]                   base::options(opts)
[17:00:36.016]                 }
[17:00:36.016]                 {
[17:00:36.016]                   {
[17:00:36.016]                     base::assign(".Random.seed", c(10403L, 6L, 
[17:00:36.016]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[17:00:36.016]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[17:00:36.016]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[17:00:36.016]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[17:00:36.016]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[17:00:36.016]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[17:00:36.016]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[17:00:36.016]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[17:00:36.016]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[17:00:36.016]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[17:00:36.016]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[17:00:36.016]                     -1512233174L, -1985955764L, -425390065L, 
[17:00:36.016]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[17:00:36.016]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[17:00:36.016]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[17:00:36.016]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[17:00:36.016]                     1818328109L, -1284085436L, -1981489558L, 
[17:00:36.016]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[17:00:36.016]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[17:00:36.016]                     -1718567047L, -793788661L, -1133789126L, 
[17:00:36.016]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[17:00:36.016]                     -1823521982L, -1345991523L, -1672661737L, 
[17:00:36.016]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[17:00:36.016]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[17:00:36.016]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[17:00:36.016]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[17:00:36.016]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[17:00:36.016]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[17:00:36.016]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[17:00:36.016]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[17:00:36.016]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[17:00:36.016]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[17:00:36.016]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[17:00:36.016]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[17:00:36.016]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[17:00:36.016]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[17:00:36.016]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[17:00:36.016]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[17:00:36.016]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[17:00:36.016]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[17:00:36.016]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[17:00:36.016]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[17:00:36.016]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[17:00:36.016]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[17:00:36.016]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[17:00:36.016]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[17:00:36.016]                     -1119334354L, -1521015416L, -2041922421L, 
[17:00:36.016]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[17:00:36.016]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[17:00:36.016]                     1232111981L, -1801753084L, -1608606422L, 
[17:00:36.016]                     -1172096363L, 1420874031L, -1210473418L, 
[17:00:36.016]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[17:00:36.016]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[17:00:36.016]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[17:00:36.016]                     679371266L, -591318819L, -104578089L, -172818754L, 
[17:00:36.016]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[17:00:36.016]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[17:00:36.016]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[17:00:36.016]                     -332493318L, -1978392251L, -1691039632L, 
[17:00:36.016]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[17:00:36.016]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[17:00:36.016]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[17:00:36.016]                     87560756L, -87565624L, 426345146L, -699970416L, 
[17:00:36.016]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[17:00:36.016]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[17:00:36.016]                     -1178330196L, -687617348L, -1701912078L, 
[17:00:36.016]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[17:00:36.016]                     -1345416048L, 1816730492L, -1570431212L, 
[17:00:36.016]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[17:00:36.016]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[17:00:36.016]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[17:00:36.016]                     -1493184262L, -1943836976L, -590788308L, 
[17:00:36.016]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[17:00:36.016]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[17:00:36.016]                     1274857340L, -1205842638L, -1938479504L, 
[17:00:36.016]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[17:00:36.016]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[17:00:36.016]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[17:00:36.016]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[17:00:36.016]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[17:00:36.016]                     -1460751252L, 1201879444L, -1459788718L, 
[17:00:36.016]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[17:00:36.016]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[17:00:36.016]                     -420945808L, -1997735900L, -1838404552L, 
[17:00:36.016]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[17:00:36.016]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[17:00:36.016]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[17:00:36.016]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[17:00:36.016]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[17:00:36.016]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[17:00:36.016]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[17:00:36.016]                     942193650L, 751741680L, 689743428L, -18455976L, 
[17:00:36.016]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[17:00:36.016]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[17:00:36.016]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[17:00:36.016]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[17:00:36.016]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[17:00:36.016]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[17:00:36.016]                     -1357570110L, 1896595240L, -2066952276L, 
[17:00:36.016]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[17:00:36.016]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[17:00:36.016]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[17:00:36.016]                     769655120L, 236357794L, 181393736L, -13334772L, 
[17:00:36.016]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[17:00:36.016]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[17:00:36.016]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[17:00:36.016]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[17:00:36.016]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[17:00:36.016]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[17:00:36.016]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[17:00:36.016]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[17:00:36.016]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[17:00:36.016]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[17:00:36.016]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[17:00:36.016]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[17:00:36.016]                     -1365842884L, -438961294L, -1851472272L, 
[17:00:36.016]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[17:00:36.016]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[17:00:36.016]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[17:00:36.016]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[17:00:36.016]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[17:00:36.016]                     -594809770L, -2146766621L, -2013964635L, 
[17:00:36.016]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[17:00:36.016]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[17:00:36.016]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[17:00:36.016]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[17:00:36.016]                     -1426021878L, -1285634264L, 1507547537L, 
[17:00:36.016]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[17:00:36.016]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[17:00:36.016]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[17:00:36.016]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[17:00:36.016]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[17:00:36.016]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[17:00:36.016]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[17:00:36.016]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[17:00:36.016]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[17:00:36.016]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[17:00:36.016]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[17:00:36.016]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[17:00:36.016]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[17:00:36.016]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[17:00:36.016]                     -1604604761L, 1421229008L, -1268333714L, 
[17:00:36.016]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[17:00:36.016]                     -2070476623L, -2099222749L, 1141171236L, 
[17:00:36.016]                     -146426158L, -1797385433L, -1129376399L, 
[17:00:36.016]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[17:00:36.016]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[17:00:36.016]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[17:00:36.016]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[17:00:36.016]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[17:00:36.016]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[17:00:36.016]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[17:00:36.016]                     -1092079724L, -1765622238L, -1882554057L, 
[17:00:36.016]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[17:00:36.016]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[17:00:36.016]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[17:00:36.016]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[17:00:36.016]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[17:00:36.016]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[17:00:36.016]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[17:00:36.016]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[17:00:36.016]                     865377681L, -1127426242L), envir = base::globalenv(), 
[17:00:36.016]                       inherits = FALSE)
[17:00:36.016]                     NULL
[17:00:36.016]                   }
[17:00:36.016]                   options(future.plan = NULL)
[17:00:36.016]                   if (is.na(NA_character_)) 
[17:00:36.016]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.016]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:36.016]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:36.016]                     .init = FALSE)
[17:00:36.016]                 }
[17:00:36.016]             }
[17:00:36.016]         }
[17:00:36.016]     })
[17:00:36.016]     if (TRUE) {
[17:00:36.016]         base::sink(type = "output", split = FALSE)
[17:00:36.016]         if (TRUE) {
[17:00:36.016]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:36.016]         }
[17:00:36.016]         else {
[17:00:36.016]             ...future.result["stdout"] <- base::list(NULL)
[17:00:36.016]         }
[17:00:36.016]         base::close(...future.stdout)
[17:00:36.016]         ...future.stdout <- NULL
[17:00:36.016]     }
[17:00:36.016]     ...future.result$conditions <- ...future.conditions
[17:00:36.016]     ...future.result$finished <- base::Sys.time()
[17:00:36.016]     ...future.result
[17:00:36.016] }
[17:00:36.018] assign_globals() ...
[17:00:36.019] List of 5
[17:00:36.019]  $ ...future.FUN            :function (...)  
[17:00:36.019]  $ future.call.arguments    : list()
[17:00:36.019]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.019]  $ ...future.elements_ii    :List of 5
[17:00:36.019]   ..$ : int 0
[17:00:36.019]   ..$ : int 0
[17:00:36.019]   ..$ : int 0
[17:00:36.019]   ..$ : int 0
[17:00:36.019]   ..$ : int 0
[17:00:36.019]  $ ...future.seeds_ii       :List of 5
[17:00:36.019]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[17:00:36.019]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[17:00:36.019]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[17:00:36.019]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[17:00:36.019]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[17:00:36.019]  $ ...future.globals.maxSize: NULL
[17:00:36.019]  - attr(*, "where")=List of 5
[17:00:36.019]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:00:36.019]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:00:36.019]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:00:36.019]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:00:36.019]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:00:36.019]  - attr(*, "resolved")= logi FALSE
[17:00:36.019]  - attr(*, "total_size")= num 616
[17:00:36.019]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.019]  - attr(*, "already-done")= logi TRUE
[17:00:36.027] - reassign environment for ‘...future.FUN’
[17:00:36.027] - copied ‘...future.FUN’ to environment
[17:00:36.028] - copied ‘future.call.arguments’ to environment
[17:00:36.028] - copied ‘...future.elements_ii’ to environment
[17:00:36.028] - copied ‘...future.seeds_ii’ to environment
[17:00:36.028] - copied ‘...future.globals.maxSize’ to environment
[17:00:36.028] assign_globals() ... done
[17:00:36.028] plan(): Setting new future strategy stack:
[17:00:36.028] List of future strategies:
[17:00:36.028] 1. sequential:
[17:00:36.028]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:36.028]    - tweaked: FALSE
[17:00:36.028]    - call: NULL
[17:00:36.029] plan(): nbrOfWorkers() = 1
[17:00:36.030] plan(): Setting new future strategy stack:
[17:00:36.030] List of future strategies:
[17:00:36.030] 1. sequential:
[17:00:36.030]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:36.030]    - tweaked: FALSE
[17:00:36.030]    - call: plan(strategy)
[17:00:36.030] plan(): nbrOfWorkers() = 1
[17:00:36.030] SequentialFuture started (and completed)
[17:00:36.030] - Launch lazy future ... done
[17:00:36.030] run() for ‘SequentialFuture’ ... done
[17:00:36.031] Created future:
[17:00:36.031] SequentialFuture:
[17:00:36.031] Label: ‘future_replicate-1’
[17:00:36.031] Expression:
[17:00:36.031] {
[17:00:36.031]     do.call(function(...) {
[17:00:36.031]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.031]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.031]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.031]             on.exit(options(oopts), add = TRUE)
[17:00:36.031]         }
[17:00:36.031]         {
[17:00:36.031]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.031]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.031]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.031]                   envir = globalenv(), inherits = FALSE)
[17:00:36.031]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.031]             })
[17:00:36.031]         }
[17:00:36.031]     }, args = future.call.arguments)
[17:00:36.031] }
[17:00:36.031] Lazy evaluation: FALSE
[17:00:36.031] Asynchronous evaluation: FALSE
[17:00:36.031] Local evaluation: TRUE
[17:00:36.031] Environment: R_GlobalEnv
[17:00:36.031] Capture standard output: TRUE
[17:00:36.031] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:36.031] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:36.031] Packages: <none>
[17:00:36.031] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:36.031] Resolved: TRUE
[17:00:36.031] Value: 280 bytes of class ‘list’
[17:00:36.031] Early signaling: FALSE
[17:00:36.031] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:36.031] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:00:36.032] Chunk #1 of 1 ... DONE
[17:00:36.032] Launching 1 futures (chunks) ... DONE
[17:00:36.032] Resolving 1 futures (chunks) ...
[17:00:36.032] resolve() on list ...
[17:00:36.032]  recursive: 0
[17:00:36.032]  length: 1
[17:00:36.032] 
[17:00:36.032] resolved() for ‘SequentialFuture’ ...
[17:00:36.033] - state: ‘finished’
[17:00:36.033] - run: TRUE
[17:00:36.033] - result: ‘FutureResult’
[17:00:36.033] resolved() for ‘SequentialFuture’ ... done
[17:00:36.033] Future #1
[17:00:36.033] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:00:36.033] - nx: 1
[17:00:36.033] - relay: TRUE
[17:00:36.033] - stdout: TRUE
[17:00:36.033] - signal: TRUE
[17:00:36.034] - resignal: FALSE
[17:00:36.034] - force: TRUE
[17:00:36.034] - relayed: [n=1] FALSE
[17:00:36.034] - queued futures: [n=1] FALSE
[17:00:36.034]  - until=1
[17:00:36.034]  - relaying element #1
[17:00:36.034] - relayed: [n=1] TRUE
[17:00:36.034] - queued futures: [n=1] TRUE
[17:00:36.034] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:00:36.034]  length: 0 (resolved future 1)
[17:00:36.035] Relaying remaining futures
[17:00:36.035] signalConditionsASAP(NULL, pos=0) ...
[17:00:36.035] - nx: 1
[17:00:36.035] - relay: TRUE
[17:00:36.035] - stdout: TRUE
[17:00:36.035] - signal: TRUE
[17:00:36.035] - resignal: FALSE
[17:00:36.035] - force: TRUE
[17:00:36.035] - relayed: [n=1] TRUE
[17:00:36.035] - queued futures: [n=1] TRUE
 - flush all
[17:00:36.036] - relayed: [n=1] TRUE
[17:00:36.036] - queued futures: [n=1] TRUE
[17:00:36.036] signalConditionsASAP(NULL, pos=0) ... done
[17:00:36.036] resolve() on list ... DONE
[17:00:36.036]  - Number of value chunks collected: 1
[17:00:36.036] Resolving 1 futures (chunks) ... DONE
[17:00:36.036] Reducing values from 1 chunks ...
[17:00:36.036]  - Number of values collected after concatenation: 5
[17:00:36.036]  - Number of values expected: 5
[17:00:36.036] Reducing values from 1 chunks ... DONE
[17:00:36.036] future_lapply() ... DONE
- example(replicate) ...
[17:00:36.037] future_lapply() ...
[17:00:36.037] Generating random seeds ...
[17:00:36.037] Generating random seed streams for 5 elements ...
[17:00:36.038] Generating random seed streams for 5 elements ... DONE
[17:00:36.038] Generating random seeds ... DONE
[17:00:36.038] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:00:36.038] Number of chunks: 1
[17:00:36.038] getGlobalsAndPackagesXApply() ...
[17:00:36.038]  - future.globals: TRUE
[17:00:36.038] getGlobalsAndPackages() ...
[17:00:36.039] Searching for globals...
[17:00:36.040] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[17:00:36.040] Searching for globals ... DONE
[17:00:36.041] Resolving globals: FALSE
[17:00:36.041] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[17:00:36.041] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[17:00:36.041] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[17:00:36.042] 
[17:00:36.042] getGlobalsAndPackages() ... DONE
[17:00:36.042]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[17:00:36.042]  - needed namespaces: [n=0] 
[17:00:36.042] Finding globals ... DONE
[17:00:36.042]  - use_args: TRUE
[17:00:36.042]  - Getting '...' globals ...
[17:00:36.042] resolve() on list ...
[17:00:36.043]  recursive: 0
[17:00:36.043]  length: 1
[17:00:36.043]  elements: ‘...’
[17:00:36.043]  length: 0 (resolved future 1)
[17:00:36.043] resolve() on list ... DONE
[17:00:36.043]    - '...' content: [n=0] 
[17:00:36.043] List of 1
[17:00:36.043]  $ ...: list()
[17:00:36.043]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.043]  - attr(*, "where")=List of 1
[17:00:36.043]   ..$ ...:<environment: 0x5585627e06b8> 
[17:00:36.043]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.043]  - attr(*, "resolved")= logi TRUE
[17:00:36.043]  - attr(*, "total_size")= num NA
[17:00:36.046]  - Getting '...' globals ... DONE
[17:00:36.046] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[17:00:36.046] List of 4
[17:00:36.046]  $ ...future.FUN:function (...)  
[17:00:36.046]  $ foo          :function (x = 1, y = 2)  
[17:00:36.046]  $ x            : num 3
[17:00:36.046]  $ ...          : list()
[17:00:36.046]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.046]  - attr(*, "where")=List of 4
[17:00:36.046]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:00:36.046]   ..$ foo          :<environment: R_EmptyEnv> 
[17:00:36.046]   ..$ x            :<environment: R_EmptyEnv> 
[17:00:36.046]   ..$ ...          :<environment: 0x5585627e06b8> 
[17:00:36.046]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.046]  - attr(*, "resolved")= logi FALSE
[17:00:36.046]  - attr(*, "total_size")= num 2200
[17:00:36.049] Packages to be attached in all futures: [n=0] 
[17:00:36.049] getGlobalsAndPackagesXApply() ... DONE
[17:00:36.050] Number of futures (= number of chunks): 1
[17:00:36.050] Launching 1 futures (chunks) ...
[17:00:36.050] Chunk #1 of 1 ...
[17:00:36.050]  - Finding globals in 'X' for chunk #1 ...
[17:00:36.050] getGlobalsAndPackages() ...
[17:00:36.052] Searching for globals...
[17:00:36.052] 
[17:00:36.052] Searching for globals ... DONE
[17:00:36.052] - globals: [0] <none>
[17:00:36.052] getGlobalsAndPackages() ... DONE
[17:00:36.053]    + additional globals found: [n=0] 
[17:00:36.053]    + additional namespaces needed: [n=0] 
[17:00:36.053]  - Finding globals in 'X' for chunk #1 ... DONE
[17:00:36.053]  - seeds: [5] <seeds>
[17:00:36.053]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.053] getGlobalsAndPackages() ...
[17:00:36.053] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.053] Resolving globals: FALSE
[17:00:36.053] Tweak future expression to call with '...' arguments ...
[17:00:36.054] {
[17:00:36.054]     do.call(function(...) {
[17:00:36.054]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.054]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.054]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.054]             on.exit(options(oopts), add = TRUE)
[17:00:36.054]         }
[17:00:36.054]         {
[17:00:36.054]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.054]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.054]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.054]                   envir = globalenv(), inherits = FALSE)
[17:00:36.054]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.054]             })
[17:00:36.054]         }
[17:00:36.054]     }, args = future.call.arguments)
[17:00:36.054] }
[17:00:36.054] Tweak future expression to call with '...' arguments ... DONE
[17:00:36.054] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.054] 
[17:00:36.054] getGlobalsAndPackages() ... DONE
[17:00:36.055] run() for ‘Future’ ...
[17:00:36.055] - state: ‘created’
[17:00:36.055] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:00:36.055] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:00:36.055] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:00:36.055]   - Field: ‘label’
[17:00:36.056]   - Field: ‘local’
[17:00:36.056]   - Field: ‘owner’
[17:00:36.056]   - Field: ‘envir’
[17:00:36.056]   - Field: ‘packages’
[17:00:36.056]   - Field: ‘gc’
[17:00:36.056]   - Field: ‘conditions’
[17:00:36.056]   - Field: ‘expr’
[17:00:36.056]   - Field: ‘uuid’
[17:00:36.056]   - Field: ‘seed’
[17:00:36.056]   - Field: ‘version’
[17:00:36.056]   - Field: ‘result’
[17:00:36.057]   - Field: ‘asynchronous’
[17:00:36.057]   - Field: ‘calls’
[17:00:36.057]   - Field: ‘globals’
[17:00:36.057]   - Field: ‘stdout’
[17:00:36.057]   - Field: ‘earlySignal’
[17:00:36.057]   - Field: ‘lazy’
[17:00:36.057]   - Field: ‘state’
[17:00:36.057] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:00:36.057] - Launch lazy future ...
[17:00:36.057] Packages needed by the future expression (n = 0): <none>
[17:00:36.058] Packages needed by future strategies (n = 0): <none>
[17:00:36.058] {
[17:00:36.058]     {
[17:00:36.058]         {
[17:00:36.058]             ...future.startTime <- base::Sys.time()
[17:00:36.058]             {
[17:00:36.058]                 {
[17:00:36.058]                   {
[17:00:36.058]                     base::local({
[17:00:36.058]                       has_future <- base::requireNamespace("future", 
[17:00:36.058]                         quietly = TRUE)
[17:00:36.058]                       if (has_future) {
[17:00:36.058]                         ns <- base::getNamespace("future")
[17:00:36.058]                         version <- ns[[".package"]][["version"]]
[17:00:36.058]                         if (is.null(version)) 
[17:00:36.058]                           version <- utils::packageVersion("future")
[17:00:36.058]                       }
[17:00:36.058]                       else {
[17:00:36.058]                         version <- NULL
[17:00:36.058]                       }
[17:00:36.058]                       if (!has_future || version < "1.8.0") {
[17:00:36.058]                         info <- base::c(r_version = base::gsub("R version ", 
[17:00:36.058]                           "", base::R.version$version.string), 
[17:00:36.058]                           platform = base::sprintf("%s (%s-bit)", 
[17:00:36.058]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:36.058]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:36.058]                             "release", "version")], collapse = " "), 
[17:00:36.058]                           hostname = base::Sys.info()[["nodename"]])
[17:00:36.058]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:00:36.058]                           info)
[17:00:36.058]                         info <- base::paste(info, collapse = "; ")
[17:00:36.058]                         if (!has_future) {
[17:00:36.058]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:36.058]                             info)
[17:00:36.058]                         }
[17:00:36.058]                         else {
[17:00:36.058]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:36.058]                             info, version)
[17:00:36.058]                         }
[17:00:36.058]                         base::stop(msg)
[17:00:36.058]                       }
[17:00:36.058]                     })
[17:00:36.058]                   }
[17:00:36.058]                   ...future.strategy.old <- future::plan("list")
[17:00:36.058]                   options(future.plan = NULL)
[17:00:36.058]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.058]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:36.058]                 }
[17:00:36.058]                 ...future.workdir <- getwd()
[17:00:36.058]             }
[17:00:36.058]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:36.058]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:36.058]         }
[17:00:36.058]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:36.058]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:00:36.058]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:36.058]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:36.058]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:36.058]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:36.058]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:36.058]             base::names(...future.oldOptions))
[17:00:36.058]     }
[17:00:36.058]     if (FALSE) {
[17:00:36.058]     }
[17:00:36.058]     else {
[17:00:36.058]         if (TRUE) {
[17:00:36.058]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:36.058]                 open = "w")
[17:00:36.058]         }
[17:00:36.058]         else {
[17:00:36.058]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:36.058]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:36.058]         }
[17:00:36.058]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:36.058]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:36.058]             base::sink(type = "output", split = FALSE)
[17:00:36.058]             base::close(...future.stdout)
[17:00:36.058]         }, add = TRUE)
[17:00:36.058]     }
[17:00:36.058]     ...future.frame <- base::sys.nframe()
[17:00:36.058]     ...future.conditions <- base::list()
[17:00:36.058]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:36.058]     if (FALSE) {
[17:00:36.058]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:36.058]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:36.058]     }
[17:00:36.058]     ...future.result <- base::tryCatch({
[17:00:36.058]         base::withCallingHandlers({
[17:00:36.058]             ...future.value <- base::withVisible(base::local({
[17:00:36.058]                 do.call(function(...) {
[17:00:36.058]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.058]                   if (!identical(...future.globals.maxSize.org, 
[17:00:36.058]                     ...future.globals.maxSize)) {
[17:00:36.058]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.058]                     on.exit(options(oopts), add = TRUE)
[17:00:36.058]                   }
[17:00:36.058]                   {
[17:00:36.058]                     lapply(seq_along(...future.elements_ii), 
[17:00:36.058]                       FUN = function(jj) {
[17:00:36.058]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.058]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.058]                           envir = globalenv(), inherits = FALSE)
[17:00:36.058]                         ...future.FUN(...future.X_jj, ...)
[17:00:36.058]                       })
[17:00:36.058]                   }
[17:00:36.058]                 }, args = future.call.arguments)
[17:00:36.058]             }))
[17:00:36.058]             future::FutureResult(value = ...future.value$value, 
[17:00:36.058]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.058]                   ...future.rng), globalenv = if (FALSE) 
[17:00:36.058]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:36.058]                     ...future.globalenv.names))
[17:00:36.058]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:36.058]         }, condition = base::local({
[17:00:36.058]             c <- base::c
[17:00:36.058]             inherits <- base::inherits
[17:00:36.058]             invokeRestart <- base::invokeRestart
[17:00:36.058]             length <- base::length
[17:00:36.058]             list <- base::list
[17:00:36.058]             seq.int <- base::seq.int
[17:00:36.058]             signalCondition <- base::signalCondition
[17:00:36.058]             sys.calls <- base::sys.calls
[17:00:36.058]             `[[` <- base::`[[`
[17:00:36.058]             `+` <- base::`+`
[17:00:36.058]             `<<-` <- base::`<<-`
[17:00:36.058]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:36.058]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:36.058]                   3L)]
[17:00:36.058]             }
[17:00:36.058]             function(cond) {
[17:00:36.058]                 is_error <- inherits(cond, "error")
[17:00:36.058]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:36.058]                   NULL)
[17:00:36.058]                 if (is_error) {
[17:00:36.058]                   sessionInformation <- function() {
[17:00:36.058]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:36.058]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:36.058]                       search = base::search(), system = base::Sys.info())
[17:00:36.058]                   }
[17:00:36.058]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.058]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:36.058]                     cond$call), session = sessionInformation(), 
[17:00:36.058]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:36.058]                   signalCondition(cond)
[17:00:36.058]                 }
[17:00:36.058]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:36.058]                 "immediateCondition"))) {
[17:00:36.058]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:36.058]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.058]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:36.058]                   if (TRUE && !signal) {
[17:00:36.058]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.058]                     {
[17:00:36.058]                       inherits <- base::inherits
[17:00:36.058]                       invokeRestart <- base::invokeRestart
[17:00:36.058]                       is.null <- base::is.null
[17:00:36.058]                       muffled <- FALSE
[17:00:36.058]                       if (inherits(cond, "message")) {
[17:00:36.058]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.058]                         if (muffled) 
[17:00:36.058]                           invokeRestart("muffleMessage")
[17:00:36.058]                       }
[17:00:36.058]                       else if (inherits(cond, "warning")) {
[17:00:36.058]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.058]                         if (muffled) 
[17:00:36.058]                           invokeRestart("muffleWarning")
[17:00:36.058]                       }
[17:00:36.058]                       else if (inherits(cond, "condition")) {
[17:00:36.058]                         if (!is.null(pattern)) {
[17:00:36.058]                           computeRestarts <- base::computeRestarts
[17:00:36.058]                           grepl <- base::grepl
[17:00:36.058]                           restarts <- computeRestarts(cond)
[17:00:36.058]                           for (restart in restarts) {
[17:00:36.058]                             name <- restart$name
[17:00:36.058]                             if (is.null(name)) 
[17:00:36.058]                               next
[17:00:36.058]                             if (!grepl(pattern, name)) 
[17:00:36.058]                               next
[17:00:36.058]                             invokeRestart(restart)
[17:00:36.058]                             muffled <- TRUE
[17:00:36.058]                             break
[17:00:36.058]                           }
[17:00:36.058]                         }
[17:00:36.058]                       }
[17:00:36.058]                       invisible(muffled)
[17:00:36.058]                     }
[17:00:36.058]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.058]                   }
[17:00:36.058]                 }
[17:00:36.058]                 else {
[17:00:36.058]                   if (TRUE) {
[17:00:36.058]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.058]                     {
[17:00:36.058]                       inherits <- base::inherits
[17:00:36.058]                       invokeRestart <- base::invokeRestart
[17:00:36.058]                       is.null <- base::is.null
[17:00:36.058]                       muffled <- FALSE
[17:00:36.058]                       if (inherits(cond, "message")) {
[17:00:36.058]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.058]                         if (muffled) 
[17:00:36.058]                           invokeRestart("muffleMessage")
[17:00:36.058]                       }
[17:00:36.058]                       else if (inherits(cond, "warning")) {
[17:00:36.058]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.058]                         if (muffled) 
[17:00:36.058]                           invokeRestart("muffleWarning")
[17:00:36.058]                       }
[17:00:36.058]                       else if (inherits(cond, "condition")) {
[17:00:36.058]                         if (!is.null(pattern)) {
[17:00:36.058]                           computeRestarts <- base::computeRestarts
[17:00:36.058]                           grepl <- base::grepl
[17:00:36.058]                           restarts <- computeRestarts(cond)
[17:00:36.058]                           for (restart in restarts) {
[17:00:36.058]                             name <- restart$name
[17:00:36.058]                             if (is.null(name)) 
[17:00:36.058]                               next
[17:00:36.058]                             if (!grepl(pattern, name)) 
[17:00:36.058]                               next
[17:00:36.058]                             invokeRestart(restart)
[17:00:36.058]                             muffled <- TRUE
[17:00:36.058]                             break
[17:00:36.058]                           }
[17:00:36.058]                         }
[17:00:36.058]                       }
[17:00:36.058]                       invisible(muffled)
[17:00:36.058]                     }
[17:00:36.058]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.058]                   }
[17:00:36.058]                 }
[17:00:36.058]             }
[17:00:36.058]         }))
[17:00:36.058]     }, error = function(ex) {
[17:00:36.058]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:36.058]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.058]                 ...future.rng), started = ...future.startTime, 
[17:00:36.058]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:36.058]             version = "1.8"), class = "FutureResult")
[17:00:36.058]     }, finally = {
[17:00:36.058]         if (!identical(...future.workdir, getwd())) 
[17:00:36.058]             setwd(...future.workdir)
[17:00:36.058]         {
[17:00:36.058]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:36.058]                 ...future.oldOptions$nwarnings <- NULL
[17:00:36.058]             }
[17:00:36.058]             base::options(...future.oldOptions)
[17:00:36.058]             if (.Platform$OS.type == "windows") {
[17:00:36.058]                 old_names <- names(...future.oldEnvVars)
[17:00:36.058]                 envs <- base::Sys.getenv()
[17:00:36.058]                 names <- names(envs)
[17:00:36.058]                 common <- intersect(names, old_names)
[17:00:36.058]                 added <- setdiff(names, old_names)
[17:00:36.058]                 removed <- setdiff(old_names, names)
[17:00:36.058]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:36.058]                   envs[common]]
[17:00:36.058]                 NAMES <- toupper(changed)
[17:00:36.058]                 args <- list()
[17:00:36.058]                 for (kk in seq_along(NAMES)) {
[17:00:36.058]                   name <- changed[[kk]]
[17:00:36.058]                   NAME <- NAMES[[kk]]
[17:00:36.058]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.058]                     next
[17:00:36.058]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.058]                 }
[17:00:36.058]                 NAMES <- toupper(added)
[17:00:36.058]                 for (kk in seq_along(NAMES)) {
[17:00:36.058]                   name <- added[[kk]]
[17:00:36.058]                   NAME <- NAMES[[kk]]
[17:00:36.058]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.058]                     next
[17:00:36.058]                   args[[name]] <- ""
[17:00:36.058]                 }
[17:00:36.058]                 NAMES <- toupper(removed)
[17:00:36.058]                 for (kk in seq_along(NAMES)) {
[17:00:36.058]                   name <- removed[[kk]]
[17:00:36.058]                   NAME <- NAMES[[kk]]
[17:00:36.058]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.058]                     next
[17:00:36.058]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.058]                 }
[17:00:36.058]                 if (length(args) > 0) 
[17:00:36.058]                   base::do.call(base::Sys.setenv, args = args)
[17:00:36.058]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:36.058]             }
[17:00:36.058]             else {
[17:00:36.058]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:36.058]             }
[17:00:36.058]             {
[17:00:36.058]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:36.058]                   0L) {
[17:00:36.058]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:36.058]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:36.058]                   base::options(opts)
[17:00:36.058]                 }
[17:00:36.058]                 {
[17:00:36.058]                   {
[17:00:36.058]                     base::assign(".Random.seed", c(10403L, 8L, 
[17:00:36.058]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[17:00:36.058]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[17:00:36.058]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[17:00:36.058]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[17:00:36.058]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[17:00:36.058]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[17:00:36.058]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[17:00:36.058]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[17:00:36.058]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[17:00:36.058]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[17:00:36.058]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[17:00:36.058]                     -1512233174L, -1985955764L, -425390065L, 
[17:00:36.058]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[17:00:36.058]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[17:00:36.058]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[17:00:36.058]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[17:00:36.058]                     1818328109L, -1284085436L, -1981489558L, 
[17:00:36.058]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[17:00:36.058]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[17:00:36.058]                     -1718567047L, -793788661L, -1133789126L, 
[17:00:36.058]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[17:00:36.058]                     -1823521982L, -1345991523L, -1672661737L, 
[17:00:36.058]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[17:00:36.058]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[17:00:36.058]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[17:00:36.058]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[17:00:36.058]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[17:00:36.058]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[17:00:36.058]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[17:00:36.058]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[17:00:36.058]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[17:00:36.058]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[17:00:36.058]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[17:00:36.058]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[17:00:36.058]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[17:00:36.058]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[17:00:36.058]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[17:00:36.058]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[17:00:36.058]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[17:00:36.058]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[17:00:36.058]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[17:00:36.058]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[17:00:36.058]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[17:00:36.058]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[17:00:36.058]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[17:00:36.058]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[17:00:36.058]                     -1119334354L, -1521015416L, -2041922421L, 
[17:00:36.058]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[17:00:36.058]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[17:00:36.058]                     1232111981L, -1801753084L, -1608606422L, 
[17:00:36.058]                     -1172096363L, 1420874031L, -1210473418L, 
[17:00:36.058]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[17:00:36.058]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[17:00:36.058]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[17:00:36.058]                     679371266L, -591318819L, -104578089L, -172818754L, 
[17:00:36.058]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[17:00:36.058]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[17:00:36.058]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[17:00:36.058]                     -332493318L, -1978392251L, -1691039632L, 
[17:00:36.058]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[17:00:36.058]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[17:00:36.058]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[17:00:36.058]                     87560756L, -87565624L, 426345146L, -699970416L, 
[17:00:36.058]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[17:00:36.058]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[17:00:36.058]                     -1178330196L, -687617348L, -1701912078L, 
[17:00:36.058]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[17:00:36.058]                     -1345416048L, 1816730492L, -1570431212L, 
[17:00:36.058]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[17:00:36.058]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[17:00:36.058]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[17:00:36.058]                     -1493184262L, -1943836976L, -590788308L, 
[17:00:36.058]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[17:00:36.058]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[17:00:36.058]                     1274857340L, -1205842638L, -1938479504L, 
[17:00:36.058]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[17:00:36.058]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[17:00:36.058]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[17:00:36.058]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[17:00:36.058]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[17:00:36.058]                     -1460751252L, 1201879444L, -1459788718L, 
[17:00:36.058]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[17:00:36.058]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[17:00:36.058]                     -420945808L, -1997735900L, -1838404552L, 
[17:00:36.058]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[17:00:36.058]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[17:00:36.058]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[17:00:36.058]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[17:00:36.058]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[17:00:36.058]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[17:00:36.058]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[17:00:36.058]                     942193650L, 751741680L, 689743428L, -18455976L, 
[17:00:36.058]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[17:00:36.058]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[17:00:36.058]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[17:00:36.058]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[17:00:36.058]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[17:00:36.058]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[17:00:36.058]                     -1357570110L, 1896595240L, -2066952276L, 
[17:00:36.058]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[17:00:36.058]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[17:00:36.058]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[17:00:36.058]                     769655120L, 236357794L, 181393736L, -13334772L, 
[17:00:36.058]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[17:00:36.058]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[17:00:36.058]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[17:00:36.058]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[17:00:36.058]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[17:00:36.058]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[17:00:36.058]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[17:00:36.058]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[17:00:36.058]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[17:00:36.058]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[17:00:36.058]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[17:00:36.058]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[17:00:36.058]                     -1365842884L, -438961294L, -1851472272L, 
[17:00:36.058]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[17:00:36.058]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[17:00:36.058]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[17:00:36.058]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[17:00:36.058]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[17:00:36.058]                     -594809770L, -2146766621L, -2013964635L, 
[17:00:36.058]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[17:00:36.058]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[17:00:36.058]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[17:00:36.058]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[17:00:36.058]                     -1426021878L, -1285634264L, 1507547537L, 
[17:00:36.058]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[17:00:36.058]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[17:00:36.058]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[17:00:36.058]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[17:00:36.058]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[17:00:36.058]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[17:00:36.058]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[17:00:36.058]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[17:00:36.058]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[17:00:36.058]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[17:00:36.058]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[17:00:36.058]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[17:00:36.058]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[17:00:36.058]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[17:00:36.058]                     -1604604761L, 1421229008L, -1268333714L, 
[17:00:36.058]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[17:00:36.058]                     -2070476623L, -2099222749L, 1141171236L, 
[17:00:36.058]                     -146426158L, -1797385433L, -1129376399L, 
[17:00:36.058]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[17:00:36.058]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[17:00:36.058]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[17:00:36.058]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[17:00:36.058]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[17:00:36.058]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[17:00:36.058]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[17:00:36.058]                     -1092079724L, -1765622238L, -1882554057L, 
[17:00:36.058]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[17:00:36.058]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[17:00:36.058]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[17:00:36.058]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[17:00:36.058]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[17:00:36.058]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[17:00:36.058]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[17:00:36.058]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[17:00:36.058]                     865377681L, -1127426242L), envir = base::globalenv(), 
[17:00:36.058]                       inherits = FALSE)
[17:00:36.058]                     NULL
[17:00:36.058]                   }
[17:00:36.058]                   options(future.plan = NULL)
[17:00:36.058]                   if (is.na(NA_character_)) 
[17:00:36.058]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.058]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:36.058]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:36.058]                     .init = FALSE)
[17:00:36.058]                 }
[17:00:36.058]             }
[17:00:36.058]         }
[17:00:36.058]     })
[17:00:36.058]     if (TRUE) {
[17:00:36.058]         base::sink(type = "output", split = FALSE)
[17:00:36.058]         if (TRUE) {
[17:00:36.058]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:36.058]         }
[17:00:36.058]         else {
[17:00:36.058]             ...future.result["stdout"] <- base::list(NULL)
[17:00:36.058]         }
[17:00:36.058]         base::close(...future.stdout)
[17:00:36.058]         ...future.stdout <- NULL
[17:00:36.058]     }
[17:00:36.058]     ...future.result$conditions <- ...future.conditions
[17:00:36.058]     ...future.result$finished <- base::Sys.time()
[17:00:36.058]     ...future.result
[17:00:36.058] }
[17:00:36.061] assign_globals() ...
[17:00:36.061] List of 7
[17:00:36.061]  $ ...future.FUN            :function (...)  
[17:00:36.061]  $ foo                      :function (x = 1, y = 2)  
[17:00:36.061]  $ x                        : num 3
[17:00:36.061]  $ future.call.arguments    : list()
[17:00:36.061]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.061]  $ ...future.elements_ii    :List of 5
[17:00:36.061]   ..$ : int 0
[17:00:36.061]   ..$ : int 0
[17:00:36.061]   ..$ : int 0
[17:00:36.061]   ..$ : int 0
[17:00:36.061]   ..$ : int 0
[17:00:36.061]  $ ...future.seeds_ii       :List of 5
[17:00:36.061]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[17:00:36.061]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[17:00:36.061]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[17:00:36.061]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[17:00:36.061]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[17:00:36.061]  $ ...future.globals.maxSize: NULL
[17:00:36.061]  - attr(*, "where")=List of 7
[17:00:36.061]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:00:36.061]   ..$ foo                      :<environment: R_EmptyEnv> 
[17:00:36.061]   ..$ x                        :<environment: R_EmptyEnv> 
[17:00:36.061]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:00:36.061]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:00:36.061]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:00:36.061]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:00:36.061]  - attr(*, "resolved")= logi FALSE
[17:00:36.061]  - attr(*, "total_size")= num 2200
[17:00:36.061]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.061]  - attr(*, "already-done")= logi TRUE
[17:00:36.069] - reassign environment for ‘...future.FUN’
[17:00:36.069] - copied ‘...future.FUN’ to environment
[17:00:36.069] - reassign environment for ‘foo’
[17:00:36.069] - copied ‘foo’ to environment
[17:00:36.069] - copied ‘x’ to environment
[17:00:36.069] - copied ‘future.call.arguments’ to environment
[17:00:36.069] - copied ‘...future.elements_ii’ to environment
[17:00:36.070] - copied ‘...future.seeds_ii’ to environment
[17:00:36.070] - copied ‘...future.globals.maxSize’ to environment
[17:00:36.070] assign_globals() ... done
[17:00:36.070] plan(): Setting new future strategy stack:
[17:00:36.070] List of future strategies:
[17:00:36.070] 1. sequential:
[17:00:36.070]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:36.070]    - tweaked: FALSE
[17:00:36.070]    - call: NULL
[17:00:36.071] plan(): nbrOfWorkers() = 1
[17:00:36.071] plan(): Setting new future strategy stack:
[17:00:36.072] List of future strategies:
[17:00:36.072] 1. sequential:
[17:00:36.072]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:36.072]    - tweaked: FALSE
[17:00:36.072]    - call: plan(strategy)
[17:00:36.072] plan(): nbrOfWorkers() = 1
[17:00:36.072] SequentialFuture started (and completed)
[17:00:36.072] - Launch lazy future ... done
[17:00:36.072] run() for ‘SequentialFuture’ ... done
[17:00:36.072] Created future:
[17:00:36.073] SequentialFuture:
[17:00:36.073] Label: ‘future_replicate-1’
[17:00:36.073] Expression:
[17:00:36.073] {
[17:00:36.073]     do.call(function(...) {
[17:00:36.073]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.073]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.073]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.073]             on.exit(options(oopts), add = TRUE)
[17:00:36.073]         }
[17:00:36.073]         {
[17:00:36.073]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.073]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.073]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.073]                   envir = globalenv(), inherits = FALSE)
[17:00:36.073]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.073]             })
[17:00:36.073]         }
[17:00:36.073]     }, args = future.call.arguments)
[17:00:36.073] }
[17:00:36.073] Lazy evaluation: FALSE
[17:00:36.073] Asynchronous evaluation: FALSE
[17:00:36.073] Local evaluation: TRUE
[17:00:36.073] Environment: 0x5585627de0d0
[17:00:36.073] Capture standard output: TRUE
[17:00:36.073] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:36.073] Globals: 7 objects totaling 2.81 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, ...)
[17:00:36.073] Packages: <none>
[17:00:36.073] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:36.073] Resolved: TRUE
[17:00:36.073] Value: 320 bytes of class ‘list’
[17:00:36.073] Early signaling: FALSE
[17:00:36.073] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:36.073] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:00:36.074] Chunk #1 of 1 ... DONE
[17:00:36.074] Launching 1 futures (chunks) ... DONE
[17:00:36.074] Resolving 1 futures (chunks) ...
[17:00:36.074] resolve() on list ...
[17:00:36.074]  recursive: 0
[17:00:36.074]  length: 1
[17:00:36.074] 
[17:00:36.074] resolved() for ‘SequentialFuture’ ...
[17:00:36.075] - state: ‘finished’
[17:00:36.075] - run: TRUE
[17:00:36.075] - result: ‘FutureResult’
[17:00:36.075] resolved() for ‘SequentialFuture’ ... done
[17:00:36.075] Future #1
[17:00:36.075] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:00:36.075] - nx: 1
[17:00:36.075] - relay: TRUE
[17:00:36.075] - stdout: TRUE
[17:00:36.075] - signal: TRUE
[17:00:36.076] - resignal: FALSE
[17:00:36.076] - force: TRUE
[17:00:36.076] - relayed: [n=1] FALSE
[17:00:36.076] - queued futures: [n=1] FALSE
[17:00:36.076]  - until=1
[17:00:36.076]  - relaying element #1
[17:00:36.076] - relayed: [n=1] TRUE
[17:00:36.076] - queued futures: [n=1] TRUE
[17:00:36.076] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:00:36.076]  length: 0 (resolved future 1)
[17:00:36.077] Relaying remaining futures
[17:00:36.077] signalConditionsASAP(NULL, pos=0) ...
[17:00:36.077] - nx: 1
[17:00:36.077] - relay: TRUE
[17:00:36.077] - stdout: TRUE
[17:00:36.077] - signal: TRUE
[17:00:36.077] - resignal: FALSE
[17:00:36.077] - force: TRUE
[17:00:36.077] - relayed: [n=1] TRUE
[17:00:36.077] - queued futures: [n=1] TRUE
 - flush all
[17:00:36.077] - relayed: [n=1] TRUE
[17:00:36.079] - queued futures: [n=1] TRUE
[17:00:36.079] signalConditionsASAP(NULL, pos=0) ... done
[17:00:36.080] resolve() on list ... DONE
[17:00:36.080]  - Number of value chunks collected: 1
[17:00:36.080] Resolving 1 futures (chunks) ... DONE
[17:00:36.080] Reducing values from 1 chunks ...
[17:00:36.080]  - Number of values collected after concatenation: 5
[17:00:36.080]  - Number of values expected: 5
[17:00:36.080] Reducing values from 1 chunks ... DONE
[17:00:36.080] future_lapply() ... DONE
[17:00:36.081] plan(): Setting new future strategy stack:
[17:00:36.081] List of future strategies:
[17:00:36.081] 1. sequential:
[17:00:36.081]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:36.081]    - tweaked: FALSE
[17:00:36.081]    - call: plan(sequential)
[17:00:36.081] plan(): nbrOfWorkers() = 1
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[17:00:36.082] plan(): Setting new future strategy stack:
[17:00:36.082] List of future strategies:
[17:00:36.082] 1. multicore:
[17:00:36.082]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:00:36.082]    - tweaked: FALSE
[17:00:36.082]    - call: plan(strategy)
[17:00:36.086] plan(): nbrOfWorkers() = 2
[17:00:36.086] future_lapply() ...
[17:00:36.086] Generating random seeds ...
[17:00:36.087] Generating random seed streams for 5 elements ...
[17:00:36.087] Generating random seed streams for 5 elements ... DONE
[17:00:36.087] Generating random seeds ... DONE
[17:00:36.087] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:00:36.092] Number of chunks: 2
[17:00:36.092] getGlobalsAndPackagesXApply() ...
[17:00:36.092]  - future.globals: TRUE
[17:00:36.092] getGlobalsAndPackages() ...
[17:00:36.093] Searching for globals...
[17:00:36.094] - globals found: [2] ‘FUN’, ‘sample’
[17:00:36.094] Searching for globals ... DONE
[17:00:36.094] Resolving globals: FALSE
[17:00:36.094] The total size of the 1 globals is 616 bytes (616 bytes)
[17:00:36.095] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:00:36.095] - globals: [1] ‘FUN’
[17:00:36.095] 
[17:00:36.095] getGlobalsAndPackages() ... DONE
[17:00:36.095]  - globals found/used: [n=1] ‘FUN’
[17:00:36.095]  - needed namespaces: [n=0] 
[17:00:36.095] Finding globals ... DONE
[17:00:36.095]  - use_args: TRUE
[17:00:36.095]  - Getting '...' globals ...
[17:00:36.096] resolve() on list ...
[17:00:36.096]  recursive: 0
[17:00:36.096]  length: 1
[17:00:36.096]  elements: ‘...’
[17:00:36.096]  length: 0 (resolved future 1)
[17:00:36.096] resolve() on list ... DONE
[17:00:36.096]    - '...' content: [n=0] 
[17:00:36.096] List of 1
[17:00:36.096]  $ ...: list()
[17:00:36.096]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.096]  - attr(*, "where")=List of 1
[17:00:36.096]   ..$ ...:<environment: 0x55856151d1a8> 
[17:00:36.096]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.096]  - attr(*, "resolved")= logi TRUE
[17:00:36.096]  - attr(*, "total_size")= num NA
[17:00:36.099]  - Getting '...' globals ... DONE
[17:00:36.099] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:00:36.099] List of 2
[17:00:36.099]  $ ...future.FUN:function (...)  
[17:00:36.099]  $ ...          : list()
[17:00:36.099]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.099]  - attr(*, "where")=List of 2
[17:00:36.099]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:00:36.099]   ..$ ...          :<environment: 0x55856151d1a8> 
[17:00:36.099]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.099]  - attr(*, "resolved")= logi FALSE
[17:00:36.099]  - attr(*, "total_size")= num 616
[17:00:36.102] Packages to be attached in all futures: [n=0] 
[17:00:36.102] getGlobalsAndPackagesXApply() ... DONE
[17:00:36.102] Number of futures (= number of chunks): 2
[17:00:36.102] Launching 2 futures (chunks) ...
[17:00:36.102] Chunk #1 of 2 ...
[17:00:36.102]  - Finding globals in 'X' for chunk #1 ...
[17:00:36.103] getGlobalsAndPackages() ...
[17:00:36.103] Searching for globals...
[17:00:36.103] 
[17:00:36.103] Searching for globals ... DONE
[17:00:36.103] - globals: [0] <none>
[17:00:36.103] getGlobalsAndPackages() ... DONE
[17:00:36.103]    + additional globals found: [n=0] 
[17:00:36.103]    + additional namespaces needed: [n=0] 
[17:00:36.104]  - Finding globals in 'X' for chunk #1 ... DONE
[17:00:36.104]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:36.104]  - seeds: [2] <seeds>
[17:00:36.104]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.104] getGlobalsAndPackages() ...
[17:00:36.104] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.104] Resolving globals: FALSE
[17:00:36.104] Tweak future expression to call with '...' arguments ...
[17:00:36.104] {
[17:00:36.104]     do.call(function(...) {
[17:00:36.104]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.104]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.104]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.104]             on.exit(options(oopts), add = TRUE)
[17:00:36.104]         }
[17:00:36.104]         {
[17:00:36.104]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.104]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.104]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.104]                   envir = globalenv(), inherits = FALSE)
[17:00:36.104]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.104]             })
[17:00:36.104]         }
[17:00:36.104]     }, args = future.call.arguments)
[17:00:36.104] }
[17:00:36.105] Tweak future expression to call with '...' arguments ... DONE
[17:00:36.105] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.105] 
[17:00:36.105] getGlobalsAndPackages() ... DONE
[17:00:36.105] run() for ‘Future’ ...
[17:00:36.106] - state: ‘created’
[17:00:36.106] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:00:36.109] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.110] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:00:36.110]   - Field: ‘label’
[17:00:36.110]   - Field: ‘local’
[17:00:36.110]   - Field: ‘owner’
[17:00:36.110]   - Field: ‘envir’
[17:00:36.110]   - Field: ‘workers’
[17:00:36.110]   - Field: ‘packages’
[17:00:36.110]   - Field: ‘gc’
[17:00:36.110]   - Field: ‘job’
[17:00:36.110]   - Field: ‘conditions’
[17:00:36.111]   - Field: ‘expr’
[17:00:36.111]   - Field: ‘uuid’
[17:00:36.111]   - Field: ‘seed’
[17:00:36.111]   - Field: ‘version’
[17:00:36.111]   - Field: ‘result’
[17:00:36.111]   - Field: ‘asynchronous’
[17:00:36.111]   - Field: ‘calls’
[17:00:36.111]   - Field: ‘globals’
[17:00:36.111]   - Field: ‘stdout’
[17:00:36.113]   - Field: ‘earlySignal’
[17:00:36.113]   - Field: ‘lazy’
[17:00:36.114]   - Field: ‘state’
[17:00:36.114] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:00:36.114] - Launch lazy future ...
[17:00:36.115] Packages needed by the future expression (n = 0): <none>
[17:00:36.115] Packages needed by future strategies (n = 0): <none>
[17:00:36.115] {
[17:00:36.115]     {
[17:00:36.115]         {
[17:00:36.115]             ...future.startTime <- base::Sys.time()
[17:00:36.115]             {
[17:00:36.115]                 {
[17:00:36.115]                   {
[17:00:36.115]                     {
[17:00:36.115]                       base::local({
[17:00:36.115]                         has_future <- base::requireNamespace("future", 
[17:00:36.115]                           quietly = TRUE)
[17:00:36.115]                         if (has_future) {
[17:00:36.115]                           ns <- base::getNamespace("future")
[17:00:36.115]                           version <- ns[[".package"]][["version"]]
[17:00:36.115]                           if (is.null(version)) 
[17:00:36.115]                             version <- utils::packageVersion("future")
[17:00:36.115]                         }
[17:00:36.115]                         else {
[17:00:36.115]                           version <- NULL
[17:00:36.115]                         }
[17:00:36.115]                         if (!has_future || version < "1.8.0") {
[17:00:36.115]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:36.115]                             "", base::R.version$version.string), 
[17:00:36.115]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:36.115]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:36.115]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:36.115]                               "release", "version")], collapse = " "), 
[17:00:36.115]                             hostname = base::Sys.info()[["nodename"]])
[17:00:36.115]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:36.115]                             info)
[17:00:36.115]                           info <- base::paste(info, collapse = "; ")
[17:00:36.115]                           if (!has_future) {
[17:00:36.115]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:36.115]                               info)
[17:00:36.115]                           }
[17:00:36.115]                           else {
[17:00:36.115]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:36.115]                               info, version)
[17:00:36.115]                           }
[17:00:36.115]                           base::stop(msg)
[17:00:36.115]                         }
[17:00:36.115]                       })
[17:00:36.115]                     }
[17:00:36.115]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:36.115]                     base::options(mc.cores = 1L)
[17:00:36.115]                   }
[17:00:36.115]                   ...future.strategy.old <- future::plan("list")
[17:00:36.115]                   options(future.plan = NULL)
[17:00:36.115]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.115]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:36.115]                 }
[17:00:36.115]                 ...future.workdir <- getwd()
[17:00:36.115]             }
[17:00:36.115]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:36.115]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:36.115]         }
[17:00:36.115]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:36.115]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:36.115]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:36.115]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:36.115]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:36.115]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:36.115]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:36.115]             base::names(...future.oldOptions))
[17:00:36.115]     }
[17:00:36.115]     if (FALSE) {
[17:00:36.115]     }
[17:00:36.115]     else {
[17:00:36.115]         if (TRUE) {
[17:00:36.115]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:36.115]                 open = "w")
[17:00:36.115]         }
[17:00:36.115]         else {
[17:00:36.115]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:36.115]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:36.115]         }
[17:00:36.115]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:36.115]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:36.115]             base::sink(type = "output", split = FALSE)
[17:00:36.115]             base::close(...future.stdout)
[17:00:36.115]         }, add = TRUE)
[17:00:36.115]     }
[17:00:36.115]     ...future.frame <- base::sys.nframe()
[17:00:36.115]     ...future.conditions <- base::list()
[17:00:36.115]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:36.115]     if (FALSE) {
[17:00:36.115]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:36.115]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:36.115]     }
[17:00:36.115]     ...future.result <- base::tryCatch({
[17:00:36.115]         base::withCallingHandlers({
[17:00:36.115]             ...future.value <- base::withVisible(base::local({
[17:00:36.115]                 withCallingHandlers({
[17:00:36.115]                   {
[17:00:36.115]                     do.call(function(...) {
[17:00:36.115]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.115]                       if (!identical(...future.globals.maxSize.org, 
[17:00:36.115]                         ...future.globals.maxSize)) {
[17:00:36.115]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.115]                         on.exit(options(oopts), add = TRUE)
[17:00:36.115]                       }
[17:00:36.115]                       {
[17:00:36.115]                         lapply(seq_along(...future.elements_ii), 
[17:00:36.115]                           FUN = function(jj) {
[17:00:36.115]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.115]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.115]                               envir = globalenv(), inherits = FALSE)
[17:00:36.115]                             ...future.FUN(...future.X_jj, ...)
[17:00:36.115]                           })
[17:00:36.115]                       }
[17:00:36.115]                     }, args = future.call.arguments)
[17:00:36.115]                   }
[17:00:36.115]                 }, immediateCondition = function(cond) {
[17:00:36.115]                   save_rds <- function (object, pathname, ...) 
[17:00:36.115]                   {
[17:00:36.115]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:00:36.115]                     if (file_test("-f", pathname_tmp)) {
[17:00:36.115]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.115]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:00:36.115]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.115]                         fi_tmp[["mtime"]])
[17:00:36.115]                     }
[17:00:36.115]                     tryCatch({
[17:00:36.115]                       saveRDS(object, file = pathname_tmp, ...)
[17:00:36.115]                     }, error = function(ex) {
[17:00:36.115]                       msg <- conditionMessage(ex)
[17:00:36.115]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.115]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:00:36.115]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.115]                         fi_tmp[["mtime"]], msg)
[17:00:36.115]                       ex$message <- msg
[17:00:36.115]                       stop(ex)
[17:00:36.115]                     })
[17:00:36.115]                     stopifnot(file_test("-f", pathname_tmp))
[17:00:36.115]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:00:36.115]                     if (!res || file_test("-f", pathname_tmp)) {
[17:00:36.115]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.115]                       fi <- file.info(pathname)
[17:00:36.115]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:00:36.115]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.115]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:00:36.115]                         fi[["size"]], fi[["mtime"]])
[17:00:36.115]                       stop(msg)
[17:00:36.115]                     }
[17:00:36.115]                     invisible(pathname)
[17:00:36.115]                   }
[17:00:36.115]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:00:36.115]                     rootPath = tempdir()) 
[17:00:36.115]                   {
[17:00:36.115]                     obj <- list(time = Sys.time(), condition = cond)
[17:00:36.115]                     file <- tempfile(pattern = class(cond)[1], 
[17:00:36.115]                       tmpdir = path, fileext = ".rds")
[17:00:36.115]                     save_rds(obj, file)
[17:00:36.115]                   }
[17:00:36.115]                   saveImmediateCondition(cond, path = "/tmp/Rtmp7B74IQ/.future/immediateConditions")
[17:00:36.115]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.115]                   {
[17:00:36.115]                     inherits <- base::inherits
[17:00:36.115]                     invokeRestart <- base::invokeRestart
[17:00:36.115]                     is.null <- base::is.null
[17:00:36.115]                     muffled <- FALSE
[17:00:36.115]                     if (inherits(cond, "message")) {
[17:00:36.115]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:36.115]                       if (muffled) 
[17:00:36.115]                         invokeRestart("muffleMessage")
[17:00:36.115]                     }
[17:00:36.115]                     else if (inherits(cond, "warning")) {
[17:00:36.115]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:36.115]                       if (muffled) 
[17:00:36.115]                         invokeRestart("muffleWarning")
[17:00:36.115]                     }
[17:00:36.115]                     else if (inherits(cond, "condition")) {
[17:00:36.115]                       if (!is.null(pattern)) {
[17:00:36.115]                         computeRestarts <- base::computeRestarts
[17:00:36.115]                         grepl <- base::grepl
[17:00:36.115]                         restarts <- computeRestarts(cond)
[17:00:36.115]                         for (restart in restarts) {
[17:00:36.115]                           name <- restart$name
[17:00:36.115]                           if (is.null(name)) 
[17:00:36.115]                             next
[17:00:36.115]                           if (!grepl(pattern, name)) 
[17:00:36.115]                             next
[17:00:36.115]                           invokeRestart(restart)
[17:00:36.115]                           muffled <- TRUE
[17:00:36.115]                           break
[17:00:36.115]                         }
[17:00:36.115]                       }
[17:00:36.115]                     }
[17:00:36.115]                     invisible(muffled)
[17:00:36.115]                   }
[17:00:36.115]                   muffleCondition(cond)
[17:00:36.115]                 })
[17:00:36.115]             }))
[17:00:36.115]             future::FutureResult(value = ...future.value$value, 
[17:00:36.115]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.115]                   ...future.rng), globalenv = if (FALSE) 
[17:00:36.115]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:36.115]                     ...future.globalenv.names))
[17:00:36.115]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:36.115]         }, condition = base::local({
[17:00:36.115]             c <- base::c
[17:00:36.115]             inherits <- base::inherits
[17:00:36.115]             invokeRestart <- base::invokeRestart
[17:00:36.115]             length <- base::length
[17:00:36.115]             list <- base::list
[17:00:36.115]             seq.int <- base::seq.int
[17:00:36.115]             signalCondition <- base::signalCondition
[17:00:36.115]             sys.calls <- base::sys.calls
[17:00:36.115]             `[[` <- base::`[[`
[17:00:36.115]             `+` <- base::`+`
[17:00:36.115]             `<<-` <- base::`<<-`
[17:00:36.115]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:36.115]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:36.115]                   3L)]
[17:00:36.115]             }
[17:00:36.115]             function(cond) {
[17:00:36.115]                 is_error <- inherits(cond, "error")
[17:00:36.115]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:36.115]                   NULL)
[17:00:36.115]                 if (is_error) {
[17:00:36.115]                   sessionInformation <- function() {
[17:00:36.115]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:36.115]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:36.115]                       search = base::search(), system = base::Sys.info())
[17:00:36.115]                   }
[17:00:36.115]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.115]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:36.115]                     cond$call), session = sessionInformation(), 
[17:00:36.115]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:36.115]                   signalCondition(cond)
[17:00:36.115]                 }
[17:00:36.115]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:36.115]                 "immediateCondition"))) {
[17:00:36.115]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:36.115]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.115]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:36.115]                   if (TRUE && !signal) {
[17:00:36.115]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.115]                     {
[17:00:36.115]                       inherits <- base::inherits
[17:00:36.115]                       invokeRestart <- base::invokeRestart
[17:00:36.115]                       is.null <- base::is.null
[17:00:36.115]                       muffled <- FALSE
[17:00:36.115]                       if (inherits(cond, "message")) {
[17:00:36.115]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.115]                         if (muffled) 
[17:00:36.115]                           invokeRestart("muffleMessage")
[17:00:36.115]                       }
[17:00:36.115]                       else if (inherits(cond, "warning")) {
[17:00:36.115]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.115]                         if (muffled) 
[17:00:36.115]                           invokeRestart("muffleWarning")
[17:00:36.115]                       }
[17:00:36.115]                       else if (inherits(cond, "condition")) {
[17:00:36.115]                         if (!is.null(pattern)) {
[17:00:36.115]                           computeRestarts <- base::computeRestarts
[17:00:36.115]                           grepl <- base::grepl
[17:00:36.115]                           restarts <- computeRestarts(cond)
[17:00:36.115]                           for (restart in restarts) {
[17:00:36.115]                             name <- restart$name
[17:00:36.115]                             if (is.null(name)) 
[17:00:36.115]                               next
[17:00:36.115]                             if (!grepl(pattern, name)) 
[17:00:36.115]                               next
[17:00:36.115]                             invokeRestart(restart)
[17:00:36.115]                             muffled <- TRUE
[17:00:36.115]                             break
[17:00:36.115]                           }
[17:00:36.115]                         }
[17:00:36.115]                       }
[17:00:36.115]                       invisible(muffled)
[17:00:36.115]                     }
[17:00:36.115]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.115]                   }
[17:00:36.115]                 }
[17:00:36.115]                 else {
[17:00:36.115]                   if (TRUE) {
[17:00:36.115]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.115]                     {
[17:00:36.115]                       inherits <- base::inherits
[17:00:36.115]                       invokeRestart <- base::invokeRestart
[17:00:36.115]                       is.null <- base::is.null
[17:00:36.115]                       muffled <- FALSE
[17:00:36.115]                       if (inherits(cond, "message")) {
[17:00:36.115]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.115]                         if (muffled) 
[17:00:36.115]                           invokeRestart("muffleMessage")
[17:00:36.115]                       }
[17:00:36.115]                       else if (inherits(cond, "warning")) {
[17:00:36.115]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.115]                         if (muffled) 
[17:00:36.115]                           invokeRestart("muffleWarning")
[17:00:36.115]                       }
[17:00:36.115]                       else if (inherits(cond, "condition")) {
[17:00:36.115]                         if (!is.null(pattern)) {
[17:00:36.115]                           computeRestarts <- base::computeRestarts
[17:00:36.115]                           grepl <- base::grepl
[17:00:36.115]                           restarts <- computeRestarts(cond)
[17:00:36.115]                           for (restart in restarts) {
[17:00:36.115]                             name <- restart$name
[17:00:36.115]                             if (is.null(name)) 
[17:00:36.115]                               next
[17:00:36.115]                             if (!grepl(pattern, name)) 
[17:00:36.115]                               next
[17:00:36.115]                             invokeRestart(restart)
[17:00:36.115]                             muffled <- TRUE
[17:00:36.115]                             break
[17:00:36.115]                           }
[17:00:36.115]                         }
[17:00:36.115]                       }
[17:00:36.115]                       invisible(muffled)
[17:00:36.115]                     }
[17:00:36.115]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.115]                   }
[17:00:36.115]                 }
[17:00:36.115]             }
[17:00:36.115]         }))
[17:00:36.115]     }, error = function(ex) {
[17:00:36.115]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:36.115]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.115]                 ...future.rng), started = ...future.startTime, 
[17:00:36.115]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:36.115]             version = "1.8"), class = "FutureResult")
[17:00:36.115]     }, finally = {
[17:00:36.115]         if (!identical(...future.workdir, getwd())) 
[17:00:36.115]             setwd(...future.workdir)
[17:00:36.115]         {
[17:00:36.115]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:36.115]                 ...future.oldOptions$nwarnings <- NULL
[17:00:36.115]             }
[17:00:36.115]             base::options(...future.oldOptions)
[17:00:36.115]             if (.Platform$OS.type == "windows") {
[17:00:36.115]                 old_names <- names(...future.oldEnvVars)
[17:00:36.115]                 envs <- base::Sys.getenv()
[17:00:36.115]                 names <- names(envs)
[17:00:36.115]                 common <- intersect(names, old_names)
[17:00:36.115]                 added <- setdiff(names, old_names)
[17:00:36.115]                 removed <- setdiff(old_names, names)
[17:00:36.115]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:36.115]                   envs[common]]
[17:00:36.115]                 NAMES <- toupper(changed)
[17:00:36.115]                 args <- list()
[17:00:36.115]                 for (kk in seq_along(NAMES)) {
[17:00:36.115]                   name <- changed[[kk]]
[17:00:36.115]                   NAME <- NAMES[[kk]]
[17:00:36.115]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.115]                     next
[17:00:36.115]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.115]                 }
[17:00:36.115]                 NAMES <- toupper(added)
[17:00:36.115]                 for (kk in seq_along(NAMES)) {
[17:00:36.115]                   name <- added[[kk]]
[17:00:36.115]                   NAME <- NAMES[[kk]]
[17:00:36.115]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.115]                     next
[17:00:36.115]                   args[[name]] <- ""
[17:00:36.115]                 }
[17:00:36.115]                 NAMES <- toupper(removed)
[17:00:36.115]                 for (kk in seq_along(NAMES)) {
[17:00:36.115]                   name <- removed[[kk]]
[17:00:36.115]                   NAME <- NAMES[[kk]]
[17:00:36.115]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.115]                     next
[17:00:36.115]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.115]                 }
[17:00:36.115]                 if (length(args) > 0) 
[17:00:36.115]                   base::do.call(base::Sys.setenv, args = args)
[17:00:36.115]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:36.115]             }
[17:00:36.115]             else {
[17:00:36.115]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:36.115]             }
[17:00:36.115]             {
[17:00:36.115]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:36.115]                   0L) {
[17:00:36.115]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:36.115]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:36.115]                   base::options(opts)
[17:00:36.115]                 }
[17:00:36.115]                 {
[17:00:36.115]                   {
[17:00:36.115]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:36.115]                     NULL
[17:00:36.115]                   }
[17:00:36.115]                   options(future.plan = NULL)
[17:00:36.115]                   if (is.na(NA_character_)) 
[17:00:36.115]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.115]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:36.115]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:36.115]                     .init = FALSE)
[17:00:36.115]                 }
[17:00:36.115]             }
[17:00:36.115]         }
[17:00:36.115]     })
[17:00:36.115]     if (TRUE) {
[17:00:36.115]         base::sink(type = "output", split = FALSE)
[17:00:36.115]         if (TRUE) {
[17:00:36.115]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:36.115]         }
[17:00:36.115]         else {
[17:00:36.115]             ...future.result["stdout"] <- base::list(NULL)
[17:00:36.115]         }
[17:00:36.115]         base::close(...future.stdout)
[17:00:36.115]         ...future.stdout <- NULL
[17:00:36.115]     }
[17:00:36.115]     ...future.result$conditions <- ...future.conditions
[17:00:36.115]     ...future.result$finished <- base::Sys.time()
[17:00:36.115]     ...future.result
[17:00:36.115] }
[17:00:36.118] assign_globals() ...
[17:00:36.118] List of 5
[17:00:36.118]  $ ...future.FUN            :function (...)  
[17:00:36.118]  $ future.call.arguments    : list()
[17:00:36.118]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.118]  $ ...future.elements_ii    :List of 2
[17:00:36.118]   ..$ : int 0
[17:00:36.118]   ..$ : int 0
[17:00:36.118]  $ ...future.seeds_ii       :List of 2
[17:00:36.118]   ..$ : int [1:7] 10407 800596211 191202253 -1245543361 -1911991084 -470201595 630973807
[17:00:36.118]   ..$ : int [1:7] 10407 336362669 -1847432762 -712550016 1068830663 1731026700 1489470838
[17:00:36.118]  $ ...future.globals.maxSize: NULL
[17:00:36.118]  - attr(*, "where")=List of 5
[17:00:36.118]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:00:36.118]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:00:36.118]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:00:36.118]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:00:36.118]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:00:36.118]  - attr(*, "resolved")= logi FALSE
[17:00:36.118]  - attr(*, "total_size")= num 616
[17:00:36.118]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.118]  - attr(*, "already-done")= logi TRUE
[17:00:36.123] - reassign environment for ‘...future.FUN’
[17:00:36.123] - copied ‘...future.FUN’ to environment
[17:00:36.124] - copied ‘future.call.arguments’ to environment
[17:00:36.124] - copied ‘...future.elements_ii’ to environment
[17:00:36.124] - copied ‘...future.seeds_ii’ to environment
[17:00:36.124] - copied ‘...future.globals.maxSize’ to environment
[17:00:36.124] assign_globals() ... done
[17:00:36.124] requestCore(): workers = 2
[17:00:36.127] MulticoreFuture started
[17:00:36.128] - Launch lazy future ... done
[17:00:36.128] run() for ‘MulticoreFuture’ ... done
[17:00:36.128] plan(): Setting new future strategy stack:
[17:00:36.128] Created future:
[17:00:36.128] List of future strategies:
[17:00:36.128] 1. sequential:
[17:00:36.128]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:36.128]    - tweaked: FALSE
[17:00:36.128]    - call: NULL
[17:00:36.129] plan(): nbrOfWorkers() = 1
[17:00:36.132] plan(): Setting new future strategy stack:
[17:00:36.132] List of future strategies:
[17:00:36.132] 1. multicore:
[17:00:36.132]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:00:36.132]    - tweaked: FALSE
[17:00:36.132]    - call: plan(strategy)
[17:00:36.137] plan(): nbrOfWorkers() = 2
[17:00:36.129] MulticoreFuture:
[17:00:36.129] Label: ‘future_replicate-1’
[17:00:36.129] Expression:
[17:00:36.129] {
[17:00:36.129]     do.call(function(...) {
[17:00:36.129]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.129]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.129]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.129]             on.exit(options(oopts), add = TRUE)
[17:00:36.129]         }
[17:00:36.129]         {
[17:00:36.129]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.129]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.129]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.129]                   envir = globalenv(), inherits = FALSE)
[17:00:36.129]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.129]             })
[17:00:36.129]         }
[17:00:36.129]     }, args = future.call.arguments)
[17:00:36.129] }
[17:00:36.129] Lazy evaluation: FALSE
[17:00:36.129] Asynchronous evaluation: TRUE
[17:00:36.129] Local evaluation: TRUE
[17:00:36.129] Environment: R_GlobalEnv
[17:00:36.129] Capture standard output: TRUE
[17:00:36.129] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:36.129] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:36.129] Packages: <none>
[17:00:36.129] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:36.129] Resolved: TRUE
[17:00:36.129] Value: <not collected>
[17:00:36.129] Conditions captured: <none>
[17:00:36.129] Early signaling: FALSE
[17:00:36.129] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:36.129] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.138] Chunk #1 of 2 ... DONE
[17:00:36.138] Chunk #2 of 2 ...
[17:00:36.138]  - Finding globals in 'X' for chunk #2 ...
[17:00:36.139] getGlobalsAndPackages() ...
[17:00:36.139] Searching for globals...
[17:00:36.139] 
[17:00:36.139] Searching for globals ... DONE
[17:00:36.139] - globals: [0] <none>
[17:00:36.140] getGlobalsAndPackages() ... DONE
[17:00:36.140]    + additional globals found: [n=0] 
[17:00:36.140]    + additional namespaces needed: [n=0] 
[17:00:36.140]  - Finding globals in 'X' for chunk #2 ... DONE
[17:00:36.140]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:36.140]  - seeds: [3] <seeds>
[17:00:36.140]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.141] getGlobalsAndPackages() ...
[17:00:36.141] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.141] Resolving globals: FALSE
[17:00:36.141] Tweak future expression to call with '...' arguments ...
[17:00:36.141] {
[17:00:36.141]     do.call(function(...) {
[17:00:36.141]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.141]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.141]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.141]             on.exit(options(oopts), add = TRUE)
[17:00:36.141]         }
[17:00:36.141]         {
[17:00:36.141]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.141]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.141]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.141]                   envir = globalenv(), inherits = FALSE)
[17:00:36.141]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.141]             })
[17:00:36.141]         }
[17:00:36.141]     }, args = future.call.arguments)
[17:00:36.141] }
[17:00:36.142] Tweak future expression to call with '...' arguments ... DONE
[17:00:36.142] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.142] 
[17:00:36.143] getGlobalsAndPackages() ... DONE
[17:00:36.143] run() for ‘Future’ ...
[17:00:36.143] - state: ‘created’
[17:00:36.144] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:00:36.148] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.148] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:00:36.148]   - Field: ‘label’
[17:00:36.149]   - Field: ‘local’
[17:00:36.149]   - Field: ‘owner’
[17:00:36.149]   - Field: ‘envir’
[17:00:36.149]   - Field: ‘workers’
[17:00:36.149]   - Field: ‘packages’
[17:00:36.149]   - Field: ‘gc’
[17:00:36.149]   - Field: ‘job’
[17:00:36.150]   - Field: ‘conditions’
[17:00:36.150]   - Field: ‘expr’
[17:00:36.150]   - Field: ‘uuid’
[17:00:36.150]   - Field: ‘seed’
[17:00:36.150]   - Field: ‘version’
[17:00:36.150]   - Field: ‘result’
[17:00:36.150]   - Field: ‘asynchronous’
[17:00:36.150]   - Field: ‘calls’
[17:00:36.151]   - Field: ‘globals’
[17:00:36.151]   - Field: ‘stdout’
[17:00:36.151]   - Field: ‘earlySignal’
[17:00:36.151]   - Field: ‘lazy’
[17:00:36.151]   - Field: ‘state’
[17:00:36.151] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:00:36.151] - Launch lazy future ...
[17:00:36.152] Packages needed by the future expression (n = 0): <none>
[17:00:36.152] Packages needed by future strategies (n = 0): <none>
[17:00:36.153] {
[17:00:36.153]     {
[17:00:36.153]         {
[17:00:36.153]             ...future.startTime <- base::Sys.time()
[17:00:36.153]             {
[17:00:36.153]                 {
[17:00:36.153]                   {
[17:00:36.153]                     {
[17:00:36.153]                       base::local({
[17:00:36.153]                         has_future <- base::requireNamespace("future", 
[17:00:36.153]                           quietly = TRUE)
[17:00:36.153]                         if (has_future) {
[17:00:36.153]                           ns <- base::getNamespace("future")
[17:00:36.153]                           version <- ns[[".package"]][["version"]]
[17:00:36.153]                           if (is.null(version)) 
[17:00:36.153]                             version <- utils::packageVersion("future")
[17:00:36.153]                         }
[17:00:36.153]                         else {
[17:00:36.153]                           version <- NULL
[17:00:36.153]                         }
[17:00:36.153]                         if (!has_future || version < "1.8.0") {
[17:00:36.153]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:36.153]                             "", base::R.version$version.string), 
[17:00:36.153]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:36.153]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:36.153]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:36.153]                               "release", "version")], collapse = " "), 
[17:00:36.153]                             hostname = base::Sys.info()[["nodename"]])
[17:00:36.153]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:36.153]                             info)
[17:00:36.153]                           info <- base::paste(info, collapse = "; ")
[17:00:36.153]                           if (!has_future) {
[17:00:36.153]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:36.153]                               info)
[17:00:36.153]                           }
[17:00:36.153]                           else {
[17:00:36.153]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:36.153]                               info, version)
[17:00:36.153]                           }
[17:00:36.153]                           base::stop(msg)
[17:00:36.153]                         }
[17:00:36.153]                       })
[17:00:36.153]                     }
[17:00:36.153]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:36.153]                     base::options(mc.cores = 1L)
[17:00:36.153]                   }
[17:00:36.153]                   ...future.strategy.old <- future::plan("list")
[17:00:36.153]                   options(future.plan = NULL)
[17:00:36.153]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.153]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:36.153]                 }
[17:00:36.153]                 ...future.workdir <- getwd()
[17:00:36.153]             }
[17:00:36.153]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:36.153]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:36.153]         }
[17:00:36.153]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:36.153]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:36.153]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:36.153]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:36.153]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:36.153]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:36.153]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:36.153]             base::names(...future.oldOptions))
[17:00:36.153]     }
[17:00:36.153]     if (FALSE) {
[17:00:36.153]     }
[17:00:36.153]     else {
[17:00:36.153]         if (TRUE) {
[17:00:36.153]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:36.153]                 open = "w")
[17:00:36.153]         }
[17:00:36.153]         else {
[17:00:36.153]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:36.153]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:36.153]         }
[17:00:36.153]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:36.153]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:36.153]             base::sink(type = "output", split = FALSE)
[17:00:36.153]             base::close(...future.stdout)
[17:00:36.153]         }, add = TRUE)
[17:00:36.153]     }
[17:00:36.153]     ...future.frame <- base::sys.nframe()
[17:00:36.153]     ...future.conditions <- base::list()
[17:00:36.153]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:36.153]     if (FALSE) {
[17:00:36.153]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:36.153]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:36.153]     }
[17:00:36.153]     ...future.result <- base::tryCatch({
[17:00:36.153]         base::withCallingHandlers({
[17:00:36.153]             ...future.value <- base::withVisible(base::local({
[17:00:36.153]                 withCallingHandlers({
[17:00:36.153]                   {
[17:00:36.153]                     do.call(function(...) {
[17:00:36.153]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.153]                       if (!identical(...future.globals.maxSize.org, 
[17:00:36.153]                         ...future.globals.maxSize)) {
[17:00:36.153]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.153]                         on.exit(options(oopts), add = TRUE)
[17:00:36.153]                       }
[17:00:36.153]                       {
[17:00:36.153]                         lapply(seq_along(...future.elements_ii), 
[17:00:36.153]                           FUN = function(jj) {
[17:00:36.153]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.153]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.153]                               envir = globalenv(), inherits = FALSE)
[17:00:36.153]                             ...future.FUN(...future.X_jj, ...)
[17:00:36.153]                           })
[17:00:36.153]                       }
[17:00:36.153]                     }, args = future.call.arguments)
[17:00:36.153]                   }
[17:00:36.153]                 }, immediateCondition = function(cond) {
[17:00:36.153]                   save_rds <- function (object, pathname, ...) 
[17:00:36.153]                   {
[17:00:36.153]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:00:36.153]                     if (file_test("-f", pathname_tmp)) {
[17:00:36.153]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.153]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:00:36.153]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.153]                         fi_tmp[["mtime"]])
[17:00:36.153]                     }
[17:00:36.153]                     tryCatch({
[17:00:36.153]                       saveRDS(object, file = pathname_tmp, ...)
[17:00:36.153]                     }, error = function(ex) {
[17:00:36.153]                       msg <- conditionMessage(ex)
[17:00:36.153]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.153]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:00:36.153]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.153]                         fi_tmp[["mtime"]], msg)
[17:00:36.153]                       ex$message <- msg
[17:00:36.153]                       stop(ex)
[17:00:36.153]                     })
[17:00:36.153]                     stopifnot(file_test("-f", pathname_tmp))
[17:00:36.153]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:00:36.153]                     if (!res || file_test("-f", pathname_tmp)) {
[17:00:36.153]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.153]                       fi <- file.info(pathname)
[17:00:36.153]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:00:36.153]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.153]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:00:36.153]                         fi[["size"]], fi[["mtime"]])
[17:00:36.153]                       stop(msg)
[17:00:36.153]                     }
[17:00:36.153]                     invisible(pathname)
[17:00:36.153]                   }
[17:00:36.153]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:00:36.153]                     rootPath = tempdir()) 
[17:00:36.153]                   {
[17:00:36.153]                     obj <- list(time = Sys.time(), condition = cond)
[17:00:36.153]                     file <- tempfile(pattern = class(cond)[1], 
[17:00:36.153]                       tmpdir = path, fileext = ".rds")
[17:00:36.153]                     save_rds(obj, file)
[17:00:36.153]                   }
[17:00:36.153]                   saveImmediateCondition(cond, path = "/tmp/Rtmp7B74IQ/.future/immediateConditions")
[17:00:36.153]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.153]                   {
[17:00:36.153]                     inherits <- base::inherits
[17:00:36.153]                     invokeRestart <- base::invokeRestart
[17:00:36.153]                     is.null <- base::is.null
[17:00:36.153]                     muffled <- FALSE
[17:00:36.153]                     if (inherits(cond, "message")) {
[17:00:36.153]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:36.153]                       if (muffled) 
[17:00:36.153]                         invokeRestart("muffleMessage")
[17:00:36.153]                     }
[17:00:36.153]                     else if (inherits(cond, "warning")) {
[17:00:36.153]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:36.153]                       if (muffled) 
[17:00:36.153]                         invokeRestart("muffleWarning")
[17:00:36.153]                     }
[17:00:36.153]                     else if (inherits(cond, "condition")) {
[17:00:36.153]                       if (!is.null(pattern)) {
[17:00:36.153]                         computeRestarts <- base::computeRestarts
[17:00:36.153]                         grepl <- base::grepl
[17:00:36.153]                         restarts <- computeRestarts(cond)
[17:00:36.153]                         for (restart in restarts) {
[17:00:36.153]                           name <- restart$name
[17:00:36.153]                           if (is.null(name)) 
[17:00:36.153]                             next
[17:00:36.153]                           if (!grepl(pattern, name)) 
[17:00:36.153]                             next
[17:00:36.153]                           invokeRestart(restart)
[17:00:36.153]                           muffled <- TRUE
[17:00:36.153]                           break
[17:00:36.153]                         }
[17:00:36.153]                       }
[17:00:36.153]                     }
[17:00:36.153]                     invisible(muffled)
[17:00:36.153]                   }
[17:00:36.153]                   muffleCondition(cond)
[17:00:36.153]                 })
[17:00:36.153]             }))
[17:00:36.153]             future::FutureResult(value = ...future.value$value, 
[17:00:36.153]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.153]                   ...future.rng), globalenv = if (FALSE) 
[17:00:36.153]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:36.153]                     ...future.globalenv.names))
[17:00:36.153]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:36.153]         }, condition = base::local({
[17:00:36.153]             c <- base::c
[17:00:36.153]             inherits <- base::inherits
[17:00:36.153]             invokeRestart <- base::invokeRestart
[17:00:36.153]             length <- base::length
[17:00:36.153]             list <- base::list
[17:00:36.153]             seq.int <- base::seq.int
[17:00:36.153]             signalCondition <- base::signalCondition
[17:00:36.153]             sys.calls <- base::sys.calls
[17:00:36.153]             `[[` <- base::`[[`
[17:00:36.153]             `+` <- base::`+`
[17:00:36.153]             `<<-` <- base::`<<-`
[17:00:36.153]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:36.153]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:36.153]                   3L)]
[17:00:36.153]             }
[17:00:36.153]             function(cond) {
[17:00:36.153]                 is_error <- inherits(cond, "error")
[17:00:36.153]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:36.153]                   NULL)
[17:00:36.153]                 if (is_error) {
[17:00:36.153]                   sessionInformation <- function() {
[17:00:36.153]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:36.153]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:36.153]                       search = base::search(), system = base::Sys.info())
[17:00:36.153]                   }
[17:00:36.153]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.153]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:36.153]                     cond$call), session = sessionInformation(), 
[17:00:36.153]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:36.153]                   signalCondition(cond)
[17:00:36.153]                 }
[17:00:36.153]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:36.153]                 "immediateCondition"))) {
[17:00:36.153]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:36.153]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.153]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:36.153]                   if (TRUE && !signal) {
[17:00:36.153]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.153]                     {
[17:00:36.153]                       inherits <- base::inherits
[17:00:36.153]                       invokeRestart <- base::invokeRestart
[17:00:36.153]                       is.null <- base::is.null
[17:00:36.153]                       muffled <- FALSE
[17:00:36.153]                       if (inherits(cond, "message")) {
[17:00:36.153]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.153]                         if (muffled) 
[17:00:36.153]                           invokeRestart("muffleMessage")
[17:00:36.153]                       }
[17:00:36.153]                       else if (inherits(cond, "warning")) {
[17:00:36.153]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.153]                         if (muffled) 
[17:00:36.153]                           invokeRestart("muffleWarning")
[17:00:36.153]                       }
[17:00:36.153]                       else if (inherits(cond, "condition")) {
[17:00:36.153]                         if (!is.null(pattern)) {
[17:00:36.153]                           computeRestarts <- base::computeRestarts
[17:00:36.153]                           grepl <- base::grepl
[17:00:36.153]                           restarts <- computeRestarts(cond)
[17:00:36.153]                           for (restart in restarts) {
[17:00:36.153]                             name <- restart$name
[17:00:36.153]                             if (is.null(name)) 
[17:00:36.153]                               next
[17:00:36.153]                             if (!grepl(pattern, name)) 
[17:00:36.153]                               next
[17:00:36.153]                             invokeRestart(restart)
[17:00:36.153]                             muffled <- TRUE
[17:00:36.153]                             break
[17:00:36.153]                           }
[17:00:36.153]                         }
[17:00:36.153]                       }
[17:00:36.153]                       invisible(muffled)
[17:00:36.153]                     }
[17:00:36.153]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.153]                   }
[17:00:36.153]                 }
[17:00:36.153]                 else {
[17:00:36.153]                   if (TRUE) {
[17:00:36.153]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.153]                     {
[17:00:36.153]                       inherits <- base::inherits
[17:00:36.153]                       invokeRestart <- base::invokeRestart
[17:00:36.153]                       is.null <- base::is.null
[17:00:36.153]                       muffled <- FALSE
[17:00:36.153]                       if (inherits(cond, "message")) {
[17:00:36.153]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.153]                         if (muffled) 
[17:00:36.153]                           invokeRestart("muffleMessage")
[17:00:36.153]                       }
[17:00:36.153]                       else if (inherits(cond, "warning")) {
[17:00:36.153]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.153]                         if (muffled) 
[17:00:36.153]                           invokeRestart("muffleWarning")
[17:00:36.153]                       }
[17:00:36.153]                       else if (inherits(cond, "condition")) {
[17:00:36.153]                         if (!is.null(pattern)) {
[17:00:36.153]                           computeRestarts <- base::computeRestarts
[17:00:36.153]                           grepl <- base::grepl
[17:00:36.153]                           restarts <- computeRestarts(cond)
[17:00:36.153]                           for (restart in restarts) {
[17:00:36.153]                             name <- restart$name
[17:00:36.153]                             if (is.null(name)) 
[17:00:36.153]                               next
[17:00:36.153]                             if (!grepl(pattern, name)) 
[17:00:36.153]                               next
[17:00:36.153]                             invokeRestart(restart)
[17:00:36.153]                             muffled <- TRUE
[17:00:36.153]                             break
[17:00:36.153]                           }
[17:00:36.153]                         }
[17:00:36.153]                       }
[17:00:36.153]                       invisible(muffled)
[17:00:36.153]                     }
[17:00:36.153]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.153]                   }
[17:00:36.153]                 }
[17:00:36.153]             }
[17:00:36.153]         }))
[17:00:36.153]     }, error = function(ex) {
[17:00:36.153]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:36.153]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.153]                 ...future.rng), started = ...future.startTime, 
[17:00:36.153]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:36.153]             version = "1.8"), class = "FutureResult")
[17:00:36.153]     }, finally = {
[17:00:36.153]         if (!identical(...future.workdir, getwd())) 
[17:00:36.153]             setwd(...future.workdir)
[17:00:36.153]         {
[17:00:36.153]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:36.153]                 ...future.oldOptions$nwarnings <- NULL
[17:00:36.153]             }
[17:00:36.153]             base::options(...future.oldOptions)
[17:00:36.153]             if (.Platform$OS.type == "windows") {
[17:00:36.153]                 old_names <- names(...future.oldEnvVars)
[17:00:36.153]                 envs <- base::Sys.getenv()
[17:00:36.153]                 names <- names(envs)
[17:00:36.153]                 common <- intersect(names, old_names)
[17:00:36.153]                 added <- setdiff(names, old_names)
[17:00:36.153]                 removed <- setdiff(old_names, names)
[17:00:36.153]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:36.153]                   envs[common]]
[17:00:36.153]                 NAMES <- toupper(changed)
[17:00:36.153]                 args <- list()
[17:00:36.153]                 for (kk in seq_along(NAMES)) {
[17:00:36.153]                   name <- changed[[kk]]
[17:00:36.153]                   NAME <- NAMES[[kk]]
[17:00:36.153]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.153]                     next
[17:00:36.153]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.153]                 }
[17:00:36.153]                 NAMES <- toupper(added)
[17:00:36.153]                 for (kk in seq_along(NAMES)) {
[17:00:36.153]                   name <- added[[kk]]
[17:00:36.153]                   NAME <- NAMES[[kk]]
[17:00:36.153]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.153]                     next
[17:00:36.153]                   args[[name]] <- ""
[17:00:36.153]                 }
[17:00:36.153]                 NAMES <- toupper(removed)
[17:00:36.153]                 for (kk in seq_along(NAMES)) {
[17:00:36.153]                   name <- removed[[kk]]
[17:00:36.153]                   NAME <- NAMES[[kk]]
[17:00:36.153]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.153]                     next
[17:00:36.153]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.153]                 }
[17:00:36.153]                 if (length(args) > 0) 
[17:00:36.153]                   base::do.call(base::Sys.setenv, args = args)
[17:00:36.153]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:36.153]             }
[17:00:36.153]             else {
[17:00:36.153]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:36.153]             }
[17:00:36.153]             {
[17:00:36.153]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:36.153]                   0L) {
[17:00:36.153]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:36.153]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:36.153]                   base::options(opts)
[17:00:36.153]                 }
[17:00:36.153]                 {
[17:00:36.153]                   {
[17:00:36.153]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:36.153]                     NULL
[17:00:36.153]                   }
[17:00:36.153]                   options(future.plan = NULL)
[17:00:36.153]                   if (is.na(NA_character_)) 
[17:00:36.153]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.153]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:36.153]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:36.153]                     .init = FALSE)
[17:00:36.153]                 }
[17:00:36.153]             }
[17:00:36.153]         }
[17:00:36.153]     })
[17:00:36.153]     if (TRUE) {
[17:00:36.153]         base::sink(type = "output", split = FALSE)
[17:00:36.153]         if (TRUE) {
[17:00:36.153]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:36.153]         }
[17:00:36.153]         else {
[17:00:36.153]             ...future.result["stdout"] <- base::list(NULL)
[17:00:36.153]         }
[17:00:36.153]         base::close(...future.stdout)
[17:00:36.153]         ...future.stdout <- NULL
[17:00:36.153]     }
[17:00:36.153]     ...future.result$conditions <- ...future.conditions
[17:00:36.153]     ...future.result$finished <- base::Sys.time()
[17:00:36.153]     ...future.result
[17:00:36.153] }
[17:00:36.156] assign_globals() ...
[17:00:36.156] List of 5
[17:00:36.156]  $ ...future.FUN            :function (...)  
[17:00:36.156]  $ future.call.arguments    : list()
[17:00:36.156]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.156]  $ ...future.elements_ii    :List of 3
[17:00:36.156]   ..$ : int 0
[17:00:36.156]   ..$ : int 0
[17:00:36.156]   ..$ : int 0
[17:00:36.156]  $ ...future.seeds_ii       :List of 3
[17:00:36.156]   ..$ : int [1:7] 10407 2000585943 1277356830 -2089408352 -860958827 226502925 99834792
[17:00:36.156]   ..$ : int [1:7] 10407 -1366366742 -1587533199 -987670999 1146693195 -372746989 -1779846945
[17:00:36.156]   ..$ : int [1:7] 10407 -1326244930 -121340665 862160877 1069041468 -111293265 1245428870
[17:00:36.156]  $ ...future.globals.maxSize: NULL
[17:00:36.156]  - attr(*, "where")=List of 5
[17:00:36.156]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:00:36.156]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:00:36.156]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:00:36.156]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:00:36.156]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:00:36.156]  - attr(*, "resolved")= logi FALSE
[17:00:36.156]  - attr(*, "total_size")= num 616
[17:00:36.156]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.156]  - attr(*, "already-done")= logi TRUE
[17:00:36.169] - reassign environment for ‘...future.FUN’
[17:00:36.169] - copied ‘...future.FUN’ to environment
[17:00:36.169] - copied ‘future.call.arguments’ to environment
[17:00:36.170] - copied ‘...future.elements_ii’ to environment
[17:00:36.170] - copied ‘...future.seeds_ii’ to environment
[17:00:36.170] - copied ‘...future.globals.maxSize’ to environment
[17:00:36.170] assign_globals() ... done
[17:00:36.170] requestCore(): workers = 2
[17:00:36.176] MulticoreFuture started
[17:00:36.176] - Launch lazy future ... done
[17:00:36.177] run() for ‘MulticoreFuture’ ... done
[17:00:36.177] Created future:
[17:00:36.177] plan(): Setting new future strategy stack:
[17:00:36.178] List of future strategies:
[17:00:36.178] 1. sequential:
[17:00:36.178]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:36.178]    - tweaked: FALSE
[17:00:36.178]    - call: NULL
[17:00:36.179] plan(): nbrOfWorkers() = 1
[17:00:36.181] plan(): Setting new future strategy stack:
[17:00:36.181] List of future strategies:
[17:00:36.181] 1. multicore:
[17:00:36.181]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:00:36.181]    - tweaked: FALSE
[17:00:36.181]    - call: plan(strategy)
[17:00:36.186] plan(): nbrOfWorkers() = 2
[17:00:36.177] MulticoreFuture:
[17:00:36.177] Label: ‘future_replicate-2’
[17:00:36.177] Expression:
[17:00:36.177] {
[17:00:36.177]     do.call(function(...) {
[17:00:36.177]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.177]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.177]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.177]             on.exit(options(oopts), add = TRUE)
[17:00:36.177]         }
[17:00:36.177]         {
[17:00:36.177]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.177]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.177]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.177]                   envir = globalenv(), inherits = FALSE)
[17:00:36.177]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.177]             })
[17:00:36.177]         }
[17:00:36.177]     }, args = future.call.arguments)
[17:00:36.177] }
[17:00:36.177] Lazy evaluation: FALSE
[17:00:36.177] Asynchronous evaluation: TRUE
[17:00:36.177] Local evaluation: TRUE
[17:00:36.177] Environment: R_GlobalEnv
[17:00:36.177] Capture standard output: TRUE
[17:00:36.177] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:36.177] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:36.177] Packages: <none>
[17:00:36.177] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:36.177] Resolved: TRUE
[17:00:36.177] Value: <not collected>
[17:00:36.177] Conditions captured: <none>
[17:00:36.177] Early signaling: FALSE
[17:00:36.177] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:36.177] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.187] Chunk #2 of 2 ... DONE
[17:00:36.187] Launching 2 futures (chunks) ... DONE
[17:00:36.188] Resolving 2 futures (chunks) ...
[17:00:36.188] resolve() on list ...
[17:00:36.188]  recursive: 0
[17:00:36.188]  length: 2
[17:00:36.188] 
[17:00:36.189] Future #1
[17:00:36.189] result() for MulticoreFuture ...
[17:00:36.191] result() for MulticoreFuture ...
[17:00:36.191] result() for MulticoreFuture ... done
[17:00:36.191] result() for MulticoreFuture ... done
[17:00:36.191] result() for MulticoreFuture ...
[17:00:36.192] result() for MulticoreFuture ... done
[17:00:36.192] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:00:36.192] - nx: 2
[17:00:36.192] - relay: TRUE
[17:00:36.192] - stdout: TRUE
[17:00:36.192] - signal: TRUE
[17:00:36.192] - resignal: FALSE
[17:00:36.192] - force: TRUE
[17:00:36.193] - relayed: [n=2] FALSE, FALSE
[17:00:36.193] - queued futures: [n=2] FALSE, FALSE
[17:00:36.193]  - until=1
[17:00:36.193]  - relaying element #1
[17:00:36.193] result() for MulticoreFuture ...
[17:00:36.193] result() for MulticoreFuture ... done
[17:00:36.193] result() for MulticoreFuture ...
[17:00:36.194] result() for MulticoreFuture ... done
[17:00:36.194] result() for MulticoreFuture ...
[17:00:36.194] result() for MulticoreFuture ... done
[17:00:36.194] result() for MulticoreFuture ...
[17:00:36.194] result() for MulticoreFuture ... done
[17:00:36.194] - relayed: [n=2] TRUE, FALSE
[17:00:36.195] - queued futures: [n=2] TRUE, FALSE
[17:00:36.195] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:00:36.195]  length: 1 (resolved future 1)
[17:00:36.195] Future #2
[17:00:36.195] result() for MulticoreFuture ...
[17:00:36.196] result() for MulticoreFuture ...
[17:00:36.196] result() for MulticoreFuture ... done
[17:00:36.196] result() for MulticoreFuture ... done
[17:00:36.196] result() for MulticoreFuture ...
[17:00:36.197] result() for MulticoreFuture ... done
[17:00:36.197] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:00:36.197] - nx: 2
[17:00:36.197] - relay: TRUE
[17:00:36.197] - stdout: TRUE
[17:00:36.197] - signal: TRUE
[17:00:36.197] - resignal: FALSE
[17:00:36.197] - force: TRUE
[17:00:36.198] - relayed: [n=2] TRUE, FALSE
[17:00:36.198] - queued futures: [n=2] TRUE, FALSE
[17:00:36.198]  - until=2
[17:00:36.198]  - relaying element #2
[17:00:36.198] result() for MulticoreFuture ...
[17:00:36.198] result() for MulticoreFuture ... done
[17:00:36.198] result() for MulticoreFuture ...
[17:00:36.198] result() for MulticoreFuture ... done
[17:00:36.199] result() for MulticoreFuture ...
[17:00:36.199] result() for MulticoreFuture ... done
[17:00:36.199] result() for MulticoreFuture ...
[17:00:36.199] result() for MulticoreFuture ... done
[17:00:36.199] - relayed: [n=2] TRUE, TRUE
[17:00:36.199] - queued futures: [n=2] TRUE, TRUE
[17:00:36.199] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:00:36.199]  length: 0 (resolved future 2)
[17:00:36.200] Relaying remaining futures
[17:00:36.200] signalConditionsASAP(NULL, pos=0) ...
[17:00:36.200] - nx: 2
[17:00:36.200] - relay: TRUE
[17:00:36.200] - stdout: TRUE
[17:00:36.200] - signal: TRUE
[17:00:36.200] - resignal: FALSE
[17:00:36.200] - force: TRUE
[17:00:36.200] - relayed: [n=2] TRUE, TRUE
[17:00:36.200] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:00:36.201] - relayed: [n=2] TRUE, TRUE
[17:00:36.201] - queued futures: [n=2] TRUE, TRUE
[17:00:36.201] signalConditionsASAP(NULL, pos=0) ... done
[17:00:36.201] resolve() on list ... DONE
[17:00:36.201] result() for MulticoreFuture ...
[17:00:36.201] result() for MulticoreFuture ... done
[17:00:36.201] result() for MulticoreFuture ...
[17:00:36.201] result() for MulticoreFuture ... done
[17:00:36.202] result() for MulticoreFuture ...
[17:00:36.202] result() for MulticoreFuture ... done
[17:00:36.202] result() for MulticoreFuture ...
[17:00:36.202] result() for MulticoreFuture ... done
[17:00:36.202]  - Number of value chunks collected: 2
[17:00:36.202] Resolving 2 futures (chunks) ... DONE
[17:00:36.202] Reducing values from 2 chunks ...
[17:00:36.202]  - Number of values collected after concatenation: 5
[17:00:36.202]  - Number of values expected: 5
[17:00:36.203] Reducing values from 2 chunks ... DONE
[17:00:36.203] future_lapply() ... DONE
[17:00:36.203] future_lapply() ...
[17:00:36.204] Generating random seeds ...
[17:00:36.204] Generating random seed streams for 5 elements ...
[17:00:36.204] Generating random seed streams for 5 elements ... DONE
[17:00:36.204] Generating random seeds ... DONE
[17:00:36.204] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:00:36.209] Number of chunks: 2
[17:00:36.209] getGlobalsAndPackagesXApply() ...
[17:00:36.209]  - future.globals: TRUE
[17:00:36.209] getGlobalsAndPackages() ...
[17:00:36.209] Searching for globals...
[17:00:36.213] - globals found: [2] ‘FUN’, ‘sample’
[17:00:36.213] Searching for globals ... DONE
[17:00:36.213] Resolving globals: FALSE
[17:00:36.214] The total size of the 1 globals is 616 bytes (616 bytes)
[17:00:36.214] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:00:36.214] - globals: [1] ‘FUN’
[17:00:36.215] 
[17:00:36.215] getGlobalsAndPackages() ... DONE
[17:00:36.215]  - globals found/used: [n=1] ‘FUN’
[17:00:36.215]  - needed namespaces: [n=0] 
[17:00:36.215] Finding globals ... DONE
[17:00:36.215]  - use_args: TRUE
[17:00:36.215]  - Getting '...' globals ...
[17:00:36.216] resolve() on list ...
[17:00:36.216]  recursive: 0
[17:00:36.216]  length: 1
[17:00:36.216]  elements: ‘...’
[17:00:36.216]  length: 0 (resolved future 1)
[17:00:36.216] resolve() on list ... DONE
[17:00:36.216]    - '...' content: [n=0] 
[17:00:36.217] List of 1
[17:00:36.217]  $ ...: list()
[17:00:36.217]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.217]  - attr(*, "where")=List of 1
[17:00:36.217]   ..$ ...:<environment: 0x558563333e08> 
[17:00:36.217]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.217]  - attr(*, "resolved")= logi TRUE
[17:00:36.217]  - attr(*, "total_size")= num NA
[17:00:36.220]  - Getting '...' globals ... DONE
[17:00:36.220] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:00:36.220] List of 2
[17:00:36.220]  $ ...future.FUN:function (...)  
[17:00:36.220]  $ ...          : list()
[17:00:36.220]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.220]  - attr(*, "where")=List of 2
[17:00:36.220]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:00:36.220]   ..$ ...          :<environment: 0x558563333e08> 
[17:00:36.220]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.220]  - attr(*, "resolved")= logi FALSE
[17:00:36.220]  - attr(*, "total_size")= num 616
[17:00:36.223] Packages to be attached in all futures: [n=0] 
[17:00:36.223] getGlobalsAndPackagesXApply() ... DONE
[17:00:36.223] Number of futures (= number of chunks): 2
[17:00:36.223] Launching 2 futures (chunks) ...
[17:00:36.223] Chunk #1 of 2 ...
[17:00:36.223]  - Finding globals in 'X' for chunk #1 ...
[17:00:36.224] getGlobalsAndPackages() ...
[17:00:36.224] Searching for globals...
[17:00:36.224] 
[17:00:36.224] Searching for globals ... DONE
[17:00:36.224] - globals: [0] <none>
[17:00:36.224] getGlobalsAndPackages() ... DONE
[17:00:36.224]    + additional globals found: [n=0] 
[17:00:36.224]    + additional namespaces needed: [n=0] 
[17:00:36.224]  - Finding globals in 'X' for chunk #1 ... DONE
[17:00:36.225]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:36.225]  - seeds: [2] <seeds>
[17:00:36.225]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.225] getGlobalsAndPackages() ...
[17:00:36.225] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.225] Resolving globals: FALSE
[17:00:36.225] Tweak future expression to call with '...' arguments ...
[17:00:36.225] {
[17:00:36.225]     do.call(function(...) {
[17:00:36.225]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.225]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.225]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.225]             on.exit(options(oopts), add = TRUE)
[17:00:36.225]         }
[17:00:36.225]         {
[17:00:36.225]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.225]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.225]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.225]                   envir = globalenv(), inherits = FALSE)
[17:00:36.225]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.225]             })
[17:00:36.225]         }
[17:00:36.225]     }, args = future.call.arguments)
[17:00:36.225] }
[17:00:36.226] Tweak future expression to call with '...' arguments ... DONE
[17:00:36.226] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.226] 
[17:00:36.226] getGlobalsAndPackages() ... DONE
[17:00:36.227] run() for ‘Future’ ...
[17:00:36.227] - state: ‘created’
[17:00:36.227] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:00:36.231] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.231] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:00:36.231]   - Field: ‘label’
[17:00:36.231]   - Field: ‘local’
[17:00:36.231]   - Field: ‘owner’
[17:00:36.231]   - Field: ‘envir’
[17:00:36.231]   - Field: ‘workers’
[17:00:36.232]   - Field: ‘packages’
[17:00:36.232]   - Field: ‘gc’
[17:00:36.232]   - Field: ‘job’
[17:00:36.232]   - Field: ‘conditions’
[17:00:36.232]   - Field: ‘expr’
[17:00:36.232]   - Field: ‘uuid’
[17:00:36.232]   - Field: ‘seed’
[17:00:36.232]   - Field: ‘version’
[17:00:36.232]   - Field: ‘result’
[17:00:36.232]   - Field: ‘asynchronous’
[17:00:36.233]   - Field: ‘calls’
[17:00:36.233]   - Field: ‘globals’
[17:00:36.233]   - Field: ‘stdout’
[17:00:36.233]   - Field: ‘earlySignal’
[17:00:36.233]   - Field: ‘lazy’
[17:00:36.233]   - Field: ‘state’
[17:00:36.233] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:00:36.233] - Launch lazy future ...
[17:00:36.233] Packages needed by the future expression (n = 0): <none>
[17:00:36.234] Packages needed by future strategies (n = 0): <none>
[17:00:36.234] {
[17:00:36.234]     {
[17:00:36.234]         {
[17:00:36.234]             ...future.startTime <- base::Sys.time()
[17:00:36.234]             {
[17:00:36.234]                 {
[17:00:36.234]                   {
[17:00:36.234]                     {
[17:00:36.234]                       base::local({
[17:00:36.234]                         has_future <- base::requireNamespace("future", 
[17:00:36.234]                           quietly = TRUE)
[17:00:36.234]                         if (has_future) {
[17:00:36.234]                           ns <- base::getNamespace("future")
[17:00:36.234]                           version <- ns[[".package"]][["version"]]
[17:00:36.234]                           if (is.null(version)) 
[17:00:36.234]                             version <- utils::packageVersion("future")
[17:00:36.234]                         }
[17:00:36.234]                         else {
[17:00:36.234]                           version <- NULL
[17:00:36.234]                         }
[17:00:36.234]                         if (!has_future || version < "1.8.0") {
[17:00:36.234]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:36.234]                             "", base::R.version$version.string), 
[17:00:36.234]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:36.234]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:36.234]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:36.234]                               "release", "version")], collapse = " "), 
[17:00:36.234]                             hostname = base::Sys.info()[["nodename"]])
[17:00:36.234]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:36.234]                             info)
[17:00:36.234]                           info <- base::paste(info, collapse = "; ")
[17:00:36.234]                           if (!has_future) {
[17:00:36.234]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:36.234]                               info)
[17:00:36.234]                           }
[17:00:36.234]                           else {
[17:00:36.234]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:36.234]                               info, version)
[17:00:36.234]                           }
[17:00:36.234]                           base::stop(msg)
[17:00:36.234]                         }
[17:00:36.234]                       })
[17:00:36.234]                     }
[17:00:36.234]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:36.234]                     base::options(mc.cores = 1L)
[17:00:36.234]                   }
[17:00:36.234]                   ...future.strategy.old <- future::plan("list")
[17:00:36.234]                   options(future.plan = NULL)
[17:00:36.234]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.234]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:36.234]                 }
[17:00:36.234]                 ...future.workdir <- getwd()
[17:00:36.234]             }
[17:00:36.234]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:36.234]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:36.234]         }
[17:00:36.234]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:36.234]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:36.234]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:36.234]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:36.234]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:36.234]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:36.234]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:36.234]             base::names(...future.oldOptions))
[17:00:36.234]     }
[17:00:36.234]     if (FALSE) {
[17:00:36.234]     }
[17:00:36.234]     else {
[17:00:36.234]         if (TRUE) {
[17:00:36.234]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:36.234]                 open = "w")
[17:00:36.234]         }
[17:00:36.234]         else {
[17:00:36.234]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:36.234]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:36.234]         }
[17:00:36.234]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:36.234]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:36.234]             base::sink(type = "output", split = FALSE)
[17:00:36.234]             base::close(...future.stdout)
[17:00:36.234]         }, add = TRUE)
[17:00:36.234]     }
[17:00:36.234]     ...future.frame <- base::sys.nframe()
[17:00:36.234]     ...future.conditions <- base::list()
[17:00:36.234]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:36.234]     if (FALSE) {
[17:00:36.234]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:36.234]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:36.234]     }
[17:00:36.234]     ...future.result <- base::tryCatch({
[17:00:36.234]         base::withCallingHandlers({
[17:00:36.234]             ...future.value <- base::withVisible(base::local({
[17:00:36.234]                 withCallingHandlers({
[17:00:36.234]                   {
[17:00:36.234]                     do.call(function(...) {
[17:00:36.234]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.234]                       if (!identical(...future.globals.maxSize.org, 
[17:00:36.234]                         ...future.globals.maxSize)) {
[17:00:36.234]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.234]                         on.exit(options(oopts), add = TRUE)
[17:00:36.234]                       }
[17:00:36.234]                       {
[17:00:36.234]                         lapply(seq_along(...future.elements_ii), 
[17:00:36.234]                           FUN = function(jj) {
[17:00:36.234]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.234]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.234]                               envir = globalenv(), inherits = FALSE)
[17:00:36.234]                             ...future.FUN(...future.X_jj, ...)
[17:00:36.234]                           })
[17:00:36.234]                       }
[17:00:36.234]                     }, args = future.call.arguments)
[17:00:36.234]                   }
[17:00:36.234]                 }, immediateCondition = function(cond) {
[17:00:36.234]                   save_rds <- function (object, pathname, ...) 
[17:00:36.234]                   {
[17:00:36.234]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:00:36.234]                     if (file_test("-f", pathname_tmp)) {
[17:00:36.234]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.234]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:00:36.234]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.234]                         fi_tmp[["mtime"]])
[17:00:36.234]                     }
[17:00:36.234]                     tryCatch({
[17:00:36.234]                       saveRDS(object, file = pathname_tmp, ...)
[17:00:36.234]                     }, error = function(ex) {
[17:00:36.234]                       msg <- conditionMessage(ex)
[17:00:36.234]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.234]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:00:36.234]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.234]                         fi_tmp[["mtime"]], msg)
[17:00:36.234]                       ex$message <- msg
[17:00:36.234]                       stop(ex)
[17:00:36.234]                     })
[17:00:36.234]                     stopifnot(file_test("-f", pathname_tmp))
[17:00:36.234]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:00:36.234]                     if (!res || file_test("-f", pathname_tmp)) {
[17:00:36.234]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.234]                       fi <- file.info(pathname)
[17:00:36.234]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:00:36.234]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.234]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:00:36.234]                         fi[["size"]], fi[["mtime"]])
[17:00:36.234]                       stop(msg)
[17:00:36.234]                     }
[17:00:36.234]                     invisible(pathname)
[17:00:36.234]                   }
[17:00:36.234]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:00:36.234]                     rootPath = tempdir()) 
[17:00:36.234]                   {
[17:00:36.234]                     obj <- list(time = Sys.time(), condition = cond)
[17:00:36.234]                     file <- tempfile(pattern = class(cond)[1], 
[17:00:36.234]                       tmpdir = path, fileext = ".rds")
[17:00:36.234]                     save_rds(obj, file)
[17:00:36.234]                   }
[17:00:36.234]                   saveImmediateCondition(cond, path = "/tmp/Rtmp7B74IQ/.future/immediateConditions")
[17:00:36.234]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.234]                   {
[17:00:36.234]                     inherits <- base::inherits
[17:00:36.234]                     invokeRestart <- base::invokeRestart
[17:00:36.234]                     is.null <- base::is.null
[17:00:36.234]                     muffled <- FALSE
[17:00:36.234]                     if (inherits(cond, "message")) {
[17:00:36.234]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:36.234]                       if (muffled) 
[17:00:36.234]                         invokeRestart("muffleMessage")
[17:00:36.234]                     }
[17:00:36.234]                     else if (inherits(cond, "warning")) {
[17:00:36.234]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:36.234]                       if (muffled) 
[17:00:36.234]                         invokeRestart("muffleWarning")
[17:00:36.234]                     }
[17:00:36.234]                     else if (inherits(cond, "condition")) {
[17:00:36.234]                       if (!is.null(pattern)) {
[17:00:36.234]                         computeRestarts <- base::computeRestarts
[17:00:36.234]                         grepl <- base::grepl
[17:00:36.234]                         restarts <- computeRestarts(cond)
[17:00:36.234]                         for (restart in restarts) {
[17:00:36.234]                           name <- restart$name
[17:00:36.234]                           if (is.null(name)) 
[17:00:36.234]                             next
[17:00:36.234]                           if (!grepl(pattern, name)) 
[17:00:36.234]                             next
[17:00:36.234]                           invokeRestart(restart)
[17:00:36.234]                           muffled <- TRUE
[17:00:36.234]                           break
[17:00:36.234]                         }
[17:00:36.234]                       }
[17:00:36.234]                     }
[17:00:36.234]                     invisible(muffled)
[17:00:36.234]                   }
[17:00:36.234]                   muffleCondition(cond)
[17:00:36.234]                 })
[17:00:36.234]             }))
[17:00:36.234]             future::FutureResult(value = ...future.value$value, 
[17:00:36.234]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.234]                   ...future.rng), globalenv = if (FALSE) 
[17:00:36.234]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:36.234]                     ...future.globalenv.names))
[17:00:36.234]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:36.234]         }, condition = base::local({
[17:00:36.234]             c <- base::c
[17:00:36.234]             inherits <- base::inherits
[17:00:36.234]             invokeRestart <- base::invokeRestart
[17:00:36.234]             length <- base::length
[17:00:36.234]             list <- base::list
[17:00:36.234]             seq.int <- base::seq.int
[17:00:36.234]             signalCondition <- base::signalCondition
[17:00:36.234]             sys.calls <- base::sys.calls
[17:00:36.234]             `[[` <- base::`[[`
[17:00:36.234]             `+` <- base::`+`
[17:00:36.234]             `<<-` <- base::`<<-`
[17:00:36.234]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:36.234]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:36.234]                   3L)]
[17:00:36.234]             }
[17:00:36.234]             function(cond) {
[17:00:36.234]                 is_error <- inherits(cond, "error")
[17:00:36.234]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:36.234]                   NULL)
[17:00:36.234]                 if (is_error) {
[17:00:36.234]                   sessionInformation <- function() {
[17:00:36.234]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:36.234]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:36.234]                       search = base::search(), system = base::Sys.info())
[17:00:36.234]                   }
[17:00:36.234]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.234]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:36.234]                     cond$call), session = sessionInformation(), 
[17:00:36.234]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:36.234]                   signalCondition(cond)
[17:00:36.234]                 }
[17:00:36.234]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:36.234]                 "immediateCondition"))) {
[17:00:36.234]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:36.234]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.234]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:36.234]                   if (TRUE && !signal) {
[17:00:36.234]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.234]                     {
[17:00:36.234]                       inherits <- base::inherits
[17:00:36.234]                       invokeRestart <- base::invokeRestart
[17:00:36.234]                       is.null <- base::is.null
[17:00:36.234]                       muffled <- FALSE
[17:00:36.234]                       if (inherits(cond, "message")) {
[17:00:36.234]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.234]                         if (muffled) 
[17:00:36.234]                           invokeRestart("muffleMessage")
[17:00:36.234]                       }
[17:00:36.234]                       else if (inherits(cond, "warning")) {
[17:00:36.234]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.234]                         if (muffled) 
[17:00:36.234]                           invokeRestart("muffleWarning")
[17:00:36.234]                       }
[17:00:36.234]                       else if (inherits(cond, "condition")) {
[17:00:36.234]                         if (!is.null(pattern)) {
[17:00:36.234]                           computeRestarts <- base::computeRestarts
[17:00:36.234]                           grepl <- base::grepl
[17:00:36.234]                           restarts <- computeRestarts(cond)
[17:00:36.234]                           for (restart in restarts) {
[17:00:36.234]                             name <- restart$name
[17:00:36.234]                             if (is.null(name)) 
[17:00:36.234]                               next
[17:00:36.234]                             if (!grepl(pattern, name)) 
[17:00:36.234]                               next
[17:00:36.234]                             invokeRestart(restart)
[17:00:36.234]                             muffled <- TRUE
[17:00:36.234]                             break
[17:00:36.234]                           }
[17:00:36.234]                         }
[17:00:36.234]                       }
[17:00:36.234]                       invisible(muffled)
[17:00:36.234]                     }
[17:00:36.234]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.234]                   }
[17:00:36.234]                 }
[17:00:36.234]                 else {
[17:00:36.234]                   if (TRUE) {
[17:00:36.234]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.234]                     {
[17:00:36.234]                       inherits <- base::inherits
[17:00:36.234]                       invokeRestart <- base::invokeRestart
[17:00:36.234]                       is.null <- base::is.null
[17:00:36.234]                       muffled <- FALSE
[17:00:36.234]                       if (inherits(cond, "message")) {
[17:00:36.234]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.234]                         if (muffled) 
[17:00:36.234]                           invokeRestart("muffleMessage")
[17:00:36.234]                       }
[17:00:36.234]                       else if (inherits(cond, "warning")) {
[17:00:36.234]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.234]                         if (muffled) 
[17:00:36.234]                           invokeRestart("muffleWarning")
[17:00:36.234]                       }
[17:00:36.234]                       else if (inherits(cond, "condition")) {
[17:00:36.234]                         if (!is.null(pattern)) {
[17:00:36.234]                           computeRestarts <- base::computeRestarts
[17:00:36.234]                           grepl <- base::grepl
[17:00:36.234]                           restarts <- computeRestarts(cond)
[17:00:36.234]                           for (restart in restarts) {
[17:00:36.234]                             name <- restart$name
[17:00:36.234]                             if (is.null(name)) 
[17:00:36.234]                               next
[17:00:36.234]                             if (!grepl(pattern, name)) 
[17:00:36.234]                               next
[17:00:36.234]                             invokeRestart(restart)
[17:00:36.234]                             muffled <- TRUE
[17:00:36.234]                             break
[17:00:36.234]                           }
[17:00:36.234]                         }
[17:00:36.234]                       }
[17:00:36.234]                       invisible(muffled)
[17:00:36.234]                     }
[17:00:36.234]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.234]                   }
[17:00:36.234]                 }
[17:00:36.234]             }
[17:00:36.234]         }))
[17:00:36.234]     }, error = function(ex) {
[17:00:36.234]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:36.234]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.234]                 ...future.rng), started = ...future.startTime, 
[17:00:36.234]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:36.234]             version = "1.8"), class = "FutureResult")
[17:00:36.234]     }, finally = {
[17:00:36.234]         if (!identical(...future.workdir, getwd())) 
[17:00:36.234]             setwd(...future.workdir)
[17:00:36.234]         {
[17:00:36.234]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:36.234]                 ...future.oldOptions$nwarnings <- NULL
[17:00:36.234]             }
[17:00:36.234]             base::options(...future.oldOptions)
[17:00:36.234]             if (.Platform$OS.type == "windows") {
[17:00:36.234]                 old_names <- names(...future.oldEnvVars)
[17:00:36.234]                 envs <- base::Sys.getenv()
[17:00:36.234]                 names <- names(envs)
[17:00:36.234]                 common <- intersect(names, old_names)
[17:00:36.234]                 added <- setdiff(names, old_names)
[17:00:36.234]                 removed <- setdiff(old_names, names)
[17:00:36.234]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:36.234]                   envs[common]]
[17:00:36.234]                 NAMES <- toupper(changed)
[17:00:36.234]                 args <- list()
[17:00:36.234]                 for (kk in seq_along(NAMES)) {
[17:00:36.234]                   name <- changed[[kk]]
[17:00:36.234]                   NAME <- NAMES[[kk]]
[17:00:36.234]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.234]                     next
[17:00:36.234]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.234]                 }
[17:00:36.234]                 NAMES <- toupper(added)
[17:00:36.234]                 for (kk in seq_along(NAMES)) {
[17:00:36.234]                   name <- added[[kk]]
[17:00:36.234]                   NAME <- NAMES[[kk]]
[17:00:36.234]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.234]                     next
[17:00:36.234]                   args[[name]] <- ""
[17:00:36.234]                 }
[17:00:36.234]                 NAMES <- toupper(removed)
[17:00:36.234]                 for (kk in seq_along(NAMES)) {
[17:00:36.234]                   name <- removed[[kk]]
[17:00:36.234]                   NAME <- NAMES[[kk]]
[17:00:36.234]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.234]                     next
[17:00:36.234]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.234]                 }
[17:00:36.234]                 if (length(args) > 0) 
[17:00:36.234]                   base::do.call(base::Sys.setenv, args = args)
[17:00:36.234]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:36.234]             }
[17:00:36.234]             else {
[17:00:36.234]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:36.234]             }
[17:00:36.234]             {
[17:00:36.234]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:36.234]                   0L) {
[17:00:36.234]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:36.234]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:36.234]                   base::options(opts)
[17:00:36.234]                 }
[17:00:36.234]                 {
[17:00:36.234]                   {
[17:00:36.234]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:36.234]                     NULL
[17:00:36.234]                   }
[17:00:36.234]                   options(future.plan = NULL)
[17:00:36.234]                   if (is.na(NA_character_)) 
[17:00:36.234]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.234]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:36.234]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:36.234]                     .init = FALSE)
[17:00:36.234]                 }
[17:00:36.234]             }
[17:00:36.234]         }
[17:00:36.234]     })
[17:00:36.234]     if (TRUE) {
[17:00:36.234]         base::sink(type = "output", split = FALSE)
[17:00:36.234]         if (TRUE) {
[17:00:36.234]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:36.234]         }
[17:00:36.234]         else {
[17:00:36.234]             ...future.result["stdout"] <- base::list(NULL)
[17:00:36.234]         }
[17:00:36.234]         base::close(...future.stdout)
[17:00:36.234]         ...future.stdout <- NULL
[17:00:36.234]     }
[17:00:36.234]     ...future.result$conditions <- ...future.conditions
[17:00:36.234]     ...future.result$finished <- base::Sys.time()
[17:00:36.234]     ...future.result
[17:00:36.234] }
[17:00:36.237] assign_globals() ...
[17:00:36.237] List of 5
[17:00:36.237]  $ ...future.FUN            :function (...)  
[17:00:36.237]  $ future.call.arguments    : list()
[17:00:36.237]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.237]  $ ...future.elements_ii    :List of 2
[17:00:36.237]   ..$ : int 0
[17:00:36.237]   ..$ : int 0
[17:00:36.237]  $ ...future.seeds_ii       :List of 2
[17:00:36.237]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[17:00:36.237]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[17:00:36.237]  $ ...future.globals.maxSize: NULL
[17:00:36.237]  - attr(*, "where")=List of 5
[17:00:36.237]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:00:36.237]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:00:36.237]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:00:36.237]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:00:36.237]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:00:36.237]  - attr(*, "resolved")= logi FALSE
[17:00:36.237]  - attr(*, "total_size")= num 616
[17:00:36.237]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.237]  - attr(*, "already-done")= logi TRUE
[17:00:36.244] - reassign environment for ‘...future.FUN’
[17:00:36.245] - copied ‘...future.FUN’ to environment
[17:00:36.245] - copied ‘future.call.arguments’ to environment
[17:00:36.245] - copied ‘...future.elements_ii’ to environment
[17:00:36.245] - copied ‘...future.seeds_ii’ to environment
[17:00:36.245] - copied ‘...future.globals.maxSize’ to environment
[17:00:36.245] assign_globals() ... done
[17:00:36.245] requestCore(): workers = 2
[17:00:36.247] MulticoreFuture started
[17:00:36.248] - Launch lazy future ... done
[17:00:36.248] run() for ‘MulticoreFuture’ ... done
[17:00:36.248] Created future:
[17:00:36.249] plan(): Setting new future strategy stack:
[17:00:36.249] List of future strategies:
[17:00:36.249] 1. sequential:
[17:00:36.249]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:36.249]    - tweaked: FALSE
[17:00:36.249]    - call: NULL
[17:00:36.250] plan(): nbrOfWorkers() = 1
[17:00:36.252] plan(): Setting new future strategy stack:
[17:00:36.252] List of future strategies:
[17:00:36.252] 1. multicore:
[17:00:36.252]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:00:36.252]    - tweaked: FALSE
[17:00:36.252]    - call: plan(strategy)
[17:00:36.257] plan(): nbrOfWorkers() = 2
[17:00:36.249] MulticoreFuture:
[17:00:36.249] Label: ‘future_replicate-1’
[17:00:36.249] Expression:
[17:00:36.249] {
[17:00:36.249]     do.call(function(...) {
[17:00:36.249]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.249]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.249]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.249]             on.exit(options(oopts), add = TRUE)
[17:00:36.249]         }
[17:00:36.249]         {
[17:00:36.249]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.249]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.249]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.249]                   envir = globalenv(), inherits = FALSE)
[17:00:36.249]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.249]             })
[17:00:36.249]         }
[17:00:36.249]     }, args = future.call.arguments)
[17:00:36.249] }
[17:00:36.249] Lazy evaluation: FALSE
[17:00:36.249] Asynchronous evaluation: TRUE
[17:00:36.249] Local evaluation: TRUE
[17:00:36.249] Environment: R_GlobalEnv
[17:00:36.249] Capture standard output: TRUE
[17:00:36.249] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:36.249] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:36.249] Packages: <none>
[17:00:36.249] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:36.249] Resolved: TRUE
[17:00:36.249] Value: <not collected>
[17:00:36.249] Conditions captured: <none>
[17:00:36.249] Early signaling: FALSE
[17:00:36.249] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:36.249] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.258] Chunk #1 of 2 ... DONE
[17:00:36.259] Chunk #2 of 2 ...
[17:00:36.259]  - Finding globals in 'X' for chunk #2 ...
[17:00:36.259] getGlobalsAndPackages() ...
[17:00:36.259] Searching for globals...
[17:00:36.260] 
[17:00:36.260] Searching for globals ... DONE
[17:00:36.260] - globals: [0] <none>
[17:00:36.260] getGlobalsAndPackages() ... DONE
[17:00:36.260]    + additional globals found: [n=0] 
[17:00:36.260]    + additional namespaces needed: [n=0] 
[17:00:36.260]  - Finding globals in 'X' for chunk #2 ... DONE
[17:00:36.261]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:36.261]  - seeds: [3] <seeds>
[17:00:36.261]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.261] getGlobalsAndPackages() ...
[17:00:36.261] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.261] Resolving globals: FALSE
[17:00:36.262] Tweak future expression to call with '...' arguments ...
[17:00:36.262] {
[17:00:36.262]     do.call(function(...) {
[17:00:36.262]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.262]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.262]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.262]             on.exit(options(oopts), add = TRUE)
[17:00:36.262]         }
[17:00:36.262]         {
[17:00:36.262]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.262]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.262]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.262]                   envir = globalenv(), inherits = FALSE)
[17:00:36.262]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.262]             })
[17:00:36.262]         }
[17:00:36.262]     }, args = future.call.arguments)
[17:00:36.262] }
[17:00:36.262] Tweak future expression to call with '...' arguments ... DONE
[17:00:36.263] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.263] 
[17:00:36.263] getGlobalsAndPackages() ... DONE
[17:00:36.264] run() for ‘Future’ ...
[17:00:36.264] - state: ‘created’
[17:00:36.264] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:00:36.269] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.269] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:00:36.269]   - Field: ‘label’
[17:00:36.269]   - Field: ‘local’
[17:00:36.270]   - Field: ‘owner’
[17:00:36.270]   - Field: ‘envir’
[17:00:36.270]   - Field: ‘workers’
[17:00:36.270]   - Field: ‘packages’
[17:00:36.270]   - Field: ‘gc’
[17:00:36.270]   - Field: ‘job’
[17:00:36.270]   - Field: ‘conditions’
[17:00:36.271]   - Field: ‘expr’
[17:00:36.271]   - Field: ‘uuid’
[17:00:36.271]   - Field: ‘seed’
[17:00:36.271]   - Field: ‘version’
[17:00:36.271]   - Field: ‘result’
[17:00:36.271]   - Field: ‘asynchronous’
[17:00:36.271]   - Field: ‘calls’
[17:00:36.272]   - Field: ‘globals’
[17:00:36.272]   - Field: ‘stdout’
[17:00:36.272]   - Field: ‘earlySignal’
[17:00:36.272]   - Field: ‘lazy’
[17:00:36.272]   - Field: ‘state’
[17:00:36.272] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:00:36.272] - Launch lazy future ...
[17:00:36.273] Packages needed by the future expression (n = 0): <none>
[17:00:36.273] Packages needed by future strategies (n = 0): <none>
[17:00:36.274] {
[17:00:36.274]     {
[17:00:36.274]         {
[17:00:36.274]             ...future.startTime <- base::Sys.time()
[17:00:36.274]             {
[17:00:36.274]                 {
[17:00:36.274]                   {
[17:00:36.274]                     {
[17:00:36.274]                       base::local({
[17:00:36.274]                         has_future <- base::requireNamespace("future", 
[17:00:36.274]                           quietly = TRUE)
[17:00:36.274]                         if (has_future) {
[17:00:36.274]                           ns <- base::getNamespace("future")
[17:00:36.274]                           version <- ns[[".package"]][["version"]]
[17:00:36.274]                           if (is.null(version)) 
[17:00:36.274]                             version <- utils::packageVersion("future")
[17:00:36.274]                         }
[17:00:36.274]                         else {
[17:00:36.274]                           version <- NULL
[17:00:36.274]                         }
[17:00:36.274]                         if (!has_future || version < "1.8.0") {
[17:00:36.274]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:36.274]                             "", base::R.version$version.string), 
[17:00:36.274]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:36.274]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:36.274]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:36.274]                               "release", "version")], collapse = " "), 
[17:00:36.274]                             hostname = base::Sys.info()[["nodename"]])
[17:00:36.274]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:36.274]                             info)
[17:00:36.274]                           info <- base::paste(info, collapse = "; ")
[17:00:36.274]                           if (!has_future) {
[17:00:36.274]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:36.274]                               info)
[17:00:36.274]                           }
[17:00:36.274]                           else {
[17:00:36.274]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:36.274]                               info, version)
[17:00:36.274]                           }
[17:00:36.274]                           base::stop(msg)
[17:00:36.274]                         }
[17:00:36.274]                       })
[17:00:36.274]                     }
[17:00:36.274]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:36.274]                     base::options(mc.cores = 1L)
[17:00:36.274]                   }
[17:00:36.274]                   ...future.strategy.old <- future::plan("list")
[17:00:36.274]                   options(future.plan = NULL)
[17:00:36.274]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.274]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:36.274]                 }
[17:00:36.274]                 ...future.workdir <- getwd()
[17:00:36.274]             }
[17:00:36.274]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:36.274]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:36.274]         }
[17:00:36.274]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:36.274]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:36.274]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:36.274]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:36.274]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:36.274]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:36.274]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:36.274]             base::names(...future.oldOptions))
[17:00:36.274]     }
[17:00:36.274]     if (FALSE) {
[17:00:36.274]     }
[17:00:36.274]     else {
[17:00:36.274]         if (TRUE) {
[17:00:36.274]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:36.274]                 open = "w")
[17:00:36.274]         }
[17:00:36.274]         else {
[17:00:36.274]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:36.274]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:36.274]         }
[17:00:36.274]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:36.274]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:36.274]             base::sink(type = "output", split = FALSE)
[17:00:36.274]             base::close(...future.stdout)
[17:00:36.274]         }, add = TRUE)
[17:00:36.274]     }
[17:00:36.274]     ...future.frame <- base::sys.nframe()
[17:00:36.274]     ...future.conditions <- base::list()
[17:00:36.274]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:36.274]     if (FALSE) {
[17:00:36.274]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:36.274]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:36.274]     }
[17:00:36.274]     ...future.result <- base::tryCatch({
[17:00:36.274]         base::withCallingHandlers({
[17:00:36.274]             ...future.value <- base::withVisible(base::local({
[17:00:36.274]                 withCallingHandlers({
[17:00:36.274]                   {
[17:00:36.274]                     do.call(function(...) {
[17:00:36.274]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.274]                       if (!identical(...future.globals.maxSize.org, 
[17:00:36.274]                         ...future.globals.maxSize)) {
[17:00:36.274]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.274]                         on.exit(options(oopts), add = TRUE)
[17:00:36.274]                       }
[17:00:36.274]                       {
[17:00:36.274]                         lapply(seq_along(...future.elements_ii), 
[17:00:36.274]                           FUN = function(jj) {
[17:00:36.274]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.274]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.274]                               envir = globalenv(), inherits = FALSE)
[17:00:36.274]                             ...future.FUN(...future.X_jj, ...)
[17:00:36.274]                           })
[17:00:36.274]                       }
[17:00:36.274]                     }, args = future.call.arguments)
[17:00:36.274]                   }
[17:00:36.274]                 }, immediateCondition = function(cond) {
[17:00:36.274]                   save_rds <- function (object, pathname, ...) 
[17:00:36.274]                   {
[17:00:36.274]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:00:36.274]                     if (file_test("-f", pathname_tmp)) {
[17:00:36.274]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.274]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:00:36.274]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.274]                         fi_tmp[["mtime"]])
[17:00:36.274]                     }
[17:00:36.274]                     tryCatch({
[17:00:36.274]                       saveRDS(object, file = pathname_tmp, ...)
[17:00:36.274]                     }, error = function(ex) {
[17:00:36.274]                       msg <- conditionMessage(ex)
[17:00:36.274]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.274]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:00:36.274]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.274]                         fi_tmp[["mtime"]], msg)
[17:00:36.274]                       ex$message <- msg
[17:00:36.274]                       stop(ex)
[17:00:36.274]                     })
[17:00:36.274]                     stopifnot(file_test("-f", pathname_tmp))
[17:00:36.274]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:00:36.274]                     if (!res || file_test("-f", pathname_tmp)) {
[17:00:36.274]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.274]                       fi <- file.info(pathname)
[17:00:36.274]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:00:36.274]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.274]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:00:36.274]                         fi[["size"]], fi[["mtime"]])
[17:00:36.274]                       stop(msg)
[17:00:36.274]                     }
[17:00:36.274]                     invisible(pathname)
[17:00:36.274]                   }
[17:00:36.274]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:00:36.274]                     rootPath = tempdir()) 
[17:00:36.274]                   {
[17:00:36.274]                     obj <- list(time = Sys.time(), condition = cond)
[17:00:36.274]                     file <- tempfile(pattern = class(cond)[1], 
[17:00:36.274]                       tmpdir = path, fileext = ".rds")
[17:00:36.274]                     save_rds(obj, file)
[17:00:36.274]                   }
[17:00:36.274]                   saveImmediateCondition(cond, path = "/tmp/Rtmp7B74IQ/.future/immediateConditions")
[17:00:36.274]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.274]                   {
[17:00:36.274]                     inherits <- base::inherits
[17:00:36.274]                     invokeRestart <- base::invokeRestart
[17:00:36.274]                     is.null <- base::is.null
[17:00:36.274]                     muffled <- FALSE
[17:00:36.274]                     if (inherits(cond, "message")) {
[17:00:36.274]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:36.274]                       if (muffled) 
[17:00:36.274]                         invokeRestart("muffleMessage")
[17:00:36.274]                     }
[17:00:36.274]                     else if (inherits(cond, "warning")) {
[17:00:36.274]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:36.274]                       if (muffled) 
[17:00:36.274]                         invokeRestart("muffleWarning")
[17:00:36.274]                     }
[17:00:36.274]                     else if (inherits(cond, "condition")) {
[17:00:36.274]                       if (!is.null(pattern)) {
[17:00:36.274]                         computeRestarts <- base::computeRestarts
[17:00:36.274]                         grepl <- base::grepl
[17:00:36.274]                         restarts <- computeRestarts(cond)
[17:00:36.274]                         for (restart in restarts) {
[17:00:36.274]                           name <- restart$name
[17:00:36.274]                           if (is.null(name)) 
[17:00:36.274]                             next
[17:00:36.274]                           if (!grepl(pattern, name)) 
[17:00:36.274]                             next
[17:00:36.274]                           invokeRestart(restart)
[17:00:36.274]                           muffled <- TRUE
[17:00:36.274]                           break
[17:00:36.274]                         }
[17:00:36.274]                       }
[17:00:36.274]                     }
[17:00:36.274]                     invisible(muffled)
[17:00:36.274]                   }
[17:00:36.274]                   muffleCondition(cond)
[17:00:36.274]                 })
[17:00:36.274]             }))
[17:00:36.274]             future::FutureResult(value = ...future.value$value, 
[17:00:36.274]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.274]                   ...future.rng), globalenv = if (FALSE) 
[17:00:36.274]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:36.274]                     ...future.globalenv.names))
[17:00:36.274]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:36.274]         }, condition = base::local({
[17:00:36.274]             c <- base::c
[17:00:36.274]             inherits <- base::inherits
[17:00:36.274]             invokeRestart <- base::invokeRestart
[17:00:36.274]             length <- base::length
[17:00:36.274]             list <- base::list
[17:00:36.274]             seq.int <- base::seq.int
[17:00:36.274]             signalCondition <- base::signalCondition
[17:00:36.274]             sys.calls <- base::sys.calls
[17:00:36.274]             `[[` <- base::`[[`
[17:00:36.274]             `+` <- base::`+`
[17:00:36.274]             `<<-` <- base::`<<-`
[17:00:36.274]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:36.274]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:36.274]                   3L)]
[17:00:36.274]             }
[17:00:36.274]             function(cond) {
[17:00:36.274]                 is_error <- inherits(cond, "error")
[17:00:36.274]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:36.274]                   NULL)
[17:00:36.274]                 if (is_error) {
[17:00:36.274]                   sessionInformation <- function() {
[17:00:36.274]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:36.274]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:36.274]                       search = base::search(), system = base::Sys.info())
[17:00:36.274]                   }
[17:00:36.274]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.274]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:36.274]                     cond$call), session = sessionInformation(), 
[17:00:36.274]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:36.274]                   signalCondition(cond)
[17:00:36.274]                 }
[17:00:36.274]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:36.274]                 "immediateCondition"))) {
[17:00:36.274]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:36.274]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.274]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:36.274]                   if (TRUE && !signal) {
[17:00:36.274]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.274]                     {
[17:00:36.274]                       inherits <- base::inherits
[17:00:36.274]                       invokeRestart <- base::invokeRestart
[17:00:36.274]                       is.null <- base::is.null
[17:00:36.274]                       muffled <- FALSE
[17:00:36.274]                       if (inherits(cond, "message")) {
[17:00:36.274]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.274]                         if (muffled) 
[17:00:36.274]                           invokeRestart("muffleMessage")
[17:00:36.274]                       }
[17:00:36.274]                       else if (inherits(cond, "warning")) {
[17:00:36.274]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.274]                         if (muffled) 
[17:00:36.274]                           invokeRestart("muffleWarning")
[17:00:36.274]                       }
[17:00:36.274]                       else if (inherits(cond, "condition")) {
[17:00:36.274]                         if (!is.null(pattern)) {
[17:00:36.274]                           computeRestarts <- base::computeRestarts
[17:00:36.274]                           grepl <- base::grepl
[17:00:36.274]                           restarts <- computeRestarts(cond)
[17:00:36.274]                           for (restart in restarts) {
[17:00:36.274]                             name <- restart$name
[17:00:36.274]                             if (is.null(name)) 
[17:00:36.274]                               next
[17:00:36.274]                             if (!grepl(pattern, name)) 
[17:00:36.274]                               next
[17:00:36.274]                             invokeRestart(restart)
[17:00:36.274]                             muffled <- TRUE
[17:00:36.274]                             break
[17:00:36.274]                           }
[17:00:36.274]                         }
[17:00:36.274]                       }
[17:00:36.274]                       invisible(muffled)
[17:00:36.274]                     }
[17:00:36.274]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.274]                   }
[17:00:36.274]                 }
[17:00:36.274]                 else {
[17:00:36.274]                   if (TRUE) {
[17:00:36.274]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.274]                     {
[17:00:36.274]                       inherits <- base::inherits
[17:00:36.274]                       invokeRestart <- base::invokeRestart
[17:00:36.274]                       is.null <- base::is.null
[17:00:36.274]                       muffled <- FALSE
[17:00:36.274]                       if (inherits(cond, "message")) {
[17:00:36.274]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.274]                         if (muffled) 
[17:00:36.274]                           invokeRestart("muffleMessage")
[17:00:36.274]                       }
[17:00:36.274]                       else if (inherits(cond, "warning")) {
[17:00:36.274]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.274]                         if (muffled) 
[17:00:36.274]                           invokeRestart("muffleWarning")
[17:00:36.274]                       }
[17:00:36.274]                       else if (inherits(cond, "condition")) {
[17:00:36.274]                         if (!is.null(pattern)) {
[17:00:36.274]                           computeRestarts <- base::computeRestarts
[17:00:36.274]                           grepl <- base::grepl
[17:00:36.274]                           restarts <- computeRestarts(cond)
[17:00:36.274]                           for (restart in restarts) {
[17:00:36.274]                             name <- restart$name
[17:00:36.274]                             if (is.null(name)) 
[17:00:36.274]                               next
[17:00:36.274]                             if (!grepl(pattern, name)) 
[17:00:36.274]                               next
[17:00:36.274]                             invokeRestart(restart)
[17:00:36.274]                             muffled <- TRUE
[17:00:36.274]                             break
[17:00:36.274]                           }
[17:00:36.274]                         }
[17:00:36.274]                       }
[17:00:36.274]                       invisible(muffled)
[17:00:36.274]                     }
[17:00:36.274]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.274]                   }
[17:00:36.274]                 }
[17:00:36.274]             }
[17:00:36.274]         }))
[17:00:36.274]     }, error = function(ex) {
[17:00:36.274]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:36.274]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.274]                 ...future.rng), started = ...future.startTime, 
[17:00:36.274]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:36.274]             version = "1.8"), class = "FutureResult")
[17:00:36.274]     }, finally = {
[17:00:36.274]         if (!identical(...future.workdir, getwd())) 
[17:00:36.274]             setwd(...future.workdir)
[17:00:36.274]         {
[17:00:36.274]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:36.274]                 ...future.oldOptions$nwarnings <- NULL
[17:00:36.274]             }
[17:00:36.274]             base::options(...future.oldOptions)
[17:00:36.274]             if (.Platform$OS.type == "windows") {
[17:00:36.274]                 old_names <- names(...future.oldEnvVars)
[17:00:36.274]                 envs <- base::Sys.getenv()
[17:00:36.274]                 names <- names(envs)
[17:00:36.274]                 common <- intersect(names, old_names)
[17:00:36.274]                 added <- setdiff(names, old_names)
[17:00:36.274]                 removed <- setdiff(old_names, names)
[17:00:36.274]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:36.274]                   envs[common]]
[17:00:36.274]                 NAMES <- toupper(changed)
[17:00:36.274]                 args <- list()
[17:00:36.274]                 for (kk in seq_along(NAMES)) {
[17:00:36.274]                   name <- changed[[kk]]
[17:00:36.274]                   NAME <- NAMES[[kk]]
[17:00:36.274]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.274]                     next
[17:00:36.274]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.274]                 }
[17:00:36.274]                 NAMES <- toupper(added)
[17:00:36.274]                 for (kk in seq_along(NAMES)) {
[17:00:36.274]                   name <- added[[kk]]
[17:00:36.274]                   NAME <- NAMES[[kk]]
[17:00:36.274]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.274]                     next
[17:00:36.274]                   args[[name]] <- ""
[17:00:36.274]                 }
[17:00:36.274]                 NAMES <- toupper(removed)
[17:00:36.274]                 for (kk in seq_along(NAMES)) {
[17:00:36.274]                   name <- removed[[kk]]
[17:00:36.274]                   NAME <- NAMES[[kk]]
[17:00:36.274]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.274]                     next
[17:00:36.274]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.274]                 }
[17:00:36.274]                 if (length(args) > 0) 
[17:00:36.274]                   base::do.call(base::Sys.setenv, args = args)
[17:00:36.274]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:36.274]             }
[17:00:36.274]             else {
[17:00:36.274]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:36.274]             }
[17:00:36.274]             {
[17:00:36.274]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:36.274]                   0L) {
[17:00:36.274]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:36.274]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:36.274]                   base::options(opts)
[17:00:36.274]                 }
[17:00:36.274]                 {
[17:00:36.274]                   {
[17:00:36.274]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:36.274]                     NULL
[17:00:36.274]                   }
[17:00:36.274]                   options(future.plan = NULL)
[17:00:36.274]                   if (is.na(NA_character_)) 
[17:00:36.274]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.274]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:36.274]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:36.274]                     .init = FALSE)
[17:00:36.274]                 }
[17:00:36.274]             }
[17:00:36.274]         }
[17:00:36.274]     })
[17:00:36.274]     if (TRUE) {
[17:00:36.274]         base::sink(type = "output", split = FALSE)
[17:00:36.274]         if (TRUE) {
[17:00:36.274]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:36.274]         }
[17:00:36.274]         else {
[17:00:36.274]             ...future.result["stdout"] <- base::list(NULL)
[17:00:36.274]         }
[17:00:36.274]         base::close(...future.stdout)
[17:00:36.274]         ...future.stdout <- NULL
[17:00:36.274]     }
[17:00:36.274]     ...future.result$conditions <- ...future.conditions
[17:00:36.274]     ...future.result$finished <- base::Sys.time()
[17:00:36.274]     ...future.result
[17:00:36.274] }
[17:00:36.277] assign_globals() ...
[17:00:36.277] List of 5
[17:00:36.277]  $ ...future.FUN            :function (...)  
[17:00:36.277]  $ future.call.arguments    : list()
[17:00:36.277]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.277]  $ ...future.elements_ii    :List of 3
[17:00:36.277]   ..$ : int 0
[17:00:36.277]   ..$ : int 0
[17:00:36.277]   ..$ : int 0
[17:00:36.277]  $ ...future.seeds_ii       :List of 3
[17:00:36.277]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[17:00:36.277]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[17:00:36.277]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[17:00:36.277]  $ ...future.globals.maxSize: NULL
[17:00:36.277]  - attr(*, "where")=List of 5
[17:00:36.277]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:00:36.277]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:00:36.277]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:00:36.277]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:00:36.277]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:00:36.277]  - attr(*, "resolved")= logi FALSE
[17:00:36.277]  - attr(*, "total_size")= num 616
[17:00:36.277]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.277]  - attr(*, "already-done")= logi TRUE
[17:00:36.286] - reassign environment for ‘...future.FUN’
[17:00:36.286] - copied ‘...future.FUN’ to environment
[17:00:36.287] - copied ‘future.call.arguments’ to environment
[17:00:36.287] - copied ‘...future.elements_ii’ to environment
[17:00:36.287] - copied ‘...future.seeds_ii’ to environment
[17:00:36.287] - copied ‘...future.globals.maxSize’ to environment
[17:00:36.287] assign_globals() ... done
[17:00:36.287] requestCore(): workers = 2
[17:00:36.290] MulticoreFuture started
[17:00:36.290] - Launch lazy future ... done
[17:00:36.290] run() for ‘MulticoreFuture’ ... done
[17:00:36.291] Created future:
[17:00:36.291] plan(): Setting new future strategy stack:
[17:00:36.291] List of future strategies:
[17:00:36.291] 1. sequential:
[17:00:36.291]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:36.291]    - tweaked: FALSE
[17:00:36.291]    - call: NULL
[17:00:36.292] plan(): nbrOfWorkers() = 1
[17:00:36.298] plan(): Setting new future strategy stack:
[17:00:36.298] List of future strategies:
[17:00:36.298] 1. multicore:
[17:00:36.298]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:00:36.298]    - tweaked: FALSE
[17:00:36.298]    - call: plan(strategy)
[17:00:36.304] plan(): nbrOfWorkers() = 2
[17:00:36.291] MulticoreFuture:
[17:00:36.291] Label: ‘future_replicate-2’
[17:00:36.291] Expression:
[17:00:36.291] {
[17:00:36.291]     do.call(function(...) {
[17:00:36.291]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.291]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.291]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.291]             on.exit(options(oopts), add = TRUE)
[17:00:36.291]         }
[17:00:36.291]         {
[17:00:36.291]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.291]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.291]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.291]                   envir = globalenv(), inherits = FALSE)
[17:00:36.291]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.291]             })
[17:00:36.291]         }
[17:00:36.291]     }, args = future.call.arguments)
[17:00:36.291] }
[17:00:36.291] Lazy evaluation: FALSE
[17:00:36.291] Asynchronous evaluation: TRUE
[17:00:36.291] Local evaluation: TRUE
[17:00:36.291] Environment: R_GlobalEnv
[17:00:36.291] Capture standard output: TRUE
[17:00:36.291] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:36.291] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:36.291] Packages: <none>
[17:00:36.291] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:36.291] Resolved: TRUE
[17:00:36.291] Value: <not collected>
[17:00:36.291] Conditions captured: <none>
[17:00:36.291] Early signaling: FALSE
[17:00:36.291] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:36.291] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.305] Chunk #2 of 2 ... DONE
[17:00:36.305] Launching 2 futures (chunks) ... DONE
[17:00:36.305] Resolving 2 futures (chunks) ...
[17:00:36.306] resolve() on list ...
[17:00:36.306]  recursive: 0
[17:00:36.306]  length: 2
[17:00:36.306] 
[17:00:36.307] Future #1
[17:00:36.307] result() for MulticoreFuture ...
[17:00:36.308] result() for MulticoreFuture ...
[17:00:36.308] result() for MulticoreFuture ... done
[17:00:36.308] result() for MulticoreFuture ... done
[17:00:36.308] result() for MulticoreFuture ...
[17:00:36.309] result() for MulticoreFuture ... done
[17:00:36.309] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:00:36.309] - nx: 2
[17:00:36.309] - relay: TRUE
[17:00:36.309] - stdout: TRUE
[17:00:36.309] - signal: TRUE
[17:00:36.310] - resignal: FALSE
[17:00:36.310] - force: TRUE
[17:00:36.310] - relayed: [n=2] FALSE, FALSE
[17:00:36.310] - queued futures: [n=2] FALSE, FALSE
[17:00:36.310]  - until=1
[17:00:36.310]  - relaying element #1
[17:00:36.310] result() for MulticoreFuture ...
[17:00:36.311] result() for MulticoreFuture ... done
[17:00:36.311] result() for MulticoreFuture ...
[17:00:36.311] result() for MulticoreFuture ... done
[17:00:36.311] result() for MulticoreFuture ...
[17:00:36.311] result() for MulticoreFuture ... done
[17:00:36.312] result() for MulticoreFuture ...
[17:00:36.312] result() for MulticoreFuture ... done
[17:00:36.312] - relayed: [n=2] TRUE, FALSE
[17:00:36.312] - queued futures: [n=2] TRUE, FALSE
[17:00:36.312] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:00:36.312]  length: 1 (resolved future 1)
[17:00:36.313] Future #2
[17:00:36.313] result() for MulticoreFuture ...
[17:00:36.313] result() for MulticoreFuture ...
[17:00:36.313] result() for MulticoreFuture ... done
[17:00:36.314] result() for MulticoreFuture ... done
[17:00:36.314] result() for MulticoreFuture ...
[17:00:36.314] result() for MulticoreFuture ... done
[17:00:36.314] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:00:36.314] - nx: 2
[17:00:36.314] - relay: TRUE
[17:00:36.315] - stdout: TRUE
[17:00:36.315] - signal: TRUE
[17:00:36.315] - resignal: FALSE
[17:00:36.315] - force: TRUE
[17:00:36.315] - relayed: [n=2] TRUE, FALSE
[17:00:36.315] - queued futures: [n=2] TRUE, FALSE
[17:00:36.315]  - until=2
[17:00:36.315]  - relaying element #2
[17:00:36.316] result() for MulticoreFuture ...
[17:00:36.316] result() for MulticoreFuture ... done
[17:00:36.316] result() for MulticoreFuture ...
[17:00:36.316] result() for MulticoreFuture ... done
[17:00:36.316] result() for MulticoreFuture ...
[17:00:36.316] result() for MulticoreFuture ... done
[17:00:36.316] result() for MulticoreFuture ...
[17:00:36.316] result() for MulticoreFuture ... done
[17:00:36.316] - relayed: [n=2] TRUE, TRUE
[17:00:36.317] - queued futures: [n=2] TRUE, TRUE
[17:00:36.317] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:00:36.317]  length: 0 (resolved future 2)
[17:00:36.317] Relaying remaining futures
[17:00:36.317] signalConditionsASAP(NULL, pos=0) ...
[17:00:36.317] - nx: 2
[17:00:36.317] - relay: TRUE
[17:00:36.317] - stdout: TRUE
[17:00:36.317] - signal: TRUE
[17:00:36.318] - resignal: FALSE
[17:00:36.318] - force: TRUE
[17:00:36.318] - relayed: [n=2] TRUE, TRUE
[17:00:36.318] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:00:36.318] - relayed: [n=2] TRUE, TRUE
[17:00:36.318] - queued futures: [n=2] TRUE, TRUE
[17:00:36.318] signalConditionsASAP(NULL, pos=0) ... done
[17:00:36.318] resolve() on list ... DONE
[17:00:36.318] result() for MulticoreFuture ...
[17:00:36.319] result() for MulticoreFuture ... done
[17:00:36.319] result() for MulticoreFuture ...
[17:00:36.319] result() for MulticoreFuture ... done
[17:00:36.319] result() for MulticoreFuture ...
[17:00:36.319] result() for MulticoreFuture ... done
[17:00:36.319] result() for MulticoreFuture ...
[17:00:36.319] result() for MulticoreFuture ... done
[17:00:36.319]  - Number of value chunks collected: 2
[17:00:36.320] Resolving 2 futures (chunks) ... DONE
[17:00:36.320] Reducing values from 2 chunks ...
[17:00:36.320]  - Number of values collected after concatenation: 5
[17:00:36.320]  - Number of values expected: 5
[17:00:36.320] Reducing values from 2 chunks ... DONE
[17:00:36.320] future_lapply() ... DONE
[17:00:36.320] future_lapply() ...
[17:00:36.321] Generating random seeds ...
[17:00:36.321] Generating random seed streams for 5 elements ...
[17:00:36.321] Generating random seed streams for 5 elements ... DONE
[17:00:36.321] Generating random seeds ... DONE
[17:00:36.321] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:00:36.326] Number of chunks: 2
[17:00:36.327] getGlobalsAndPackagesXApply() ...
[17:00:36.327]  - future.globals: TRUE
[17:00:36.327] getGlobalsAndPackages() ...
[17:00:36.327] Searching for globals...
[17:00:36.328] - globals found: [2] ‘FUN’, ‘sample’
[17:00:36.328] Searching for globals ... DONE
[17:00:36.329] Resolving globals: FALSE
[17:00:36.329] The total size of the 1 globals is 616 bytes (616 bytes)
[17:00:36.329] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:00:36.329] - globals: [1] ‘FUN’
[17:00:36.330] 
[17:00:36.330] getGlobalsAndPackages() ... DONE
[17:00:36.330]  - globals found/used: [n=1] ‘FUN’
[17:00:36.330]  - needed namespaces: [n=0] 
[17:00:36.330] Finding globals ... DONE
[17:00:36.330]  - use_args: TRUE
[17:00:36.330]  - Getting '...' globals ...
[17:00:36.331] resolve() on list ...
[17:00:36.331]  recursive: 0
[17:00:36.331]  length: 1
[17:00:36.331]  elements: ‘...’
[17:00:36.331]  length: 0 (resolved future 1)
[17:00:36.331] resolve() on list ... DONE
[17:00:36.331]    - '...' content: [n=0] 
[17:00:36.331] List of 1
[17:00:36.331]  $ ...: list()
[17:00:36.331]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.331]  - attr(*, "where")=List of 1
[17:00:36.331]   ..$ ...:<environment: 0x558562da6ae0> 
[17:00:36.331]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.331]  - attr(*, "resolved")= logi TRUE
[17:00:36.331]  - attr(*, "total_size")= num NA
[17:00:36.334]  - Getting '...' globals ... DONE
[17:00:36.335] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:00:36.335] List of 2
[17:00:36.335]  $ ...future.FUN:function (...)  
[17:00:36.335]  $ ...          : list()
[17:00:36.335]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.335]  - attr(*, "where")=List of 2
[17:00:36.335]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:00:36.335]   ..$ ...          :<environment: 0x558562da6ae0> 
[17:00:36.335]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.335]  - attr(*, "resolved")= logi FALSE
[17:00:36.335]  - attr(*, "total_size")= num 616
[17:00:36.340] Packages to be attached in all futures: [n=0] 
[17:00:36.340] getGlobalsAndPackagesXApply() ... DONE
[17:00:36.340] Number of futures (= number of chunks): 2
[17:00:36.340] Launching 2 futures (chunks) ...
[17:00:36.340] Chunk #1 of 2 ...
[17:00:36.340]  - Finding globals in 'X' for chunk #1 ...
[17:00:36.340] getGlobalsAndPackages() ...
[17:00:36.340] Searching for globals...
[17:00:36.341] 
[17:00:36.341] Searching for globals ... DONE
[17:00:36.341] - globals: [0] <none>
[17:00:36.341] getGlobalsAndPackages() ... DONE
[17:00:36.341]    + additional globals found: [n=0] 
[17:00:36.341]    + additional namespaces needed: [n=0] 
[17:00:36.341]  - Finding globals in 'X' for chunk #1 ... DONE
[17:00:36.341]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:36.341]  - seeds: [2] <seeds>
[17:00:36.342]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.342] getGlobalsAndPackages() ...
[17:00:36.342] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.342] Resolving globals: FALSE
[17:00:36.342] Tweak future expression to call with '...' arguments ...
[17:00:36.342] {
[17:00:36.342]     do.call(function(...) {
[17:00:36.342]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.342]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.342]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.342]             on.exit(options(oopts), add = TRUE)
[17:00:36.342]         }
[17:00:36.342]         {
[17:00:36.342]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.342]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.342]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.342]                   envir = globalenv(), inherits = FALSE)
[17:00:36.342]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.342]             })
[17:00:36.342]         }
[17:00:36.342]     }, args = future.call.arguments)
[17:00:36.342] }
[17:00:36.342] Tweak future expression to call with '...' arguments ... DONE
[17:00:36.343] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.343] 
[17:00:36.343] getGlobalsAndPackages() ... DONE
[17:00:36.343] run() for ‘Future’ ...
[17:00:36.343] - state: ‘created’
[17:00:36.344] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:00:36.347] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.347] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:00:36.348]   - Field: ‘label’
[17:00:36.348]   - Field: ‘local’
[17:00:36.348]   - Field: ‘owner’
[17:00:36.348]   - Field: ‘envir’
[17:00:36.348]   - Field: ‘workers’
[17:00:36.348]   - Field: ‘packages’
[17:00:36.348]   - Field: ‘gc’
[17:00:36.348]   - Field: ‘job’
[17:00:36.348]   - Field: ‘conditions’
[17:00:36.348]   - Field: ‘expr’
[17:00:36.348]   - Field: ‘uuid’
[17:00:36.349]   - Field: ‘seed’
[17:00:36.349]   - Field: ‘version’
[17:00:36.349]   - Field: ‘result’
[17:00:36.349]   - Field: ‘asynchronous’
[17:00:36.349]   - Field: ‘calls’
[17:00:36.349]   - Field: ‘globals’
[17:00:36.349]   - Field: ‘stdout’
[17:00:36.349]   - Field: ‘earlySignal’
[17:00:36.349]   - Field: ‘lazy’
[17:00:36.349]   - Field: ‘state’
[17:00:36.349] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:00:36.350] - Launch lazy future ...
[17:00:36.350] Packages needed by the future expression (n = 0): <none>
[17:00:36.350] Packages needed by future strategies (n = 0): <none>
[17:00:36.350] {
[17:00:36.350]     {
[17:00:36.350]         {
[17:00:36.350]             ...future.startTime <- base::Sys.time()
[17:00:36.350]             {
[17:00:36.350]                 {
[17:00:36.350]                   {
[17:00:36.350]                     {
[17:00:36.350]                       base::local({
[17:00:36.350]                         has_future <- base::requireNamespace("future", 
[17:00:36.350]                           quietly = TRUE)
[17:00:36.350]                         if (has_future) {
[17:00:36.350]                           ns <- base::getNamespace("future")
[17:00:36.350]                           version <- ns[[".package"]][["version"]]
[17:00:36.350]                           if (is.null(version)) 
[17:00:36.350]                             version <- utils::packageVersion("future")
[17:00:36.350]                         }
[17:00:36.350]                         else {
[17:00:36.350]                           version <- NULL
[17:00:36.350]                         }
[17:00:36.350]                         if (!has_future || version < "1.8.0") {
[17:00:36.350]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:36.350]                             "", base::R.version$version.string), 
[17:00:36.350]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:36.350]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:36.350]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:36.350]                               "release", "version")], collapse = " "), 
[17:00:36.350]                             hostname = base::Sys.info()[["nodename"]])
[17:00:36.350]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:36.350]                             info)
[17:00:36.350]                           info <- base::paste(info, collapse = "; ")
[17:00:36.350]                           if (!has_future) {
[17:00:36.350]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:36.350]                               info)
[17:00:36.350]                           }
[17:00:36.350]                           else {
[17:00:36.350]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:36.350]                               info, version)
[17:00:36.350]                           }
[17:00:36.350]                           base::stop(msg)
[17:00:36.350]                         }
[17:00:36.350]                       })
[17:00:36.350]                     }
[17:00:36.350]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:36.350]                     base::options(mc.cores = 1L)
[17:00:36.350]                   }
[17:00:36.350]                   ...future.strategy.old <- future::plan("list")
[17:00:36.350]                   options(future.plan = NULL)
[17:00:36.350]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.350]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:36.350]                 }
[17:00:36.350]                 ...future.workdir <- getwd()
[17:00:36.350]             }
[17:00:36.350]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:36.350]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:36.350]         }
[17:00:36.350]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:36.350]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:36.350]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:36.350]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:36.350]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:36.350]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:36.350]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:36.350]             base::names(...future.oldOptions))
[17:00:36.350]     }
[17:00:36.350]     if (FALSE) {
[17:00:36.350]     }
[17:00:36.350]     else {
[17:00:36.350]         if (TRUE) {
[17:00:36.350]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:36.350]                 open = "w")
[17:00:36.350]         }
[17:00:36.350]         else {
[17:00:36.350]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:36.350]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:36.350]         }
[17:00:36.350]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:36.350]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:36.350]             base::sink(type = "output", split = FALSE)
[17:00:36.350]             base::close(...future.stdout)
[17:00:36.350]         }, add = TRUE)
[17:00:36.350]     }
[17:00:36.350]     ...future.frame <- base::sys.nframe()
[17:00:36.350]     ...future.conditions <- base::list()
[17:00:36.350]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:36.350]     if (FALSE) {
[17:00:36.350]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:36.350]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:36.350]     }
[17:00:36.350]     ...future.result <- base::tryCatch({
[17:00:36.350]         base::withCallingHandlers({
[17:00:36.350]             ...future.value <- base::withVisible(base::local({
[17:00:36.350]                 withCallingHandlers({
[17:00:36.350]                   {
[17:00:36.350]                     do.call(function(...) {
[17:00:36.350]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.350]                       if (!identical(...future.globals.maxSize.org, 
[17:00:36.350]                         ...future.globals.maxSize)) {
[17:00:36.350]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.350]                         on.exit(options(oopts), add = TRUE)
[17:00:36.350]                       }
[17:00:36.350]                       {
[17:00:36.350]                         lapply(seq_along(...future.elements_ii), 
[17:00:36.350]                           FUN = function(jj) {
[17:00:36.350]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.350]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.350]                               envir = globalenv(), inherits = FALSE)
[17:00:36.350]                             ...future.FUN(...future.X_jj, ...)
[17:00:36.350]                           })
[17:00:36.350]                       }
[17:00:36.350]                     }, args = future.call.arguments)
[17:00:36.350]                   }
[17:00:36.350]                 }, immediateCondition = function(cond) {
[17:00:36.350]                   save_rds <- function (object, pathname, ...) 
[17:00:36.350]                   {
[17:00:36.350]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:00:36.350]                     if (file_test("-f", pathname_tmp)) {
[17:00:36.350]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.350]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:00:36.350]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.350]                         fi_tmp[["mtime"]])
[17:00:36.350]                     }
[17:00:36.350]                     tryCatch({
[17:00:36.350]                       saveRDS(object, file = pathname_tmp, ...)
[17:00:36.350]                     }, error = function(ex) {
[17:00:36.350]                       msg <- conditionMessage(ex)
[17:00:36.350]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.350]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:00:36.350]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.350]                         fi_tmp[["mtime"]], msg)
[17:00:36.350]                       ex$message <- msg
[17:00:36.350]                       stop(ex)
[17:00:36.350]                     })
[17:00:36.350]                     stopifnot(file_test("-f", pathname_tmp))
[17:00:36.350]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:00:36.350]                     if (!res || file_test("-f", pathname_tmp)) {
[17:00:36.350]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.350]                       fi <- file.info(pathname)
[17:00:36.350]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:00:36.350]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.350]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:00:36.350]                         fi[["size"]], fi[["mtime"]])
[17:00:36.350]                       stop(msg)
[17:00:36.350]                     }
[17:00:36.350]                     invisible(pathname)
[17:00:36.350]                   }
[17:00:36.350]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:00:36.350]                     rootPath = tempdir()) 
[17:00:36.350]                   {
[17:00:36.350]                     obj <- list(time = Sys.time(), condition = cond)
[17:00:36.350]                     file <- tempfile(pattern = class(cond)[1], 
[17:00:36.350]                       tmpdir = path, fileext = ".rds")
[17:00:36.350]                     save_rds(obj, file)
[17:00:36.350]                   }
[17:00:36.350]                   saveImmediateCondition(cond, path = "/tmp/Rtmp7B74IQ/.future/immediateConditions")
[17:00:36.350]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.350]                   {
[17:00:36.350]                     inherits <- base::inherits
[17:00:36.350]                     invokeRestart <- base::invokeRestart
[17:00:36.350]                     is.null <- base::is.null
[17:00:36.350]                     muffled <- FALSE
[17:00:36.350]                     if (inherits(cond, "message")) {
[17:00:36.350]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:36.350]                       if (muffled) 
[17:00:36.350]                         invokeRestart("muffleMessage")
[17:00:36.350]                     }
[17:00:36.350]                     else if (inherits(cond, "warning")) {
[17:00:36.350]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:36.350]                       if (muffled) 
[17:00:36.350]                         invokeRestart("muffleWarning")
[17:00:36.350]                     }
[17:00:36.350]                     else if (inherits(cond, "condition")) {
[17:00:36.350]                       if (!is.null(pattern)) {
[17:00:36.350]                         computeRestarts <- base::computeRestarts
[17:00:36.350]                         grepl <- base::grepl
[17:00:36.350]                         restarts <- computeRestarts(cond)
[17:00:36.350]                         for (restart in restarts) {
[17:00:36.350]                           name <- restart$name
[17:00:36.350]                           if (is.null(name)) 
[17:00:36.350]                             next
[17:00:36.350]                           if (!grepl(pattern, name)) 
[17:00:36.350]                             next
[17:00:36.350]                           invokeRestart(restart)
[17:00:36.350]                           muffled <- TRUE
[17:00:36.350]                           break
[17:00:36.350]                         }
[17:00:36.350]                       }
[17:00:36.350]                     }
[17:00:36.350]                     invisible(muffled)
[17:00:36.350]                   }
[17:00:36.350]                   muffleCondition(cond)
[17:00:36.350]                 })
[17:00:36.350]             }))
[17:00:36.350]             future::FutureResult(value = ...future.value$value, 
[17:00:36.350]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.350]                   ...future.rng), globalenv = if (FALSE) 
[17:00:36.350]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:36.350]                     ...future.globalenv.names))
[17:00:36.350]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:36.350]         }, condition = base::local({
[17:00:36.350]             c <- base::c
[17:00:36.350]             inherits <- base::inherits
[17:00:36.350]             invokeRestart <- base::invokeRestart
[17:00:36.350]             length <- base::length
[17:00:36.350]             list <- base::list
[17:00:36.350]             seq.int <- base::seq.int
[17:00:36.350]             signalCondition <- base::signalCondition
[17:00:36.350]             sys.calls <- base::sys.calls
[17:00:36.350]             `[[` <- base::`[[`
[17:00:36.350]             `+` <- base::`+`
[17:00:36.350]             `<<-` <- base::`<<-`
[17:00:36.350]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:36.350]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:36.350]                   3L)]
[17:00:36.350]             }
[17:00:36.350]             function(cond) {
[17:00:36.350]                 is_error <- inherits(cond, "error")
[17:00:36.350]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:36.350]                   NULL)
[17:00:36.350]                 if (is_error) {
[17:00:36.350]                   sessionInformation <- function() {
[17:00:36.350]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:36.350]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:36.350]                       search = base::search(), system = base::Sys.info())
[17:00:36.350]                   }
[17:00:36.350]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.350]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:36.350]                     cond$call), session = sessionInformation(), 
[17:00:36.350]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:36.350]                   signalCondition(cond)
[17:00:36.350]                 }
[17:00:36.350]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:36.350]                 "immediateCondition"))) {
[17:00:36.350]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:36.350]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.350]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:36.350]                   if (TRUE && !signal) {
[17:00:36.350]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.350]                     {
[17:00:36.350]                       inherits <- base::inherits
[17:00:36.350]                       invokeRestart <- base::invokeRestart
[17:00:36.350]                       is.null <- base::is.null
[17:00:36.350]                       muffled <- FALSE
[17:00:36.350]                       if (inherits(cond, "message")) {
[17:00:36.350]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.350]                         if (muffled) 
[17:00:36.350]                           invokeRestart("muffleMessage")
[17:00:36.350]                       }
[17:00:36.350]                       else if (inherits(cond, "warning")) {
[17:00:36.350]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.350]                         if (muffled) 
[17:00:36.350]                           invokeRestart("muffleWarning")
[17:00:36.350]                       }
[17:00:36.350]                       else if (inherits(cond, "condition")) {
[17:00:36.350]                         if (!is.null(pattern)) {
[17:00:36.350]                           computeRestarts <- base::computeRestarts
[17:00:36.350]                           grepl <- base::grepl
[17:00:36.350]                           restarts <- computeRestarts(cond)
[17:00:36.350]                           for (restart in restarts) {
[17:00:36.350]                             name <- restart$name
[17:00:36.350]                             if (is.null(name)) 
[17:00:36.350]                               next
[17:00:36.350]                             if (!grepl(pattern, name)) 
[17:00:36.350]                               next
[17:00:36.350]                             invokeRestart(restart)
[17:00:36.350]                             muffled <- TRUE
[17:00:36.350]                             break
[17:00:36.350]                           }
[17:00:36.350]                         }
[17:00:36.350]                       }
[17:00:36.350]                       invisible(muffled)
[17:00:36.350]                     }
[17:00:36.350]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.350]                   }
[17:00:36.350]                 }
[17:00:36.350]                 else {
[17:00:36.350]                   if (TRUE) {
[17:00:36.350]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.350]                     {
[17:00:36.350]                       inherits <- base::inherits
[17:00:36.350]                       invokeRestart <- base::invokeRestart
[17:00:36.350]                       is.null <- base::is.null
[17:00:36.350]                       muffled <- FALSE
[17:00:36.350]                       if (inherits(cond, "message")) {
[17:00:36.350]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.350]                         if (muffled) 
[17:00:36.350]                           invokeRestart("muffleMessage")
[17:00:36.350]                       }
[17:00:36.350]                       else if (inherits(cond, "warning")) {
[17:00:36.350]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.350]                         if (muffled) 
[17:00:36.350]                           invokeRestart("muffleWarning")
[17:00:36.350]                       }
[17:00:36.350]                       else if (inherits(cond, "condition")) {
[17:00:36.350]                         if (!is.null(pattern)) {
[17:00:36.350]                           computeRestarts <- base::computeRestarts
[17:00:36.350]                           grepl <- base::grepl
[17:00:36.350]                           restarts <- computeRestarts(cond)
[17:00:36.350]                           for (restart in restarts) {
[17:00:36.350]                             name <- restart$name
[17:00:36.350]                             if (is.null(name)) 
[17:00:36.350]                               next
[17:00:36.350]                             if (!grepl(pattern, name)) 
[17:00:36.350]                               next
[17:00:36.350]                             invokeRestart(restart)
[17:00:36.350]                             muffled <- TRUE
[17:00:36.350]                             break
[17:00:36.350]                           }
[17:00:36.350]                         }
[17:00:36.350]                       }
[17:00:36.350]                       invisible(muffled)
[17:00:36.350]                     }
[17:00:36.350]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.350]                   }
[17:00:36.350]                 }
[17:00:36.350]             }
[17:00:36.350]         }))
[17:00:36.350]     }, error = function(ex) {
[17:00:36.350]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:36.350]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.350]                 ...future.rng), started = ...future.startTime, 
[17:00:36.350]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:36.350]             version = "1.8"), class = "FutureResult")
[17:00:36.350]     }, finally = {
[17:00:36.350]         if (!identical(...future.workdir, getwd())) 
[17:00:36.350]             setwd(...future.workdir)
[17:00:36.350]         {
[17:00:36.350]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:36.350]                 ...future.oldOptions$nwarnings <- NULL
[17:00:36.350]             }
[17:00:36.350]             base::options(...future.oldOptions)
[17:00:36.350]             if (.Platform$OS.type == "windows") {
[17:00:36.350]                 old_names <- names(...future.oldEnvVars)
[17:00:36.350]                 envs <- base::Sys.getenv()
[17:00:36.350]                 names <- names(envs)
[17:00:36.350]                 common <- intersect(names, old_names)
[17:00:36.350]                 added <- setdiff(names, old_names)
[17:00:36.350]                 removed <- setdiff(old_names, names)
[17:00:36.350]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:36.350]                   envs[common]]
[17:00:36.350]                 NAMES <- toupper(changed)
[17:00:36.350]                 args <- list()
[17:00:36.350]                 for (kk in seq_along(NAMES)) {
[17:00:36.350]                   name <- changed[[kk]]
[17:00:36.350]                   NAME <- NAMES[[kk]]
[17:00:36.350]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.350]                     next
[17:00:36.350]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.350]                 }
[17:00:36.350]                 NAMES <- toupper(added)
[17:00:36.350]                 for (kk in seq_along(NAMES)) {
[17:00:36.350]                   name <- added[[kk]]
[17:00:36.350]                   NAME <- NAMES[[kk]]
[17:00:36.350]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.350]                     next
[17:00:36.350]                   args[[name]] <- ""
[17:00:36.350]                 }
[17:00:36.350]                 NAMES <- toupper(removed)
[17:00:36.350]                 for (kk in seq_along(NAMES)) {
[17:00:36.350]                   name <- removed[[kk]]
[17:00:36.350]                   NAME <- NAMES[[kk]]
[17:00:36.350]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.350]                     next
[17:00:36.350]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.350]                 }
[17:00:36.350]                 if (length(args) > 0) 
[17:00:36.350]                   base::do.call(base::Sys.setenv, args = args)
[17:00:36.350]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:36.350]             }
[17:00:36.350]             else {
[17:00:36.350]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:36.350]             }
[17:00:36.350]             {
[17:00:36.350]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:36.350]                   0L) {
[17:00:36.350]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:36.350]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:36.350]                   base::options(opts)
[17:00:36.350]                 }
[17:00:36.350]                 {
[17:00:36.350]                   {
[17:00:36.350]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:36.350]                     NULL
[17:00:36.350]                   }
[17:00:36.350]                   options(future.plan = NULL)
[17:00:36.350]                   if (is.na(NA_character_)) 
[17:00:36.350]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.350]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:36.350]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:36.350]                     .init = FALSE)
[17:00:36.350]                 }
[17:00:36.350]             }
[17:00:36.350]         }
[17:00:36.350]     })
[17:00:36.350]     if (TRUE) {
[17:00:36.350]         base::sink(type = "output", split = FALSE)
[17:00:36.350]         if (TRUE) {
[17:00:36.350]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:36.350]         }
[17:00:36.350]         else {
[17:00:36.350]             ...future.result["stdout"] <- base::list(NULL)
[17:00:36.350]         }
[17:00:36.350]         base::close(...future.stdout)
[17:00:36.350]         ...future.stdout <- NULL
[17:00:36.350]     }
[17:00:36.350]     ...future.result$conditions <- ...future.conditions
[17:00:36.350]     ...future.result$finished <- base::Sys.time()
[17:00:36.350]     ...future.result
[17:00:36.350] }
[17:00:36.353] assign_globals() ...
[17:00:36.353] List of 5
[17:00:36.353]  $ ...future.FUN            :function (...)  
[17:00:36.353]  $ future.call.arguments    : list()
[17:00:36.353]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.353]  $ ...future.elements_ii    :List of 2
[17:00:36.353]   ..$ : int 0
[17:00:36.353]   ..$ : int 0
[17:00:36.353]  $ ...future.seeds_ii       :List of 2
[17:00:36.353]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[17:00:36.353]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[17:00:36.353]  $ ...future.globals.maxSize: NULL
[17:00:36.353]  - attr(*, "where")=List of 5
[17:00:36.353]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:00:36.353]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:00:36.353]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:00:36.353]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:00:36.353]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:00:36.353]  - attr(*, "resolved")= logi FALSE
[17:00:36.353]  - attr(*, "total_size")= num 616
[17:00:36.353]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.353]  - attr(*, "already-done")= logi TRUE
[17:00:36.358] - reassign environment for ‘...future.FUN’
[17:00:36.359] - copied ‘...future.FUN’ to environment
[17:00:36.359] - copied ‘future.call.arguments’ to environment
[17:00:36.359] - copied ‘...future.elements_ii’ to environment
[17:00:36.359] - copied ‘...future.seeds_ii’ to environment
[17:00:36.359] - copied ‘...future.globals.maxSize’ to environment
[17:00:36.359] assign_globals() ... done
[17:00:36.359] requestCore(): workers = 2
[17:00:36.361] MulticoreFuture started
[17:00:36.362] - Launch lazy future ... done
[17:00:36.362] run() for ‘MulticoreFuture’ ... done
[17:00:36.362] Created future:
[17:00:36.362] plan(): Setting new future strategy stack:
[17:00:36.363] List of future strategies:
[17:00:36.363] 1. sequential:
[17:00:36.363]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:36.363]    - tweaked: FALSE
[17:00:36.363]    - call: NULL
[17:00:36.363] plan(): nbrOfWorkers() = 1
[17:00:36.366] plan(): Setting new future strategy stack:
[17:00:36.366] List of future strategies:
[17:00:36.366] 1. multicore:
[17:00:36.366]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:00:36.366]    - tweaked: FALSE
[17:00:36.366]    - call: plan(strategy)
[17:00:36.371] plan(): nbrOfWorkers() = 2
[17:00:36.362] MulticoreFuture:
[17:00:36.362] Label: ‘future_replicate-1’
[17:00:36.362] Expression:
[17:00:36.362] {
[17:00:36.362]     do.call(function(...) {
[17:00:36.362]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.362]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.362]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.362]             on.exit(options(oopts), add = TRUE)
[17:00:36.362]         }
[17:00:36.362]         {
[17:00:36.362]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.362]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.362]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.362]                   envir = globalenv(), inherits = FALSE)
[17:00:36.362]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.362]             })
[17:00:36.362]         }
[17:00:36.362]     }, args = future.call.arguments)
[17:00:36.362] }
[17:00:36.362] Lazy evaluation: FALSE
[17:00:36.362] Asynchronous evaluation: TRUE
[17:00:36.362] Local evaluation: TRUE
[17:00:36.362] Environment: R_GlobalEnv
[17:00:36.362] Capture standard output: TRUE
[17:00:36.362] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:36.362] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:36.362] Packages: <none>
[17:00:36.362] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:36.362] Resolved: TRUE
[17:00:36.362] Value: <not collected>
[17:00:36.362] Conditions captured: <none>
[17:00:36.362] Early signaling: FALSE
[17:00:36.362] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:36.362] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.372] Chunk #1 of 2 ... DONE
[17:00:36.372] Chunk #2 of 2 ...
[17:00:36.372]  - Finding globals in 'X' for chunk #2 ...
[17:00:36.372] getGlobalsAndPackages() ...
[17:00:36.372] Searching for globals...
[17:00:36.373] 
[17:00:36.373] Searching for globals ... DONE
[17:00:36.373] - globals: [0] <none>
[17:00:36.373] getGlobalsAndPackages() ... DONE
[17:00:36.373]    + additional globals found: [n=0] 
[17:00:36.373]    + additional namespaces needed: [n=0] 
[17:00:36.374]  - Finding globals in 'X' for chunk #2 ... DONE
[17:00:36.374]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:36.374]  - seeds: [3] <seeds>
[17:00:36.374]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.374] getGlobalsAndPackages() ...
[17:00:36.374] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.374] Resolving globals: FALSE
[17:00:36.375] Tweak future expression to call with '...' arguments ...
[17:00:36.375] {
[17:00:36.375]     do.call(function(...) {
[17:00:36.375]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.375]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.375]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.375]             on.exit(options(oopts), add = TRUE)
[17:00:36.375]         }
[17:00:36.375]         {
[17:00:36.375]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.375]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.375]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.375]                   envir = globalenv(), inherits = FALSE)
[17:00:36.375]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.375]             })
[17:00:36.375]         }
[17:00:36.375]     }, args = future.call.arguments)
[17:00:36.375] }
[17:00:36.379] Tweak future expression to call with '...' arguments ... DONE
[17:00:36.379] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.380] 
[17:00:36.380] getGlobalsAndPackages() ... DONE
[17:00:36.380] run() for ‘Future’ ...
[17:00:36.380] - state: ‘created’
[17:00:36.381] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:00:36.386] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.387] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:00:36.387]   - Field: ‘label’
[17:00:36.387]   - Field: ‘local’
[17:00:36.387]   - Field: ‘owner’
[17:00:36.387]   - Field: ‘envir’
[17:00:36.387]   - Field: ‘workers’
[17:00:36.388]   - Field: ‘packages’
[17:00:36.388]   - Field: ‘gc’
[17:00:36.388]   - Field: ‘job’
[17:00:36.388]   - Field: ‘conditions’
[17:00:36.388]   - Field: ‘expr’
[17:00:36.388]   - Field: ‘uuid’
[17:00:36.389]   - Field: ‘seed’
[17:00:36.389]   - Field: ‘version’
[17:00:36.389]   - Field: ‘result’
[17:00:36.389]   - Field: ‘asynchronous’
[17:00:36.389]   - Field: ‘calls’
[17:00:36.389]   - Field: ‘globals’
[17:00:36.389]   - Field: ‘stdout’
[17:00:36.390]   - Field: ‘earlySignal’
[17:00:36.390]   - Field: ‘lazy’
[17:00:36.390]   - Field: ‘state’
[17:00:36.390] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:00:36.390] - Launch lazy future ...
[17:00:36.391] Packages needed by the future expression (n = 0): <none>
[17:00:36.391] Packages needed by future strategies (n = 0): <none>
[17:00:36.391] {
[17:00:36.391]     {
[17:00:36.391]         {
[17:00:36.391]             ...future.startTime <- base::Sys.time()
[17:00:36.391]             {
[17:00:36.391]                 {
[17:00:36.391]                   {
[17:00:36.391]                     {
[17:00:36.391]                       base::local({
[17:00:36.391]                         has_future <- base::requireNamespace("future", 
[17:00:36.391]                           quietly = TRUE)
[17:00:36.391]                         if (has_future) {
[17:00:36.391]                           ns <- base::getNamespace("future")
[17:00:36.391]                           version <- ns[[".package"]][["version"]]
[17:00:36.391]                           if (is.null(version)) 
[17:00:36.391]                             version <- utils::packageVersion("future")
[17:00:36.391]                         }
[17:00:36.391]                         else {
[17:00:36.391]                           version <- NULL
[17:00:36.391]                         }
[17:00:36.391]                         if (!has_future || version < "1.8.0") {
[17:00:36.391]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:36.391]                             "", base::R.version$version.string), 
[17:00:36.391]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:36.391]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:36.391]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:36.391]                               "release", "version")], collapse = " "), 
[17:00:36.391]                             hostname = base::Sys.info()[["nodename"]])
[17:00:36.391]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:36.391]                             info)
[17:00:36.391]                           info <- base::paste(info, collapse = "; ")
[17:00:36.391]                           if (!has_future) {
[17:00:36.391]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:36.391]                               info)
[17:00:36.391]                           }
[17:00:36.391]                           else {
[17:00:36.391]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:36.391]                               info, version)
[17:00:36.391]                           }
[17:00:36.391]                           base::stop(msg)
[17:00:36.391]                         }
[17:00:36.391]                       })
[17:00:36.391]                     }
[17:00:36.391]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:36.391]                     base::options(mc.cores = 1L)
[17:00:36.391]                   }
[17:00:36.391]                   ...future.strategy.old <- future::plan("list")
[17:00:36.391]                   options(future.plan = NULL)
[17:00:36.391]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.391]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:36.391]                 }
[17:00:36.391]                 ...future.workdir <- getwd()
[17:00:36.391]             }
[17:00:36.391]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:36.391]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:36.391]         }
[17:00:36.391]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:36.391]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:36.391]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:36.391]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:36.391]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:36.391]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:36.391]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:36.391]             base::names(...future.oldOptions))
[17:00:36.391]     }
[17:00:36.391]     if (FALSE) {
[17:00:36.391]     }
[17:00:36.391]     else {
[17:00:36.391]         if (TRUE) {
[17:00:36.391]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:36.391]                 open = "w")
[17:00:36.391]         }
[17:00:36.391]         else {
[17:00:36.391]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:36.391]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:36.391]         }
[17:00:36.391]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:36.391]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:36.391]             base::sink(type = "output", split = FALSE)
[17:00:36.391]             base::close(...future.stdout)
[17:00:36.391]         }, add = TRUE)
[17:00:36.391]     }
[17:00:36.391]     ...future.frame <- base::sys.nframe()
[17:00:36.391]     ...future.conditions <- base::list()
[17:00:36.391]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:36.391]     if (FALSE) {
[17:00:36.391]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:36.391]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:36.391]     }
[17:00:36.391]     ...future.result <- base::tryCatch({
[17:00:36.391]         base::withCallingHandlers({
[17:00:36.391]             ...future.value <- base::withVisible(base::local({
[17:00:36.391]                 withCallingHandlers({
[17:00:36.391]                   {
[17:00:36.391]                     do.call(function(...) {
[17:00:36.391]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.391]                       if (!identical(...future.globals.maxSize.org, 
[17:00:36.391]                         ...future.globals.maxSize)) {
[17:00:36.391]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.391]                         on.exit(options(oopts), add = TRUE)
[17:00:36.391]                       }
[17:00:36.391]                       {
[17:00:36.391]                         lapply(seq_along(...future.elements_ii), 
[17:00:36.391]                           FUN = function(jj) {
[17:00:36.391]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.391]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.391]                               envir = globalenv(), inherits = FALSE)
[17:00:36.391]                             ...future.FUN(...future.X_jj, ...)
[17:00:36.391]                           })
[17:00:36.391]                       }
[17:00:36.391]                     }, args = future.call.arguments)
[17:00:36.391]                   }
[17:00:36.391]                 }, immediateCondition = function(cond) {
[17:00:36.391]                   save_rds <- function (object, pathname, ...) 
[17:00:36.391]                   {
[17:00:36.391]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:00:36.391]                     if (file_test("-f", pathname_tmp)) {
[17:00:36.391]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.391]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:00:36.391]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.391]                         fi_tmp[["mtime"]])
[17:00:36.391]                     }
[17:00:36.391]                     tryCatch({
[17:00:36.391]                       saveRDS(object, file = pathname_tmp, ...)
[17:00:36.391]                     }, error = function(ex) {
[17:00:36.391]                       msg <- conditionMessage(ex)
[17:00:36.391]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.391]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:00:36.391]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.391]                         fi_tmp[["mtime"]], msg)
[17:00:36.391]                       ex$message <- msg
[17:00:36.391]                       stop(ex)
[17:00:36.391]                     })
[17:00:36.391]                     stopifnot(file_test("-f", pathname_tmp))
[17:00:36.391]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:00:36.391]                     if (!res || file_test("-f", pathname_tmp)) {
[17:00:36.391]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.391]                       fi <- file.info(pathname)
[17:00:36.391]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:00:36.391]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.391]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:00:36.391]                         fi[["size"]], fi[["mtime"]])
[17:00:36.391]                       stop(msg)
[17:00:36.391]                     }
[17:00:36.391]                     invisible(pathname)
[17:00:36.391]                   }
[17:00:36.391]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:00:36.391]                     rootPath = tempdir()) 
[17:00:36.391]                   {
[17:00:36.391]                     obj <- list(time = Sys.time(), condition = cond)
[17:00:36.391]                     file <- tempfile(pattern = class(cond)[1], 
[17:00:36.391]                       tmpdir = path, fileext = ".rds")
[17:00:36.391]                     save_rds(obj, file)
[17:00:36.391]                   }
[17:00:36.391]                   saveImmediateCondition(cond, path = "/tmp/Rtmp7B74IQ/.future/immediateConditions")
[17:00:36.391]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.391]                   {
[17:00:36.391]                     inherits <- base::inherits
[17:00:36.391]                     invokeRestart <- base::invokeRestart
[17:00:36.391]                     is.null <- base::is.null
[17:00:36.391]                     muffled <- FALSE
[17:00:36.391]                     if (inherits(cond, "message")) {
[17:00:36.391]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:36.391]                       if (muffled) 
[17:00:36.391]                         invokeRestart("muffleMessage")
[17:00:36.391]                     }
[17:00:36.391]                     else if (inherits(cond, "warning")) {
[17:00:36.391]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:36.391]                       if (muffled) 
[17:00:36.391]                         invokeRestart("muffleWarning")
[17:00:36.391]                     }
[17:00:36.391]                     else if (inherits(cond, "condition")) {
[17:00:36.391]                       if (!is.null(pattern)) {
[17:00:36.391]                         computeRestarts <- base::computeRestarts
[17:00:36.391]                         grepl <- base::grepl
[17:00:36.391]                         restarts <- computeRestarts(cond)
[17:00:36.391]                         for (restart in restarts) {
[17:00:36.391]                           name <- restart$name
[17:00:36.391]                           if (is.null(name)) 
[17:00:36.391]                             next
[17:00:36.391]                           if (!grepl(pattern, name)) 
[17:00:36.391]                             next
[17:00:36.391]                           invokeRestart(restart)
[17:00:36.391]                           muffled <- TRUE
[17:00:36.391]                           break
[17:00:36.391]                         }
[17:00:36.391]                       }
[17:00:36.391]                     }
[17:00:36.391]                     invisible(muffled)
[17:00:36.391]                   }
[17:00:36.391]                   muffleCondition(cond)
[17:00:36.391]                 })
[17:00:36.391]             }))
[17:00:36.391]             future::FutureResult(value = ...future.value$value, 
[17:00:36.391]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.391]                   ...future.rng), globalenv = if (FALSE) 
[17:00:36.391]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:36.391]                     ...future.globalenv.names))
[17:00:36.391]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:36.391]         }, condition = base::local({
[17:00:36.391]             c <- base::c
[17:00:36.391]             inherits <- base::inherits
[17:00:36.391]             invokeRestart <- base::invokeRestart
[17:00:36.391]             length <- base::length
[17:00:36.391]             list <- base::list
[17:00:36.391]             seq.int <- base::seq.int
[17:00:36.391]             signalCondition <- base::signalCondition
[17:00:36.391]             sys.calls <- base::sys.calls
[17:00:36.391]             `[[` <- base::`[[`
[17:00:36.391]             `+` <- base::`+`
[17:00:36.391]             `<<-` <- base::`<<-`
[17:00:36.391]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:36.391]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:36.391]                   3L)]
[17:00:36.391]             }
[17:00:36.391]             function(cond) {
[17:00:36.391]                 is_error <- inherits(cond, "error")
[17:00:36.391]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:36.391]                   NULL)
[17:00:36.391]                 if (is_error) {
[17:00:36.391]                   sessionInformation <- function() {
[17:00:36.391]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:36.391]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:36.391]                       search = base::search(), system = base::Sys.info())
[17:00:36.391]                   }
[17:00:36.391]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.391]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:36.391]                     cond$call), session = sessionInformation(), 
[17:00:36.391]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:36.391]                   signalCondition(cond)
[17:00:36.391]                 }
[17:00:36.391]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:36.391]                 "immediateCondition"))) {
[17:00:36.391]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:36.391]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.391]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:36.391]                   if (TRUE && !signal) {
[17:00:36.391]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.391]                     {
[17:00:36.391]                       inherits <- base::inherits
[17:00:36.391]                       invokeRestart <- base::invokeRestart
[17:00:36.391]                       is.null <- base::is.null
[17:00:36.391]                       muffled <- FALSE
[17:00:36.391]                       if (inherits(cond, "message")) {
[17:00:36.391]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.391]                         if (muffled) 
[17:00:36.391]                           invokeRestart("muffleMessage")
[17:00:36.391]                       }
[17:00:36.391]                       else if (inherits(cond, "warning")) {
[17:00:36.391]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.391]                         if (muffled) 
[17:00:36.391]                           invokeRestart("muffleWarning")
[17:00:36.391]                       }
[17:00:36.391]                       else if (inherits(cond, "condition")) {
[17:00:36.391]                         if (!is.null(pattern)) {
[17:00:36.391]                           computeRestarts <- base::computeRestarts
[17:00:36.391]                           grepl <- base::grepl
[17:00:36.391]                           restarts <- computeRestarts(cond)
[17:00:36.391]                           for (restart in restarts) {
[17:00:36.391]                             name <- restart$name
[17:00:36.391]                             if (is.null(name)) 
[17:00:36.391]                               next
[17:00:36.391]                             if (!grepl(pattern, name)) 
[17:00:36.391]                               next
[17:00:36.391]                             invokeRestart(restart)
[17:00:36.391]                             muffled <- TRUE
[17:00:36.391]                             break
[17:00:36.391]                           }
[17:00:36.391]                         }
[17:00:36.391]                       }
[17:00:36.391]                       invisible(muffled)
[17:00:36.391]                     }
[17:00:36.391]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.391]                   }
[17:00:36.391]                 }
[17:00:36.391]                 else {
[17:00:36.391]                   if (TRUE) {
[17:00:36.391]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.391]                     {
[17:00:36.391]                       inherits <- base::inherits
[17:00:36.391]                       invokeRestart <- base::invokeRestart
[17:00:36.391]                       is.null <- base::is.null
[17:00:36.391]                       muffled <- FALSE
[17:00:36.391]                       if (inherits(cond, "message")) {
[17:00:36.391]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.391]                         if (muffled) 
[17:00:36.391]                           invokeRestart("muffleMessage")
[17:00:36.391]                       }
[17:00:36.391]                       else if (inherits(cond, "warning")) {
[17:00:36.391]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.391]                         if (muffled) 
[17:00:36.391]                           invokeRestart("muffleWarning")
[17:00:36.391]                       }
[17:00:36.391]                       else if (inherits(cond, "condition")) {
[17:00:36.391]                         if (!is.null(pattern)) {
[17:00:36.391]                           computeRestarts <- base::computeRestarts
[17:00:36.391]                           grepl <- base::grepl
[17:00:36.391]                           restarts <- computeRestarts(cond)
[17:00:36.391]                           for (restart in restarts) {
[17:00:36.391]                             name <- restart$name
[17:00:36.391]                             if (is.null(name)) 
[17:00:36.391]                               next
[17:00:36.391]                             if (!grepl(pattern, name)) 
[17:00:36.391]                               next
[17:00:36.391]                             invokeRestart(restart)
[17:00:36.391]                             muffled <- TRUE
[17:00:36.391]                             break
[17:00:36.391]                           }
[17:00:36.391]                         }
[17:00:36.391]                       }
[17:00:36.391]                       invisible(muffled)
[17:00:36.391]                     }
[17:00:36.391]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.391]                   }
[17:00:36.391]                 }
[17:00:36.391]             }
[17:00:36.391]         }))
[17:00:36.391]     }, error = function(ex) {
[17:00:36.391]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:36.391]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.391]                 ...future.rng), started = ...future.startTime, 
[17:00:36.391]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:36.391]             version = "1.8"), class = "FutureResult")
[17:00:36.391]     }, finally = {
[17:00:36.391]         if (!identical(...future.workdir, getwd())) 
[17:00:36.391]             setwd(...future.workdir)
[17:00:36.391]         {
[17:00:36.391]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:36.391]                 ...future.oldOptions$nwarnings <- NULL
[17:00:36.391]             }
[17:00:36.391]             base::options(...future.oldOptions)
[17:00:36.391]             if (.Platform$OS.type == "windows") {
[17:00:36.391]                 old_names <- names(...future.oldEnvVars)
[17:00:36.391]                 envs <- base::Sys.getenv()
[17:00:36.391]                 names <- names(envs)
[17:00:36.391]                 common <- intersect(names, old_names)
[17:00:36.391]                 added <- setdiff(names, old_names)
[17:00:36.391]                 removed <- setdiff(old_names, names)
[17:00:36.391]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:36.391]                   envs[common]]
[17:00:36.391]                 NAMES <- toupper(changed)
[17:00:36.391]                 args <- list()
[17:00:36.391]                 for (kk in seq_along(NAMES)) {
[17:00:36.391]                   name <- changed[[kk]]
[17:00:36.391]                   NAME <- NAMES[[kk]]
[17:00:36.391]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.391]                     next
[17:00:36.391]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.391]                 }
[17:00:36.391]                 NAMES <- toupper(added)
[17:00:36.391]                 for (kk in seq_along(NAMES)) {
[17:00:36.391]                   name <- added[[kk]]
[17:00:36.391]                   NAME <- NAMES[[kk]]
[17:00:36.391]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.391]                     next
[17:00:36.391]                   args[[name]] <- ""
[17:00:36.391]                 }
[17:00:36.391]                 NAMES <- toupper(removed)
[17:00:36.391]                 for (kk in seq_along(NAMES)) {
[17:00:36.391]                   name <- removed[[kk]]
[17:00:36.391]                   NAME <- NAMES[[kk]]
[17:00:36.391]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.391]                     next
[17:00:36.391]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.391]                 }
[17:00:36.391]                 if (length(args) > 0) 
[17:00:36.391]                   base::do.call(base::Sys.setenv, args = args)
[17:00:36.391]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:36.391]             }
[17:00:36.391]             else {
[17:00:36.391]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:36.391]             }
[17:00:36.391]             {
[17:00:36.391]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:36.391]                   0L) {
[17:00:36.391]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:36.391]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:36.391]                   base::options(opts)
[17:00:36.391]                 }
[17:00:36.391]                 {
[17:00:36.391]                   {
[17:00:36.391]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:36.391]                     NULL
[17:00:36.391]                   }
[17:00:36.391]                   options(future.plan = NULL)
[17:00:36.391]                   if (is.na(NA_character_)) 
[17:00:36.391]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.391]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:36.391]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:36.391]                     .init = FALSE)
[17:00:36.391]                 }
[17:00:36.391]             }
[17:00:36.391]         }
[17:00:36.391]     })
[17:00:36.391]     if (TRUE) {
[17:00:36.391]         base::sink(type = "output", split = FALSE)
[17:00:36.391]         if (TRUE) {
[17:00:36.391]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:36.391]         }
[17:00:36.391]         else {
[17:00:36.391]             ...future.result["stdout"] <- base::list(NULL)
[17:00:36.391]         }
[17:00:36.391]         base::close(...future.stdout)
[17:00:36.391]         ...future.stdout <- NULL
[17:00:36.391]     }
[17:00:36.391]     ...future.result$conditions <- ...future.conditions
[17:00:36.391]     ...future.result$finished <- base::Sys.time()
[17:00:36.391]     ...future.result
[17:00:36.391] }
[17:00:36.394] assign_globals() ...
[17:00:36.394] List of 5
[17:00:36.394]  $ ...future.FUN            :function (...)  
[17:00:36.394]  $ future.call.arguments    : list()
[17:00:36.394]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.394]  $ ...future.elements_ii    :List of 3
[17:00:36.394]   ..$ : int 0
[17:00:36.394]   ..$ : int 0
[17:00:36.394]   ..$ : int 0
[17:00:36.394]  $ ...future.seeds_ii       :List of 3
[17:00:36.394]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[17:00:36.394]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[17:00:36.394]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[17:00:36.394]  $ ...future.globals.maxSize: NULL
[17:00:36.394]  - attr(*, "where")=List of 5
[17:00:36.394]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:00:36.394]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:00:36.394]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:00:36.394]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:00:36.394]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:00:36.394]  - attr(*, "resolved")= logi FALSE
[17:00:36.394]  - attr(*, "total_size")= num 616
[17:00:36.394]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.394]  - attr(*, "already-done")= logi TRUE
[17:00:36.404] - reassign environment for ‘...future.FUN’
[17:00:36.404] - copied ‘...future.FUN’ to environment
[17:00:36.404] - copied ‘future.call.arguments’ to environment
[17:00:36.404] - copied ‘...future.elements_ii’ to environment
[17:00:36.404] - copied ‘...future.seeds_ii’ to environment
[17:00:36.405] - copied ‘...future.globals.maxSize’ to environment
[17:00:36.405] assign_globals() ... done
[17:00:36.405] requestCore(): workers = 2
[17:00:36.407] MulticoreFuture started
[17:00:36.408] - Launch lazy future ... done
[17:00:36.408] run() for ‘MulticoreFuture’ ... done
[17:00:36.408] Created future:
[17:00:36.409] plan(): Setting new future strategy stack:
[17:00:36.409] List of future strategies:
[17:00:36.409] 1. sequential:
[17:00:36.409]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:36.409]    - tweaked: FALSE
[17:00:36.409]    - call: NULL
[17:00:36.410] plan(): nbrOfWorkers() = 1
[17:00:36.412] plan(): Setting new future strategy stack:
[17:00:36.412] List of future strategies:
[17:00:36.412] 1. multicore:
[17:00:36.412]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:00:36.412]    - tweaked: FALSE
[17:00:36.412]    - call: plan(strategy)
[17:00:36.417] plan(): nbrOfWorkers() = 2
[17:00:36.408] MulticoreFuture:
[17:00:36.408] Label: ‘future_replicate-2’
[17:00:36.408] Expression:
[17:00:36.408] {
[17:00:36.408]     do.call(function(...) {
[17:00:36.408]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.408]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.408]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.408]             on.exit(options(oopts), add = TRUE)
[17:00:36.408]         }
[17:00:36.408]         {
[17:00:36.408]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.408]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.408]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.408]                   envir = globalenv(), inherits = FALSE)
[17:00:36.408]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.408]             })
[17:00:36.408]         }
[17:00:36.408]     }, args = future.call.arguments)
[17:00:36.408] }
[17:00:36.408] Lazy evaluation: FALSE
[17:00:36.408] Asynchronous evaluation: TRUE
[17:00:36.408] Local evaluation: TRUE
[17:00:36.408] Environment: R_GlobalEnv
[17:00:36.408] Capture standard output: TRUE
[17:00:36.408] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:36.408] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:36.408] Packages: <none>
[17:00:36.408] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:36.408] Resolved: TRUE
[17:00:36.408] Value: <not collected>
[17:00:36.408] Conditions captured: <none>
[17:00:36.408] Early signaling: FALSE
[17:00:36.408] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:36.408] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.418] Chunk #2 of 2 ... DONE
[17:00:36.418] Launching 2 futures (chunks) ... DONE
[17:00:36.418] Resolving 2 futures (chunks) ...
[17:00:36.419] resolve() on list ...
[17:00:36.419]  recursive: 0
[17:00:36.419]  length: 2
[17:00:36.419] 
[17:00:36.420] Future #1
[17:00:36.420] result() for MulticoreFuture ...
[17:00:36.421] result() for MulticoreFuture ...
[17:00:36.421] result() for MulticoreFuture ... done
[17:00:36.421] result() for MulticoreFuture ... done
[17:00:36.421] result() for MulticoreFuture ...
[17:00:36.421] result() for MulticoreFuture ... done
[17:00:36.421] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:00:36.422] - nx: 2
[17:00:36.422] - relay: TRUE
[17:00:36.422] - stdout: TRUE
[17:00:36.422] - signal: TRUE
[17:00:36.422] - resignal: FALSE
[17:00:36.422] - force: TRUE
[17:00:36.422] - relayed: [n=2] FALSE, FALSE
[17:00:36.422] - queued futures: [n=2] FALSE, FALSE
[17:00:36.423]  - until=1
[17:00:36.423]  - relaying element #1
[17:00:36.423] result() for MulticoreFuture ...
[17:00:36.423] result() for MulticoreFuture ... done
[17:00:36.423] result() for MulticoreFuture ...
[17:00:36.423] result() for MulticoreFuture ... done
[17:00:36.423] result() for MulticoreFuture ...
[17:00:36.424] result() for MulticoreFuture ... done
[17:00:36.424] result() for MulticoreFuture ...
[17:00:36.424] result() for MulticoreFuture ... done
[17:00:36.424] - relayed: [n=2] TRUE, FALSE
[17:00:36.424] - queued futures: [n=2] TRUE, FALSE
[17:00:36.424] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:00:36.425]  length: 1 (resolved future 1)
[17:00:36.425] Future #2
[17:00:36.425] result() for MulticoreFuture ...
[17:00:36.426] result() for MulticoreFuture ...
[17:00:36.426] result() for MulticoreFuture ... done
[17:00:36.426] result() for MulticoreFuture ... done
[17:00:36.426] result() for MulticoreFuture ...
[17:00:36.426] result() for MulticoreFuture ... done
[17:00:36.426] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:00:36.426] - nx: 2
[17:00:36.427] - relay: TRUE
[17:00:36.427] - stdout: TRUE
[17:00:36.427] - signal: TRUE
[17:00:36.427] - resignal: FALSE
[17:00:36.427] - force: TRUE
[17:00:36.427] - relayed: [n=2] TRUE, FALSE
[17:00:36.427] - queued futures: [n=2] TRUE, FALSE
[17:00:36.428]  - until=2
[17:00:36.430]  - relaying element #2
[17:00:36.430] result() for MulticoreFuture ...
[17:00:36.430] result() for MulticoreFuture ... done
[17:00:36.431] result() for MulticoreFuture ...
[17:00:36.431] result() for MulticoreFuture ... done
[17:00:36.431] result() for MulticoreFuture ...
[17:00:36.431] result() for MulticoreFuture ... done
[17:00:36.431] result() for MulticoreFuture ...
[17:00:36.431] result() for MulticoreFuture ... done
[17:00:36.431] - relayed: [n=2] TRUE, TRUE
[17:00:36.432] - queued futures: [n=2] TRUE, TRUE
[17:00:36.432] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:00:36.432]  length: 0 (resolved future 2)
[17:00:36.432] Relaying remaining futures
[17:00:36.432] signalConditionsASAP(NULL, pos=0) ...
[17:00:36.432] - nx: 2
[17:00:36.432] - relay: TRUE
[17:00:36.432] - stdout: TRUE
[17:00:36.433] - signal: TRUE
[17:00:36.433] - resignal: FALSE
[17:00:36.433] - force: TRUE
[17:00:36.433] - relayed: [n=2] TRUE, TRUE
[17:00:36.433] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:00:36.433] - relayed: [n=2] TRUE, TRUE
[17:00:36.433] - queued futures: [n=2] TRUE, TRUE
[17:00:36.433] signalConditionsASAP(NULL, pos=0) ... done
[17:00:36.434] resolve() on list ... DONE
[17:00:36.434] result() for MulticoreFuture ...
[17:00:36.434] result() for MulticoreFuture ... done
[17:00:36.434] result() for MulticoreFuture ...
[17:00:36.434] result() for MulticoreFuture ... done
[17:00:36.434] result() for MulticoreFuture ...
[17:00:36.434] result() for MulticoreFuture ... done
[17:00:36.434] result() for MulticoreFuture ...
[17:00:36.435] result() for MulticoreFuture ... done
[17:00:36.435]  - Number of value chunks collected: 2
[17:00:36.435] Resolving 2 futures (chunks) ... DONE
[17:00:36.435] Reducing values from 2 chunks ...
[17:00:36.435]  - Number of values collected after concatenation: 5
[17:00:36.435]  - Number of values expected: 5
[17:00:36.435] Reducing values from 2 chunks ... DONE
[17:00:36.435] future_lapply() ... DONE
[17:00:36.436] future_lapply() ...
[17:00:36.436] Generating random seeds ...
[17:00:36.436] Generating random seed streams for 5 elements ...
[17:00:36.437] Generating random seed streams for 5 elements ... DONE
[17:00:36.437] Generating random seeds ... DONE
[17:00:36.437] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:00:36.442] Number of chunks: 2
[17:00:36.442] getGlobalsAndPackagesXApply() ...
[17:00:36.442]  - future.globals: TRUE
[17:00:36.442] getGlobalsAndPackages() ...
[17:00:36.442] Searching for globals...
[17:00:36.444] - globals found: [2] ‘FUN’, ‘sample’
[17:00:36.444] Searching for globals ... DONE
[17:00:36.444] Resolving globals: FALSE
[17:00:36.445] The total size of the 1 globals is 616 bytes (616 bytes)
[17:00:36.445] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:00:36.445] - globals: [1] ‘FUN’
[17:00:36.445] 
[17:00:36.445] getGlobalsAndPackages() ... DONE
[17:00:36.446]  - globals found/used: [n=1] ‘FUN’
[17:00:36.446]  - needed namespaces: [n=0] 
[17:00:36.446] Finding globals ... DONE
[17:00:36.446]  - use_args: TRUE
[17:00:36.446]  - Getting '...' globals ...
[17:00:36.446] resolve() on list ...
[17:00:36.447]  recursive: 0
[17:00:36.447]  length: 1
[17:00:36.447]  elements: ‘...’
[17:00:36.447]  length: 0 (resolved future 1)
[17:00:36.447] resolve() on list ... DONE
[17:00:36.447]    - '...' content: [n=0] 
[17:00:36.447] List of 1
[17:00:36.447]  $ ...: list()
[17:00:36.447]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.447]  - attr(*, "where")=List of 1
[17:00:36.447]   ..$ ...:<environment: 0x558560fb8e58> 
[17:00:36.447]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.447]  - attr(*, "resolved")= logi TRUE
[17:00:36.447]  - attr(*, "total_size")= num NA
[17:00:36.450]  - Getting '...' globals ... DONE
[17:00:36.450] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:00:36.451] List of 2
[17:00:36.451]  $ ...future.FUN:function (...)  
[17:00:36.451]  $ ...          : list()
[17:00:36.451]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.451]  - attr(*, "where")=List of 2
[17:00:36.451]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:00:36.451]   ..$ ...          :<environment: 0x558560fb8e58> 
[17:00:36.451]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.451]  - attr(*, "resolved")= logi FALSE
[17:00:36.451]  - attr(*, "total_size")= num 616
[17:00:36.453] Packages to be attached in all futures: [n=0] 
[17:00:36.453] getGlobalsAndPackagesXApply() ... DONE
[17:00:36.454] Number of futures (= number of chunks): 2
[17:00:36.454] Launching 2 futures (chunks) ...
[17:00:36.454] Chunk #1 of 2 ...
[17:00:36.454]  - Finding globals in 'X' for chunk #1 ...
[17:00:36.454] getGlobalsAndPackages() ...
[17:00:36.454] Searching for globals...
[17:00:36.454] 
[17:00:36.454] Searching for globals ... DONE
[17:00:36.455] - globals: [0] <none>
[17:00:36.455] getGlobalsAndPackages() ... DONE
[17:00:36.455]    + additional globals found: [n=0] 
[17:00:36.455]    + additional namespaces needed: [n=0] 
[17:00:36.455]  - Finding globals in 'X' for chunk #1 ... DONE
[17:00:36.455]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:36.455]  - seeds: [2] <seeds>
[17:00:36.455]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.455] getGlobalsAndPackages() ...
[17:00:36.455] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.456] Resolving globals: FALSE
[17:00:36.456] Tweak future expression to call with '...' arguments ...
[17:00:36.456] {
[17:00:36.456]     do.call(function(...) {
[17:00:36.456]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.456]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.456]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.456]             on.exit(options(oopts), add = TRUE)
[17:00:36.456]         }
[17:00:36.456]         {
[17:00:36.456]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.456]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.456]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.456]                   envir = globalenv(), inherits = FALSE)
[17:00:36.456]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.456]             })
[17:00:36.456]         }
[17:00:36.456]     }, args = future.call.arguments)
[17:00:36.456] }
[17:00:36.456] Tweak future expression to call with '...' arguments ... DONE
[17:00:36.456] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.457] 
[17:00:36.457] getGlobalsAndPackages() ... DONE
[17:00:36.457] run() for ‘Future’ ...
[17:00:36.457] - state: ‘created’
[17:00:36.457] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:00:36.496] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.497] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:00:36.497]   - Field: ‘label’
[17:00:36.497]   - Field: ‘local’
[17:00:36.497]   - Field: ‘owner’
[17:00:36.497]   - Field: ‘envir’
[17:00:36.497]   - Field: ‘workers’
[17:00:36.497]   - Field: ‘packages’
[17:00:36.497]   - Field: ‘gc’
[17:00:36.498]   - Field: ‘job’
[17:00:36.498]   - Field: ‘conditions’
[17:00:36.498]   - Field: ‘expr’
[17:00:36.498]   - Field: ‘uuid’
[17:00:36.498]   - Field: ‘seed’
[17:00:36.498]   - Field: ‘version’
[17:00:36.498]   - Field: ‘result’
[17:00:36.498]   - Field: ‘asynchronous’
[17:00:36.498]   - Field: ‘calls’
[17:00:36.498]   - Field: ‘globals’
[17:00:36.499]   - Field: ‘stdout’
[17:00:36.499]   - Field: ‘earlySignal’
[17:00:36.499]   - Field: ‘lazy’
[17:00:36.499]   - Field: ‘state’
[17:00:36.499] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:00:36.499] - Launch lazy future ...
[17:00:36.499] Packages needed by the future expression (n = 0): <none>
[17:00:36.499] Packages needed by future strategies (n = 0): <none>
[17:00:36.500] {
[17:00:36.500]     {
[17:00:36.500]         {
[17:00:36.500]             ...future.startTime <- base::Sys.time()
[17:00:36.500]             {
[17:00:36.500]                 {
[17:00:36.500]                   {
[17:00:36.500]                     {
[17:00:36.500]                       base::local({
[17:00:36.500]                         has_future <- base::requireNamespace("future", 
[17:00:36.500]                           quietly = TRUE)
[17:00:36.500]                         if (has_future) {
[17:00:36.500]                           ns <- base::getNamespace("future")
[17:00:36.500]                           version <- ns[[".package"]][["version"]]
[17:00:36.500]                           if (is.null(version)) 
[17:00:36.500]                             version <- utils::packageVersion("future")
[17:00:36.500]                         }
[17:00:36.500]                         else {
[17:00:36.500]                           version <- NULL
[17:00:36.500]                         }
[17:00:36.500]                         if (!has_future || version < "1.8.0") {
[17:00:36.500]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:36.500]                             "", base::R.version$version.string), 
[17:00:36.500]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:36.500]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:36.500]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:36.500]                               "release", "version")], collapse = " "), 
[17:00:36.500]                             hostname = base::Sys.info()[["nodename"]])
[17:00:36.500]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:36.500]                             info)
[17:00:36.500]                           info <- base::paste(info, collapse = "; ")
[17:00:36.500]                           if (!has_future) {
[17:00:36.500]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:36.500]                               info)
[17:00:36.500]                           }
[17:00:36.500]                           else {
[17:00:36.500]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:36.500]                               info, version)
[17:00:36.500]                           }
[17:00:36.500]                           base::stop(msg)
[17:00:36.500]                         }
[17:00:36.500]                       })
[17:00:36.500]                     }
[17:00:36.500]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:36.500]                     base::options(mc.cores = 1L)
[17:00:36.500]                   }
[17:00:36.500]                   ...future.strategy.old <- future::plan("list")
[17:00:36.500]                   options(future.plan = NULL)
[17:00:36.500]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.500]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:36.500]                 }
[17:00:36.500]                 ...future.workdir <- getwd()
[17:00:36.500]             }
[17:00:36.500]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:36.500]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:36.500]         }
[17:00:36.500]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:36.500]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:36.500]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:36.500]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:36.500]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:36.500]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:36.500]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:36.500]             base::names(...future.oldOptions))
[17:00:36.500]     }
[17:00:36.500]     if (FALSE) {
[17:00:36.500]     }
[17:00:36.500]     else {
[17:00:36.500]         if (TRUE) {
[17:00:36.500]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:36.500]                 open = "w")
[17:00:36.500]         }
[17:00:36.500]         else {
[17:00:36.500]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:36.500]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:36.500]         }
[17:00:36.500]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:36.500]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:36.500]             base::sink(type = "output", split = FALSE)
[17:00:36.500]             base::close(...future.stdout)
[17:00:36.500]         }, add = TRUE)
[17:00:36.500]     }
[17:00:36.500]     ...future.frame <- base::sys.nframe()
[17:00:36.500]     ...future.conditions <- base::list()
[17:00:36.500]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:36.500]     if (FALSE) {
[17:00:36.500]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:36.500]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:36.500]     }
[17:00:36.500]     ...future.result <- base::tryCatch({
[17:00:36.500]         base::withCallingHandlers({
[17:00:36.500]             ...future.value <- base::withVisible(base::local({
[17:00:36.500]                 withCallingHandlers({
[17:00:36.500]                   {
[17:00:36.500]                     do.call(function(...) {
[17:00:36.500]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.500]                       if (!identical(...future.globals.maxSize.org, 
[17:00:36.500]                         ...future.globals.maxSize)) {
[17:00:36.500]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.500]                         on.exit(options(oopts), add = TRUE)
[17:00:36.500]                       }
[17:00:36.500]                       {
[17:00:36.500]                         lapply(seq_along(...future.elements_ii), 
[17:00:36.500]                           FUN = function(jj) {
[17:00:36.500]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.500]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.500]                               envir = globalenv(), inherits = FALSE)
[17:00:36.500]                             ...future.FUN(...future.X_jj, ...)
[17:00:36.500]                           })
[17:00:36.500]                       }
[17:00:36.500]                     }, args = future.call.arguments)
[17:00:36.500]                   }
[17:00:36.500]                 }, immediateCondition = function(cond) {
[17:00:36.500]                   save_rds <- function (object, pathname, ...) 
[17:00:36.500]                   {
[17:00:36.500]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:00:36.500]                     if (file_test("-f", pathname_tmp)) {
[17:00:36.500]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.500]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:00:36.500]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.500]                         fi_tmp[["mtime"]])
[17:00:36.500]                     }
[17:00:36.500]                     tryCatch({
[17:00:36.500]                       saveRDS(object, file = pathname_tmp, ...)
[17:00:36.500]                     }, error = function(ex) {
[17:00:36.500]                       msg <- conditionMessage(ex)
[17:00:36.500]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.500]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:00:36.500]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.500]                         fi_tmp[["mtime"]], msg)
[17:00:36.500]                       ex$message <- msg
[17:00:36.500]                       stop(ex)
[17:00:36.500]                     })
[17:00:36.500]                     stopifnot(file_test("-f", pathname_tmp))
[17:00:36.500]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:00:36.500]                     if (!res || file_test("-f", pathname_tmp)) {
[17:00:36.500]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.500]                       fi <- file.info(pathname)
[17:00:36.500]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:00:36.500]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.500]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:00:36.500]                         fi[["size"]], fi[["mtime"]])
[17:00:36.500]                       stop(msg)
[17:00:36.500]                     }
[17:00:36.500]                     invisible(pathname)
[17:00:36.500]                   }
[17:00:36.500]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:00:36.500]                     rootPath = tempdir()) 
[17:00:36.500]                   {
[17:00:36.500]                     obj <- list(time = Sys.time(), condition = cond)
[17:00:36.500]                     file <- tempfile(pattern = class(cond)[1], 
[17:00:36.500]                       tmpdir = path, fileext = ".rds")
[17:00:36.500]                     save_rds(obj, file)
[17:00:36.500]                   }
[17:00:36.500]                   saveImmediateCondition(cond, path = "/tmp/Rtmp7B74IQ/.future/immediateConditions")
[17:00:36.500]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.500]                   {
[17:00:36.500]                     inherits <- base::inherits
[17:00:36.500]                     invokeRestart <- base::invokeRestart
[17:00:36.500]                     is.null <- base::is.null
[17:00:36.500]                     muffled <- FALSE
[17:00:36.500]                     if (inherits(cond, "message")) {
[17:00:36.500]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:36.500]                       if (muffled) 
[17:00:36.500]                         invokeRestart("muffleMessage")
[17:00:36.500]                     }
[17:00:36.500]                     else if (inherits(cond, "warning")) {
[17:00:36.500]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:36.500]                       if (muffled) 
[17:00:36.500]                         invokeRestart("muffleWarning")
[17:00:36.500]                     }
[17:00:36.500]                     else if (inherits(cond, "condition")) {
[17:00:36.500]                       if (!is.null(pattern)) {
[17:00:36.500]                         computeRestarts <- base::computeRestarts
[17:00:36.500]                         grepl <- base::grepl
[17:00:36.500]                         restarts <- computeRestarts(cond)
[17:00:36.500]                         for (restart in restarts) {
[17:00:36.500]                           name <- restart$name
[17:00:36.500]                           if (is.null(name)) 
[17:00:36.500]                             next
[17:00:36.500]                           if (!grepl(pattern, name)) 
[17:00:36.500]                             next
[17:00:36.500]                           invokeRestart(restart)
[17:00:36.500]                           muffled <- TRUE
[17:00:36.500]                           break
[17:00:36.500]                         }
[17:00:36.500]                       }
[17:00:36.500]                     }
[17:00:36.500]                     invisible(muffled)
[17:00:36.500]                   }
[17:00:36.500]                   muffleCondition(cond)
[17:00:36.500]                 })
[17:00:36.500]             }))
[17:00:36.500]             future::FutureResult(value = ...future.value$value, 
[17:00:36.500]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.500]                   ...future.rng), globalenv = if (FALSE) 
[17:00:36.500]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:36.500]                     ...future.globalenv.names))
[17:00:36.500]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:36.500]         }, condition = base::local({
[17:00:36.500]             c <- base::c
[17:00:36.500]             inherits <- base::inherits
[17:00:36.500]             invokeRestart <- base::invokeRestart
[17:00:36.500]             length <- base::length
[17:00:36.500]             list <- base::list
[17:00:36.500]             seq.int <- base::seq.int
[17:00:36.500]             signalCondition <- base::signalCondition
[17:00:36.500]             sys.calls <- base::sys.calls
[17:00:36.500]             `[[` <- base::`[[`
[17:00:36.500]             `+` <- base::`+`
[17:00:36.500]             `<<-` <- base::`<<-`
[17:00:36.500]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:36.500]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:36.500]                   3L)]
[17:00:36.500]             }
[17:00:36.500]             function(cond) {
[17:00:36.500]                 is_error <- inherits(cond, "error")
[17:00:36.500]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:36.500]                   NULL)
[17:00:36.500]                 if (is_error) {
[17:00:36.500]                   sessionInformation <- function() {
[17:00:36.500]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:36.500]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:36.500]                       search = base::search(), system = base::Sys.info())
[17:00:36.500]                   }
[17:00:36.500]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.500]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:36.500]                     cond$call), session = sessionInformation(), 
[17:00:36.500]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:36.500]                   signalCondition(cond)
[17:00:36.500]                 }
[17:00:36.500]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:36.500]                 "immediateCondition"))) {
[17:00:36.500]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:36.500]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.500]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:36.500]                   if (TRUE && !signal) {
[17:00:36.500]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.500]                     {
[17:00:36.500]                       inherits <- base::inherits
[17:00:36.500]                       invokeRestart <- base::invokeRestart
[17:00:36.500]                       is.null <- base::is.null
[17:00:36.500]                       muffled <- FALSE
[17:00:36.500]                       if (inherits(cond, "message")) {
[17:00:36.500]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.500]                         if (muffled) 
[17:00:36.500]                           invokeRestart("muffleMessage")
[17:00:36.500]                       }
[17:00:36.500]                       else if (inherits(cond, "warning")) {
[17:00:36.500]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.500]                         if (muffled) 
[17:00:36.500]                           invokeRestart("muffleWarning")
[17:00:36.500]                       }
[17:00:36.500]                       else if (inherits(cond, "condition")) {
[17:00:36.500]                         if (!is.null(pattern)) {
[17:00:36.500]                           computeRestarts <- base::computeRestarts
[17:00:36.500]                           grepl <- base::grepl
[17:00:36.500]                           restarts <- computeRestarts(cond)
[17:00:36.500]                           for (restart in restarts) {
[17:00:36.500]                             name <- restart$name
[17:00:36.500]                             if (is.null(name)) 
[17:00:36.500]                               next
[17:00:36.500]                             if (!grepl(pattern, name)) 
[17:00:36.500]                               next
[17:00:36.500]                             invokeRestart(restart)
[17:00:36.500]                             muffled <- TRUE
[17:00:36.500]                             break
[17:00:36.500]                           }
[17:00:36.500]                         }
[17:00:36.500]                       }
[17:00:36.500]                       invisible(muffled)
[17:00:36.500]                     }
[17:00:36.500]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.500]                   }
[17:00:36.500]                 }
[17:00:36.500]                 else {
[17:00:36.500]                   if (TRUE) {
[17:00:36.500]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.500]                     {
[17:00:36.500]                       inherits <- base::inherits
[17:00:36.500]                       invokeRestart <- base::invokeRestart
[17:00:36.500]                       is.null <- base::is.null
[17:00:36.500]                       muffled <- FALSE
[17:00:36.500]                       if (inherits(cond, "message")) {
[17:00:36.500]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.500]                         if (muffled) 
[17:00:36.500]                           invokeRestart("muffleMessage")
[17:00:36.500]                       }
[17:00:36.500]                       else if (inherits(cond, "warning")) {
[17:00:36.500]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.500]                         if (muffled) 
[17:00:36.500]                           invokeRestart("muffleWarning")
[17:00:36.500]                       }
[17:00:36.500]                       else if (inherits(cond, "condition")) {
[17:00:36.500]                         if (!is.null(pattern)) {
[17:00:36.500]                           computeRestarts <- base::computeRestarts
[17:00:36.500]                           grepl <- base::grepl
[17:00:36.500]                           restarts <- computeRestarts(cond)
[17:00:36.500]                           for (restart in restarts) {
[17:00:36.500]                             name <- restart$name
[17:00:36.500]                             if (is.null(name)) 
[17:00:36.500]                               next
[17:00:36.500]                             if (!grepl(pattern, name)) 
[17:00:36.500]                               next
[17:00:36.500]                             invokeRestart(restart)
[17:00:36.500]                             muffled <- TRUE
[17:00:36.500]                             break
[17:00:36.500]                           }
[17:00:36.500]                         }
[17:00:36.500]                       }
[17:00:36.500]                       invisible(muffled)
[17:00:36.500]                     }
[17:00:36.500]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.500]                   }
[17:00:36.500]                 }
[17:00:36.500]             }
[17:00:36.500]         }))
[17:00:36.500]     }, error = function(ex) {
[17:00:36.500]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:36.500]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.500]                 ...future.rng), started = ...future.startTime, 
[17:00:36.500]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:36.500]             version = "1.8"), class = "FutureResult")
[17:00:36.500]     }, finally = {
[17:00:36.500]         if (!identical(...future.workdir, getwd())) 
[17:00:36.500]             setwd(...future.workdir)
[17:00:36.500]         {
[17:00:36.500]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:36.500]                 ...future.oldOptions$nwarnings <- NULL
[17:00:36.500]             }
[17:00:36.500]             base::options(...future.oldOptions)
[17:00:36.500]             if (.Platform$OS.type == "windows") {
[17:00:36.500]                 old_names <- names(...future.oldEnvVars)
[17:00:36.500]                 envs <- base::Sys.getenv()
[17:00:36.500]                 names <- names(envs)
[17:00:36.500]                 common <- intersect(names, old_names)
[17:00:36.500]                 added <- setdiff(names, old_names)
[17:00:36.500]                 removed <- setdiff(old_names, names)
[17:00:36.500]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:36.500]                   envs[common]]
[17:00:36.500]                 NAMES <- toupper(changed)
[17:00:36.500]                 args <- list()
[17:00:36.500]                 for (kk in seq_along(NAMES)) {
[17:00:36.500]                   name <- changed[[kk]]
[17:00:36.500]                   NAME <- NAMES[[kk]]
[17:00:36.500]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.500]                     next
[17:00:36.500]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.500]                 }
[17:00:36.500]                 NAMES <- toupper(added)
[17:00:36.500]                 for (kk in seq_along(NAMES)) {
[17:00:36.500]                   name <- added[[kk]]
[17:00:36.500]                   NAME <- NAMES[[kk]]
[17:00:36.500]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.500]                     next
[17:00:36.500]                   args[[name]] <- ""
[17:00:36.500]                 }
[17:00:36.500]                 NAMES <- toupper(removed)
[17:00:36.500]                 for (kk in seq_along(NAMES)) {
[17:00:36.500]                   name <- removed[[kk]]
[17:00:36.500]                   NAME <- NAMES[[kk]]
[17:00:36.500]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.500]                     next
[17:00:36.500]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.500]                 }
[17:00:36.500]                 if (length(args) > 0) 
[17:00:36.500]                   base::do.call(base::Sys.setenv, args = args)
[17:00:36.500]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:36.500]             }
[17:00:36.500]             else {
[17:00:36.500]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:36.500]             }
[17:00:36.500]             {
[17:00:36.500]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:36.500]                   0L) {
[17:00:36.500]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:36.500]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:36.500]                   base::options(opts)
[17:00:36.500]                 }
[17:00:36.500]                 {
[17:00:36.500]                   {
[17:00:36.500]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:36.500]                     NULL
[17:00:36.500]                   }
[17:00:36.500]                   options(future.plan = NULL)
[17:00:36.500]                   if (is.na(NA_character_)) 
[17:00:36.500]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.500]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:36.500]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:36.500]                     .init = FALSE)
[17:00:36.500]                 }
[17:00:36.500]             }
[17:00:36.500]         }
[17:00:36.500]     })
[17:00:36.500]     if (TRUE) {
[17:00:36.500]         base::sink(type = "output", split = FALSE)
[17:00:36.500]         if (TRUE) {
[17:00:36.500]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:36.500]         }
[17:00:36.500]         else {
[17:00:36.500]             ...future.result["stdout"] <- base::list(NULL)
[17:00:36.500]         }
[17:00:36.500]         base::close(...future.stdout)
[17:00:36.500]         ...future.stdout <- NULL
[17:00:36.500]     }
[17:00:36.500]     ...future.result$conditions <- ...future.conditions
[17:00:36.500]     ...future.result$finished <- base::Sys.time()
[17:00:36.500]     ...future.result
[17:00:36.500] }
[17:00:36.502] assign_globals() ...
[17:00:36.502] List of 5
[17:00:36.502]  $ ...future.FUN            :function (...)  
[17:00:36.502]  $ future.call.arguments    : list()
[17:00:36.502]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.502]  $ ...future.elements_ii    :List of 2
[17:00:36.502]   ..$ : int 0
[17:00:36.502]   ..$ : int 0
[17:00:36.502]  $ ...future.seeds_ii       :List of 2
[17:00:36.502]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[17:00:36.502]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[17:00:36.502]  $ ...future.globals.maxSize: NULL
[17:00:36.502]  - attr(*, "where")=List of 5
[17:00:36.502]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:00:36.502]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:00:36.502]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:00:36.502]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:00:36.502]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:00:36.502]  - attr(*, "resolved")= logi FALSE
[17:00:36.502]  - attr(*, "total_size")= num 616
[17:00:36.502]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.502]  - attr(*, "already-done")= logi TRUE
[17:00:36.508] - reassign environment for ‘...future.FUN’
[17:00:36.508] - copied ‘...future.FUN’ to environment
[17:00:36.508] - copied ‘future.call.arguments’ to environment
[17:00:36.508] - copied ‘...future.elements_ii’ to environment
[17:00:36.508] - copied ‘...future.seeds_ii’ to environment
[17:00:36.508] - copied ‘...future.globals.maxSize’ to environment
[17:00:36.508] assign_globals() ... done
[17:00:36.508] requestCore(): workers = 2
[17:00:36.511] MulticoreFuture started
[17:00:36.511] - Launch lazy future ... done
[17:00:36.511] run() for ‘MulticoreFuture’ ... done
[17:00:36.512] Created future:
[17:00:36.512] plan(): Setting new future strategy stack:
[17:00:36.512] List of future strategies:
[17:00:36.512] 1. sequential:
[17:00:36.512]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:36.512]    - tweaked: FALSE
[17:00:36.512]    - call: NULL
[17:00:36.513] plan(): nbrOfWorkers() = 1
[17:00:36.515] plan(): Setting new future strategy stack:
[17:00:36.516] List of future strategies:
[17:00:36.516] 1. multicore:
[17:00:36.516]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:00:36.516]    - tweaked: FALSE
[17:00:36.516]    - call: plan(strategy)
[17:00:36.521] plan(): nbrOfWorkers() = 2
[17:00:36.512] MulticoreFuture:
[17:00:36.512] Label: ‘future_replicate-1’
[17:00:36.512] Expression:
[17:00:36.512] {
[17:00:36.512]     do.call(function(...) {
[17:00:36.512]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.512]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.512]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.512]             on.exit(options(oopts), add = TRUE)
[17:00:36.512]         }
[17:00:36.512]         {
[17:00:36.512]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.512]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.512]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.512]                   envir = globalenv(), inherits = FALSE)
[17:00:36.512]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.512]             })
[17:00:36.512]         }
[17:00:36.512]     }, args = future.call.arguments)
[17:00:36.512] }
[17:00:36.512] Lazy evaluation: FALSE
[17:00:36.512] Asynchronous evaluation: TRUE
[17:00:36.512] Local evaluation: TRUE
[17:00:36.512] Environment: R_GlobalEnv
[17:00:36.512] Capture standard output: TRUE
[17:00:36.512] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:36.512] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:36.512] Packages: <none>
[17:00:36.512] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:36.512] Resolved: TRUE
[17:00:36.512] Value: <not collected>
[17:00:36.512] Conditions captured: <none>
[17:00:36.512] Early signaling: FALSE
[17:00:36.512] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:36.512] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.522] Chunk #1 of 2 ... DONE
[17:00:36.522] Chunk #2 of 2 ...
[17:00:36.522]  - Finding globals in 'X' for chunk #2 ...
[17:00:36.523] getGlobalsAndPackages() ...
[17:00:36.523] Searching for globals...
[17:00:36.523] 
[17:00:36.523] Searching for globals ... DONE
[17:00:36.524] - globals: [0] <none>
[17:00:36.524] getGlobalsAndPackages() ... DONE
[17:00:36.524]    + additional globals found: [n=0] 
[17:00:36.524]    + additional namespaces needed: [n=0] 
[17:00:36.524]  - Finding globals in 'X' for chunk #2 ... DONE
[17:00:36.524]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:36.524]  - seeds: [3] <seeds>
[17:00:36.525]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.525] getGlobalsAndPackages() ...
[17:00:36.525] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.525] Resolving globals: FALSE
[17:00:36.525] Tweak future expression to call with '...' arguments ...
[17:00:36.525] {
[17:00:36.525]     do.call(function(...) {
[17:00:36.525]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.525]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.525]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.525]             on.exit(options(oopts), add = TRUE)
[17:00:36.525]         }
[17:00:36.525]         {
[17:00:36.525]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.525]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.525]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.525]                   envir = globalenv(), inherits = FALSE)
[17:00:36.525]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.525]             })
[17:00:36.525]         }
[17:00:36.525]     }, args = future.call.arguments)
[17:00:36.525] }
[17:00:36.526] Tweak future expression to call with '...' arguments ... DONE
[17:00:36.526] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.527] 
[17:00:36.527] getGlobalsAndPackages() ... DONE
[17:00:36.527] run() for ‘Future’ ...
[17:00:36.528] - state: ‘created’
[17:00:36.528] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:00:36.532] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.533] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:00:36.533]   - Field: ‘label’
[17:00:36.533]   - Field: ‘local’
[17:00:36.533]   - Field: ‘owner’
[17:00:36.533]   - Field: ‘envir’
[17:00:36.533]   - Field: ‘workers’
[17:00:36.534]   - Field: ‘packages’
[17:00:36.534]   - Field: ‘gc’
[17:00:36.534]   - Field: ‘job’
[17:00:36.534]   - Field: ‘conditions’
[17:00:36.534]   - Field: ‘expr’
[17:00:36.534]   - Field: ‘uuid’
[17:00:36.534]   - Field: ‘seed’
[17:00:36.535]   - Field: ‘version’
[17:00:36.535]   - Field: ‘result’
[17:00:36.535]   - Field: ‘asynchronous’
[17:00:36.535]   - Field: ‘calls’
[17:00:36.535]   - Field: ‘globals’
[17:00:36.535]   - Field: ‘stdout’
[17:00:36.535]   - Field: ‘earlySignal’
[17:00:36.536]   - Field: ‘lazy’
[17:00:36.536]   - Field: ‘state’
[17:00:36.536] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:00:36.536] - Launch lazy future ...
[17:00:36.536] Packages needed by the future expression (n = 0): <none>
[17:00:36.537] Packages needed by future strategies (n = 0): <none>
[17:00:36.537] {
[17:00:36.537]     {
[17:00:36.537]         {
[17:00:36.537]             ...future.startTime <- base::Sys.time()
[17:00:36.537]             {
[17:00:36.537]                 {
[17:00:36.537]                   {
[17:00:36.537]                     {
[17:00:36.537]                       base::local({
[17:00:36.537]                         has_future <- base::requireNamespace("future", 
[17:00:36.537]                           quietly = TRUE)
[17:00:36.537]                         if (has_future) {
[17:00:36.537]                           ns <- base::getNamespace("future")
[17:00:36.537]                           version <- ns[[".package"]][["version"]]
[17:00:36.537]                           if (is.null(version)) 
[17:00:36.537]                             version <- utils::packageVersion("future")
[17:00:36.537]                         }
[17:00:36.537]                         else {
[17:00:36.537]                           version <- NULL
[17:00:36.537]                         }
[17:00:36.537]                         if (!has_future || version < "1.8.0") {
[17:00:36.537]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:36.537]                             "", base::R.version$version.string), 
[17:00:36.537]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:36.537]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:36.537]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:36.537]                               "release", "version")], collapse = " "), 
[17:00:36.537]                             hostname = base::Sys.info()[["nodename"]])
[17:00:36.537]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:36.537]                             info)
[17:00:36.537]                           info <- base::paste(info, collapse = "; ")
[17:00:36.537]                           if (!has_future) {
[17:00:36.537]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:36.537]                               info)
[17:00:36.537]                           }
[17:00:36.537]                           else {
[17:00:36.537]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:36.537]                               info, version)
[17:00:36.537]                           }
[17:00:36.537]                           base::stop(msg)
[17:00:36.537]                         }
[17:00:36.537]                       })
[17:00:36.537]                     }
[17:00:36.537]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:36.537]                     base::options(mc.cores = 1L)
[17:00:36.537]                   }
[17:00:36.537]                   ...future.strategy.old <- future::plan("list")
[17:00:36.537]                   options(future.plan = NULL)
[17:00:36.537]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.537]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:36.537]                 }
[17:00:36.537]                 ...future.workdir <- getwd()
[17:00:36.537]             }
[17:00:36.537]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:36.537]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:36.537]         }
[17:00:36.537]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:36.537]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:36.537]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:36.537]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:36.537]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:36.537]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:36.537]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:36.537]             base::names(...future.oldOptions))
[17:00:36.537]     }
[17:00:36.537]     if (FALSE) {
[17:00:36.537]     }
[17:00:36.537]     else {
[17:00:36.537]         if (TRUE) {
[17:00:36.537]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:36.537]                 open = "w")
[17:00:36.537]         }
[17:00:36.537]         else {
[17:00:36.537]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:36.537]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:36.537]         }
[17:00:36.537]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:36.537]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:36.537]             base::sink(type = "output", split = FALSE)
[17:00:36.537]             base::close(...future.stdout)
[17:00:36.537]         }, add = TRUE)
[17:00:36.537]     }
[17:00:36.537]     ...future.frame <- base::sys.nframe()
[17:00:36.537]     ...future.conditions <- base::list()
[17:00:36.537]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:36.537]     if (FALSE) {
[17:00:36.537]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:36.537]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:36.537]     }
[17:00:36.537]     ...future.result <- base::tryCatch({
[17:00:36.537]         base::withCallingHandlers({
[17:00:36.537]             ...future.value <- base::withVisible(base::local({
[17:00:36.537]                 withCallingHandlers({
[17:00:36.537]                   {
[17:00:36.537]                     do.call(function(...) {
[17:00:36.537]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.537]                       if (!identical(...future.globals.maxSize.org, 
[17:00:36.537]                         ...future.globals.maxSize)) {
[17:00:36.537]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.537]                         on.exit(options(oopts), add = TRUE)
[17:00:36.537]                       }
[17:00:36.537]                       {
[17:00:36.537]                         lapply(seq_along(...future.elements_ii), 
[17:00:36.537]                           FUN = function(jj) {
[17:00:36.537]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.537]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.537]                               envir = globalenv(), inherits = FALSE)
[17:00:36.537]                             ...future.FUN(...future.X_jj, ...)
[17:00:36.537]                           })
[17:00:36.537]                       }
[17:00:36.537]                     }, args = future.call.arguments)
[17:00:36.537]                   }
[17:00:36.537]                 }, immediateCondition = function(cond) {
[17:00:36.537]                   save_rds <- function (object, pathname, ...) 
[17:00:36.537]                   {
[17:00:36.537]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:00:36.537]                     if (file_test("-f", pathname_tmp)) {
[17:00:36.537]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.537]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:00:36.537]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.537]                         fi_tmp[["mtime"]])
[17:00:36.537]                     }
[17:00:36.537]                     tryCatch({
[17:00:36.537]                       saveRDS(object, file = pathname_tmp, ...)
[17:00:36.537]                     }, error = function(ex) {
[17:00:36.537]                       msg <- conditionMessage(ex)
[17:00:36.537]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.537]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:00:36.537]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.537]                         fi_tmp[["mtime"]], msg)
[17:00:36.537]                       ex$message <- msg
[17:00:36.537]                       stop(ex)
[17:00:36.537]                     })
[17:00:36.537]                     stopifnot(file_test("-f", pathname_tmp))
[17:00:36.537]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:00:36.537]                     if (!res || file_test("-f", pathname_tmp)) {
[17:00:36.537]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.537]                       fi <- file.info(pathname)
[17:00:36.537]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:00:36.537]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.537]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:00:36.537]                         fi[["size"]], fi[["mtime"]])
[17:00:36.537]                       stop(msg)
[17:00:36.537]                     }
[17:00:36.537]                     invisible(pathname)
[17:00:36.537]                   }
[17:00:36.537]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:00:36.537]                     rootPath = tempdir()) 
[17:00:36.537]                   {
[17:00:36.537]                     obj <- list(time = Sys.time(), condition = cond)
[17:00:36.537]                     file <- tempfile(pattern = class(cond)[1], 
[17:00:36.537]                       tmpdir = path, fileext = ".rds")
[17:00:36.537]                     save_rds(obj, file)
[17:00:36.537]                   }
[17:00:36.537]                   saveImmediateCondition(cond, path = "/tmp/Rtmp7B74IQ/.future/immediateConditions")
[17:00:36.537]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.537]                   {
[17:00:36.537]                     inherits <- base::inherits
[17:00:36.537]                     invokeRestart <- base::invokeRestart
[17:00:36.537]                     is.null <- base::is.null
[17:00:36.537]                     muffled <- FALSE
[17:00:36.537]                     if (inherits(cond, "message")) {
[17:00:36.537]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:36.537]                       if (muffled) 
[17:00:36.537]                         invokeRestart("muffleMessage")
[17:00:36.537]                     }
[17:00:36.537]                     else if (inherits(cond, "warning")) {
[17:00:36.537]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:36.537]                       if (muffled) 
[17:00:36.537]                         invokeRestart("muffleWarning")
[17:00:36.537]                     }
[17:00:36.537]                     else if (inherits(cond, "condition")) {
[17:00:36.537]                       if (!is.null(pattern)) {
[17:00:36.537]                         computeRestarts <- base::computeRestarts
[17:00:36.537]                         grepl <- base::grepl
[17:00:36.537]                         restarts <- computeRestarts(cond)
[17:00:36.537]                         for (restart in restarts) {
[17:00:36.537]                           name <- restart$name
[17:00:36.537]                           if (is.null(name)) 
[17:00:36.537]                             next
[17:00:36.537]                           if (!grepl(pattern, name)) 
[17:00:36.537]                             next
[17:00:36.537]                           invokeRestart(restart)
[17:00:36.537]                           muffled <- TRUE
[17:00:36.537]                           break
[17:00:36.537]                         }
[17:00:36.537]                       }
[17:00:36.537]                     }
[17:00:36.537]                     invisible(muffled)
[17:00:36.537]                   }
[17:00:36.537]                   muffleCondition(cond)
[17:00:36.537]                 })
[17:00:36.537]             }))
[17:00:36.537]             future::FutureResult(value = ...future.value$value, 
[17:00:36.537]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.537]                   ...future.rng), globalenv = if (FALSE) 
[17:00:36.537]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:36.537]                     ...future.globalenv.names))
[17:00:36.537]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:36.537]         }, condition = base::local({
[17:00:36.537]             c <- base::c
[17:00:36.537]             inherits <- base::inherits
[17:00:36.537]             invokeRestart <- base::invokeRestart
[17:00:36.537]             length <- base::length
[17:00:36.537]             list <- base::list
[17:00:36.537]             seq.int <- base::seq.int
[17:00:36.537]             signalCondition <- base::signalCondition
[17:00:36.537]             sys.calls <- base::sys.calls
[17:00:36.537]             `[[` <- base::`[[`
[17:00:36.537]             `+` <- base::`+`
[17:00:36.537]             `<<-` <- base::`<<-`
[17:00:36.537]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:36.537]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:36.537]                   3L)]
[17:00:36.537]             }
[17:00:36.537]             function(cond) {
[17:00:36.537]                 is_error <- inherits(cond, "error")
[17:00:36.537]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:36.537]                   NULL)
[17:00:36.537]                 if (is_error) {
[17:00:36.537]                   sessionInformation <- function() {
[17:00:36.537]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:36.537]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:36.537]                       search = base::search(), system = base::Sys.info())
[17:00:36.537]                   }
[17:00:36.537]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.537]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:36.537]                     cond$call), session = sessionInformation(), 
[17:00:36.537]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:36.537]                   signalCondition(cond)
[17:00:36.537]                 }
[17:00:36.537]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:36.537]                 "immediateCondition"))) {
[17:00:36.537]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:36.537]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.537]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:36.537]                   if (TRUE && !signal) {
[17:00:36.537]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.537]                     {
[17:00:36.537]                       inherits <- base::inherits
[17:00:36.537]                       invokeRestart <- base::invokeRestart
[17:00:36.537]                       is.null <- base::is.null
[17:00:36.537]                       muffled <- FALSE
[17:00:36.537]                       if (inherits(cond, "message")) {
[17:00:36.537]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.537]                         if (muffled) 
[17:00:36.537]                           invokeRestart("muffleMessage")
[17:00:36.537]                       }
[17:00:36.537]                       else if (inherits(cond, "warning")) {
[17:00:36.537]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.537]                         if (muffled) 
[17:00:36.537]                           invokeRestart("muffleWarning")
[17:00:36.537]                       }
[17:00:36.537]                       else if (inherits(cond, "condition")) {
[17:00:36.537]                         if (!is.null(pattern)) {
[17:00:36.537]                           computeRestarts <- base::computeRestarts
[17:00:36.537]                           grepl <- base::grepl
[17:00:36.537]                           restarts <- computeRestarts(cond)
[17:00:36.537]                           for (restart in restarts) {
[17:00:36.537]                             name <- restart$name
[17:00:36.537]                             if (is.null(name)) 
[17:00:36.537]                               next
[17:00:36.537]                             if (!grepl(pattern, name)) 
[17:00:36.537]                               next
[17:00:36.537]                             invokeRestart(restart)
[17:00:36.537]                             muffled <- TRUE
[17:00:36.537]                             break
[17:00:36.537]                           }
[17:00:36.537]                         }
[17:00:36.537]                       }
[17:00:36.537]                       invisible(muffled)
[17:00:36.537]                     }
[17:00:36.537]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.537]                   }
[17:00:36.537]                 }
[17:00:36.537]                 else {
[17:00:36.537]                   if (TRUE) {
[17:00:36.537]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.537]                     {
[17:00:36.537]                       inherits <- base::inherits
[17:00:36.537]                       invokeRestart <- base::invokeRestart
[17:00:36.537]                       is.null <- base::is.null
[17:00:36.537]                       muffled <- FALSE
[17:00:36.537]                       if (inherits(cond, "message")) {
[17:00:36.537]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.537]                         if (muffled) 
[17:00:36.537]                           invokeRestart("muffleMessage")
[17:00:36.537]                       }
[17:00:36.537]                       else if (inherits(cond, "warning")) {
[17:00:36.537]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.537]                         if (muffled) 
[17:00:36.537]                           invokeRestart("muffleWarning")
[17:00:36.537]                       }
[17:00:36.537]                       else if (inherits(cond, "condition")) {
[17:00:36.537]                         if (!is.null(pattern)) {
[17:00:36.537]                           computeRestarts <- base::computeRestarts
[17:00:36.537]                           grepl <- base::grepl
[17:00:36.537]                           restarts <- computeRestarts(cond)
[17:00:36.537]                           for (restart in restarts) {
[17:00:36.537]                             name <- restart$name
[17:00:36.537]                             if (is.null(name)) 
[17:00:36.537]                               next
[17:00:36.537]                             if (!grepl(pattern, name)) 
[17:00:36.537]                               next
[17:00:36.537]                             invokeRestart(restart)
[17:00:36.537]                             muffled <- TRUE
[17:00:36.537]                             break
[17:00:36.537]                           }
[17:00:36.537]                         }
[17:00:36.537]                       }
[17:00:36.537]                       invisible(muffled)
[17:00:36.537]                     }
[17:00:36.537]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.537]                   }
[17:00:36.537]                 }
[17:00:36.537]             }
[17:00:36.537]         }))
[17:00:36.537]     }, error = function(ex) {
[17:00:36.537]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:36.537]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.537]                 ...future.rng), started = ...future.startTime, 
[17:00:36.537]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:36.537]             version = "1.8"), class = "FutureResult")
[17:00:36.537]     }, finally = {
[17:00:36.537]         if (!identical(...future.workdir, getwd())) 
[17:00:36.537]             setwd(...future.workdir)
[17:00:36.537]         {
[17:00:36.537]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:36.537]                 ...future.oldOptions$nwarnings <- NULL
[17:00:36.537]             }
[17:00:36.537]             base::options(...future.oldOptions)
[17:00:36.537]             if (.Platform$OS.type == "windows") {
[17:00:36.537]                 old_names <- names(...future.oldEnvVars)
[17:00:36.537]                 envs <- base::Sys.getenv()
[17:00:36.537]                 names <- names(envs)
[17:00:36.537]                 common <- intersect(names, old_names)
[17:00:36.537]                 added <- setdiff(names, old_names)
[17:00:36.537]                 removed <- setdiff(old_names, names)
[17:00:36.537]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:36.537]                   envs[common]]
[17:00:36.537]                 NAMES <- toupper(changed)
[17:00:36.537]                 args <- list()
[17:00:36.537]                 for (kk in seq_along(NAMES)) {
[17:00:36.537]                   name <- changed[[kk]]
[17:00:36.537]                   NAME <- NAMES[[kk]]
[17:00:36.537]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.537]                     next
[17:00:36.537]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.537]                 }
[17:00:36.537]                 NAMES <- toupper(added)
[17:00:36.537]                 for (kk in seq_along(NAMES)) {
[17:00:36.537]                   name <- added[[kk]]
[17:00:36.537]                   NAME <- NAMES[[kk]]
[17:00:36.537]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.537]                     next
[17:00:36.537]                   args[[name]] <- ""
[17:00:36.537]                 }
[17:00:36.537]                 NAMES <- toupper(removed)
[17:00:36.537]                 for (kk in seq_along(NAMES)) {
[17:00:36.537]                   name <- removed[[kk]]
[17:00:36.537]                   NAME <- NAMES[[kk]]
[17:00:36.537]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.537]                     next
[17:00:36.537]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.537]                 }
[17:00:36.537]                 if (length(args) > 0) 
[17:00:36.537]                   base::do.call(base::Sys.setenv, args = args)
[17:00:36.537]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:36.537]             }
[17:00:36.537]             else {
[17:00:36.537]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:36.537]             }
[17:00:36.537]             {
[17:00:36.537]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:36.537]                   0L) {
[17:00:36.537]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:36.537]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:36.537]                   base::options(opts)
[17:00:36.537]                 }
[17:00:36.537]                 {
[17:00:36.537]                   {
[17:00:36.537]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:36.537]                     NULL
[17:00:36.537]                   }
[17:00:36.537]                   options(future.plan = NULL)
[17:00:36.537]                   if (is.na(NA_character_)) 
[17:00:36.537]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.537]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:36.537]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:36.537]                     .init = FALSE)
[17:00:36.537]                 }
[17:00:36.537]             }
[17:00:36.537]         }
[17:00:36.537]     })
[17:00:36.537]     if (TRUE) {
[17:00:36.537]         base::sink(type = "output", split = FALSE)
[17:00:36.537]         if (TRUE) {
[17:00:36.537]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:36.537]         }
[17:00:36.537]         else {
[17:00:36.537]             ...future.result["stdout"] <- base::list(NULL)
[17:00:36.537]         }
[17:00:36.537]         base::close(...future.stdout)
[17:00:36.537]         ...future.stdout <- NULL
[17:00:36.537]     }
[17:00:36.537]     ...future.result$conditions <- ...future.conditions
[17:00:36.537]     ...future.result$finished <- base::Sys.time()
[17:00:36.537]     ...future.result
[17:00:36.537] }
[17:00:36.541] assign_globals() ...
[17:00:36.541] List of 5
[17:00:36.541]  $ ...future.FUN            :function (...)  
[17:00:36.541]  $ future.call.arguments    : list()
[17:00:36.541]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.541]  $ ...future.elements_ii    :List of 3
[17:00:36.541]   ..$ : int 0
[17:00:36.541]   ..$ : int 0
[17:00:36.541]   ..$ : int 0
[17:00:36.541]  $ ...future.seeds_ii       :List of 3
[17:00:36.541]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[17:00:36.541]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[17:00:36.541]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[17:00:36.541]  $ ...future.globals.maxSize: NULL
[17:00:36.541]  - attr(*, "where")=List of 5
[17:00:36.541]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:00:36.541]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:00:36.541]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:00:36.541]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:00:36.541]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:00:36.541]  - attr(*, "resolved")= logi FALSE
[17:00:36.541]  - attr(*, "total_size")= num 616
[17:00:36.541]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.541]  - attr(*, "already-done")= logi TRUE
[17:00:36.554] - reassign environment for ‘...future.FUN’
[17:00:36.554] - copied ‘...future.FUN’ to environment
[17:00:36.554] - copied ‘future.call.arguments’ to environment
[17:00:36.554] - copied ‘...future.elements_ii’ to environment
[17:00:36.554] - copied ‘...future.seeds_ii’ to environment
[17:00:36.555] - copied ‘...future.globals.maxSize’ to environment
[17:00:36.555] assign_globals() ... done
[17:00:36.555] requestCore(): workers = 2
[17:00:36.557] MulticoreFuture started
[17:00:36.558] - Launch lazy future ... done
[17:00:36.558] run() for ‘MulticoreFuture’ ... done
[17:00:36.558] Created future:
[17:00:36.559] plan(): Setting new future strategy stack:
[17:00:36.559] List of future strategies:
[17:00:36.559] 1. sequential:
[17:00:36.559]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:36.559]    - tweaked: FALSE
[17:00:36.559]    - call: NULL
[17:00:36.560] plan(): nbrOfWorkers() = 1
[17:00:36.562] plan(): Setting new future strategy stack:
[17:00:36.563] List of future strategies:
[17:00:36.563] 1. multicore:
[17:00:36.563]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:00:36.563]    - tweaked: FALSE
[17:00:36.563]    - call: plan(strategy)
[17:00:36.568] plan(): nbrOfWorkers() = 2
[17:00:36.559] MulticoreFuture:
[17:00:36.559] Label: ‘future_replicate-2’
[17:00:36.559] Expression:
[17:00:36.559] {
[17:00:36.559]     do.call(function(...) {
[17:00:36.559]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.559]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.559]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.559]             on.exit(options(oopts), add = TRUE)
[17:00:36.559]         }
[17:00:36.559]         {
[17:00:36.559]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.559]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.559]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.559]                   envir = globalenv(), inherits = FALSE)
[17:00:36.559]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.559]             })
[17:00:36.559]         }
[17:00:36.559]     }, args = future.call.arguments)
[17:00:36.559] }
[17:00:36.559] Lazy evaluation: FALSE
[17:00:36.559] Asynchronous evaluation: TRUE
[17:00:36.559] Local evaluation: TRUE
[17:00:36.559] Environment: R_GlobalEnv
[17:00:36.559] Capture standard output: TRUE
[17:00:36.559] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:36.559] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:36.559] Packages: <none>
[17:00:36.559] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:36.559] Resolved: TRUE
[17:00:36.559] Value: <not collected>
[17:00:36.559] Conditions captured: <none>
[17:00:36.559] Early signaling: FALSE
[17:00:36.559] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:36.559] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.569] Chunk #2 of 2 ... DONE
[17:00:36.569] Launching 2 futures (chunks) ... DONE
[17:00:36.569] Resolving 2 futures (chunks) ...
[17:00:36.570] resolve() on list ...
[17:00:36.570]  recursive: 0
[17:00:36.570]  length: 2
[17:00:36.570] 
[17:00:36.570] Future #1
[17:00:36.571] result() for MulticoreFuture ...
[17:00:36.571] result() for MulticoreFuture ...
[17:00:36.572] result() for MulticoreFuture ... done
[17:00:36.572] result() for MulticoreFuture ... done
[17:00:36.572] result() for MulticoreFuture ...
[17:00:36.572] result() for MulticoreFuture ... done
[17:00:36.572] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:00:36.573] - nx: 2
[17:00:36.573] - relay: TRUE
[17:00:36.573] - stdout: TRUE
[17:00:36.573] - signal: TRUE
[17:00:36.573] - resignal: FALSE
[17:00:36.573] - force: TRUE
[17:00:36.573] - relayed: [n=2] FALSE, FALSE
[17:00:36.573] - queued futures: [n=2] FALSE, FALSE
[17:00:36.574]  - until=1
[17:00:36.574]  - relaying element #1
[17:00:36.574] result() for MulticoreFuture ...
[17:00:36.574] result() for MulticoreFuture ... done
[17:00:36.574] result() for MulticoreFuture ...
[17:00:36.574] result() for MulticoreFuture ... done
[17:00:36.575] result() for MulticoreFuture ...
[17:00:36.575] result() for MulticoreFuture ... done
[17:00:36.575] result() for MulticoreFuture ...
[17:00:36.575] result() for MulticoreFuture ... done
[17:00:36.575] - relayed: [n=2] TRUE, FALSE
[17:00:36.575] - queued futures: [n=2] TRUE, FALSE
[17:00:36.575] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:00:36.576]  length: 1 (resolved future 1)
[17:00:36.576] Future #2
[17:00:36.576] result() for MulticoreFuture ...
[17:00:36.577] result() for MulticoreFuture ...
[17:00:36.577] result() for MulticoreFuture ... done
[17:00:36.577] result() for MulticoreFuture ... done
[17:00:36.577] result() for MulticoreFuture ...
[17:00:36.577] result() for MulticoreFuture ... done
[17:00:36.578] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:00:36.578] - nx: 2
[17:00:36.578] - relay: TRUE
[17:00:36.578] - stdout: TRUE
[17:00:36.578] - signal: TRUE
[17:00:36.578] - resignal: FALSE
[17:00:36.578] - force: TRUE
[17:00:36.579] - relayed: [n=2] TRUE, FALSE
[17:00:36.579] - queued futures: [n=2] TRUE, FALSE
[17:00:36.579]  - until=2
[17:00:36.579]  - relaying element #2
[17:00:36.579] result() for MulticoreFuture ...
[17:00:36.579] result() for MulticoreFuture ... done
[17:00:36.579] result() for MulticoreFuture ...
[17:00:36.579] result() for MulticoreFuture ... done
[17:00:36.580] result() for MulticoreFuture ...
[17:00:36.580] result() for MulticoreFuture ... done
[17:00:36.580] result() for MulticoreFuture ...
[17:00:36.580] result() for MulticoreFuture ... done
[17:00:36.580] - relayed: [n=2] TRUE, TRUE
[17:00:36.580] - queued futures: [n=2] TRUE, TRUE
[17:00:36.580] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:00:36.580]  length: 0 (resolved future 2)
[17:00:36.581] Relaying remaining futures
[17:00:36.581] signalConditionsASAP(NULL, pos=0) ...
[17:00:36.581] - nx: 2
[17:00:36.581] - relay: TRUE
[17:00:36.581] - stdout: TRUE
[17:00:36.581] - signal: TRUE
[17:00:36.581] - resignal: FALSE
[17:00:36.581] - force: TRUE
[17:00:36.581] - relayed: [n=2] TRUE, TRUE
[17:00:36.581] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:00:36.582] - relayed: [n=2] TRUE, TRUE
[17:00:36.582] - queued futures: [n=2] TRUE, TRUE
[17:00:36.582] signalConditionsASAP(NULL, pos=0) ... done
[17:00:36.582] resolve() on list ... DONE
[17:00:36.582] result() for MulticoreFuture ...
[17:00:36.582] result() for MulticoreFuture ... done
[17:00:36.582] result() for MulticoreFuture ...
[17:00:36.582] result() for MulticoreFuture ... done
[17:00:36.583] result() for MulticoreFuture ...
[17:00:36.583] result() for MulticoreFuture ... done
[17:00:36.583] result() for MulticoreFuture ...
[17:00:36.583] result() for MulticoreFuture ... done
[17:00:36.583]  - Number of value chunks collected: 2
[17:00:36.583] Resolving 2 futures (chunks) ... DONE
[17:00:36.583] Reducing values from 2 chunks ...
[17:00:36.584]  - Number of values collected after concatenation: 5
[17:00:36.584]  - Number of values expected: 5
[17:00:36.584] Reducing values from 2 chunks ... DONE
[17:00:36.584] future_lapply() ... DONE
[17:00:36.584] future_lapply() ...
[17:00:36.585] Generating random seeds ...
[17:00:36.585] Generating random seed streams for 5 elements ...
[17:00:36.585] Generating random seed streams for 5 elements ... DONE
[17:00:36.585] Generating random seeds ... DONE
[17:00:36.585] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:00:36.590] Number of chunks: 2
[17:00:36.590] getGlobalsAndPackagesXApply() ...
[17:00:36.590]  - future.globals: TRUE
[17:00:36.590] getGlobalsAndPackages() ...
[17:00:36.590] Searching for globals...
[17:00:36.592] - globals found: [2] ‘FUN’, ‘sample’
[17:00:36.592] Searching for globals ... DONE
[17:00:36.592] Resolving globals: FALSE
[17:00:36.592] The total size of the 1 globals is 616 bytes (616 bytes)
[17:00:36.593] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:00:36.593] - globals: [1] ‘FUN’
[17:00:36.593] 
[17:00:36.593] getGlobalsAndPackages() ... DONE
[17:00:36.593]  - globals found/used: [n=1] ‘FUN’
[17:00:36.593]  - needed namespaces: [n=0] 
[17:00:36.593] Finding globals ... DONE
[17:00:36.594]  - use_args: TRUE
[17:00:36.594]  - Getting '...' globals ...
[17:00:36.594] resolve() on list ...
[17:00:36.594]  recursive: 0
[17:00:36.594]  length: 1
[17:00:36.594]  elements: ‘...’
[17:00:36.595]  length: 0 (resolved future 1)
[17:00:36.595] resolve() on list ... DONE
[17:00:36.595]    - '...' content: [n=0] 
[17:00:36.595] List of 1
[17:00:36.595]  $ ...: list()
[17:00:36.595]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.595]  - attr(*, "where")=List of 1
[17:00:36.595]   ..$ ...:<environment: 0x5585630c6e90> 
[17:00:36.595]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.595]  - attr(*, "resolved")= logi TRUE
[17:00:36.595]  - attr(*, "total_size")= num NA
[17:00:36.600]  - Getting '...' globals ... DONE
[17:00:36.600] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:00:36.600] List of 2
[17:00:36.600]  $ ...future.FUN:function (...)  
[17:00:36.600]  $ ...          : list()
[17:00:36.600]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.600]  - attr(*, "where")=List of 2
[17:00:36.600]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:00:36.600]   ..$ ...          :<environment: 0x5585630c6e90> 
[17:00:36.600]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.600]  - attr(*, "resolved")= logi FALSE
[17:00:36.600]  - attr(*, "total_size")= num 616
[17:00:36.604] Packages to be attached in all futures: [n=0] 
[17:00:36.604] getGlobalsAndPackagesXApply() ... DONE
[17:00:36.604] Number of futures (= number of chunks): 2
[17:00:36.604] Launching 2 futures (chunks) ...
[17:00:36.604] Chunk #1 of 2 ...
[17:00:36.604]  - Finding globals in 'X' for chunk #1 ...
[17:00:36.604] getGlobalsAndPackages() ...
[17:00:36.605] Searching for globals...
[17:00:36.605] 
[17:00:36.605] Searching for globals ... DONE
[17:00:36.605] - globals: [0] <none>
[17:00:36.605] getGlobalsAndPackages() ... DONE
[17:00:36.605]    + additional globals found: [n=0] 
[17:00:36.605]    + additional namespaces needed: [n=0] 
[17:00:36.605]  - Finding globals in 'X' for chunk #1 ... DONE
[17:00:36.605]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:36.606]  - seeds: [2] <seeds>
[17:00:36.606]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.606] getGlobalsAndPackages() ...
[17:00:36.606] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.606] Resolving globals: FALSE
[17:00:36.606] Tweak future expression to call with '...' arguments ...
[17:00:36.606] {
[17:00:36.606]     do.call(function(...) {
[17:00:36.606]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.606]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.606]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.606]             on.exit(options(oopts), add = TRUE)
[17:00:36.606]         }
[17:00:36.606]         {
[17:00:36.606]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.606]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.606]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.606]                   envir = globalenv(), inherits = FALSE)
[17:00:36.606]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.606]             })
[17:00:36.606]         }
[17:00:36.606]     }, args = future.call.arguments)
[17:00:36.606] }
[17:00:36.607] Tweak future expression to call with '...' arguments ... DONE
[17:00:36.607] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.607] 
[17:00:36.607] getGlobalsAndPackages() ... DONE
[17:00:36.607] run() for ‘Future’ ...
[17:00:36.608] - state: ‘created’
[17:00:36.608] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:00:36.611] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.612] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:00:36.612]   - Field: ‘label’
[17:00:36.612]   - Field: ‘local’
[17:00:36.612]   - Field: ‘owner’
[17:00:36.612]   - Field: ‘envir’
[17:00:36.612]   - Field: ‘workers’
[17:00:36.612]   - Field: ‘packages’
[17:00:36.612]   - Field: ‘gc’
[17:00:36.612]   - Field: ‘job’
[17:00:36.613]   - Field: ‘conditions’
[17:00:36.613]   - Field: ‘expr’
[17:00:36.613]   - Field: ‘uuid’
[17:00:36.613]   - Field: ‘seed’
[17:00:36.613]   - Field: ‘version’
[17:00:36.613]   - Field: ‘result’
[17:00:36.613]   - Field: ‘asynchronous’
[17:00:36.613]   - Field: ‘calls’
[17:00:36.613]   - Field: ‘globals’
[17:00:36.613]   - Field: ‘stdout’
[17:00:36.613]   - Field: ‘earlySignal’
[17:00:36.614]   - Field: ‘lazy’
[17:00:36.614]   - Field: ‘state’
[17:00:36.614] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:00:36.614] - Launch lazy future ...
[17:00:36.614] Packages needed by the future expression (n = 0): <none>
[17:00:36.614] Packages needed by future strategies (n = 0): <none>
[17:00:36.615] {
[17:00:36.615]     {
[17:00:36.615]         {
[17:00:36.615]             ...future.startTime <- base::Sys.time()
[17:00:36.615]             {
[17:00:36.615]                 {
[17:00:36.615]                   {
[17:00:36.615]                     {
[17:00:36.615]                       base::local({
[17:00:36.615]                         has_future <- base::requireNamespace("future", 
[17:00:36.615]                           quietly = TRUE)
[17:00:36.615]                         if (has_future) {
[17:00:36.615]                           ns <- base::getNamespace("future")
[17:00:36.615]                           version <- ns[[".package"]][["version"]]
[17:00:36.615]                           if (is.null(version)) 
[17:00:36.615]                             version <- utils::packageVersion("future")
[17:00:36.615]                         }
[17:00:36.615]                         else {
[17:00:36.615]                           version <- NULL
[17:00:36.615]                         }
[17:00:36.615]                         if (!has_future || version < "1.8.0") {
[17:00:36.615]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:36.615]                             "", base::R.version$version.string), 
[17:00:36.615]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:36.615]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:36.615]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:36.615]                               "release", "version")], collapse = " "), 
[17:00:36.615]                             hostname = base::Sys.info()[["nodename"]])
[17:00:36.615]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:36.615]                             info)
[17:00:36.615]                           info <- base::paste(info, collapse = "; ")
[17:00:36.615]                           if (!has_future) {
[17:00:36.615]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:36.615]                               info)
[17:00:36.615]                           }
[17:00:36.615]                           else {
[17:00:36.615]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:36.615]                               info, version)
[17:00:36.615]                           }
[17:00:36.615]                           base::stop(msg)
[17:00:36.615]                         }
[17:00:36.615]                       })
[17:00:36.615]                     }
[17:00:36.615]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:36.615]                     base::options(mc.cores = 1L)
[17:00:36.615]                   }
[17:00:36.615]                   ...future.strategy.old <- future::plan("list")
[17:00:36.615]                   options(future.plan = NULL)
[17:00:36.615]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.615]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:36.615]                 }
[17:00:36.615]                 ...future.workdir <- getwd()
[17:00:36.615]             }
[17:00:36.615]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:36.615]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:36.615]         }
[17:00:36.615]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:36.615]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:36.615]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:36.615]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:36.615]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:36.615]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:36.615]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:36.615]             base::names(...future.oldOptions))
[17:00:36.615]     }
[17:00:36.615]     if (FALSE) {
[17:00:36.615]     }
[17:00:36.615]     else {
[17:00:36.615]         if (TRUE) {
[17:00:36.615]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:36.615]                 open = "w")
[17:00:36.615]         }
[17:00:36.615]         else {
[17:00:36.615]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:36.615]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:36.615]         }
[17:00:36.615]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:36.615]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:36.615]             base::sink(type = "output", split = FALSE)
[17:00:36.615]             base::close(...future.stdout)
[17:00:36.615]         }, add = TRUE)
[17:00:36.615]     }
[17:00:36.615]     ...future.frame <- base::sys.nframe()
[17:00:36.615]     ...future.conditions <- base::list()
[17:00:36.615]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:36.615]     if (FALSE) {
[17:00:36.615]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:36.615]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:36.615]     }
[17:00:36.615]     ...future.result <- base::tryCatch({
[17:00:36.615]         base::withCallingHandlers({
[17:00:36.615]             ...future.value <- base::withVisible(base::local({
[17:00:36.615]                 withCallingHandlers({
[17:00:36.615]                   {
[17:00:36.615]                     do.call(function(...) {
[17:00:36.615]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.615]                       if (!identical(...future.globals.maxSize.org, 
[17:00:36.615]                         ...future.globals.maxSize)) {
[17:00:36.615]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.615]                         on.exit(options(oopts), add = TRUE)
[17:00:36.615]                       }
[17:00:36.615]                       {
[17:00:36.615]                         lapply(seq_along(...future.elements_ii), 
[17:00:36.615]                           FUN = function(jj) {
[17:00:36.615]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.615]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.615]                               envir = globalenv(), inherits = FALSE)
[17:00:36.615]                             ...future.FUN(...future.X_jj, ...)
[17:00:36.615]                           })
[17:00:36.615]                       }
[17:00:36.615]                     }, args = future.call.arguments)
[17:00:36.615]                   }
[17:00:36.615]                 }, immediateCondition = function(cond) {
[17:00:36.615]                   save_rds <- function (object, pathname, ...) 
[17:00:36.615]                   {
[17:00:36.615]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:00:36.615]                     if (file_test("-f", pathname_tmp)) {
[17:00:36.615]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.615]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:00:36.615]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.615]                         fi_tmp[["mtime"]])
[17:00:36.615]                     }
[17:00:36.615]                     tryCatch({
[17:00:36.615]                       saveRDS(object, file = pathname_tmp, ...)
[17:00:36.615]                     }, error = function(ex) {
[17:00:36.615]                       msg <- conditionMessage(ex)
[17:00:36.615]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.615]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:00:36.615]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.615]                         fi_tmp[["mtime"]], msg)
[17:00:36.615]                       ex$message <- msg
[17:00:36.615]                       stop(ex)
[17:00:36.615]                     })
[17:00:36.615]                     stopifnot(file_test("-f", pathname_tmp))
[17:00:36.615]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:00:36.615]                     if (!res || file_test("-f", pathname_tmp)) {
[17:00:36.615]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.615]                       fi <- file.info(pathname)
[17:00:36.615]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:00:36.615]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.615]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:00:36.615]                         fi[["size"]], fi[["mtime"]])
[17:00:36.615]                       stop(msg)
[17:00:36.615]                     }
[17:00:36.615]                     invisible(pathname)
[17:00:36.615]                   }
[17:00:36.615]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:00:36.615]                     rootPath = tempdir()) 
[17:00:36.615]                   {
[17:00:36.615]                     obj <- list(time = Sys.time(), condition = cond)
[17:00:36.615]                     file <- tempfile(pattern = class(cond)[1], 
[17:00:36.615]                       tmpdir = path, fileext = ".rds")
[17:00:36.615]                     save_rds(obj, file)
[17:00:36.615]                   }
[17:00:36.615]                   saveImmediateCondition(cond, path = "/tmp/Rtmp7B74IQ/.future/immediateConditions")
[17:00:36.615]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.615]                   {
[17:00:36.615]                     inherits <- base::inherits
[17:00:36.615]                     invokeRestart <- base::invokeRestart
[17:00:36.615]                     is.null <- base::is.null
[17:00:36.615]                     muffled <- FALSE
[17:00:36.615]                     if (inherits(cond, "message")) {
[17:00:36.615]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:36.615]                       if (muffled) 
[17:00:36.615]                         invokeRestart("muffleMessage")
[17:00:36.615]                     }
[17:00:36.615]                     else if (inherits(cond, "warning")) {
[17:00:36.615]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:36.615]                       if (muffled) 
[17:00:36.615]                         invokeRestart("muffleWarning")
[17:00:36.615]                     }
[17:00:36.615]                     else if (inherits(cond, "condition")) {
[17:00:36.615]                       if (!is.null(pattern)) {
[17:00:36.615]                         computeRestarts <- base::computeRestarts
[17:00:36.615]                         grepl <- base::grepl
[17:00:36.615]                         restarts <- computeRestarts(cond)
[17:00:36.615]                         for (restart in restarts) {
[17:00:36.615]                           name <- restart$name
[17:00:36.615]                           if (is.null(name)) 
[17:00:36.615]                             next
[17:00:36.615]                           if (!grepl(pattern, name)) 
[17:00:36.615]                             next
[17:00:36.615]                           invokeRestart(restart)
[17:00:36.615]                           muffled <- TRUE
[17:00:36.615]                           break
[17:00:36.615]                         }
[17:00:36.615]                       }
[17:00:36.615]                     }
[17:00:36.615]                     invisible(muffled)
[17:00:36.615]                   }
[17:00:36.615]                   muffleCondition(cond)
[17:00:36.615]                 })
[17:00:36.615]             }))
[17:00:36.615]             future::FutureResult(value = ...future.value$value, 
[17:00:36.615]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.615]                   ...future.rng), globalenv = if (FALSE) 
[17:00:36.615]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:36.615]                     ...future.globalenv.names))
[17:00:36.615]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:36.615]         }, condition = base::local({
[17:00:36.615]             c <- base::c
[17:00:36.615]             inherits <- base::inherits
[17:00:36.615]             invokeRestart <- base::invokeRestart
[17:00:36.615]             length <- base::length
[17:00:36.615]             list <- base::list
[17:00:36.615]             seq.int <- base::seq.int
[17:00:36.615]             signalCondition <- base::signalCondition
[17:00:36.615]             sys.calls <- base::sys.calls
[17:00:36.615]             `[[` <- base::`[[`
[17:00:36.615]             `+` <- base::`+`
[17:00:36.615]             `<<-` <- base::`<<-`
[17:00:36.615]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:36.615]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:36.615]                   3L)]
[17:00:36.615]             }
[17:00:36.615]             function(cond) {
[17:00:36.615]                 is_error <- inherits(cond, "error")
[17:00:36.615]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:36.615]                   NULL)
[17:00:36.615]                 if (is_error) {
[17:00:36.615]                   sessionInformation <- function() {
[17:00:36.615]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:36.615]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:36.615]                       search = base::search(), system = base::Sys.info())
[17:00:36.615]                   }
[17:00:36.615]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.615]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:36.615]                     cond$call), session = sessionInformation(), 
[17:00:36.615]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:36.615]                   signalCondition(cond)
[17:00:36.615]                 }
[17:00:36.615]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:36.615]                 "immediateCondition"))) {
[17:00:36.615]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:36.615]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.615]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:36.615]                   if (TRUE && !signal) {
[17:00:36.615]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.615]                     {
[17:00:36.615]                       inherits <- base::inherits
[17:00:36.615]                       invokeRestart <- base::invokeRestart
[17:00:36.615]                       is.null <- base::is.null
[17:00:36.615]                       muffled <- FALSE
[17:00:36.615]                       if (inherits(cond, "message")) {
[17:00:36.615]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.615]                         if (muffled) 
[17:00:36.615]                           invokeRestart("muffleMessage")
[17:00:36.615]                       }
[17:00:36.615]                       else if (inherits(cond, "warning")) {
[17:00:36.615]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.615]                         if (muffled) 
[17:00:36.615]                           invokeRestart("muffleWarning")
[17:00:36.615]                       }
[17:00:36.615]                       else if (inherits(cond, "condition")) {
[17:00:36.615]                         if (!is.null(pattern)) {
[17:00:36.615]                           computeRestarts <- base::computeRestarts
[17:00:36.615]                           grepl <- base::grepl
[17:00:36.615]                           restarts <- computeRestarts(cond)
[17:00:36.615]                           for (restart in restarts) {
[17:00:36.615]                             name <- restart$name
[17:00:36.615]                             if (is.null(name)) 
[17:00:36.615]                               next
[17:00:36.615]                             if (!grepl(pattern, name)) 
[17:00:36.615]                               next
[17:00:36.615]                             invokeRestart(restart)
[17:00:36.615]                             muffled <- TRUE
[17:00:36.615]                             break
[17:00:36.615]                           }
[17:00:36.615]                         }
[17:00:36.615]                       }
[17:00:36.615]                       invisible(muffled)
[17:00:36.615]                     }
[17:00:36.615]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.615]                   }
[17:00:36.615]                 }
[17:00:36.615]                 else {
[17:00:36.615]                   if (TRUE) {
[17:00:36.615]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.615]                     {
[17:00:36.615]                       inherits <- base::inherits
[17:00:36.615]                       invokeRestart <- base::invokeRestart
[17:00:36.615]                       is.null <- base::is.null
[17:00:36.615]                       muffled <- FALSE
[17:00:36.615]                       if (inherits(cond, "message")) {
[17:00:36.615]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.615]                         if (muffled) 
[17:00:36.615]                           invokeRestart("muffleMessage")
[17:00:36.615]                       }
[17:00:36.615]                       else if (inherits(cond, "warning")) {
[17:00:36.615]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.615]                         if (muffled) 
[17:00:36.615]                           invokeRestart("muffleWarning")
[17:00:36.615]                       }
[17:00:36.615]                       else if (inherits(cond, "condition")) {
[17:00:36.615]                         if (!is.null(pattern)) {
[17:00:36.615]                           computeRestarts <- base::computeRestarts
[17:00:36.615]                           grepl <- base::grepl
[17:00:36.615]                           restarts <- computeRestarts(cond)
[17:00:36.615]                           for (restart in restarts) {
[17:00:36.615]                             name <- restart$name
[17:00:36.615]                             if (is.null(name)) 
[17:00:36.615]                               next
[17:00:36.615]                             if (!grepl(pattern, name)) 
[17:00:36.615]                               next
[17:00:36.615]                             invokeRestart(restart)
[17:00:36.615]                             muffled <- TRUE
[17:00:36.615]                             break
[17:00:36.615]                           }
[17:00:36.615]                         }
[17:00:36.615]                       }
[17:00:36.615]                       invisible(muffled)
[17:00:36.615]                     }
[17:00:36.615]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.615]                   }
[17:00:36.615]                 }
[17:00:36.615]             }
[17:00:36.615]         }))
[17:00:36.615]     }, error = function(ex) {
[17:00:36.615]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:36.615]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.615]                 ...future.rng), started = ...future.startTime, 
[17:00:36.615]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:36.615]             version = "1.8"), class = "FutureResult")
[17:00:36.615]     }, finally = {
[17:00:36.615]         if (!identical(...future.workdir, getwd())) 
[17:00:36.615]             setwd(...future.workdir)
[17:00:36.615]         {
[17:00:36.615]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:36.615]                 ...future.oldOptions$nwarnings <- NULL
[17:00:36.615]             }
[17:00:36.615]             base::options(...future.oldOptions)
[17:00:36.615]             if (.Platform$OS.type == "windows") {
[17:00:36.615]                 old_names <- names(...future.oldEnvVars)
[17:00:36.615]                 envs <- base::Sys.getenv()
[17:00:36.615]                 names <- names(envs)
[17:00:36.615]                 common <- intersect(names, old_names)
[17:00:36.615]                 added <- setdiff(names, old_names)
[17:00:36.615]                 removed <- setdiff(old_names, names)
[17:00:36.615]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:36.615]                   envs[common]]
[17:00:36.615]                 NAMES <- toupper(changed)
[17:00:36.615]                 args <- list()
[17:00:36.615]                 for (kk in seq_along(NAMES)) {
[17:00:36.615]                   name <- changed[[kk]]
[17:00:36.615]                   NAME <- NAMES[[kk]]
[17:00:36.615]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.615]                     next
[17:00:36.615]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.615]                 }
[17:00:36.615]                 NAMES <- toupper(added)
[17:00:36.615]                 for (kk in seq_along(NAMES)) {
[17:00:36.615]                   name <- added[[kk]]
[17:00:36.615]                   NAME <- NAMES[[kk]]
[17:00:36.615]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.615]                     next
[17:00:36.615]                   args[[name]] <- ""
[17:00:36.615]                 }
[17:00:36.615]                 NAMES <- toupper(removed)
[17:00:36.615]                 for (kk in seq_along(NAMES)) {
[17:00:36.615]                   name <- removed[[kk]]
[17:00:36.615]                   NAME <- NAMES[[kk]]
[17:00:36.615]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.615]                     next
[17:00:36.615]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.615]                 }
[17:00:36.615]                 if (length(args) > 0) 
[17:00:36.615]                   base::do.call(base::Sys.setenv, args = args)
[17:00:36.615]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:36.615]             }
[17:00:36.615]             else {
[17:00:36.615]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:36.615]             }
[17:00:36.615]             {
[17:00:36.615]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:36.615]                   0L) {
[17:00:36.615]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:36.615]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:36.615]                   base::options(opts)
[17:00:36.615]                 }
[17:00:36.615]                 {
[17:00:36.615]                   {
[17:00:36.615]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:36.615]                     NULL
[17:00:36.615]                   }
[17:00:36.615]                   options(future.plan = NULL)
[17:00:36.615]                   if (is.na(NA_character_)) 
[17:00:36.615]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.615]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:36.615]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:36.615]                     .init = FALSE)
[17:00:36.615]                 }
[17:00:36.615]             }
[17:00:36.615]         }
[17:00:36.615]     })
[17:00:36.615]     if (TRUE) {
[17:00:36.615]         base::sink(type = "output", split = FALSE)
[17:00:36.615]         if (TRUE) {
[17:00:36.615]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:36.615]         }
[17:00:36.615]         else {
[17:00:36.615]             ...future.result["stdout"] <- base::list(NULL)
[17:00:36.615]         }
[17:00:36.615]         base::close(...future.stdout)
[17:00:36.615]         ...future.stdout <- NULL
[17:00:36.615]     }
[17:00:36.615]     ...future.result$conditions <- ...future.conditions
[17:00:36.615]     ...future.result$finished <- base::Sys.time()
[17:00:36.615]     ...future.result
[17:00:36.615] }
[17:00:36.617] assign_globals() ...
[17:00:36.617] List of 5
[17:00:36.617]  $ ...future.FUN            :function (...)  
[17:00:36.617]  $ future.call.arguments    : list()
[17:00:36.617]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.617]  $ ...future.elements_ii    :List of 2
[17:00:36.617]   ..$ : int 0
[17:00:36.617]   ..$ : int 0
[17:00:36.617]  $ ...future.seeds_ii       :List of 2
[17:00:36.617]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[17:00:36.617]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[17:00:36.617]  $ ...future.globals.maxSize: NULL
[17:00:36.617]  - attr(*, "where")=List of 5
[17:00:36.617]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:00:36.617]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:00:36.617]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:00:36.617]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:00:36.617]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:00:36.617]  - attr(*, "resolved")= logi FALSE
[17:00:36.617]  - attr(*, "total_size")= num 616
[17:00:36.617]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.617]  - attr(*, "already-done")= logi TRUE
[17:00:36.623] - reassign environment for ‘...future.FUN’
[17:00:36.623] - copied ‘...future.FUN’ to environment
[17:00:36.623] - copied ‘future.call.arguments’ to environment
[17:00:36.623] - copied ‘...future.elements_ii’ to environment
[17:00:36.623] - copied ‘...future.seeds_ii’ to environment
[17:00:36.624] - copied ‘...future.globals.maxSize’ to environment
[17:00:36.624] assign_globals() ... done
[17:00:36.624] requestCore(): workers = 2
[17:00:36.626] MulticoreFuture started
[17:00:36.626] - Launch lazy future ... done
[17:00:36.627] run() for ‘MulticoreFuture’ ... done
[17:00:36.627] Created future:
[17:00:36.627] plan(): Setting new future strategy stack:
[17:00:36.628] List of future strategies:
[17:00:36.628] 1. sequential:
[17:00:36.628]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:36.628]    - tweaked: FALSE
[17:00:36.628]    - call: NULL
[17:00:36.629] plan(): nbrOfWorkers() = 1
[17:00:36.632] plan(): Setting new future strategy stack:
[17:00:36.632] List of future strategies:
[17:00:36.632] 1. multicore:
[17:00:36.632]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:00:36.632]    - tweaked: FALSE
[17:00:36.632]    - call: plan(strategy)
[17:00:36.639] plan(): nbrOfWorkers() = 2
[17:00:36.627] MulticoreFuture:
[17:00:36.627] Label: ‘future_replicate-1’
[17:00:36.627] Expression:
[17:00:36.627] {
[17:00:36.627]     do.call(function(...) {
[17:00:36.627]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.627]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.627]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.627]             on.exit(options(oopts), add = TRUE)
[17:00:36.627]         }
[17:00:36.627]         {
[17:00:36.627]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.627]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.627]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.627]                   envir = globalenv(), inherits = FALSE)
[17:00:36.627]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.627]             })
[17:00:36.627]         }
[17:00:36.627]     }, args = future.call.arguments)
[17:00:36.627] }
[17:00:36.627] Lazy evaluation: FALSE
[17:00:36.627] Asynchronous evaluation: TRUE
[17:00:36.627] Local evaluation: TRUE
[17:00:36.627] Environment: R_GlobalEnv
[17:00:36.627] Capture standard output: TRUE
[17:00:36.627] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:36.627] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:36.627] Packages: <none>
[17:00:36.627] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:36.627] Resolved: TRUE
[17:00:36.627] Value: <not collected>
[17:00:36.627] Conditions captured: <none>
[17:00:36.627] Early signaling: FALSE
[17:00:36.627] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:36.627] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.640] Chunk #1 of 2 ... DONE
[17:00:36.641] Chunk #2 of 2 ...
[17:00:36.641]  - Finding globals in 'X' for chunk #2 ...
[17:00:36.641] getGlobalsAndPackages() ...
[17:00:36.641] Searching for globals...
[17:00:36.642] 
[17:00:36.642] Searching for globals ... DONE
[17:00:36.643] - globals: [0] <none>
[17:00:36.643] getGlobalsAndPackages() ... DONE
[17:00:36.643]    + additional globals found: [n=0] 
[17:00:36.643]    + additional namespaces needed: [n=0] 
[17:00:36.643]  - Finding globals in 'X' for chunk #2 ... DONE
[17:00:36.644]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:36.644]  - seeds: [3] <seeds>
[17:00:36.644]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.645] getGlobalsAndPackages() ...
[17:00:36.645] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.645] Resolving globals: FALSE
[17:00:36.645] Tweak future expression to call with '...' arguments ...
[17:00:36.646] {
[17:00:36.646]     do.call(function(...) {
[17:00:36.646]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.646]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.646]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.646]             on.exit(options(oopts), add = TRUE)
[17:00:36.646]         }
[17:00:36.646]         {
[17:00:36.646]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.646]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.646]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.646]                   envir = globalenv(), inherits = FALSE)
[17:00:36.646]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.646]             })
[17:00:36.646]         }
[17:00:36.646]     }, args = future.call.arguments)
[17:00:36.646] }
[17:00:36.646] Tweak future expression to call with '...' arguments ... DONE
[17:00:36.647] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.648] 
[17:00:36.648] getGlobalsAndPackages() ... DONE
[17:00:36.654] run() for ‘Future’ ...
[17:00:36.654] - state: ‘created’
[17:00:36.655] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:00:36.664] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.664] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:00:36.665]   - Field: ‘label’
[17:00:36.665]   - Field: ‘local’
[17:00:36.665]   - Field: ‘owner’
[17:00:36.666]   - Field: ‘envir’
[17:00:36.666]   - Field: ‘workers’
[17:00:36.666]   - Field: ‘packages’
[17:00:36.666]   - Field: ‘gc’
[17:00:36.667]   - Field: ‘job’
[17:00:36.667]   - Field: ‘conditions’
[17:00:36.667]   - Field: ‘expr’
[17:00:36.667]   - Field: ‘uuid’
[17:00:36.668]   - Field: ‘seed’
[17:00:36.668]   - Field: ‘version’
[17:00:36.668]   - Field: ‘result’
[17:00:36.669]   - Field: ‘asynchronous’
[17:00:36.669]   - Field: ‘calls’
[17:00:36.669]   - Field: ‘globals’
[17:00:36.669]   - Field: ‘stdout’
[17:00:36.670]   - Field: ‘earlySignal’
[17:00:36.670]   - Field: ‘lazy’
[17:00:36.670]   - Field: ‘state’
[17:00:36.670] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:00:36.671] - Launch lazy future ...
[17:00:36.671] Packages needed by the future expression (n = 0): <none>
[17:00:36.672] Packages needed by future strategies (n = 0): <none>
[17:00:36.673] {
[17:00:36.673]     {
[17:00:36.673]         {
[17:00:36.673]             ...future.startTime <- base::Sys.time()
[17:00:36.673]             {
[17:00:36.673]                 {
[17:00:36.673]                   {
[17:00:36.673]                     {
[17:00:36.673]                       base::local({
[17:00:36.673]                         has_future <- base::requireNamespace("future", 
[17:00:36.673]                           quietly = TRUE)
[17:00:36.673]                         if (has_future) {
[17:00:36.673]                           ns <- base::getNamespace("future")
[17:00:36.673]                           version <- ns[[".package"]][["version"]]
[17:00:36.673]                           if (is.null(version)) 
[17:00:36.673]                             version <- utils::packageVersion("future")
[17:00:36.673]                         }
[17:00:36.673]                         else {
[17:00:36.673]                           version <- NULL
[17:00:36.673]                         }
[17:00:36.673]                         if (!has_future || version < "1.8.0") {
[17:00:36.673]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:36.673]                             "", base::R.version$version.string), 
[17:00:36.673]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:36.673]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:36.673]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:36.673]                               "release", "version")], collapse = " "), 
[17:00:36.673]                             hostname = base::Sys.info()[["nodename"]])
[17:00:36.673]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:36.673]                             info)
[17:00:36.673]                           info <- base::paste(info, collapse = "; ")
[17:00:36.673]                           if (!has_future) {
[17:00:36.673]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:36.673]                               info)
[17:00:36.673]                           }
[17:00:36.673]                           else {
[17:00:36.673]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:36.673]                               info, version)
[17:00:36.673]                           }
[17:00:36.673]                           base::stop(msg)
[17:00:36.673]                         }
[17:00:36.673]                       })
[17:00:36.673]                     }
[17:00:36.673]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:36.673]                     base::options(mc.cores = 1L)
[17:00:36.673]                   }
[17:00:36.673]                   ...future.strategy.old <- future::plan("list")
[17:00:36.673]                   options(future.plan = NULL)
[17:00:36.673]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.673]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:36.673]                 }
[17:00:36.673]                 ...future.workdir <- getwd()
[17:00:36.673]             }
[17:00:36.673]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:36.673]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:36.673]         }
[17:00:36.673]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:36.673]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:36.673]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:36.673]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:36.673]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:36.673]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:36.673]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:36.673]             base::names(...future.oldOptions))
[17:00:36.673]     }
[17:00:36.673]     if (FALSE) {
[17:00:36.673]     }
[17:00:36.673]     else {
[17:00:36.673]         if (TRUE) {
[17:00:36.673]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:36.673]                 open = "w")
[17:00:36.673]         }
[17:00:36.673]         else {
[17:00:36.673]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:36.673]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:36.673]         }
[17:00:36.673]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:36.673]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:36.673]             base::sink(type = "output", split = FALSE)
[17:00:36.673]             base::close(...future.stdout)
[17:00:36.673]         }, add = TRUE)
[17:00:36.673]     }
[17:00:36.673]     ...future.frame <- base::sys.nframe()
[17:00:36.673]     ...future.conditions <- base::list()
[17:00:36.673]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:36.673]     if (FALSE) {
[17:00:36.673]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:36.673]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:36.673]     }
[17:00:36.673]     ...future.result <- base::tryCatch({
[17:00:36.673]         base::withCallingHandlers({
[17:00:36.673]             ...future.value <- base::withVisible(base::local({
[17:00:36.673]                 withCallingHandlers({
[17:00:36.673]                   {
[17:00:36.673]                     do.call(function(...) {
[17:00:36.673]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.673]                       if (!identical(...future.globals.maxSize.org, 
[17:00:36.673]                         ...future.globals.maxSize)) {
[17:00:36.673]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.673]                         on.exit(options(oopts), add = TRUE)
[17:00:36.673]                       }
[17:00:36.673]                       {
[17:00:36.673]                         lapply(seq_along(...future.elements_ii), 
[17:00:36.673]                           FUN = function(jj) {
[17:00:36.673]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.673]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.673]                               envir = globalenv(), inherits = FALSE)
[17:00:36.673]                             ...future.FUN(...future.X_jj, ...)
[17:00:36.673]                           })
[17:00:36.673]                       }
[17:00:36.673]                     }, args = future.call.arguments)
[17:00:36.673]                   }
[17:00:36.673]                 }, immediateCondition = function(cond) {
[17:00:36.673]                   save_rds <- function (object, pathname, ...) 
[17:00:36.673]                   {
[17:00:36.673]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:00:36.673]                     if (file_test("-f", pathname_tmp)) {
[17:00:36.673]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.673]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:00:36.673]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.673]                         fi_tmp[["mtime"]])
[17:00:36.673]                     }
[17:00:36.673]                     tryCatch({
[17:00:36.673]                       saveRDS(object, file = pathname_tmp, ...)
[17:00:36.673]                     }, error = function(ex) {
[17:00:36.673]                       msg <- conditionMessage(ex)
[17:00:36.673]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.673]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:00:36.673]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.673]                         fi_tmp[["mtime"]], msg)
[17:00:36.673]                       ex$message <- msg
[17:00:36.673]                       stop(ex)
[17:00:36.673]                     })
[17:00:36.673]                     stopifnot(file_test("-f", pathname_tmp))
[17:00:36.673]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:00:36.673]                     if (!res || file_test("-f", pathname_tmp)) {
[17:00:36.673]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.673]                       fi <- file.info(pathname)
[17:00:36.673]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:00:36.673]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.673]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:00:36.673]                         fi[["size"]], fi[["mtime"]])
[17:00:36.673]                       stop(msg)
[17:00:36.673]                     }
[17:00:36.673]                     invisible(pathname)
[17:00:36.673]                   }
[17:00:36.673]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:00:36.673]                     rootPath = tempdir()) 
[17:00:36.673]                   {
[17:00:36.673]                     obj <- list(time = Sys.time(), condition = cond)
[17:00:36.673]                     file <- tempfile(pattern = class(cond)[1], 
[17:00:36.673]                       tmpdir = path, fileext = ".rds")
[17:00:36.673]                     save_rds(obj, file)
[17:00:36.673]                   }
[17:00:36.673]                   saveImmediateCondition(cond, path = "/tmp/Rtmp7B74IQ/.future/immediateConditions")
[17:00:36.673]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.673]                   {
[17:00:36.673]                     inherits <- base::inherits
[17:00:36.673]                     invokeRestart <- base::invokeRestart
[17:00:36.673]                     is.null <- base::is.null
[17:00:36.673]                     muffled <- FALSE
[17:00:36.673]                     if (inherits(cond, "message")) {
[17:00:36.673]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:36.673]                       if (muffled) 
[17:00:36.673]                         invokeRestart("muffleMessage")
[17:00:36.673]                     }
[17:00:36.673]                     else if (inherits(cond, "warning")) {
[17:00:36.673]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:36.673]                       if (muffled) 
[17:00:36.673]                         invokeRestart("muffleWarning")
[17:00:36.673]                     }
[17:00:36.673]                     else if (inherits(cond, "condition")) {
[17:00:36.673]                       if (!is.null(pattern)) {
[17:00:36.673]                         computeRestarts <- base::computeRestarts
[17:00:36.673]                         grepl <- base::grepl
[17:00:36.673]                         restarts <- computeRestarts(cond)
[17:00:36.673]                         for (restart in restarts) {
[17:00:36.673]                           name <- restart$name
[17:00:36.673]                           if (is.null(name)) 
[17:00:36.673]                             next
[17:00:36.673]                           if (!grepl(pattern, name)) 
[17:00:36.673]                             next
[17:00:36.673]                           invokeRestart(restart)
[17:00:36.673]                           muffled <- TRUE
[17:00:36.673]                           break
[17:00:36.673]                         }
[17:00:36.673]                       }
[17:00:36.673]                     }
[17:00:36.673]                     invisible(muffled)
[17:00:36.673]                   }
[17:00:36.673]                   muffleCondition(cond)
[17:00:36.673]                 })
[17:00:36.673]             }))
[17:00:36.673]             future::FutureResult(value = ...future.value$value, 
[17:00:36.673]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.673]                   ...future.rng), globalenv = if (FALSE) 
[17:00:36.673]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:36.673]                     ...future.globalenv.names))
[17:00:36.673]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:36.673]         }, condition = base::local({
[17:00:36.673]             c <- base::c
[17:00:36.673]             inherits <- base::inherits
[17:00:36.673]             invokeRestart <- base::invokeRestart
[17:00:36.673]             length <- base::length
[17:00:36.673]             list <- base::list
[17:00:36.673]             seq.int <- base::seq.int
[17:00:36.673]             signalCondition <- base::signalCondition
[17:00:36.673]             sys.calls <- base::sys.calls
[17:00:36.673]             `[[` <- base::`[[`
[17:00:36.673]             `+` <- base::`+`
[17:00:36.673]             `<<-` <- base::`<<-`
[17:00:36.673]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:36.673]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:36.673]                   3L)]
[17:00:36.673]             }
[17:00:36.673]             function(cond) {
[17:00:36.673]                 is_error <- inherits(cond, "error")
[17:00:36.673]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:36.673]                   NULL)
[17:00:36.673]                 if (is_error) {
[17:00:36.673]                   sessionInformation <- function() {
[17:00:36.673]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:36.673]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:36.673]                       search = base::search(), system = base::Sys.info())
[17:00:36.673]                   }
[17:00:36.673]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.673]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:36.673]                     cond$call), session = sessionInformation(), 
[17:00:36.673]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:36.673]                   signalCondition(cond)
[17:00:36.673]                 }
[17:00:36.673]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:36.673]                 "immediateCondition"))) {
[17:00:36.673]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:36.673]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.673]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:36.673]                   if (TRUE && !signal) {
[17:00:36.673]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.673]                     {
[17:00:36.673]                       inherits <- base::inherits
[17:00:36.673]                       invokeRestart <- base::invokeRestart
[17:00:36.673]                       is.null <- base::is.null
[17:00:36.673]                       muffled <- FALSE
[17:00:36.673]                       if (inherits(cond, "message")) {
[17:00:36.673]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.673]                         if (muffled) 
[17:00:36.673]                           invokeRestart("muffleMessage")
[17:00:36.673]                       }
[17:00:36.673]                       else if (inherits(cond, "warning")) {
[17:00:36.673]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.673]                         if (muffled) 
[17:00:36.673]                           invokeRestart("muffleWarning")
[17:00:36.673]                       }
[17:00:36.673]                       else if (inherits(cond, "condition")) {
[17:00:36.673]                         if (!is.null(pattern)) {
[17:00:36.673]                           computeRestarts <- base::computeRestarts
[17:00:36.673]                           grepl <- base::grepl
[17:00:36.673]                           restarts <- computeRestarts(cond)
[17:00:36.673]                           for (restart in restarts) {
[17:00:36.673]                             name <- restart$name
[17:00:36.673]                             if (is.null(name)) 
[17:00:36.673]                               next
[17:00:36.673]                             if (!grepl(pattern, name)) 
[17:00:36.673]                               next
[17:00:36.673]                             invokeRestart(restart)
[17:00:36.673]                             muffled <- TRUE
[17:00:36.673]                             break
[17:00:36.673]                           }
[17:00:36.673]                         }
[17:00:36.673]                       }
[17:00:36.673]                       invisible(muffled)
[17:00:36.673]                     }
[17:00:36.673]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.673]                   }
[17:00:36.673]                 }
[17:00:36.673]                 else {
[17:00:36.673]                   if (TRUE) {
[17:00:36.673]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.673]                     {
[17:00:36.673]                       inherits <- base::inherits
[17:00:36.673]                       invokeRestart <- base::invokeRestart
[17:00:36.673]                       is.null <- base::is.null
[17:00:36.673]                       muffled <- FALSE
[17:00:36.673]                       if (inherits(cond, "message")) {
[17:00:36.673]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.673]                         if (muffled) 
[17:00:36.673]                           invokeRestart("muffleMessage")
[17:00:36.673]                       }
[17:00:36.673]                       else if (inherits(cond, "warning")) {
[17:00:36.673]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.673]                         if (muffled) 
[17:00:36.673]                           invokeRestart("muffleWarning")
[17:00:36.673]                       }
[17:00:36.673]                       else if (inherits(cond, "condition")) {
[17:00:36.673]                         if (!is.null(pattern)) {
[17:00:36.673]                           computeRestarts <- base::computeRestarts
[17:00:36.673]                           grepl <- base::grepl
[17:00:36.673]                           restarts <- computeRestarts(cond)
[17:00:36.673]                           for (restart in restarts) {
[17:00:36.673]                             name <- restart$name
[17:00:36.673]                             if (is.null(name)) 
[17:00:36.673]                               next
[17:00:36.673]                             if (!grepl(pattern, name)) 
[17:00:36.673]                               next
[17:00:36.673]                             invokeRestart(restart)
[17:00:36.673]                             muffled <- TRUE
[17:00:36.673]                             break
[17:00:36.673]                           }
[17:00:36.673]                         }
[17:00:36.673]                       }
[17:00:36.673]                       invisible(muffled)
[17:00:36.673]                     }
[17:00:36.673]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.673]                   }
[17:00:36.673]                 }
[17:00:36.673]             }
[17:00:36.673]         }))
[17:00:36.673]     }, error = function(ex) {
[17:00:36.673]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:36.673]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.673]                 ...future.rng), started = ...future.startTime, 
[17:00:36.673]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:36.673]             version = "1.8"), class = "FutureResult")
[17:00:36.673]     }, finally = {
[17:00:36.673]         if (!identical(...future.workdir, getwd())) 
[17:00:36.673]             setwd(...future.workdir)
[17:00:36.673]         {
[17:00:36.673]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:36.673]                 ...future.oldOptions$nwarnings <- NULL
[17:00:36.673]             }
[17:00:36.673]             base::options(...future.oldOptions)
[17:00:36.673]             if (.Platform$OS.type == "windows") {
[17:00:36.673]                 old_names <- names(...future.oldEnvVars)
[17:00:36.673]                 envs <- base::Sys.getenv()
[17:00:36.673]                 names <- names(envs)
[17:00:36.673]                 common <- intersect(names, old_names)
[17:00:36.673]                 added <- setdiff(names, old_names)
[17:00:36.673]                 removed <- setdiff(old_names, names)
[17:00:36.673]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:36.673]                   envs[common]]
[17:00:36.673]                 NAMES <- toupper(changed)
[17:00:36.673]                 args <- list()
[17:00:36.673]                 for (kk in seq_along(NAMES)) {
[17:00:36.673]                   name <- changed[[kk]]
[17:00:36.673]                   NAME <- NAMES[[kk]]
[17:00:36.673]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.673]                     next
[17:00:36.673]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.673]                 }
[17:00:36.673]                 NAMES <- toupper(added)
[17:00:36.673]                 for (kk in seq_along(NAMES)) {
[17:00:36.673]                   name <- added[[kk]]
[17:00:36.673]                   NAME <- NAMES[[kk]]
[17:00:36.673]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.673]                     next
[17:00:36.673]                   args[[name]] <- ""
[17:00:36.673]                 }
[17:00:36.673]                 NAMES <- toupper(removed)
[17:00:36.673]                 for (kk in seq_along(NAMES)) {
[17:00:36.673]                   name <- removed[[kk]]
[17:00:36.673]                   NAME <- NAMES[[kk]]
[17:00:36.673]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.673]                     next
[17:00:36.673]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.673]                 }
[17:00:36.673]                 if (length(args) > 0) 
[17:00:36.673]                   base::do.call(base::Sys.setenv, args = args)
[17:00:36.673]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:36.673]             }
[17:00:36.673]             else {
[17:00:36.673]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:36.673]             }
[17:00:36.673]             {
[17:00:36.673]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:36.673]                   0L) {
[17:00:36.673]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:36.673]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:36.673]                   base::options(opts)
[17:00:36.673]                 }
[17:00:36.673]                 {
[17:00:36.673]                   {
[17:00:36.673]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:36.673]                     NULL
[17:00:36.673]                   }
[17:00:36.673]                   options(future.plan = NULL)
[17:00:36.673]                   if (is.na(NA_character_)) 
[17:00:36.673]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.673]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:36.673]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:36.673]                     .init = FALSE)
[17:00:36.673]                 }
[17:00:36.673]             }
[17:00:36.673]         }
[17:00:36.673]     })
[17:00:36.673]     if (TRUE) {
[17:00:36.673]         base::sink(type = "output", split = FALSE)
[17:00:36.673]         if (TRUE) {
[17:00:36.673]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:36.673]         }
[17:00:36.673]         else {
[17:00:36.673]             ...future.result["stdout"] <- base::list(NULL)
[17:00:36.673]         }
[17:00:36.673]         base::close(...future.stdout)
[17:00:36.673]         ...future.stdout <- NULL
[17:00:36.673]     }
[17:00:36.673]     ...future.result$conditions <- ...future.conditions
[17:00:36.673]     ...future.result$finished <- base::Sys.time()
[17:00:36.673]     ...future.result
[17:00:36.673] }
[17:00:36.678] assign_globals() ...
[17:00:36.678] List of 5
[17:00:36.678]  $ ...future.FUN            :function (...)  
[17:00:36.678]  $ future.call.arguments    : list()
[17:00:36.678]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.678]  $ ...future.elements_ii    :List of 3
[17:00:36.678]   ..$ : int 0
[17:00:36.678]   ..$ : int 0
[17:00:36.678]   ..$ : int 0
[17:00:36.678]  $ ...future.seeds_ii       :List of 3
[17:00:36.678]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[17:00:36.678]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[17:00:36.678]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[17:00:36.678]  $ ...future.globals.maxSize: NULL
[17:00:36.678]  - attr(*, "where")=List of 5
[17:00:36.678]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:00:36.678]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:00:36.678]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:00:36.678]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:00:36.678]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:00:36.678]  - attr(*, "resolved")= logi FALSE
[17:00:36.678]  - attr(*, "total_size")= num 616
[17:00:36.678]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.678]  - attr(*, "already-done")= logi TRUE
[17:00:36.693] - reassign environment for ‘...future.FUN’
[17:00:36.694] - copied ‘...future.FUN’ to environment
[17:00:36.694] - copied ‘future.call.arguments’ to environment
[17:00:36.694] - copied ‘...future.elements_ii’ to environment
[17:00:36.694] - copied ‘...future.seeds_ii’ to environment
[17:00:36.695] - copied ‘...future.globals.maxSize’ to environment
[17:00:36.695] assign_globals() ... done
[17:00:36.695] requestCore(): workers = 2
[17:00:36.698] MulticoreFuture started
[17:00:36.699] - Launch lazy future ... done
[17:00:36.699] run() for ‘MulticoreFuture’ ... done
[17:00:36.699] Created future:
[17:00:36.700] plan(): Setting new future strategy stack:
[17:00:36.700] List of future strategies:
[17:00:36.700] 1. sequential:
[17:00:36.700]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:36.700]    - tweaked: FALSE
[17:00:36.700]    - call: NULL
[17:00:36.701] plan(): nbrOfWorkers() = 1
[17:00:36.704] plan(): Setting new future strategy stack:
[17:00:36.704] List of future strategies:
[17:00:36.704] 1. multicore:
[17:00:36.704]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:00:36.704]    - tweaked: FALSE
[17:00:36.704]    - call: plan(strategy)
[17:00:36.710] plan(): nbrOfWorkers() = 2
[17:00:36.700] MulticoreFuture:
[17:00:36.700] Label: ‘future_replicate-2’
[17:00:36.700] Expression:
[17:00:36.700] {
[17:00:36.700]     do.call(function(...) {
[17:00:36.700]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.700]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.700]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.700]             on.exit(options(oopts), add = TRUE)
[17:00:36.700]         }
[17:00:36.700]         {
[17:00:36.700]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.700]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.700]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.700]                   envir = globalenv(), inherits = FALSE)
[17:00:36.700]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.700]             })
[17:00:36.700]         }
[17:00:36.700]     }, args = future.call.arguments)
[17:00:36.700] }
[17:00:36.700] Lazy evaluation: FALSE
[17:00:36.700] Asynchronous evaluation: TRUE
[17:00:36.700] Local evaluation: TRUE
[17:00:36.700] Environment: R_GlobalEnv
[17:00:36.700] Capture standard output: TRUE
[17:00:36.700] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:36.700] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:36.700] Packages: <none>
[17:00:36.700] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:36.700] Resolved: TRUE
[17:00:36.700] Value: <not collected>
[17:00:36.700] Conditions captured: <none>
[17:00:36.700] Early signaling: FALSE
[17:00:36.700] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:36.700] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.711] Chunk #2 of 2 ... DONE
[17:00:36.711] Launching 2 futures (chunks) ... DONE
[17:00:36.711] Resolving 2 futures (chunks) ...
[17:00:36.711] resolve() on list ...
[17:00:36.711]  recursive: 0
[17:00:36.711]  length: 2
[17:00:36.712] 
[17:00:36.712] Future #1
[17:00:36.712] result() for MulticoreFuture ...
[17:00:36.713] result() for MulticoreFuture ...
[17:00:36.713] result() for MulticoreFuture ... done
[17:00:36.713] result() for MulticoreFuture ... done
[17:00:36.714] result() for MulticoreFuture ...
[17:00:36.714] result() for MulticoreFuture ... done
[17:00:36.714] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:00:36.714] - nx: 2
[17:00:36.714] - relay: TRUE
[17:00:36.714] - stdout: TRUE
[17:00:36.714] - signal: TRUE
[17:00:36.715] - resignal: FALSE
[17:00:36.715] - force: TRUE
[17:00:36.715] - relayed: [n=2] FALSE, FALSE
[17:00:36.715] - queued futures: [n=2] FALSE, FALSE
[17:00:36.715]  - until=1
[17:00:36.715]  - relaying element #1
[17:00:36.715] result() for MulticoreFuture ...
[17:00:36.716] result() for MulticoreFuture ... done
[17:00:36.716] result() for MulticoreFuture ...
[17:00:36.716] result() for MulticoreFuture ... done
[17:00:36.716] result() for MulticoreFuture ...
[17:00:36.716] result() for MulticoreFuture ... done
[17:00:36.716] result() for MulticoreFuture ...
[17:00:36.717] result() for MulticoreFuture ... done
[17:00:36.717] - relayed: [n=2] TRUE, FALSE
[17:00:36.717] - queued futures: [n=2] TRUE, FALSE
[17:00:36.717] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:00:36.717]  length: 1 (resolved future 1)
[17:00:36.717] Future #2
[17:00:36.718] result() for MulticoreFuture ...
[17:00:36.718] result() for MulticoreFuture ...
[17:00:36.719] result() for MulticoreFuture ... done
[17:00:36.719] result() for MulticoreFuture ... done
[17:00:36.719] result() for MulticoreFuture ...
[17:00:36.719] result() for MulticoreFuture ... done
[17:00:36.719] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:00:36.720] - nx: 2
[17:00:36.720] - relay: TRUE
[17:00:36.720] - stdout: TRUE
[17:00:36.720] - signal: TRUE
[17:00:36.720] - resignal: FALSE
[17:00:36.720] - force: TRUE
[17:00:36.721] - relayed: [n=2] TRUE, FALSE
[17:00:36.721] - queued futures: [n=2] TRUE, FALSE
[17:00:36.721]  - until=2
[17:00:36.721]  - relaying element #2
[17:00:36.721] result() for MulticoreFuture ...
[17:00:36.721] result() for MulticoreFuture ... done
[17:00:36.722] result() for MulticoreFuture ...
[17:00:36.722] result() for MulticoreFuture ... done
[17:00:36.722] result() for MulticoreFuture ...
[17:00:36.722] result() for MulticoreFuture ... done
[17:00:36.722] result() for MulticoreFuture ...
[17:00:36.722] result() for MulticoreFuture ... done
[17:00:36.722] - relayed: [n=2] TRUE, TRUE
[17:00:36.722] - queued futures: [n=2] TRUE, TRUE
[17:00:36.723] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:00:36.723]  length: 0 (resolved future 2)
[17:00:36.723] Relaying remaining futures
[17:00:36.723] signalConditionsASAP(NULL, pos=0) ...
[17:00:36.723] - nx: 2
[17:00:36.723] - relay: TRUE
[17:00:36.723] - stdout: TRUE
[17:00:36.723] - signal: TRUE
[17:00:36.724] - resignal: FALSE
[17:00:36.724] - force: TRUE
[17:00:36.724] - relayed: [n=2] TRUE, TRUE
[17:00:36.724] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:00:36.724] - relayed: [n=2] TRUE, TRUE
[17:00:36.724] - queued futures: [n=2] TRUE, TRUE
[17:00:36.724] signalConditionsASAP(NULL, pos=0) ... done
[17:00:36.724] resolve() on list ... DONE
[17:00:36.724] result() for MulticoreFuture ...
[17:00:36.725] result() for MulticoreFuture ... done
[17:00:36.725] result() for MulticoreFuture ...
[17:00:36.725] result() for MulticoreFuture ... done
[17:00:36.725] result() for MulticoreFuture ...
[17:00:36.725] result() for MulticoreFuture ... done
[17:00:36.727] result() for MulticoreFuture ...
[17:00:36.728] result() for MulticoreFuture ... done
[17:00:36.728]  - Number of value chunks collected: 2
[17:00:36.728] Resolving 2 futures (chunks) ... DONE
[17:00:36.728] Reducing values from 2 chunks ...
[17:00:36.728]  - Number of values collected after concatenation: 5
[17:00:36.728]  - Number of values expected: 5
[17:00:36.729] Reducing values from 2 chunks ... DONE
[17:00:36.729] future_lapply() ... DONE
- example(replicate) ...
[17:00:36.729] future_lapply() ...
[17:00:36.730] Generating random seeds ...
[17:00:36.730] Generating random seed streams for 5 elements ...
[17:00:36.730] Generating random seed streams for 5 elements ... DONE
[17:00:36.731] Generating random seeds ... DONE
[17:00:36.731] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:00:36.735] Number of chunks: 2
[17:00:36.736] getGlobalsAndPackagesXApply() ...
[17:00:36.736]  - future.globals: TRUE
[17:00:36.736] getGlobalsAndPackages() ...
[17:00:36.736] Searching for globals...
[17:00:36.738] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[17:00:36.738] Searching for globals ... DONE
[17:00:36.738] Resolving globals: FALSE
[17:00:36.739] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[17:00:36.739] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[17:00:36.739] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[17:00:36.740] 
[17:00:36.740] getGlobalsAndPackages() ... DONE
[17:00:36.740]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[17:00:36.740]  - needed namespaces: [n=0] 
[17:00:36.740] Finding globals ... DONE
[17:00:36.740]  - use_args: TRUE
[17:00:36.740]  - Getting '...' globals ...
[17:00:36.741] resolve() on list ...
[17:00:36.741]  recursive: 0
[17:00:36.741]  length: 1
[17:00:36.741]  elements: ‘...’
[17:00:36.741]  length: 0 (resolved future 1)
[17:00:36.741] resolve() on list ... DONE
[17:00:36.741]    - '...' content: [n=0] 
[17:00:36.741] List of 1
[17:00:36.741]  $ ...: list()
[17:00:36.741]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.741]  - attr(*, "where")=List of 1
[17:00:36.741]   ..$ ...:<environment: 0x558563810850> 
[17:00:36.741]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.741]  - attr(*, "resolved")= logi TRUE
[17:00:36.741]  - attr(*, "total_size")= num NA
[17:00:36.744]  - Getting '...' globals ... DONE
[17:00:36.744] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[17:00:36.745] List of 4
[17:00:36.745]  $ ...future.FUN:function (...)  
[17:00:36.745]  $ foo          :function (x = 1, y = 2)  
[17:00:36.745]  $ x            : num 3
[17:00:36.745]  $ ...          : list()
[17:00:36.745]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.745]  - attr(*, "where")=List of 4
[17:00:36.745]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:00:36.745]   ..$ foo          :<environment: R_EmptyEnv> 
[17:00:36.745]   ..$ x            :<environment: R_EmptyEnv> 
[17:00:36.745]   ..$ ...          :<environment: 0x558563810850> 
[17:00:36.745]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.745]  - attr(*, "resolved")= logi FALSE
[17:00:36.745]  - attr(*, "total_size")= num 2200
[17:00:36.748] Packages to be attached in all futures: [n=0] 
[17:00:36.748] getGlobalsAndPackagesXApply() ... DONE
[17:00:36.749] Number of futures (= number of chunks): 2
[17:00:36.749] Launching 2 futures (chunks) ...
[17:00:36.749] Chunk #1 of 2 ...
[17:00:36.749]  - Finding globals in 'X' for chunk #1 ...
[17:00:36.749] getGlobalsAndPackages() ...
[17:00:36.749] Searching for globals...
[17:00:36.749] 
[17:00:36.750] Searching for globals ... DONE
[17:00:36.750] - globals: [0] <none>
[17:00:36.750] getGlobalsAndPackages() ... DONE
[17:00:36.750]    + additional globals found: [n=0] 
[17:00:36.750]    + additional namespaces needed: [n=0] 
[17:00:36.750]  - Finding globals in 'X' for chunk #1 ... DONE
[17:00:36.750]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:36.750]  - seeds: [2] <seeds>
[17:00:36.750]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.750] getGlobalsAndPackages() ...
[17:00:36.751] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.751] Resolving globals: FALSE
[17:00:36.751] Tweak future expression to call with '...' arguments ...
[17:00:36.751] {
[17:00:36.751]     do.call(function(...) {
[17:00:36.751]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.751]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.751]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.751]             on.exit(options(oopts), add = TRUE)
[17:00:36.751]         }
[17:00:36.751]         {
[17:00:36.751]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.751]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.751]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.751]                   envir = globalenv(), inherits = FALSE)
[17:00:36.751]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.751]             })
[17:00:36.751]         }
[17:00:36.751]     }, args = future.call.arguments)
[17:00:36.751] }
[17:00:36.751] Tweak future expression to call with '...' arguments ... DONE
[17:00:36.752] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.752] 
[17:00:36.752] getGlobalsAndPackages() ... DONE
[17:00:36.752] run() for ‘Future’ ...
[17:00:36.752] - state: ‘created’
[17:00:36.752] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:00:36.756] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.757] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:00:36.757]   - Field: ‘label’
[17:00:36.757]   - Field: ‘local’
[17:00:36.757]   - Field: ‘owner’
[17:00:36.757]   - Field: ‘envir’
[17:00:36.757]   - Field: ‘workers’
[17:00:36.757]   - Field: ‘packages’
[17:00:36.757]   - Field: ‘gc’
[17:00:36.758]   - Field: ‘job’
[17:00:36.758]   - Field: ‘conditions’
[17:00:36.758]   - Field: ‘expr’
[17:00:36.758]   - Field: ‘uuid’
[17:00:36.758]   - Field: ‘seed’
[17:00:36.758]   - Field: ‘version’
[17:00:36.758]   - Field: ‘result’
[17:00:36.758]   - Field: ‘asynchronous’
[17:00:36.758]   - Field: ‘calls’
[17:00:36.758]   - Field: ‘globals’
[17:00:36.759]   - Field: ‘stdout’
[17:00:36.759]   - Field: ‘earlySignal’
[17:00:36.759]   - Field: ‘lazy’
[17:00:36.759]   - Field: ‘state’
[17:00:36.759] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:00:36.759] - Launch lazy future ...
[17:00:36.759] Packages needed by the future expression (n = 0): <none>
[17:00:36.759] Packages needed by future strategies (n = 0): <none>
[17:00:36.761] {
[17:00:36.761]     {
[17:00:36.761]         {
[17:00:36.761]             ...future.startTime <- base::Sys.time()
[17:00:36.761]             {
[17:00:36.761]                 {
[17:00:36.761]                   {
[17:00:36.761]                     {
[17:00:36.761]                       base::local({
[17:00:36.761]                         has_future <- base::requireNamespace("future", 
[17:00:36.761]                           quietly = TRUE)
[17:00:36.761]                         if (has_future) {
[17:00:36.761]                           ns <- base::getNamespace("future")
[17:00:36.761]                           version <- ns[[".package"]][["version"]]
[17:00:36.761]                           if (is.null(version)) 
[17:00:36.761]                             version <- utils::packageVersion("future")
[17:00:36.761]                         }
[17:00:36.761]                         else {
[17:00:36.761]                           version <- NULL
[17:00:36.761]                         }
[17:00:36.761]                         if (!has_future || version < "1.8.0") {
[17:00:36.761]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:36.761]                             "", base::R.version$version.string), 
[17:00:36.761]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:36.761]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:36.761]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:36.761]                               "release", "version")], collapse = " "), 
[17:00:36.761]                             hostname = base::Sys.info()[["nodename"]])
[17:00:36.761]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:36.761]                             info)
[17:00:36.761]                           info <- base::paste(info, collapse = "; ")
[17:00:36.761]                           if (!has_future) {
[17:00:36.761]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:36.761]                               info)
[17:00:36.761]                           }
[17:00:36.761]                           else {
[17:00:36.761]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:36.761]                               info, version)
[17:00:36.761]                           }
[17:00:36.761]                           base::stop(msg)
[17:00:36.761]                         }
[17:00:36.761]                       })
[17:00:36.761]                     }
[17:00:36.761]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:36.761]                     base::options(mc.cores = 1L)
[17:00:36.761]                   }
[17:00:36.761]                   ...future.strategy.old <- future::plan("list")
[17:00:36.761]                   options(future.plan = NULL)
[17:00:36.761]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.761]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:36.761]                 }
[17:00:36.761]                 ...future.workdir <- getwd()
[17:00:36.761]             }
[17:00:36.761]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:36.761]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:36.761]         }
[17:00:36.761]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:36.761]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:36.761]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:36.761]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:36.761]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:36.761]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:36.761]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:36.761]             base::names(...future.oldOptions))
[17:00:36.761]     }
[17:00:36.761]     if (FALSE) {
[17:00:36.761]     }
[17:00:36.761]     else {
[17:00:36.761]         if (TRUE) {
[17:00:36.761]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:36.761]                 open = "w")
[17:00:36.761]         }
[17:00:36.761]         else {
[17:00:36.761]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:36.761]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:36.761]         }
[17:00:36.761]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:36.761]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:36.761]             base::sink(type = "output", split = FALSE)
[17:00:36.761]             base::close(...future.stdout)
[17:00:36.761]         }, add = TRUE)
[17:00:36.761]     }
[17:00:36.761]     ...future.frame <- base::sys.nframe()
[17:00:36.761]     ...future.conditions <- base::list()
[17:00:36.761]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:36.761]     if (FALSE) {
[17:00:36.761]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:36.761]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:36.761]     }
[17:00:36.761]     ...future.result <- base::tryCatch({
[17:00:36.761]         base::withCallingHandlers({
[17:00:36.761]             ...future.value <- base::withVisible(base::local({
[17:00:36.761]                 withCallingHandlers({
[17:00:36.761]                   {
[17:00:36.761]                     do.call(function(...) {
[17:00:36.761]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.761]                       if (!identical(...future.globals.maxSize.org, 
[17:00:36.761]                         ...future.globals.maxSize)) {
[17:00:36.761]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.761]                         on.exit(options(oopts), add = TRUE)
[17:00:36.761]                       }
[17:00:36.761]                       {
[17:00:36.761]                         lapply(seq_along(...future.elements_ii), 
[17:00:36.761]                           FUN = function(jj) {
[17:00:36.761]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.761]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.761]                               envir = globalenv(), inherits = FALSE)
[17:00:36.761]                             ...future.FUN(...future.X_jj, ...)
[17:00:36.761]                           })
[17:00:36.761]                       }
[17:00:36.761]                     }, args = future.call.arguments)
[17:00:36.761]                   }
[17:00:36.761]                 }, immediateCondition = function(cond) {
[17:00:36.761]                   save_rds <- function (object, pathname, ...) 
[17:00:36.761]                   {
[17:00:36.761]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:00:36.761]                     if (file_test("-f", pathname_tmp)) {
[17:00:36.761]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.761]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:00:36.761]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.761]                         fi_tmp[["mtime"]])
[17:00:36.761]                     }
[17:00:36.761]                     tryCatch({
[17:00:36.761]                       saveRDS(object, file = pathname_tmp, ...)
[17:00:36.761]                     }, error = function(ex) {
[17:00:36.761]                       msg <- conditionMessage(ex)
[17:00:36.761]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.761]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:00:36.761]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.761]                         fi_tmp[["mtime"]], msg)
[17:00:36.761]                       ex$message <- msg
[17:00:36.761]                       stop(ex)
[17:00:36.761]                     })
[17:00:36.761]                     stopifnot(file_test("-f", pathname_tmp))
[17:00:36.761]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:00:36.761]                     if (!res || file_test("-f", pathname_tmp)) {
[17:00:36.761]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.761]                       fi <- file.info(pathname)
[17:00:36.761]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:00:36.761]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.761]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:00:36.761]                         fi[["size"]], fi[["mtime"]])
[17:00:36.761]                       stop(msg)
[17:00:36.761]                     }
[17:00:36.761]                     invisible(pathname)
[17:00:36.761]                   }
[17:00:36.761]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:00:36.761]                     rootPath = tempdir()) 
[17:00:36.761]                   {
[17:00:36.761]                     obj <- list(time = Sys.time(), condition = cond)
[17:00:36.761]                     file <- tempfile(pattern = class(cond)[1], 
[17:00:36.761]                       tmpdir = path, fileext = ".rds")
[17:00:36.761]                     save_rds(obj, file)
[17:00:36.761]                   }
[17:00:36.761]                   saveImmediateCondition(cond, path = "/tmp/Rtmp7B74IQ/.future/immediateConditions")
[17:00:36.761]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.761]                   {
[17:00:36.761]                     inherits <- base::inherits
[17:00:36.761]                     invokeRestart <- base::invokeRestart
[17:00:36.761]                     is.null <- base::is.null
[17:00:36.761]                     muffled <- FALSE
[17:00:36.761]                     if (inherits(cond, "message")) {
[17:00:36.761]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:36.761]                       if (muffled) 
[17:00:36.761]                         invokeRestart("muffleMessage")
[17:00:36.761]                     }
[17:00:36.761]                     else if (inherits(cond, "warning")) {
[17:00:36.761]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:36.761]                       if (muffled) 
[17:00:36.761]                         invokeRestart("muffleWarning")
[17:00:36.761]                     }
[17:00:36.761]                     else if (inherits(cond, "condition")) {
[17:00:36.761]                       if (!is.null(pattern)) {
[17:00:36.761]                         computeRestarts <- base::computeRestarts
[17:00:36.761]                         grepl <- base::grepl
[17:00:36.761]                         restarts <- computeRestarts(cond)
[17:00:36.761]                         for (restart in restarts) {
[17:00:36.761]                           name <- restart$name
[17:00:36.761]                           if (is.null(name)) 
[17:00:36.761]                             next
[17:00:36.761]                           if (!grepl(pattern, name)) 
[17:00:36.761]                             next
[17:00:36.761]                           invokeRestart(restart)
[17:00:36.761]                           muffled <- TRUE
[17:00:36.761]                           break
[17:00:36.761]                         }
[17:00:36.761]                       }
[17:00:36.761]                     }
[17:00:36.761]                     invisible(muffled)
[17:00:36.761]                   }
[17:00:36.761]                   muffleCondition(cond)
[17:00:36.761]                 })
[17:00:36.761]             }))
[17:00:36.761]             future::FutureResult(value = ...future.value$value, 
[17:00:36.761]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.761]                   ...future.rng), globalenv = if (FALSE) 
[17:00:36.761]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:36.761]                     ...future.globalenv.names))
[17:00:36.761]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:36.761]         }, condition = base::local({
[17:00:36.761]             c <- base::c
[17:00:36.761]             inherits <- base::inherits
[17:00:36.761]             invokeRestart <- base::invokeRestart
[17:00:36.761]             length <- base::length
[17:00:36.761]             list <- base::list
[17:00:36.761]             seq.int <- base::seq.int
[17:00:36.761]             signalCondition <- base::signalCondition
[17:00:36.761]             sys.calls <- base::sys.calls
[17:00:36.761]             `[[` <- base::`[[`
[17:00:36.761]             `+` <- base::`+`
[17:00:36.761]             `<<-` <- base::`<<-`
[17:00:36.761]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:36.761]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:36.761]                   3L)]
[17:00:36.761]             }
[17:00:36.761]             function(cond) {
[17:00:36.761]                 is_error <- inherits(cond, "error")
[17:00:36.761]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:36.761]                   NULL)
[17:00:36.761]                 if (is_error) {
[17:00:36.761]                   sessionInformation <- function() {
[17:00:36.761]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:36.761]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:36.761]                       search = base::search(), system = base::Sys.info())
[17:00:36.761]                   }
[17:00:36.761]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.761]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:36.761]                     cond$call), session = sessionInformation(), 
[17:00:36.761]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:36.761]                   signalCondition(cond)
[17:00:36.761]                 }
[17:00:36.761]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:36.761]                 "immediateCondition"))) {
[17:00:36.761]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:36.761]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.761]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:36.761]                   if (TRUE && !signal) {
[17:00:36.761]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.761]                     {
[17:00:36.761]                       inherits <- base::inherits
[17:00:36.761]                       invokeRestart <- base::invokeRestart
[17:00:36.761]                       is.null <- base::is.null
[17:00:36.761]                       muffled <- FALSE
[17:00:36.761]                       if (inherits(cond, "message")) {
[17:00:36.761]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.761]                         if (muffled) 
[17:00:36.761]                           invokeRestart("muffleMessage")
[17:00:36.761]                       }
[17:00:36.761]                       else if (inherits(cond, "warning")) {
[17:00:36.761]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.761]                         if (muffled) 
[17:00:36.761]                           invokeRestart("muffleWarning")
[17:00:36.761]                       }
[17:00:36.761]                       else if (inherits(cond, "condition")) {
[17:00:36.761]                         if (!is.null(pattern)) {
[17:00:36.761]                           computeRestarts <- base::computeRestarts
[17:00:36.761]                           grepl <- base::grepl
[17:00:36.761]                           restarts <- computeRestarts(cond)
[17:00:36.761]                           for (restart in restarts) {
[17:00:36.761]                             name <- restart$name
[17:00:36.761]                             if (is.null(name)) 
[17:00:36.761]                               next
[17:00:36.761]                             if (!grepl(pattern, name)) 
[17:00:36.761]                               next
[17:00:36.761]                             invokeRestart(restart)
[17:00:36.761]                             muffled <- TRUE
[17:00:36.761]                             break
[17:00:36.761]                           }
[17:00:36.761]                         }
[17:00:36.761]                       }
[17:00:36.761]                       invisible(muffled)
[17:00:36.761]                     }
[17:00:36.761]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.761]                   }
[17:00:36.761]                 }
[17:00:36.761]                 else {
[17:00:36.761]                   if (TRUE) {
[17:00:36.761]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.761]                     {
[17:00:36.761]                       inherits <- base::inherits
[17:00:36.761]                       invokeRestart <- base::invokeRestart
[17:00:36.761]                       is.null <- base::is.null
[17:00:36.761]                       muffled <- FALSE
[17:00:36.761]                       if (inherits(cond, "message")) {
[17:00:36.761]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.761]                         if (muffled) 
[17:00:36.761]                           invokeRestart("muffleMessage")
[17:00:36.761]                       }
[17:00:36.761]                       else if (inherits(cond, "warning")) {
[17:00:36.761]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.761]                         if (muffled) 
[17:00:36.761]                           invokeRestart("muffleWarning")
[17:00:36.761]                       }
[17:00:36.761]                       else if (inherits(cond, "condition")) {
[17:00:36.761]                         if (!is.null(pattern)) {
[17:00:36.761]                           computeRestarts <- base::computeRestarts
[17:00:36.761]                           grepl <- base::grepl
[17:00:36.761]                           restarts <- computeRestarts(cond)
[17:00:36.761]                           for (restart in restarts) {
[17:00:36.761]                             name <- restart$name
[17:00:36.761]                             if (is.null(name)) 
[17:00:36.761]                               next
[17:00:36.761]                             if (!grepl(pattern, name)) 
[17:00:36.761]                               next
[17:00:36.761]                             invokeRestart(restart)
[17:00:36.761]                             muffled <- TRUE
[17:00:36.761]                             break
[17:00:36.761]                           }
[17:00:36.761]                         }
[17:00:36.761]                       }
[17:00:36.761]                       invisible(muffled)
[17:00:36.761]                     }
[17:00:36.761]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.761]                   }
[17:00:36.761]                 }
[17:00:36.761]             }
[17:00:36.761]         }))
[17:00:36.761]     }, error = function(ex) {
[17:00:36.761]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:36.761]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.761]                 ...future.rng), started = ...future.startTime, 
[17:00:36.761]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:36.761]             version = "1.8"), class = "FutureResult")
[17:00:36.761]     }, finally = {
[17:00:36.761]         if (!identical(...future.workdir, getwd())) 
[17:00:36.761]             setwd(...future.workdir)
[17:00:36.761]         {
[17:00:36.761]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:36.761]                 ...future.oldOptions$nwarnings <- NULL
[17:00:36.761]             }
[17:00:36.761]             base::options(...future.oldOptions)
[17:00:36.761]             if (.Platform$OS.type == "windows") {
[17:00:36.761]                 old_names <- names(...future.oldEnvVars)
[17:00:36.761]                 envs <- base::Sys.getenv()
[17:00:36.761]                 names <- names(envs)
[17:00:36.761]                 common <- intersect(names, old_names)
[17:00:36.761]                 added <- setdiff(names, old_names)
[17:00:36.761]                 removed <- setdiff(old_names, names)
[17:00:36.761]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:36.761]                   envs[common]]
[17:00:36.761]                 NAMES <- toupper(changed)
[17:00:36.761]                 args <- list()
[17:00:36.761]                 for (kk in seq_along(NAMES)) {
[17:00:36.761]                   name <- changed[[kk]]
[17:00:36.761]                   NAME <- NAMES[[kk]]
[17:00:36.761]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.761]                     next
[17:00:36.761]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.761]                 }
[17:00:36.761]                 NAMES <- toupper(added)
[17:00:36.761]                 for (kk in seq_along(NAMES)) {
[17:00:36.761]                   name <- added[[kk]]
[17:00:36.761]                   NAME <- NAMES[[kk]]
[17:00:36.761]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.761]                     next
[17:00:36.761]                   args[[name]] <- ""
[17:00:36.761]                 }
[17:00:36.761]                 NAMES <- toupper(removed)
[17:00:36.761]                 for (kk in seq_along(NAMES)) {
[17:00:36.761]                   name <- removed[[kk]]
[17:00:36.761]                   NAME <- NAMES[[kk]]
[17:00:36.761]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.761]                     next
[17:00:36.761]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.761]                 }
[17:00:36.761]                 if (length(args) > 0) 
[17:00:36.761]                   base::do.call(base::Sys.setenv, args = args)
[17:00:36.761]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:36.761]             }
[17:00:36.761]             else {
[17:00:36.761]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:36.761]             }
[17:00:36.761]             {
[17:00:36.761]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:36.761]                   0L) {
[17:00:36.761]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:36.761]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:36.761]                   base::options(opts)
[17:00:36.761]                 }
[17:00:36.761]                 {
[17:00:36.761]                   {
[17:00:36.761]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:36.761]                     NULL
[17:00:36.761]                   }
[17:00:36.761]                   options(future.plan = NULL)
[17:00:36.761]                   if (is.na(NA_character_)) 
[17:00:36.761]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.761]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:36.761]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:36.761]                     .init = FALSE)
[17:00:36.761]                 }
[17:00:36.761]             }
[17:00:36.761]         }
[17:00:36.761]     })
[17:00:36.761]     if (TRUE) {
[17:00:36.761]         base::sink(type = "output", split = FALSE)
[17:00:36.761]         if (TRUE) {
[17:00:36.761]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:36.761]         }
[17:00:36.761]         else {
[17:00:36.761]             ...future.result["stdout"] <- base::list(NULL)
[17:00:36.761]         }
[17:00:36.761]         base::close(...future.stdout)
[17:00:36.761]         ...future.stdout <- NULL
[17:00:36.761]     }
[17:00:36.761]     ...future.result$conditions <- ...future.conditions
[17:00:36.761]     ...future.result$finished <- base::Sys.time()
[17:00:36.761]     ...future.result
[17:00:36.761] }
[17:00:36.764] assign_globals() ...
[17:00:36.764] List of 7
[17:00:36.764]  $ ...future.FUN            :function (...)  
[17:00:36.764]  $ foo                      :function (x = 1, y = 2)  
[17:00:36.764]  $ x                        : num 3
[17:00:36.764]  $ future.call.arguments    : list()
[17:00:36.764]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.764]  $ ...future.elements_ii    :List of 2
[17:00:36.764]   ..$ : int 0
[17:00:36.764]   ..$ : int 0
[17:00:36.764]  $ ...future.seeds_ii       :List of 2
[17:00:36.764]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[17:00:36.764]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[17:00:36.764]  $ ...future.globals.maxSize: NULL
[17:00:36.764]  - attr(*, "where")=List of 7
[17:00:36.764]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:00:36.764]   ..$ foo                      :<environment: R_EmptyEnv> 
[17:00:36.764]   ..$ x                        :<environment: R_EmptyEnv> 
[17:00:36.764]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:00:36.764]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:00:36.764]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:00:36.764]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:00:36.764]  - attr(*, "resolved")= logi FALSE
[17:00:36.764]  - attr(*, "total_size")= num 2200
[17:00:36.764]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.764]  - attr(*, "already-done")= logi TRUE
[17:00:36.771] - reassign environment for ‘...future.FUN’
[17:00:36.771] - copied ‘...future.FUN’ to environment
[17:00:36.771] - reassign environment for ‘foo’
[17:00:36.771] - copied ‘foo’ to environment
[17:00:36.771] - copied ‘x’ to environment
[17:00:36.771] - copied ‘future.call.arguments’ to environment
[17:00:36.771] - copied ‘...future.elements_ii’ to environment
[17:00:36.772] - copied ‘...future.seeds_ii’ to environment
[17:00:36.772] - copied ‘...future.globals.maxSize’ to environment
[17:00:36.772] assign_globals() ... done
[17:00:36.772] requestCore(): workers = 2
[17:00:36.774] MulticoreFuture started
[17:00:36.774] - Launch lazy future ... done
[17:00:36.775] run() for ‘MulticoreFuture’ ... done
[17:00:36.775] Created future:
[17:00:36.775] plan(): Setting new future strategy stack:
[17:00:36.776] List of future strategies:
[17:00:36.776] 1. sequential:
[17:00:36.776]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:36.776]    - tweaked: FALSE
[17:00:36.776]    - call: NULL
[17:00:36.777] plan(): nbrOfWorkers() = 1
[17:00:36.779] plan(): Setting new future strategy stack:
[17:00:36.779] List of future strategies:
[17:00:36.779] 1. multicore:
[17:00:36.779]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:00:36.779]    - tweaked: FALSE
[17:00:36.779]    - call: plan(strategy)
[17:00:36.784] plan(): nbrOfWorkers() = 2
[17:00:36.775] MulticoreFuture:
[17:00:36.775] Label: ‘future_replicate-1’
[17:00:36.775] Expression:
[17:00:36.775] {
[17:00:36.775]     do.call(function(...) {
[17:00:36.775]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.775]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.775]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.775]             on.exit(options(oopts), add = TRUE)
[17:00:36.775]         }
[17:00:36.775]         {
[17:00:36.775]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.775]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.775]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.775]                   envir = globalenv(), inherits = FALSE)
[17:00:36.775]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.775]             })
[17:00:36.775]         }
[17:00:36.775]     }, args = future.call.arguments)
[17:00:36.775] }
[17:00:36.775] Lazy evaluation: FALSE
[17:00:36.775] Asynchronous evaluation: TRUE
[17:00:36.775] Local evaluation: TRUE
[17:00:36.775] Environment: 0x55856384c710
[17:00:36.775] Capture standard output: TRUE
[17:00:36.775] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:36.775] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[17:00:36.775] Packages: <none>
[17:00:36.775] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:36.775] Resolved: TRUE
[17:00:36.775] Value: <not collected>
[17:00:36.775] Conditions captured: <none>
[17:00:36.775] Early signaling: FALSE
[17:00:36.775] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:36.775] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.785] Chunk #1 of 2 ... DONE
[17:00:36.786] Chunk #2 of 2 ...
[17:00:36.786]  - Finding globals in 'X' for chunk #2 ...
[17:00:36.786] getGlobalsAndPackages() ...
[17:00:36.786] Searching for globals...
[17:00:36.787] 
[17:00:36.787] Searching for globals ... DONE
[17:00:36.787] - globals: [0] <none>
[17:00:36.787] getGlobalsAndPackages() ... DONE
[17:00:36.787]    + additional globals found: [n=0] 
[17:00:36.787]    + additional namespaces needed: [n=0] 
[17:00:36.787]  - Finding globals in 'X' for chunk #2 ... DONE
[17:00:36.788]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:36.788]  - seeds: [3] <seeds>
[17:00:36.788]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.788] getGlobalsAndPackages() ...
[17:00:36.788] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.789] Resolving globals: FALSE
[17:00:36.789] Tweak future expression to call with '...' arguments ...
[17:00:36.789] {
[17:00:36.789]     do.call(function(...) {
[17:00:36.789]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.789]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.789]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.789]             on.exit(options(oopts), add = TRUE)
[17:00:36.789]         }
[17:00:36.789]         {
[17:00:36.789]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.789]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.789]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.789]                   envir = globalenv(), inherits = FALSE)
[17:00:36.789]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.789]             })
[17:00:36.789]         }
[17:00:36.789]     }, args = future.call.arguments)
[17:00:36.789] }
[17:00:36.789] Tweak future expression to call with '...' arguments ... DONE
[17:00:36.790] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:36.790] 
[17:00:36.790] getGlobalsAndPackages() ... DONE
[17:00:36.791] run() for ‘Future’ ...
[17:00:36.791] - state: ‘created’
[17:00:36.791] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:00:36.796] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.796] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:00:36.796]   - Field: ‘label’
[17:00:36.797]   - Field: ‘local’
[17:00:36.797]   - Field: ‘owner’
[17:00:36.797]   - Field: ‘envir’
[17:00:36.797]   - Field: ‘workers’
[17:00:36.797]   - Field: ‘packages’
[17:00:36.797]   - Field: ‘gc’
[17:00:36.797]   - Field: ‘job’
[17:00:36.798]   - Field: ‘conditions’
[17:00:36.798]   - Field: ‘expr’
[17:00:36.798]   - Field: ‘uuid’
[17:00:36.798]   - Field: ‘seed’
[17:00:36.798]   - Field: ‘version’
[17:00:36.798]   - Field: ‘result’
[17:00:36.798]   - Field: ‘asynchronous’
[17:00:36.799]   - Field: ‘calls’
[17:00:36.799]   - Field: ‘globals’
[17:00:36.799]   - Field: ‘stdout’
[17:00:36.799]   - Field: ‘earlySignal’
[17:00:36.799]   - Field: ‘lazy’
[17:00:36.799]   - Field: ‘state’
[17:00:36.799] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:00:36.800] - Launch lazy future ...
[17:00:36.800] Packages needed by the future expression (n = 0): <none>
[17:00:36.800] Packages needed by future strategies (n = 0): <none>
[17:00:36.801] {
[17:00:36.801]     {
[17:00:36.801]         {
[17:00:36.801]             ...future.startTime <- base::Sys.time()
[17:00:36.801]             {
[17:00:36.801]                 {
[17:00:36.801]                   {
[17:00:36.801]                     {
[17:00:36.801]                       base::local({
[17:00:36.801]                         has_future <- base::requireNamespace("future", 
[17:00:36.801]                           quietly = TRUE)
[17:00:36.801]                         if (has_future) {
[17:00:36.801]                           ns <- base::getNamespace("future")
[17:00:36.801]                           version <- ns[[".package"]][["version"]]
[17:00:36.801]                           if (is.null(version)) 
[17:00:36.801]                             version <- utils::packageVersion("future")
[17:00:36.801]                         }
[17:00:36.801]                         else {
[17:00:36.801]                           version <- NULL
[17:00:36.801]                         }
[17:00:36.801]                         if (!has_future || version < "1.8.0") {
[17:00:36.801]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:36.801]                             "", base::R.version$version.string), 
[17:00:36.801]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:36.801]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:36.801]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:36.801]                               "release", "version")], collapse = " "), 
[17:00:36.801]                             hostname = base::Sys.info()[["nodename"]])
[17:00:36.801]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:36.801]                             info)
[17:00:36.801]                           info <- base::paste(info, collapse = "; ")
[17:00:36.801]                           if (!has_future) {
[17:00:36.801]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:36.801]                               info)
[17:00:36.801]                           }
[17:00:36.801]                           else {
[17:00:36.801]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:36.801]                               info, version)
[17:00:36.801]                           }
[17:00:36.801]                           base::stop(msg)
[17:00:36.801]                         }
[17:00:36.801]                       })
[17:00:36.801]                     }
[17:00:36.801]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:36.801]                     base::options(mc.cores = 1L)
[17:00:36.801]                   }
[17:00:36.801]                   ...future.strategy.old <- future::plan("list")
[17:00:36.801]                   options(future.plan = NULL)
[17:00:36.801]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.801]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:36.801]                 }
[17:00:36.801]                 ...future.workdir <- getwd()
[17:00:36.801]             }
[17:00:36.801]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:36.801]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:36.801]         }
[17:00:36.801]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:36.801]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:36.801]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:36.801]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:36.801]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:36.801]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:36.801]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:36.801]             base::names(...future.oldOptions))
[17:00:36.801]     }
[17:00:36.801]     if (FALSE) {
[17:00:36.801]     }
[17:00:36.801]     else {
[17:00:36.801]         if (TRUE) {
[17:00:36.801]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:36.801]                 open = "w")
[17:00:36.801]         }
[17:00:36.801]         else {
[17:00:36.801]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:36.801]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:36.801]         }
[17:00:36.801]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:36.801]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:36.801]             base::sink(type = "output", split = FALSE)
[17:00:36.801]             base::close(...future.stdout)
[17:00:36.801]         }, add = TRUE)
[17:00:36.801]     }
[17:00:36.801]     ...future.frame <- base::sys.nframe()
[17:00:36.801]     ...future.conditions <- base::list()
[17:00:36.801]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:36.801]     if (FALSE) {
[17:00:36.801]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:36.801]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:36.801]     }
[17:00:36.801]     ...future.result <- base::tryCatch({
[17:00:36.801]         base::withCallingHandlers({
[17:00:36.801]             ...future.value <- base::withVisible(base::local({
[17:00:36.801]                 withCallingHandlers({
[17:00:36.801]                   {
[17:00:36.801]                     do.call(function(...) {
[17:00:36.801]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.801]                       if (!identical(...future.globals.maxSize.org, 
[17:00:36.801]                         ...future.globals.maxSize)) {
[17:00:36.801]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.801]                         on.exit(options(oopts), add = TRUE)
[17:00:36.801]                       }
[17:00:36.801]                       {
[17:00:36.801]                         lapply(seq_along(...future.elements_ii), 
[17:00:36.801]                           FUN = function(jj) {
[17:00:36.801]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.801]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.801]                               envir = globalenv(), inherits = FALSE)
[17:00:36.801]                             ...future.FUN(...future.X_jj, ...)
[17:00:36.801]                           })
[17:00:36.801]                       }
[17:00:36.801]                     }, args = future.call.arguments)
[17:00:36.801]                   }
[17:00:36.801]                 }, immediateCondition = function(cond) {
[17:00:36.801]                   save_rds <- function (object, pathname, ...) 
[17:00:36.801]                   {
[17:00:36.801]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:00:36.801]                     if (file_test("-f", pathname_tmp)) {
[17:00:36.801]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.801]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:00:36.801]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.801]                         fi_tmp[["mtime"]])
[17:00:36.801]                     }
[17:00:36.801]                     tryCatch({
[17:00:36.801]                       saveRDS(object, file = pathname_tmp, ...)
[17:00:36.801]                     }, error = function(ex) {
[17:00:36.801]                       msg <- conditionMessage(ex)
[17:00:36.801]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.801]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:00:36.801]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.801]                         fi_tmp[["mtime"]], msg)
[17:00:36.801]                       ex$message <- msg
[17:00:36.801]                       stop(ex)
[17:00:36.801]                     })
[17:00:36.801]                     stopifnot(file_test("-f", pathname_tmp))
[17:00:36.801]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:00:36.801]                     if (!res || file_test("-f", pathname_tmp)) {
[17:00:36.801]                       fi_tmp <- file.info(pathname_tmp)
[17:00:36.801]                       fi <- file.info(pathname)
[17:00:36.801]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:00:36.801]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:00:36.801]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:00:36.801]                         fi[["size"]], fi[["mtime"]])
[17:00:36.801]                       stop(msg)
[17:00:36.801]                     }
[17:00:36.801]                     invisible(pathname)
[17:00:36.801]                   }
[17:00:36.801]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:00:36.801]                     rootPath = tempdir()) 
[17:00:36.801]                   {
[17:00:36.801]                     obj <- list(time = Sys.time(), condition = cond)
[17:00:36.801]                     file <- tempfile(pattern = class(cond)[1], 
[17:00:36.801]                       tmpdir = path, fileext = ".rds")
[17:00:36.801]                     save_rds(obj, file)
[17:00:36.801]                   }
[17:00:36.801]                   saveImmediateCondition(cond, path = "/tmp/Rtmp7B74IQ/.future/immediateConditions")
[17:00:36.801]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.801]                   {
[17:00:36.801]                     inherits <- base::inherits
[17:00:36.801]                     invokeRestart <- base::invokeRestart
[17:00:36.801]                     is.null <- base::is.null
[17:00:36.801]                     muffled <- FALSE
[17:00:36.801]                     if (inherits(cond, "message")) {
[17:00:36.801]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:36.801]                       if (muffled) 
[17:00:36.801]                         invokeRestart("muffleMessage")
[17:00:36.801]                     }
[17:00:36.801]                     else if (inherits(cond, "warning")) {
[17:00:36.801]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:36.801]                       if (muffled) 
[17:00:36.801]                         invokeRestart("muffleWarning")
[17:00:36.801]                     }
[17:00:36.801]                     else if (inherits(cond, "condition")) {
[17:00:36.801]                       if (!is.null(pattern)) {
[17:00:36.801]                         computeRestarts <- base::computeRestarts
[17:00:36.801]                         grepl <- base::grepl
[17:00:36.801]                         restarts <- computeRestarts(cond)
[17:00:36.801]                         for (restart in restarts) {
[17:00:36.801]                           name <- restart$name
[17:00:36.801]                           if (is.null(name)) 
[17:00:36.801]                             next
[17:00:36.801]                           if (!grepl(pattern, name)) 
[17:00:36.801]                             next
[17:00:36.801]                           invokeRestart(restart)
[17:00:36.801]                           muffled <- TRUE
[17:00:36.801]                           break
[17:00:36.801]                         }
[17:00:36.801]                       }
[17:00:36.801]                     }
[17:00:36.801]                     invisible(muffled)
[17:00:36.801]                   }
[17:00:36.801]                   muffleCondition(cond)
[17:00:36.801]                 })
[17:00:36.801]             }))
[17:00:36.801]             future::FutureResult(value = ...future.value$value, 
[17:00:36.801]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.801]                   ...future.rng), globalenv = if (FALSE) 
[17:00:36.801]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:36.801]                     ...future.globalenv.names))
[17:00:36.801]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:36.801]         }, condition = base::local({
[17:00:36.801]             c <- base::c
[17:00:36.801]             inherits <- base::inherits
[17:00:36.801]             invokeRestart <- base::invokeRestart
[17:00:36.801]             length <- base::length
[17:00:36.801]             list <- base::list
[17:00:36.801]             seq.int <- base::seq.int
[17:00:36.801]             signalCondition <- base::signalCondition
[17:00:36.801]             sys.calls <- base::sys.calls
[17:00:36.801]             `[[` <- base::`[[`
[17:00:36.801]             `+` <- base::`+`
[17:00:36.801]             `<<-` <- base::`<<-`
[17:00:36.801]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:36.801]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:36.801]                   3L)]
[17:00:36.801]             }
[17:00:36.801]             function(cond) {
[17:00:36.801]                 is_error <- inherits(cond, "error")
[17:00:36.801]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:36.801]                   NULL)
[17:00:36.801]                 if (is_error) {
[17:00:36.801]                   sessionInformation <- function() {
[17:00:36.801]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:36.801]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:36.801]                       search = base::search(), system = base::Sys.info())
[17:00:36.801]                   }
[17:00:36.801]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.801]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:36.801]                     cond$call), session = sessionInformation(), 
[17:00:36.801]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:36.801]                   signalCondition(cond)
[17:00:36.801]                 }
[17:00:36.801]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:36.801]                 "immediateCondition"))) {
[17:00:36.801]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:36.801]                   ...future.conditions[[length(...future.conditions) + 
[17:00:36.801]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:36.801]                   if (TRUE && !signal) {
[17:00:36.801]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.801]                     {
[17:00:36.801]                       inherits <- base::inherits
[17:00:36.801]                       invokeRestart <- base::invokeRestart
[17:00:36.801]                       is.null <- base::is.null
[17:00:36.801]                       muffled <- FALSE
[17:00:36.801]                       if (inherits(cond, "message")) {
[17:00:36.801]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.801]                         if (muffled) 
[17:00:36.801]                           invokeRestart("muffleMessage")
[17:00:36.801]                       }
[17:00:36.801]                       else if (inherits(cond, "warning")) {
[17:00:36.801]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.801]                         if (muffled) 
[17:00:36.801]                           invokeRestart("muffleWarning")
[17:00:36.801]                       }
[17:00:36.801]                       else if (inherits(cond, "condition")) {
[17:00:36.801]                         if (!is.null(pattern)) {
[17:00:36.801]                           computeRestarts <- base::computeRestarts
[17:00:36.801]                           grepl <- base::grepl
[17:00:36.801]                           restarts <- computeRestarts(cond)
[17:00:36.801]                           for (restart in restarts) {
[17:00:36.801]                             name <- restart$name
[17:00:36.801]                             if (is.null(name)) 
[17:00:36.801]                               next
[17:00:36.801]                             if (!grepl(pattern, name)) 
[17:00:36.801]                               next
[17:00:36.801]                             invokeRestart(restart)
[17:00:36.801]                             muffled <- TRUE
[17:00:36.801]                             break
[17:00:36.801]                           }
[17:00:36.801]                         }
[17:00:36.801]                       }
[17:00:36.801]                       invisible(muffled)
[17:00:36.801]                     }
[17:00:36.801]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.801]                   }
[17:00:36.801]                 }
[17:00:36.801]                 else {
[17:00:36.801]                   if (TRUE) {
[17:00:36.801]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:36.801]                     {
[17:00:36.801]                       inherits <- base::inherits
[17:00:36.801]                       invokeRestart <- base::invokeRestart
[17:00:36.801]                       is.null <- base::is.null
[17:00:36.801]                       muffled <- FALSE
[17:00:36.801]                       if (inherits(cond, "message")) {
[17:00:36.801]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:36.801]                         if (muffled) 
[17:00:36.801]                           invokeRestart("muffleMessage")
[17:00:36.801]                       }
[17:00:36.801]                       else if (inherits(cond, "warning")) {
[17:00:36.801]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:36.801]                         if (muffled) 
[17:00:36.801]                           invokeRestart("muffleWarning")
[17:00:36.801]                       }
[17:00:36.801]                       else if (inherits(cond, "condition")) {
[17:00:36.801]                         if (!is.null(pattern)) {
[17:00:36.801]                           computeRestarts <- base::computeRestarts
[17:00:36.801]                           grepl <- base::grepl
[17:00:36.801]                           restarts <- computeRestarts(cond)
[17:00:36.801]                           for (restart in restarts) {
[17:00:36.801]                             name <- restart$name
[17:00:36.801]                             if (is.null(name)) 
[17:00:36.801]                               next
[17:00:36.801]                             if (!grepl(pattern, name)) 
[17:00:36.801]                               next
[17:00:36.801]                             invokeRestart(restart)
[17:00:36.801]                             muffled <- TRUE
[17:00:36.801]                             break
[17:00:36.801]                           }
[17:00:36.801]                         }
[17:00:36.801]                       }
[17:00:36.801]                       invisible(muffled)
[17:00:36.801]                     }
[17:00:36.801]                     muffleCondition(cond, pattern = "^muffle")
[17:00:36.801]                   }
[17:00:36.801]                 }
[17:00:36.801]             }
[17:00:36.801]         }))
[17:00:36.801]     }, error = function(ex) {
[17:00:36.801]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:36.801]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:36.801]                 ...future.rng), started = ...future.startTime, 
[17:00:36.801]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:36.801]             version = "1.8"), class = "FutureResult")
[17:00:36.801]     }, finally = {
[17:00:36.801]         if (!identical(...future.workdir, getwd())) 
[17:00:36.801]             setwd(...future.workdir)
[17:00:36.801]         {
[17:00:36.801]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:36.801]                 ...future.oldOptions$nwarnings <- NULL
[17:00:36.801]             }
[17:00:36.801]             base::options(...future.oldOptions)
[17:00:36.801]             if (.Platform$OS.type == "windows") {
[17:00:36.801]                 old_names <- names(...future.oldEnvVars)
[17:00:36.801]                 envs <- base::Sys.getenv()
[17:00:36.801]                 names <- names(envs)
[17:00:36.801]                 common <- intersect(names, old_names)
[17:00:36.801]                 added <- setdiff(names, old_names)
[17:00:36.801]                 removed <- setdiff(old_names, names)
[17:00:36.801]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:36.801]                   envs[common]]
[17:00:36.801]                 NAMES <- toupper(changed)
[17:00:36.801]                 args <- list()
[17:00:36.801]                 for (kk in seq_along(NAMES)) {
[17:00:36.801]                   name <- changed[[kk]]
[17:00:36.801]                   NAME <- NAMES[[kk]]
[17:00:36.801]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.801]                     next
[17:00:36.801]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.801]                 }
[17:00:36.801]                 NAMES <- toupper(added)
[17:00:36.801]                 for (kk in seq_along(NAMES)) {
[17:00:36.801]                   name <- added[[kk]]
[17:00:36.801]                   NAME <- NAMES[[kk]]
[17:00:36.801]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.801]                     next
[17:00:36.801]                   args[[name]] <- ""
[17:00:36.801]                 }
[17:00:36.801]                 NAMES <- toupper(removed)
[17:00:36.801]                 for (kk in seq_along(NAMES)) {
[17:00:36.801]                   name <- removed[[kk]]
[17:00:36.801]                   NAME <- NAMES[[kk]]
[17:00:36.801]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:36.801]                     next
[17:00:36.801]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:36.801]                 }
[17:00:36.801]                 if (length(args) > 0) 
[17:00:36.801]                   base::do.call(base::Sys.setenv, args = args)
[17:00:36.801]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:36.801]             }
[17:00:36.801]             else {
[17:00:36.801]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:36.801]             }
[17:00:36.801]             {
[17:00:36.801]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:36.801]                   0L) {
[17:00:36.801]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:36.801]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:36.801]                   base::options(opts)
[17:00:36.801]                 }
[17:00:36.801]                 {
[17:00:36.801]                   {
[17:00:36.801]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:36.801]                     NULL
[17:00:36.801]                   }
[17:00:36.801]                   options(future.plan = NULL)
[17:00:36.801]                   if (is.na(NA_character_)) 
[17:00:36.801]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:36.801]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:36.801]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:36.801]                     .init = FALSE)
[17:00:36.801]                 }
[17:00:36.801]             }
[17:00:36.801]         }
[17:00:36.801]     })
[17:00:36.801]     if (TRUE) {
[17:00:36.801]         base::sink(type = "output", split = FALSE)
[17:00:36.801]         if (TRUE) {
[17:00:36.801]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:36.801]         }
[17:00:36.801]         else {
[17:00:36.801]             ...future.result["stdout"] <- base::list(NULL)
[17:00:36.801]         }
[17:00:36.801]         base::close(...future.stdout)
[17:00:36.801]         ...future.stdout <- NULL
[17:00:36.801]     }
[17:00:36.801]     ...future.result$conditions <- ...future.conditions
[17:00:36.801]     ...future.result$finished <- base::Sys.time()
[17:00:36.801]     ...future.result
[17:00:36.801] }
[17:00:36.804] assign_globals() ...
[17:00:36.804] List of 7
[17:00:36.804]  $ ...future.FUN            :function (...)  
[17:00:36.804]  $ foo                      :function (x = 1, y = 2)  
[17:00:36.804]  $ x                        : num 3
[17:00:36.804]  $ future.call.arguments    : list()
[17:00:36.804]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:36.804]  $ ...future.elements_ii    :List of 3
[17:00:36.804]   ..$ : int 0
[17:00:36.804]   ..$ : int 0
[17:00:36.804]   ..$ : int 0
[17:00:36.804]  $ ...future.seeds_ii       :List of 3
[17:00:36.804]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[17:00:36.804]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[17:00:36.804]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[17:00:36.804]  $ ...future.globals.maxSize: NULL
[17:00:36.804]  - attr(*, "where")=List of 7
[17:00:36.804]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:00:36.804]   ..$ foo                      :<environment: R_EmptyEnv> 
[17:00:36.804]   ..$ x                        :<environment: R_EmptyEnv> 
[17:00:36.804]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:00:36.804]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:00:36.804]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:00:36.804]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:00:36.804]  - attr(*, "resolved")= logi FALSE
[17:00:36.804]  - attr(*, "total_size")= num 2200
[17:00:36.804]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:36.804]  - attr(*, "already-done")= logi TRUE
[17:00:36.819] - reassign environment for ‘...future.FUN’
[17:00:36.819] - copied ‘...future.FUN’ to environment
[17:00:36.819] - reassign environment for ‘foo’
[17:00:36.819] - copied ‘foo’ to environment
[17:00:36.820] - copied ‘x’ to environment
[17:00:36.820] - copied ‘future.call.arguments’ to environment
[17:00:36.820] - copied ‘...future.elements_ii’ to environment
[17:00:36.820] - copied ‘...future.seeds_ii’ to environment
[17:00:36.820] - copied ‘...future.globals.maxSize’ to environment
[17:00:36.820] assign_globals() ... done
[17:00:36.820] requestCore(): workers = 2
[17:00:36.823] MulticoreFuture started
[17:00:36.823] - Launch lazy future ... done
[17:00:36.824] run() for ‘MulticoreFuture’ ... done
[17:00:36.824] Created future:
[17:00:36.824] plan(): Setting new future strategy stack:
[17:00:36.825] List of future strategies:
[17:00:36.825] 1. sequential:
[17:00:36.825]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:36.825]    - tweaked: FALSE
[17:00:36.825]    - call: NULL
[17:00:36.826] plan(): nbrOfWorkers() = 1
[17:00:36.828] plan(): Setting new future strategy stack:
[17:00:36.828] List of future strategies:
[17:00:36.828] 1. multicore:
[17:00:36.828]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:00:36.828]    - tweaked: FALSE
[17:00:36.828]    - call: plan(strategy)
[17:00:36.833] plan(): nbrOfWorkers() = 2
[17:00:36.824] MulticoreFuture:
[17:00:36.824] Label: ‘future_replicate-2’
[17:00:36.824] Expression:
[17:00:36.824] {
[17:00:36.824]     do.call(function(...) {
[17:00:36.824]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:36.824]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:36.824]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:36.824]             on.exit(options(oopts), add = TRUE)
[17:00:36.824]         }
[17:00:36.824]         {
[17:00:36.824]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:36.824]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:36.824]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:36.824]                   envir = globalenv(), inherits = FALSE)
[17:00:36.824]                 ...future.FUN(...future.X_jj, ...)
[17:00:36.824]             })
[17:00:36.824]         }
[17:00:36.824]     }, args = future.call.arguments)
[17:00:36.824] }
[17:00:36.824] Lazy evaluation: FALSE
[17:00:36.824] Asynchronous evaluation: TRUE
[17:00:36.824] Local evaluation: TRUE
[17:00:36.824] Environment: 0x55856384c710
[17:00:36.824] Capture standard output: TRUE
[17:00:36.824] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:36.824] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[17:00:36.824] Packages: <none>
[17:00:36.824] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:36.824] Resolved: TRUE
[17:00:36.824] Value: <not collected>
[17:00:36.824] Conditions captured: <none>
[17:00:36.824] Early signaling: FALSE
[17:00:36.824] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:36.824] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:36.834] Chunk #2 of 2 ... DONE
[17:00:36.834] Launching 2 futures (chunks) ... DONE
[17:00:36.834] Resolving 2 futures (chunks) ...
[17:00:36.835] resolve() on list ...
[17:00:36.835]  recursive: 0
[17:00:36.835]  length: 2
[17:00:36.835] 
[17:00:36.835] Future #1
[17:00:36.836] result() for MulticoreFuture ...
[17:00:36.837] result() for MulticoreFuture ...
[17:00:36.837] result() for MulticoreFuture ... done
[17:00:36.837] result() for MulticoreFuture ... done
[17:00:36.837] result() for MulticoreFuture ...
[17:00:36.837] result() for MulticoreFuture ... done
[17:00:36.837] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:00:36.838] - nx: 2
[17:00:36.838] - relay: TRUE
[17:00:36.838] - stdout: TRUE
[17:00:36.838] - signal: TRUE
[17:00:36.838] - resignal: FALSE
[17:00:36.838] - force: TRUE
[17:00:36.838] - relayed: [n=2] FALSE, FALSE
[17:00:36.838] - queued futures: [n=2] FALSE, FALSE
[17:00:36.839]  - until=1
[17:00:36.839]  - relaying element #1
[17:00:36.839] result() for MulticoreFuture ...
[17:00:36.839] result() for MulticoreFuture ... done
[17:00:36.839] result() for MulticoreFuture ...
[17:00:36.839] result() for MulticoreFuture ... done
[17:00:36.840] result() for MulticoreFuture ...
[17:00:36.840] result() for MulticoreFuture ... done
[17:00:36.840] result() for MulticoreFuture ...
[17:00:36.840] result() for MulticoreFuture ... done
[17:00:36.840] - relayed: [n=2] TRUE, FALSE
[17:00:36.840] - queued futures: [n=2] TRUE, FALSE
[17:00:36.841] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:00:36.841]  length: 1 (resolved future 1)
[17:00:36.841] Future #2
[17:00:36.841] result() for MulticoreFuture ...
[17:00:36.842] result() for MulticoreFuture ...
[17:00:36.842] result() for MulticoreFuture ... done
[17:00:36.843] result() for MulticoreFuture ... done
[17:00:36.843] result() for MulticoreFuture ...
[17:00:36.843] result() for MulticoreFuture ... done
[17:00:36.843] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:00:36.843] - nx: 2
[17:00:36.843] - relay: TRUE
[17:00:36.844] - stdout: TRUE
[17:00:36.844] - signal: TRUE
[17:00:36.844] - resignal: FALSE
[17:00:36.844] - force: TRUE
[17:00:36.844] - relayed: [n=2] TRUE, FALSE
[17:00:36.844] - queued futures: [n=2] TRUE, FALSE
[17:00:36.844]  - until=2
[17:00:36.844]  - relaying element #2
[17:00:36.845] result() for MulticoreFuture ...
[17:00:36.845] result() for MulticoreFuture ... done
[17:00:36.845] result() for MulticoreFuture ...
[17:00:36.845] result() for MulticoreFuture ... done
[17:00:36.845] result() for MulticoreFuture ...
[17:00:36.845] result() for MulticoreFuture ... done
[17:00:36.845] result() for MulticoreFuture ...
[17:00:36.845] result() for MulticoreFuture ... done
[17:00:36.845] - relayed: [n=2] TRUE, TRUE
[17:00:36.846] - queued futures: [n=2] TRUE, TRUE
[17:00:36.846] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:00:36.846]  length: 0 (resolved future 2)
[17:00:36.846] Relaying remaining futures
[17:00:36.846] signalConditionsASAP(NULL, pos=0) ...
[17:00:36.846] - nx: 2
[17:00:36.846] - relay: TRUE
[17:00:36.846] - stdout: TRUE
[17:00:36.846] - signal: TRUE
[17:00:36.847] - resignal: FALSE
[17:00:36.847] - force: TRUE
[17:00:36.847] - relayed: [n=2] TRUE, TRUE
[17:00:36.847] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:00:36.847] - relayed: [n=2] TRUE, TRUE
[17:00:36.847] - queued futures: [n=2] TRUE, TRUE
[17:00:36.847] signalConditionsASAP(NULL, pos=0) ... done
[17:00:36.847] resolve() on list ... DONE
[17:00:36.847] result() for MulticoreFuture ...
[17:00:36.848] result() for MulticoreFuture ... done
[17:00:36.848] result() for MulticoreFuture ...
[17:00:36.848] result() for MulticoreFuture ... done
[17:00:36.848] result() for MulticoreFuture ...
[17:00:36.848] result() for MulticoreFuture ... done
[17:00:36.848] result() for MulticoreFuture ...
[17:00:36.848] result() for MulticoreFuture ... done
[17:00:36.848]  - Number of value chunks collected: 2
[17:00:36.849] Resolving 2 futures (chunks) ... DONE
[17:00:36.849] Reducing values from 2 chunks ...
[17:00:36.849]  - Number of values collected after concatenation: 5
[17:00:36.849]  - Number of values expected: 5
[17:00:36.849] Reducing values from 2 chunks ... DONE
[17:00:36.849] future_lapply() ... DONE
[17:00:36.850] plan(): Setting new future strategy stack:
[17:00:36.850] List of future strategies:
[17:00:36.850] 1. sequential:
[17:00:36.850]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:36.850]    - tweaked: FALSE
[17:00:36.850]    - call: plan(sequential)
[17:00:36.850] plan(): nbrOfWorkers() = 1
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[17:00:36.851] plan(): Setting new future strategy stack:
[17:00:36.851] List of future strategies:
[17:00:36.851] 1. multisession:
[17:00:36.851]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:00:36.851]    - tweaked: FALSE
[17:00:36.851]    - call: plan(strategy)
[17:00:36.851] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:00:36.852] multisession:
[17:00:36.852] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:00:36.852] - tweaked: FALSE
[17:00:36.852] - call: plan(strategy)
[17:00:36.858] getGlobalsAndPackages() ...
[17:00:36.858] Not searching for globals
[17:00:36.859] - globals: [0] <none>
[17:00:36.859] getGlobalsAndPackages() ... DONE
[17:00:36.859] [local output] makeClusterPSOCK() ...
[17:00:36.906] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:00:36.907] [local output] Base port: 11730
[17:00:36.907] [local output] Getting setup options for 2 cluster nodes ...
[17:00:36.907] [local output]  - Node 1 of 2 ...
[17:00:36.908] [local output] localMachine=TRUE => revtunnel=FALSE

[17:00:36.908] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp7B74IQ/worker.rank=1.parallelly.parent=34983.88a718bfc584.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp7B74IQ/worker.rank=1.parallelly.parent=34983.88a718bfc584.pid")'’
[17:00:37.103] - Possible to infer worker's PID: TRUE
[17:00:37.103] [local output] Rscript port: 11730

[17:00:37.103] [local output]  - Node 2 of 2 ...
[17:00:37.104] [local output] localMachine=TRUE => revtunnel=FALSE

[17:00:37.104] [local output] Rscript port: 11730

[17:00:37.105] [local output] Getting setup options for 2 cluster nodes ... done
[17:00:37.105] [local output]  - Parallel setup requested for some PSOCK nodes
[17:00:37.105] [local output] Setting up PSOCK nodes in parallel
[17:00:37.105] List of 36
[17:00:37.105]  $ worker          : chr "localhost"
[17:00:37.105]   ..- attr(*, "localhost")= logi TRUE
[17:00:37.105]  $ master          : chr "localhost"
[17:00:37.105]  $ port            : int 11730
[17:00:37.105]  $ connectTimeout  : num 120
[17:00:37.105]  $ timeout         : num 2592000
[17:00:37.105]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:00:37.105]  $ homogeneous     : logi TRUE
[17:00:37.105]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:00:37.105]  $ rscript_envs    : NULL
[17:00:37.105]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:00:37.105]  $ rscript_startup : NULL
[17:00:37.105]  $ rscript_sh      : chr "sh"
[17:00:37.105]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:00:37.105]  $ methods         : logi TRUE
[17:00:37.105]  $ socketOptions   : chr "no-delay"
[17:00:37.105]  $ useXDR          : logi FALSE
[17:00:37.105]  $ outfile         : chr "/dev/null"
[17:00:37.105]  $ renice          : int NA
[17:00:37.105]  $ rshcmd          : NULL
[17:00:37.105]  $ user            : chr(0) 
[17:00:37.105]  $ revtunnel       : logi FALSE
[17:00:37.105]  $ rshlogfile      : NULL
[17:00:37.105]  $ rshopts         : chr(0) 
[17:00:37.105]  $ rank            : int 1
[17:00:37.105]  $ manual          : logi FALSE
[17:00:37.105]  $ dryrun          : logi FALSE
[17:00:37.105]  $ quiet           : logi FALSE
[17:00:37.105]  $ setup_strategy  : chr "parallel"
[17:00:37.105]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:00:37.105]  $ pidfile         : chr "/tmp/Rtmp7B74IQ/worker.rank=1.parallelly.parent=34983.88a718bfc584.pid"
[17:00:37.105]  $ rshcmd_label    : NULL
[17:00:37.105]  $ rsh_call        : NULL
[17:00:37.105]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:00:37.105]  $ localMachine    : logi TRUE
[17:00:37.105]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:00:37.105]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:00:37.105]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:00:37.105]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:00:37.105]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:00:37.105]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:00:37.105]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:00:37.105]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:00:37.105]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:00:37.105]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:00:37.105]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:00:37.105]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:00:37.105]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:00:37.105]  $ arguments       :List of 28
[17:00:37.105]   ..$ worker          : chr "localhost"
[17:00:37.105]   ..$ master          : NULL
[17:00:37.105]   ..$ port            : int 11730
[17:00:37.105]   ..$ connectTimeout  : num 120
[17:00:37.105]   ..$ timeout         : num 2592000
[17:00:37.105]   ..$ rscript         : NULL
[17:00:37.105]   ..$ homogeneous     : NULL
[17:00:37.105]   ..$ rscript_args    : NULL
[17:00:37.105]   ..$ rscript_envs    : NULL
[17:00:37.105]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:00:37.105]   ..$ rscript_startup : NULL
[17:00:37.105]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:00:37.105]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:00:37.105]   ..$ methods         : logi TRUE
[17:00:37.105]   ..$ socketOptions   : chr "no-delay"
[17:00:37.105]   ..$ useXDR          : logi FALSE
[17:00:37.105]   ..$ outfile         : chr "/dev/null"
[17:00:37.105]   ..$ renice          : int NA
[17:00:37.105]   ..$ rshcmd          : NULL
[17:00:37.105]   ..$ user            : NULL
[17:00:37.105]   ..$ revtunnel       : logi NA
[17:00:37.105]   ..$ rshlogfile      : NULL
[17:00:37.105]   ..$ rshopts         : NULL
[17:00:37.105]   ..$ rank            : int 1
[17:00:37.105]   ..$ manual          : logi FALSE
[17:00:37.105]   ..$ dryrun          : logi FALSE
[17:00:37.105]   ..$ quiet           : logi FALSE
[17:00:37.105]   ..$ setup_strategy  : chr "parallel"
[17:00:37.105]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:00:37.122] [local output] System call to launch all workers:
[17:00:37.122] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp7B74IQ/worker.rank=1.parallelly.parent=34983.88a718bfc584.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11730 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:00:37.122] [local output] Starting PSOCK main server
[17:00:37.128] [local output] Workers launched
[17:00:37.128] [local output] Waiting for workers to connect back
[17:00:37.128]  - [local output] 0 workers out of 2 ready
[17:00:37.381]  - [local output] 0 workers out of 2 ready
[17:00:37.381]  - [local output] 1 workers out of 2 ready
[17:00:37.389]  - [local output] 1 workers out of 2 ready
[17:00:37.389]  - [local output] 2 workers out of 2 ready
[17:00:37.389] [local output] Launching of workers completed
[17:00:37.389] [local output] Collecting session information from workers
[17:00:37.390] [local output]  - Worker #1 of 2
[17:00:37.391] [local output]  - Worker #2 of 2
[17:00:37.391] [local output] makeClusterPSOCK() ... done
[17:00:37.402] Packages needed by the future expression (n = 0): <none>
[17:00:37.402] Packages needed by future strategies (n = 0): <none>
[17:00:37.402] {
[17:00:37.402]     {
[17:00:37.402]         {
[17:00:37.402]             ...future.startTime <- base::Sys.time()
[17:00:37.402]             {
[17:00:37.402]                 {
[17:00:37.402]                   {
[17:00:37.402]                     {
[17:00:37.402]                       base::local({
[17:00:37.402]                         has_future <- base::requireNamespace("future", 
[17:00:37.402]                           quietly = TRUE)
[17:00:37.402]                         if (has_future) {
[17:00:37.402]                           ns <- base::getNamespace("future")
[17:00:37.402]                           version <- ns[[".package"]][["version"]]
[17:00:37.402]                           if (is.null(version)) 
[17:00:37.402]                             version <- utils::packageVersion("future")
[17:00:37.402]                         }
[17:00:37.402]                         else {
[17:00:37.402]                           version <- NULL
[17:00:37.402]                         }
[17:00:37.402]                         if (!has_future || version < "1.8.0") {
[17:00:37.402]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:37.402]                             "", base::R.version$version.string), 
[17:00:37.402]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:37.402]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:37.402]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:37.402]                               "release", "version")], collapse = " "), 
[17:00:37.402]                             hostname = base::Sys.info()[["nodename"]])
[17:00:37.402]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:37.402]                             info)
[17:00:37.402]                           info <- base::paste(info, collapse = "; ")
[17:00:37.402]                           if (!has_future) {
[17:00:37.402]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:37.402]                               info)
[17:00:37.402]                           }
[17:00:37.402]                           else {
[17:00:37.402]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:37.402]                               info, version)
[17:00:37.402]                           }
[17:00:37.402]                           base::stop(msg)
[17:00:37.402]                         }
[17:00:37.402]                       })
[17:00:37.402]                     }
[17:00:37.402]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:37.402]                     base::options(mc.cores = 1L)
[17:00:37.402]                   }
[17:00:37.402]                   ...future.strategy.old <- future::plan("list")
[17:00:37.402]                   options(future.plan = NULL)
[17:00:37.402]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:37.402]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:37.402]                 }
[17:00:37.402]                 ...future.workdir <- getwd()
[17:00:37.402]             }
[17:00:37.402]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:37.402]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:37.402]         }
[17:00:37.402]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:37.402]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:00:37.402]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:37.402]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:37.402]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:37.402]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:37.402]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:37.402]             base::names(...future.oldOptions))
[17:00:37.402]     }
[17:00:37.402]     if (FALSE) {
[17:00:37.402]     }
[17:00:37.402]     else {
[17:00:37.402]         if (TRUE) {
[17:00:37.402]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:37.402]                 open = "w")
[17:00:37.402]         }
[17:00:37.402]         else {
[17:00:37.402]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:37.402]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:37.402]         }
[17:00:37.402]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:37.402]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:37.402]             base::sink(type = "output", split = FALSE)
[17:00:37.402]             base::close(...future.stdout)
[17:00:37.402]         }, add = TRUE)
[17:00:37.402]     }
[17:00:37.402]     ...future.frame <- base::sys.nframe()
[17:00:37.402]     ...future.conditions <- base::list()
[17:00:37.402]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:37.402]     if (FALSE) {
[17:00:37.402]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:37.402]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:37.402]     }
[17:00:37.402]     ...future.result <- base::tryCatch({
[17:00:37.402]         base::withCallingHandlers({
[17:00:37.402]             ...future.value <- base::withVisible(base::local({
[17:00:37.402]                 ...future.makeSendCondition <- base::local({
[17:00:37.402]                   sendCondition <- NULL
[17:00:37.402]                   function(frame = 1L) {
[17:00:37.402]                     if (is.function(sendCondition)) 
[17:00:37.402]                       return(sendCondition)
[17:00:37.402]                     ns <- getNamespace("parallel")
[17:00:37.402]                     if (exists("sendData", mode = "function", 
[17:00:37.402]                       envir = ns)) {
[17:00:37.402]                       parallel_sendData <- get("sendData", mode = "function", 
[17:00:37.402]                         envir = ns)
[17:00:37.402]                       envir <- sys.frame(frame)
[17:00:37.402]                       master <- NULL
[17:00:37.402]                       while (!identical(envir, .GlobalEnv) && 
[17:00:37.402]                         !identical(envir, emptyenv())) {
[17:00:37.402]                         if (exists("master", mode = "list", envir = envir, 
[17:00:37.402]                           inherits = FALSE)) {
[17:00:37.402]                           master <- get("master", mode = "list", 
[17:00:37.402]                             envir = envir, inherits = FALSE)
[17:00:37.402]                           if (inherits(master, c("SOCKnode", 
[17:00:37.402]                             "SOCK0node"))) {
[17:00:37.402]                             sendCondition <<- function(cond) {
[17:00:37.402]                               data <- list(type = "VALUE", value = cond, 
[17:00:37.402]                                 success = TRUE)
[17:00:37.402]                               parallel_sendData(master, data)
[17:00:37.402]                             }
[17:00:37.402]                             return(sendCondition)
[17:00:37.402]                           }
[17:00:37.402]                         }
[17:00:37.402]                         frame <- frame + 1L
[17:00:37.402]                         envir <- sys.frame(frame)
[17:00:37.402]                       }
[17:00:37.402]                     }
[17:00:37.402]                     sendCondition <<- function(cond) NULL
[17:00:37.402]                   }
[17:00:37.402]                 })
[17:00:37.402]                 withCallingHandlers({
[17:00:37.402]                   NA
[17:00:37.402]                 }, immediateCondition = function(cond) {
[17:00:37.402]                   sendCondition <- ...future.makeSendCondition()
[17:00:37.402]                   sendCondition(cond)
[17:00:37.402]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:37.402]                   {
[17:00:37.402]                     inherits <- base::inherits
[17:00:37.402]                     invokeRestart <- base::invokeRestart
[17:00:37.402]                     is.null <- base::is.null
[17:00:37.402]                     muffled <- FALSE
[17:00:37.402]                     if (inherits(cond, "message")) {
[17:00:37.402]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:37.402]                       if (muffled) 
[17:00:37.402]                         invokeRestart("muffleMessage")
[17:00:37.402]                     }
[17:00:37.402]                     else if (inherits(cond, "warning")) {
[17:00:37.402]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:37.402]                       if (muffled) 
[17:00:37.402]                         invokeRestart("muffleWarning")
[17:00:37.402]                     }
[17:00:37.402]                     else if (inherits(cond, "condition")) {
[17:00:37.402]                       if (!is.null(pattern)) {
[17:00:37.402]                         computeRestarts <- base::computeRestarts
[17:00:37.402]                         grepl <- base::grepl
[17:00:37.402]                         restarts <- computeRestarts(cond)
[17:00:37.402]                         for (restart in restarts) {
[17:00:37.402]                           name <- restart$name
[17:00:37.402]                           if (is.null(name)) 
[17:00:37.402]                             next
[17:00:37.402]                           if (!grepl(pattern, name)) 
[17:00:37.402]                             next
[17:00:37.402]                           invokeRestart(restart)
[17:00:37.402]                           muffled <- TRUE
[17:00:37.402]                           break
[17:00:37.402]                         }
[17:00:37.402]                       }
[17:00:37.402]                     }
[17:00:37.402]                     invisible(muffled)
[17:00:37.402]                   }
[17:00:37.402]                   muffleCondition(cond)
[17:00:37.402]                 })
[17:00:37.402]             }))
[17:00:37.402]             future::FutureResult(value = ...future.value$value, 
[17:00:37.402]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:37.402]                   ...future.rng), globalenv = if (FALSE) 
[17:00:37.402]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:37.402]                     ...future.globalenv.names))
[17:00:37.402]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:37.402]         }, condition = base::local({
[17:00:37.402]             c <- base::c
[17:00:37.402]             inherits <- base::inherits
[17:00:37.402]             invokeRestart <- base::invokeRestart
[17:00:37.402]             length <- base::length
[17:00:37.402]             list <- base::list
[17:00:37.402]             seq.int <- base::seq.int
[17:00:37.402]             signalCondition <- base::signalCondition
[17:00:37.402]             sys.calls <- base::sys.calls
[17:00:37.402]             `[[` <- base::`[[`
[17:00:37.402]             `+` <- base::`+`
[17:00:37.402]             `<<-` <- base::`<<-`
[17:00:37.402]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:37.402]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:37.402]                   3L)]
[17:00:37.402]             }
[17:00:37.402]             function(cond) {
[17:00:37.402]                 is_error <- inherits(cond, "error")
[17:00:37.402]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:37.402]                   NULL)
[17:00:37.402]                 if (is_error) {
[17:00:37.402]                   sessionInformation <- function() {
[17:00:37.402]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:37.402]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:37.402]                       search = base::search(), system = base::Sys.info())
[17:00:37.402]                   }
[17:00:37.402]                   ...future.conditions[[length(...future.conditions) + 
[17:00:37.402]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:37.402]                     cond$call), session = sessionInformation(), 
[17:00:37.402]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:37.402]                   signalCondition(cond)
[17:00:37.402]                 }
[17:00:37.402]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:37.402]                 "immediateCondition"))) {
[17:00:37.402]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:37.402]                   ...future.conditions[[length(...future.conditions) + 
[17:00:37.402]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:37.402]                   if (TRUE && !signal) {
[17:00:37.402]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:37.402]                     {
[17:00:37.402]                       inherits <- base::inherits
[17:00:37.402]                       invokeRestart <- base::invokeRestart
[17:00:37.402]                       is.null <- base::is.null
[17:00:37.402]                       muffled <- FALSE
[17:00:37.402]                       if (inherits(cond, "message")) {
[17:00:37.402]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:37.402]                         if (muffled) 
[17:00:37.402]                           invokeRestart("muffleMessage")
[17:00:37.402]                       }
[17:00:37.402]                       else if (inherits(cond, "warning")) {
[17:00:37.402]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:37.402]                         if (muffled) 
[17:00:37.402]                           invokeRestart("muffleWarning")
[17:00:37.402]                       }
[17:00:37.402]                       else if (inherits(cond, "condition")) {
[17:00:37.402]                         if (!is.null(pattern)) {
[17:00:37.402]                           computeRestarts <- base::computeRestarts
[17:00:37.402]                           grepl <- base::grepl
[17:00:37.402]                           restarts <- computeRestarts(cond)
[17:00:37.402]                           for (restart in restarts) {
[17:00:37.402]                             name <- restart$name
[17:00:37.402]                             if (is.null(name)) 
[17:00:37.402]                               next
[17:00:37.402]                             if (!grepl(pattern, name)) 
[17:00:37.402]                               next
[17:00:37.402]                             invokeRestart(restart)
[17:00:37.402]                             muffled <- TRUE
[17:00:37.402]                             break
[17:00:37.402]                           }
[17:00:37.402]                         }
[17:00:37.402]                       }
[17:00:37.402]                       invisible(muffled)
[17:00:37.402]                     }
[17:00:37.402]                     muffleCondition(cond, pattern = "^muffle")
[17:00:37.402]                   }
[17:00:37.402]                 }
[17:00:37.402]                 else {
[17:00:37.402]                   if (TRUE) {
[17:00:37.402]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:37.402]                     {
[17:00:37.402]                       inherits <- base::inherits
[17:00:37.402]                       invokeRestart <- base::invokeRestart
[17:00:37.402]                       is.null <- base::is.null
[17:00:37.402]                       muffled <- FALSE
[17:00:37.402]                       if (inherits(cond, "message")) {
[17:00:37.402]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:37.402]                         if (muffled) 
[17:00:37.402]                           invokeRestart("muffleMessage")
[17:00:37.402]                       }
[17:00:37.402]                       else if (inherits(cond, "warning")) {
[17:00:37.402]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:37.402]                         if (muffled) 
[17:00:37.402]                           invokeRestart("muffleWarning")
[17:00:37.402]                       }
[17:00:37.402]                       else if (inherits(cond, "condition")) {
[17:00:37.402]                         if (!is.null(pattern)) {
[17:00:37.402]                           computeRestarts <- base::computeRestarts
[17:00:37.402]                           grepl <- base::grepl
[17:00:37.402]                           restarts <- computeRestarts(cond)
[17:00:37.402]                           for (restart in restarts) {
[17:00:37.402]                             name <- restart$name
[17:00:37.402]                             if (is.null(name)) 
[17:00:37.402]                               next
[17:00:37.402]                             if (!grepl(pattern, name)) 
[17:00:37.402]                               next
[17:00:37.402]                             invokeRestart(restart)
[17:00:37.402]                             muffled <- TRUE
[17:00:37.402]                             break
[17:00:37.402]                           }
[17:00:37.402]                         }
[17:00:37.402]                       }
[17:00:37.402]                       invisible(muffled)
[17:00:37.402]                     }
[17:00:37.402]                     muffleCondition(cond, pattern = "^muffle")
[17:00:37.402]                   }
[17:00:37.402]                 }
[17:00:37.402]             }
[17:00:37.402]         }))
[17:00:37.402]     }, error = function(ex) {
[17:00:37.402]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:37.402]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:37.402]                 ...future.rng), started = ...future.startTime, 
[17:00:37.402]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:37.402]             version = "1.8"), class = "FutureResult")
[17:00:37.402]     }, finally = {
[17:00:37.402]         if (!identical(...future.workdir, getwd())) 
[17:00:37.402]             setwd(...future.workdir)
[17:00:37.402]         {
[17:00:37.402]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:37.402]                 ...future.oldOptions$nwarnings <- NULL
[17:00:37.402]             }
[17:00:37.402]             base::options(...future.oldOptions)
[17:00:37.402]             if (.Platform$OS.type == "windows") {
[17:00:37.402]                 old_names <- names(...future.oldEnvVars)
[17:00:37.402]                 envs <- base::Sys.getenv()
[17:00:37.402]                 names <- names(envs)
[17:00:37.402]                 common <- intersect(names, old_names)
[17:00:37.402]                 added <- setdiff(names, old_names)
[17:00:37.402]                 removed <- setdiff(old_names, names)
[17:00:37.402]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:37.402]                   envs[common]]
[17:00:37.402]                 NAMES <- toupper(changed)
[17:00:37.402]                 args <- list()
[17:00:37.402]                 for (kk in seq_along(NAMES)) {
[17:00:37.402]                   name <- changed[[kk]]
[17:00:37.402]                   NAME <- NAMES[[kk]]
[17:00:37.402]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:37.402]                     next
[17:00:37.402]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:37.402]                 }
[17:00:37.402]                 NAMES <- toupper(added)
[17:00:37.402]                 for (kk in seq_along(NAMES)) {
[17:00:37.402]                   name <- added[[kk]]
[17:00:37.402]                   NAME <- NAMES[[kk]]
[17:00:37.402]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:37.402]                     next
[17:00:37.402]                   args[[name]] <- ""
[17:00:37.402]                 }
[17:00:37.402]                 NAMES <- toupper(removed)
[17:00:37.402]                 for (kk in seq_along(NAMES)) {
[17:00:37.402]                   name <- removed[[kk]]
[17:00:37.402]                   NAME <- NAMES[[kk]]
[17:00:37.402]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:37.402]                     next
[17:00:37.402]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:37.402]                 }
[17:00:37.402]                 if (length(args) > 0) 
[17:00:37.402]                   base::do.call(base::Sys.setenv, args = args)
[17:00:37.402]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:37.402]             }
[17:00:37.402]             else {
[17:00:37.402]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:37.402]             }
[17:00:37.402]             {
[17:00:37.402]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:37.402]                   0L) {
[17:00:37.402]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:37.402]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:37.402]                   base::options(opts)
[17:00:37.402]                 }
[17:00:37.402]                 {
[17:00:37.402]                   {
[17:00:37.402]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:37.402]                     NULL
[17:00:37.402]                   }
[17:00:37.402]                   options(future.plan = NULL)
[17:00:37.402]                   if (is.na(NA_character_)) 
[17:00:37.402]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:37.402]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:37.402]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:37.402]                     .init = FALSE)
[17:00:37.402]                 }
[17:00:37.402]             }
[17:00:37.402]         }
[17:00:37.402]     })
[17:00:37.402]     if (TRUE) {
[17:00:37.402]         base::sink(type = "output", split = FALSE)
[17:00:37.402]         if (TRUE) {
[17:00:37.402]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:37.402]         }
[17:00:37.402]         else {
[17:00:37.402]             ...future.result["stdout"] <- base::list(NULL)
[17:00:37.402]         }
[17:00:37.402]         base::close(...future.stdout)
[17:00:37.402]         ...future.stdout <- NULL
[17:00:37.402]     }
[17:00:37.402]     ...future.result$conditions <- ...future.conditions
[17:00:37.402]     ...future.result$finished <- base::Sys.time()
[17:00:37.402]     ...future.result
[17:00:37.402] }
[17:00:37.456] MultisessionFuture started
[17:00:37.456] result() for ClusterFuture ...
[17:00:37.457] receiveMessageFromWorker() for ClusterFuture ...
[17:00:37.457] - Validating connection of MultisessionFuture
[17:00:37.489] - received message: FutureResult
[17:00:37.490] - Received FutureResult
[17:00:37.490] - Erased future from FutureRegistry
[17:00:37.490] result() for ClusterFuture ...
[17:00:37.490] - result already collected: FutureResult
[17:00:37.490] result() for ClusterFuture ... done
[17:00:37.490] receiveMessageFromWorker() for ClusterFuture ... done
[17:00:37.490] result() for ClusterFuture ... done
[17:00:37.491] result() for ClusterFuture ...
[17:00:37.491] - result already collected: FutureResult
[17:00:37.491] result() for ClusterFuture ... done
[17:00:37.491] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:00:37.495] plan(): nbrOfWorkers() = 2
[17:00:37.495] future_lapply() ...
[17:00:37.496] Generating random seeds ...
[17:00:37.496] Generating random seed streams for 5 elements ...
[17:00:37.496] Generating random seed streams for 5 elements ... DONE
[17:00:37.496] Generating random seeds ... DONE
[17:00:37.496] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:00:37.501] Number of chunks: 2
[17:00:37.501] getGlobalsAndPackagesXApply() ...
[17:00:37.501]  - future.globals: TRUE
[17:00:37.501] getGlobalsAndPackages() ...
[17:00:37.501] Searching for globals...
[17:00:37.502] - globals found: [2] ‘FUN’, ‘sample’
[17:00:37.503] Searching for globals ... DONE
[17:00:37.503] Resolving globals: FALSE
[17:00:37.503] The total size of the 1 globals is 616 bytes (616 bytes)
[17:00:37.504] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:00:37.504] - globals: [1] ‘FUN’
[17:00:37.504] 
[17:00:37.504] getGlobalsAndPackages() ... DONE
[17:00:37.504]  - globals found/used: [n=1] ‘FUN’
[17:00:37.504]  - needed namespaces: [n=0] 
[17:00:37.504] Finding globals ... DONE
[17:00:37.504]  - use_args: TRUE
[17:00:37.504]  - Getting '...' globals ...
[17:00:37.505] resolve() on list ...
[17:00:37.505]  recursive: 0
[17:00:37.505]  length: 1
[17:00:37.505]  elements: ‘...’
[17:00:37.505]  length: 0 (resolved future 1)
[17:00:37.505] resolve() on list ... DONE
[17:00:37.506]    - '...' content: [n=0] 
[17:00:37.506] List of 1
[17:00:37.506]  $ ...: list()
[17:00:37.506]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:37.506]  - attr(*, "where")=List of 1
[17:00:37.506]   ..$ ...:<environment: 0x55856428c070> 
[17:00:37.506]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:37.506]  - attr(*, "resolved")= logi TRUE
[17:00:37.506]  - attr(*, "total_size")= num NA
[17:00:37.509]  - Getting '...' globals ... DONE
[17:00:37.509] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:00:37.509] List of 2
[17:00:37.509]  $ ...future.FUN:function (...)  
[17:00:37.509]  $ ...          : list()
[17:00:37.509]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:37.509]  - attr(*, "where")=List of 2
[17:00:37.509]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:00:37.509]   ..$ ...          :<environment: 0x55856428c070> 
[17:00:37.509]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:37.509]  - attr(*, "resolved")= logi FALSE
[17:00:37.509]  - attr(*, "total_size")= num 616
[17:00:37.512] Packages to be attached in all futures: [n=0] 
[17:00:37.513] getGlobalsAndPackagesXApply() ... DONE
[17:00:37.513] Number of futures (= number of chunks): 2
[17:00:37.513] Launching 2 futures (chunks) ...
[17:00:37.513] Chunk #1 of 2 ...
[17:00:37.513]  - Finding globals in 'X' for chunk #1 ...
[17:00:37.513] getGlobalsAndPackages() ...
[17:00:37.513] Searching for globals...
[17:00:37.514] 
[17:00:37.514] Searching for globals ... DONE
[17:00:37.514] - globals: [0] <none>
[17:00:37.514] getGlobalsAndPackages() ... DONE
[17:00:37.514]    + additional globals found: [n=0] 
[17:00:37.514]    + additional namespaces needed: [n=0] 
[17:00:37.514]  - Finding globals in 'X' for chunk #1 ... DONE
[17:00:37.514]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:37.515]  - seeds: [2] <seeds>
[17:00:37.515]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:37.515] getGlobalsAndPackages() ...
[17:00:37.515] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:37.515] Resolving globals: FALSE
[17:00:37.515] Tweak future expression to call with '...' arguments ...
[17:00:37.515] {
[17:00:37.515]     do.call(function(...) {
[17:00:37.515]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:37.515]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:37.515]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:37.515]             on.exit(options(oopts), add = TRUE)
[17:00:37.515]         }
[17:00:37.515]         {
[17:00:37.515]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:37.515]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:37.515]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:37.515]                   envir = globalenv(), inherits = FALSE)
[17:00:37.515]                 ...future.FUN(...future.X_jj, ...)
[17:00:37.515]             })
[17:00:37.515]         }
[17:00:37.515]     }, args = future.call.arguments)
[17:00:37.515] }
[17:00:37.516] Tweak future expression to call with '...' arguments ... DONE
[17:00:37.516] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:37.516] 
[17:00:37.516] getGlobalsAndPackages() ... DONE
[17:00:37.517] run() for ‘Future’ ...
[17:00:37.517] - state: ‘created’
[17:00:37.517] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:00:37.532] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:37.532] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:00:37.532]   - Field: ‘node’
[17:00:37.532]   - Field: ‘label’
[17:00:37.532]   - Field: ‘local’
[17:00:37.532]   - Field: ‘owner’
[17:00:37.532]   - Field: ‘envir’
[17:00:37.532]   - Field: ‘workers’
[17:00:37.532]   - Field: ‘packages’
[17:00:37.533]   - Field: ‘gc’
[17:00:37.533]   - Field: ‘conditions’
[17:00:37.533]   - Field: ‘persistent’
[17:00:37.533]   - Field: ‘expr’
[17:00:37.533]   - Field: ‘uuid’
[17:00:37.533]   - Field: ‘seed’
[17:00:37.533]   - Field: ‘version’
[17:00:37.533]   - Field: ‘result’
[17:00:37.534]   - Field: ‘asynchronous’
[17:00:37.534]   - Field: ‘calls’
[17:00:37.534]   - Field: ‘globals’
[17:00:37.534]   - Field: ‘stdout’
[17:00:37.534]   - Field: ‘earlySignal’
[17:00:37.534]   - Field: ‘lazy’
[17:00:37.534]   - Field: ‘state’
[17:00:37.534] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:00:37.534] - Launch lazy future ...
[17:00:37.535] Packages needed by the future expression (n = 0): <none>
[17:00:37.535] Packages needed by future strategies (n = 0): <none>
[17:00:37.535] {
[17:00:37.535]     {
[17:00:37.535]         {
[17:00:37.535]             ...future.startTime <- base::Sys.time()
[17:00:37.535]             {
[17:00:37.535]                 {
[17:00:37.535]                   {
[17:00:37.535]                     {
[17:00:37.535]                       base::local({
[17:00:37.535]                         has_future <- base::requireNamespace("future", 
[17:00:37.535]                           quietly = TRUE)
[17:00:37.535]                         if (has_future) {
[17:00:37.535]                           ns <- base::getNamespace("future")
[17:00:37.535]                           version <- ns[[".package"]][["version"]]
[17:00:37.535]                           if (is.null(version)) 
[17:00:37.535]                             version <- utils::packageVersion("future")
[17:00:37.535]                         }
[17:00:37.535]                         else {
[17:00:37.535]                           version <- NULL
[17:00:37.535]                         }
[17:00:37.535]                         if (!has_future || version < "1.8.0") {
[17:00:37.535]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:37.535]                             "", base::R.version$version.string), 
[17:00:37.535]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:37.535]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:37.535]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:37.535]                               "release", "version")], collapse = " "), 
[17:00:37.535]                             hostname = base::Sys.info()[["nodename"]])
[17:00:37.535]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:37.535]                             info)
[17:00:37.535]                           info <- base::paste(info, collapse = "; ")
[17:00:37.535]                           if (!has_future) {
[17:00:37.535]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:37.535]                               info)
[17:00:37.535]                           }
[17:00:37.535]                           else {
[17:00:37.535]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:37.535]                               info, version)
[17:00:37.535]                           }
[17:00:37.535]                           base::stop(msg)
[17:00:37.535]                         }
[17:00:37.535]                       })
[17:00:37.535]                     }
[17:00:37.535]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:37.535]                     base::options(mc.cores = 1L)
[17:00:37.535]                   }
[17:00:37.535]                   ...future.strategy.old <- future::plan("list")
[17:00:37.535]                   options(future.plan = NULL)
[17:00:37.535]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:37.535]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:37.535]                 }
[17:00:37.535]                 ...future.workdir <- getwd()
[17:00:37.535]             }
[17:00:37.535]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:37.535]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:37.535]         }
[17:00:37.535]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:37.535]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:37.535]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:37.535]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:37.535]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:37.535]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:37.535]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:37.535]             base::names(...future.oldOptions))
[17:00:37.535]     }
[17:00:37.535]     if (FALSE) {
[17:00:37.535]     }
[17:00:37.535]     else {
[17:00:37.535]         if (TRUE) {
[17:00:37.535]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:37.535]                 open = "w")
[17:00:37.535]         }
[17:00:37.535]         else {
[17:00:37.535]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:37.535]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:37.535]         }
[17:00:37.535]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:37.535]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:37.535]             base::sink(type = "output", split = FALSE)
[17:00:37.535]             base::close(...future.stdout)
[17:00:37.535]         }, add = TRUE)
[17:00:37.535]     }
[17:00:37.535]     ...future.frame <- base::sys.nframe()
[17:00:37.535]     ...future.conditions <- base::list()
[17:00:37.535]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:37.535]     if (FALSE) {
[17:00:37.535]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:37.535]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:37.535]     }
[17:00:37.535]     ...future.result <- base::tryCatch({
[17:00:37.535]         base::withCallingHandlers({
[17:00:37.535]             ...future.value <- base::withVisible(base::local({
[17:00:37.535]                 ...future.makeSendCondition <- base::local({
[17:00:37.535]                   sendCondition <- NULL
[17:00:37.535]                   function(frame = 1L) {
[17:00:37.535]                     if (is.function(sendCondition)) 
[17:00:37.535]                       return(sendCondition)
[17:00:37.535]                     ns <- getNamespace("parallel")
[17:00:37.535]                     if (exists("sendData", mode = "function", 
[17:00:37.535]                       envir = ns)) {
[17:00:37.535]                       parallel_sendData <- get("sendData", mode = "function", 
[17:00:37.535]                         envir = ns)
[17:00:37.535]                       envir <- sys.frame(frame)
[17:00:37.535]                       master <- NULL
[17:00:37.535]                       while (!identical(envir, .GlobalEnv) && 
[17:00:37.535]                         !identical(envir, emptyenv())) {
[17:00:37.535]                         if (exists("master", mode = "list", envir = envir, 
[17:00:37.535]                           inherits = FALSE)) {
[17:00:37.535]                           master <- get("master", mode = "list", 
[17:00:37.535]                             envir = envir, inherits = FALSE)
[17:00:37.535]                           if (inherits(master, c("SOCKnode", 
[17:00:37.535]                             "SOCK0node"))) {
[17:00:37.535]                             sendCondition <<- function(cond) {
[17:00:37.535]                               data <- list(type = "VALUE", value = cond, 
[17:00:37.535]                                 success = TRUE)
[17:00:37.535]                               parallel_sendData(master, data)
[17:00:37.535]                             }
[17:00:37.535]                             return(sendCondition)
[17:00:37.535]                           }
[17:00:37.535]                         }
[17:00:37.535]                         frame <- frame + 1L
[17:00:37.535]                         envir <- sys.frame(frame)
[17:00:37.535]                       }
[17:00:37.535]                     }
[17:00:37.535]                     sendCondition <<- function(cond) NULL
[17:00:37.535]                   }
[17:00:37.535]                 })
[17:00:37.535]                 withCallingHandlers({
[17:00:37.535]                   {
[17:00:37.535]                     do.call(function(...) {
[17:00:37.535]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:37.535]                       if (!identical(...future.globals.maxSize.org, 
[17:00:37.535]                         ...future.globals.maxSize)) {
[17:00:37.535]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:37.535]                         on.exit(options(oopts), add = TRUE)
[17:00:37.535]                       }
[17:00:37.535]                       {
[17:00:37.535]                         lapply(seq_along(...future.elements_ii), 
[17:00:37.535]                           FUN = function(jj) {
[17:00:37.535]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:37.535]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:37.535]                               envir = globalenv(), inherits = FALSE)
[17:00:37.535]                             ...future.FUN(...future.X_jj, ...)
[17:00:37.535]                           })
[17:00:37.535]                       }
[17:00:37.535]                     }, args = future.call.arguments)
[17:00:37.535]                   }
[17:00:37.535]                 }, immediateCondition = function(cond) {
[17:00:37.535]                   sendCondition <- ...future.makeSendCondition()
[17:00:37.535]                   sendCondition(cond)
[17:00:37.535]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:37.535]                   {
[17:00:37.535]                     inherits <- base::inherits
[17:00:37.535]                     invokeRestart <- base::invokeRestart
[17:00:37.535]                     is.null <- base::is.null
[17:00:37.535]                     muffled <- FALSE
[17:00:37.535]                     if (inherits(cond, "message")) {
[17:00:37.535]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:37.535]                       if (muffled) 
[17:00:37.535]                         invokeRestart("muffleMessage")
[17:00:37.535]                     }
[17:00:37.535]                     else if (inherits(cond, "warning")) {
[17:00:37.535]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:37.535]                       if (muffled) 
[17:00:37.535]                         invokeRestart("muffleWarning")
[17:00:37.535]                     }
[17:00:37.535]                     else if (inherits(cond, "condition")) {
[17:00:37.535]                       if (!is.null(pattern)) {
[17:00:37.535]                         computeRestarts <- base::computeRestarts
[17:00:37.535]                         grepl <- base::grepl
[17:00:37.535]                         restarts <- computeRestarts(cond)
[17:00:37.535]                         for (restart in restarts) {
[17:00:37.535]                           name <- restart$name
[17:00:37.535]                           if (is.null(name)) 
[17:00:37.535]                             next
[17:00:37.535]                           if (!grepl(pattern, name)) 
[17:00:37.535]                             next
[17:00:37.535]                           invokeRestart(restart)
[17:00:37.535]                           muffled <- TRUE
[17:00:37.535]                           break
[17:00:37.535]                         }
[17:00:37.535]                       }
[17:00:37.535]                     }
[17:00:37.535]                     invisible(muffled)
[17:00:37.535]                   }
[17:00:37.535]                   muffleCondition(cond)
[17:00:37.535]                 })
[17:00:37.535]             }))
[17:00:37.535]             future::FutureResult(value = ...future.value$value, 
[17:00:37.535]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:37.535]                   ...future.rng), globalenv = if (FALSE) 
[17:00:37.535]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:37.535]                     ...future.globalenv.names))
[17:00:37.535]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:37.535]         }, condition = base::local({
[17:00:37.535]             c <- base::c
[17:00:37.535]             inherits <- base::inherits
[17:00:37.535]             invokeRestart <- base::invokeRestart
[17:00:37.535]             length <- base::length
[17:00:37.535]             list <- base::list
[17:00:37.535]             seq.int <- base::seq.int
[17:00:37.535]             signalCondition <- base::signalCondition
[17:00:37.535]             sys.calls <- base::sys.calls
[17:00:37.535]             `[[` <- base::`[[`
[17:00:37.535]             `+` <- base::`+`
[17:00:37.535]             `<<-` <- base::`<<-`
[17:00:37.535]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:37.535]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:37.535]                   3L)]
[17:00:37.535]             }
[17:00:37.535]             function(cond) {
[17:00:37.535]                 is_error <- inherits(cond, "error")
[17:00:37.535]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:37.535]                   NULL)
[17:00:37.535]                 if (is_error) {
[17:00:37.535]                   sessionInformation <- function() {
[17:00:37.535]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:37.535]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:37.535]                       search = base::search(), system = base::Sys.info())
[17:00:37.535]                   }
[17:00:37.535]                   ...future.conditions[[length(...future.conditions) + 
[17:00:37.535]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:37.535]                     cond$call), session = sessionInformation(), 
[17:00:37.535]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:37.535]                   signalCondition(cond)
[17:00:37.535]                 }
[17:00:37.535]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:37.535]                 "immediateCondition"))) {
[17:00:37.535]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:37.535]                   ...future.conditions[[length(...future.conditions) + 
[17:00:37.535]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:37.535]                   if (TRUE && !signal) {
[17:00:37.535]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:37.535]                     {
[17:00:37.535]                       inherits <- base::inherits
[17:00:37.535]                       invokeRestart <- base::invokeRestart
[17:00:37.535]                       is.null <- base::is.null
[17:00:37.535]                       muffled <- FALSE
[17:00:37.535]                       if (inherits(cond, "message")) {
[17:00:37.535]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:37.535]                         if (muffled) 
[17:00:37.535]                           invokeRestart("muffleMessage")
[17:00:37.535]                       }
[17:00:37.535]                       else if (inherits(cond, "warning")) {
[17:00:37.535]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:37.535]                         if (muffled) 
[17:00:37.535]                           invokeRestart("muffleWarning")
[17:00:37.535]                       }
[17:00:37.535]                       else if (inherits(cond, "condition")) {
[17:00:37.535]                         if (!is.null(pattern)) {
[17:00:37.535]                           computeRestarts <- base::computeRestarts
[17:00:37.535]                           grepl <- base::grepl
[17:00:37.535]                           restarts <- computeRestarts(cond)
[17:00:37.535]                           for (restart in restarts) {
[17:00:37.535]                             name <- restart$name
[17:00:37.535]                             if (is.null(name)) 
[17:00:37.535]                               next
[17:00:37.535]                             if (!grepl(pattern, name)) 
[17:00:37.535]                               next
[17:00:37.535]                             invokeRestart(restart)
[17:00:37.535]                             muffled <- TRUE
[17:00:37.535]                             break
[17:00:37.535]                           }
[17:00:37.535]                         }
[17:00:37.535]                       }
[17:00:37.535]                       invisible(muffled)
[17:00:37.535]                     }
[17:00:37.535]                     muffleCondition(cond, pattern = "^muffle")
[17:00:37.535]                   }
[17:00:37.535]                 }
[17:00:37.535]                 else {
[17:00:37.535]                   if (TRUE) {
[17:00:37.535]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:37.535]                     {
[17:00:37.535]                       inherits <- base::inherits
[17:00:37.535]                       invokeRestart <- base::invokeRestart
[17:00:37.535]                       is.null <- base::is.null
[17:00:37.535]                       muffled <- FALSE
[17:00:37.535]                       if (inherits(cond, "message")) {
[17:00:37.535]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:37.535]                         if (muffled) 
[17:00:37.535]                           invokeRestart("muffleMessage")
[17:00:37.535]                       }
[17:00:37.535]                       else if (inherits(cond, "warning")) {
[17:00:37.535]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:37.535]                         if (muffled) 
[17:00:37.535]                           invokeRestart("muffleWarning")
[17:00:37.535]                       }
[17:00:37.535]                       else if (inherits(cond, "condition")) {
[17:00:37.535]                         if (!is.null(pattern)) {
[17:00:37.535]                           computeRestarts <- base::computeRestarts
[17:00:37.535]                           grepl <- base::grepl
[17:00:37.535]                           restarts <- computeRestarts(cond)
[17:00:37.535]                           for (restart in restarts) {
[17:00:37.535]                             name <- restart$name
[17:00:37.535]                             if (is.null(name)) 
[17:00:37.535]                               next
[17:00:37.535]                             if (!grepl(pattern, name)) 
[17:00:37.535]                               next
[17:00:37.535]                             invokeRestart(restart)
[17:00:37.535]                             muffled <- TRUE
[17:00:37.535]                             break
[17:00:37.535]                           }
[17:00:37.535]                         }
[17:00:37.535]                       }
[17:00:37.535]                       invisible(muffled)
[17:00:37.535]                     }
[17:00:37.535]                     muffleCondition(cond, pattern = "^muffle")
[17:00:37.535]                   }
[17:00:37.535]                 }
[17:00:37.535]             }
[17:00:37.535]         }))
[17:00:37.535]     }, error = function(ex) {
[17:00:37.535]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:37.535]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:37.535]                 ...future.rng), started = ...future.startTime, 
[17:00:37.535]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:37.535]             version = "1.8"), class = "FutureResult")
[17:00:37.535]     }, finally = {
[17:00:37.535]         if (!identical(...future.workdir, getwd())) 
[17:00:37.535]             setwd(...future.workdir)
[17:00:37.535]         {
[17:00:37.535]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:37.535]                 ...future.oldOptions$nwarnings <- NULL
[17:00:37.535]             }
[17:00:37.535]             base::options(...future.oldOptions)
[17:00:37.535]             if (.Platform$OS.type == "windows") {
[17:00:37.535]                 old_names <- names(...future.oldEnvVars)
[17:00:37.535]                 envs <- base::Sys.getenv()
[17:00:37.535]                 names <- names(envs)
[17:00:37.535]                 common <- intersect(names, old_names)
[17:00:37.535]                 added <- setdiff(names, old_names)
[17:00:37.535]                 removed <- setdiff(old_names, names)
[17:00:37.535]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:37.535]                   envs[common]]
[17:00:37.535]                 NAMES <- toupper(changed)
[17:00:37.535]                 args <- list()
[17:00:37.535]                 for (kk in seq_along(NAMES)) {
[17:00:37.535]                   name <- changed[[kk]]
[17:00:37.535]                   NAME <- NAMES[[kk]]
[17:00:37.535]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:37.535]                     next
[17:00:37.535]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:37.535]                 }
[17:00:37.535]                 NAMES <- toupper(added)
[17:00:37.535]                 for (kk in seq_along(NAMES)) {
[17:00:37.535]                   name <- added[[kk]]
[17:00:37.535]                   NAME <- NAMES[[kk]]
[17:00:37.535]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:37.535]                     next
[17:00:37.535]                   args[[name]] <- ""
[17:00:37.535]                 }
[17:00:37.535]                 NAMES <- toupper(removed)
[17:00:37.535]                 for (kk in seq_along(NAMES)) {
[17:00:37.535]                   name <- removed[[kk]]
[17:00:37.535]                   NAME <- NAMES[[kk]]
[17:00:37.535]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:37.535]                     next
[17:00:37.535]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:37.535]                 }
[17:00:37.535]                 if (length(args) > 0) 
[17:00:37.535]                   base::do.call(base::Sys.setenv, args = args)
[17:00:37.535]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:37.535]             }
[17:00:37.535]             else {
[17:00:37.535]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:37.535]             }
[17:00:37.535]             {
[17:00:37.535]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:37.535]                   0L) {
[17:00:37.535]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:37.535]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:37.535]                   base::options(opts)
[17:00:37.535]                 }
[17:00:37.535]                 {
[17:00:37.535]                   {
[17:00:37.535]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:37.535]                     NULL
[17:00:37.535]                   }
[17:00:37.535]                   options(future.plan = NULL)
[17:00:37.535]                   if (is.na(NA_character_)) 
[17:00:37.535]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:37.535]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:37.535]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:37.535]                     .init = FALSE)
[17:00:37.535]                 }
[17:00:37.535]             }
[17:00:37.535]         }
[17:00:37.535]     })
[17:00:37.535]     if (TRUE) {
[17:00:37.535]         base::sink(type = "output", split = FALSE)
[17:00:37.535]         if (TRUE) {
[17:00:37.535]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:37.535]         }
[17:00:37.535]         else {
[17:00:37.535]             ...future.result["stdout"] <- base::list(NULL)
[17:00:37.535]         }
[17:00:37.535]         base::close(...future.stdout)
[17:00:37.535]         ...future.stdout <- NULL
[17:00:37.535]     }
[17:00:37.535]     ...future.result$conditions <- ...future.conditions
[17:00:37.535]     ...future.result$finished <- base::Sys.time()
[17:00:37.535]     ...future.result
[17:00:37.535] }
[17:00:37.539] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[17:00:37.539] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[17:00:37.539] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[17:00:37.540] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:00:37.540] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:00:37.540] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:00:37.541] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:00:37.541] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:00:37.541] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:00:37.541] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:00:37.542] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:00:37.542] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[17:00:37.542] MultisessionFuture started
[17:00:37.542] - Launch lazy future ... done
[17:00:37.542] run() for ‘MultisessionFuture’ ... done
[17:00:37.543] Created future:
[17:00:37.543] MultisessionFuture:
[17:00:37.543] Label: ‘future_replicate-1’
[17:00:37.543] Expression:
[17:00:37.543] {
[17:00:37.543]     do.call(function(...) {
[17:00:37.543]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:37.543]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:37.543]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:37.543]             on.exit(options(oopts), add = TRUE)
[17:00:37.543]         }
[17:00:37.543]         {
[17:00:37.543]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:37.543]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:37.543]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:37.543]                   envir = globalenv(), inherits = FALSE)
[17:00:37.543]                 ...future.FUN(...future.X_jj, ...)
[17:00:37.543]             })
[17:00:37.543]         }
[17:00:37.543]     }, args = future.call.arguments)
[17:00:37.543] }
[17:00:37.543] Lazy evaluation: FALSE
[17:00:37.543] Asynchronous evaluation: TRUE
[17:00:37.543] Local evaluation: TRUE
[17:00:37.543] Environment: R_GlobalEnv
[17:00:37.543] Capture standard output: TRUE
[17:00:37.543] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:37.543] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:37.543] Packages: <none>
[17:00:37.543] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:37.543] Resolved: FALSE
[17:00:37.543] Value: <not collected>
[17:00:37.543] Conditions captured: <none>
[17:00:37.543] Early signaling: FALSE
[17:00:37.543] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:37.543] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:37.555] Chunk #1 of 2 ... DONE
[17:00:37.555] Chunk #2 of 2 ...
[17:00:37.555]  - Finding globals in 'X' for chunk #2 ...
[17:00:37.555] getGlobalsAndPackages() ...
[17:00:37.555] Searching for globals...
[17:00:37.556] 
[17:00:37.556] Searching for globals ... DONE
[17:00:37.556] - globals: [0] <none>
[17:00:37.556] getGlobalsAndPackages() ... DONE
[17:00:37.556]    + additional globals found: [n=0] 
[17:00:37.556]    + additional namespaces needed: [n=0] 
[17:00:37.556]  - Finding globals in 'X' for chunk #2 ... DONE
[17:00:37.557]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:37.557]  - seeds: [3] <seeds>
[17:00:37.557]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:37.557] getGlobalsAndPackages() ...
[17:00:37.557] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:37.557] Resolving globals: FALSE
[17:00:37.557] Tweak future expression to call with '...' arguments ...
[17:00:37.557] {
[17:00:37.557]     do.call(function(...) {
[17:00:37.557]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:37.557]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:37.557]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:37.557]             on.exit(options(oopts), add = TRUE)
[17:00:37.557]         }
[17:00:37.557]         {
[17:00:37.557]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:37.557]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:37.557]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:37.557]                   envir = globalenv(), inherits = FALSE)
[17:00:37.557]                 ...future.FUN(...future.X_jj, ...)
[17:00:37.557]             })
[17:00:37.557]         }
[17:00:37.557]     }, args = future.call.arguments)
[17:00:37.557] }
[17:00:37.558] Tweak future expression to call with '...' arguments ... DONE
[17:00:37.558] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:37.558] 
[17:00:37.558] getGlobalsAndPackages() ... DONE
[17:00:37.559] run() for ‘Future’ ...
[17:00:37.559] - state: ‘created’
[17:00:37.559] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:00:37.574] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:37.574] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:00:37.574]   - Field: ‘node’
[17:00:37.574]   - Field: ‘label’
[17:00:37.574]   - Field: ‘local’
[17:00:37.574]   - Field: ‘owner’
[17:00:37.575]   - Field: ‘envir’
[17:00:37.575]   - Field: ‘workers’
[17:00:37.575]   - Field: ‘packages’
[17:00:37.575]   - Field: ‘gc’
[17:00:37.575]   - Field: ‘conditions’
[17:00:37.575]   - Field: ‘persistent’
[17:00:37.575]   - Field: ‘expr’
[17:00:37.575]   - Field: ‘uuid’
[17:00:37.575]   - Field: ‘seed’
[17:00:37.576]   - Field: ‘version’
[17:00:37.576]   - Field: ‘result’
[17:00:37.576]   - Field: ‘asynchronous’
[17:00:37.576]   - Field: ‘calls’
[17:00:37.576]   - Field: ‘globals’
[17:00:37.576]   - Field: ‘stdout’
[17:00:37.576]   - Field: ‘earlySignal’
[17:00:37.576]   - Field: ‘lazy’
[17:00:37.577]   - Field: ‘state’
[17:00:37.577] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:00:37.577] - Launch lazy future ...
[17:00:37.577] Packages needed by the future expression (n = 0): <none>
[17:00:37.577] Packages needed by future strategies (n = 0): <none>
[17:00:37.578] {
[17:00:37.578]     {
[17:00:37.578]         {
[17:00:37.578]             ...future.startTime <- base::Sys.time()
[17:00:37.578]             {
[17:00:37.578]                 {
[17:00:37.578]                   {
[17:00:37.578]                     {
[17:00:37.578]                       base::local({
[17:00:37.578]                         has_future <- base::requireNamespace("future", 
[17:00:37.578]                           quietly = TRUE)
[17:00:37.578]                         if (has_future) {
[17:00:37.578]                           ns <- base::getNamespace("future")
[17:00:37.578]                           version <- ns[[".package"]][["version"]]
[17:00:37.578]                           if (is.null(version)) 
[17:00:37.578]                             version <- utils::packageVersion("future")
[17:00:37.578]                         }
[17:00:37.578]                         else {
[17:00:37.578]                           version <- NULL
[17:00:37.578]                         }
[17:00:37.578]                         if (!has_future || version < "1.8.0") {
[17:00:37.578]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:37.578]                             "", base::R.version$version.string), 
[17:00:37.578]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:37.578]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:37.578]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:37.578]                               "release", "version")], collapse = " "), 
[17:00:37.578]                             hostname = base::Sys.info()[["nodename"]])
[17:00:37.578]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:37.578]                             info)
[17:00:37.578]                           info <- base::paste(info, collapse = "; ")
[17:00:37.578]                           if (!has_future) {
[17:00:37.578]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:37.578]                               info)
[17:00:37.578]                           }
[17:00:37.578]                           else {
[17:00:37.578]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:37.578]                               info, version)
[17:00:37.578]                           }
[17:00:37.578]                           base::stop(msg)
[17:00:37.578]                         }
[17:00:37.578]                       })
[17:00:37.578]                     }
[17:00:37.578]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:37.578]                     base::options(mc.cores = 1L)
[17:00:37.578]                   }
[17:00:37.578]                   ...future.strategy.old <- future::plan("list")
[17:00:37.578]                   options(future.plan = NULL)
[17:00:37.578]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:37.578]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:37.578]                 }
[17:00:37.578]                 ...future.workdir <- getwd()
[17:00:37.578]             }
[17:00:37.578]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:37.578]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:37.578]         }
[17:00:37.578]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:37.578]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:37.578]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:37.578]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:37.578]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:37.578]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:37.578]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:37.578]             base::names(...future.oldOptions))
[17:00:37.578]     }
[17:00:37.578]     if (FALSE) {
[17:00:37.578]     }
[17:00:37.578]     else {
[17:00:37.578]         if (TRUE) {
[17:00:37.578]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:37.578]                 open = "w")
[17:00:37.578]         }
[17:00:37.578]         else {
[17:00:37.578]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:37.578]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:37.578]         }
[17:00:37.578]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:37.578]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:37.578]             base::sink(type = "output", split = FALSE)
[17:00:37.578]             base::close(...future.stdout)
[17:00:37.578]         }, add = TRUE)
[17:00:37.578]     }
[17:00:37.578]     ...future.frame <- base::sys.nframe()
[17:00:37.578]     ...future.conditions <- base::list()
[17:00:37.578]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:37.578]     if (FALSE) {
[17:00:37.578]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:37.578]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:37.578]     }
[17:00:37.578]     ...future.result <- base::tryCatch({
[17:00:37.578]         base::withCallingHandlers({
[17:00:37.578]             ...future.value <- base::withVisible(base::local({
[17:00:37.578]                 ...future.makeSendCondition <- base::local({
[17:00:37.578]                   sendCondition <- NULL
[17:00:37.578]                   function(frame = 1L) {
[17:00:37.578]                     if (is.function(sendCondition)) 
[17:00:37.578]                       return(sendCondition)
[17:00:37.578]                     ns <- getNamespace("parallel")
[17:00:37.578]                     if (exists("sendData", mode = "function", 
[17:00:37.578]                       envir = ns)) {
[17:00:37.578]                       parallel_sendData <- get("sendData", mode = "function", 
[17:00:37.578]                         envir = ns)
[17:00:37.578]                       envir <- sys.frame(frame)
[17:00:37.578]                       master <- NULL
[17:00:37.578]                       while (!identical(envir, .GlobalEnv) && 
[17:00:37.578]                         !identical(envir, emptyenv())) {
[17:00:37.578]                         if (exists("master", mode = "list", envir = envir, 
[17:00:37.578]                           inherits = FALSE)) {
[17:00:37.578]                           master <- get("master", mode = "list", 
[17:00:37.578]                             envir = envir, inherits = FALSE)
[17:00:37.578]                           if (inherits(master, c("SOCKnode", 
[17:00:37.578]                             "SOCK0node"))) {
[17:00:37.578]                             sendCondition <<- function(cond) {
[17:00:37.578]                               data <- list(type = "VALUE", value = cond, 
[17:00:37.578]                                 success = TRUE)
[17:00:37.578]                               parallel_sendData(master, data)
[17:00:37.578]                             }
[17:00:37.578]                             return(sendCondition)
[17:00:37.578]                           }
[17:00:37.578]                         }
[17:00:37.578]                         frame <- frame + 1L
[17:00:37.578]                         envir <- sys.frame(frame)
[17:00:37.578]                       }
[17:00:37.578]                     }
[17:00:37.578]                     sendCondition <<- function(cond) NULL
[17:00:37.578]                   }
[17:00:37.578]                 })
[17:00:37.578]                 withCallingHandlers({
[17:00:37.578]                   {
[17:00:37.578]                     do.call(function(...) {
[17:00:37.578]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:37.578]                       if (!identical(...future.globals.maxSize.org, 
[17:00:37.578]                         ...future.globals.maxSize)) {
[17:00:37.578]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:37.578]                         on.exit(options(oopts), add = TRUE)
[17:00:37.578]                       }
[17:00:37.578]                       {
[17:00:37.578]                         lapply(seq_along(...future.elements_ii), 
[17:00:37.578]                           FUN = function(jj) {
[17:00:37.578]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:37.578]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:37.578]                               envir = globalenv(), inherits = FALSE)
[17:00:37.578]                             ...future.FUN(...future.X_jj, ...)
[17:00:37.578]                           })
[17:00:37.578]                       }
[17:00:37.578]                     }, args = future.call.arguments)
[17:00:37.578]                   }
[17:00:37.578]                 }, immediateCondition = function(cond) {
[17:00:37.578]                   sendCondition <- ...future.makeSendCondition()
[17:00:37.578]                   sendCondition(cond)
[17:00:37.578]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:37.578]                   {
[17:00:37.578]                     inherits <- base::inherits
[17:00:37.578]                     invokeRestart <- base::invokeRestart
[17:00:37.578]                     is.null <- base::is.null
[17:00:37.578]                     muffled <- FALSE
[17:00:37.578]                     if (inherits(cond, "message")) {
[17:00:37.578]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:37.578]                       if (muffled) 
[17:00:37.578]                         invokeRestart("muffleMessage")
[17:00:37.578]                     }
[17:00:37.578]                     else if (inherits(cond, "warning")) {
[17:00:37.578]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:37.578]                       if (muffled) 
[17:00:37.578]                         invokeRestart("muffleWarning")
[17:00:37.578]                     }
[17:00:37.578]                     else if (inherits(cond, "condition")) {
[17:00:37.578]                       if (!is.null(pattern)) {
[17:00:37.578]                         computeRestarts <- base::computeRestarts
[17:00:37.578]                         grepl <- base::grepl
[17:00:37.578]                         restarts <- computeRestarts(cond)
[17:00:37.578]                         for (restart in restarts) {
[17:00:37.578]                           name <- restart$name
[17:00:37.578]                           if (is.null(name)) 
[17:00:37.578]                             next
[17:00:37.578]                           if (!grepl(pattern, name)) 
[17:00:37.578]                             next
[17:00:37.578]                           invokeRestart(restart)
[17:00:37.578]                           muffled <- TRUE
[17:00:37.578]                           break
[17:00:37.578]                         }
[17:00:37.578]                       }
[17:00:37.578]                     }
[17:00:37.578]                     invisible(muffled)
[17:00:37.578]                   }
[17:00:37.578]                   muffleCondition(cond)
[17:00:37.578]                 })
[17:00:37.578]             }))
[17:00:37.578]             future::FutureResult(value = ...future.value$value, 
[17:00:37.578]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:37.578]                   ...future.rng), globalenv = if (FALSE) 
[17:00:37.578]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:37.578]                     ...future.globalenv.names))
[17:00:37.578]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:37.578]         }, condition = base::local({
[17:00:37.578]             c <- base::c
[17:00:37.578]             inherits <- base::inherits
[17:00:37.578]             invokeRestart <- base::invokeRestart
[17:00:37.578]             length <- base::length
[17:00:37.578]             list <- base::list
[17:00:37.578]             seq.int <- base::seq.int
[17:00:37.578]             signalCondition <- base::signalCondition
[17:00:37.578]             sys.calls <- base::sys.calls
[17:00:37.578]             `[[` <- base::`[[`
[17:00:37.578]             `+` <- base::`+`
[17:00:37.578]             `<<-` <- base::`<<-`
[17:00:37.578]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:37.578]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:37.578]                   3L)]
[17:00:37.578]             }
[17:00:37.578]             function(cond) {
[17:00:37.578]                 is_error <- inherits(cond, "error")
[17:00:37.578]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:37.578]                   NULL)
[17:00:37.578]                 if (is_error) {
[17:00:37.578]                   sessionInformation <- function() {
[17:00:37.578]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:37.578]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:37.578]                       search = base::search(), system = base::Sys.info())
[17:00:37.578]                   }
[17:00:37.578]                   ...future.conditions[[length(...future.conditions) + 
[17:00:37.578]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:37.578]                     cond$call), session = sessionInformation(), 
[17:00:37.578]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:37.578]                   signalCondition(cond)
[17:00:37.578]                 }
[17:00:37.578]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:37.578]                 "immediateCondition"))) {
[17:00:37.578]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:37.578]                   ...future.conditions[[length(...future.conditions) + 
[17:00:37.578]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:37.578]                   if (TRUE && !signal) {
[17:00:37.578]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:37.578]                     {
[17:00:37.578]                       inherits <- base::inherits
[17:00:37.578]                       invokeRestart <- base::invokeRestart
[17:00:37.578]                       is.null <- base::is.null
[17:00:37.578]                       muffled <- FALSE
[17:00:37.578]                       if (inherits(cond, "message")) {
[17:00:37.578]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:37.578]                         if (muffled) 
[17:00:37.578]                           invokeRestart("muffleMessage")
[17:00:37.578]                       }
[17:00:37.578]                       else if (inherits(cond, "warning")) {
[17:00:37.578]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:37.578]                         if (muffled) 
[17:00:37.578]                           invokeRestart("muffleWarning")
[17:00:37.578]                       }
[17:00:37.578]                       else if (inherits(cond, "condition")) {
[17:00:37.578]                         if (!is.null(pattern)) {
[17:00:37.578]                           computeRestarts <- base::computeRestarts
[17:00:37.578]                           grepl <- base::grepl
[17:00:37.578]                           restarts <- computeRestarts(cond)
[17:00:37.578]                           for (restart in restarts) {
[17:00:37.578]                             name <- restart$name
[17:00:37.578]                             if (is.null(name)) 
[17:00:37.578]                               next
[17:00:37.578]                             if (!grepl(pattern, name)) 
[17:00:37.578]                               next
[17:00:37.578]                             invokeRestart(restart)
[17:00:37.578]                             muffled <- TRUE
[17:00:37.578]                             break
[17:00:37.578]                           }
[17:00:37.578]                         }
[17:00:37.578]                       }
[17:00:37.578]                       invisible(muffled)
[17:00:37.578]                     }
[17:00:37.578]                     muffleCondition(cond, pattern = "^muffle")
[17:00:37.578]                   }
[17:00:37.578]                 }
[17:00:37.578]                 else {
[17:00:37.578]                   if (TRUE) {
[17:00:37.578]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:37.578]                     {
[17:00:37.578]                       inherits <- base::inherits
[17:00:37.578]                       invokeRestart <- base::invokeRestart
[17:00:37.578]                       is.null <- base::is.null
[17:00:37.578]                       muffled <- FALSE
[17:00:37.578]                       if (inherits(cond, "message")) {
[17:00:37.578]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:37.578]                         if (muffled) 
[17:00:37.578]                           invokeRestart("muffleMessage")
[17:00:37.578]                       }
[17:00:37.578]                       else if (inherits(cond, "warning")) {
[17:00:37.578]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:37.578]                         if (muffled) 
[17:00:37.578]                           invokeRestart("muffleWarning")
[17:00:37.578]                       }
[17:00:37.578]                       else if (inherits(cond, "condition")) {
[17:00:37.578]                         if (!is.null(pattern)) {
[17:00:37.578]                           computeRestarts <- base::computeRestarts
[17:00:37.578]                           grepl <- base::grepl
[17:00:37.578]                           restarts <- computeRestarts(cond)
[17:00:37.578]                           for (restart in restarts) {
[17:00:37.578]                             name <- restart$name
[17:00:37.578]                             if (is.null(name)) 
[17:00:37.578]                               next
[17:00:37.578]                             if (!grepl(pattern, name)) 
[17:00:37.578]                               next
[17:00:37.578]                             invokeRestart(restart)
[17:00:37.578]                             muffled <- TRUE
[17:00:37.578]                             break
[17:00:37.578]                           }
[17:00:37.578]                         }
[17:00:37.578]                       }
[17:00:37.578]                       invisible(muffled)
[17:00:37.578]                     }
[17:00:37.578]                     muffleCondition(cond, pattern = "^muffle")
[17:00:37.578]                   }
[17:00:37.578]                 }
[17:00:37.578]             }
[17:00:37.578]         }))
[17:00:37.578]     }, error = function(ex) {
[17:00:37.578]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:37.578]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:37.578]                 ...future.rng), started = ...future.startTime, 
[17:00:37.578]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:37.578]             version = "1.8"), class = "FutureResult")
[17:00:37.578]     }, finally = {
[17:00:37.578]         if (!identical(...future.workdir, getwd())) 
[17:00:37.578]             setwd(...future.workdir)
[17:00:37.578]         {
[17:00:37.578]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:37.578]                 ...future.oldOptions$nwarnings <- NULL
[17:00:37.578]             }
[17:00:37.578]             base::options(...future.oldOptions)
[17:00:37.578]             if (.Platform$OS.type == "windows") {
[17:00:37.578]                 old_names <- names(...future.oldEnvVars)
[17:00:37.578]                 envs <- base::Sys.getenv()
[17:00:37.578]                 names <- names(envs)
[17:00:37.578]                 common <- intersect(names, old_names)
[17:00:37.578]                 added <- setdiff(names, old_names)
[17:00:37.578]                 removed <- setdiff(old_names, names)
[17:00:37.578]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:37.578]                   envs[common]]
[17:00:37.578]                 NAMES <- toupper(changed)
[17:00:37.578]                 args <- list()
[17:00:37.578]                 for (kk in seq_along(NAMES)) {
[17:00:37.578]                   name <- changed[[kk]]
[17:00:37.578]                   NAME <- NAMES[[kk]]
[17:00:37.578]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:37.578]                     next
[17:00:37.578]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:37.578]                 }
[17:00:37.578]                 NAMES <- toupper(added)
[17:00:37.578]                 for (kk in seq_along(NAMES)) {
[17:00:37.578]                   name <- added[[kk]]
[17:00:37.578]                   NAME <- NAMES[[kk]]
[17:00:37.578]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:37.578]                     next
[17:00:37.578]                   args[[name]] <- ""
[17:00:37.578]                 }
[17:00:37.578]                 NAMES <- toupper(removed)
[17:00:37.578]                 for (kk in seq_along(NAMES)) {
[17:00:37.578]                   name <- removed[[kk]]
[17:00:37.578]                   NAME <- NAMES[[kk]]
[17:00:37.578]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:37.578]                     next
[17:00:37.578]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:37.578]                 }
[17:00:37.578]                 if (length(args) > 0) 
[17:00:37.578]                   base::do.call(base::Sys.setenv, args = args)
[17:00:37.578]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:37.578]             }
[17:00:37.578]             else {
[17:00:37.578]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:37.578]             }
[17:00:37.578]             {
[17:00:37.578]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:37.578]                   0L) {
[17:00:37.578]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:37.578]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:37.578]                   base::options(opts)
[17:00:37.578]                 }
[17:00:37.578]                 {
[17:00:37.578]                   {
[17:00:37.578]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:37.578]                     NULL
[17:00:37.578]                   }
[17:00:37.578]                   options(future.plan = NULL)
[17:00:37.578]                   if (is.na(NA_character_)) 
[17:00:37.578]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:37.578]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:37.578]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:37.578]                     .init = FALSE)
[17:00:37.578]                 }
[17:00:37.578]             }
[17:00:37.578]         }
[17:00:37.578]     })
[17:00:37.578]     if (TRUE) {
[17:00:37.578]         base::sink(type = "output", split = FALSE)
[17:00:37.578]         if (TRUE) {
[17:00:37.578]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:37.578]         }
[17:00:37.578]         else {
[17:00:37.578]             ...future.result["stdout"] <- base::list(NULL)
[17:00:37.578]         }
[17:00:37.578]         base::close(...future.stdout)
[17:00:37.578]         ...future.stdout <- NULL
[17:00:37.578]     }
[17:00:37.578]     ...future.result$conditions <- ...future.conditions
[17:00:37.578]     ...future.result$finished <- base::Sys.time()
[17:00:37.578]     ...future.result
[17:00:37.578] }
[17:00:37.630] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[17:00:37.631] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[17:00:37.631] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[17:00:37.632] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:00:37.632] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:00:37.632] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:00:37.632] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:00:37.633] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:00:37.633] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:00:37.633] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:00:37.634] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:00:37.634] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[17:00:37.634] MultisessionFuture started
[17:00:37.634] - Launch lazy future ... done
[17:00:37.635] run() for ‘MultisessionFuture’ ... done
[17:00:37.635] Created future:
[17:00:37.635] MultisessionFuture:
[17:00:37.635] Label: ‘future_replicate-2’
[17:00:37.635] Expression:
[17:00:37.635] {
[17:00:37.635]     do.call(function(...) {
[17:00:37.635]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:37.635]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:37.635]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:37.635]             on.exit(options(oopts), add = TRUE)
[17:00:37.635]         }
[17:00:37.635]         {
[17:00:37.635]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:37.635]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:37.635]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:37.635]                   envir = globalenv(), inherits = FALSE)
[17:00:37.635]                 ...future.FUN(...future.X_jj, ...)
[17:00:37.635]             })
[17:00:37.635]         }
[17:00:37.635]     }, args = future.call.arguments)
[17:00:37.635] }
[17:00:37.635] Lazy evaluation: FALSE
[17:00:37.635] Asynchronous evaluation: TRUE
[17:00:37.635] Local evaluation: TRUE
[17:00:37.635] Environment: R_GlobalEnv
[17:00:37.635] Capture standard output: TRUE
[17:00:37.635] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:37.635] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:37.635] Packages: <none>
[17:00:37.635] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:37.635] Resolved: FALSE
[17:00:37.635] Value: <not collected>
[17:00:37.635] Conditions captured: <none>
[17:00:37.635] Early signaling: FALSE
[17:00:37.635] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:37.635] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:37.647] Chunk #2 of 2 ... DONE
[17:00:37.647] Launching 2 futures (chunks) ... DONE
[17:00:37.647] Resolving 2 futures (chunks) ...
[17:00:37.647] resolve() on list ...
[17:00:37.647]  recursive: 0
[17:00:37.647]  length: 2
[17:00:37.648] 
[17:00:37.648] receiveMessageFromWorker() for ClusterFuture ...
[17:00:37.648] - Validating connection of MultisessionFuture
[17:00:37.649] - received message: FutureResult
[17:00:37.649] - Received FutureResult
[17:00:37.649] - Erased future from FutureRegistry
[17:00:37.649] result() for ClusterFuture ...
[17:00:37.649] - result already collected: FutureResult
[17:00:37.649] result() for ClusterFuture ... done
[17:00:37.651] receiveMessageFromWorker() for ClusterFuture ... done
[17:00:37.652] Future #1
[17:00:37.652] result() for ClusterFuture ...
[17:00:37.652] - result already collected: FutureResult
[17:00:37.652] result() for ClusterFuture ... done
[17:00:37.652] result() for ClusterFuture ...
[17:00:37.652] - result already collected: FutureResult
[17:00:37.652] result() for ClusterFuture ... done
[17:00:37.652] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:00:37.652] - nx: 2
[17:00:37.652] - relay: TRUE
[17:00:37.652] - stdout: TRUE
[17:00:37.652] - signal: TRUE
[17:00:37.653] - resignal: FALSE
[17:00:37.653] - force: TRUE
[17:00:37.653] - relayed: [n=2] FALSE, FALSE
[17:00:37.653] - queued futures: [n=2] FALSE, FALSE
[17:00:37.653]  - until=1
[17:00:37.653]  - relaying element #1
[17:00:37.653] result() for ClusterFuture ...
[17:00:37.653] - result already collected: FutureResult
[17:00:37.653] result() for ClusterFuture ... done
[17:00:37.653] result() for ClusterFuture ...
[17:00:37.653] - result already collected: FutureResult
[17:00:37.653] result() for ClusterFuture ... done
[17:00:37.654] result() for ClusterFuture ...
[17:00:37.654] - result already collected: FutureResult
[17:00:37.654] result() for ClusterFuture ... done
[17:00:37.654] result() for ClusterFuture ...
[17:00:37.654] - result already collected: FutureResult
[17:00:37.654] result() for ClusterFuture ... done
[17:00:37.654] - relayed: [n=2] TRUE, FALSE
[17:00:37.654] - queued futures: [n=2] TRUE, FALSE
[17:00:37.654] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:00:37.654]  length: 1 (resolved future 1)
[17:00:37.717] receiveMessageFromWorker() for ClusterFuture ...
[17:00:37.717] - Validating connection of MultisessionFuture
[17:00:37.717] - received message: FutureResult
[17:00:37.718] - Received FutureResult
[17:00:37.718] - Erased future from FutureRegistry
[17:00:37.718] result() for ClusterFuture ...
[17:00:37.718] - result already collected: FutureResult
[17:00:37.718] result() for ClusterFuture ... done
[17:00:37.718] receiveMessageFromWorker() for ClusterFuture ... done
[17:00:37.718] Future #2
[17:00:37.718] result() for ClusterFuture ...
[17:00:37.718] - result already collected: FutureResult
[17:00:37.718] result() for ClusterFuture ... done
[17:00:37.719] result() for ClusterFuture ...
[17:00:37.719] - result already collected: FutureResult
[17:00:37.719] result() for ClusterFuture ... done
[17:00:37.719] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:00:37.719] - nx: 2
[17:00:37.719] - relay: TRUE
[17:00:37.719] - stdout: TRUE
[17:00:37.719] - signal: TRUE
[17:00:37.719] - resignal: FALSE
[17:00:37.719] - force: TRUE
[17:00:37.719] - relayed: [n=2] TRUE, FALSE
[17:00:37.719] - queued futures: [n=2] TRUE, FALSE
[17:00:37.720]  - until=2
[17:00:37.720]  - relaying element #2
[17:00:37.720] result() for ClusterFuture ...
[17:00:37.720] - result already collected: FutureResult
[17:00:37.720] result() for ClusterFuture ... done
[17:00:37.720] result() for ClusterFuture ...
[17:00:37.720] - result already collected: FutureResult
[17:00:37.720] result() for ClusterFuture ... done
[17:00:37.720] result() for ClusterFuture ...
[17:00:37.720] - result already collected: FutureResult
[17:00:37.720] result() for ClusterFuture ... done
[17:00:37.721] result() for ClusterFuture ...
[17:00:37.721] - result already collected: FutureResult
[17:00:37.721] result() for ClusterFuture ... done
[17:00:37.721] - relayed: [n=2] TRUE, TRUE
[17:00:37.721] - queued futures: [n=2] TRUE, TRUE
[17:00:37.721] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:00:37.721]  length: 0 (resolved future 2)
[17:00:37.721] Relaying remaining futures
[17:00:37.721] signalConditionsASAP(NULL, pos=0) ...
[17:00:37.721] - nx: 2
[17:00:37.721] - relay: TRUE
[17:00:37.722] - stdout: TRUE
[17:00:37.722] - signal: TRUE
[17:00:37.722] - resignal: FALSE
[17:00:37.722] - force: TRUE
[17:00:37.722] - relayed: [n=2] TRUE, TRUE
[17:00:37.722] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:00:37.722] - relayed: [n=2] TRUE, TRUE
[17:00:37.722] - queued futures: [n=2] TRUE, TRUE
[17:00:37.722] signalConditionsASAP(NULL, pos=0) ... done
[17:00:37.722] resolve() on list ... DONE
[17:00:37.722] result() for ClusterFuture ...
[17:00:37.722] - result already collected: FutureResult
[17:00:37.723] result() for ClusterFuture ... done
[17:00:37.723] result() for ClusterFuture ...
[17:00:37.723] - result already collected: FutureResult
[17:00:37.723] result() for ClusterFuture ... done
[17:00:37.723] result() for ClusterFuture ...
[17:00:37.723] - result already collected: FutureResult
[17:00:37.723] result() for ClusterFuture ... done
[17:00:37.723] result() for ClusterFuture ...
[17:00:37.723] - result already collected: FutureResult
[17:00:37.723] result() for ClusterFuture ... done
[17:00:37.723]  - Number of value chunks collected: 2
[17:00:37.724] Resolving 2 futures (chunks) ... DONE
[17:00:37.724] Reducing values from 2 chunks ...
[17:00:37.724]  - Number of values collected after concatenation: 5
[17:00:37.724]  - Number of values expected: 5
[17:00:37.724] Reducing values from 2 chunks ... DONE
[17:00:37.724] future_lapply() ... DONE
[17:00:37.724] future_lapply() ...
[17:00:37.725] Generating random seeds ...
[17:00:37.725] Generating random seed streams for 5 elements ...
[17:00:37.725] Generating random seed streams for 5 elements ... DONE
[17:00:37.725] Generating random seeds ... DONE
[17:00:37.725] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:00:37.729] Number of chunks: 2
[17:00:37.730] getGlobalsAndPackagesXApply() ...
[17:00:37.730]  - future.globals: TRUE
[17:00:37.730] getGlobalsAndPackages() ...
[17:00:37.730] Searching for globals...
[17:00:37.731] - globals found: [2] ‘FUN’, ‘sample’
[17:00:37.731] Searching for globals ... DONE
[17:00:37.731] Resolving globals: FALSE
[17:00:37.732] The total size of the 1 globals is 616 bytes (616 bytes)
[17:00:37.732] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:00:37.732] - globals: [1] ‘FUN’
[17:00:37.732] 
[17:00:37.732] getGlobalsAndPackages() ... DONE
[17:00:37.732]  - globals found/used: [n=1] ‘FUN’
[17:00:37.732]  - needed namespaces: [n=0] 
[17:00:37.732] Finding globals ... DONE
[17:00:37.733]  - use_args: TRUE
[17:00:37.733]  - Getting '...' globals ...
[17:00:37.733] resolve() on list ...
[17:00:37.733]  recursive: 0
[17:00:37.733]  length: 1
[17:00:37.733]  elements: ‘...’
[17:00:37.733]  length: 0 (resolved future 1)
[17:00:37.733] resolve() on list ... DONE
[17:00:37.733]    - '...' content: [n=0] 
[17:00:37.734] List of 1
[17:00:37.734]  $ ...: list()
[17:00:37.734]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:37.734]  - attr(*, "where")=List of 1
[17:00:37.734]   ..$ ...:<environment: 0x5585630a5880> 
[17:00:37.734]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:37.734]  - attr(*, "resolved")= logi TRUE
[17:00:37.734]  - attr(*, "total_size")= num NA
[17:00:37.736]  - Getting '...' globals ... DONE
[17:00:37.736] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:00:37.736] List of 2
[17:00:37.736]  $ ...future.FUN:function (...)  
[17:00:37.736]  $ ...          : list()
[17:00:37.736]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:37.736]  - attr(*, "where")=List of 2
[17:00:37.736]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:00:37.736]   ..$ ...          :<environment: 0x5585630a5880> 
[17:00:37.736]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:37.736]  - attr(*, "resolved")= logi FALSE
[17:00:37.736]  - attr(*, "total_size")= num 616
[17:00:37.739] Packages to be attached in all futures: [n=0] 
[17:00:37.739] getGlobalsAndPackagesXApply() ... DONE
[17:00:37.739] Number of futures (= number of chunks): 2
[17:00:37.739] Launching 2 futures (chunks) ...
[17:00:37.740] Chunk #1 of 2 ...
[17:00:37.740]  - Finding globals in 'X' for chunk #1 ...
[17:00:37.740] getGlobalsAndPackages() ...
[17:00:37.740] Searching for globals...
[17:00:37.740] 
[17:00:37.740] Searching for globals ... DONE
[17:00:37.740] - globals: [0] <none>
[17:00:37.740] getGlobalsAndPackages() ... DONE
[17:00:37.740]    + additional globals found: [n=0] 
[17:00:37.740]    + additional namespaces needed: [n=0] 
[17:00:37.741]  - Finding globals in 'X' for chunk #1 ... DONE
[17:00:37.741]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:37.741]  - seeds: [2] <seeds>
[17:00:37.741]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:37.741] getGlobalsAndPackages() ...
[17:00:37.741] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:37.741] Resolving globals: FALSE
[17:00:37.741] Tweak future expression to call with '...' arguments ...
[17:00:37.741] {
[17:00:37.741]     do.call(function(...) {
[17:00:37.741]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:37.741]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:37.741]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:37.741]             on.exit(options(oopts), add = TRUE)
[17:00:37.741]         }
[17:00:37.741]         {
[17:00:37.741]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:37.741]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:37.741]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:37.741]                   envir = globalenv(), inherits = FALSE)
[17:00:37.741]                 ...future.FUN(...future.X_jj, ...)
[17:00:37.741]             })
[17:00:37.741]         }
[17:00:37.741]     }, args = future.call.arguments)
[17:00:37.741] }
[17:00:37.742] Tweak future expression to call with '...' arguments ... DONE
[17:00:37.742] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:37.742] 
[17:00:37.742] getGlobalsAndPackages() ... DONE
[17:00:37.742] run() for ‘Future’ ...
[17:00:37.743] - state: ‘created’
[17:00:37.743] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:00:37.757] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:37.757] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:00:37.757]   - Field: ‘node’
[17:00:37.757]   - Field: ‘label’
[17:00:37.757]   - Field: ‘local’
[17:00:37.757]   - Field: ‘owner’
[17:00:37.757]   - Field: ‘envir’
[17:00:37.757]   - Field: ‘workers’
[17:00:37.757]   - Field: ‘packages’
[17:00:37.758]   - Field: ‘gc’
[17:00:37.758]   - Field: ‘conditions’
[17:00:37.758]   - Field: ‘persistent’
[17:00:37.758]   - Field: ‘expr’
[17:00:37.758]   - Field: ‘uuid’
[17:00:37.758]   - Field: ‘seed’
[17:00:37.758]   - Field: ‘version’
[17:00:37.758]   - Field: ‘result’
[17:00:37.758]   - Field: ‘asynchronous’
[17:00:37.758]   - Field: ‘calls’
[17:00:37.758]   - Field: ‘globals’
[17:00:37.758]   - Field: ‘stdout’
[17:00:37.759]   - Field: ‘earlySignal’
[17:00:37.759]   - Field: ‘lazy’
[17:00:37.759]   - Field: ‘state’
[17:00:37.759] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:00:37.759] - Launch lazy future ...
[17:00:37.759] Packages needed by the future expression (n = 0): <none>
[17:00:37.759] Packages needed by future strategies (n = 0): <none>
[17:00:37.760] {
[17:00:37.760]     {
[17:00:37.760]         {
[17:00:37.760]             ...future.startTime <- base::Sys.time()
[17:00:37.760]             {
[17:00:37.760]                 {
[17:00:37.760]                   {
[17:00:37.760]                     {
[17:00:37.760]                       base::local({
[17:00:37.760]                         has_future <- base::requireNamespace("future", 
[17:00:37.760]                           quietly = TRUE)
[17:00:37.760]                         if (has_future) {
[17:00:37.760]                           ns <- base::getNamespace("future")
[17:00:37.760]                           version <- ns[[".package"]][["version"]]
[17:00:37.760]                           if (is.null(version)) 
[17:00:37.760]                             version <- utils::packageVersion("future")
[17:00:37.760]                         }
[17:00:37.760]                         else {
[17:00:37.760]                           version <- NULL
[17:00:37.760]                         }
[17:00:37.760]                         if (!has_future || version < "1.8.0") {
[17:00:37.760]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:37.760]                             "", base::R.version$version.string), 
[17:00:37.760]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:37.760]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:37.760]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:37.760]                               "release", "version")], collapse = " "), 
[17:00:37.760]                             hostname = base::Sys.info()[["nodename"]])
[17:00:37.760]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:37.760]                             info)
[17:00:37.760]                           info <- base::paste(info, collapse = "; ")
[17:00:37.760]                           if (!has_future) {
[17:00:37.760]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:37.760]                               info)
[17:00:37.760]                           }
[17:00:37.760]                           else {
[17:00:37.760]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:37.760]                               info, version)
[17:00:37.760]                           }
[17:00:37.760]                           base::stop(msg)
[17:00:37.760]                         }
[17:00:37.760]                       })
[17:00:37.760]                     }
[17:00:37.760]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:37.760]                     base::options(mc.cores = 1L)
[17:00:37.760]                   }
[17:00:37.760]                   ...future.strategy.old <- future::plan("list")
[17:00:37.760]                   options(future.plan = NULL)
[17:00:37.760]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:37.760]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:37.760]                 }
[17:00:37.760]                 ...future.workdir <- getwd()
[17:00:37.760]             }
[17:00:37.760]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:37.760]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:37.760]         }
[17:00:37.760]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:37.760]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:37.760]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:37.760]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:37.760]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:37.760]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:37.760]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:37.760]             base::names(...future.oldOptions))
[17:00:37.760]     }
[17:00:37.760]     if (FALSE) {
[17:00:37.760]     }
[17:00:37.760]     else {
[17:00:37.760]         if (TRUE) {
[17:00:37.760]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:37.760]                 open = "w")
[17:00:37.760]         }
[17:00:37.760]         else {
[17:00:37.760]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:37.760]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:37.760]         }
[17:00:37.760]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:37.760]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:37.760]             base::sink(type = "output", split = FALSE)
[17:00:37.760]             base::close(...future.stdout)
[17:00:37.760]         }, add = TRUE)
[17:00:37.760]     }
[17:00:37.760]     ...future.frame <- base::sys.nframe()
[17:00:37.760]     ...future.conditions <- base::list()
[17:00:37.760]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:37.760]     if (FALSE) {
[17:00:37.760]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:37.760]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:37.760]     }
[17:00:37.760]     ...future.result <- base::tryCatch({
[17:00:37.760]         base::withCallingHandlers({
[17:00:37.760]             ...future.value <- base::withVisible(base::local({
[17:00:37.760]                 ...future.makeSendCondition <- base::local({
[17:00:37.760]                   sendCondition <- NULL
[17:00:37.760]                   function(frame = 1L) {
[17:00:37.760]                     if (is.function(sendCondition)) 
[17:00:37.760]                       return(sendCondition)
[17:00:37.760]                     ns <- getNamespace("parallel")
[17:00:37.760]                     if (exists("sendData", mode = "function", 
[17:00:37.760]                       envir = ns)) {
[17:00:37.760]                       parallel_sendData <- get("sendData", mode = "function", 
[17:00:37.760]                         envir = ns)
[17:00:37.760]                       envir <- sys.frame(frame)
[17:00:37.760]                       master <- NULL
[17:00:37.760]                       while (!identical(envir, .GlobalEnv) && 
[17:00:37.760]                         !identical(envir, emptyenv())) {
[17:00:37.760]                         if (exists("master", mode = "list", envir = envir, 
[17:00:37.760]                           inherits = FALSE)) {
[17:00:37.760]                           master <- get("master", mode = "list", 
[17:00:37.760]                             envir = envir, inherits = FALSE)
[17:00:37.760]                           if (inherits(master, c("SOCKnode", 
[17:00:37.760]                             "SOCK0node"))) {
[17:00:37.760]                             sendCondition <<- function(cond) {
[17:00:37.760]                               data <- list(type = "VALUE", value = cond, 
[17:00:37.760]                                 success = TRUE)
[17:00:37.760]                               parallel_sendData(master, data)
[17:00:37.760]                             }
[17:00:37.760]                             return(sendCondition)
[17:00:37.760]                           }
[17:00:37.760]                         }
[17:00:37.760]                         frame <- frame + 1L
[17:00:37.760]                         envir <- sys.frame(frame)
[17:00:37.760]                       }
[17:00:37.760]                     }
[17:00:37.760]                     sendCondition <<- function(cond) NULL
[17:00:37.760]                   }
[17:00:37.760]                 })
[17:00:37.760]                 withCallingHandlers({
[17:00:37.760]                   {
[17:00:37.760]                     do.call(function(...) {
[17:00:37.760]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:37.760]                       if (!identical(...future.globals.maxSize.org, 
[17:00:37.760]                         ...future.globals.maxSize)) {
[17:00:37.760]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:37.760]                         on.exit(options(oopts), add = TRUE)
[17:00:37.760]                       }
[17:00:37.760]                       {
[17:00:37.760]                         lapply(seq_along(...future.elements_ii), 
[17:00:37.760]                           FUN = function(jj) {
[17:00:37.760]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:37.760]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:37.760]                               envir = globalenv(), inherits = FALSE)
[17:00:37.760]                             ...future.FUN(...future.X_jj, ...)
[17:00:37.760]                           })
[17:00:37.760]                       }
[17:00:37.760]                     }, args = future.call.arguments)
[17:00:37.760]                   }
[17:00:37.760]                 }, immediateCondition = function(cond) {
[17:00:37.760]                   sendCondition <- ...future.makeSendCondition()
[17:00:37.760]                   sendCondition(cond)
[17:00:37.760]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:37.760]                   {
[17:00:37.760]                     inherits <- base::inherits
[17:00:37.760]                     invokeRestart <- base::invokeRestart
[17:00:37.760]                     is.null <- base::is.null
[17:00:37.760]                     muffled <- FALSE
[17:00:37.760]                     if (inherits(cond, "message")) {
[17:00:37.760]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:37.760]                       if (muffled) 
[17:00:37.760]                         invokeRestart("muffleMessage")
[17:00:37.760]                     }
[17:00:37.760]                     else if (inherits(cond, "warning")) {
[17:00:37.760]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:37.760]                       if (muffled) 
[17:00:37.760]                         invokeRestart("muffleWarning")
[17:00:37.760]                     }
[17:00:37.760]                     else if (inherits(cond, "condition")) {
[17:00:37.760]                       if (!is.null(pattern)) {
[17:00:37.760]                         computeRestarts <- base::computeRestarts
[17:00:37.760]                         grepl <- base::grepl
[17:00:37.760]                         restarts <- computeRestarts(cond)
[17:00:37.760]                         for (restart in restarts) {
[17:00:37.760]                           name <- restart$name
[17:00:37.760]                           if (is.null(name)) 
[17:00:37.760]                             next
[17:00:37.760]                           if (!grepl(pattern, name)) 
[17:00:37.760]                             next
[17:00:37.760]                           invokeRestart(restart)
[17:00:37.760]                           muffled <- TRUE
[17:00:37.760]                           break
[17:00:37.760]                         }
[17:00:37.760]                       }
[17:00:37.760]                     }
[17:00:37.760]                     invisible(muffled)
[17:00:37.760]                   }
[17:00:37.760]                   muffleCondition(cond)
[17:00:37.760]                 })
[17:00:37.760]             }))
[17:00:37.760]             future::FutureResult(value = ...future.value$value, 
[17:00:37.760]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:37.760]                   ...future.rng), globalenv = if (FALSE) 
[17:00:37.760]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:37.760]                     ...future.globalenv.names))
[17:00:37.760]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:37.760]         }, condition = base::local({
[17:00:37.760]             c <- base::c
[17:00:37.760]             inherits <- base::inherits
[17:00:37.760]             invokeRestart <- base::invokeRestart
[17:00:37.760]             length <- base::length
[17:00:37.760]             list <- base::list
[17:00:37.760]             seq.int <- base::seq.int
[17:00:37.760]             signalCondition <- base::signalCondition
[17:00:37.760]             sys.calls <- base::sys.calls
[17:00:37.760]             `[[` <- base::`[[`
[17:00:37.760]             `+` <- base::`+`
[17:00:37.760]             `<<-` <- base::`<<-`
[17:00:37.760]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:37.760]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:37.760]                   3L)]
[17:00:37.760]             }
[17:00:37.760]             function(cond) {
[17:00:37.760]                 is_error <- inherits(cond, "error")
[17:00:37.760]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:37.760]                   NULL)
[17:00:37.760]                 if (is_error) {
[17:00:37.760]                   sessionInformation <- function() {
[17:00:37.760]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:37.760]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:37.760]                       search = base::search(), system = base::Sys.info())
[17:00:37.760]                   }
[17:00:37.760]                   ...future.conditions[[length(...future.conditions) + 
[17:00:37.760]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:37.760]                     cond$call), session = sessionInformation(), 
[17:00:37.760]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:37.760]                   signalCondition(cond)
[17:00:37.760]                 }
[17:00:37.760]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:37.760]                 "immediateCondition"))) {
[17:00:37.760]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:37.760]                   ...future.conditions[[length(...future.conditions) + 
[17:00:37.760]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:37.760]                   if (TRUE && !signal) {
[17:00:37.760]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:37.760]                     {
[17:00:37.760]                       inherits <- base::inherits
[17:00:37.760]                       invokeRestart <- base::invokeRestart
[17:00:37.760]                       is.null <- base::is.null
[17:00:37.760]                       muffled <- FALSE
[17:00:37.760]                       if (inherits(cond, "message")) {
[17:00:37.760]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:37.760]                         if (muffled) 
[17:00:37.760]                           invokeRestart("muffleMessage")
[17:00:37.760]                       }
[17:00:37.760]                       else if (inherits(cond, "warning")) {
[17:00:37.760]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:37.760]                         if (muffled) 
[17:00:37.760]                           invokeRestart("muffleWarning")
[17:00:37.760]                       }
[17:00:37.760]                       else if (inherits(cond, "condition")) {
[17:00:37.760]                         if (!is.null(pattern)) {
[17:00:37.760]                           computeRestarts <- base::computeRestarts
[17:00:37.760]                           grepl <- base::grepl
[17:00:37.760]                           restarts <- computeRestarts(cond)
[17:00:37.760]                           for (restart in restarts) {
[17:00:37.760]                             name <- restart$name
[17:00:37.760]                             if (is.null(name)) 
[17:00:37.760]                               next
[17:00:37.760]                             if (!grepl(pattern, name)) 
[17:00:37.760]                               next
[17:00:37.760]                             invokeRestart(restart)
[17:00:37.760]                             muffled <- TRUE
[17:00:37.760]                             break
[17:00:37.760]                           }
[17:00:37.760]                         }
[17:00:37.760]                       }
[17:00:37.760]                       invisible(muffled)
[17:00:37.760]                     }
[17:00:37.760]                     muffleCondition(cond, pattern = "^muffle")
[17:00:37.760]                   }
[17:00:37.760]                 }
[17:00:37.760]                 else {
[17:00:37.760]                   if (TRUE) {
[17:00:37.760]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:37.760]                     {
[17:00:37.760]                       inherits <- base::inherits
[17:00:37.760]                       invokeRestart <- base::invokeRestart
[17:00:37.760]                       is.null <- base::is.null
[17:00:37.760]                       muffled <- FALSE
[17:00:37.760]                       if (inherits(cond, "message")) {
[17:00:37.760]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:37.760]                         if (muffled) 
[17:00:37.760]                           invokeRestart("muffleMessage")
[17:00:37.760]                       }
[17:00:37.760]                       else if (inherits(cond, "warning")) {
[17:00:37.760]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:37.760]                         if (muffled) 
[17:00:37.760]                           invokeRestart("muffleWarning")
[17:00:37.760]                       }
[17:00:37.760]                       else if (inherits(cond, "condition")) {
[17:00:37.760]                         if (!is.null(pattern)) {
[17:00:37.760]                           computeRestarts <- base::computeRestarts
[17:00:37.760]                           grepl <- base::grepl
[17:00:37.760]                           restarts <- computeRestarts(cond)
[17:00:37.760]                           for (restart in restarts) {
[17:00:37.760]                             name <- restart$name
[17:00:37.760]                             if (is.null(name)) 
[17:00:37.760]                               next
[17:00:37.760]                             if (!grepl(pattern, name)) 
[17:00:37.760]                               next
[17:00:37.760]                             invokeRestart(restart)
[17:00:37.760]                             muffled <- TRUE
[17:00:37.760]                             break
[17:00:37.760]                           }
[17:00:37.760]                         }
[17:00:37.760]                       }
[17:00:37.760]                       invisible(muffled)
[17:00:37.760]                     }
[17:00:37.760]                     muffleCondition(cond, pattern = "^muffle")
[17:00:37.760]                   }
[17:00:37.760]                 }
[17:00:37.760]             }
[17:00:37.760]         }))
[17:00:37.760]     }, error = function(ex) {
[17:00:37.760]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:37.760]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:37.760]                 ...future.rng), started = ...future.startTime, 
[17:00:37.760]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:37.760]             version = "1.8"), class = "FutureResult")
[17:00:37.760]     }, finally = {
[17:00:37.760]         if (!identical(...future.workdir, getwd())) 
[17:00:37.760]             setwd(...future.workdir)
[17:00:37.760]         {
[17:00:37.760]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:37.760]                 ...future.oldOptions$nwarnings <- NULL
[17:00:37.760]             }
[17:00:37.760]             base::options(...future.oldOptions)
[17:00:37.760]             if (.Platform$OS.type == "windows") {
[17:00:37.760]                 old_names <- names(...future.oldEnvVars)
[17:00:37.760]                 envs <- base::Sys.getenv()
[17:00:37.760]                 names <- names(envs)
[17:00:37.760]                 common <- intersect(names, old_names)
[17:00:37.760]                 added <- setdiff(names, old_names)
[17:00:37.760]                 removed <- setdiff(old_names, names)
[17:00:37.760]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:37.760]                   envs[common]]
[17:00:37.760]                 NAMES <- toupper(changed)
[17:00:37.760]                 args <- list()
[17:00:37.760]                 for (kk in seq_along(NAMES)) {
[17:00:37.760]                   name <- changed[[kk]]
[17:00:37.760]                   NAME <- NAMES[[kk]]
[17:00:37.760]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:37.760]                     next
[17:00:37.760]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:37.760]                 }
[17:00:37.760]                 NAMES <- toupper(added)
[17:00:37.760]                 for (kk in seq_along(NAMES)) {
[17:00:37.760]                   name <- added[[kk]]
[17:00:37.760]                   NAME <- NAMES[[kk]]
[17:00:37.760]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:37.760]                     next
[17:00:37.760]                   args[[name]] <- ""
[17:00:37.760]                 }
[17:00:37.760]                 NAMES <- toupper(removed)
[17:00:37.760]                 for (kk in seq_along(NAMES)) {
[17:00:37.760]                   name <- removed[[kk]]
[17:00:37.760]                   NAME <- NAMES[[kk]]
[17:00:37.760]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:37.760]                     next
[17:00:37.760]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:37.760]                 }
[17:00:37.760]                 if (length(args) > 0) 
[17:00:37.760]                   base::do.call(base::Sys.setenv, args = args)
[17:00:37.760]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:37.760]             }
[17:00:37.760]             else {
[17:00:37.760]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:37.760]             }
[17:00:37.760]             {
[17:00:37.760]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:37.760]                   0L) {
[17:00:37.760]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:37.760]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:37.760]                   base::options(opts)
[17:00:37.760]                 }
[17:00:37.760]                 {
[17:00:37.760]                   {
[17:00:37.760]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:37.760]                     NULL
[17:00:37.760]                   }
[17:00:37.760]                   options(future.plan = NULL)
[17:00:37.760]                   if (is.na(NA_character_)) 
[17:00:37.760]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:37.760]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:37.760]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:37.760]                     .init = FALSE)
[17:00:37.760]                 }
[17:00:37.760]             }
[17:00:37.760]         }
[17:00:37.760]     })
[17:00:37.760]     if (TRUE) {
[17:00:37.760]         base::sink(type = "output", split = FALSE)
[17:00:37.760]         if (TRUE) {
[17:00:37.760]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:37.760]         }
[17:00:37.760]         else {
[17:00:37.760]             ...future.result["stdout"] <- base::list(NULL)
[17:00:37.760]         }
[17:00:37.760]         base::close(...future.stdout)
[17:00:37.760]         ...future.stdout <- NULL
[17:00:37.760]     }
[17:00:37.760]     ...future.result$conditions <- ...future.conditions
[17:00:37.760]     ...future.result$finished <- base::Sys.time()
[17:00:37.760]     ...future.result
[17:00:37.760] }
[17:00:37.763] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[17:00:37.763] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[17:00:37.763] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[17:00:37.764] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:00:37.764] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:00:37.764] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:00:37.764] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:00:37.764] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:00:37.765] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:00:37.765] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:00:37.765] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:00:37.765] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[17:00:37.766] MultisessionFuture started
[17:00:37.766] - Launch lazy future ... done
[17:00:37.766] run() for ‘MultisessionFuture’ ... done
[17:00:37.766] Created future:
[17:00:37.766] MultisessionFuture:
[17:00:37.766] Label: ‘future_replicate-1’
[17:00:37.766] Expression:
[17:00:37.766] {
[17:00:37.766]     do.call(function(...) {
[17:00:37.766]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:37.766]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:37.766]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:37.766]             on.exit(options(oopts), add = TRUE)
[17:00:37.766]         }
[17:00:37.766]         {
[17:00:37.766]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:37.766]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:37.766]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:37.766]                   envir = globalenv(), inherits = FALSE)
[17:00:37.766]                 ...future.FUN(...future.X_jj, ...)
[17:00:37.766]             })
[17:00:37.766]         }
[17:00:37.766]     }, args = future.call.arguments)
[17:00:37.766] }
[17:00:37.766] Lazy evaluation: FALSE
[17:00:37.766] Asynchronous evaluation: TRUE
[17:00:37.766] Local evaluation: TRUE
[17:00:37.766] Environment: R_GlobalEnv
[17:00:37.766] Capture standard output: TRUE
[17:00:37.766] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:37.766] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:37.766] Packages: <none>
[17:00:37.766] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:37.766] Resolved: FALSE
[17:00:37.766] Value: <not collected>
[17:00:37.766] Conditions captured: <none>
[17:00:37.766] Early signaling: FALSE
[17:00:37.766] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:37.766] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:37.778] Chunk #1 of 2 ... DONE
[17:00:37.778] Chunk #2 of 2 ...
[17:00:37.778]  - Finding globals in 'X' for chunk #2 ...
[17:00:37.778] getGlobalsAndPackages() ...
[17:00:37.778] Searching for globals...
[17:00:37.778] 
[17:00:37.779] Searching for globals ... DONE
[17:00:37.779] - globals: [0] <none>
[17:00:37.779] getGlobalsAndPackages() ... DONE
[17:00:37.779]    + additional globals found: [n=0] 
[17:00:37.779]    + additional namespaces needed: [n=0] 
[17:00:37.779]  - Finding globals in 'X' for chunk #2 ... DONE
[17:00:37.779]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:37.779]  - seeds: [3] <seeds>
[17:00:37.779]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:37.780] getGlobalsAndPackages() ...
[17:00:37.780] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:37.780] Resolving globals: FALSE
[17:00:37.780] Tweak future expression to call with '...' arguments ...
[17:00:37.780] {
[17:00:37.780]     do.call(function(...) {
[17:00:37.780]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:37.780]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:37.780]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:37.780]             on.exit(options(oopts), add = TRUE)
[17:00:37.780]         }
[17:00:37.780]         {
[17:00:37.780]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:37.780]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:37.780]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:37.780]                   envir = globalenv(), inherits = FALSE)
[17:00:37.780]                 ...future.FUN(...future.X_jj, ...)
[17:00:37.780]             })
[17:00:37.780]         }
[17:00:37.780]     }, args = future.call.arguments)
[17:00:37.780] }
[17:00:37.780] Tweak future expression to call with '...' arguments ... DONE
[17:00:37.781] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:37.781] 
[17:00:37.781] getGlobalsAndPackages() ... DONE
[17:00:37.781] run() for ‘Future’ ...
[17:00:37.781] - state: ‘created’
[17:00:37.781] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:00:37.796] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:37.796] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:00:37.796]   - Field: ‘node’
[17:00:37.796]   - Field: ‘label’
[17:00:37.796]   - Field: ‘local’
[17:00:37.796]   - Field: ‘owner’
[17:00:37.796]   - Field: ‘envir’
[17:00:37.796]   - Field: ‘workers’
[17:00:37.797]   - Field: ‘packages’
[17:00:37.797]   - Field: ‘gc’
[17:00:37.797]   - Field: ‘conditions’
[17:00:37.797]   - Field: ‘persistent’
[17:00:37.797]   - Field: ‘expr’
[17:00:37.797]   - Field: ‘uuid’
[17:00:37.797]   - Field: ‘seed’
[17:00:37.797]   - Field: ‘version’
[17:00:37.797]   - Field: ‘result’
[17:00:37.797]   - Field: ‘asynchronous’
[17:00:37.797]   - Field: ‘calls’
[17:00:37.798]   - Field: ‘globals’
[17:00:37.798]   - Field: ‘stdout’
[17:00:37.798]   - Field: ‘earlySignal’
[17:00:37.798]   - Field: ‘lazy’
[17:00:37.798]   - Field: ‘state’
[17:00:37.798] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:00:37.798] - Launch lazy future ...
[17:00:37.798] Packages needed by the future expression (n = 0): <none>
[17:00:37.799] Packages needed by future strategies (n = 0): <none>
[17:00:37.799] {
[17:00:37.799]     {
[17:00:37.799]         {
[17:00:37.799]             ...future.startTime <- base::Sys.time()
[17:00:37.799]             {
[17:00:37.799]                 {
[17:00:37.799]                   {
[17:00:37.799]                     {
[17:00:37.799]                       base::local({
[17:00:37.799]                         has_future <- base::requireNamespace("future", 
[17:00:37.799]                           quietly = TRUE)
[17:00:37.799]                         if (has_future) {
[17:00:37.799]                           ns <- base::getNamespace("future")
[17:00:37.799]                           version <- ns[[".package"]][["version"]]
[17:00:37.799]                           if (is.null(version)) 
[17:00:37.799]                             version <- utils::packageVersion("future")
[17:00:37.799]                         }
[17:00:37.799]                         else {
[17:00:37.799]                           version <- NULL
[17:00:37.799]                         }
[17:00:37.799]                         if (!has_future || version < "1.8.0") {
[17:00:37.799]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:37.799]                             "", base::R.version$version.string), 
[17:00:37.799]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:37.799]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:37.799]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:37.799]                               "release", "version")], collapse = " "), 
[17:00:37.799]                             hostname = base::Sys.info()[["nodename"]])
[17:00:37.799]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:37.799]                             info)
[17:00:37.799]                           info <- base::paste(info, collapse = "; ")
[17:00:37.799]                           if (!has_future) {
[17:00:37.799]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:37.799]                               info)
[17:00:37.799]                           }
[17:00:37.799]                           else {
[17:00:37.799]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:37.799]                               info, version)
[17:00:37.799]                           }
[17:00:37.799]                           base::stop(msg)
[17:00:37.799]                         }
[17:00:37.799]                       })
[17:00:37.799]                     }
[17:00:37.799]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:37.799]                     base::options(mc.cores = 1L)
[17:00:37.799]                   }
[17:00:37.799]                   ...future.strategy.old <- future::plan("list")
[17:00:37.799]                   options(future.plan = NULL)
[17:00:37.799]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:37.799]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:37.799]                 }
[17:00:37.799]                 ...future.workdir <- getwd()
[17:00:37.799]             }
[17:00:37.799]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:37.799]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:37.799]         }
[17:00:37.799]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:37.799]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:37.799]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:37.799]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:37.799]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:37.799]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:37.799]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:37.799]             base::names(...future.oldOptions))
[17:00:37.799]     }
[17:00:37.799]     if (FALSE) {
[17:00:37.799]     }
[17:00:37.799]     else {
[17:00:37.799]         if (TRUE) {
[17:00:37.799]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:37.799]                 open = "w")
[17:00:37.799]         }
[17:00:37.799]         else {
[17:00:37.799]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:37.799]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:37.799]         }
[17:00:37.799]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:37.799]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:37.799]             base::sink(type = "output", split = FALSE)
[17:00:37.799]             base::close(...future.stdout)
[17:00:37.799]         }, add = TRUE)
[17:00:37.799]     }
[17:00:37.799]     ...future.frame <- base::sys.nframe()
[17:00:37.799]     ...future.conditions <- base::list()
[17:00:37.799]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:37.799]     if (FALSE) {
[17:00:37.799]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:37.799]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:37.799]     }
[17:00:37.799]     ...future.result <- base::tryCatch({
[17:00:37.799]         base::withCallingHandlers({
[17:00:37.799]             ...future.value <- base::withVisible(base::local({
[17:00:37.799]                 ...future.makeSendCondition <- base::local({
[17:00:37.799]                   sendCondition <- NULL
[17:00:37.799]                   function(frame = 1L) {
[17:00:37.799]                     if (is.function(sendCondition)) 
[17:00:37.799]                       return(sendCondition)
[17:00:37.799]                     ns <- getNamespace("parallel")
[17:00:37.799]                     if (exists("sendData", mode = "function", 
[17:00:37.799]                       envir = ns)) {
[17:00:37.799]                       parallel_sendData <- get("sendData", mode = "function", 
[17:00:37.799]                         envir = ns)
[17:00:37.799]                       envir <- sys.frame(frame)
[17:00:37.799]                       master <- NULL
[17:00:37.799]                       while (!identical(envir, .GlobalEnv) && 
[17:00:37.799]                         !identical(envir, emptyenv())) {
[17:00:37.799]                         if (exists("master", mode = "list", envir = envir, 
[17:00:37.799]                           inherits = FALSE)) {
[17:00:37.799]                           master <- get("master", mode = "list", 
[17:00:37.799]                             envir = envir, inherits = FALSE)
[17:00:37.799]                           if (inherits(master, c("SOCKnode", 
[17:00:37.799]                             "SOCK0node"))) {
[17:00:37.799]                             sendCondition <<- function(cond) {
[17:00:37.799]                               data <- list(type = "VALUE", value = cond, 
[17:00:37.799]                                 success = TRUE)
[17:00:37.799]                               parallel_sendData(master, data)
[17:00:37.799]                             }
[17:00:37.799]                             return(sendCondition)
[17:00:37.799]                           }
[17:00:37.799]                         }
[17:00:37.799]                         frame <- frame + 1L
[17:00:37.799]                         envir <- sys.frame(frame)
[17:00:37.799]                       }
[17:00:37.799]                     }
[17:00:37.799]                     sendCondition <<- function(cond) NULL
[17:00:37.799]                   }
[17:00:37.799]                 })
[17:00:37.799]                 withCallingHandlers({
[17:00:37.799]                   {
[17:00:37.799]                     do.call(function(...) {
[17:00:37.799]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:37.799]                       if (!identical(...future.globals.maxSize.org, 
[17:00:37.799]                         ...future.globals.maxSize)) {
[17:00:37.799]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:37.799]                         on.exit(options(oopts), add = TRUE)
[17:00:37.799]                       }
[17:00:37.799]                       {
[17:00:37.799]                         lapply(seq_along(...future.elements_ii), 
[17:00:37.799]                           FUN = function(jj) {
[17:00:37.799]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:37.799]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:37.799]                               envir = globalenv(), inherits = FALSE)
[17:00:37.799]                             ...future.FUN(...future.X_jj, ...)
[17:00:37.799]                           })
[17:00:37.799]                       }
[17:00:37.799]                     }, args = future.call.arguments)
[17:00:37.799]                   }
[17:00:37.799]                 }, immediateCondition = function(cond) {
[17:00:37.799]                   sendCondition <- ...future.makeSendCondition()
[17:00:37.799]                   sendCondition(cond)
[17:00:37.799]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:37.799]                   {
[17:00:37.799]                     inherits <- base::inherits
[17:00:37.799]                     invokeRestart <- base::invokeRestart
[17:00:37.799]                     is.null <- base::is.null
[17:00:37.799]                     muffled <- FALSE
[17:00:37.799]                     if (inherits(cond, "message")) {
[17:00:37.799]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:37.799]                       if (muffled) 
[17:00:37.799]                         invokeRestart("muffleMessage")
[17:00:37.799]                     }
[17:00:37.799]                     else if (inherits(cond, "warning")) {
[17:00:37.799]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:37.799]                       if (muffled) 
[17:00:37.799]                         invokeRestart("muffleWarning")
[17:00:37.799]                     }
[17:00:37.799]                     else if (inherits(cond, "condition")) {
[17:00:37.799]                       if (!is.null(pattern)) {
[17:00:37.799]                         computeRestarts <- base::computeRestarts
[17:00:37.799]                         grepl <- base::grepl
[17:00:37.799]                         restarts <- computeRestarts(cond)
[17:00:37.799]                         for (restart in restarts) {
[17:00:37.799]                           name <- restart$name
[17:00:37.799]                           if (is.null(name)) 
[17:00:37.799]                             next
[17:00:37.799]                           if (!grepl(pattern, name)) 
[17:00:37.799]                             next
[17:00:37.799]                           invokeRestart(restart)
[17:00:37.799]                           muffled <- TRUE
[17:00:37.799]                           break
[17:00:37.799]                         }
[17:00:37.799]                       }
[17:00:37.799]                     }
[17:00:37.799]                     invisible(muffled)
[17:00:37.799]                   }
[17:00:37.799]                   muffleCondition(cond)
[17:00:37.799]                 })
[17:00:37.799]             }))
[17:00:37.799]             future::FutureResult(value = ...future.value$value, 
[17:00:37.799]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:37.799]                   ...future.rng), globalenv = if (FALSE) 
[17:00:37.799]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:37.799]                     ...future.globalenv.names))
[17:00:37.799]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:37.799]         }, condition = base::local({
[17:00:37.799]             c <- base::c
[17:00:37.799]             inherits <- base::inherits
[17:00:37.799]             invokeRestart <- base::invokeRestart
[17:00:37.799]             length <- base::length
[17:00:37.799]             list <- base::list
[17:00:37.799]             seq.int <- base::seq.int
[17:00:37.799]             signalCondition <- base::signalCondition
[17:00:37.799]             sys.calls <- base::sys.calls
[17:00:37.799]             `[[` <- base::`[[`
[17:00:37.799]             `+` <- base::`+`
[17:00:37.799]             `<<-` <- base::`<<-`
[17:00:37.799]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:37.799]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:37.799]                   3L)]
[17:00:37.799]             }
[17:00:37.799]             function(cond) {
[17:00:37.799]                 is_error <- inherits(cond, "error")
[17:00:37.799]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:37.799]                   NULL)
[17:00:37.799]                 if (is_error) {
[17:00:37.799]                   sessionInformation <- function() {
[17:00:37.799]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:37.799]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:37.799]                       search = base::search(), system = base::Sys.info())
[17:00:37.799]                   }
[17:00:37.799]                   ...future.conditions[[length(...future.conditions) + 
[17:00:37.799]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:37.799]                     cond$call), session = sessionInformation(), 
[17:00:37.799]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:37.799]                   signalCondition(cond)
[17:00:37.799]                 }
[17:00:37.799]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:37.799]                 "immediateCondition"))) {
[17:00:37.799]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:37.799]                   ...future.conditions[[length(...future.conditions) + 
[17:00:37.799]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:37.799]                   if (TRUE && !signal) {
[17:00:37.799]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:37.799]                     {
[17:00:37.799]                       inherits <- base::inherits
[17:00:37.799]                       invokeRestart <- base::invokeRestart
[17:00:37.799]                       is.null <- base::is.null
[17:00:37.799]                       muffled <- FALSE
[17:00:37.799]                       if (inherits(cond, "message")) {
[17:00:37.799]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:37.799]                         if (muffled) 
[17:00:37.799]                           invokeRestart("muffleMessage")
[17:00:37.799]                       }
[17:00:37.799]                       else if (inherits(cond, "warning")) {
[17:00:37.799]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:37.799]                         if (muffled) 
[17:00:37.799]                           invokeRestart("muffleWarning")
[17:00:37.799]                       }
[17:00:37.799]                       else if (inherits(cond, "condition")) {
[17:00:37.799]                         if (!is.null(pattern)) {
[17:00:37.799]                           computeRestarts <- base::computeRestarts
[17:00:37.799]                           grepl <- base::grepl
[17:00:37.799]                           restarts <- computeRestarts(cond)
[17:00:37.799]                           for (restart in restarts) {
[17:00:37.799]                             name <- restart$name
[17:00:37.799]                             if (is.null(name)) 
[17:00:37.799]                               next
[17:00:37.799]                             if (!grepl(pattern, name)) 
[17:00:37.799]                               next
[17:00:37.799]                             invokeRestart(restart)
[17:00:37.799]                             muffled <- TRUE
[17:00:37.799]                             break
[17:00:37.799]                           }
[17:00:37.799]                         }
[17:00:37.799]                       }
[17:00:37.799]                       invisible(muffled)
[17:00:37.799]                     }
[17:00:37.799]                     muffleCondition(cond, pattern = "^muffle")
[17:00:37.799]                   }
[17:00:37.799]                 }
[17:00:37.799]                 else {
[17:00:37.799]                   if (TRUE) {
[17:00:37.799]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:37.799]                     {
[17:00:37.799]                       inherits <- base::inherits
[17:00:37.799]                       invokeRestart <- base::invokeRestart
[17:00:37.799]                       is.null <- base::is.null
[17:00:37.799]                       muffled <- FALSE
[17:00:37.799]                       if (inherits(cond, "message")) {
[17:00:37.799]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:37.799]                         if (muffled) 
[17:00:37.799]                           invokeRestart("muffleMessage")
[17:00:37.799]                       }
[17:00:37.799]                       else if (inherits(cond, "warning")) {
[17:00:37.799]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:37.799]                         if (muffled) 
[17:00:37.799]                           invokeRestart("muffleWarning")
[17:00:37.799]                       }
[17:00:37.799]                       else if (inherits(cond, "condition")) {
[17:00:37.799]                         if (!is.null(pattern)) {
[17:00:37.799]                           computeRestarts <- base::computeRestarts
[17:00:37.799]                           grepl <- base::grepl
[17:00:37.799]                           restarts <- computeRestarts(cond)
[17:00:37.799]                           for (restart in restarts) {
[17:00:37.799]                             name <- restart$name
[17:00:37.799]                             if (is.null(name)) 
[17:00:37.799]                               next
[17:00:37.799]                             if (!grepl(pattern, name)) 
[17:00:37.799]                               next
[17:00:37.799]                             invokeRestart(restart)
[17:00:37.799]                             muffled <- TRUE
[17:00:37.799]                             break
[17:00:37.799]                           }
[17:00:37.799]                         }
[17:00:37.799]                       }
[17:00:37.799]                       invisible(muffled)
[17:00:37.799]                     }
[17:00:37.799]                     muffleCondition(cond, pattern = "^muffle")
[17:00:37.799]                   }
[17:00:37.799]                 }
[17:00:37.799]             }
[17:00:37.799]         }))
[17:00:37.799]     }, error = function(ex) {
[17:00:37.799]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:37.799]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:37.799]                 ...future.rng), started = ...future.startTime, 
[17:00:37.799]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:37.799]             version = "1.8"), class = "FutureResult")
[17:00:37.799]     }, finally = {
[17:00:37.799]         if (!identical(...future.workdir, getwd())) 
[17:00:37.799]             setwd(...future.workdir)
[17:00:37.799]         {
[17:00:37.799]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:37.799]                 ...future.oldOptions$nwarnings <- NULL
[17:00:37.799]             }
[17:00:37.799]             base::options(...future.oldOptions)
[17:00:37.799]             if (.Platform$OS.type == "windows") {
[17:00:37.799]                 old_names <- names(...future.oldEnvVars)
[17:00:37.799]                 envs <- base::Sys.getenv()
[17:00:37.799]                 names <- names(envs)
[17:00:37.799]                 common <- intersect(names, old_names)
[17:00:37.799]                 added <- setdiff(names, old_names)
[17:00:37.799]                 removed <- setdiff(old_names, names)
[17:00:37.799]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:37.799]                   envs[common]]
[17:00:37.799]                 NAMES <- toupper(changed)
[17:00:37.799]                 args <- list()
[17:00:37.799]                 for (kk in seq_along(NAMES)) {
[17:00:37.799]                   name <- changed[[kk]]
[17:00:37.799]                   NAME <- NAMES[[kk]]
[17:00:37.799]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:37.799]                     next
[17:00:37.799]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:37.799]                 }
[17:00:37.799]                 NAMES <- toupper(added)
[17:00:37.799]                 for (kk in seq_along(NAMES)) {
[17:00:37.799]                   name <- added[[kk]]
[17:00:37.799]                   NAME <- NAMES[[kk]]
[17:00:37.799]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:37.799]                     next
[17:00:37.799]                   args[[name]] <- ""
[17:00:37.799]                 }
[17:00:37.799]                 NAMES <- toupper(removed)
[17:00:37.799]                 for (kk in seq_along(NAMES)) {
[17:00:37.799]                   name <- removed[[kk]]
[17:00:37.799]                   NAME <- NAMES[[kk]]
[17:00:37.799]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:37.799]                     next
[17:00:37.799]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:37.799]                 }
[17:00:37.799]                 if (length(args) > 0) 
[17:00:37.799]                   base::do.call(base::Sys.setenv, args = args)
[17:00:37.799]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:37.799]             }
[17:00:37.799]             else {
[17:00:37.799]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:37.799]             }
[17:00:37.799]             {
[17:00:37.799]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:37.799]                   0L) {
[17:00:37.799]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:37.799]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:37.799]                   base::options(opts)
[17:00:37.799]                 }
[17:00:37.799]                 {
[17:00:37.799]                   {
[17:00:37.799]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:37.799]                     NULL
[17:00:37.799]                   }
[17:00:37.799]                   options(future.plan = NULL)
[17:00:37.799]                   if (is.na(NA_character_)) 
[17:00:37.799]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:37.799]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:37.799]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:37.799]                     .init = FALSE)
[17:00:37.799]                 }
[17:00:37.799]             }
[17:00:37.799]         }
[17:00:37.799]     })
[17:00:37.799]     if (TRUE) {
[17:00:37.799]         base::sink(type = "output", split = FALSE)
[17:00:37.799]         if (TRUE) {
[17:00:37.799]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:37.799]         }
[17:00:37.799]         else {
[17:00:37.799]             ...future.result["stdout"] <- base::list(NULL)
[17:00:37.799]         }
[17:00:37.799]         base::close(...future.stdout)
[17:00:37.799]         ...future.stdout <- NULL
[17:00:37.799]     }
[17:00:37.799]     ...future.result$conditions <- ...future.conditions
[17:00:37.799]     ...future.result$finished <- base::Sys.time()
[17:00:37.799]     ...future.result
[17:00:37.799] }
[17:00:37.802] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[17:00:37.802] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[17:00:37.802] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[17:00:37.803] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:00:37.803] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:00:37.803] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:00:37.804] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:00:37.804] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:00:37.804] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:00:37.804] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:00:37.804] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:00:37.805] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[17:00:37.805] MultisessionFuture started
[17:00:37.805] - Launch lazy future ... done
[17:00:37.805] run() for ‘MultisessionFuture’ ... done
[17:00:37.805] Created future:
[17:00:37.805] MultisessionFuture:
[17:00:37.805] Label: ‘future_replicate-2’
[17:00:37.805] Expression:
[17:00:37.805] {
[17:00:37.805]     do.call(function(...) {
[17:00:37.805]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:37.805]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:37.805]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:37.805]             on.exit(options(oopts), add = TRUE)
[17:00:37.805]         }
[17:00:37.805]         {
[17:00:37.805]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:37.805]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:37.805]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:37.805]                   envir = globalenv(), inherits = FALSE)
[17:00:37.805]                 ...future.FUN(...future.X_jj, ...)
[17:00:37.805]             })
[17:00:37.805]         }
[17:00:37.805]     }, args = future.call.arguments)
[17:00:37.805] }
[17:00:37.805] Lazy evaluation: FALSE
[17:00:37.805] Asynchronous evaluation: TRUE
[17:00:37.805] Local evaluation: TRUE
[17:00:37.805] Environment: R_GlobalEnv
[17:00:37.805] Capture standard output: TRUE
[17:00:37.805] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:37.805] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:37.805] Packages: <none>
[17:00:37.805] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:37.805] Resolved: FALSE
[17:00:37.805] Value: <not collected>
[17:00:37.805] Conditions captured: <none>
[17:00:37.805] Early signaling: FALSE
[17:00:37.805] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:37.805] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:37.817] Chunk #2 of 2 ... DONE
[17:00:37.817] Launching 2 futures (chunks) ... DONE
[17:00:37.817] Resolving 2 futures (chunks) ...
[17:00:37.817] resolve() on list ...
[17:00:37.818]  recursive: 0
[17:00:37.818]  length: 2
[17:00:37.818] 
[17:00:37.818] receiveMessageFromWorker() for ClusterFuture ...
[17:00:37.818] - Validating connection of MultisessionFuture
[17:00:37.819] - received message: FutureResult
[17:00:37.819] - Received FutureResult
[17:00:37.819] - Erased future from FutureRegistry
[17:00:37.819] result() for ClusterFuture ...
[17:00:37.819] - result already collected: FutureResult
[17:00:37.819] result() for ClusterFuture ... done
[17:00:37.819] receiveMessageFromWorker() for ClusterFuture ... done
[17:00:37.819] Future #1
[17:00:37.819] result() for ClusterFuture ...
[17:00:37.820] - result already collected: FutureResult
[17:00:37.820] result() for ClusterFuture ... done
[17:00:37.820] result() for ClusterFuture ...
[17:00:37.820] - result already collected: FutureResult
[17:00:37.820] result() for ClusterFuture ... done
[17:00:37.820] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:00:37.820] - nx: 2
[17:00:37.820] - relay: TRUE
[17:00:37.820] - stdout: TRUE
[17:00:37.820] - signal: TRUE
[17:00:37.820] - resignal: FALSE
[17:00:37.821] - force: TRUE
[17:00:37.821] - relayed: [n=2] FALSE, FALSE
[17:00:37.821] - queued futures: [n=2] FALSE, FALSE
[17:00:37.821]  - until=1
[17:00:37.821]  - relaying element #1
[17:00:37.821] result() for ClusterFuture ...
[17:00:37.821] - result already collected: FutureResult
[17:00:37.821] result() for ClusterFuture ... done
[17:00:37.821] result() for ClusterFuture ...
[17:00:37.821] - result already collected: FutureResult
[17:00:37.821] result() for ClusterFuture ... done
[17:00:37.822] result() for ClusterFuture ...
[17:00:37.822] - result already collected: FutureResult
[17:00:37.822] result() for ClusterFuture ... done
[17:00:37.822] result() for ClusterFuture ...
[17:00:37.822] - result already collected: FutureResult
[17:00:37.822] result() for ClusterFuture ... done
[17:00:37.822] - relayed: [n=2] TRUE, FALSE
[17:00:37.822] - queued futures: [n=2] TRUE, FALSE
[17:00:37.822] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:00:37.822]  length: 1 (resolved future 1)
[17:00:37.849] receiveMessageFromWorker() for ClusterFuture ...
[17:00:37.849] - Validating connection of MultisessionFuture
[17:00:37.850] - received message: FutureResult
[17:00:37.850] - Received FutureResult
[17:00:37.850] - Erased future from FutureRegistry
[17:00:37.850] result() for ClusterFuture ...
[17:00:37.850] - result already collected: FutureResult
[17:00:37.850] result() for ClusterFuture ... done
[17:00:37.850] receiveMessageFromWorker() for ClusterFuture ... done
[17:00:37.850] Future #2
[17:00:37.850] result() for ClusterFuture ...
[17:00:37.851] - result already collected: FutureResult
[17:00:37.851] result() for ClusterFuture ... done
[17:00:37.851] result() for ClusterFuture ...
[17:00:37.851] - result already collected: FutureResult
[17:00:37.851] result() for ClusterFuture ... done
[17:00:37.851] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:00:37.851] - nx: 2
[17:00:37.851] - relay: TRUE
[17:00:37.851] - stdout: TRUE
[17:00:37.851] - signal: TRUE
[17:00:37.851] - resignal: FALSE
[17:00:37.852] - force: TRUE
[17:00:37.852] - relayed: [n=2] TRUE, FALSE
[17:00:37.852] - queued futures: [n=2] TRUE, FALSE
[17:00:37.852]  - until=2
[17:00:37.852]  - relaying element #2
[17:00:37.852] result() for ClusterFuture ...
[17:00:37.852] - result already collected: FutureResult
[17:00:37.852] result() for ClusterFuture ... done
[17:00:37.852] result() for ClusterFuture ...
[17:00:37.852] - result already collected: FutureResult
[17:00:37.852] result() for ClusterFuture ... done
[17:00:37.853] result() for ClusterFuture ...
[17:00:37.853] - result already collected: FutureResult
[17:00:37.853] result() for ClusterFuture ... done
[17:00:37.853] result() for ClusterFuture ...
[17:00:37.853] - result already collected: FutureResult
[17:00:37.853] result() for ClusterFuture ... done
[17:00:37.853] - relayed: [n=2] TRUE, TRUE
[17:00:37.853] - queued futures: [n=2] TRUE, TRUE
[17:00:37.853] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:00:37.853]  length: 0 (resolved future 2)
[17:00:37.853] Relaying remaining futures
[17:00:37.853] signalConditionsASAP(NULL, pos=0) ...
[17:00:37.854] - nx: 2
[17:00:37.854] - relay: TRUE
[17:00:37.854] - stdout: TRUE
[17:00:37.854] - signal: TRUE
[17:00:37.854] - resignal: FALSE
[17:00:37.854] - force: TRUE
[17:00:37.854] - relayed: [n=2] TRUE, TRUE
[17:00:37.854] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:00:37.854] - relayed: [n=2] TRUE, TRUE
[17:00:37.854] - queued futures: [n=2] TRUE, TRUE
[17:00:37.854] signalConditionsASAP(NULL, pos=0) ... done
[17:00:37.855] resolve() on list ... DONE
[17:00:37.855] result() for ClusterFuture ...
[17:00:37.855] - result already collected: FutureResult
[17:00:37.855] result() for ClusterFuture ... done
[17:00:37.855] result() for ClusterFuture ...
[17:00:37.855] - result already collected: FutureResult
[17:00:37.855] result() for ClusterFuture ... done
[17:00:37.855] result() for ClusterFuture ...
[17:00:37.855] - result already collected: FutureResult
[17:00:37.855] result() for ClusterFuture ... done
[17:00:37.855] result() for ClusterFuture ...
[17:00:37.856] - result already collected: FutureResult
[17:00:37.856] result() for ClusterFuture ... done
[17:00:37.856]  - Number of value chunks collected: 2
[17:00:37.856] Resolving 2 futures (chunks) ... DONE
[17:00:37.856] Reducing values from 2 chunks ...
[17:00:37.856]  - Number of values collected after concatenation: 5
[17:00:37.856]  - Number of values expected: 5
[17:00:37.856] Reducing values from 2 chunks ... DONE
[17:00:37.856] future_lapply() ... DONE
[17:00:37.856] future_lapply() ...
[17:00:37.857] Generating random seeds ...
[17:00:37.857] Generating random seed streams for 5 elements ...
[17:00:37.857] Generating random seed streams for 5 elements ... DONE
[17:00:37.857] Generating random seeds ... DONE
[17:00:37.857] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:00:37.862] Number of chunks: 2
[17:00:37.862] getGlobalsAndPackagesXApply() ...
[17:00:37.862]  - future.globals: TRUE
[17:00:37.862] getGlobalsAndPackages() ...
[17:00:37.862] Searching for globals...
[17:00:37.863] - globals found: [2] ‘FUN’, ‘sample’
[17:00:37.863] Searching for globals ... DONE
[17:00:37.863] Resolving globals: FALSE
[17:00:37.864] The total size of the 1 globals is 616 bytes (616 bytes)
[17:00:37.864] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:00:37.864] - globals: [1] ‘FUN’
[17:00:37.864] 
[17:00:37.865] getGlobalsAndPackages() ... DONE
[17:00:37.865]  - globals found/used: [n=1] ‘FUN’
[17:00:37.865]  - needed namespaces: [n=0] 
[17:00:37.865] Finding globals ... DONE
[17:00:37.865]  - use_args: TRUE
[17:00:37.865]  - Getting '...' globals ...
[17:00:37.865] resolve() on list ...
[17:00:37.865]  recursive: 0
[17:00:37.865]  length: 1
[17:00:37.866]  elements: ‘...’
[17:00:37.866]  length: 0 (resolved future 1)
[17:00:37.866] resolve() on list ... DONE
[17:00:37.866]    - '...' content: [n=0] 
[17:00:37.866] List of 1
[17:00:37.866]  $ ...: list()
[17:00:37.866]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:37.866]  - attr(*, "where")=List of 1
[17:00:37.866]   ..$ ...:<environment: 0x558565121850> 
[17:00:37.866]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:37.866]  - attr(*, "resolved")= logi TRUE
[17:00:37.866]  - attr(*, "total_size")= num NA
[17:00:37.869]  - Getting '...' globals ... DONE
[17:00:37.869] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:00:37.869] List of 2
[17:00:37.869]  $ ...future.FUN:function (...)  
[17:00:37.869]  $ ...          : list()
[17:00:37.869]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:37.869]  - attr(*, "where")=List of 2
[17:00:37.869]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:00:37.869]   ..$ ...          :<environment: 0x558565121850> 
[17:00:37.869]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:37.869]  - attr(*, "resolved")= logi FALSE
[17:00:37.869]  - attr(*, "total_size")= num 616
[17:00:37.874] Packages to be attached in all futures: [n=0] 
[17:00:37.874] getGlobalsAndPackagesXApply() ... DONE
[17:00:37.874] Number of futures (= number of chunks): 2
[17:00:37.874] Launching 2 futures (chunks) ...
[17:00:37.874] Chunk #1 of 2 ...
[17:00:37.874]  - Finding globals in 'X' for chunk #1 ...
[17:00:37.874] getGlobalsAndPackages() ...
[17:00:37.875] Searching for globals...
[17:00:37.875] 
[17:00:37.875] Searching for globals ... DONE
[17:00:37.875] - globals: [0] <none>
[17:00:37.875] getGlobalsAndPackages() ... DONE
[17:00:37.875]    + additional globals found: [n=0] 
[17:00:37.875]    + additional namespaces needed: [n=0] 
[17:00:37.875]  - Finding globals in 'X' for chunk #1 ... DONE
[17:00:37.875]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:37.876]  - seeds: [2] <seeds>
[17:00:37.876]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:37.876] getGlobalsAndPackages() ...
[17:00:37.876] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:37.876] Resolving globals: FALSE
[17:00:37.876] Tweak future expression to call with '...' arguments ...
[17:00:37.876] {
[17:00:37.876]     do.call(function(...) {
[17:00:37.876]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:37.876]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:37.876]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:37.876]             on.exit(options(oopts), add = TRUE)
[17:00:37.876]         }
[17:00:37.876]         {
[17:00:37.876]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:37.876]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:37.876]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:37.876]                   envir = globalenv(), inherits = FALSE)
[17:00:37.876]                 ...future.FUN(...future.X_jj, ...)
[17:00:37.876]             })
[17:00:37.876]         }
[17:00:37.876]     }, args = future.call.arguments)
[17:00:37.876] }
[17:00:37.876] Tweak future expression to call with '...' arguments ... DONE
[17:00:37.877] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:37.877] 
[17:00:37.877] getGlobalsAndPackages() ... DONE
[17:00:37.877] run() for ‘Future’ ...
[17:00:37.877] - state: ‘created’
[17:00:37.878] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:00:37.892] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:37.892] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:00:37.892]   - Field: ‘node’
[17:00:37.892]   - Field: ‘label’
[17:00:37.892]   - Field: ‘local’
[17:00:37.892]   - Field: ‘owner’
[17:00:37.892]   - Field: ‘envir’
[17:00:37.892]   - Field: ‘workers’
[17:00:37.893]   - Field: ‘packages’
[17:00:37.893]   - Field: ‘gc’
[17:00:37.893]   - Field: ‘conditions’
[17:00:37.893]   - Field: ‘persistent’
[17:00:37.893]   - Field: ‘expr’
[17:00:37.893]   - Field: ‘uuid’
[17:00:37.893]   - Field: ‘seed’
[17:00:37.893]   - Field: ‘version’
[17:00:37.893]   - Field: ‘result’
[17:00:37.893]   - Field: ‘asynchronous’
[17:00:37.893]   - Field: ‘calls’
[17:00:37.894]   - Field: ‘globals’
[17:00:37.894]   - Field: ‘stdout’
[17:00:37.894]   - Field: ‘earlySignal’
[17:00:37.894]   - Field: ‘lazy’
[17:00:37.894]   - Field: ‘state’
[17:00:37.894] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:00:37.894] - Launch lazy future ...
[17:00:37.894] Packages needed by the future expression (n = 0): <none>
[17:00:37.894] Packages needed by future strategies (n = 0): <none>
[17:00:37.895] {
[17:00:37.895]     {
[17:00:37.895]         {
[17:00:37.895]             ...future.startTime <- base::Sys.time()
[17:00:37.895]             {
[17:00:37.895]                 {
[17:00:37.895]                   {
[17:00:37.895]                     {
[17:00:37.895]                       base::local({
[17:00:37.895]                         has_future <- base::requireNamespace("future", 
[17:00:37.895]                           quietly = TRUE)
[17:00:37.895]                         if (has_future) {
[17:00:37.895]                           ns <- base::getNamespace("future")
[17:00:37.895]                           version <- ns[[".package"]][["version"]]
[17:00:37.895]                           if (is.null(version)) 
[17:00:37.895]                             version <- utils::packageVersion("future")
[17:00:37.895]                         }
[17:00:37.895]                         else {
[17:00:37.895]                           version <- NULL
[17:00:37.895]                         }
[17:00:37.895]                         if (!has_future || version < "1.8.0") {
[17:00:37.895]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:37.895]                             "", base::R.version$version.string), 
[17:00:37.895]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:37.895]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:37.895]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:37.895]                               "release", "version")], collapse = " "), 
[17:00:37.895]                             hostname = base::Sys.info()[["nodename"]])
[17:00:37.895]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:37.895]                             info)
[17:00:37.895]                           info <- base::paste(info, collapse = "; ")
[17:00:37.895]                           if (!has_future) {
[17:00:37.895]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:37.895]                               info)
[17:00:37.895]                           }
[17:00:37.895]                           else {
[17:00:37.895]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:37.895]                               info, version)
[17:00:37.895]                           }
[17:00:37.895]                           base::stop(msg)
[17:00:37.895]                         }
[17:00:37.895]                       })
[17:00:37.895]                     }
[17:00:37.895]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:37.895]                     base::options(mc.cores = 1L)
[17:00:37.895]                   }
[17:00:37.895]                   ...future.strategy.old <- future::plan("list")
[17:00:37.895]                   options(future.plan = NULL)
[17:00:37.895]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:37.895]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:37.895]                 }
[17:00:37.895]                 ...future.workdir <- getwd()
[17:00:37.895]             }
[17:00:37.895]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:37.895]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:37.895]         }
[17:00:37.895]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:37.895]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:37.895]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:37.895]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:37.895]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:37.895]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:37.895]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:37.895]             base::names(...future.oldOptions))
[17:00:37.895]     }
[17:00:37.895]     if (FALSE) {
[17:00:37.895]     }
[17:00:37.895]     else {
[17:00:37.895]         if (TRUE) {
[17:00:37.895]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:37.895]                 open = "w")
[17:00:37.895]         }
[17:00:37.895]         else {
[17:00:37.895]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:37.895]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:37.895]         }
[17:00:37.895]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:37.895]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:37.895]             base::sink(type = "output", split = FALSE)
[17:00:37.895]             base::close(...future.stdout)
[17:00:37.895]         }, add = TRUE)
[17:00:37.895]     }
[17:00:37.895]     ...future.frame <- base::sys.nframe()
[17:00:37.895]     ...future.conditions <- base::list()
[17:00:37.895]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:37.895]     if (FALSE) {
[17:00:37.895]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:37.895]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:37.895]     }
[17:00:37.895]     ...future.result <- base::tryCatch({
[17:00:37.895]         base::withCallingHandlers({
[17:00:37.895]             ...future.value <- base::withVisible(base::local({
[17:00:37.895]                 ...future.makeSendCondition <- base::local({
[17:00:37.895]                   sendCondition <- NULL
[17:00:37.895]                   function(frame = 1L) {
[17:00:37.895]                     if (is.function(sendCondition)) 
[17:00:37.895]                       return(sendCondition)
[17:00:37.895]                     ns <- getNamespace("parallel")
[17:00:37.895]                     if (exists("sendData", mode = "function", 
[17:00:37.895]                       envir = ns)) {
[17:00:37.895]                       parallel_sendData <- get("sendData", mode = "function", 
[17:00:37.895]                         envir = ns)
[17:00:37.895]                       envir <- sys.frame(frame)
[17:00:37.895]                       master <- NULL
[17:00:37.895]                       while (!identical(envir, .GlobalEnv) && 
[17:00:37.895]                         !identical(envir, emptyenv())) {
[17:00:37.895]                         if (exists("master", mode = "list", envir = envir, 
[17:00:37.895]                           inherits = FALSE)) {
[17:00:37.895]                           master <- get("master", mode = "list", 
[17:00:37.895]                             envir = envir, inherits = FALSE)
[17:00:37.895]                           if (inherits(master, c("SOCKnode", 
[17:00:37.895]                             "SOCK0node"))) {
[17:00:37.895]                             sendCondition <<- function(cond) {
[17:00:37.895]                               data <- list(type = "VALUE", value = cond, 
[17:00:37.895]                                 success = TRUE)
[17:00:37.895]                               parallel_sendData(master, data)
[17:00:37.895]                             }
[17:00:37.895]                             return(sendCondition)
[17:00:37.895]                           }
[17:00:37.895]                         }
[17:00:37.895]                         frame <- frame + 1L
[17:00:37.895]                         envir <- sys.frame(frame)
[17:00:37.895]                       }
[17:00:37.895]                     }
[17:00:37.895]                     sendCondition <<- function(cond) NULL
[17:00:37.895]                   }
[17:00:37.895]                 })
[17:00:37.895]                 withCallingHandlers({
[17:00:37.895]                   {
[17:00:37.895]                     do.call(function(...) {
[17:00:37.895]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:37.895]                       if (!identical(...future.globals.maxSize.org, 
[17:00:37.895]                         ...future.globals.maxSize)) {
[17:00:37.895]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:37.895]                         on.exit(options(oopts), add = TRUE)
[17:00:37.895]                       }
[17:00:37.895]                       {
[17:00:37.895]                         lapply(seq_along(...future.elements_ii), 
[17:00:37.895]                           FUN = function(jj) {
[17:00:37.895]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:37.895]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:37.895]                               envir = globalenv(), inherits = FALSE)
[17:00:37.895]                             ...future.FUN(...future.X_jj, ...)
[17:00:37.895]                           })
[17:00:37.895]                       }
[17:00:37.895]                     }, args = future.call.arguments)
[17:00:37.895]                   }
[17:00:37.895]                 }, immediateCondition = function(cond) {
[17:00:37.895]                   sendCondition <- ...future.makeSendCondition()
[17:00:37.895]                   sendCondition(cond)
[17:00:37.895]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:37.895]                   {
[17:00:37.895]                     inherits <- base::inherits
[17:00:37.895]                     invokeRestart <- base::invokeRestart
[17:00:37.895]                     is.null <- base::is.null
[17:00:37.895]                     muffled <- FALSE
[17:00:37.895]                     if (inherits(cond, "message")) {
[17:00:37.895]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:37.895]                       if (muffled) 
[17:00:37.895]                         invokeRestart("muffleMessage")
[17:00:37.895]                     }
[17:00:37.895]                     else if (inherits(cond, "warning")) {
[17:00:37.895]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:37.895]                       if (muffled) 
[17:00:37.895]                         invokeRestart("muffleWarning")
[17:00:37.895]                     }
[17:00:37.895]                     else if (inherits(cond, "condition")) {
[17:00:37.895]                       if (!is.null(pattern)) {
[17:00:37.895]                         computeRestarts <- base::computeRestarts
[17:00:37.895]                         grepl <- base::grepl
[17:00:37.895]                         restarts <- computeRestarts(cond)
[17:00:37.895]                         for (restart in restarts) {
[17:00:37.895]                           name <- restart$name
[17:00:37.895]                           if (is.null(name)) 
[17:00:37.895]                             next
[17:00:37.895]                           if (!grepl(pattern, name)) 
[17:00:37.895]                             next
[17:00:37.895]                           invokeRestart(restart)
[17:00:37.895]                           muffled <- TRUE
[17:00:37.895]                           break
[17:00:37.895]                         }
[17:00:37.895]                       }
[17:00:37.895]                     }
[17:00:37.895]                     invisible(muffled)
[17:00:37.895]                   }
[17:00:37.895]                   muffleCondition(cond)
[17:00:37.895]                 })
[17:00:37.895]             }))
[17:00:37.895]             future::FutureResult(value = ...future.value$value, 
[17:00:37.895]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:37.895]                   ...future.rng), globalenv = if (FALSE) 
[17:00:37.895]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:37.895]                     ...future.globalenv.names))
[17:00:37.895]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:37.895]         }, condition = base::local({
[17:00:37.895]             c <- base::c
[17:00:37.895]             inherits <- base::inherits
[17:00:37.895]             invokeRestart <- base::invokeRestart
[17:00:37.895]             length <- base::length
[17:00:37.895]             list <- base::list
[17:00:37.895]             seq.int <- base::seq.int
[17:00:37.895]             signalCondition <- base::signalCondition
[17:00:37.895]             sys.calls <- base::sys.calls
[17:00:37.895]             `[[` <- base::`[[`
[17:00:37.895]             `+` <- base::`+`
[17:00:37.895]             `<<-` <- base::`<<-`
[17:00:37.895]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:37.895]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:37.895]                   3L)]
[17:00:37.895]             }
[17:00:37.895]             function(cond) {
[17:00:37.895]                 is_error <- inherits(cond, "error")
[17:00:37.895]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:37.895]                   NULL)
[17:00:37.895]                 if (is_error) {
[17:00:37.895]                   sessionInformation <- function() {
[17:00:37.895]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:37.895]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:37.895]                       search = base::search(), system = base::Sys.info())
[17:00:37.895]                   }
[17:00:37.895]                   ...future.conditions[[length(...future.conditions) + 
[17:00:37.895]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:37.895]                     cond$call), session = sessionInformation(), 
[17:00:37.895]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:37.895]                   signalCondition(cond)
[17:00:37.895]                 }
[17:00:37.895]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:37.895]                 "immediateCondition"))) {
[17:00:37.895]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:37.895]                   ...future.conditions[[length(...future.conditions) + 
[17:00:37.895]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:37.895]                   if (TRUE && !signal) {
[17:00:37.895]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:37.895]                     {
[17:00:37.895]                       inherits <- base::inherits
[17:00:37.895]                       invokeRestart <- base::invokeRestart
[17:00:37.895]                       is.null <- base::is.null
[17:00:37.895]                       muffled <- FALSE
[17:00:37.895]                       if (inherits(cond, "message")) {
[17:00:37.895]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:37.895]                         if (muffled) 
[17:00:37.895]                           invokeRestart("muffleMessage")
[17:00:37.895]                       }
[17:00:37.895]                       else if (inherits(cond, "warning")) {
[17:00:37.895]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:37.895]                         if (muffled) 
[17:00:37.895]                           invokeRestart("muffleWarning")
[17:00:37.895]                       }
[17:00:37.895]                       else if (inherits(cond, "condition")) {
[17:00:37.895]                         if (!is.null(pattern)) {
[17:00:37.895]                           computeRestarts <- base::computeRestarts
[17:00:37.895]                           grepl <- base::grepl
[17:00:37.895]                           restarts <- computeRestarts(cond)
[17:00:37.895]                           for (restart in restarts) {
[17:00:37.895]                             name <- restart$name
[17:00:37.895]                             if (is.null(name)) 
[17:00:37.895]                               next
[17:00:37.895]                             if (!grepl(pattern, name)) 
[17:00:37.895]                               next
[17:00:37.895]                             invokeRestart(restart)
[17:00:37.895]                             muffled <- TRUE
[17:00:37.895]                             break
[17:00:37.895]                           }
[17:00:37.895]                         }
[17:00:37.895]                       }
[17:00:37.895]                       invisible(muffled)
[17:00:37.895]                     }
[17:00:37.895]                     muffleCondition(cond, pattern = "^muffle")
[17:00:37.895]                   }
[17:00:37.895]                 }
[17:00:37.895]                 else {
[17:00:37.895]                   if (TRUE) {
[17:00:37.895]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:37.895]                     {
[17:00:37.895]                       inherits <- base::inherits
[17:00:37.895]                       invokeRestart <- base::invokeRestart
[17:00:37.895]                       is.null <- base::is.null
[17:00:37.895]                       muffled <- FALSE
[17:00:37.895]                       if (inherits(cond, "message")) {
[17:00:37.895]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:37.895]                         if (muffled) 
[17:00:37.895]                           invokeRestart("muffleMessage")
[17:00:37.895]                       }
[17:00:37.895]                       else if (inherits(cond, "warning")) {
[17:00:37.895]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:37.895]                         if (muffled) 
[17:00:37.895]                           invokeRestart("muffleWarning")
[17:00:37.895]                       }
[17:00:37.895]                       else if (inherits(cond, "condition")) {
[17:00:37.895]                         if (!is.null(pattern)) {
[17:00:37.895]                           computeRestarts <- base::computeRestarts
[17:00:37.895]                           grepl <- base::grepl
[17:00:37.895]                           restarts <- computeRestarts(cond)
[17:00:37.895]                           for (restart in restarts) {
[17:00:37.895]                             name <- restart$name
[17:00:37.895]                             if (is.null(name)) 
[17:00:37.895]                               next
[17:00:37.895]                             if (!grepl(pattern, name)) 
[17:00:37.895]                               next
[17:00:37.895]                             invokeRestart(restart)
[17:00:37.895]                             muffled <- TRUE
[17:00:37.895]                             break
[17:00:37.895]                           }
[17:00:37.895]                         }
[17:00:37.895]                       }
[17:00:37.895]                       invisible(muffled)
[17:00:37.895]                     }
[17:00:37.895]                     muffleCondition(cond, pattern = "^muffle")
[17:00:37.895]                   }
[17:00:37.895]                 }
[17:00:37.895]             }
[17:00:37.895]         }))
[17:00:37.895]     }, error = function(ex) {
[17:00:37.895]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:37.895]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:37.895]                 ...future.rng), started = ...future.startTime, 
[17:00:37.895]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:37.895]             version = "1.8"), class = "FutureResult")
[17:00:37.895]     }, finally = {
[17:00:37.895]         if (!identical(...future.workdir, getwd())) 
[17:00:37.895]             setwd(...future.workdir)
[17:00:37.895]         {
[17:00:37.895]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:37.895]                 ...future.oldOptions$nwarnings <- NULL
[17:00:37.895]             }
[17:00:37.895]             base::options(...future.oldOptions)
[17:00:37.895]             if (.Platform$OS.type == "windows") {
[17:00:37.895]                 old_names <- names(...future.oldEnvVars)
[17:00:37.895]                 envs <- base::Sys.getenv()
[17:00:37.895]                 names <- names(envs)
[17:00:37.895]                 common <- intersect(names, old_names)
[17:00:37.895]                 added <- setdiff(names, old_names)
[17:00:37.895]                 removed <- setdiff(old_names, names)
[17:00:37.895]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:37.895]                   envs[common]]
[17:00:37.895]                 NAMES <- toupper(changed)
[17:00:37.895]                 args <- list()
[17:00:37.895]                 for (kk in seq_along(NAMES)) {
[17:00:37.895]                   name <- changed[[kk]]
[17:00:37.895]                   NAME <- NAMES[[kk]]
[17:00:37.895]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:37.895]                     next
[17:00:37.895]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:37.895]                 }
[17:00:37.895]                 NAMES <- toupper(added)
[17:00:37.895]                 for (kk in seq_along(NAMES)) {
[17:00:37.895]                   name <- added[[kk]]
[17:00:37.895]                   NAME <- NAMES[[kk]]
[17:00:37.895]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:37.895]                     next
[17:00:37.895]                   args[[name]] <- ""
[17:00:37.895]                 }
[17:00:37.895]                 NAMES <- toupper(removed)
[17:00:37.895]                 for (kk in seq_along(NAMES)) {
[17:00:37.895]                   name <- removed[[kk]]
[17:00:37.895]                   NAME <- NAMES[[kk]]
[17:00:37.895]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:37.895]                     next
[17:00:37.895]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:37.895]                 }
[17:00:37.895]                 if (length(args) > 0) 
[17:00:37.895]                   base::do.call(base::Sys.setenv, args = args)
[17:00:37.895]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:37.895]             }
[17:00:37.895]             else {
[17:00:37.895]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:37.895]             }
[17:00:37.895]             {
[17:00:37.895]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:37.895]                   0L) {
[17:00:37.895]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:37.895]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:37.895]                   base::options(opts)
[17:00:37.895]                 }
[17:00:37.895]                 {
[17:00:37.895]                   {
[17:00:37.895]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:37.895]                     NULL
[17:00:37.895]                   }
[17:00:37.895]                   options(future.plan = NULL)
[17:00:37.895]                   if (is.na(NA_character_)) 
[17:00:37.895]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:37.895]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:37.895]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:37.895]                     .init = FALSE)
[17:00:37.895]                 }
[17:00:37.895]             }
[17:00:37.895]         }
[17:00:37.895]     })
[17:00:37.895]     if (TRUE) {
[17:00:37.895]         base::sink(type = "output", split = FALSE)
[17:00:37.895]         if (TRUE) {
[17:00:37.895]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:37.895]         }
[17:00:37.895]         else {
[17:00:37.895]             ...future.result["stdout"] <- base::list(NULL)
[17:00:37.895]         }
[17:00:37.895]         base::close(...future.stdout)
[17:00:37.895]         ...future.stdout <- NULL
[17:00:37.895]     }
[17:00:37.895]     ...future.result$conditions <- ...future.conditions
[17:00:37.895]     ...future.result$finished <- base::Sys.time()
[17:00:37.895]     ...future.result
[17:00:37.895] }
[17:00:37.898] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[17:00:37.898] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[17:00:37.898] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[17:00:37.899] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:00:37.899] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:00:37.899] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:00:37.900] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:00:37.900] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:00:37.900] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:00:37.900] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:00:37.901] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:00:37.901] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[17:00:37.901] MultisessionFuture started
[17:00:37.901] - Launch lazy future ... done
[17:00:37.902] run() for ‘MultisessionFuture’ ... done
[17:00:37.902] Created future:
[17:00:37.902] MultisessionFuture:
[17:00:37.902] Label: ‘future_replicate-1’
[17:00:37.902] Expression:
[17:00:37.902] {
[17:00:37.902]     do.call(function(...) {
[17:00:37.902]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:37.902]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:37.902]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:37.902]             on.exit(options(oopts), add = TRUE)
[17:00:37.902]         }
[17:00:37.902]         {
[17:00:37.902]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:37.902]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:37.902]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:37.902]                   envir = globalenv(), inherits = FALSE)
[17:00:37.902]                 ...future.FUN(...future.X_jj, ...)
[17:00:37.902]             })
[17:00:37.902]         }
[17:00:37.902]     }, args = future.call.arguments)
[17:00:37.902] }
[17:00:37.902] Lazy evaluation: FALSE
[17:00:37.902] Asynchronous evaluation: TRUE
[17:00:37.902] Local evaluation: TRUE
[17:00:37.902] Environment: R_GlobalEnv
[17:00:37.902] Capture standard output: TRUE
[17:00:37.902] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:37.902] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:37.902] Packages: <none>
[17:00:37.902] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:37.902] Resolved: FALSE
[17:00:37.902] Value: <not collected>
[17:00:37.902] Conditions captured: <none>
[17:00:37.902] Early signaling: FALSE
[17:00:37.902] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:37.902] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:37.913] Chunk #1 of 2 ... DONE
[17:00:37.914] Chunk #2 of 2 ...
[17:00:37.914]  - Finding globals in 'X' for chunk #2 ...
[17:00:37.914] getGlobalsAndPackages() ...
[17:00:37.914] Searching for globals...
[17:00:37.914] 
[17:00:37.914] Searching for globals ... DONE
[17:00:37.914] - globals: [0] <none>
[17:00:37.914] getGlobalsAndPackages() ... DONE
[17:00:37.915]    + additional globals found: [n=0] 
[17:00:37.915]    + additional namespaces needed: [n=0] 
[17:00:37.915]  - Finding globals in 'X' for chunk #2 ... DONE
[17:00:37.915]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:37.915]  - seeds: [3] <seeds>
[17:00:37.915]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:37.915] getGlobalsAndPackages() ...
[17:00:37.915] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:37.915] Resolving globals: FALSE
[17:00:37.916] Tweak future expression to call with '...' arguments ...
[17:00:37.916] {
[17:00:37.916]     do.call(function(...) {
[17:00:37.916]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:37.916]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:37.916]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:37.916]             on.exit(options(oopts), add = TRUE)
[17:00:37.916]         }
[17:00:37.916]         {
[17:00:37.916]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:37.916]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:37.916]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:37.916]                   envir = globalenv(), inherits = FALSE)
[17:00:37.916]                 ...future.FUN(...future.X_jj, ...)
[17:00:37.916]             })
[17:00:37.916]         }
[17:00:37.916]     }, args = future.call.arguments)
[17:00:37.916] }
[17:00:37.916] Tweak future expression to call with '...' arguments ... DONE
[17:00:37.916] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:37.916] 
[17:00:37.917] getGlobalsAndPackages() ... DONE
[17:00:37.917] run() for ‘Future’ ...
[17:00:37.917] - state: ‘created’
[17:00:37.917] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:00:37.933] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:37.933] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:00:37.933]   - Field: ‘node’
[17:00:37.933]   - Field: ‘label’
[17:00:37.933]   - Field: ‘local’
[17:00:37.933]   - Field: ‘owner’
[17:00:37.933]   - Field: ‘envir’
[17:00:37.933]   - Field: ‘workers’
[17:00:37.934]   - Field: ‘packages’
[17:00:37.934]   - Field: ‘gc’
[17:00:37.934]   - Field: ‘conditions’
[17:00:37.934]   - Field: ‘persistent’
[17:00:37.934]   - Field: ‘expr’
[17:00:37.934]   - Field: ‘uuid’
[17:00:37.934]   - Field: ‘seed’
[17:00:37.934]   - Field: ‘version’
[17:00:37.934]   - Field: ‘result’
[17:00:37.934]   - Field: ‘asynchronous’
[17:00:37.934]   - Field: ‘calls’
[17:00:37.935]   - Field: ‘globals’
[17:00:37.935]   - Field: ‘stdout’
[17:00:37.935]   - Field: ‘earlySignal’
[17:00:37.935]   - Field: ‘lazy’
[17:00:37.935]   - Field: ‘state’
[17:00:37.935] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:00:37.935] - Launch lazy future ...
[17:00:37.935] Packages needed by the future expression (n = 0): <none>
[17:00:37.936] Packages needed by future strategies (n = 0): <none>
[17:00:37.936] {
[17:00:37.936]     {
[17:00:37.936]         {
[17:00:37.936]             ...future.startTime <- base::Sys.time()
[17:00:37.936]             {
[17:00:37.936]                 {
[17:00:37.936]                   {
[17:00:37.936]                     {
[17:00:37.936]                       base::local({
[17:00:37.936]                         has_future <- base::requireNamespace("future", 
[17:00:37.936]                           quietly = TRUE)
[17:00:37.936]                         if (has_future) {
[17:00:37.936]                           ns <- base::getNamespace("future")
[17:00:37.936]                           version <- ns[[".package"]][["version"]]
[17:00:37.936]                           if (is.null(version)) 
[17:00:37.936]                             version <- utils::packageVersion("future")
[17:00:37.936]                         }
[17:00:37.936]                         else {
[17:00:37.936]                           version <- NULL
[17:00:37.936]                         }
[17:00:37.936]                         if (!has_future || version < "1.8.0") {
[17:00:37.936]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:37.936]                             "", base::R.version$version.string), 
[17:00:37.936]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:37.936]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:37.936]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:37.936]                               "release", "version")], collapse = " "), 
[17:00:37.936]                             hostname = base::Sys.info()[["nodename"]])
[17:00:37.936]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:37.936]                             info)
[17:00:37.936]                           info <- base::paste(info, collapse = "; ")
[17:00:37.936]                           if (!has_future) {
[17:00:37.936]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:37.936]                               info)
[17:00:37.936]                           }
[17:00:37.936]                           else {
[17:00:37.936]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:37.936]                               info, version)
[17:00:37.936]                           }
[17:00:37.936]                           base::stop(msg)
[17:00:37.936]                         }
[17:00:37.936]                       })
[17:00:37.936]                     }
[17:00:37.936]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:37.936]                     base::options(mc.cores = 1L)
[17:00:37.936]                   }
[17:00:37.936]                   ...future.strategy.old <- future::plan("list")
[17:00:37.936]                   options(future.plan = NULL)
[17:00:37.936]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:37.936]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:37.936]                 }
[17:00:37.936]                 ...future.workdir <- getwd()
[17:00:37.936]             }
[17:00:37.936]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:37.936]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:37.936]         }
[17:00:37.936]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:37.936]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:37.936]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:37.936]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:37.936]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:37.936]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:37.936]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:37.936]             base::names(...future.oldOptions))
[17:00:37.936]     }
[17:00:37.936]     if (FALSE) {
[17:00:37.936]     }
[17:00:37.936]     else {
[17:00:37.936]         if (TRUE) {
[17:00:37.936]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:37.936]                 open = "w")
[17:00:37.936]         }
[17:00:37.936]         else {
[17:00:37.936]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:37.936]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:37.936]         }
[17:00:37.936]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:37.936]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:37.936]             base::sink(type = "output", split = FALSE)
[17:00:37.936]             base::close(...future.stdout)
[17:00:37.936]         }, add = TRUE)
[17:00:37.936]     }
[17:00:37.936]     ...future.frame <- base::sys.nframe()
[17:00:37.936]     ...future.conditions <- base::list()
[17:00:37.936]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:37.936]     if (FALSE) {
[17:00:37.936]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:37.936]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:37.936]     }
[17:00:37.936]     ...future.result <- base::tryCatch({
[17:00:37.936]         base::withCallingHandlers({
[17:00:37.936]             ...future.value <- base::withVisible(base::local({
[17:00:37.936]                 ...future.makeSendCondition <- base::local({
[17:00:37.936]                   sendCondition <- NULL
[17:00:37.936]                   function(frame = 1L) {
[17:00:37.936]                     if (is.function(sendCondition)) 
[17:00:37.936]                       return(sendCondition)
[17:00:37.936]                     ns <- getNamespace("parallel")
[17:00:37.936]                     if (exists("sendData", mode = "function", 
[17:00:37.936]                       envir = ns)) {
[17:00:37.936]                       parallel_sendData <- get("sendData", mode = "function", 
[17:00:37.936]                         envir = ns)
[17:00:37.936]                       envir <- sys.frame(frame)
[17:00:37.936]                       master <- NULL
[17:00:37.936]                       while (!identical(envir, .GlobalEnv) && 
[17:00:37.936]                         !identical(envir, emptyenv())) {
[17:00:37.936]                         if (exists("master", mode = "list", envir = envir, 
[17:00:37.936]                           inherits = FALSE)) {
[17:00:37.936]                           master <- get("master", mode = "list", 
[17:00:37.936]                             envir = envir, inherits = FALSE)
[17:00:37.936]                           if (inherits(master, c("SOCKnode", 
[17:00:37.936]                             "SOCK0node"))) {
[17:00:37.936]                             sendCondition <<- function(cond) {
[17:00:37.936]                               data <- list(type = "VALUE", value = cond, 
[17:00:37.936]                                 success = TRUE)
[17:00:37.936]                               parallel_sendData(master, data)
[17:00:37.936]                             }
[17:00:37.936]                             return(sendCondition)
[17:00:37.936]                           }
[17:00:37.936]                         }
[17:00:37.936]                         frame <- frame + 1L
[17:00:37.936]                         envir <- sys.frame(frame)
[17:00:37.936]                       }
[17:00:37.936]                     }
[17:00:37.936]                     sendCondition <<- function(cond) NULL
[17:00:37.936]                   }
[17:00:37.936]                 })
[17:00:37.936]                 withCallingHandlers({
[17:00:37.936]                   {
[17:00:37.936]                     do.call(function(...) {
[17:00:37.936]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:37.936]                       if (!identical(...future.globals.maxSize.org, 
[17:00:37.936]                         ...future.globals.maxSize)) {
[17:00:37.936]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:37.936]                         on.exit(options(oopts), add = TRUE)
[17:00:37.936]                       }
[17:00:37.936]                       {
[17:00:37.936]                         lapply(seq_along(...future.elements_ii), 
[17:00:37.936]                           FUN = function(jj) {
[17:00:37.936]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:37.936]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:37.936]                               envir = globalenv(), inherits = FALSE)
[17:00:37.936]                             ...future.FUN(...future.X_jj, ...)
[17:00:37.936]                           })
[17:00:37.936]                       }
[17:00:37.936]                     }, args = future.call.arguments)
[17:00:37.936]                   }
[17:00:37.936]                 }, immediateCondition = function(cond) {
[17:00:37.936]                   sendCondition <- ...future.makeSendCondition()
[17:00:37.936]                   sendCondition(cond)
[17:00:37.936]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:37.936]                   {
[17:00:37.936]                     inherits <- base::inherits
[17:00:37.936]                     invokeRestart <- base::invokeRestart
[17:00:37.936]                     is.null <- base::is.null
[17:00:37.936]                     muffled <- FALSE
[17:00:37.936]                     if (inherits(cond, "message")) {
[17:00:37.936]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:37.936]                       if (muffled) 
[17:00:37.936]                         invokeRestart("muffleMessage")
[17:00:37.936]                     }
[17:00:37.936]                     else if (inherits(cond, "warning")) {
[17:00:37.936]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:37.936]                       if (muffled) 
[17:00:37.936]                         invokeRestart("muffleWarning")
[17:00:37.936]                     }
[17:00:37.936]                     else if (inherits(cond, "condition")) {
[17:00:37.936]                       if (!is.null(pattern)) {
[17:00:37.936]                         computeRestarts <- base::computeRestarts
[17:00:37.936]                         grepl <- base::grepl
[17:00:37.936]                         restarts <- computeRestarts(cond)
[17:00:37.936]                         for (restart in restarts) {
[17:00:37.936]                           name <- restart$name
[17:00:37.936]                           if (is.null(name)) 
[17:00:37.936]                             next
[17:00:37.936]                           if (!grepl(pattern, name)) 
[17:00:37.936]                             next
[17:00:37.936]                           invokeRestart(restart)
[17:00:37.936]                           muffled <- TRUE
[17:00:37.936]                           break
[17:00:37.936]                         }
[17:00:37.936]                       }
[17:00:37.936]                     }
[17:00:37.936]                     invisible(muffled)
[17:00:37.936]                   }
[17:00:37.936]                   muffleCondition(cond)
[17:00:37.936]                 })
[17:00:37.936]             }))
[17:00:37.936]             future::FutureResult(value = ...future.value$value, 
[17:00:37.936]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:37.936]                   ...future.rng), globalenv = if (FALSE) 
[17:00:37.936]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:37.936]                     ...future.globalenv.names))
[17:00:37.936]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:37.936]         }, condition = base::local({
[17:00:37.936]             c <- base::c
[17:00:37.936]             inherits <- base::inherits
[17:00:37.936]             invokeRestart <- base::invokeRestart
[17:00:37.936]             length <- base::length
[17:00:37.936]             list <- base::list
[17:00:37.936]             seq.int <- base::seq.int
[17:00:37.936]             signalCondition <- base::signalCondition
[17:00:37.936]             sys.calls <- base::sys.calls
[17:00:37.936]             `[[` <- base::`[[`
[17:00:37.936]             `+` <- base::`+`
[17:00:37.936]             `<<-` <- base::`<<-`
[17:00:37.936]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:37.936]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:37.936]                   3L)]
[17:00:37.936]             }
[17:00:37.936]             function(cond) {
[17:00:37.936]                 is_error <- inherits(cond, "error")
[17:00:37.936]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:37.936]                   NULL)
[17:00:37.936]                 if (is_error) {
[17:00:37.936]                   sessionInformation <- function() {
[17:00:37.936]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:37.936]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:37.936]                       search = base::search(), system = base::Sys.info())
[17:00:37.936]                   }
[17:00:37.936]                   ...future.conditions[[length(...future.conditions) + 
[17:00:37.936]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:37.936]                     cond$call), session = sessionInformation(), 
[17:00:37.936]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:37.936]                   signalCondition(cond)
[17:00:37.936]                 }
[17:00:37.936]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:37.936]                 "immediateCondition"))) {
[17:00:37.936]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:37.936]                   ...future.conditions[[length(...future.conditions) + 
[17:00:37.936]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:37.936]                   if (TRUE && !signal) {
[17:00:37.936]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:37.936]                     {
[17:00:37.936]                       inherits <- base::inherits
[17:00:37.936]                       invokeRestart <- base::invokeRestart
[17:00:37.936]                       is.null <- base::is.null
[17:00:37.936]                       muffled <- FALSE
[17:00:37.936]                       if (inherits(cond, "message")) {
[17:00:37.936]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:37.936]                         if (muffled) 
[17:00:37.936]                           invokeRestart("muffleMessage")
[17:00:37.936]                       }
[17:00:37.936]                       else if (inherits(cond, "warning")) {
[17:00:37.936]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:37.936]                         if (muffled) 
[17:00:37.936]                           invokeRestart("muffleWarning")
[17:00:37.936]                       }
[17:00:37.936]                       else if (inherits(cond, "condition")) {
[17:00:37.936]                         if (!is.null(pattern)) {
[17:00:37.936]                           computeRestarts <- base::computeRestarts
[17:00:37.936]                           grepl <- base::grepl
[17:00:37.936]                           restarts <- computeRestarts(cond)
[17:00:37.936]                           for (restart in restarts) {
[17:00:37.936]                             name <- restart$name
[17:00:37.936]                             if (is.null(name)) 
[17:00:37.936]                               next
[17:00:37.936]                             if (!grepl(pattern, name)) 
[17:00:37.936]                               next
[17:00:37.936]                             invokeRestart(restart)
[17:00:37.936]                             muffled <- TRUE
[17:00:37.936]                             break
[17:00:37.936]                           }
[17:00:37.936]                         }
[17:00:37.936]                       }
[17:00:37.936]                       invisible(muffled)
[17:00:37.936]                     }
[17:00:37.936]                     muffleCondition(cond, pattern = "^muffle")
[17:00:37.936]                   }
[17:00:37.936]                 }
[17:00:37.936]                 else {
[17:00:37.936]                   if (TRUE) {
[17:00:37.936]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:37.936]                     {
[17:00:37.936]                       inherits <- base::inherits
[17:00:37.936]                       invokeRestart <- base::invokeRestart
[17:00:37.936]                       is.null <- base::is.null
[17:00:37.936]                       muffled <- FALSE
[17:00:37.936]                       if (inherits(cond, "message")) {
[17:00:37.936]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:37.936]                         if (muffled) 
[17:00:37.936]                           invokeRestart("muffleMessage")
[17:00:37.936]                       }
[17:00:37.936]                       else if (inherits(cond, "warning")) {
[17:00:37.936]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:37.936]                         if (muffled) 
[17:00:37.936]                           invokeRestart("muffleWarning")
[17:00:37.936]                       }
[17:00:37.936]                       else if (inherits(cond, "condition")) {
[17:00:37.936]                         if (!is.null(pattern)) {
[17:00:37.936]                           computeRestarts <- base::computeRestarts
[17:00:37.936]                           grepl <- base::grepl
[17:00:37.936]                           restarts <- computeRestarts(cond)
[17:00:37.936]                           for (restart in restarts) {
[17:00:37.936]                             name <- restart$name
[17:00:37.936]                             if (is.null(name)) 
[17:00:37.936]                               next
[17:00:37.936]                             if (!grepl(pattern, name)) 
[17:00:37.936]                               next
[17:00:37.936]                             invokeRestart(restart)
[17:00:37.936]                             muffled <- TRUE
[17:00:37.936]                             break
[17:00:37.936]                           }
[17:00:37.936]                         }
[17:00:37.936]                       }
[17:00:37.936]                       invisible(muffled)
[17:00:37.936]                     }
[17:00:37.936]                     muffleCondition(cond, pattern = "^muffle")
[17:00:37.936]                   }
[17:00:37.936]                 }
[17:00:37.936]             }
[17:00:37.936]         }))
[17:00:37.936]     }, error = function(ex) {
[17:00:37.936]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:37.936]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:37.936]                 ...future.rng), started = ...future.startTime, 
[17:00:37.936]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:37.936]             version = "1.8"), class = "FutureResult")
[17:00:37.936]     }, finally = {
[17:00:37.936]         if (!identical(...future.workdir, getwd())) 
[17:00:37.936]             setwd(...future.workdir)
[17:00:37.936]         {
[17:00:37.936]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:37.936]                 ...future.oldOptions$nwarnings <- NULL
[17:00:37.936]             }
[17:00:37.936]             base::options(...future.oldOptions)
[17:00:37.936]             if (.Platform$OS.type == "windows") {
[17:00:37.936]                 old_names <- names(...future.oldEnvVars)
[17:00:37.936]                 envs <- base::Sys.getenv()
[17:00:37.936]                 names <- names(envs)
[17:00:37.936]                 common <- intersect(names, old_names)
[17:00:37.936]                 added <- setdiff(names, old_names)
[17:00:37.936]                 removed <- setdiff(old_names, names)
[17:00:37.936]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:37.936]                   envs[common]]
[17:00:37.936]                 NAMES <- toupper(changed)
[17:00:37.936]                 args <- list()
[17:00:37.936]                 for (kk in seq_along(NAMES)) {
[17:00:37.936]                   name <- changed[[kk]]
[17:00:37.936]                   NAME <- NAMES[[kk]]
[17:00:37.936]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:37.936]                     next
[17:00:37.936]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:37.936]                 }
[17:00:37.936]                 NAMES <- toupper(added)
[17:00:37.936]                 for (kk in seq_along(NAMES)) {
[17:00:37.936]                   name <- added[[kk]]
[17:00:37.936]                   NAME <- NAMES[[kk]]
[17:00:37.936]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:37.936]                     next
[17:00:37.936]                   args[[name]] <- ""
[17:00:37.936]                 }
[17:00:37.936]                 NAMES <- toupper(removed)
[17:00:37.936]                 for (kk in seq_along(NAMES)) {
[17:00:37.936]                   name <- removed[[kk]]
[17:00:37.936]                   NAME <- NAMES[[kk]]
[17:00:37.936]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:37.936]                     next
[17:00:37.936]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:37.936]                 }
[17:00:37.936]                 if (length(args) > 0) 
[17:00:37.936]                   base::do.call(base::Sys.setenv, args = args)
[17:00:37.936]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:37.936]             }
[17:00:37.936]             else {
[17:00:37.936]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:37.936]             }
[17:00:37.936]             {
[17:00:37.936]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:37.936]                   0L) {
[17:00:37.936]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:37.936]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:37.936]                   base::options(opts)
[17:00:37.936]                 }
[17:00:37.936]                 {
[17:00:37.936]                   {
[17:00:37.936]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:37.936]                     NULL
[17:00:37.936]                   }
[17:00:37.936]                   options(future.plan = NULL)
[17:00:37.936]                   if (is.na(NA_character_)) 
[17:00:37.936]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:37.936]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:37.936]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:37.936]                     .init = FALSE)
[17:00:37.936]                 }
[17:00:37.936]             }
[17:00:37.936]         }
[17:00:37.936]     })
[17:00:37.936]     if (TRUE) {
[17:00:37.936]         base::sink(type = "output", split = FALSE)
[17:00:37.936]         if (TRUE) {
[17:00:37.936]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:37.936]         }
[17:00:37.936]         else {
[17:00:37.936]             ...future.result["stdout"] <- base::list(NULL)
[17:00:37.936]         }
[17:00:37.936]         base::close(...future.stdout)
[17:00:37.936]         ...future.stdout <- NULL
[17:00:37.936]     }
[17:00:37.936]     ...future.result$conditions <- ...future.conditions
[17:00:37.936]     ...future.result$finished <- base::Sys.time()
[17:00:37.936]     ...future.result
[17:00:37.936] }
[17:00:37.939] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[17:00:37.939] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[17:00:37.939] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[17:00:37.940] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:00:37.940] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:00:37.940] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:00:37.941] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:00:37.941] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:00:37.941] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:00:37.941] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:00:37.942] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:00:37.942] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[17:00:37.942] MultisessionFuture started
[17:00:37.942] - Launch lazy future ... done
[17:00:37.942] run() for ‘MultisessionFuture’ ... done
[17:00:37.943] Created future:
[17:00:37.943] MultisessionFuture:
[17:00:37.943] Label: ‘future_replicate-2’
[17:00:37.943] Expression:
[17:00:37.943] {
[17:00:37.943]     do.call(function(...) {
[17:00:37.943]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:37.943]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:37.943]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:37.943]             on.exit(options(oopts), add = TRUE)
[17:00:37.943]         }
[17:00:37.943]         {
[17:00:37.943]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:37.943]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:37.943]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:37.943]                   envir = globalenv(), inherits = FALSE)
[17:00:37.943]                 ...future.FUN(...future.X_jj, ...)
[17:00:37.943]             })
[17:00:37.943]         }
[17:00:37.943]     }, args = future.call.arguments)
[17:00:37.943] }
[17:00:37.943] Lazy evaluation: FALSE
[17:00:37.943] Asynchronous evaluation: TRUE
[17:00:37.943] Local evaluation: TRUE
[17:00:37.943] Environment: R_GlobalEnv
[17:00:37.943] Capture standard output: TRUE
[17:00:37.943] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:37.943] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:37.943] Packages: <none>
[17:00:37.943] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:37.943] Resolved: FALSE
[17:00:37.943] Value: <not collected>
[17:00:37.943] Conditions captured: <none>
[17:00:37.943] Early signaling: FALSE
[17:00:37.943] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:37.943] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:37.954] Chunk #2 of 2 ... DONE
[17:00:37.954] Launching 2 futures (chunks) ... DONE
[17:00:37.955] Resolving 2 futures (chunks) ...
[17:00:37.955] resolve() on list ...
[17:00:37.955]  recursive: 0
[17:00:37.955]  length: 2
[17:00:37.955] 
[17:00:37.956] receiveMessageFromWorker() for ClusterFuture ...
[17:00:37.956] - Validating connection of MultisessionFuture
[17:00:37.956] - received message: FutureResult
[17:00:37.956] - Received FutureResult
[17:00:37.956] - Erased future from FutureRegistry
[17:00:37.956] result() for ClusterFuture ...
[17:00:37.956] - result already collected: FutureResult
[17:00:37.956] result() for ClusterFuture ... done
[17:00:37.956] receiveMessageFromWorker() for ClusterFuture ... done
[17:00:37.957] Future #1
[17:00:37.957] result() for ClusterFuture ...
[17:00:37.957] - result already collected: FutureResult
[17:00:37.957] result() for ClusterFuture ... done
[17:00:37.957] result() for ClusterFuture ...
[17:00:37.957] - result already collected: FutureResult
[17:00:37.957] result() for ClusterFuture ... done
[17:00:37.957] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:00:37.957] - nx: 2
[17:00:37.957] - relay: TRUE
[17:00:37.957] - stdout: TRUE
[17:00:37.957] - signal: TRUE
[17:00:37.958] - resignal: FALSE
[17:00:37.958] - force: TRUE
[17:00:37.958] - relayed: [n=2] FALSE, FALSE
[17:00:37.958] - queued futures: [n=2] FALSE, FALSE
[17:00:37.958]  - until=1
[17:00:37.958]  - relaying element #1
[17:00:37.958] result() for ClusterFuture ...
[17:00:37.958] - result already collected: FutureResult
[17:00:37.958] result() for ClusterFuture ... done
[17:00:37.958] result() for ClusterFuture ...
[17:00:37.958] - result already collected: FutureResult
[17:00:37.958] result() for ClusterFuture ... done
[17:00:37.959] result() for ClusterFuture ...
[17:00:37.959] - result already collected: FutureResult
[17:00:37.959] result() for ClusterFuture ... done
[17:00:37.959] result() for ClusterFuture ...
[17:00:37.959] - result already collected: FutureResult
[17:00:37.959] result() for ClusterFuture ... done
[17:00:37.959] - relayed: [n=2] TRUE, FALSE
[17:00:37.959] - queued futures: [n=2] TRUE, FALSE
[17:00:37.959] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:00:37.959]  length: 1 (resolved future 1)
[17:00:37.985] receiveMessageFromWorker() for ClusterFuture ...
[17:00:37.985] - Validating connection of MultisessionFuture
[17:00:37.985] - received message: FutureResult
[17:00:37.986] - Received FutureResult
[17:00:37.986] - Erased future from FutureRegistry
[17:00:37.986] result() for ClusterFuture ...
[17:00:37.986] - result already collected: FutureResult
[17:00:37.986] result() for ClusterFuture ... done
[17:00:37.986] receiveMessageFromWorker() for ClusterFuture ... done
[17:00:37.986] Future #2
[17:00:37.986] result() for ClusterFuture ...
[17:00:37.986] - result already collected: FutureResult
[17:00:37.986] result() for ClusterFuture ... done
[17:00:37.986] result() for ClusterFuture ...
[17:00:37.987] - result already collected: FutureResult
[17:00:37.987] result() for ClusterFuture ... done
[17:00:37.987] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:00:37.987] - nx: 2
[17:00:37.987] - relay: TRUE
[17:00:37.987] - stdout: TRUE
[17:00:37.987] - signal: TRUE
[17:00:37.987] - resignal: FALSE
[17:00:37.987] - force: TRUE
[17:00:37.987] - relayed: [n=2] TRUE, FALSE
[17:00:37.987] - queued futures: [n=2] TRUE, FALSE
[17:00:37.988]  - until=2
[17:00:37.988]  - relaying element #2
[17:00:37.988] result() for ClusterFuture ...
[17:00:37.988] - result already collected: FutureResult
[17:00:37.988] result() for ClusterFuture ... done
[17:00:37.988] result() for ClusterFuture ...
[17:00:37.988] - result already collected: FutureResult
[17:00:37.988] result() for ClusterFuture ... done
[17:00:37.988] result() for ClusterFuture ...
[17:00:37.988] - result already collected: FutureResult
[17:00:37.988] result() for ClusterFuture ... done
[17:00:37.989] result() for ClusterFuture ...
[17:00:37.989] - result already collected: FutureResult
[17:00:37.989] result() for ClusterFuture ... done
[17:00:37.989] - relayed: [n=2] TRUE, TRUE
[17:00:37.989] - queued futures: [n=2] TRUE, TRUE
[17:00:37.989] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:00:37.989]  length: 0 (resolved future 2)
[17:00:37.989] Relaying remaining futures
[17:00:37.989] signalConditionsASAP(NULL, pos=0) ...
[17:00:37.989] - nx: 2
[17:00:37.989] - relay: TRUE
[17:00:37.990] - stdout: TRUE
[17:00:37.990] - signal: TRUE
[17:00:37.990] - resignal: FALSE
[17:00:37.990] - force: TRUE
[17:00:37.990] - relayed: [n=2] TRUE, TRUE
[17:00:37.990] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:00:37.990] - relayed: [n=2] TRUE, TRUE
[17:00:37.990] - queued futures: [n=2] TRUE, TRUE
[17:00:37.990] signalConditionsASAP(NULL, pos=0) ... done
[17:00:37.990] resolve() on list ... DONE
[17:00:37.990] result() for ClusterFuture ...
[17:00:37.990] - result already collected: FutureResult
[17:00:37.991] result() for ClusterFuture ... done
[17:00:37.991] result() for ClusterFuture ...
[17:00:37.991] - result already collected: FutureResult
[17:00:37.991] result() for ClusterFuture ... done
[17:00:37.991] result() for ClusterFuture ...
[17:00:37.991] - result already collected: FutureResult
[17:00:37.991] result() for ClusterFuture ... done
[17:00:37.991] result() for ClusterFuture ...
[17:00:37.991] - result already collected: FutureResult
[17:00:37.991] result() for ClusterFuture ... done
[17:00:37.991]  - Number of value chunks collected: 2
[17:00:37.992] Resolving 2 futures (chunks) ... DONE
[17:00:37.992] Reducing values from 2 chunks ...
[17:00:37.992]  - Number of values collected after concatenation: 5
[17:00:37.992]  - Number of values expected: 5
[17:00:37.992] Reducing values from 2 chunks ... DONE
[17:00:37.992] future_lapply() ... DONE
[17:00:37.992] future_lapply() ...
[17:00:37.993] Generating random seeds ...
[17:00:37.993] Generating random seed streams for 5 elements ...
[17:00:37.993] Generating random seed streams for 5 elements ... DONE
[17:00:37.993] Generating random seeds ... DONE
[17:00:37.993] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:00:37.997] Number of chunks: 2
[17:00:37.997] getGlobalsAndPackagesXApply() ...
[17:00:37.998]  - future.globals: TRUE
[17:00:37.998] getGlobalsAndPackages() ...
[17:00:37.998] Searching for globals...
[17:00:37.999] - globals found: [2] ‘FUN’, ‘sample’
[17:00:37.999] Searching for globals ... DONE
[17:00:37.999] Resolving globals: FALSE
[17:00:37.999] The total size of the 1 globals is 616 bytes (616 bytes)
[17:00:38.000] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:00:38.000] - globals: [1] ‘FUN’
[17:00:38.000] 
[17:00:38.000] getGlobalsAndPackages() ... DONE
[17:00:38.000]  - globals found/used: [n=1] ‘FUN’
[17:00:38.000]  - needed namespaces: [n=0] 
[17:00:38.000] Finding globals ... DONE
[17:00:38.000]  - use_args: TRUE
[17:00:38.001]  - Getting '...' globals ...
[17:00:38.001] resolve() on list ...
[17:00:38.001]  recursive: 0
[17:00:38.001]  length: 1
[17:00:38.001]  elements: ‘...’
[17:00:38.001]  length: 0 (resolved future 1)
[17:00:38.001] resolve() on list ... DONE
[17:00:38.001]    - '...' content: [n=0] 
[17:00:38.002] List of 1
[17:00:38.002]  $ ...: list()
[17:00:38.002]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:38.002]  - attr(*, "where")=List of 1
[17:00:38.002]   ..$ ...:<environment: 0x55856464e6c0> 
[17:00:38.002]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:38.002]  - attr(*, "resolved")= logi TRUE
[17:00:38.002]  - attr(*, "total_size")= num NA
[17:00:38.004]  - Getting '...' globals ... DONE
[17:00:38.004] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:00:38.004] List of 2
[17:00:38.004]  $ ...future.FUN:function (...)  
[17:00:38.004]  $ ...          : list()
[17:00:38.004]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:38.004]  - attr(*, "where")=List of 2
[17:00:38.004]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:00:38.004]   ..$ ...          :<environment: 0x55856464e6c0> 
[17:00:38.004]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:38.004]  - attr(*, "resolved")= logi FALSE
[17:00:38.004]  - attr(*, "total_size")= num 616
[17:00:38.007] Packages to be attached in all futures: [n=0] 
[17:00:38.007] getGlobalsAndPackagesXApply() ... DONE
[17:00:38.007] Number of futures (= number of chunks): 2
[17:00:38.007] Launching 2 futures (chunks) ...
[17:00:38.007] Chunk #1 of 2 ...
[17:00:38.007]  - Finding globals in 'X' for chunk #1 ...
[17:00:38.008] getGlobalsAndPackages() ...
[17:00:38.008] Searching for globals...
[17:00:38.008] 
[17:00:38.008] Searching for globals ... DONE
[17:00:38.008] - globals: [0] <none>
[17:00:38.008] getGlobalsAndPackages() ... DONE
[17:00:38.008]    + additional globals found: [n=0] 
[17:00:38.008]    + additional namespaces needed: [n=0] 
[17:00:38.008]  - Finding globals in 'X' for chunk #1 ... DONE
[17:00:38.009]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:38.009]  - seeds: [2] <seeds>
[17:00:38.009]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:38.009] getGlobalsAndPackages() ...
[17:00:38.009] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:38.009] Resolving globals: FALSE
[17:00:38.009] Tweak future expression to call with '...' arguments ...
[17:00:38.009] {
[17:00:38.009]     do.call(function(...) {
[17:00:38.009]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:38.009]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:38.009]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:38.009]             on.exit(options(oopts), add = TRUE)
[17:00:38.009]         }
[17:00:38.009]         {
[17:00:38.009]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:38.009]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:38.009]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:38.009]                   envir = globalenv(), inherits = FALSE)
[17:00:38.009]                 ...future.FUN(...future.X_jj, ...)
[17:00:38.009]             })
[17:00:38.009]         }
[17:00:38.009]     }, args = future.call.arguments)
[17:00:38.009] }
[17:00:38.010] Tweak future expression to call with '...' arguments ... DONE
[17:00:38.010] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:38.010] 
[17:00:38.010] getGlobalsAndPackages() ... DONE
[17:00:38.010] run() for ‘Future’ ...
[17:00:38.010] - state: ‘created’
[17:00:38.011] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:00:38.024] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:38.024] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:00:38.025]   - Field: ‘node’
[17:00:38.025]   - Field: ‘label’
[17:00:38.025]   - Field: ‘local’
[17:00:38.025]   - Field: ‘owner’
[17:00:38.025]   - Field: ‘envir’
[17:00:38.025]   - Field: ‘workers’
[17:00:38.025]   - Field: ‘packages’
[17:00:38.025]   - Field: ‘gc’
[17:00:38.025]   - Field: ‘conditions’
[17:00:38.025]   - Field: ‘persistent’
[17:00:38.025]   - Field: ‘expr’
[17:00:38.026]   - Field: ‘uuid’
[17:00:38.026]   - Field: ‘seed’
[17:00:38.026]   - Field: ‘version’
[17:00:38.026]   - Field: ‘result’
[17:00:38.026]   - Field: ‘asynchronous’
[17:00:38.026]   - Field: ‘calls’
[17:00:38.026]   - Field: ‘globals’
[17:00:38.026]   - Field: ‘stdout’
[17:00:38.026]   - Field: ‘earlySignal’
[17:00:38.026]   - Field: ‘lazy’
[17:00:38.026]   - Field: ‘state’
[17:00:38.027] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:00:38.027] - Launch lazy future ...
[17:00:38.027] Packages needed by the future expression (n = 0): <none>
[17:00:38.027] Packages needed by future strategies (n = 0): <none>
[17:00:38.028] {
[17:00:38.028]     {
[17:00:38.028]         {
[17:00:38.028]             ...future.startTime <- base::Sys.time()
[17:00:38.028]             {
[17:00:38.028]                 {
[17:00:38.028]                   {
[17:00:38.028]                     {
[17:00:38.028]                       base::local({
[17:00:38.028]                         has_future <- base::requireNamespace("future", 
[17:00:38.028]                           quietly = TRUE)
[17:00:38.028]                         if (has_future) {
[17:00:38.028]                           ns <- base::getNamespace("future")
[17:00:38.028]                           version <- ns[[".package"]][["version"]]
[17:00:38.028]                           if (is.null(version)) 
[17:00:38.028]                             version <- utils::packageVersion("future")
[17:00:38.028]                         }
[17:00:38.028]                         else {
[17:00:38.028]                           version <- NULL
[17:00:38.028]                         }
[17:00:38.028]                         if (!has_future || version < "1.8.0") {
[17:00:38.028]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:38.028]                             "", base::R.version$version.string), 
[17:00:38.028]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:38.028]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:38.028]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:38.028]                               "release", "version")], collapse = " "), 
[17:00:38.028]                             hostname = base::Sys.info()[["nodename"]])
[17:00:38.028]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:38.028]                             info)
[17:00:38.028]                           info <- base::paste(info, collapse = "; ")
[17:00:38.028]                           if (!has_future) {
[17:00:38.028]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:38.028]                               info)
[17:00:38.028]                           }
[17:00:38.028]                           else {
[17:00:38.028]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:38.028]                               info, version)
[17:00:38.028]                           }
[17:00:38.028]                           base::stop(msg)
[17:00:38.028]                         }
[17:00:38.028]                       })
[17:00:38.028]                     }
[17:00:38.028]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:38.028]                     base::options(mc.cores = 1L)
[17:00:38.028]                   }
[17:00:38.028]                   ...future.strategy.old <- future::plan("list")
[17:00:38.028]                   options(future.plan = NULL)
[17:00:38.028]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:38.028]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:38.028]                 }
[17:00:38.028]                 ...future.workdir <- getwd()
[17:00:38.028]             }
[17:00:38.028]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:38.028]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:38.028]         }
[17:00:38.028]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:38.028]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:38.028]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:38.028]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:38.028]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:38.028]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:38.028]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:38.028]             base::names(...future.oldOptions))
[17:00:38.028]     }
[17:00:38.028]     if (FALSE) {
[17:00:38.028]     }
[17:00:38.028]     else {
[17:00:38.028]         if (TRUE) {
[17:00:38.028]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:38.028]                 open = "w")
[17:00:38.028]         }
[17:00:38.028]         else {
[17:00:38.028]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:38.028]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:38.028]         }
[17:00:38.028]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:38.028]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:38.028]             base::sink(type = "output", split = FALSE)
[17:00:38.028]             base::close(...future.stdout)
[17:00:38.028]         }, add = TRUE)
[17:00:38.028]     }
[17:00:38.028]     ...future.frame <- base::sys.nframe()
[17:00:38.028]     ...future.conditions <- base::list()
[17:00:38.028]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:38.028]     if (FALSE) {
[17:00:38.028]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:38.028]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:38.028]     }
[17:00:38.028]     ...future.result <- base::tryCatch({
[17:00:38.028]         base::withCallingHandlers({
[17:00:38.028]             ...future.value <- base::withVisible(base::local({
[17:00:38.028]                 ...future.makeSendCondition <- base::local({
[17:00:38.028]                   sendCondition <- NULL
[17:00:38.028]                   function(frame = 1L) {
[17:00:38.028]                     if (is.function(sendCondition)) 
[17:00:38.028]                       return(sendCondition)
[17:00:38.028]                     ns <- getNamespace("parallel")
[17:00:38.028]                     if (exists("sendData", mode = "function", 
[17:00:38.028]                       envir = ns)) {
[17:00:38.028]                       parallel_sendData <- get("sendData", mode = "function", 
[17:00:38.028]                         envir = ns)
[17:00:38.028]                       envir <- sys.frame(frame)
[17:00:38.028]                       master <- NULL
[17:00:38.028]                       while (!identical(envir, .GlobalEnv) && 
[17:00:38.028]                         !identical(envir, emptyenv())) {
[17:00:38.028]                         if (exists("master", mode = "list", envir = envir, 
[17:00:38.028]                           inherits = FALSE)) {
[17:00:38.028]                           master <- get("master", mode = "list", 
[17:00:38.028]                             envir = envir, inherits = FALSE)
[17:00:38.028]                           if (inherits(master, c("SOCKnode", 
[17:00:38.028]                             "SOCK0node"))) {
[17:00:38.028]                             sendCondition <<- function(cond) {
[17:00:38.028]                               data <- list(type = "VALUE", value = cond, 
[17:00:38.028]                                 success = TRUE)
[17:00:38.028]                               parallel_sendData(master, data)
[17:00:38.028]                             }
[17:00:38.028]                             return(sendCondition)
[17:00:38.028]                           }
[17:00:38.028]                         }
[17:00:38.028]                         frame <- frame + 1L
[17:00:38.028]                         envir <- sys.frame(frame)
[17:00:38.028]                       }
[17:00:38.028]                     }
[17:00:38.028]                     sendCondition <<- function(cond) NULL
[17:00:38.028]                   }
[17:00:38.028]                 })
[17:00:38.028]                 withCallingHandlers({
[17:00:38.028]                   {
[17:00:38.028]                     do.call(function(...) {
[17:00:38.028]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:38.028]                       if (!identical(...future.globals.maxSize.org, 
[17:00:38.028]                         ...future.globals.maxSize)) {
[17:00:38.028]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:38.028]                         on.exit(options(oopts), add = TRUE)
[17:00:38.028]                       }
[17:00:38.028]                       {
[17:00:38.028]                         lapply(seq_along(...future.elements_ii), 
[17:00:38.028]                           FUN = function(jj) {
[17:00:38.028]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:38.028]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:38.028]                               envir = globalenv(), inherits = FALSE)
[17:00:38.028]                             ...future.FUN(...future.X_jj, ...)
[17:00:38.028]                           })
[17:00:38.028]                       }
[17:00:38.028]                     }, args = future.call.arguments)
[17:00:38.028]                   }
[17:00:38.028]                 }, immediateCondition = function(cond) {
[17:00:38.028]                   sendCondition <- ...future.makeSendCondition()
[17:00:38.028]                   sendCondition(cond)
[17:00:38.028]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:38.028]                   {
[17:00:38.028]                     inherits <- base::inherits
[17:00:38.028]                     invokeRestart <- base::invokeRestart
[17:00:38.028]                     is.null <- base::is.null
[17:00:38.028]                     muffled <- FALSE
[17:00:38.028]                     if (inherits(cond, "message")) {
[17:00:38.028]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:38.028]                       if (muffled) 
[17:00:38.028]                         invokeRestart("muffleMessage")
[17:00:38.028]                     }
[17:00:38.028]                     else if (inherits(cond, "warning")) {
[17:00:38.028]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:38.028]                       if (muffled) 
[17:00:38.028]                         invokeRestart("muffleWarning")
[17:00:38.028]                     }
[17:00:38.028]                     else if (inherits(cond, "condition")) {
[17:00:38.028]                       if (!is.null(pattern)) {
[17:00:38.028]                         computeRestarts <- base::computeRestarts
[17:00:38.028]                         grepl <- base::grepl
[17:00:38.028]                         restarts <- computeRestarts(cond)
[17:00:38.028]                         for (restart in restarts) {
[17:00:38.028]                           name <- restart$name
[17:00:38.028]                           if (is.null(name)) 
[17:00:38.028]                             next
[17:00:38.028]                           if (!grepl(pattern, name)) 
[17:00:38.028]                             next
[17:00:38.028]                           invokeRestart(restart)
[17:00:38.028]                           muffled <- TRUE
[17:00:38.028]                           break
[17:00:38.028]                         }
[17:00:38.028]                       }
[17:00:38.028]                     }
[17:00:38.028]                     invisible(muffled)
[17:00:38.028]                   }
[17:00:38.028]                   muffleCondition(cond)
[17:00:38.028]                 })
[17:00:38.028]             }))
[17:00:38.028]             future::FutureResult(value = ...future.value$value, 
[17:00:38.028]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:38.028]                   ...future.rng), globalenv = if (FALSE) 
[17:00:38.028]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:38.028]                     ...future.globalenv.names))
[17:00:38.028]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:38.028]         }, condition = base::local({
[17:00:38.028]             c <- base::c
[17:00:38.028]             inherits <- base::inherits
[17:00:38.028]             invokeRestart <- base::invokeRestart
[17:00:38.028]             length <- base::length
[17:00:38.028]             list <- base::list
[17:00:38.028]             seq.int <- base::seq.int
[17:00:38.028]             signalCondition <- base::signalCondition
[17:00:38.028]             sys.calls <- base::sys.calls
[17:00:38.028]             `[[` <- base::`[[`
[17:00:38.028]             `+` <- base::`+`
[17:00:38.028]             `<<-` <- base::`<<-`
[17:00:38.028]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:38.028]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:38.028]                   3L)]
[17:00:38.028]             }
[17:00:38.028]             function(cond) {
[17:00:38.028]                 is_error <- inherits(cond, "error")
[17:00:38.028]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:38.028]                   NULL)
[17:00:38.028]                 if (is_error) {
[17:00:38.028]                   sessionInformation <- function() {
[17:00:38.028]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:38.028]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:38.028]                       search = base::search(), system = base::Sys.info())
[17:00:38.028]                   }
[17:00:38.028]                   ...future.conditions[[length(...future.conditions) + 
[17:00:38.028]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:38.028]                     cond$call), session = sessionInformation(), 
[17:00:38.028]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:38.028]                   signalCondition(cond)
[17:00:38.028]                 }
[17:00:38.028]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:38.028]                 "immediateCondition"))) {
[17:00:38.028]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:38.028]                   ...future.conditions[[length(...future.conditions) + 
[17:00:38.028]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:38.028]                   if (TRUE && !signal) {
[17:00:38.028]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:38.028]                     {
[17:00:38.028]                       inherits <- base::inherits
[17:00:38.028]                       invokeRestart <- base::invokeRestart
[17:00:38.028]                       is.null <- base::is.null
[17:00:38.028]                       muffled <- FALSE
[17:00:38.028]                       if (inherits(cond, "message")) {
[17:00:38.028]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:38.028]                         if (muffled) 
[17:00:38.028]                           invokeRestart("muffleMessage")
[17:00:38.028]                       }
[17:00:38.028]                       else if (inherits(cond, "warning")) {
[17:00:38.028]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:38.028]                         if (muffled) 
[17:00:38.028]                           invokeRestart("muffleWarning")
[17:00:38.028]                       }
[17:00:38.028]                       else if (inherits(cond, "condition")) {
[17:00:38.028]                         if (!is.null(pattern)) {
[17:00:38.028]                           computeRestarts <- base::computeRestarts
[17:00:38.028]                           grepl <- base::grepl
[17:00:38.028]                           restarts <- computeRestarts(cond)
[17:00:38.028]                           for (restart in restarts) {
[17:00:38.028]                             name <- restart$name
[17:00:38.028]                             if (is.null(name)) 
[17:00:38.028]                               next
[17:00:38.028]                             if (!grepl(pattern, name)) 
[17:00:38.028]                               next
[17:00:38.028]                             invokeRestart(restart)
[17:00:38.028]                             muffled <- TRUE
[17:00:38.028]                             break
[17:00:38.028]                           }
[17:00:38.028]                         }
[17:00:38.028]                       }
[17:00:38.028]                       invisible(muffled)
[17:00:38.028]                     }
[17:00:38.028]                     muffleCondition(cond, pattern = "^muffle")
[17:00:38.028]                   }
[17:00:38.028]                 }
[17:00:38.028]                 else {
[17:00:38.028]                   if (TRUE) {
[17:00:38.028]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:38.028]                     {
[17:00:38.028]                       inherits <- base::inherits
[17:00:38.028]                       invokeRestart <- base::invokeRestart
[17:00:38.028]                       is.null <- base::is.null
[17:00:38.028]                       muffled <- FALSE
[17:00:38.028]                       if (inherits(cond, "message")) {
[17:00:38.028]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:38.028]                         if (muffled) 
[17:00:38.028]                           invokeRestart("muffleMessage")
[17:00:38.028]                       }
[17:00:38.028]                       else if (inherits(cond, "warning")) {
[17:00:38.028]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:38.028]                         if (muffled) 
[17:00:38.028]                           invokeRestart("muffleWarning")
[17:00:38.028]                       }
[17:00:38.028]                       else if (inherits(cond, "condition")) {
[17:00:38.028]                         if (!is.null(pattern)) {
[17:00:38.028]                           computeRestarts <- base::computeRestarts
[17:00:38.028]                           grepl <- base::grepl
[17:00:38.028]                           restarts <- computeRestarts(cond)
[17:00:38.028]                           for (restart in restarts) {
[17:00:38.028]                             name <- restart$name
[17:00:38.028]                             if (is.null(name)) 
[17:00:38.028]                               next
[17:00:38.028]                             if (!grepl(pattern, name)) 
[17:00:38.028]                               next
[17:00:38.028]                             invokeRestart(restart)
[17:00:38.028]                             muffled <- TRUE
[17:00:38.028]                             break
[17:00:38.028]                           }
[17:00:38.028]                         }
[17:00:38.028]                       }
[17:00:38.028]                       invisible(muffled)
[17:00:38.028]                     }
[17:00:38.028]                     muffleCondition(cond, pattern = "^muffle")
[17:00:38.028]                   }
[17:00:38.028]                 }
[17:00:38.028]             }
[17:00:38.028]         }))
[17:00:38.028]     }, error = function(ex) {
[17:00:38.028]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:38.028]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:38.028]                 ...future.rng), started = ...future.startTime, 
[17:00:38.028]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:38.028]             version = "1.8"), class = "FutureResult")
[17:00:38.028]     }, finally = {
[17:00:38.028]         if (!identical(...future.workdir, getwd())) 
[17:00:38.028]             setwd(...future.workdir)
[17:00:38.028]         {
[17:00:38.028]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:38.028]                 ...future.oldOptions$nwarnings <- NULL
[17:00:38.028]             }
[17:00:38.028]             base::options(...future.oldOptions)
[17:00:38.028]             if (.Platform$OS.type == "windows") {
[17:00:38.028]                 old_names <- names(...future.oldEnvVars)
[17:00:38.028]                 envs <- base::Sys.getenv()
[17:00:38.028]                 names <- names(envs)
[17:00:38.028]                 common <- intersect(names, old_names)
[17:00:38.028]                 added <- setdiff(names, old_names)
[17:00:38.028]                 removed <- setdiff(old_names, names)
[17:00:38.028]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:38.028]                   envs[common]]
[17:00:38.028]                 NAMES <- toupper(changed)
[17:00:38.028]                 args <- list()
[17:00:38.028]                 for (kk in seq_along(NAMES)) {
[17:00:38.028]                   name <- changed[[kk]]
[17:00:38.028]                   NAME <- NAMES[[kk]]
[17:00:38.028]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:38.028]                     next
[17:00:38.028]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:38.028]                 }
[17:00:38.028]                 NAMES <- toupper(added)
[17:00:38.028]                 for (kk in seq_along(NAMES)) {
[17:00:38.028]                   name <- added[[kk]]
[17:00:38.028]                   NAME <- NAMES[[kk]]
[17:00:38.028]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:38.028]                     next
[17:00:38.028]                   args[[name]] <- ""
[17:00:38.028]                 }
[17:00:38.028]                 NAMES <- toupper(removed)
[17:00:38.028]                 for (kk in seq_along(NAMES)) {
[17:00:38.028]                   name <- removed[[kk]]
[17:00:38.028]                   NAME <- NAMES[[kk]]
[17:00:38.028]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:38.028]                     next
[17:00:38.028]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:38.028]                 }
[17:00:38.028]                 if (length(args) > 0) 
[17:00:38.028]                   base::do.call(base::Sys.setenv, args = args)
[17:00:38.028]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:38.028]             }
[17:00:38.028]             else {
[17:00:38.028]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:38.028]             }
[17:00:38.028]             {
[17:00:38.028]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:38.028]                   0L) {
[17:00:38.028]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:38.028]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:38.028]                   base::options(opts)
[17:00:38.028]                 }
[17:00:38.028]                 {
[17:00:38.028]                   {
[17:00:38.028]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:38.028]                     NULL
[17:00:38.028]                   }
[17:00:38.028]                   options(future.plan = NULL)
[17:00:38.028]                   if (is.na(NA_character_)) 
[17:00:38.028]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:38.028]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:38.028]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:38.028]                     .init = FALSE)
[17:00:38.028]                 }
[17:00:38.028]             }
[17:00:38.028]         }
[17:00:38.028]     })
[17:00:38.028]     if (TRUE) {
[17:00:38.028]         base::sink(type = "output", split = FALSE)
[17:00:38.028]         if (TRUE) {
[17:00:38.028]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:38.028]         }
[17:00:38.028]         else {
[17:00:38.028]             ...future.result["stdout"] <- base::list(NULL)
[17:00:38.028]         }
[17:00:38.028]         base::close(...future.stdout)
[17:00:38.028]         ...future.stdout <- NULL
[17:00:38.028]     }
[17:00:38.028]     ...future.result$conditions <- ...future.conditions
[17:00:38.028]     ...future.result$finished <- base::Sys.time()
[17:00:38.028]     ...future.result
[17:00:38.028] }
[17:00:38.030] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[17:00:38.030] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[17:00:38.031] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[17:00:38.031] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:00:38.031] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:00:38.032] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:00:38.032] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:00:38.032] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:00:38.032] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:00:38.032] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:00:38.033] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:00:38.033] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[17:00:38.033] MultisessionFuture started
[17:00:38.033] - Launch lazy future ... done
[17:00:38.034] run() for ‘MultisessionFuture’ ... done
[17:00:38.034] Created future:
[17:00:38.034] MultisessionFuture:
[17:00:38.034] Label: ‘future_replicate-1’
[17:00:38.034] Expression:
[17:00:38.034] {
[17:00:38.034]     do.call(function(...) {
[17:00:38.034]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:38.034]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:38.034]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:38.034]             on.exit(options(oopts), add = TRUE)
[17:00:38.034]         }
[17:00:38.034]         {
[17:00:38.034]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:38.034]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:38.034]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:38.034]                   envir = globalenv(), inherits = FALSE)
[17:00:38.034]                 ...future.FUN(...future.X_jj, ...)
[17:00:38.034]             })
[17:00:38.034]         }
[17:00:38.034]     }, args = future.call.arguments)
[17:00:38.034] }
[17:00:38.034] Lazy evaluation: FALSE
[17:00:38.034] Asynchronous evaluation: TRUE
[17:00:38.034] Local evaluation: TRUE
[17:00:38.034] Environment: R_GlobalEnv
[17:00:38.034] Capture standard output: TRUE
[17:00:38.034] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:38.034] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:38.034] Packages: <none>
[17:00:38.034] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:38.034] Resolved: FALSE
[17:00:38.034] Value: <not collected>
[17:00:38.034] Conditions captured: <none>
[17:00:38.034] Early signaling: FALSE
[17:00:38.034] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:38.034] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:38.045] Chunk #1 of 2 ... DONE
[17:00:38.045] Chunk #2 of 2 ...
[17:00:38.046]  - Finding globals in 'X' for chunk #2 ...
[17:00:38.046] getGlobalsAndPackages() ...
[17:00:38.046] Searching for globals...
[17:00:38.046] 
[17:00:38.046] Searching for globals ... DONE
[17:00:38.046] - globals: [0] <none>
[17:00:38.046] getGlobalsAndPackages() ... DONE
[17:00:38.046]    + additional globals found: [n=0] 
[17:00:38.047]    + additional namespaces needed: [n=0] 
[17:00:38.047]  - Finding globals in 'X' for chunk #2 ... DONE
[17:00:38.047]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:38.047]  - seeds: [3] <seeds>
[17:00:38.047]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:38.047] getGlobalsAndPackages() ...
[17:00:38.047] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:38.047] Resolving globals: FALSE
[17:00:38.047] Tweak future expression to call with '...' arguments ...
[17:00:38.047] {
[17:00:38.047]     do.call(function(...) {
[17:00:38.047]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:38.047]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:38.047]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:38.047]             on.exit(options(oopts), add = TRUE)
[17:00:38.047]         }
[17:00:38.047]         {
[17:00:38.047]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:38.047]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:38.047]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:38.047]                   envir = globalenv(), inherits = FALSE)
[17:00:38.047]                 ...future.FUN(...future.X_jj, ...)
[17:00:38.047]             })
[17:00:38.047]         }
[17:00:38.047]     }, args = future.call.arguments)
[17:00:38.047] }
[17:00:38.048] Tweak future expression to call with '...' arguments ... DONE
[17:00:38.048] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:38.048] 
[17:00:38.048] getGlobalsAndPackages() ... DONE
[17:00:38.049] run() for ‘Future’ ...
[17:00:38.049] - state: ‘created’
[17:00:38.049] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:00:38.065] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:38.065] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:00:38.065]   - Field: ‘node’
[17:00:38.065]   - Field: ‘label’
[17:00:38.065]   - Field: ‘local’
[17:00:38.065]   - Field: ‘owner’
[17:00:38.065]   - Field: ‘envir’
[17:00:38.065]   - Field: ‘workers’
[17:00:38.066]   - Field: ‘packages’
[17:00:38.066]   - Field: ‘gc’
[17:00:38.066]   - Field: ‘conditions’
[17:00:38.066]   - Field: ‘persistent’
[17:00:38.066]   - Field: ‘expr’
[17:00:38.066]   - Field: ‘uuid’
[17:00:38.066]   - Field: ‘seed’
[17:00:38.066]   - Field: ‘version’
[17:00:38.066]   - Field: ‘result’
[17:00:38.066]   - Field: ‘asynchronous’
[17:00:38.066]   - Field: ‘calls’
[17:00:38.066]   - Field: ‘globals’
[17:00:38.067]   - Field: ‘stdout’
[17:00:38.067]   - Field: ‘earlySignal’
[17:00:38.067]   - Field: ‘lazy’
[17:00:38.067]   - Field: ‘state’
[17:00:38.067] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:00:38.067] - Launch lazy future ...
[17:00:38.067] Packages needed by the future expression (n = 0): <none>
[17:00:38.067] Packages needed by future strategies (n = 0): <none>
[17:00:38.068] {
[17:00:38.068]     {
[17:00:38.068]         {
[17:00:38.068]             ...future.startTime <- base::Sys.time()
[17:00:38.068]             {
[17:00:38.068]                 {
[17:00:38.068]                   {
[17:00:38.068]                     {
[17:00:38.068]                       base::local({
[17:00:38.068]                         has_future <- base::requireNamespace("future", 
[17:00:38.068]                           quietly = TRUE)
[17:00:38.068]                         if (has_future) {
[17:00:38.068]                           ns <- base::getNamespace("future")
[17:00:38.068]                           version <- ns[[".package"]][["version"]]
[17:00:38.068]                           if (is.null(version)) 
[17:00:38.068]                             version <- utils::packageVersion("future")
[17:00:38.068]                         }
[17:00:38.068]                         else {
[17:00:38.068]                           version <- NULL
[17:00:38.068]                         }
[17:00:38.068]                         if (!has_future || version < "1.8.0") {
[17:00:38.068]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:38.068]                             "", base::R.version$version.string), 
[17:00:38.068]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:38.068]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:38.068]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:38.068]                               "release", "version")], collapse = " "), 
[17:00:38.068]                             hostname = base::Sys.info()[["nodename"]])
[17:00:38.068]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:38.068]                             info)
[17:00:38.068]                           info <- base::paste(info, collapse = "; ")
[17:00:38.068]                           if (!has_future) {
[17:00:38.068]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:38.068]                               info)
[17:00:38.068]                           }
[17:00:38.068]                           else {
[17:00:38.068]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:38.068]                               info, version)
[17:00:38.068]                           }
[17:00:38.068]                           base::stop(msg)
[17:00:38.068]                         }
[17:00:38.068]                       })
[17:00:38.068]                     }
[17:00:38.068]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:38.068]                     base::options(mc.cores = 1L)
[17:00:38.068]                   }
[17:00:38.068]                   ...future.strategy.old <- future::plan("list")
[17:00:38.068]                   options(future.plan = NULL)
[17:00:38.068]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:38.068]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:38.068]                 }
[17:00:38.068]                 ...future.workdir <- getwd()
[17:00:38.068]             }
[17:00:38.068]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:38.068]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:38.068]         }
[17:00:38.068]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:38.068]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:38.068]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:38.068]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:38.068]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:38.068]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:38.068]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:38.068]             base::names(...future.oldOptions))
[17:00:38.068]     }
[17:00:38.068]     if (FALSE) {
[17:00:38.068]     }
[17:00:38.068]     else {
[17:00:38.068]         if (TRUE) {
[17:00:38.068]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:38.068]                 open = "w")
[17:00:38.068]         }
[17:00:38.068]         else {
[17:00:38.068]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:38.068]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:38.068]         }
[17:00:38.068]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:38.068]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:38.068]             base::sink(type = "output", split = FALSE)
[17:00:38.068]             base::close(...future.stdout)
[17:00:38.068]         }, add = TRUE)
[17:00:38.068]     }
[17:00:38.068]     ...future.frame <- base::sys.nframe()
[17:00:38.068]     ...future.conditions <- base::list()
[17:00:38.068]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:38.068]     if (FALSE) {
[17:00:38.068]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:38.068]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:38.068]     }
[17:00:38.068]     ...future.result <- base::tryCatch({
[17:00:38.068]         base::withCallingHandlers({
[17:00:38.068]             ...future.value <- base::withVisible(base::local({
[17:00:38.068]                 ...future.makeSendCondition <- base::local({
[17:00:38.068]                   sendCondition <- NULL
[17:00:38.068]                   function(frame = 1L) {
[17:00:38.068]                     if (is.function(sendCondition)) 
[17:00:38.068]                       return(sendCondition)
[17:00:38.068]                     ns <- getNamespace("parallel")
[17:00:38.068]                     if (exists("sendData", mode = "function", 
[17:00:38.068]                       envir = ns)) {
[17:00:38.068]                       parallel_sendData <- get("sendData", mode = "function", 
[17:00:38.068]                         envir = ns)
[17:00:38.068]                       envir <- sys.frame(frame)
[17:00:38.068]                       master <- NULL
[17:00:38.068]                       while (!identical(envir, .GlobalEnv) && 
[17:00:38.068]                         !identical(envir, emptyenv())) {
[17:00:38.068]                         if (exists("master", mode = "list", envir = envir, 
[17:00:38.068]                           inherits = FALSE)) {
[17:00:38.068]                           master <- get("master", mode = "list", 
[17:00:38.068]                             envir = envir, inherits = FALSE)
[17:00:38.068]                           if (inherits(master, c("SOCKnode", 
[17:00:38.068]                             "SOCK0node"))) {
[17:00:38.068]                             sendCondition <<- function(cond) {
[17:00:38.068]                               data <- list(type = "VALUE", value = cond, 
[17:00:38.068]                                 success = TRUE)
[17:00:38.068]                               parallel_sendData(master, data)
[17:00:38.068]                             }
[17:00:38.068]                             return(sendCondition)
[17:00:38.068]                           }
[17:00:38.068]                         }
[17:00:38.068]                         frame <- frame + 1L
[17:00:38.068]                         envir <- sys.frame(frame)
[17:00:38.068]                       }
[17:00:38.068]                     }
[17:00:38.068]                     sendCondition <<- function(cond) NULL
[17:00:38.068]                   }
[17:00:38.068]                 })
[17:00:38.068]                 withCallingHandlers({
[17:00:38.068]                   {
[17:00:38.068]                     do.call(function(...) {
[17:00:38.068]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:38.068]                       if (!identical(...future.globals.maxSize.org, 
[17:00:38.068]                         ...future.globals.maxSize)) {
[17:00:38.068]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:38.068]                         on.exit(options(oopts), add = TRUE)
[17:00:38.068]                       }
[17:00:38.068]                       {
[17:00:38.068]                         lapply(seq_along(...future.elements_ii), 
[17:00:38.068]                           FUN = function(jj) {
[17:00:38.068]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:38.068]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:38.068]                               envir = globalenv(), inherits = FALSE)
[17:00:38.068]                             ...future.FUN(...future.X_jj, ...)
[17:00:38.068]                           })
[17:00:38.068]                       }
[17:00:38.068]                     }, args = future.call.arguments)
[17:00:38.068]                   }
[17:00:38.068]                 }, immediateCondition = function(cond) {
[17:00:38.068]                   sendCondition <- ...future.makeSendCondition()
[17:00:38.068]                   sendCondition(cond)
[17:00:38.068]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:38.068]                   {
[17:00:38.068]                     inherits <- base::inherits
[17:00:38.068]                     invokeRestart <- base::invokeRestart
[17:00:38.068]                     is.null <- base::is.null
[17:00:38.068]                     muffled <- FALSE
[17:00:38.068]                     if (inherits(cond, "message")) {
[17:00:38.068]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:38.068]                       if (muffled) 
[17:00:38.068]                         invokeRestart("muffleMessage")
[17:00:38.068]                     }
[17:00:38.068]                     else if (inherits(cond, "warning")) {
[17:00:38.068]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:38.068]                       if (muffled) 
[17:00:38.068]                         invokeRestart("muffleWarning")
[17:00:38.068]                     }
[17:00:38.068]                     else if (inherits(cond, "condition")) {
[17:00:38.068]                       if (!is.null(pattern)) {
[17:00:38.068]                         computeRestarts <- base::computeRestarts
[17:00:38.068]                         grepl <- base::grepl
[17:00:38.068]                         restarts <- computeRestarts(cond)
[17:00:38.068]                         for (restart in restarts) {
[17:00:38.068]                           name <- restart$name
[17:00:38.068]                           if (is.null(name)) 
[17:00:38.068]                             next
[17:00:38.068]                           if (!grepl(pattern, name)) 
[17:00:38.068]                             next
[17:00:38.068]                           invokeRestart(restart)
[17:00:38.068]                           muffled <- TRUE
[17:00:38.068]                           break
[17:00:38.068]                         }
[17:00:38.068]                       }
[17:00:38.068]                     }
[17:00:38.068]                     invisible(muffled)
[17:00:38.068]                   }
[17:00:38.068]                   muffleCondition(cond)
[17:00:38.068]                 })
[17:00:38.068]             }))
[17:00:38.068]             future::FutureResult(value = ...future.value$value, 
[17:00:38.068]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:38.068]                   ...future.rng), globalenv = if (FALSE) 
[17:00:38.068]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:38.068]                     ...future.globalenv.names))
[17:00:38.068]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:38.068]         }, condition = base::local({
[17:00:38.068]             c <- base::c
[17:00:38.068]             inherits <- base::inherits
[17:00:38.068]             invokeRestart <- base::invokeRestart
[17:00:38.068]             length <- base::length
[17:00:38.068]             list <- base::list
[17:00:38.068]             seq.int <- base::seq.int
[17:00:38.068]             signalCondition <- base::signalCondition
[17:00:38.068]             sys.calls <- base::sys.calls
[17:00:38.068]             `[[` <- base::`[[`
[17:00:38.068]             `+` <- base::`+`
[17:00:38.068]             `<<-` <- base::`<<-`
[17:00:38.068]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:38.068]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:38.068]                   3L)]
[17:00:38.068]             }
[17:00:38.068]             function(cond) {
[17:00:38.068]                 is_error <- inherits(cond, "error")
[17:00:38.068]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:38.068]                   NULL)
[17:00:38.068]                 if (is_error) {
[17:00:38.068]                   sessionInformation <- function() {
[17:00:38.068]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:38.068]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:38.068]                       search = base::search(), system = base::Sys.info())
[17:00:38.068]                   }
[17:00:38.068]                   ...future.conditions[[length(...future.conditions) + 
[17:00:38.068]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:38.068]                     cond$call), session = sessionInformation(), 
[17:00:38.068]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:38.068]                   signalCondition(cond)
[17:00:38.068]                 }
[17:00:38.068]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:38.068]                 "immediateCondition"))) {
[17:00:38.068]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:38.068]                   ...future.conditions[[length(...future.conditions) + 
[17:00:38.068]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:38.068]                   if (TRUE && !signal) {
[17:00:38.068]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:38.068]                     {
[17:00:38.068]                       inherits <- base::inherits
[17:00:38.068]                       invokeRestart <- base::invokeRestart
[17:00:38.068]                       is.null <- base::is.null
[17:00:38.068]                       muffled <- FALSE
[17:00:38.068]                       if (inherits(cond, "message")) {
[17:00:38.068]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:38.068]                         if (muffled) 
[17:00:38.068]                           invokeRestart("muffleMessage")
[17:00:38.068]                       }
[17:00:38.068]                       else if (inherits(cond, "warning")) {
[17:00:38.068]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:38.068]                         if (muffled) 
[17:00:38.068]                           invokeRestart("muffleWarning")
[17:00:38.068]                       }
[17:00:38.068]                       else if (inherits(cond, "condition")) {
[17:00:38.068]                         if (!is.null(pattern)) {
[17:00:38.068]                           computeRestarts <- base::computeRestarts
[17:00:38.068]                           grepl <- base::grepl
[17:00:38.068]                           restarts <- computeRestarts(cond)
[17:00:38.068]                           for (restart in restarts) {
[17:00:38.068]                             name <- restart$name
[17:00:38.068]                             if (is.null(name)) 
[17:00:38.068]                               next
[17:00:38.068]                             if (!grepl(pattern, name)) 
[17:00:38.068]                               next
[17:00:38.068]                             invokeRestart(restart)
[17:00:38.068]                             muffled <- TRUE
[17:00:38.068]                             break
[17:00:38.068]                           }
[17:00:38.068]                         }
[17:00:38.068]                       }
[17:00:38.068]                       invisible(muffled)
[17:00:38.068]                     }
[17:00:38.068]                     muffleCondition(cond, pattern = "^muffle")
[17:00:38.068]                   }
[17:00:38.068]                 }
[17:00:38.068]                 else {
[17:00:38.068]                   if (TRUE) {
[17:00:38.068]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:38.068]                     {
[17:00:38.068]                       inherits <- base::inherits
[17:00:38.068]                       invokeRestart <- base::invokeRestart
[17:00:38.068]                       is.null <- base::is.null
[17:00:38.068]                       muffled <- FALSE
[17:00:38.068]                       if (inherits(cond, "message")) {
[17:00:38.068]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:38.068]                         if (muffled) 
[17:00:38.068]                           invokeRestart("muffleMessage")
[17:00:38.068]                       }
[17:00:38.068]                       else if (inherits(cond, "warning")) {
[17:00:38.068]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:38.068]                         if (muffled) 
[17:00:38.068]                           invokeRestart("muffleWarning")
[17:00:38.068]                       }
[17:00:38.068]                       else if (inherits(cond, "condition")) {
[17:00:38.068]                         if (!is.null(pattern)) {
[17:00:38.068]                           computeRestarts <- base::computeRestarts
[17:00:38.068]                           grepl <- base::grepl
[17:00:38.068]                           restarts <- computeRestarts(cond)
[17:00:38.068]                           for (restart in restarts) {
[17:00:38.068]                             name <- restart$name
[17:00:38.068]                             if (is.null(name)) 
[17:00:38.068]                               next
[17:00:38.068]                             if (!grepl(pattern, name)) 
[17:00:38.068]                               next
[17:00:38.068]                             invokeRestart(restart)
[17:00:38.068]                             muffled <- TRUE
[17:00:38.068]                             break
[17:00:38.068]                           }
[17:00:38.068]                         }
[17:00:38.068]                       }
[17:00:38.068]                       invisible(muffled)
[17:00:38.068]                     }
[17:00:38.068]                     muffleCondition(cond, pattern = "^muffle")
[17:00:38.068]                   }
[17:00:38.068]                 }
[17:00:38.068]             }
[17:00:38.068]         }))
[17:00:38.068]     }, error = function(ex) {
[17:00:38.068]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:38.068]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:38.068]                 ...future.rng), started = ...future.startTime, 
[17:00:38.068]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:38.068]             version = "1.8"), class = "FutureResult")
[17:00:38.068]     }, finally = {
[17:00:38.068]         if (!identical(...future.workdir, getwd())) 
[17:00:38.068]             setwd(...future.workdir)
[17:00:38.068]         {
[17:00:38.068]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:38.068]                 ...future.oldOptions$nwarnings <- NULL
[17:00:38.068]             }
[17:00:38.068]             base::options(...future.oldOptions)
[17:00:38.068]             if (.Platform$OS.type == "windows") {
[17:00:38.068]                 old_names <- names(...future.oldEnvVars)
[17:00:38.068]                 envs <- base::Sys.getenv()
[17:00:38.068]                 names <- names(envs)
[17:00:38.068]                 common <- intersect(names, old_names)
[17:00:38.068]                 added <- setdiff(names, old_names)
[17:00:38.068]                 removed <- setdiff(old_names, names)
[17:00:38.068]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:38.068]                   envs[common]]
[17:00:38.068]                 NAMES <- toupper(changed)
[17:00:38.068]                 args <- list()
[17:00:38.068]                 for (kk in seq_along(NAMES)) {
[17:00:38.068]                   name <- changed[[kk]]
[17:00:38.068]                   NAME <- NAMES[[kk]]
[17:00:38.068]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:38.068]                     next
[17:00:38.068]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:38.068]                 }
[17:00:38.068]                 NAMES <- toupper(added)
[17:00:38.068]                 for (kk in seq_along(NAMES)) {
[17:00:38.068]                   name <- added[[kk]]
[17:00:38.068]                   NAME <- NAMES[[kk]]
[17:00:38.068]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:38.068]                     next
[17:00:38.068]                   args[[name]] <- ""
[17:00:38.068]                 }
[17:00:38.068]                 NAMES <- toupper(removed)
[17:00:38.068]                 for (kk in seq_along(NAMES)) {
[17:00:38.068]                   name <- removed[[kk]]
[17:00:38.068]                   NAME <- NAMES[[kk]]
[17:00:38.068]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:38.068]                     next
[17:00:38.068]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:38.068]                 }
[17:00:38.068]                 if (length(args) > 0) 
[17:00:38.068]                   base::do.call(base::Sys.setenv, args = args)
[17:00:38.068]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:38.068]             }
[17:00:38.068]             else {
[17:00:38.068]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:38.068]             }
[17:00:38.068]             {
[17:00:38.068]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:38.068]                   0L) {
[17:00:38.068]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:38.068]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:38.068]                   base::options(opts)
[17:00:38.068]                 }
[17:00:38.068]                 {
[17:00:38.068]                   {
[17:00:38.068]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:38.068]                     NULL
[17:00:38.068]                   }
[17:00:38.068]                   options(future.plan = NULL)
[17:00:38.068]                   if (is.na(NA_character_)) 
[17:00:38.068]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:38.068]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:38.068]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:38.068]                     .init = FALSE)
[17:00:38.068]                 }
[17:00:38.068]             }
[17:00:38.068]         }
[17:00:38.068]     })
[17:00:38.068]     if (TRUE) {
[17:00:38.068]         base::sink(type = "output", split = FALSE)
[17:00:38.068]         if (TRUE) {
[17:00:38.068]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:38.068]         }
[17:00:38.068]         else {
[17:00:38.068]             ...future.result["stdout"] <- base::list(NULL)
[17:00:38.068]         }
[17:00:38.068]         base::close(...future.stdout)
[17:00:38.068]         ...future.stdout <- NULL
[17:00:38.068]     }
[17:00:38.068]     ...future.result$conditions <- ...future.conditions
[17:00:38.068]     ...future.result$finished <- base::Sys.time()
[17:00:38.068]     ...future.result
[17:00:38.068] }
[17:00:38.071] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[17:00:38.071] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[17:00:38.071] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[17:00:38.071] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:00:38.072] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:00:38.072] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:00:38.072] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:00:38.073] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:00:38.073] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:00:38.073] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:00:38.073] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:00:38.073] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[17:00:38.074] MultisessionFuture started
[17:00:38.074] - Launch lazy future ... done
[17:00:38.074] run() for ‘MultisessionFuture’ ... done
[17:00:38.074] Created future:
[17:00:38.075] MultisessionFuture:
[17:00:38.075] Label: ‘future_replicate-2’
[17:00:38.075] Expression:
[17:00:38.075] {
[17:00:38.075]     do.call(function(...) {
[17:00:38.075]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:38.075]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:38.075]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:38.075]             on.exit(options(oopts), add = TRUE)
[17:00:38.075]         }
[17:00:38.075]         {
[17:00:38.075]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:38.075]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:38.075]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:38.075]                   envir = globalenv(), inherits = FALSE)
[17:00:38.075]                 ...future.FUN(...future.X_jj, ...)
[17:00:38.075]             })
[17:00:38.075]         }
[17:00:38.075]     }, args = future.call.arguments)
[17:00:38.075] }
[17:00:38.075] Lazy evaluation: FALSE
[17:00:38.075] Asynchronous evaluation: TRUE
[17:00:38.075] Local evaluation: TRUE
[17:00:38.075] Environment: R_GlobalEnv
[17:00:38.075] Capture standard output: TRUE
[17:00:38.075] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:38.075] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:38.075] Packages: <none>
[17:00:38.075] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:38.075] Resolved: FALSE
[17:00:38.075] Value: <not collected>
[17:00:38.075] Conditions captured: <none>
[17:00:38.075] Early signaling: FALSE
[17:00:38.075] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:38.075] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:38.086] Chunk #2 of 2 ... DONE
[17:00:38.086] Launching 2 futures (chunks) ... DONE
[17:00:38.086] Resolving 2 futures (chunks) ...
[17:00:38.087] resolve() on list ...
[17:00:38.087]  recursive: 0
[17:00:38.087]  length: 2
[17:00:38.087] 
[17:00:38.087] receiveMessageFromWorker() for ClusterFuture ...
[17:00:38.087] - Validating connection of MultisessionFuture
[17:00:38.088] - received message: FutureResult
[17:00:38.088] - Received FutureResult
[17:00:38.088] - Erased future from FutureRegistry
[17:00:38.088] result() for ClusterFuture ...
[17:00:38.088] - result already collected: FutureResult
[17:00:38.088] result() for ClusterFuture ... done
[17:00:38.088] receiveMessageFromWorker() for ClusterFuture ... done
[17:00:38.088] Future #1
[17:00:38.088] result() for ClusterFuture ...
[17:00:38.088] - result already collected: FutureResult
[17:00:38.089] result() for ClusterFuture ... done
[17:00:38.089] result() for ClusterFuture ...
[17:00:38.089] - result already collected: FutureResult
[17:00:38.089] result() for ClusterFuture ... done
[17:00:38.089] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:00:38.089] - nx: 2
[17:00:38.089] - relay: TRUE
[17:00:38.089] - stdout: TRUE
[17:00:38.089] - signal: TRUE
[17:00:38.089] - resignal: FALSE
[17:00:38.089] - force: TRUE
[17:00:38.089] - relayed: [n=2] FALSE, FALSE
[17:00:38.090] - queued futures: [n=2] FALSE, FALSE
[17:00:38.090]  - until=1
[17:00:38.090]  - relaying element #1
[17:00:38.090] result() for ClusterFuture ...
[17:00:38.090] - result already collected: FutureResult
[17:00:38.090] result() for ClusterFuture ... done
[17:00:38.090] result() for ClusterFuture ...
[17:00:38.090] - result already collected: FutureResult
[17:00:38.090] result() for ClusterFuture ... done
[17:00:38.090] result() for ClusterFuture ...
[17:00:38.090] - result already collected: FutureResult
[17:00:38.091] result() for ClusterFuture ... done
[17:00:38.091] result() for ClusterFuture ...
[17:00:38.091] - result already collected: FutureResult
[17:00:38.091] result() for ClusterFuture ... done
[17:00:38.091] - relayed: [n=2] TRUE, FALSE
[17:00:38.091] - queued futures: [n=2] TRUE, FALSE
[17:00:38.091] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:00:38.091]  length: 1 (resolved future 1)
[17:00:38.117] receiveMessageFromWorker() for ClusterFuture ...
[17:00:38.117] - Validating connection of MultisessionFuture
[17:00:38.117] - received message: FutureResult
[17:00:38.118] - Received FutureResult
[17:00:38.118] - Erased future from FutureRegistry
[17:00:38.118] result() for ClusterFuture ...
[17:00:38.118] - result already collected: FutureResult
[17:00:38.118] result() for ClusterFuture ... done
[17:00:38.118] receiveMessageFromWorker() for ClusterFuture ... done
[17:00:38.118] Future #2
[17:00:38.118] result() for ClusterFuture ...
[17:00:38.118] - result already collected: FutureResult
[17:00:38.118] result() for ClusterFuture ... done
[17:00:38.118] result() for ClusterFuture ...
[17:00:38.119] - result already collected: FutureResult
[17:00:38.119] result() for ClusterFuture ... done
[17:00:38.119] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:00:38.119] - nx: 2
[17:00:38.119] - relay: TRUE
[17:00:38.119] - stdout: TRUE
[17:00:38.119] - signal: TRUE
[17:00:38.119] - resignal: FALSE
[17:00:38.119] - force: TRUE
[17:00:38.119] - relayed: [n=2] TRUE, FALSE
[17:00:38.119] - queued futures: [n=2] TRUE, FALSE
[17:00:38.120]  - until=2
[17:00:38.120]  - relaying element #2
[17:00:38.120] result() for ClusterFuture ...
[17:00:38.120] - result already collected: FutureResult
[17:00:38.120] result() for ClusterFuture ... done
[17:00:38.120] result() for ClusterFuture ...
[17:00:38.120] - result already collected: FutureResult
[17:00:38.120] result() for ClusterFuture ... done
[17:00:38.120] result() for ClusterFuture ...
[17:00:38.120] - result already collected: FutureResult
[17:00:38.120] result() for ClusterFuture ... done
[17:00:38.120] result() for ClusterFuture ...
[17:00:38.121] - result already collected: FutureResult
[17:00:38.121] result() for ClusterFuture ... done
[17:00:38.121] - relayed: [n=2] TRUE, TRUE
[17:00:38.121] - queued futures: [n=2] TRUE, TRUE
[17:00:38.121] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:00:38.121]  length: 0 (resolved future 2)
[17:00:38.121] Relaying remaining futures
[17:00:38.121] signalConditionsASAP(NULL, pos=0) ...
[17:00:38.121] - nx: 2
[17:00:38.121] - relay: TRUE
[17:00:38.121] - stdout: TRUE
[17:00:38.122] - signal: TRUE
[17:00:38.122] - resignal: FALSE
[17:00:38.122] - force: TRUE
[17:00:38.122] - relayed: [n=2] TRUE, TRUE
[17:00:38.122] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:00:38.122] - relayed: [n=2] TRUE, TRUE
[17:00:38.122] - queued futures: [n=2] TRUE, TRUE
[17:00:38.122] signalConditionsASAP(NULL, pos=0) ... done
[17:00:38.122] resolve() on list ... DONE
[17:00:38.122] result() for ClusterFuture ...
[17:00:38.122] - result already collected: FutureResult
[17:00:38.123] result() for ClusterFuture ... done
[17:00:38.123] result() for ClusterFuture ...
[17:00:38.123] - result already collected: FutureResult
[17:00:38.123] result() for ClusterFuture ... done
[17:00:38.123] result() for ClusterFuture ...
[17:00:38.123] - result already collected: FutureResult
[17:00:38.123] result() for ClusterFuture ... done
[17:00:38.123] result() for ClusterFuture ...
[17:00:38.123] - result already collected: FutureResult
[17:00:38.123] result() for ClusterFuture ... done
[17:00:38.123]  - Number of value chunks collected: 2
[17:00:38.124] Resolving 2 futures (chunks) ... DONE
[17:00:38.124] Reducing values from 2 chunks ...
[17:00:38.124]  - Number of values collected after concatenation: 5
[17:00:38.124]  - Number of values expected: 5
[17:00:38.124] Reducing values from 2 chunks ... DONE
[17:00:38.124] future_lapply() ... DONE
[17:00:38.124] future_lapply() ...
[17:00:38.125] Generating random seeds ...
[17:00:38.125] Generating random seed streams for 5 elements ...
[17:00:38.125] Generating random seed streams for 5 elements ... DONE
[17:00:38.125] Generating random seeds ... DONE
[17:00:38.125] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:00:38.129] Number of chunks: 2
[17:00:38.130] getGlobalsAndPackagesXApply() ...
[17:00:38.130]  - future.globals: TRUE
[17:00:38.130] getGlobalsAndPackages() ...
[17:00:38.130] Searching for globals...
[17:00:38.131] - globals found: [2] ‘FUN’, ‘sample’
[17:00:38.131] Searching for globals ... DONE
[17:00:38.131] Resolving globals: FALSE
[17:00:38.132] The total size of the 1 globals is 616 bytes (616 bytes)
[17:00:38.132] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:00:38.132] - globals: [1] ‘FUN’
[17:00:38.132] 
[17:00:38.132] getGlobalsAndPackages() ... DONE
[17:00:38.132]  - globals found/used: [n=1] ‘FUN’
[17:00:38.132]  - needed namespaces: [n=0] 
[17:00:38.132] Finding globals ... DONE
[17:00:38.133]  - use_args: TRUE
[17:00:38.133]  - Getting '...' globals ...
[17:00:38.133] resolve() on list ...
[17:00:38.133]  recursive: 0
[17:00:38.133]  length: 1
[17:00:38.133]  elements: ‘...’
[17:00:38.133]  length: 0 (resolved future 1)
[17:00:38.133] resolve() on list ... DONE
[17:00:38.134]    - '...' content: [n=0] 
[17:00:38.134] List of 1
[17:00:38.134]  $ ...: list()
[17:00:38.134]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:38.134]  - attr(*, "where")=List of 1
[17:00:38.134]   ..$ ...:<environment: 0x558561acf110> 
[17:00:38.134]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:38.134]  - attr(*, "resolved")= logi TRUE
[17:00:38.134]  - attr(*, "total_size")= num NA
[17:00:38.136]  - Getting '...' globals ... DONE
[17:00:38.136] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:00:38.136] List of 2
[17:00:38.136]  $ ...future.FUN:function (...)  
[17:00:38.136]  $ ...          : list()
[17:00:38.136]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:38.136]  - attr(*, "where")=List of 2
[17:00:38.136]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:00:38.136]   ..$ ...          :<environment: 0x558561acf110> 
[17:00:38.136]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:38.136]  - attr(*, "resolved")= logi FALSE
[17:00:38.136]  - attr(*, "total_size")= num 616
[17:00:38.139] Packages to be attached in all futures: [n=0] 
[17:00:38.139] getGlobalsAndPackagesXApply() ... DONE
[17:00:38.139] Number of futures (= number of chunks): 2
[17:00:38.139] Launching 2 futures (chunks) ...
[17:00:38.139] Chunk #1 of 2 ...
[17:00:38.140]  - Finding globals in 'X' for chunk #1 ...
[17:00:38.140] getGlobalsAndPackages() ...
[17:00:38.140] Searching for globals...
[17:00:38.140] 
[17:00:38.140] Searching for globals ... DONE
[17:00:38.140] - globals: [0] <none>
[17:00:38.140] getGlobalsAndPackages() ... DONE
[17:00:38.140]    + additional globals found: [n=0] 
[17:00:38.140]    + additional namespaces needed: [n=0] 
[17:00:38.141]  - Finding globals in 'X' for chunk #1 ... DONE
[17:00:38.141]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:38.141]  - seeds: [2] <seeds>
[17:00:38.141]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:38.141] getGlobalsAndPackages() ...
[17:00:38.141] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:38.141] Resolving globals: FALSE
[17:00:38.141] Tweak future expression to call with '...' arguments ...
[17:00:38.141] {
[17:00:38.141]     do.call(function(...) {
[17:00:38.141]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:38.141]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:38.141]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:38.141]             on.exit(options(oopts), add = TRUE)
[17:00:38.141]         }
[17:00:38.141]         {
[17:00:38.141]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:38.141]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:38.141]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:38.141]                   envir = globalenv(), inherits = FALSE)
[17:00:38.141]                 ...future.FUN(...future.X_jj, ...)
[17:00:38.141]             })
[17:00:38.141]         }
[17:00:38.141]     }, args = future.call.arguments)
[17:00:38.141] }
[17:00:38.142] Tweak future expression to call with '...' arguments ... DONE
[17:00:38.142] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:38.142] 
[17:00:38.142] getGlobalsAndPackages() ... DONE
[17:00:38.142] run() for ‘Future’ ...
[17:00:38.143] - state: ‘created’
[17:00:38.143] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:00:38.157] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:38.157] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:00:38.157]   - Field: ‘node’
[17:00:38.157]   - Field: ‘label’
[17:00:38.157]   - Field: ‘local’
[17:00:38.157]   - Field: ‘owner’
[17:00:38.157]   - Field: ‘envir’
[17:00:38.158]   - Field: ‘workers’
[17:00:38.158]   - Field: ‘packages’
[17:00:38.158]   - Field: ‘gc’
[17:00:38.158]   - Field: ‘conditions’
[17:00:38.158]   - Field: ‘persistent’
[17:00:38.158]   - Field: ‘expr’
[17:00:38.158]   - Field: ‘uuid’
[17:00:38.158]   - Field: ‘seed’
[17:00:38.158]   - Field: ‘version’
[17:00:38.158]   - Field: ‘result’
[17:00:38.158]   - Field: ‘asynchronous’
[17:00:38.159]   - Field: ‘calls’
[17:00:38.159]   - Field: ‘globals’
[17:00:38.159]   - Field: ‘stdout’
[17:00:38.159]   - Field: ‘earlySignal’
[17:00:38.159]   - Field: ‘lazy’
[17:00:38.159]   - Field: ‘state’
[17:00:38.159] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:00:38.159] - Launch lazy future ...
[17:00:38.159] Packages needed by the future expression (n = 0): <none>
[17:00:38.160] Packages needed by future strategies (n = 0): <none>
[17:00:38.160] {
[17:00:38.160]     {
[17:00:38.160]         {
[17:00:38.160]             ...future.startTime <- base::Sys.time()
[17:00:38.160]             {
[17:00:38.160]                 {
[17:00:38.160]                   {
[17:00:38.160]                     {
[17:00:38.160]                       base::local({
[17:00:38.160]                         has_future <- base::requireNamespace("future", 
[17:00:38.160]                           quietly = TRUE)
[17:00:38.160]                         if (has_future) {
[17:00:38.160]                           ns <- base::getNamespace("future")
[17:00:38.160]                           version <- ns[[".package"]][["version"]]
[17:00:38.160]                           if (is.null(version)) 
[17:00:38.160]                             version <- utils::packageVersion("future")
[17:00:38.160]                         }
[17:00:38.160]                         else {
[17:00:38.160]                           version <- NULL
[17:00:38.160]                         }
[17:00:38.160]                         if (!has_future || version < "1.8.0") {
[17:00:38.160]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:38.160]                             "", base::R.version$version.string), 
[17:00:38.160]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:38.160]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:38.160]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:38.160]                               "release", "version")], collapse = " "), 
[17:00:38.160]                             hostname = base::Sys.info()[["nodename"]])
[17:00:38.160]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:38.160]                             info)
[17:00:38.160]                           info <- base::paste(info, collapse = "; ")
[17:00:38.160]                           if (!has_future) {
[17:00:38.160]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:38.160]                               info)
[17:00:38.160]                           }
[17:00:38.160]                           else {
[17:00:38.160]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:38.160]                               info, version)
[17:00:38.160]                           }
[17:00:38.160]                           base::stop(msg)
[17:00:38.160]                         }
[17:00:38.160]                       })
[17:00:38.160]                     }
[17:00:38.160]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:38.160]                     base::options(mc.cores = 1L)
[17:00:38.160]                   }
[17:00:38.160]                   ...future.strategy.old <- future::plan("list")
[17:00:38.160]                   options(future.plan = NULL)
[17:00:38.160]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:38.160]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:38.160]                 }
[17:00:38.160]                 ...future.workdir <- getwd()
[17:00:38.160]             }
[17:00:38.160]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:38.160]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:38.160]         }
[17:00:38.160]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:38.160]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:38.160]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:38.160]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:38.160]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:38.160]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:38.160]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:38.160]             base::names(...future.oldOptions))
[17:00:38.160]     }
[17:00:38.160]     if (FALSE) {
[17:00:38.160]     }
[17:00:38.160]     else {
[17:00:38.160]         if (TRUE) {
[17:00:38.160]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:38.160]                 open = "w")
[17:00:38.160]         }
[17:00:38.160]         else {
[17:00:38.160]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:38.160]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:38.160]         }
[17:00:38.160]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:38.160]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:38.160]             base::sink(type = "output", split = FALSE)
[17:00:38.160]             base::close(...future.stdout)
[17:00:38.160]         }, add = TRUE)
[17:00:38.160]     }
[17:00:38.160]     ...future.frame <- base::sys.nframe()
[17:00:38.160]     ...future.conditions <- base::list()
[17:00:38.160]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:38.160]     if (FALSE) {
[17:00:38.160]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:38.160]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:38.160]     }
[17:00:38.160]     ...future.result <- base::tryCatch({
[17:00:38.160]         base::withCallingHandlers({
[17:00:38.160]             ...future.value <- base::withVisible(base::local({
[17:00:38.160]                 ...future.makeSendCondition <- base::local({
[17:00:38.160]                   sendCondition <- NULL
[17:00:38.160]                   function(frame = 1L) {
[17:00:38.160]                     if (is.function(sendCondition)) 
[17:00:38.160]                       return(sendCondition)
[17:00:38.160]                     ns <- getNamespace("parallel")
[17:00:38.160]                     if (exists("sendData", mode = "function", 
[17:00:38.160]                       envir = ns)) {
[17:00:38.160]                       parallel_sendData <- get("sendData", mode = "function", 
[17:00:38.160]                         envir = ns)
[17:00:38.160]                       envir <- sys.frame(frame)
[17:00:38.160]                       master <- NULL
[17:00:38.160]                       while (!identical(envir, .GlobalEnv) && 
[17:00:38.160]                         !identical(envir, emptyenv())) {
[17:00:38.160]                         if (exists("master", mode = "list", envir = envir, 
[17:00:38.160]                           inherits = FALSE)) {
[17:00:38.160]                           master <- get("master", mode = "list", 
[17:00:38.160]                             envir = envir, inherits = FALSE)
[17:00:38.160]                           if (inherits(master, c("SOCKnode", 
[17:00:38.160]                             "SOCK0node"))) {
[17:00:38.160]                             sendCondition <<- function(cond) {
[17:00:38.160]                               data <- list(type = "VALUE", value = cond, 
[17:00:38.160]                                 success = TRUE)
[17:00:38.160]                               parallel_sendData(master, data)
[17:00:38.160]                             }
[17:00:38.160]                             return(sendCondition)
[17:00:38.160]                           }
[17:00:38.160]                         }
[17:00:38.160]                         frame <- frame + 1L
[17:00:38.160]                         envir <- sys.frame(frame)
[17:00:38.160]                       }
[17:00:38.160]                     }
[17:00:38.160]                     sendCondition <<- function(cond) NULL
[17:00:38.160]                   }
[17:00:38.160]                 })
[17:00:38.160]                 withCallingHandlers({
[17:00:38.160]                   {
[17:00:38.160]                     do.call(function(...) {
[17:00:38.160]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:38.160]                       if (!identical(...future.globals.maxSize.org, 
[17:00:38.160]                         ...future.globals.maxSize)) {
[17:00:38.160]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:38.160]                         on.exit(options(oopts), add = TRUE)
[17:00:38.160]                       }
[17:00:38.160]                       {
[17:00:38.160]                         lapply(seq_along(...future.elements_ii), 
[17:00:38.160]                           FUN = function(jj) {
[17:00:38.160]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:38.160]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:38.160]                               envir = globalenv(), inherits = FALSE)
[17:00:38.160]                             ...future.FUN(...future.X_jj, ...)
[17:00:38.160]                           })
[17:00:38.160]                       }
[17:00:38.160]                     }, args = future.call.arguments)
[17:00:38.160]                   }
[17:00:38.160]                 }, immediateCondition = function(cond) {
[17:00:38.160]                   sendCondition <- ...future.makeSendCondition()
[17:00:38.160]                   sendCondition(cond)
[17:00:38.160]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:38.160]                   {
[17:00:38.160]                     inherits <- base::inherits
[17:00:38.160]                     invokeRestart <- base::invokeRestart
[17:00:38.160]                     is.null <- base::is.null
[17:00:38.160]                     muffled <- FALSE
[17:00:38.160]                     if (inherits(cond, "message")) {
[17:00:38.160]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:38.160]                       if (muffled) 
[17:00:38.160]                         invokeRestart("muffleMessage")
[17:00:38.160]                     }
[17:00:38.160]                     else if (inherits(cond, "warning")) {
[17:00:38.160]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:38.160]                       if (muffled) 
[17:00:38.160]                         invokeRestart("muffleWarning")
[17:00:38.160]                     }
[17:00:38.160]                     else if (inherits(cond, "condition")) {
[17:00:38.160]                       if (!is.null(pattern)) {
[17:00:38.160]                         computeRestarts <- base::computeRestarts
[17:00:38.160]                         grepl <- base::grepl
[17:00:38.160]                         restarts <- computeRestarts(cond)
[17:00:38.160]                         for (restart in restarts) {
[17:00:38.160]                           name <- restart$name
[17:00:38.160]                           if (is.null(name)) 
[17:00:38.160]                             next
[17:00:38.160]                           if (!grepl(pattern, name)) 
[17:00:38.160]                             next
[17:00:38.160]                           invokeRestart(restart)
[17:00:38.160]                           muffled <- TRUE
[17:00:38.160]                           break
[17:00:38.160]                         }
[17:00:38.160]                       }
[17:00:38.160]                     }
[17:00:38.160]                     invisible(muffled)
[17:00:38.160]                   }
[17:00:38.160]                   muffleCondition(cond)
[17:00:38.160]                 })
[17:00:38.160]             }))
[17:00:38.160]             future::FutureResult(value = ...future.value$value, 
[17:00:38.160]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:38.160]                   ...future.rng), globalenv = if (FALSE) 
[17:00:38.160]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:38.160]                     ...future.globalenv.names))
[17:00:38.160]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:38.160]         }, condition = base::local({
[17:00:38.160]             c <- base::c
[17:00:38.160]             inherits <- base::inherits
[17:00:38.160]             invokeRestart <- base::invokeRestart
[17:00:38.160]             length <- base::length
[17:00:38.160]             list <- base::list
[17:00:38.160]             seq.int <- base::seq.int
[17:00:38.160]             signalCondition <- base::signalCondition
[17:00:38.160]             sys.calls <- base::sys.calls
[17:00:38.160]             `[[` <- base::`[[`
[17:00:38.160]             `+` <- base::`+`
[17:00:38.160]             `<<-` <- base::`<<-`
[17:00:38.160]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:38.160]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:38.160]                   3L)]
[17:00:38.160]             }
[17:00:38.160]             function(cond) {
[17:00:38.160]                 is_error <- inherits(cond, "error")
[17:00:38.160]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:38.160]                   NULL)
[17:00:38.160]                 if (is_error) {
[17:00:38.160]                   sessionInformation <- function() {
[17:00:38.160]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:38.160]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:38.160]                       search = base::search(), system = base::Sys.info())
[17:00:38.160]                   }
[17:00:38.160]                   ...future.conditions[[length(...future.conditions) + 
[17:00:38.160]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:38.160]                     cond$call), session = sessionInformation(), 
[17:00:38.160]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:38.160]                   signalCondition(cond)
[17:00:38.160]                 }
[17:00:38.160]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:38.160]                 "immediateCondition"))) {
[17:00:38.160]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:38.160]                   ...future.conditions[[length(...future.conditions) + 
[17:00:38.160]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:38.160]                   if (TRUE && !signal) {
[17:00:38.160]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:38.160]                     {
[17:00:38.160]                       inherits <- base::inherits
[17:00:38.160]                       invokeRestart <- base::invokeRestart
[17:00:38.160]                       is.null <- base::is.null
[17:00:38.160]                       muffled <- FALSE
[17:00:38.160]                       if (inherits(cond, "message")) {
[17:00:38.160]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:38.160]                         if (muffled) 
[17:00:38.160]                           invokeRestart("muffleMessage")
[17:00:38.160]                       }
[17:00:38.160]                       else if (inherits(cond, "warning")) {
[17:00:38.160]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:38.160]                         if (muffled) 
[17:00:38.160]                           invokeRestart("muffleWarning")
[17:00:38.160]                       }
[17:00:38.160]                       else if (inherits(cond, "condition")) {
[17:00:38.160]                         if (!is.null(pattern)) {
[17:00:38.160]                           computeRestarts <- base::computeRestarts
[17:00:38.160]                           grepl <- base::grepl
[17:00:38.160]                           restarts <- computeRestarts(cond)
[17:00:38.160]                           for (restart in restarts) {
[17:00:38.160]                             name <- restart$name
[17:00:38.160]                             if (is.null(name)) 
[17:00:38.160]                               next
[17:00:38.160]                             if (!grepl(pattern, name)) 
[17:00:38.160]                               next
[17:00:38.160]                             invokeRestart(restart)
[17:00:38.160]                             muffled <- TRUE
[17:00:38.160]                             break
[17:00:38.160]                           }
[17:00:38.160]                         }
[17:00:38.160]                       }
[17:00:38.160]                       invisible(muffled)
[17:00:38.160]                     }
[17:00:38.160]                     muffleCondition(cond, pattern = "^muffle")
[17:00:38.160]                   }
[17:00:38.160]                 }
[17:00:38.160]                 else {
[17:00:38.160]                   if (TRUE) {
[17:00:38.160]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:38.160]                     {
[17:00:38.160]                       inherits <- base::inherits
[17:00:38.160]                       invokeRestart <- base::invokeRestart
[17:00:38.160]                       is.null <- base::is.null
[17:00:38.160]                       muffled <- FALSE
[17:00:38.160]                       if (inherits(cond, "message")) {
[17:00:38.160]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:38.160]                         if (muffled) 
[17:00:38.160]                           invokeRestart("muffleMessage")
[17:00:38.160]                       }
[17:00:38.160]                       else if (inherits(cond, "warning")) {
[17:00:38.160]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:38.160]                         if (muffled) 
[17:00:38.160]                           invokeRestart("muffleWarning")
[17:00:38.160]                       }
[17:00:38.160]                       else if (inherits(cond, "condition")) {
[17:00:38.160]                         if (!is.null(pattern)) {
[17:00:38.160]                           computeRestarts <- base::computeRestarts
[17:00:38.160]                           grepl <- base::grepl
[17:00:38.160]                           restarts <- computeRestarts(cond)
[17:00:38.160]                           for (restart in restarts) {
[17:00:38.160]                             name <- restart$name
[17:00:38.160]                             if (is.null(name)) 
[17:00:38.160]                               next
[17:00:38.160]                             if (!grepl(pattern, name)) 
[17:00:38.160]                               next
[17:00:38.160]                             invokeRestart(restart)
[17:00:38.160]                             muffled <- TRUE
[17:00:38.160]                             break
[17:00:38.160]                           }
[17:00:38.160]                         }
[17:00:38.160]                       }
[17:00:38.160]                       invisible(muffled)
[17:00:38.160]                     }
[17:00:38.160]                     muffleCondition(cond, pattern = "^muffle")
[17:00:38.160]                   }
[17:00:38.160]                 }
[17:00:38.160]             }
[17:00:38.160]         }))
[17:00:38.160]     }, error = function(ex) {
[17:00:38.160]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:38.160]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:38.160]                 ...future.rng), started = ...future.startTime, 
[17:00:38.160]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:38.160]             version = "1.8"), class = "FutureResult")
[17:00:38.160]     }, finally = {
[17:00:38.160]         if (!identical(...future.workdir, getwd())) 
[17:00:38.160]             setwd(...future.workdir)
[17:00:38.160]         {
[17:00:38.160]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:38.160]                 ...future.oldOptions$nwarnings <- NULL
[17:00:38.160]             }
[17:00:38.160]             base::options(...future.oldOptions)
[17:00:38.160]             if (.Platform$OS.type == "windows") {
[17:00:38.160]                 old_names <- names(...future.oldEnvVars)
[17:00:38.160]                 envs <- base::Sys.getenv()
[17:00:38.160]                 names <- names(envs)
[17:00:38.160]                 common <- intersect(names, old_names)
[17:00:38.160]                 added <- setdiff(names, old_names)
[17:00:38.160]                 removed <- setdiff(old_names, names)
[17:00:38.160]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:38.160]                   envs[common]]
[17:00:38.160]                 NAMES <- toupper(changed)
[17:00:38.160]                 args <- list()
[17:00:38.160]                 for (kk in seq_along(NAMES)) {
[17:00:38.160]                   name <- changed[[kk]]
[17:00:38.160]                   NAME <- NAMES[[kk]]
[17:00:38.160]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:38.160]                     next
[17:00:38.160]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:38.160]                 }
[17:00:38.160]                 NAMES <- toupper(added)
[17:00:38.160]                 for (kk in seq_along(NAMES)) {
[17:00:38.160]                   name <- added[[kk]]
[17:00:38.160]                   NAME <- NAMES[[kk]]
[17:00:38.160]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:38.160]                     next
[17:00:38.160]                   args[[name]] <- ""
[17:00:38.160]                 }
[17:00:38.160]                 NAMES <- toupper(removed)
[17:00:38.160]                 for (kk in seq_along(NAMES)) {
[17:00:38.160]                   name <- removed[[kk]]
[17:00:38.160]                   NAME <- NAMES[[kk]]
[17:00:38.160]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:38.160]                     next
[17:00:38.160]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:38.160]                 }
[17:00:38.160]                 if (length(args) > 0) 
[17:00:38.160]                   base::do.call(base::Sys.setenv, args = args)
[17:00:38.160]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:38.160]             }
[17:00:38.160]             else {
[17:00:38.160]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:38.160]             }
[17:00:38.160]             {
[17:00:38.160]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:38.160]                   0L) {
[17:00:38.160]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:38.160]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:38.160]                   base::options(opts)
[17:00:38.160]                 }
[17:00:38.160]                 {
[17:00:38.160]                   {
[17:00:38.160]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:38.160]                     NULL
[17:00:38.160]                   }
[17:00:38.160]                   options(future.plan = NULL)
[17:00:38.160]                   if (is.na(NA_character_)) 
[17:00:38.160]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:38.160]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:38.160]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:38.160]                     .init = FALSE)
[17:00:38.160]                 }
[17:00:38.160]             }
[17:00:38.160]         }
[17:00:38.160]     })
[17:00:38.160]     if (TRUE) {
[17:00:38.160]         base::sink(type = "output", split = FALSE)
[17:00:38.160]         if (TRUE) {
[17:00:38.160]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:38.160]         }
[17:00:38.160]         else {
[17:00:38.160]             ...future.result["stdout"] <- base::list(NULL)
[17:00:38.160]         }
[17:00:38.160]         base::close(...future.stdout)
[17:00:38.160]         ...future.stdout <- NULL
[17:00:38.160]     }
[17:00:38.160]     ...future.result$conditions <- ...future.conditions
[17:00:38.160]     ...future.result$finished <- base::Sys.time()
[17:00:38.160]     ...future.result
[17:00:38.160] }
[17:00:38.163] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[17:00:38.163] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[17:00:38.163] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[17:00:38.164] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:00:38.164] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:00:38.164] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:00:38.165] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:00:38.165] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:00:38.165] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:00:38.165] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:00:38.166] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:00:38.166] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[17:00:38.166] MultisessionFuture started
[17:00:38.166] - Launch lazy future ... done
[17:00:38.167] run() for ‘MultisessionFuture’ ... done
[17:00:38.167] Created future:
[17:00:38.167] MultisessionFuture:
[17:00:38.167] Label: ‘future_replicate-1’
[17:00:38.167] Expression:
[17:00:38.167] {
[17:00:38.167]     do.call(function(...) {
[17:00:38.167]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:38.167]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:38.167]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:38.167]             on.exit(options(oopts), add = TRUE)
[17:00:38.167]         }
[17:00:38.167]         {
[17:00:38.167]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:38.167]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:38.167]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:38.167]                   envir = globalenv(), inherits = FALSE)
[17:00:38.167]                 ...future.FUN(...future.X_jj, ...)
[17:00:38.167]             })
[17:00:38.167]         }
[17:00:38.167]     }, args = future.call.arguments)
[17:00:38.167] }
[17:00:38.167] Lazy evaluation: FALSE
[17:00:38.167] Asynchronous evaluation: TRUE
[17:00:38.167] Local evaluation: TRUE
[17:00:38.167] Environment: R_GlobalEnv
[17:00:38.167] Capture standard output: TRUE
[17:00:38.167] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:38.167] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:38.167] Packages: <none>
[17:00:38.167] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:38.167] Resolved: FALSE
[17:00:38.167] Value: <not collected>
[17:00:38.167] Conditions captured: <none>
[17:00:38.167] Early signaling: FALSE
[17:00:38.167] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:38.167] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:38.179] Chunk #1 of 2 ... DONE
[17:00:38.179] Chunk #2 of 2 ...
[17:00:38.179]  - Finding globals in 'X' for chunk #2 ...
[17:00:38.179] getGlobalsAndPackages() ...
[17:00:38.179] Searching for globals...
[17:00:38.179] 
[17:00:38.180] Searching for globals ... DONE
[17:00:38.180] - globals: [0] <none>
[17:00:38.180] getGlobalsAndPackages() ... DONE
[17:00:38.180]    + additional globals found: [n=0] 
[17:00:38.180]    + additional namespaces needed: [n=0] 
[17:00:38.180]  - Finding globals in 'X' for chunk #2 ... DONE
[17:00:38.180]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:38.180]  - seeds: [3] <seeds>
[17:00:38.180]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:38.180] getGlobalsAndPackages() ...
[17:00:38.180] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:38.181] Resolving globals: FALSE
[17:00:38.181] Tweak future expression to call with '...' arguments ...
[17:00:38.181] {
[17:00:38.181]     do.call(function(...) {
[17:00:38.181]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:38.181]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:38.181]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:38.181]             on.exit(options(oopts), add = TRUE)
[17:00:38.181]         }
[17:00:38.181]         {
[17:00:38.181]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:38.181]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:38.181]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:38.181]                   envir = globalenv(), inherits = FALSE)
[17:00:38.181]                 ...future.FUN(...future.X_jj, ...)
[17:00:38.181]             })
[17:00:38.181]         }
[17:00:38.181]     }, args = future.call.arguments)
[17:00:38.181] }
[17:00:38.181] Tweak future expression to call with '...' arguments ... DONE
[17:00:38.181] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:38.182] 
[17:00:38.182] getGlobalsAndPackages() ... DONE
[17:00:38.182] run() for ‘Future’ ...
[17:00:38.182] - state: ‘created’
[17:00:38.182] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:00:38.197] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:38.197] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:00:38.197]   - Field: ‘node’
[17:00:38.197]   - Field: ‘label’
[17:00:38.197]   - Field: ‘local’
[17:00:38.197]   - Field: ‘owner’
[17:00:38.197]   - Field: ‘envir’
[17:00:38.198]   - Field: ‘workers’
[17:00:38.198]   - Field: ‘packages’
[17:00:38.198]   - Field: ‘gc’
[17:00:38.198]   - Field: ‘conditions’
[17:00:38.198]   - Field: ‘persistent’
[17:00:38.198]   - Field: ‘expr’
[17:00:38.198]   - Field: ‘uuid’
[17:00:38.198]   - Field: ‘seed’
[17:00:38.198]   - Field: ‘version’
[17:00:38.198]   - Field: ‘result’
[17:00:38.199]   - Field: ‘asynchronous’
[17:00:38.199]   - Field: ‘calls’
[17:00:38.199]   - Field: ‘globals’
[17:00:38.199]   - Field: ‘stdout’
[17:00:38.199]   - Field: ‘earlySignal’
[17:00:38.199]   - Field: ‘lazy’
[17:00:38.199]   - Field: ‘state’
[17:00:38.199] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:00:38.199] - Launch lazy future ...
[17:00:38.200] Packages needed by the future expression (n = 0): <none>
[17:00:38.200] Packages needed by future strategies (n = 0): <none>
[17:00:38.200] {
[17:00:38.200]     {
[17:00:38.200]         {
[17:00:38.200]             ...future.startTime <- base::Sys.time()
[17:00:38.200]             {
[17:00:38.200]                 {
[17:00:38.200]                   {
[17:00:38.200]                     {
[17:00:38.200]                       base::local({
[17:00:38.200]                         has_future <- base::requireNamespace("future", 
[17:00:38.200]                           quietly = TRUE)
[17:00:38.200]                         if (has_future) {
[17:00:38.200]                           ns <- base::getNamespace("future")
[17:00:38.200]                           version <- ns[[".package"]][["version"]]
[17:00:38.200]                           if (is.null(version)) 
[17:00:38.200]                             version <- utils::packageVersion("future")
[17:00:38.200]                         }
[17:00:38.200]                         else {
[17:00:38.200]                           version <- NULL
[17:00:38.200]                         }
[17:00:38.200]                         if (!has_future || version < "1.8.0") {
[17:00:38.200]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:38.200]                             "", base::R.version$version.string), 
[17:00:38.200]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:38.200]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:38.200]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:38.200]                               "release", "version")], collapse = " "), 
[17:00:38.200]                             hostname = base::Sys.info()[["nodename"]])
[17:00:38.200]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:38.200]                             info)
[17:00:38.200]                           info <- base::paste(info, collapse = "; ")
[17:00:38.200]                           if (!has_future) {
[17:00:38.200]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:38.200]                               info)
[17:00:38.200]                           }
[17:00:38.200]                           else {
[17:00:38.200]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:38.200]                               info, version)
[17:00:38.200]                           }
[17:00:38.200]                           base::stop(msg)
[17:00:38.200]                         }
[17:00:38.200]                       })
[17:00:38.200]                     }
[17:00:38.200]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:38.200]                     base::options(mc.cores = 1L)
[17:00:38.200]                   }
[17:00:38.200]                   ...future.strategy.old <- future::plan("list")
[17:00:38.200]                   options(future.plan = NULL)
[17:00:38.200]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:38.200]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:38.200]                 }
[17:00:38.200]                 ...future.workdir <- getwd()
[17:00:38.200]             }
[17:00:38.200]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:38.200]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:38.200]         }
[17:00:38.200]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:38.200]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:38.200]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:38.200]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:38.200]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:38.200]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:38.200]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:38.200]             base::names(...future.oldOptions))
[17:00:38.200]     }
[17:00:38.200]     if (FALSE) {
[17:00:38.200]     }
[17:00:38.200]     else {
[17:00:38.200]         if (TRUE) {
[17:00:38.200]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:38.200]                 open = "w")
[17:00:38.200]         }
[17:00:38.200]         else {
[17:00:38.200]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:38.200]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:38.200]         }
[17:00:38.200]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:38.200]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:38.200]             base::sink(type = "output", split = FALSE)
[17:00:38.200]             base::close(...future.stdout)
[17:00:38.200]         }, add = TRUE)
[17:00:38.200]     }
[17:00:38.200]     ...future.frame <- base::sys.nframe()
[17:00:38.200]     ...future.conditions <- base::list()
[17:00:38.200]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:38.200]     if (FALSE) {
[17:00:38.200]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:38.200]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:38.200]     }
[17:00:38.200]     ...future.result <- base::tryCatch({
[17:00:38.200]         base::withCallingHandlers({
[17:00:38.200]             ...future.value <- base::withVisible(base::local({
[17:00:38.200]                 ...future.makeSendCondition <- base::local({
[17:00:38.200]                   sendCondition <- NULL
[17:00:38.200]                   function(frame = 1L) {
[17:00:38.200]                     if (is.function(sendCondition)) 
[17:00:38.200]                       return(sendCondition)
[17:00:38.200]                     ns <- getNamespace("parallel")
[17:00:38.200]                     if (exists("sendData", mode = "function", 
[17:00:38.200]                       envir = ns)) {
[17:00:38.200]                       parallel_sendData <- get("sendData", mode = "function", 
[17:00:38.200]                         envir = ns)
[17:00:38.200]                       envir <- sys.frame(frame)
[17:00:38.200]                       master <- NULL
[17:00:38.200]                       while (!identical(envir, .GlobalEnv) && 
[17:00:38.200]                         !identical(envir, emptyenv())) {
[17:00:38.200]                         if (exists("master", mode = "list", envir = envir, 
[17:00:38.200]                           inherits = FALSE)) {
[17:00:38.200]                           master <- get("master", mode = "list", 
[17:00:38.200]                             envir = envir, inherits = FALSE)
[17:00:38.200]                           if (inherits(master, c("SOCKnode", 
[17:00:38.200]                             "SOCK0node"))) {
[17:00:38.200]                             sendCondition <<- function(cond) {
[17:00:38.200]                               data <- list(type = "VALUE", value = cond, 
[17:00:38.200]                                 success = TRUE)
[17:00:38.200]                               parallel_sendData(master, data)
[17:00:38.200]                             }
[17:00:38.200]                             return(sendCondition)
[17:00:38.200]                           }
[17:00:38.200]                         }
[17:00:38.200]                         frame <- frame + 1L
[17:00:38.200]                         envir <- sys.frame(frame)
[17:00:38.200]                       }
[17:00:38.200]                     }
[17:00:38.200]                     sendCondition <<- function(cond) NULL
[17:00:38.200]                   }
[17:00:38.200]                 })
[17:00:38.200]                 withCallingHandlers({
[17:00:38.200]                   {
[17:00:38.200]                     do.call(function(...) {
[17:00:38.200]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:38.200]                       if (!identical(...future.globals.maxSize.org, 
[17:00:38.200]                         ...future.globals.maxSize)) {
[17:00:38.200]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:38.200]                         on.exit(options(oopts), add = TRUE)
[17:00:38.200]                       }
[17:00:38.200]                       {
[17:00:38.200]                         lapply(seq_along(...future.elements_ii), 
[17:00:38.200]                           FUN = function(jj) {
[17:00:38.200]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:38.200]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:38.200]                               envir = globalenv(), inherits = FALSE)
[17:00:38.200]                             ...future.FUN(...future.X_jj, ...)
[17:00:38.200]                           })
[17:00:38.200]                       }
[17:00:38.200]                     }, args = future.call.arguments)
[17:00:38.200]                   }
[17:00:38.200]                 }, immediateCondition = function(cond) {
[17:00:38.200]                   sendCondition <- ...future.makeSendCondition()
[17:00:38.200]                   sendCondition(cond)
[17:00:38.200]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:38.200]                   {
[17:00:38.200]                     inherits <- base::inherits
[17:00:38.200]                     invokeRestart <- base::invokeRestart
[17:00:38.200]                     is.null <- base::is.null
[17:00:38.200]                     muffled <- FALSE
[17:00:38.200]                     if (inherits(cond, "message")) {
[17:00:38.200]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:38.200]                       if (muffled) 
[17:00:38.200]                         invokeRestart("muffleMessage")
[17:00:38.200]                     }
[17:00:38.200]                     else if (inherits(cond, "warning")) {
[17:00:38.200]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:38.200]                       if (muffled) 
[17:00:38.200]                         invokeRestart("muffleWarning")
[17:00:38.200]                     }
[17:00:38.200]                     else if (inherits(cond, "condition")) {
[17:00:38.200]                       if (!is.null(pattern)) {
[17:00:38.200]                         computeRestarts <- base::computeRestarts
[17:00:38.200]                         grepl <- base::grepl
[17:00:38.200]                         restarts <- computeRestarts(cond)
[17:00:38.200]                         for (restart in restarts) {
[17:00:38.200]                           name <- restart$name
[17:00:38.200]                           if (is.null(name)) 
[17:00:38.200]                             next
[17:00:38.200]                           if (!grepl(pattern, name)) 
[17:00:38.200]                             next
[17:00:38.200]                           invokeRestart(restart)
[17:00:38.200]                           muffled <- TRUE
[17:00:38.200]                           break
[17:00:38.200]                         }
[17:00:38.200]                       }
[17:00:38.200]                     }
[17:00:38.200]                     invisible(muffled)
[17:00:38.200]                   }
[17:00:38.200]                   muffleCondition(cond)
[17:00:38.200]                 })
[17:00:38.200]             }))
[17:00:38.200]             future::FutureResult(value = ...future.value$value, 
[17:00:38.200]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:38.200]                   ...future.rng), globalenv = if (FALSE) 
[17:00:38.200]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:38.200]                     ...future.globalenv.names))
[17:00:38.200]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:38.200]         }, condition = base::local({
[17:00:38.200]             c <- base::c
[17:00:38.200]             inherits <- base::inherits
[17:00:38.200]             invokeRestart <- base::invokeRestart
[17:00:38.200]             length <- base::length
[17:00:38.200]             list <- base::list
[17:00:38.200]             seq.int <- base::seq.int
[17:00:38.200]             signalCondition <- base::signalCondition
[17:00:38.200]             sys.calls <- base::sys.calls
[17:00:38.200]             `[[` <- base::`[[`
[17:00:38.200]             `+` <- base::`+`
[17:00:38.200]             `<<-` <- base::`<<-`
[17:00:38.200]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:38.200]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:38.200]                   3L)]
[17:00:38.200]             }
[17:00:38.200]             function(cond) {
[17:00:38.200]                 is_error <- inherits(cond, "error")
[17:00:38.200]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:38.200]                   NULL)
[17:00:38.200]                 if (is_error) {
[17:00:38.200]                   sessionInformation <- function() {
[17:00:38.200]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:38.200]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:38.200]                       search = base::search(), system = base::Sys.info())
[17:00:38.200]                   }
[17:00:38.200]                   ...future.conditions[[length(...future.conditions) + 
[17:00:38.200]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:38.200]                     cond$call), session = sessionInformation(), 
[17:00:38.200]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:38.200]                   signalCondition(cond)
[17:00:38.200]                 }
[17:00:38.200]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:38.200]                 "immediateCondition"))) {
[17:00:38.200]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:38.200]                   ...future.conditions[[length(...future.conditions) + 
[17:00:38.200]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:38.200]                   if (TRUE && !signal) {
[17:00:38.200]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:38.200]                     {
[17:00:38.200]                       inherits <- base::inherits
[17:00:38.200]                       invokeRestart <- base::invokeRestart
[17:00:38.200]                       is.null <- base::is.null
[17:00:38.200]                       muffled <- FALSE
[17:00:38.200]                       if (inherits(cond, "message")) {
[17:00:38.200]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:38.200]                         if (muffled) 
[17:00:38.200]                           invokeRestart("muffleMessage")
[17:00:38.200]                       }
[17:00:38.200]                       else if (inherits(cond, "warning")) {
[17:00:38.200]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:38.200]                         if (muffled) 
[17:00:38.200]                           invokeRestart("muffleWarning")
[17:00:38.200]                       }
[17:00:38.200]                       else if (inherits(cond, "condition")) {
[17:00:38.200]                         if (!is.null(pattern)) {
[17:00:38.200]                           computeRestarts <- base::computeRestarts
[17:00:38.200]                           grepl <- base::grepl
[17:00:38.200]                           restarts <- computeRestarts(cond)
[17:00:38.200]                           for (restart in restarts) {
[17:00:38.200]                             name <- restart$name
[17:00:38.200]                             if (is.null(name)) 
[17:00:38.200]                               next
[17:00:38.200]                             if (!grepl(pattern, name)) 
[17:00:38.200]                               next
[17:00:38.200]                             invokeRestart(restart)
[17:00:38.200]                             muffled <- TRUE
[17:00:38.200]                             break
[17:00:38.200]                           }
[17:00:38.200]                         }
[17:00:38.200]                       }
[17:00:38.200]                       invisible(muffled)
[17:00:38.200]                     }
[17:00:38.200]                     muffleCondition(cond, pattern = "^muffle")
[17:00:38.200]                   }
[17:00:38.200]                 }
[17:00:38.200]                 else {
[17:00:38.200]                   if (TRUE) {
[17:00:38.200]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:38.200]                     {
[17:00:38.200]                       inherits <- base::inherits
[17:00:38.200]                       invokeRestart <- base::invokeRestart
[17:00:38.200]                       is.null <- base::is.null
[17:00:38.200]                       muffled <- FALSE
[17:00:38.200]                       if (inherits(cond, "message")) {
[17:00:38.200]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:38.200]                         if (muffled) 
[17:00:38.200]                           invokeRestart("muffleMessage")
[17:00:38.200]                       }
[17:00:38.200]                       else if (inherits(cond, "warning")) {
[17:00:38.200]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:38.200]                         if (muffled) 
[17:00:38.200]                           invokeRestart("muffleWarning")
[17:00:38.200]                       }
[17:00:38.200]                       else if (inherits(cond, "condition")) {
[17:00:38.200]                         if (!is.null(pattern)) {
[17:00:38.200]                           computeRestarts <- base::computeRestarts
[17:00:38.200]                           grepl <- base::grepl
[17:00:38.200]                           restarts <- computeRestarts(cond)
[17:00:38.200]                           for (restart in restarts) {
[17:00:38.200]                             name <- restart$name
[17:00:38.200]                             if (is.null(name)) 
[17:00:38.200]                               next
[17:00:38.200]                             if (!grepl(pattern, name)) 
[17:00:38.200]                               next
[17:00:38.200]                             invokeRestart(restart)
[17:00:38.200]                             muffled <- TRUE
[17:00:38.200]                             break
[17:00:38.200]                           }
[17:00:38.200]                         }
[17:00:38.200]                       }
[17:00:38.200]                       invisible(muffled)
[17:00:38.200]                     }
[17:00:38.200]                     muffleCondition(cond, pattern = "^muffle")
[17:00:38.200]                   }
[17:00:38.200]                 }
[17:00:38.200]             }
[17:00:38.200]         }))
[17:00:38.200]     }, error = function(ex) {
[17:00:38.200]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:38.200]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:38.200]                 ...future.rng), started = ...future.startTime, 
[17:00:38.200]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:38.200]             version = "1.8"), class = "FutureResult")
[17:00:38.200]     }, finally = {
[17:00:38.200]         if (!identical(...future.workdir, getwd())) 
[17:00:38.200]             setwd(...future.workdir)
[17:00:38.200]         {
[17:00:38.200]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:38.200]                 ...future.oldOptions$nwarnings <- NULL
[17:00:38.200]             }
[17:00:38.200]             base::options(...future.oldOptions)
[17:00:38.200]             if (.Platform$OS.type == "windows") {
[17:00:38.200]                 old_names <- names(...future.oldEnvVars)
[17:00:38.200]                 envs <- base::Sys.getenv()
[17:00:38.200]                 names <- names(envs)
[17:00:38.200]                 common <- intersect(names, old_names)
[17:00:38.200]                 added <- setdiff(names, old_names)
[17:00:38.200]                 removed <- setdiff(old_names, names)
[17:00:38.200]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:38.200]                   envs[common]]
[17:00:38.200]                 NAMES <- toupper(changed)
[17:00:38.200]                 args <- list()
[17:00:38.200]                 for (kk in seq_along(NAMES)) {
[17:00:38.200]                   name <- changed[[kk]]
[17:00:38.200]                   NAME <- NAMES[[kk]]
[17:00:38.200]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:38.200]                     next
[17:00:38.200]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:38.200]                 }
[17:00:38.200]                 NAMES <- toupper(added)
[17:00:38.200]                 for (kk in seq_along(NAMES)) {
[17:00:38.200]                   name <- added[[kk]]
[17:00:38.200]                   NAME <- NAMES[[kk]]
[17:00:38.200]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:38.200]                     next
[17:00:38.200]                   args[[name]] <- ""
[17:00:38.200]                 }
[17:00:38.200]                 NAMES <- toupper(removed)
[17:00:38.200]                 for (kk in seq_along(NAMES)) {
[17:00:38.200]                   name <- removed[[kk]]
[17:00:38.200]                   NAME <- NAMES[[kk]]
[17:00:38.200]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:38.200]                     next
[17:00:38.200]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:38.200]                 }
[17:00:38.200]                 if (length(args) > 0) 
[17:00:38.200]                   base::do.call(base::Sys.setenv, args = args)
[17:00:38.200]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:38.200]             }
[17:00:38.200]             else {
[17:00:38.200]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:38.200]             }
[17:00:38.200]             {
[17:00:38.200]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:38.200]                   0L) {
[17:00:38.200]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:38.200]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:38.200]                   base::options(opts)
[17:00:38.200]                 }
[17:00:38.200]                 {
[17:00:38.200]                   {
[17:00:38.200]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:38.200]                     NULL
[17:00:38.200]                   }
[17:00:38.200]                   options(future.plan = NULL)
[17:00:38.200]                   if (is.na(NA_character_)) 
[17:00:38.200]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:38.200]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:38.200]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:38.200]                     .init = FALSE)
[17:00:38.200]                 }
[17:00:38.200]             }
[17:00:38.200]         }
[17:00:38.200]     })
[17:00:38.200]     if (TRUE) {
[17:00:38.200]         base::sink(type = "output", split = FALSE)
[17:00:38.200]         if (TRUE) {
[17:00:38.200]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:38.200]         }
[17:00:38.200]         else {
[17:00:38.200]             ...future.result["stdout"] <- base::list(NULL)
[17:00:38.200]         }
[17:00:38.200]         base::close(...future.stdout)
[17:00:38.200]         ...future.stdout <- NULL
[17:00:38.200]     }
[17:00:38.200]     ...future.result$conditions <- ...future.conditions
[17:00:38.200]     ...future.result$finished <- base::Sys.time()
[17:00:38.200]     ...future.result
[17:00:38.200] }
[17:00:38.203] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[17:00:38.203] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[17:00:38.204] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[17:00:38.204] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:00:38.204] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:00:38.204] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:00:38.205] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:00:38.205] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:00:38.205] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:00:38.205] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:00:38.206] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:00:38.206] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[17:00:38.206] MultisessionFuture started
[17:00:38.206] - Launch lazy future ... done
[17:00:38.206] run() for ‘MultisessionFuture’ ... done
[17:00:38.207] Created future:
[17:00:38.207] MultisessionFuture:
[17:00:38.207] Label: ‘future_replicate-2’
[17:00:38.207] Expression:
[17:00:38.207] {
[17:00:38.207]     do.call(function(...) {
[17:00:38.207]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:38.207]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:38.207]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:38.207]             on.exit(options(oopts), add = TRUE)
[17:00:38.207]         }
[17:00:38.207]         {
[17:00:38.207]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:38.207]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:38.207]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:38.207]                   envir = globalenv(), inherits = FALSE)
[17:00:38.207]                 ...future.FUN(...future.X_jj, ...)
[17:00:38.207]             })
[17:00:38.207]         }
[17:00:38.207]     }, args = future.call.arguments)
[17:00:38.207] }
[17:00:38.207] Lazy evaluation: FALSE
[17:00:38.207] Asynchronous evaluation: TRUE
[17:00:38.207] Local evaluation: TRUE
[17:00:38.207] Environment: R_GlobalEnv
[17:00:38.207] Capture standard output: TRUE
[17:00:38.207] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:38.207] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:00:38.207] Packages: <none>
[17:00:38.207] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:38.207] Resolved: FALSE
[17:00:38.207] Value: <not collected>
[17:00:38.207] Conditions captured: <none>
[17:00:38.207] Early signaling: FALSE
[17:00:38.207] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:38.207] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:38.219] Chunk #2 of 2 ... DONE
[17:00:38.219] Launching 2 futures (chunks) ... DONE
[17:00:38.219] Resolving 2 futures (chunks) ...
[17:00:38.219] resolve() on list ...
[17:00:38.219]  recursive: 0
[17:00:38.219]  length: 2
[17:00:38.219] 
[17:00:38.220] receiveMessageFromWorker() for ClusterFuture ...
[17:00:38.220] - Validating connection of MultisessionFuture
[17:00:38.220] - received message: FutureResult
[17:00:38.220] - Received FutureResult
[17:00:38.221] - Erased future from FutureRegistry
[17:00:38.221] result() for ClusterFuture ...
[17:00:38.221] - result already collected: FutureResult
[17:00:38.221] result() for ClusterFuture ... done
[17:00:38.221] receiveMessageFromWorker() for ClusterFuture ... done
[17:00:38.221] Future #1
[17:00:38.221] result() for ClusterFuture ...
[17:00:38.221] - result already collected: FutureResult
[17:00:38.221] result() for ClusterFuture ... done
[17:00:38.221] result() for ClusterFuture ...
[17:00:38.221] - result already collected: FutureResult
[17:00:38.221] result() for ClusterFuture ... done
[17:00:38.222] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:00:38.222] - nx: 2
[17:00:38.222] - relay: TRUE
[17:00:38.222] - stdout: TRUE
[17:00:38.222] - signal: TRUE
[17:00:38.222] - resignal: FALSE
[17:00:38.222] - force: TRUE
[17:00:38.222] - relayed: [n=2] FALSE, FALSE
[17:00:38.222] - queued futures: [n=2] FALSE, FALSE
[17:00:38.222]  - until=1
[17:00:38.222]  - relaying element #1
[17:00:38.223] result() for ClusterFuture ...
[17:00:38.223] - result already collected: FutureResult
[17:00:38.223] result() for ClusterFuture ... done
[17:00:38.223] result() for ClusterFuture ...
[17:00:38.223] - result already collected: FutureResult
[17:00:38.223] result() for ClusterFuture ... done
[17:00:38.223] result() for ClusterFuture ...
[17:00:38.223] - result already collected: FutureResult
[17:00:38.223] result() for ClusterFuture ... done
[17:00:38.223] result() for ClusterFuture ...
[17:00:38.223] - result already collected: FutureResult
[17:00:38.224] result() for ClusterFuture ... done
[17:00:38.224] - relayed: [n=2] TRUE, FALSE
[17:00:38.224] - queued futures: [n=2] TRUE, FALSE
[17:00:38.224] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:00:38.224]  length: 1 (resolved future 1)
[17:00:38.249] receiveMessageFromWorker() for ClusterFuture ...
[17:00:38.249] - Validating connection of MultisessionFuture
[17:00:38.249] - received message: FutureResult
[17:00:38.249] - Received FutureResult
[17:00:38.250] - Erased future from FutureRegistry
[17:00:38.250] result() for ClusterFuture ...
[17:00:38.250] - result already collected: FutureResult
[17:00:38.250] result() for ClusterFuture ... done
[17:00:38.250] receiveMessageFromWorker() for ClusterFuture ... done
[17:00:38.250] Future #2
[17:00:38.250] result() for ClusterFuture ...
[17:00:38.250] - result already collected: FutureResult
[17:00:38.250] result() for ClusterFuture ... done
[17:00:38.250] result() for ClusterFuture ...
[17:00:38.251] - result already collected: FutureResult
[17:00:38.251] result() for ClusterFuture ... done
[17:00:38.251] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:00:38.251] - nx: 2
[17:00:38.251] - relay: TRUE
[17:00:38.251] - stdout: TRUE
[17:00:38.251] - signal: TRUE
[17:00:38.251] - resignal: FALSE
[17:00:38.251] - force: TRUE
[17:00:38.251] - relayed: [n=2] TRUE, FALSE
[17:00:38.251] - queued futures: [n=2] TRUE, FALSE
[17:00:38.252]  - until=2
[17:00:38.252]  - relaying element #2
[17:00:38.252] result() for ClusterFuture ...
[17:00:38.252] - result already collected: FutureResult
[17:00:38.252] result() for ClusterFuture ... done
[17:00:38.252] result() for ClusterFuture ...
[17:00:38.252] - result already collected: FutureResult
[17:00:38.252] result() for ClusterFuture ... done
[17:00:38.252] result() for ClusterFuture ...
[17:00:38.252] - result already collected: FutureResult
[17:00:38.252] result() for ClusterFuture ... done
[17:00:38.253] result() for ClusterFuture ...
[17:00:38.253] - result already collected: FutureResult
[17:00:38.253] result() for ClusterFuture ... done
[17:00:38.253] - relayed: [n=2] TRUE, TRUE
[17:00:38.253] - queued futures: [n=2] TRUE, TRUE
[17:00:38.253] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:00:38.253]  length: 0 (resolved future 2)
[17:00:38.253] Relaying remaining futures
[17:00:38.253] signalConditionsASAP(NULL, pos=0) ...
[17:00:38.253] - nx: 2
[17:00:38.253] - relay: TRUE
[17:00:38.254] - stdout: TRUE
[17:00:38.254] - signal: TRUE
[17:00:38.254] - resignal: FALSE
[17:00:38.254] - force: TRUE
[17:00:38.254] - relayed: [n=2] TRUE, TRUE
[17:00:38.254] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:00:38.254] - relayed: [n=2] TRUE, TRUE
[17:00:38.254] - queued futures: [n=2] TRUE, TRUE
[17:00:38.254] signalConditionsASAP(NULL, pos=0) ... done
[17:00:38.254] resolve() on list ... DONE
[17:00:38.254] result() for ClusterFuture ...
[17:00:38.255] - result already collected: FutureResult
[17:00:38.255] result() for ClusterFuture ... done
[17:00:38.255] result() for ClusterFuture ...
[17:00:38.255] - result already collected: FutureResult
[17:00:38.257] result() for ClusterFuture ... done
[17:00:38.257] result() for ClusterFuture ...
[17:00:38.258] - result already collected: FutureResult
[17:00:38.258] result() for ClusterFuture ... done
[17:00:38.258] result() for ClusterFuture ...
[17:00:38.258] - result already collected: FutureResult
[17:00:38.258] result() for ClusterFuture ... done
[17:00:38.258]  - Number of value chunks collected: 2
[17:00:38.258] Resolving 2 futures (chunks) ... DONE
[17:00:38.258] Reducing values from 2 chunks ...
[17:00:38.258]  - Number of values collected after concatenation: 5
[17:00:38.258]  - Number of values expected: 5
[17:00:38.258] Reducing values from 2 chunks ... DONE
[17:00:38.259] future_lapply() ... DONE
- example(replicate) ...
[17:00:38.259] future_lapply() ...
[17:00:38.259] Generating random seeds ...
[17:00:38.260] Generating random seed streams for 5 elements ...
[17:00:38.260] Generating random seed streams for 5 elements ... DONE
[17:00:38.260] Generating random seeds ... DONE
[17:00:38.260] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:00:38.264] Number of chunks: 2
[17:00:38.264] getGlobalsAndPackagesXApply() ...
[17:00:38.264]  - future.globals: TRUE
[17:00:38.265] getGlobalsAndPackages() ...
[17:00:38.265] Searching for globals...
[17:00:38.266] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[17:00:38.266] Searching for globals ... DONE
[17:00:38.267] Resolving globals: FALSE
[17:00:38.267] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[17:00:38.267] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[17:00:38.268] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[17:00:38.268] 
[17:00:38.268] getGlobalsAndPackages() ... DONE
[17:00:38.268]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[17:00:38.268]  - needed namespaces: [n=0] 
[17:00:38.268] Finding globals ... DONE
[17:00:38.268]  - use_args: TRUE
[17:00:38.268]  - Getting '...' globals ...
[17:00:38.269] resolve() on list ...
[17:00:38.269]  recursive: 0
[17:00:38.269]  length: 1
[17:00:38.269]  elements: ‘...’
[17:00:38.269]  length: 0 (resolved future 1)
[17:00:38.269] resolve() on list ... DONE
[17:00:38.269]    - '...' content: [n=0] 
[17:00:38.269] List of 1
[17:00:38.269]  $ ...: list()
[17:00:38.269]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:38.269]  - attr(*, "where")=List of 1
[17:00:38.269]   ..$ ...:<environment: 0x55856399ba48> 
[17:00:38.269]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:38.269]  - attr(*, "resolved")= logi TRUE
[17:00:38.269]  - attr(*, "total_size")= num NA
[17:00:38.272]  - Getting '...' globals ... DONE
[17:00:38.272] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[17:00:38.272] List of 4
[17:00:38.272]  $ ...future.FUN:function (...)  
[17:00:38.272]  $ foo          :function (x = 1, y = 2)  
[17:00:38.272]  $ x            : num 3
[17:00:38.272]  $ ...          : list()
[17:00:38.272]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:00:38.272]  - attr(*, "where")=List of 4
[17:00:38.272]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:00:38.272]   ..$ foo          :<environment: R_EmptyEnv> 
[17:00:38.272]   ..$ x            :<environment: R_EmptyEnv> 
[17:00:38.272]   ..$ ...          :<environment: 0x55856399ba48> 
[17:00:38.272]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:00:38.272]  - attr(*, "resolved")= logi FALSE
[17:00:38.272]  - attr(*, "total_size")= num 2200
[17:00:38.275] Packages to be attached in all futures: [n=0] 
[17:00:38.275] getGlobalsAndPackagesXApply() ... DONE
[17:00:38.276] Number of futures (= number of chunks): 2
[17:00:38.276] Launching 2 futures (chunks) ...
[17:00:38.276] Chunk #1 of 2 ...
[17:00:38.276]  - Finding globals in 'X' for chunk #1 ...
[17:00:38.276] getGlobalsAndPackages() ...
[17:00:38.276] Searching for globals...
[17:00:38.276] 
[17:00:38.276] Searching for globals ... DONE
[17:00:38.277] - globals: [0] <none>
[17:00:38.277] getGlobalsAndPackages() ... DONE
[17:00:38.277]    + additional globals found: [n=0] 
[17:00:38.277]    + additional namespaces needed: [n=0] 
[17:00:38.277]  - Finding globals in 'X' for chunk #1 ... DONE
[17:00:38.277]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:38.277]  - seeds: [2] <seeds>
[17:00:38.277]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:38.277] getGlobalsAndPackages() ...
[17:00:38.277] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:38.278] Resolving globals: FALSE
[17:00:38.278] Tweak future expression to call with '...' arguments ...
[17:00:38.278] {
[17:00:38.278]     do.call(function(...) {
[17:00:38.278]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:38.278]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:38.278]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:38.278]             on.exit(options(oopts), add = TRUE)
[17:00:38.278]         }
[17:00:38.278]         {
[17:00:38.278]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:38.278]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:38.278]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:38.278]                   envir = globalenv(), inherits = FALSE)
[17:00:38.278]                 ...future.FUN(...future.X_jj, ...)
[17:00:38.278]             })
[17:00:38.278]         }
[17:00:38.278]     }, args = future.call.arguments)
[17:00:38.278] }
[17:00:38.278] Tweak future expression to call with '...' arguments ... DONE
[17:00:38.278] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:38.278] 
[17:00:38.279] getGlobalsAndPackages() ... DONE
[17:00:38.279] run() for ‘Future’ ...
[17:00:38.279] - state: ‘created’
[17:00:38.279] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:00:38.294] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:38.295] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:00:38.295]   - Field: ‘node’
[17:00:38.295]   - Field: ‘label’
[17:00:38.295]   - Field: ‘local’
[17:00:38.295]   - Field: ‘owner’
[17:00:38.295]   - Field: ‘envir’
[17:00:38.295]   - Field: ‘workers’
[17:00:38.295]   - Field: ‘packages’
[17:00:38.295]   - Field: ‘gc’
[17:00:38.296]   - Field: ‘conditions’
[17:00:38.296]   - Field: ‘persistent’
[17:00:38.296]   - Field: ‘expr’
[17:00:38.296]   - Field: ‘uuid’
[17:00:38.296]   - Field: ‘seed’
[17:00:38.296]   - Field: ‘version’
[17:00:38.296]   - Field: ‘result’
[17:00:38.296]   - Field: ‘asynchronous’
[17:00:38.296]   - Field: ‘calls’
[17:00:38.296]   - Field: ‘globals’
[17:00:38.296]   - Field: ‘stdout’
[17:00:38.297]   - Field: ‘earlySignal’
[17:00:38.297]   - Field: ‘lazy’
[17:00:38.297]   - Field: ‘state’
[17:00:38.297] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:00:38.297] - Launch lazy future ...
[17:00:38.297] Packages needed by the future expression (n = 0): <none>
[17:00:38.297] Packages needed by future strategies (n = 0): <none>
[17:00:38.298] {
[17:00:38.298]     {
[17:00:38.298]         {
[17:00:38.298]             ...future.startTime <- base::Sys.time()
[17:00:38.298]             {
[17:00:38.298]                 {
[17:00:38.298]                   {
[17:00:38.298]                     {
[17:00:38.298]                       base::local({
[17:00:38.298]                         has_future <- base::requireNamespace("future", 
[17:00:38.298]                           quietly = TRUE)
[17:00:38.298]                         if (has_future) {
[17:00:38.298]                           ns <- base::getNamespace("future")
[17:00:38.298]                           version <- ns[[".package"]][["version"]]
[17:00:38.298]                           if (is.null(version)) 
[17:00:38.298]                             version <- utils::packageVersion("future")
[17:00:38.298]                         }
[17:00:38.298]                         else {
[17:00:38.298]                           version <- NULL
[17:00:38.298]                         }
[17:00:38.298]                         if (!has_future || version < "1.8.0") {
[17:00:38.298]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:38.298]                             "", base::R.version$version.string), 
[17:00:38.298]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:38.298]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:38.298]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:38.298]                               "release", "version")], collapse = " "), 
[17:00:38.298]                             hostname = base::Sys.info()[["nodename"]])
[17:00:38.298]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:38.298]                             info)
[17:00:38.298]                           info <- base::paste(info, collapse = "; ")
[17:00:38.298]                           if (!has_future) {
[17:00:38.298]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:38.298]                               info)
[17:00:38.298]                           }
[17:00:38.298]                           else {
[17:00:38.298]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:38.298]                               info, version)
[17:00:38.298]                           }
[17:00:38.298]                           base::stop(msg)
[17:00:38.298]                         }
[17:00:38.298]                       })
[17:00:38.298]                     }
[17:00:38.298]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:38.298]                     base::options(mc.cores = 1L)
[17:00:38.298]                   }
[17:00:38.298]                   ...future.strategy.old <- future::plan("list")
[17:00:38.298]                   options(future.plan = NULL)
[17:00:38.298]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:38.298]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:38.298]                 }
[17:00:38.298]                 ...future.workdir <- getwd()
[17:00:38.298]             }
[17:00:38.298]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:38.298]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:38.298]         }
[17:00:38.298]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:38.298]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:38.298]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:38.298]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:38.298]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:38.298]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:38.298]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:38.298]             base::names(...future.oldOptions))
[17:00:38.298]     }
[17:00:38.298]     if (FALSE) {
[17:00:38.298]     }
[17:00:38.298]     else {
[17:00:38.298]         if (TRUE) {
[17:00:38.298]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:38.298]                 open = "w")
[17:00:38.298]         }
[17:00:38.298]         else {
[17:00:38.298]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:38.298]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:38.298]         }
[17:00:38.298]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:38.298]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:38.298]             base::sink(type = "output", split = FALSE)
[17:00:38.298]             base::close(...future.stdout)
[17:00:38.298]         }, add = TRUE)
[17:00:38.298]     }
[17:00:38.298]     ...future.frame <- base::sys.nframe()
[17:00:38.298]     ...future.conditions <- base::list()
[17:00:38.298]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:38.298]     if (FALSE) {
[17:00:38.298]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:38.298]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:38.298]     }
[17:00:38.298]     ...future.result <- base::tryCatch({
[17:00:38.298]         base::withCallingHandlers({
[17:00:38.298]             ...future.value <- base::withVisible(base::local({
[17:00:38.298]                 ...future.makeSendCondition <- base::local({
[17:00:38.298]                   sendCondition <- NULL
[17:00:38.298]                   function(frame = 1L) {
[17:00:38.298]                     if (is.function(sendCondition)) 
[17:00:38.298]                       return(sendCondition)
[17:00:38.298]                     ns <- getNamespace("parallel")
[17:00:38.298]                     if (exists("sendData", mode = "function", 
[17:00:38.298]                       envir = ns)) {
[17:00:38.298]                       parallel_sendData <- get("sendData", mode = "function", 
[17:00:38.298]                         envir = ns)
[17:00:38.298]                       envir <- sys.frame(frame)
[17:00:38.298]                       master <- NULL
[17:00:38.298]                       while (!identical(envir, .GlobalEnv) && 
[17:00:38.298]                         !identical(envir, emptyenv())) {
[17:00:38.298]                         if (exists("master", mode = "list", envir = envir, 
[17:00:38.298]                           inherits = FALSE)) {
[17:00:38.298]                           master <- get("master", mode = "list", 
[17:00:38.298]                             envir = envir, inherits = FALSE)
[17:00:38.298]                           if (inherits(master, c("SOCKnode", 
[17:00:38.298]                             "SOCK0node"))) {
[17:00:38.298]                             sendCondition <<- function(cond) {
[17:00:38.298]                               data <- list(type = "VALUE", value = cond, 
[17:00:38.298]                                 success = TRUE)
[17:00:38.298]                               parallel_sendData(master, data)
[17:00:38.298]                             }
[17:00:38.298]                             return(sendCondition)
[17:00:38.298]                           }
[17:00:38.298]                         }
[17:00:38.298]                         frame <- frame + 1L
[17:00:38.298]                         envir <- sys.frame(frame)
[17:00:38.298]                       }
[17:00:38.298]                     }
[17:00:38.298]                     sendCondition <<- function(cond) NULL
[17:00:38.298]                   }
[17:00:38.298]                 })
[17:00:38.298]                 withCallingHandlers({
[17:00:38.298]                   {
[17:00:38.298]                     do.call(function(...) {
[17:00:38.298]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:38.298]                       if (!identical(...future.globals.maxSize.org, 
[17:00:38.298]                         ...future.globals.maxSize)) {
[17:00:38.298]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:38.298]                         on.exit(options(oopts), add = TRUE)
[17:00:38.298]                       }
[17:00:38.298]                       {
[17:00:38.298]                         lapply(seq_along(...future.elements_ii), 
[17:00:38.298]                           FUN = function(jj) {
[17:00:38.298]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:38.298]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:38.298]                               envir = globalenv(), inherits = FALSE)
[17:00:38.298]                             ...future.FUN(...future.X_jj, ...)
[17:00:38.298]                           })
[17:00:38.298]                       }
[17:00:38.298]                     }, args = future.call.arguments)
[17:00:38.298]                   }
[17:00:38.298]                 }, immediateCondition = function(cond) {
[17:00:38.298]                   sendCondition <- ...future.makeSendCondition()
[17:00:38.298]                   sendCondition(cond)
[17:00:38.298]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:38.298]                   {
[17:00:38.298]                     inherits <- base::inherits
[17:00:38.298]                     invokeRestart <- base::invokeRestart
[17:00:38.298]                     is.null <- base::is.null
[17:00:38.298]                     muffled <- FALSE
[17:00:38.298]                     if (inherits(cond, "message")) {
[17:00:38.298]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:38.298]                       if (muffled) 
[17:00:38.298]                         invokeRestart("muffleMessage")
[17:00:38.298]                     }
[17:00:38.298]                     else if (inherits(cond, "warning")) {
[17:00:38.298]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:38.298]                       if (muffled) 
[17:00:38.298]                         invokeRestart("muffleWarning")
[17:00:38.298]                     }
[17:00:38.298]                     else if (inherits(cond, "condition")) {
[17:00:38.298]                       if (!is.null(pattern)) {
[17:00:38.298]                         computeRestarts <- base::computeRestarts
[17:00:38.298]                         grepl <- base::grepl
[17:00:38.298]                         restarts <- computeRestarts(cond)
[17:00:38.298]                         for (restart in restarts) {
[17:00:38.298]                           name <- restart$name
[17:00:38.298]                           if (is.null(name)) 
[17:00:38.298]                             next
[17:00:38.298]                           if (!grepl(pattern, name)) 
[17:00:38.298]                             next
[17:00:38.298]                           invokeRestart(restart)
[17:00:38.298]                           muffled <- TRUE
[17:00:38.298]                           break
[17:00:38.298]                         }
[17:00:38.298]                       }
[17:00:38.298]                     }
[17:00:38.298]                     invisible(muffled)
[17:00:38.298]                   }
[17:00:38.298]                   muffleCondition(cond)
[17:00:38.298]                 })
[17:00:38.298]             }))
[17:00:38.298]             future::FutureResult(value = ...future.value$value, 
[17:00:38.298]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:38.298]                   ...future.rng), globalenv = if (FALSE) 
[17:00:38.298]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:38.298]                     ...future.globalenv.names))
[17:00:38.298]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:38.298]         }, condition = base::local({
[17:00:38.298]             c <- base::c
[17:00:38.298]             inherits <- base::inherits
[17:00:38.298]             invokeRestart <- base::invokeRestart
[17:00:38.298]             length <- base::length
[17:00:38.298]             list <- base::list
[17:00:38.298]             seq.int <- base::seq.int
[17:00:38.298]             signalCondition <- base::signalCondition
[17:00:38.298]             sys.calls <- base::sys.calls
[17:00:38.298]             `[[` <- base::`[[`
[17:00:38.298]             `+` <- base::`+`
[17:00:38.298]             `<<-` <- base::`<<-`
[17:00:38.298]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:38.298]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:38.298]                   3L)]
[17:00:38.298]             }
[17:00:38.298]             function(cond) {
[17:00:38.298]                 is_error <- inherits(cond, "error")
[17:00:38.298]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:38.298]                   NULL)
[17:00:38.298]                 if (is_error) {
[17:00:38.298]                   sessionInformation <- function() {
[17:00:38.298]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:38.298]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:38.298]                       search = base::search(), system = base::Sys.info())
[17:00:38.298]                   }
[17:00:38.298]                   ...future.conditions[[length(...future.conditions) + 
[17:00:38.298]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:38.298]                     cond$call), session = sessionInformation(), 
[17:00:38.298]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:38.298]                   signalCondition(cond)
[17:00:38.298]                 }
[17:00:38.298]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:38.298]                 "immediateCondition"))) {
[17:00:38.298]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:38.298]                   ...future.conditions[[length(...future.conditions) + 
[17:00:38.298]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:38.298]                   if (TRUE && !signal) {
[17:00:38.298]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:38.298]                     {
[17:00:38.298]                       inherits <- base::inherits
[17:00:38.298]                       invokeRestart <- base::invokeRestart
[17:00:38.298]                       is.null <- base::is.null
[17:00:38.298]                       muffled <- FALSE
[17:00:38.298]                       if (inherits(cond, "message")) {
[17:00:38.298]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:38.298]                         if (muffled) 
[17:00:38.298]                           invokeRestart("muffleMessage")
[17:00:38.298]                       }
[17:00:38.298]                       else if (inherits(cond, "warning")) {
[17:00:38.298]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:38.298]                         if (muffled) 
[17:00:38.298]                           invokeRestart("muffleWarning")
[17:00:38.298]                       }
[17:00:38.298]                       else if (inherits(cond, "condition")) {
[17:00:38.298]                         if (!is.null(pattern)) {
[17:00:38.298]                           computeRestarts <- base::computeRestarts
[17:00:38.298]                           grepl <- base::grepl
[17:00:38.298]                           restarts <- computeRestarts(cond)
[17:00:38.298]                           for (restart in restarts) {
[17:00:38.298]                             name <- restart$name
[17:00:38.298]                             if (is.null(name)) 
[17:00:38.298]                               next
[17:00:38.298]                             if (!grepl(pattern, name)) 
[17:00:38.298]                               next
[17:00:38.298]                             invokeRestart(restart)
[17:00:38.298]                             muffled <- TRUE
[17:00:38.298]                             break
[17:00:38.298]                           }
[17:00:38.298]                         }
[17:00:38.298]                       }
[17:00:38.298]                       invisible(muffled)
[17:00:38.298]                     }
[17:00:38.298]                     muffleCondition(cond, pattern = "^muffle")
[17:00:38.298]                   }
[17:00:38.298]                 }
[17:00:38.298]                 else {
[17:00:38.298]                   if (TRUE) {
[17:00:38.298]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:38.298]                     {
[17:00:38.298]                       inherits <- base::inherits
[17:00:38.298]                       invokeRestart <- base::invokeRestart
[17:00:38.298]                       is.null <- base::is.null
[17:00:38.298]                       muffled <- FALSE
[17:00:38.298]                       if (inherits(cond, "message")) {
[17:00:38.298]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:38.298]                         if (muffled) 
[17:00:38.298]                           invokeRestart("muffleMessage")
[17:00:38.298]                       }
[17:00:38.298]                       else if (inherits(cond, "warning")) {
[17:00:38.298]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:38.298]                         if (muffled) 
[17:00:38.298]                           invokeRestart("muffleWarning")
[17:00:38.298]                       }
[17:00:38.298]                       else if (inherits(cond, "condition")) {
[17:00:38.298]                         if (!is.null(pattern)) {
[17:00:38.298]                           computeRestarts <- base::computeRestarts
[17:00:38.298]                           grepl <- base::grepl
[17:00:38.298]                           restarts <- computeRestarts(cond)
[17:00:38.298]                           for (restart in restarts) {
[17:00:38.298]                             name <- restart$name
[17:00:38.298]                             if (is.null(name)) 
[17:00:38.298]                               next
[17:00:38.298]                             if (!grepl(pattern, name)) 
[17:00:38.298]                               next
[17:00:38.298]                             invokeRestart(restart)
[17:00:38.298]                             muffled <- TRUE
[17:00:38.298]                             break
[17:00:38.298]                           }
[17:00:38.298]                         }
[17:00:38.298]                       }
[17:00:38.298]                       invisible(muffled)
[17:00:38.298]                     }
[17:00:38.298]                     muffleCondition(cond, pattern = "^muffle")
[17:00:38.298]                   }
[17:00:38.298]                 }
[17:00:38.298]             }
[17:00:38.298]         }))
[17:00:38.298]     }, error = function(ex) {
[17:00:38.298]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:38.298]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:38.298]                 ...future.rng), started = ...future.startTime, 
[17:00:38.298]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:38.298]             version = "1.8"), class = "FutureResult")
[17:00:38.298]     }, finally = {
[17:00:38.298]         if (!identical(...future.workdir, getwd())) 
[17:00:38.298]             setwd(...future.workdir)
[17:00:38.298]         {
[17:00:38.298]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:38.298]                 ...future.oldOptions$nwarnings <- NULL
[17:00:38.298]             }
[17:00:38.298]             base::options(...future.oldOptions)
[17:00:38.298]             if (.Platform$OS.type == "windows") {
[17:00:38.298]                 old_names <- names(...future.oldEnvVars)
[17:00:38.298]                 envs <- base::Sys.getenv()
[17:00:38.298]                 names <- names(envs)
[17:00:38.298]                 common <- intersect(names, old_names)
[17:00:38.298]                 added <- setdiff(names, old_names)
[17:00:38.298]                 removed <- setdiff(old_names, names)
[17:00:38.298]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:38.298]                   envs[common]]
[17:00:38.298]                 NAMES <- toupper(changed)
[17:00:38.298]                 args <- list()
[17:00:38.298]                 for (kk in seq_along(NAMES)) {
[17:00:38.298]                   name <- changed[[kk]]
[17:00:38.298]                   NAME <- NAMES[[kk]]
[17:00:38.298]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:38.298]                     next
[17:00:38.298]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:38.298]                 }
[17:00:38.298]                 NAMES <- toupper(added)
[17:00:38.298]                 for (kk in seq_along(NAMES)) {
[17:00:38.298]                   name <- added[[kk]]
[17:00:38.298]                   NAME <- NAMES[[kk]]
[17:00:38.298]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:38.298]                     next
[17:00:38.298]                   args[[name]] <- ""
[17:00:38.298]                 }
[17:00:38.298]                 NAMES <- toupper(removed)
[17:00:38.298]                 for (kk in seq_along(NAMES)) {
[17:00:38.298]                   name <- removed[[kk]]
[17:00:38.298]                   NAME <- NAMES[[kk]]
[17:00:38.298]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:38.298]                     next
[17:00:38.298]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:38.298]                 }
[17:00:38.298]                 if (length(args) > 0) 
[17:00:38.298]                   base::do.call(base::Sys.setenv, args = args)
[17:00:38.298]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:38.298]             }
[17:00:38.298]             else {
[17:00:38.298]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:38.298]             }
[17:00:38.298]             {
[17:00:38.298]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:38.298]                   0L) {
[17:00:38.298]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:38.298]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:38.298]                   base::options(opts)
[17:00:38.298]                 }
[17:00:38.298]                 {
[17:00:38.298]                   {
[17:00:38.298]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:38.298]                     NULL
[17:00:38.298]                   }
[17:00:38.298]                   options(future.plan = NULL)
[17:00:38.298]                   if (is.na(NA_character_)) 
[17:00:38.298]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:38.298]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:38.298]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:38.298]                     .init = FALSE)
[17:00:38.298]                 }
[17:00:38.298]             }
[17:00:38.298]         }
[17:00:38.298]     })
[17:00:38.298]     if (TRUE) {
[17:00:38.298]         base::sink(type = "output", split = FALSE)
[17:00:38.298]         if (TRUE) {
[17:00:38.298]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:38.298]         }
[17:00:38.298]         else {
[17:00:38.298]             ...future.result["stdout"] <- base::list(NULL)
[17:00:38.298]         }
[17:00:38.298]         base::close(...future.stdout)
[17:00:38.298]         ...future.stdout <- NULL
[17:00:38.298]     }
[17:00:38.298]     ...future.result$conditions <- ...future.conditions
[17:00:38.298]     ...future.result$finished <- base::Sys.time()
[17:00:38.298]     ...future.result
[17:00:38.298] }
[17:00:38.301] Exporting 7 global objects (2.15 KiB) to cluster node #1 ...
[17:00:38.301] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ...
[17:00:38.301] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ... DONE
[17:00:38.301] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ...
[17:00:38.301] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ... DONE
[17:00:38.302] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[17:00:38.302] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[17:00:38.302] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:00:38.302] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:00:38.303] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:00:38.303] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:00:38.303] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:00:38.303] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:00:38.304] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:00:38.304] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:00:38.304] Exporting 7 global objects (2.15 KiB) to cluster node #1 ... DONE
[17:00:38.304] MultisessionFuture started
[17:00:38.304] - Launch lazy future ... done
[17:00:38.305] run() for ‘MultisessionFuture’ ... done
[17:00:38.305] Created future:
[17:00:38.305] MultisessionFuture:
[17:00:38.305] Label: ‘future_replicate-1’
[17:00:38.305] Expression:
[17:00:38.305] {
[17:00:38.305]     do.call(function(...) {
[17:00:38.305]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:38.305]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:38.305]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:38.305]             on.exit(options(oopts), add = TRUE)
[17:00:38.305]         }
[17:00:38.305]         {
[17:00:38.305]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:38.305]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:38.305]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:38.305]                   envir = globalenv(), inherits = FALSE)
[17:00:38.305]                 ...future.FUN(...future.X_jj, ...)
[17:00:38.305]             })
[17:00:38.305]         }
[17:00:38.305]     }, args = future.call.arguments)
[17:00:38.305] }
[17:00:38.305] Lazy evaluation: FALSE
[17:00:38.305] Asynchronous evaluation: TRUE
[17:00:38.305] Local evaluation: TRUE
[17:00:38.305] Environment: 0x55856399dfc0
[17:00:38.305] Capture standard output: TRUE
[17:00:38.305] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:38.305] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[17:00:38.305] Packages: <none>
[17:00:38.305] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:38.305] Resolved: FALSE
[17:00:38.305] Value: <not collected>
[17:00:38.305] Conditions captured: <none>
[17:00:38.305] Early signaling: FALSE
[17:00:38.305] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:38.305] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:38.316] Chunk #1 of 2 ... DONE
[17:00:38.317] Chunk #2 of 2 ...
[17:00:38.317]  - Finding globals in 'X' for chunk #2 ...
[17:00:38.317] getGlobalsAndPackages() ...
[17:00:38.317] Searching for globals...
[17:00:38.317] 
[17:00:38.317] Searching for globals ... DONE
[17:00:38.317] - globals: [0] <none>
[17:00:38.317] getGlobalsAndPackages() ... DONE
[17:00:38.318]    + additional globals found: [n=0] 
[17:00:38.318]    + additional namespaces needed: [n=0] 
[17:00:38.318]  - Finding globals in 'X' for chunk #2 ... DONE
[17:00:38.318]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:00:38.318]  - seeds: [3] <seeds>
[17:00:38.318]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:38.318] getGlobalsAndPackages() ...
[17:00:38.318] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:38.318] Resolving globals: FALSE
[17:00:38.318] Tweak future expression to call with '...' arguments ...
[17:00:38.319] {
[17:00:38.319]     do.call(function(...) {
[17:00:38.319]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:38.319]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:38.319]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:38.319]             on.exit(options(oopts), add = TRUE)
[17:00:38.319]         }
[17:00:38.319]         {
[17:00:38.319]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:38.319]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:38.319]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:38.319]                   envir = globalenv(), inherits = FALSE)
[17:00:38.319]                 ...future.FUN(...future.X_jj, ...)
[17:00:38.319]             })
[17:00:38.319]         }
[17:00:38.319]     }, args = future.call.arguments)
[17:00:38.319] }
[17:00:38.319] Tweak future expression to call with '...' arguments ... DONE
[17:00:38.319] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:00:38.319] 
[17:00:38.319] getGlobalsAndPackages() ... DONE
[17:00:38.320] run() for ‘Future’ ...
[17:00:38.320] - state: ‘created’
[17:00:38.320] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:00:38.334] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:38.334] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:00:38.334]   - Field: ‘node’
[17:00:38.335]   - Field: ‘label’
[17:00:38.335]   - Field: ‘local’
[17:00:38.335]   - Field: ‘owner’
[17:00:38.335]   - Field: ‘envir’
[17:00:38.335]   - Field: ‘workers’
[17:00:38.335]   - Field: ‘packages’
[17:00:38.335]   - Field: ‘gc’
[17:00:38.335]   - Field: ‘conditions’
[17:00:38.335]   - Field: ‘persistent’
[17:00:38.335]   - Field: ‘expr’
[17:00:38.336]   - Field: ‘uuid’
[17:00:38.336]   - Field: ‘seed’
[17:00:38.336]   - Field: ‘version’
[17:00:38.336]   - Field: ‘result’
[17:00:38.336]   - Field: ‘asynchronous’
[17:00:38.336]   - Field: ‘calls’
[17:00:38.336]   - Field: ‘globals’
[17:00:38.336]   - Field: ‘stdout’
[17:00:38.336]   - Field: ‘earlySignal’
[17:00:38.336]   - Field: ‘lazy’
[17:00:38.336]   - Field: ‘state’
[17:00:38.337] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:00:38.337] - Launch lazy future ...
[17:00:38.337] Packages needed by the future expression (n = 0): <none>
[17:00:38.337] Packages needed by future strategies (n = 0): <none>
[17:00:38.338] {
[17:00:38.338]     {
[17:00:38.338]         {
[17:00:38.338]             ...future.startTime <- base::Sys.time()
[17:00:38.338]             {
[17:00:38.338]                 {
[17:00:38.338]                   {
[17:00:38.338]                     {
[17:00:38.338]                       base::local({
[17:00:38.338]                         has_future <- base::requireNamespace("future", 
[17:00:38.338]                           quietly = TRUE)
[17:00:38.338]                         if (has_future) {
[17:00:38.338]                           ns <- base::getNamespace("future")
[17:00:38.338]                           version <- ns[[".package"]][["version"]]
[17:00:38.338]                           if (is.null(version)) 
[17:00:38.338]                             version <- utils::packageVersion("future")
[17:00:38.338]                         }
[17:00:38.338]                         else {
[17:00:38.338]                           version <- NULL
[17:00:38.338]                         }
[17:00:38.338]                         if (!has_future || version < "1.8.0") {
[17:00:38.338]                           info <- base::c(r_version = base::gsub("R version ", 
[17:00:38.338]                             "", base::R.version$version.string), 
[17:00:38.338]                             platform = base::sprintf("%s (%s-bit)", 
[17:00:38.338]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:00:38.338]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:00:38.338]                               "release", "version")], collapse = " "), 
[17:00:38.338]                             hostname = base::Sys.info()[["nodename"]])
[17:00:38.338]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:00:38.338]                             info)
[17:00:38.338]                           info <- base::paste(info, collapse = "; ")
[17:00:38.338]                           if (!has_future) {
[17:00:38.338]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:00:38.338]                               info)
[17:00:38.338]                           }
[17:00:38.338]                           else {
[17:00:38.338]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:00:38.338]                               info, version)
[17:00:38.338]                           }
[17:00:38.338]                           base::stop(msg)
[17:00:38.338]                         }
[17:00:38.338]                       })
[17:00:38.338]                     }
[17:00:38.338]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:00:38.338]                     base::options(mc.cores = 1L)
[17:00:38.338]                   }
[17:00:38.338]                   ...future.strategy.old <- future::plan("list")
[17:00:38.338]                   options(future.plan = NULL)
[17:00:38.338]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:00:38.338]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:00:38.338]                 }
[17:00:38.338]                 ...future.workdir <- getwd()
[17:00:38.338]             }
[17:00:38.338]             ...future.oldOptions <- base::as.list(base::.Options)
[17:00:38.338]             ...future.oldEnvVars <- base::Sys.getenv()
[17:00:38.338]         }
[17:00:38.338]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:00:38.338]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:00:38.338]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:00:38.338]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:00:38.338]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:00:38.338]             future.stdout.windows.reencode = NULL, width = 80L)
[17:00:38.338]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:00:38.338]             base::names(...future.oldOptions))
[17:00:38.338]     }
[17:00:38.338]     if (FALSE) {
[17:00:38.338]     }
[17:00:38.338]     else {
[17:00:38.338]         if (TRUE) {
[17:00:38.338]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:00:38.338]                 open = "w")
[17:00:38.338]         }
[17:00:38.338]         else {
[17:00:38.338]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:00:38.338]                 windows = "NUL", "/dev/null"), open = "w")
[17:00:38.338]         }
[17:00:38.338]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:00:38.338]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:00:38.338]             base::sink(type = "output", split = FALSE)
[17:00:38.338]             base::close(...future.stdout)
[17:00:38.338]         }, add = TRUE)
[17:00:38.338]     }
[17:00:38.338]     ...future.frame <- base::sys.nframe()
[17:00:38.338]     ...future.conditions <- base::list()
[17:00:38.338]     ...future.rng <- base::globalenv()$.Random.seed
[17:00:38.338]     if (FALSE) {
[17:00:38.338]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:00:38.338]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:00:38.338]     }
[17:00:38.338]     ...future.result <- base::tryCatch({
[17:00:38.338]         base::withCallingHandlers({
[17:00:38.338]             ...future.value <- base::withVisible(base::local({
[17:00:38.338]                 ...future.makeSendCondition <- base::local({
[17:00:38.338]                   sendCondition <- NULL
[17:00:38.338]                   function(frame = 1L) {
[17:00:38.338]                     if (is.function(sendCondition)) 
[17:00:38.338]                       return(sendCondition)
[17:00:38.338]                     ns <- getNamespace("parallel")
[17:00:38.338]                     if (exists("sendData", mode = "function", 
[17:00:38.338]                       envir = ns)) {
[17:00:38.338]                       parallel_sendData <- get("sendData", mode = "function", 
[17:00:38.338]                         envir = ns)
[17:00:38.338]                       envir <- sys.frame(frame)
[17:00:38.338]                       master <- NULL
[17:00:38.338]                       while (!identical(envir, .GlobalEnv) && 
[17:00:38.338]                         !identical(envir, emptyenv())) {
[17:00:38.338]                         if (exists("master", mode = "list", envir = envir, 
[17:00:38.338]                           inherits = FALSE)) {
[17:00:38.338]                           master <- get("master", mode = "list", 
[17:00:38.338]                             envir = envir, inherits = FALSE)
[17:00:38.338]                           if (inherits(master, c("SOCKnode", 
[17:00:38.338]                             "SOCK0node"))) {
[17:00:38.338]                             sendCondition <<- function(cond) {
[17:00:38.338]                               data <- list(type = "VALUE", value = cond, 
[17:00:38.338]                                 success = TRUE)
[17:00:38.338]                               parallel_sendData(master, data)
[17:00:38.338]                             }
[17:00:38.338]                             return(sendCondition)
[17:00:38.338]                           }
[17:00:38.338]                         }
[17:00:38.338]                         frame <- frame + 1L
[17:00:38.338]                         envir <- sys.frame(frame)
[17:00:38.338]                       }
[17:00:38.338]                     }
[17:00:38.338]                     sendCondition <<- function(cond) NULL
[17:00:38.338]                   }
[17:00:38.338]                 })
[17:00:38.338]                 withCallingHandlers({
[17:00:38.338]                   {
[17:00:38.338]                     do.call(function(...) {
[17:00:38.338]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:38.338]                       if (!identical(...future.globals.maxSize.org, 
[17:00:38.338]                         ...future.globals.maxSize)) {
[17:00:38.338]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:38.338]                         on.exit(options(oopts), add = TRUE)
[17:00:38.338]                       }
[17:00:38.338]                       {
[17:00:38.338]                         lapply(seq_along(...future.elements_ii), 
[17:00:38.338]                           FUN = function(jj) {
[17:00:38.338]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:38.338]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:38.338]                               envir = globalenv(), inherits = FALSE)
[17:00:38.338]                             ...future.FUN(...future.X_jj, ...)
[17:00:38.338]                           })
[17:00:38.338]                       }
[17:00:38.338]                     }, args = future.call.arguments)
[17:00:38.338]                   }
[17:00:38.338]                 }, immediateCondition = function(cond) {
[17:00:38.338]                   sendCondition <- ...future.makeSendCondition()
[17:00:38.338]                   sendCondition(cond)
[17:00:38.338]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:38.338]                   {
[17:00:38.338]                     inherits <- base::inherits
[17:00:38.338]                     invokeRestart <- base::invokeRestart
[17:00:38.338]                     is.null <- base::is.null
[17:00:38.338]                     muffled <- FALSE
[17:00:38.338]                     if (inherits(cond, "message")) {
[17:00:38.338]                       muffled <- grepl(pattern, "muffleMessage")
[17:00:38.338]                       if (muffled) 
[17:00:38.338]                         invokeRestart("muffleMessage")
[17:00:38.338]                     }
[17:00:38.338]                     else if (inherits(cond, "warning")) {
[17:00:38.338]                       muffled <- grepl(pattern, "muffleWarning")
[17:00:38.338]                       if (muffled) 
[17:00:38.338]                         invokeRestart("muffleWarning")
[17:00:38.338]                     }
[17:00:38.338]                     else if (inherits(cond, "condition")) {
[17:00:38.338]                       if (!is.null(pattern)) {
[17:00:38.338]                         computeRestarts <- base::computeRestarts
[17:00:38.338]                         grepl <- base::grepl
[17:00:38.338]                         restarts <- computeRestarts(cond)
[17:00:38.338]                         for (restart in restarts) {
[17:00:38.338]                           name <- restart$name
[17:00:38.338]                           if (is.null(name)) 
[17:00:38.338]                             next
[17:00:38.338]                           if (!grepl(pattern, name)) 
[17:00:38.338]                             next
[17:00:38.338]                           invokeRestart(restart)
[17:00:38.338]                           muffled <- TRUE
[17:00:38.338]                           break
[17:00:38.338]                         }
[17:00:38.338]                       }
[17:00:38.338]                     }
[17:00:38.338]                     invisible(muffled)
[17:00:38.338]                   }
[17:00:38.338]                   muffleCondition(cond)
[17:00:38.338]                 })
[17:00:38.338]             }))
[17:00:38.338]             future::FutureResult(value = ...future.value$value, 
[17:00:38.338]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:38.338]                   ...future.rng), globalenv = if (FALSE) 
[17:00:38.338]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:00:38.338]                     ...future.globalenv.names))
[17:00:38.338]                 else NULL, started = ...future.startTime, version = "1.8")
[17:00:38.338]         }, condition = base::local({
[17:00:38.338]             c <- base::c
[17:00:38.338]             inherits <- base::inherits
[17:00:38.338]             invokeRestart <- base::invokeRestart
[17:00:38.338]             length <- base::length
[17:00:38.338]             list <- base::list
[17:00:38.338]             seq.int <- base::seq.int
[17:00:38.338]             signalCondition <- base::signalCondition
[17:00:38.338]             sys.calls <- base::sys.calls
[17:00:38.338]             `[[` <- base::`[[`
[17:00:38.338]             `+` <- base::`+`
[17:00:38.338]             `<<-` <- base::`<<-`
[17:00:38.338]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:00:38.338]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:00:38.338]                   3L)]
[17:00:38.338]             }
[17:00:38.338]             function(cond) {
[17:00:38.338]                 is_error <- inherits(cond, "error")
[17:00:38.338]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:00:38.338]                   NULL)
[17:00:38.338]                 if (is_error) {
[17:00:38.338]                   sessionInformation <- function() {
[17:00:38.338]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:00:38.338]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:00:38.338]                       search = base::search(), system = base::Sys.info())
[17:00:38.338]                   }
[17:00:38.338]                   ...future.conditions[[length(...future.conditions) + 
[17:00:38.338]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:00:38.338]                     cond$call), session = sessionInformation(), 
[17:00:38.338]                     timestamp = base::Sys.time(), signaled = 0L)
[17:00:38.338]                   signalCondition(cond)
[17:00:38.338]                 }
[17:00:38.338]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:00:38.338]                 "immediateCondition"))) {
[17:00:38.338]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:00:38.338]                   ...future.conditions[[length(...future.conditions) + 
[17:00:38.338]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:00:38.338]                   if (TRUE && !signal) {
[17:00:38.338]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:38.338]                     {
[17:00:38.338]                       inherits <- base::inherits
[17:00:38.338]                       invokeRestart <- base::invokeRestart
[17:00:38.338]                       is.null <- base::is.null
[17:00:38.338]                       muffled <- FALSE
[17:00:38.338]                       if (inherits(cond, "message")) {
[17:00:38.338]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:38.338]                         if (muffled) 
[17:00:38.338]                           invokeRestart("muffleMessage")
[17:00:38.338]                       }
[17:00:38.338]                       else if (inherits(cond, "warning")) {
[17:00:38.338]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:38.338]                         if (muffled) 
[17:00:38.338]                           invokeRestart("muffleWarning")
[17:00:38.338]                       }
[17:00:38.338]                       else if (inherits(cond, "condition")) {
[17:00:38.338]                         if (!is.null(pattern)) {
[17:00:38.338]                           computeRestarts <- base::computeRestarts
[17:00:38.338]                           grepl <- base::grepl
[17:00:38.338]                           restarts <- computeRestarts(cond)
[17:00:38.338]                           for (restart in restarts) {
[17:00:38.338]                             name <- restart$name
[17:00:38.338]                             if (is.null(name)) 
[17:00:38.338]                               next
[17:00:38.338]                             if (!grepl(pattern, name)) 
[17:00:38.338]                               next
[17:00:38.338]                             invokeRestart(restart)
[17:00:38.338]                             muffled <- TRUE
[17:00:38.338]                             break
[17:00:38.338]                           }
[17:00:38.338]                         }
[17:00:38.338]                       }
[17:00:38.338]                       invisible(muffled)
[17:00:38.338]                     }
[17:00:38.338]                     muffleCondition(cond, pattern = "^muffle")
[17:00:38.338]                   }
[17:00:38.338]                 }
[17:00:38.338]                 else {
[17:00:38.338]                   if (TRUE) {
[17:00:38.338]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:00:38.338]                     {
[17:00:38.338]                       inherits <- base::inherits
[17:00:38.338]                       invokeRestart <- base::invokeRestart
[17:00:38.338]                       is.null <- base::is.null
[17:00:38.338]                       muffled <- FALSE
[17:00:38.338]                       if (inherits(cond, "message")) {
[17:00:38.338]                         muffled <- grepl(pattern, "muffleMessage")
[17:00:38.338]                         if (muffled) 
[17:00:38.338]                           invokeRestart("muffleMessage")
[17:00:38.338]                       }
[17:00:38.338]                       else if (inherits(cond, "warning")) {
[17:00:38.338]                         muffled <- grepl(pattern, "muffleWarning")
[17:00:38.338]                         if (muffled) 
[17:00:38.338]                           invokeRestart("muffleWarning")
[17:00:38.338]                       }
[17:00:38.338]                       else if (inherits(cond, "condition")) {
[17:00:38.338]                         if (!is.null(pattern)) {
[17:00:38.338]                           computeRestarts <- base::computeRestarts
[17:00:38.338]                           grepl <- base::grepl
[17:00:38.338]                           restarts <- computeRestarts(cond)
[17:00:38.338]                           for (restart in restarts) {
[17:00:38.338]                             name <- restart$name
[17:00:38.338]                             if (is.null(name)) 
[17:00:38.338]                               next
[17:00:38.338]                             if (!grepl(pattern, name)) 
[17:00:38.338]                               next
[17:00:38.338]                             invokeRestart(restart)
[17:00:38.338]                             muffled <- TRUE
[17:00:38.338]                             break
[17:00:38.338]                           }
[17:00:38.338]                         }
[17:00:38.338]                       }
[17:00:38.338]                       invisible(muffled)
[17:00:38.338]                     }
[17:00:38.338]                     muffleCondition(cond, pattern = "^muffle")
[17:00:38.338]                   }
[17:00:38.338]                 }
[17:00:38.338]             }
[17:00:38.338]         }))
[17:00:38.338]     }, error = function(ex) {
[17:00:38.338]         base::structure(base::list(value = NULL, visible = NULL, 
[17:00:38.338]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:00:38.338]                 ...future.rng), started = ...future.startTime, 
[17:00:38.338]             finished = Sys.time(), session_uuid = NA_character_, 
[17:00:38.338]             version = "1.8"), class = "FutureResult")
[17:00:38.338]     }, finally = {
[17:00:38.338]         if (!identical(...future.workdir, getwd())) 
[17:00:38.338]             setwd(...future.workdir)
[17:00:38.338]         {
[17:00:38.338]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:00:38.338]                 ...future.oldOptions$nwarnings <- NULL
[17:00:38.338]             }
[17:00:38.338]             base::options(...future.oldOptions)
[17:00:38.338]             if (.Platform$OS.type == "windows") {
[17:00:38.338]                 old_names <- names(...future.oldEnvVars)
[17:00:38.338]                 envs <- base::Sys.getenv()
[17:00:38.338]                 names <- names(envs)
[17:00:38.338]                 common <- intersect(names, old_names)
[17:00:38.338]                 added <- setdiff(names, old_names)
[17:00:38.338]                 removed <- setdiff(old_names, names)
[17:00:38.338]                 changed <- common[...future.oldEnvVars[common] != 
[17:00:38.338]                   envs[common]]
[17:00:38.338]                 NAMES <- toupper(changed)
[17:00:38.338]                 args <- list()
[17:00:38.338]                 for (kk in seq_along(NAMES)) {
[17:00:38.338]                   name <- changed[[kk]]
[17:00:38.338]                   NAME <- NAMES[[kk]]
[17:00:38.338]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:38.338]                     next
[17:00:38.338]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:38.338]                 }
[17:00:38.338]                 NAMES <- toupper(added)
[17:00:38.338]                 for (kk in seq_along(NAMES)) {
[17:00:38.338]                   name <- added[[kk]]
[17:00:38.338]                   NAME <- NAMES[[kk]]
[17:00:38.338]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:38.338]                     next
[17:00:38.338]                   args[[name]] <- ""
[17:00:38.338]                 }
[17:00:38.338]                 NAMES <- toupper(removed)
[17:00:38.338]                 for (kk in seq_along(NAMES)) {
[17:00:38.338]                   name <- removed[[kk]]
[17:00:38.338]                   NAME <- NAMES[[kk]]
[17:00:38.338]                   if (name != NAME && is.element(NAME, old_names)) 
[17:00:38.338]                     next
[17:00:38.338]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:00:38.338]                 }
[17:00:38.338]                 if (length(args) > 0) 
[17:00:38.338]                   base::do.call(base::Sys.setenv, args = args)
[17:00:38.338]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:00:38.338]             }
[17:00:38.338]             else {
[17:00:38.338]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:00:38.338]             }
[17:00:38.338]             {
[17:00:38.338]                 if (base::length(...future.futureOptionsAdded) > 
[17:00:38.338]                   0L) {
[17:00:38.338]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:00:38.338]                   base::names(opts) <- ...future.futureOptionsAdded
[17:00:38.338]                   base::options(opts)
[17:00:38.338]                 }
[17:00:38.338]                 {
[17:00:38.338]                   {
[17:00:38.338]                     base::options(mc.cores = ...future.mc.cores.old)
[17:00:38.338]                     NULL
[17:00:38.338]                   }
[17:00:38.338]                   options(future.plan = NULL)
[17:00:38.338]                   if (is.na(NA_character_)) 
[17:00:38.338]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:00:38.338]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:00:38.338]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:00:38.338]                     .init = FALSE)
[17:00:38.338]                 }
[17:00:38.338]             }
[17:00:38.338]         }
[17:00:38.338]     })
[17:00:38.338]     if (TRUE) {
[17:00:38.338]         base::sink(type = "output", split = FALSE)
[17:00:38.338]         if (TRUE) {
[17:00:38.338]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:00:38.338]         }
[17:00:38.338]         else {
[17:00:38.338]             ...future.result["stdout"] <- base::list(NULL)
[17:00:38.338]         }
[17:00:38.338]         base::close(...future.stdout)
[17:00:38.338]         ...future.stdout <- NULL
[17:00:38.338]     }
[17:00:38.338]     ...future.result$conditions <- ...future.conditions
[17:00:38.338]     ...future.result$finished <- base::Sys.time()
[17:00:38.338]     ...future.result
[17:00:38.338] }
[17:00:38.340] Exporting 7 global objects (2.15 KiB) to cluster node #2 ...
[17:00:38.341] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ...
[17:00:38.341] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ... DONE
[17:00:38.341] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ...
[17:00:38.341] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ... DONE
[17:00:38.342] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[17:00:38.342] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[17:00:38.342] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:00:38.342] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:00:38.343] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:00:38.343] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:00:38.343] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:00:38.344] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:00:38.344] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:00:38.344] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:00:38.344] Exporting 7 global objects (2.15 KiB) to cluster node #2 ... DONE
[17:00:38.345] MultisessionFuture started
[17:00:38.345] - Launch lazy future ... done
[17:00:38.345] run() for ‘MultisessionFuture’ ... done
[17:00:38.345] Created future:
[17:00:38.347] receiveMessageFromWorker() for ClusterFuture ...
[17:00:38.347] - Validating connection of MultisessionFuture
[17:00:38.347] - received message: FutureResult
[17:00:38.347] - Received FutureResult
[17:00:38.347] - Erased future from FutureRegistry
[17:00:38.347] result() for ClusterFuture ...
[17:00:38.348] - result already collected: FutureResult
[17:00:38.348] result() for ClusterFuture ... done
[17:00:38.348] receiveMessageFromWorker() for ClusterFuture ... done
[17:00:38.345] MultisessionFuture:
[17:00:38.345] Label: ‘future_replicate-2’
[17:00:38.345] Expression:
[17:00:38.345] {
[17:00:38.345]     do.call(function(...) {
[17:00:38.345]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:00:38.345]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:00:38.345]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:00:38.345]             on.exit(options(oopts), add = TRUE)
[17:00:38.345]         }
[17:00:38.345]         {
[17:00:38.345]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:00:38.345]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:00:38.345]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:00:38.345]                   envir = globalenv(), inherits = FALSE)
[17:00:38.345]                 ...future.FUN(...future.X_jj, ...)
[17:00:38.345]             })
[17:00:38.345]         }
[17:00:38.345]     }, args = future.call.arguments)
[17:00:38.345] }
[17:00:38.345] Lazy evaluation: FALSE
[17:00:38.345] Asynchronous evaluation: TRUE
[17:00:38.345] Local evaluation: TRUE
[17:00:38.345] Environment: 0x55856399dfc0
[17:00:38.345] Capture standard output: TRUE
[17:00:38.345] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:00:38.345] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[17:00:38.345] Packages: <none>
[17:00:38.345] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:00:38.345] Resolved: TRUE
[17:00:38.345] Value: <not collected>
[17:00:38.345] Conditions captured: <none>
[17:00:38.345] Early signaling: FALSE
[17:00:38.345] Owner process: 084ad6f5-5190-592e-e2d5-e77dded81deb
[17:00:38.345] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:00:38.348] Chunk #2 of 2 ... DONE
[17:00:38.349] Launching 2 futures (chunks) ... DONE
[17:00:38.349] Resolving 2 futures (chunks) ...
[17:00:38.349] resolve() on list ...
[17:00:38.349]  recursive: 0
[17:00:38.349]  length: 2
[17:00:38.349] 
[17:00:38.350] receiveMessageFromWorker() for ClusterFuture ...
[17:00:38.350] - Validating connection of MultisessionFuture
[17:00:38.350] - received message: FutureResult
[17:00:38.350] - Received FutureResult
[17:00:38.350] - Erased future from FutureRegistry
[17:00:38.350] result() for ClusterFuture ...
[17:00:38.351] - result already collected: FutureResult
[17:00:38.351] result() for ClusterFuture ... done
[17:00:38.351] receiveMessageFromWorker() for ClusterFuture ... done
[17:00:38.351] Future #1
[17:00:38.351] result() for ClusterFuture ...
[17:00:38.351] - result already collected: FutureResult
[17:00:38.351] result() for ClusterFuture ... done
[17:00:38.351] result() for ClusterFuture ...
[17:00:38.351] - result already collected: FutureResult
[17:00:38.351] result() for ClusterFuture ... done
[17:00:38.352] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:00:38.352] - nx: 2
[17:00:38.352] - relay: TRUE
[17:00:38.352] - stdout: TRUE
[17:00:38.352] - signal: TRUE
[17:00:38.352] - resignal: FALSE
[17:00:38.352] - force: TRUE
[17:00:38.352] - relayed: [n=2] FALSE, FALSE
[17:00:38.352] - queued futures: [n=2] FALSE, FALSE
[17:00:38.352]  - until=1
[17:00:38.352]  - relaying element #1
[17:00:38.352] result() for ClusterFuture ...
[17:00:38.353] - result already collected: FutureResult
[17:00:38.353] result() for ClusterFuture ... done
[17:00:38.353] result() for ClusterFuture ...
[17:00:38.353] - result already collected: FutureResult
[17:00:38.353] result() for ClusterFuture ... done
[17:00:38.353] result() for ClusterFuture ...
[17:00:38.353] - result already collected: FutureResult
[17:00:38.353] result() for ClusterFuture ... done
[17:00:38.353] result() for ClusterFuture ...
[17:00:38.353] - result already collected: FutureResult
[17:00:38.353] result() for ClusterFuture ... done
[17:00:38.354] - relayed: [n=2] TRUE, FALSE
[17:00:38.354] - queued futures: [n=2] TRUE, FALSE
[17:00:38.354] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:00:38.354]  length: 1 (resolved future 1)
[17:00:38.354] Future #2
[17:00:38.354] result() for ClusterFuture ...
[17:00:38.354] - result already collected: FutureResult
[17:00:38.354] result() for ClusterFuture ... done
[17:00:38.354] result() for ClusterFuture ...
[17:00:38.354] - result already collected: FutureResult
[17:00:38.354] result() for ClusterFuture ... done
[17:00:38.355] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:00:38.355] - nx: 2
[17:00:38.355] - relay: TRUE
[17:00:38.355] - stdout: TRUE
[17:00:38.355] - signal: TRUE
[17:00:38.355] - resignal: FALSE
[17:00:38.355] - force: TRUE
[17:00:38.355] - relayed: [n=2] TRUE, FALSE
[17:00:38.355] - queued futures: [n=2] TRUE, FALSE
[17:00:38.355]  - until=2
[17:00:38.355]  - relaying element #2
[17:00:38.355] result() for ClusterFuture ...
[17:00:38.356] - result already collected: FutureResult
[17:00:38.356] result() for ClusterFuture ... done
[17:00:38.356] result() for ClusterFuture ...
[17:00:38.356] - result already collected: FutureResult
[17:00:38.356] result() for ClusterFuture ... done
[17:00:38.356] result() for ClusterFuture ...
[17:00:38.356] - result already collected: FutureResult
[17:00:38.356] result() for ClusterFuture ... done
[17:00:38.356] result() for ClusterFuture ...
[17:00:38.356] - result already collected: FutureResult
[17:00:38.356] result() for ClusterFuture ... done
[17:00:38.357] - relayed: [n=2] TRUE, TRUE
[17:00:38.357] - queued futures: [n=2] TRUE, TRUE
[17:00:38.357] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:00:38.357]  length: 0 (resolved future 2)
[17:00:38.357] Relaying remaining futures
[17:00:38.357] signalConditionsASAP(NULL, pos=0) ...
[17:00:38.357] - nx: 2
[17:00:38.357] - relay: TRUE
[17:00:38.357] - stdout: TRUE
[17:00:38.357] - signal: TRUE
[17:00:38.357] - resignal: FALSE
[17:00:38.357] - force: TRUE
[17:00:38.358] - relayed: [n=2] TRUE, TRUE
[17:00:38.358] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:00:38.358] - relayed: [n=2] TRUE, TRUE
[17:00:38.358] - queued futures: [n=2] TRUE, TRUE
[17:00:38.358] signalConditionsASAP(NULL, pos=0) ... done
[17:00:38.358] resolve() on list ... DONE
[17:00:38.358] result() for ClusterFuture ...
[17:00:38.358] - result already collected: FutureResult
[17:00:38.358] result() for ClusterFuture ... done
[17:00:38.358] result() for ClusterFuture ...
[17:00:38.358] - result already collected: FutureResult
[17:00:38.359] result() for ClusterFuture ... done
[17:00:38.359] result() for ClusterFuture ...
[17:00:38.359] - result already collected: FutureResult
[17:00:38.359] result() for ClusterFuture ... done
[17:00:38.359] result() for ClusterFuture ...
[17:00:38.359] - result already collected: FutureResult
[17:00:38.359] result() for ClusterFuture ... done
[17:00:38.359]  - Number of value chunks collected: 2
[17:00:38.359] Resolving 2 futures (chunks) ... DONE
[17:00:38.359] Reducing values from 2 chunks ...
[17:00:38.359]  - Number of values collected after concatenation: 5
[17:00:38.360]  - Number of values expected: 5
[17:00:38.360] Reducing values from 2 chunks ... DONE
[17:00:38.360] future_lapply() ... DONE
[17:00:38.360] plan(): Setting new future strategy stack:
[17:00:38.360] List of future strategies:
[17:00:38.360] 1. sequential:
[17:00:38.360]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:38.360]    - tweaked: FALSE
[17:00:38.360]    - call: plan(sequential)
[17:00:38.361] plan(): nbrOfWorkers() = 1
*** strategy = ‘multisession’ ... done
> 
> message("*** future_replicate() ... DONE")
*** future_replicate() ... DONE
> 
> source("incl/end.R")
[17:00:38.362] plan(): Setting new future strategy stack:
[17:00:38.362] List of future strategies:
[17:00:38.362] 1. FutureStrategy:
[17:00:38.362]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:00:38.362]    - tweaked: FALSE
[17:00:38.362]    - call: future::plan(oplan)
[17:00:38.363] plan(): nbrOfWorkers() = 1
> 
