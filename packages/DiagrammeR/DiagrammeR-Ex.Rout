
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "DiagrammeR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('DiagrammeR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("DiagrammeR")
> ### * DiagrammeR
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DiagrammeR
> ### Title: R + mermaid.js
> ### Aliases: DiagrammeR
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # note the whitespace is not important
> ##D DiagrammeR("
> ##D   graph LR
> ##D     A-->B
> ##D     A-->C
> ##D     C-->E
> ##D     B-->D
> ##D     C-->D
> ##D     D-->F
> ##D     E-->F
> ##D ")
> ##D 
> ##D DiagrammeR("
> ##D    graph TB
> ##D    A-->B
> ##D    A-->C
> ##D    C-->E
> ##D    B-->D
> ##D    C-->D
> ##D    D-->F
> ##D    E-->F
> ##D ")
> ##D 
> ##D DiagrammeR("graph LR;A(Rounded)-->B[Squared];B-->C{A Decision};
> ##D  C-->D[Square One];C-->E[Square Two];
> ##D  style A fill:#E5E25F;  style B fill:#87AB51; style C fill:#3C8937;
> ##D  style D fill:#23772C;  style E fill:#B6E6E6;"
> ##D )
> ##D 
> ##D # Load in the 'mtcars' dataset
> ##D mtcars
> ##D connections <- sapply(
> ##D  1:ncol(mtcars)
> ##D   ,function(i) {
> ##D      paste0(
> ##D         i
> ##D       ,"(",colnames(mtcars)[i],")---"
> ##D       ,i,"-stats("
> ##D       ,paste0(
> ##D         names(summary(mtcars[,i]))
> ##D         ,": "
> ##D         ,unname(summary(mtcars[,i]))
> ##D         ,collapse="<br/>"
> ##D       )
> ##D       ,")"
> ##D    )
> ##D  }
> ##D )
> ##D 
> ##D DiagrammeR(
> ##D    paste0(
> ##D      "graph TD;", "\n",
> ##D      paste(connections, collapse = "\n"),"\n",
> ##D      "classDef column fill:#0001CC, stroke:#0D3FF3, stroke-width:1px;" ,"\n",
> ##D      "class ", paste0(1:length(connections), collapse = ","), " column;"
> ##D    )
> ##D  )
> ##D 
> ##D # also with DiagrammeR() you can use tags from htmltools
> ##D # just make sure to use class = "mermaid"
> ##D library(htmltools)
> ##D diagramSpec = "
> ##D graph LR;
> ##D   id1(Start)-->id2(Stop);
> ##D   style id1 fill:#f9f,stroke:#333,stroke-width:4px;
> ##D   style id2 fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5;
> ##D "
> ##D html_print(tagList(
> ##D   tags$h1("R + mermaid.js = Something Special")
> ##D   ,tags$pre(diagramSpec)
> ##D   ,tags$div(class="mermaid",diagramSpec)
> ##D   ,DiagrammeR()
> ##D ))
> ##D 
> ##D # sequence diagrams
> ##D # Using this "How to Draw a Sequence Diagram"
> ##D #   http://www.cs.uku.fi/research/publications/reports/A-2003-1/page91.pdf
> ##D # draw some sequence diagrams with DiagrammeR
> ##D 
> ##D DiagrammeR("
> ##D sequenceDiagram;
> ##D    customer->>ticket seller: ask for ticket;
> ##D    ticket seller->>database: seats;
> ##D    alt tickets available
> ##D      database->>ticket seller: ok;
> ##D      ticket seller->>customer: confirm;
> ##D      customer->>ticket seller: ok;
> ##D      ticket seller->>database: book a seat;
> ##D      ticket seller->>printer: print ticket;
> ##D    else sold out
> ##D      database->>ticket seller: none left;
> ##D      ticket seller->>customer:  sorry;
> ##D    end
> ##D ")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("add_balanced_tree")
> ### * add_balanced_tree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_balanced_tree
> ### Title: Add a balanced tree to the graph
> ### Aliases: add_balanced_tree
> 
> ### ** Examples
> 
> # Create a new graph and
> # add 2 different types of
> # balanced trees of height
> # 2 (branching twice) and
> # different branching ratios
> graph <-
+   create_graph() %>%
+   add_balanced_tree(
+     k = 2,
+     h = 2,
+     type = "binary") %>%
+   add_balanced_tree(
+     k = 3,
+     h = 2,
+     type = "tertiary")
> 
> # Get some node information
> # from this graph
> graph %>%
+   get_node_info() %>%
+   head(5)
  id   type label deg indeg outdeg loops
1  1 binary     1   2     0      2     0
2  2 binary     2   3     1      2     0
3  3 binary     3   3     1      2     0
4  4 binary     4   1     1      0     0
5  5 binary     5   1     1      0     0
> 
> # Node and edge aesthetic and data
> # attributes can be specified in
> # the `node_aes`, `edge_aes`,
> # `node_data`, and `edge_data`
> # arguments
> graph_w_attrs <-
+   create_graph() %>%
+   add_balanced_tree(
+     k = 2,
+     h = 2,
+     label = c(
+       "one", "two",
+       "three", "four",
+       "five", "six", "seven"),
+     type = c(
+       "a", "b", "b", "c",
+       "c", "c", "c"),
+     rel = "A",
+     node_aes = node_aes(
+       fillcolor = "steelblue"),
+     node_data = node_data(
+       value = c(
+         1.6, 2.8, 3.4, 8.3,
+         3.8, 5.2, 3.2)),
+     edge_aes = edge_aes(
+       color = "red",
+       penwidth = 1.2))
> 
> # Get the first three rows of
> # the graph's node data frame
> graph_w_attrs %>%
+   get_node_df() %>%
+   head(3)
  id type label fillcolor value
1  1    a   one steelblue   1.6
2  2    b   two steelblue   2.8
3  3    b three steelblue   3.4
> 
> # Get the first three rows of
> # the graph's edge data frame
> graph_w_attrs %>%
+   get_edge_df() %>%
+   head(3)
  id from to rel penwidth color
1  1    1  2   A      1.2   red
2  2    1  3   A      1.2   red
3  3    2  4   A      1.2   red
> 
> 
> 
> 
> cleanEx()
> nameEx("add_cycle")
> ### * add_cycle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_cycle
> ### Title: Add a cycle of nodes to the graph
> ### Aliases: add_cycle
> 
> ### ** Examples
> 
> # Create a new graph and
> # add a cycle of nodes to it
> graph <-
+   create_graph() %>%
+   add_cycle(n = 6)
> 
> # Get node information
> # from this graph
> graph %>%
+   get_node_info()
  id type label deg indeg outdeg loops
1  1 <NA>     1   2     1      1     0
2  2 <NA>     2   2     1      1     0
3  3 <NA>     3   2     1      1     0
4  4 <NA>     4   2     1      1     0
5  5 <NA>     5   2     1      1     0
6  6 <NA>     6   2     1      1     0
> 
> # Node and edge aesthetic and data
> # attributes can be specified in
> # the `node_aes`, `edge_aes`,
> # `node_data`, and `edge_data`
> # arguments
> 
> suppressWarnings(RNGversion("3.5.0"))
> set.seed(23)
> 
> graph_w_attrs <-
+   create_graph() %>%
+   add_cycle(
+     n = 3,
+     label = c(
+       "one", "two", "three"),
+     type = c(
+       "a", "a", "b"),
+     rel = "A",
+     node_aes = node_aes(
+       fillcolor = "steelblue"),
+     edge_aes = edge_aes(
+       color = "red",
+       penwidth = 1.2),
+     node_data = node_data(
+       value = c(
+         1.6, 2.8, 3.4)),
+     edge_data = edge_data(
+       value =
+         rnorm(
+           n = 3,
+           mean = 5.0,
+           sd = 1.0)))
> 
> # Get the graph's node data frame
> graph_w_attrs %>% get_node_df()
  id type label fillcolor value
1  1    a   one steelblue   1.6
2  2    a   two steelblue   2.8
3  3    b three steelblue   3.4
> 
> # Get the graph's edge data frame
> graph_w_attrs %>% get_edge_df()
  id from to rel penwidth color    value
1  1    1  2   A      1.2   red 5.996605
2  2    2  3   A      1.2   red 6.107490
3  3    3  1   A      1.2   red 4.721914
> 
> 
> 
> 
> cleanEx()
> nameEx("add_edge")
> ### * add_edge
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_edge
> ### Title: Add an edge between nodes in a graph object
> ### Aliases: add_edge
> 
> ### ** Examples
> 
> # Create a graph with 4 nodes
> graph <-
+   create_graph() %>%
+   add_node(label = "one") %>%
+   add_node(label = "two") %>%
+   add_node(label = "three") %>%
+   add_node(label = "four")
> 
> # Add an edge between those
> # nodes and attach a
> # relationship to the edge
> graph <-
+  add_edge(
+    graph,
+    from = 1,
+    to = 2,
+    rel = "A")
> 
> # Use the `get_edge_info()`
> # function to verify that
> # the edge has been created
> graph %>%
+   get_edge_info()
  id from to rel
1  1    1  2   A
> 
> # Add another node and
> # edge to the graph
> graph <-
+   graph %>%
+   add_edge(
+     from = 3,
+     to = 2,
+     rel = "A")
> 
> # Verify that the edge
> # has been created by
> # counting graph edges
> graph %>% count_edges()
[1] 2
> 
> # Add edges by specifying
> # node `label` values; note
> # that all nodes must have
> # unique `label` values to
> # use this option
> graph <-
+   graph %>%
+   add_edge(
+     from = "three",
+     to = "four",
+     rel = "L") %>%
+   add_edge(
+     from = "four",
+     to = "one",
+     rel = "L")
> 
> # Use `get_edges()` to verify
> # that the edges were added
> graph %>% get_edges()
[1] "1->2" "3->2" "3->4" "4->1"
> 
> # Add edge aesthetic and data
> # attributes during edge creation
> graph_2 <-
+   create_graph() %>%
+   add_n_nodes(n = 2) %>%
+   add_edge(
+     from = 1,
+     to = 2,
+     rel = "M",
+     edge_aes = edge_aes(
+       penwidth = 1.5,
+       color = "blue"),
+     edge_data = edge_data(
+       value = 4.3))
> 
> # Use the `get_edges()` function
> # to verify that the attribute
> # values were bound to the
> # newly created edge
> graph_2 %>% get_edge_df()
  id from to rel penwidth color value
1  1    1  2   M      1.5  blue   4.3
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("add_edge_clone")
> ### * add_edge_clone
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_edge_clone
> ### Title: Add a clone of an existing edge to the graph
> ### Aliases: add_edge_clone
> 
> ### ** Examples
> 
> # Create a graph with a path of
> # 2 nodes; supply a common `rel`
> # edge attribute for all edges
> # in this path and then add a
> # `color` edge attribute
> graph <-
+   create_graph() %>%
+   add_path(
+     n = 2,
+     rel = "a") %>%
+   select_last_edges_created() %>%
+   set_edge_attrs(
+     edge_attr = color,
+     values = "steelblue") %>%
+   clear_selection()
> 
> # Display the graph's internal
> # edge data frame
> graph %>% get_edge_df()
  id from to rel     color
1  1    1  2   a steelblue
> 
> # Create a new node (will have
> # node ID of `3`) and then
> # create an edge between it and
> # node `1` while reusing the edge
> # attributes of edge `1` -> `2`
> # (edge ID `1`)
> graph_2 <-
+   graph %>%
+   add_node() %>%
+   add_edge_clone(
+     edge = 1,
+     from = 3,
+       to = 1)
> 
> # Display the graph's internal
> # edge data frame
> graph_2 %>% get_edge_df()
  id from to rel     color
1  1    1  2   a steelblue
2  2    3  1   a steelblue
> 
> # The same change can be performed
> # with some helper functions in the
> # `add_edge_clone()` function call
> graph_3 <-
+   graph %>%
+     add_node() %>%
+     add_edge_clone(
+       edge = get_last_edges_created(.),
+       from = get_last_nodes_created(.),
+       to = 1)
> 
> # Display the graph's internal
> # edge data frame
> graph_3 %>% get_edge_df()
  id from to rel     color
1  1    1  2   a steelblue
2  2    3  1   a steelblue
> 
> 
> 
> 
> cleanEx()
> nameEx("add_edge_df")
> ### * add_edge_df
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_edge_df
> ### Title: Add edges from an edge data frame to an existing graph object
> ### Aliases: add_edge_df
> 
> ### ** Examples
> 
> # Create a graph with 4 nodes
> # and no edges
> graph <-
+   create_graph() %>%
+   add_n_nodes(n = 4)
> 
> # Create an edge data frame (edf)
> edf <-
+   create_edge_df(
+     from = c(1, 2, 3),
+       to = c(4, 3, 1))
> 
> # Add the edge data frame to
> # the graph object to create
> # a graph with both nodes
> # and edges
> graph <-
+   graph %>%
+   add_edge_df(
+     edge_df = edf)
> 
> # Get the graph's edges to
> # verify that the edf had
> # been added
> graph %>%
+   get_edges(
+     return_type = "vector")
[1] "1->4" "2->3" "3->1"
> 
> 
> 
> 
> cleanEx()
> nameEx("add_edges_from_table")
> ### * add_edges_from_table
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_edges_from_table
> ### Title: Add edges and attributes to graph from a table
> ### Aliases: add_edges_from_table
> 
> ### ** Examples
> 
> # Create an empty graph and then
> # add nodes to it from the
> # `currencies` dataset available
> # in the package
> graph <-
+   create_graph() %>%
+   add_nodes_from_table(
+     table = currencies)
> 
> # Now we want to add edges to the
> # graph using an included dataset,
> # `usd_exchange_rates`, which has
> # exchange rates between USD and
> # many other currencies; the key
> # here is that the data in the
> # `from` and `to` columns in the
> # external table maps to graph
> # node data available in the
> # `iso_4217_code` column of the
> # graph's internal node data frame
> graph_1 <-
+   graph %>%
+     add_edges_from_table(
+       table = usd_exchange_rates,
+       from_col = from_currency,
+       to_col = to_currency,
+       from_to_map = iso_4217_code)
> 
> # View part of the graph's
> # internal edge data frame
> graph_1 %>%
+   get_edge_df() %>%
+   head()
  id from to  rel cost_unit
1  1  148  1 <NA>  0.272300
2  2  148  2 <NA>  0.015210
3  3  148  3 <NA>  0.008055
4  4  148  4 <NA>  0.002107
5  5  148  5 <NA>  0.565000
6  6  148  6 <NA>  0.006058
> 
> # If you would like to assign
> # any of the table's columns as the
> # `rel` attribute, this can done
> # with the `rel_col` argument; to
> # set a static `rel` attribute for
> # all edges created, use `set_rel`
> graph_2 <-
+   graph %>%
+     add_edges_from_table(
+       table = usd_exchange_rates,
+       from_col = from_currency,
+       to_col = to_currency,
+       from_to_map = iso_4217_code,
+       set_rel = "from_usd")
> 
> # View part of the graph's internal
> # edge data frame (edf)
> graph_2 %>%
+   get_edge_df() %>%
+   head()
  id from to      rel cost_unit
1  1  148  1 from_usd  0.272300
2  2  148  2 from_usd  0.015210
3  3  148  3 from_usd  0.008055
4  4  148  4 from_usd  0.002107
5  5  148  5 from_usd  0.565000
6  6  148  6 from_usd  0.006058
> 
> 
> 
> 
> cleanEx()
> nameEx("add_edges_w_string")
> ### * add_edges_w_string
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_edges_w_string
> ### Title: Add one or more edges using a text string
> ### Aliases: add_edges_w_string
> 
> ### ** Examples
> 
> # Create a graph with 4 nodes
> graph <-
+   create_graph() %>%
+   add_node(label = "one") %>%
+   add_node(label = "two") %>%
+   add_node(label = "three") %>%
+   add_node(label = "four")
> 
> # Add edges between nodes using
> # a character string with node
> # ID values
> graph_node_id <-
+   graph %>%
+   add_edges_w_string(
+     edges = "1->2 1->3 2->4 2->3")
> 
> # Show the graph's internal
> # edge data frame
> graph_node_id %>% get_edge_df()
  id from to  rel
1  1    1  2 <NA>
2  2    1  3 <NA>
3  3    2  4 <NA>
4  4    2  3 <NA>
> 
> # Add edges between nodes using
> # a character string with node
> # label values and setting
> # `use_labels = TRUE`; note that
> # all nodes must have unique
> # `label` values to use this
> graph_node_label <-
+   graph %>%
+   add_edges_w_string(
+     edges =
+       "one->two one->three
+        two->four two->three",
+     use_labels = TRUE)
> 
> # Show the graph's internal
> # edge data frame (it's the
> # same as before)
> graph_node_label %>% get_edge_df()
  id from to  rel
1  1    1  2 <NA>
2  2    1  3 <NA>
3  3    2  4 <NA>
4  4    2  3 <NA>
> 
> 
> 
> 
> cleanEx()
> nameEx("add_forward_edges_ws")
> ### * add_forward_edges_ws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_forward_edges_ws
> ### Title: Add new edges with identical definitions as with a selection of
> ###   edges
> ### Aliases: add_forward_edges_ws
> 
> ### ** Examples
> 
> # Create an empty graph, add 2 nodes
> # to it, and create the edge `1->2`
> graph <-
+   create_graph() %>%
+   add_n_nodes(
+     n = 2,
+     type = "type_a",
+     label = c("a_1", "a_2")) %>%
+   add_edge(
+     from = 1, to = 2, rel = "a")
> 
> # Get the graph's edges
> graph %>% get_edge_ids()
[1] 1
> 
> # Select the edge and create 2
> # additional edges with the same
> # definition (`1->2`) but with
> # different `rel` values (`b` and `c`)
> graph <-
+   graph %>%
+   select_edges() %>%
+   add_forward_edges_ws(rel = "b") %>%
+   add_forward_edges_ws(rel = "c") %>%
+   clear_selection()
> 
> # Get the graph's edge data frame
> graph %>% get_edge_df()
  id from to rel
1  1    1  2   a
2  2    1  2   b
3  3    1  2   c
> 
> 
> 
> 
> cleanEx()
> nameEx("add_full_graph")
> ### * add_full_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_full_graph
> ### Title: Add a fully connected graph
> ### Aliases: add_full_graph
> 
> ### ** Examples
> 
> # Create a new graph object
> # and add a directed and fully
> # connected graph with 3 nodes
> # and edges to and from all
> # pairs of nodes; with the option
> # `keep_loops = TRUE` nodes
> # will also have edges from
> # and to themselves
> graph <-
+   create_graph() %>%
+   add_full_graph(
+     n = 3, keep_loops = TRUE
+   )
> 
> # Get node information
> # from this graph
> graph %>% get_node_info()
  id type label deg indeg outdeg loops
1  1 <NA>     1   6     3      3     1
2  2 <NA>     2   6     3      3     1
3  3 <NA>     3   6     3      3     1
> 
> # Using `keep_loops = FALSE`
> # (the default) will remove
> # the loops
> create_graph() %>%
+   add_full_graph(n = 3) %>%
+   get_node_info()
  id type label deg indeg outdeg loops
1  1 <NA>     1   4     2      2     0
2  2 <NA>     2   4     2      2     0
3  3 <NA>     3   4     2      2     0
> 
> # Values can be set for
> # the node `label`, node
> # `type`, and edge `rel`
> graph <-
+   create_graph() %>%
+   add_full_graph(
+     n = 3,
+     type = "connected",
+     label = c("1st", "2nd", "3rd"),
+     rel = "connected_to"
+   )
> 
> # Show the graph's node
> # data frame (ndf)
> graph %>% get_node_df()
  id      type label
1  1 connected   1st
2  2 connected   2nd
3  3 connected   3rd
> 
> # Show the graph's edge
> # data frame (edf)
> graph %>% get_edge_df()
  id from to          rel
1  1    1  2 connected_to
2  2    1  3 connected_to
3  3    2  1 connected_to
4  4    2  3 connected_to
5  5    3  1 connected_to
6  6    3  2 connected_to
> 
> # Create a fully-connected and
> # directed graph with 3 nodes,
> # and, where a matrix provides
> # edge weights; first, create the
> # matrix (with row names to be
> # used as node labels)
> suppressWarnings(RNGversion("3.5.0"))
> set.seed(23)
> 
> edge_wt_matrix <-
+   rnorm(100, 5, 2) %>%
+   sample(9, FALSE) %>%
+   round(2) %>%
+   matrix(
+     ncol = 3,
+     nrow = 3,
+     dimnames = list(c("a", "b", "c"))
+   )
> 
> # Create the fully-connected
> # graph (without loops however)
> graph <-
+   create_graph() %>%
+   add_full_graph(
+     n = 3,
+     type = "weighted",
+     label = TRUE,
+     rel = "related_to",
+     edge_wt_matrix = edge_wt_matrix,
+     keep_loops = FALSE
+   )
> 
> # Show the graph's node
> # data frame (ndf)
> graph %>% get_node_df()
  id     type label
1  1 weighted     a
2  2 weighted     b
3  3 weighted     c
> 
> # Show the graph's edge
> # data frame (edf)
> graph %>% get_edge_df()
  id from to        rel weight
1  1    1  2 related_to   3.30
2  2    1  3 related_to   5.02
3  3    2  1 related_to   4.13
4  4    2  3 related_to   6.49
5  5    3  1 related_to   6.03
6  6    3  2 related_to   5.55
> 
> # An undirected graph can
> # also use a matrix with
> # edge weights, but only
> # the lower triangle of
> # that matrix will be used
> create_graph(directed = FALSE) %>%
+   add_full_graph(
+     n = 3,
+     type = "weighted",
+     label = TRUE,
+     rel = "related_to",
+     edge_wt_matrix = edge_wt_matrix,
+     keep_loops = FALSE
+   ) %>%
+   get_edge_df()
  id from to        rel weight
1  1    1  2 related_to   3.30
2  2    1  3 related_to   5.02
3  3    2  3 related_to   6.49
> 
> 
> 
> 
> cleanEx()
> nameEx("add_global_graph_attrs")
> ### * add_global_graph_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_global_graph_attrs
> ### Title: Add one or more global graph attributes
> ### Aliases: add_global_graph_attrs
> 
> ### ** Examples
> 
> # Create a new graph with no
> # global graph attributes and
> # add a global graph attribute
> graph <-
+   create_graph(
+     attr_theme = NULL) %>%
+   add_global_graph_attrs(
+     attr = "overlap",
+     value = "true",
+     attr_type = "graph")
> 
> # Verify that the attribute
> # addition has been made
> graph %>%
+   get_global_graph_attr_info()
# A tibble: 1 × 3
  attr    value attr_type
  <chr>   <chr> <chr>    
1 overlap true  graph    
> 
> # Add another attribute with
> # `add_global_graph_attrs()`
> graph <-
+   graph %>%
+   add_global_graph_attrs(
+     attr = "penwidth",
+     value = 12,
+     attr_type = "node")
> 
> # Verify that the attribute
> # addition has been made
> graph %>%
+   get_global_graph_attr_info()
# A tibble: 2 × 3
  attr     value attr_type
  <chr>    <chr> <chr>    
1 overlap  true  graph    
2 penwidth 12    node     
> 
> # When adding an attribute where
> # `attr` and `attr_type` already
> # exists, the value provided will
> # serve as an update
> graph %>%
+   add_global_graph_attrs(
+     attr = "penwidth",
+     value = 15,
+     attr_type = "node") %>%
+   get_global_graph_attr_info()
# A tibble: 2 × 3
  attr     value attr_type
  <chr>    <chr> <chr>    
1 overlap  true  graph    
2 penwidth 15    node     
> 
> 
> 
> 
> cleanEx()
> nameEx("add_gnm_graph")
> ### * add_gnm_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_gnm_graph
> ### Title: Add a G(n, m) Erdos-Renyi graph
> ### Aliases: add_gnm_graph
> 
> ### ** Examples
> 
> # Create an undirected GNM
> # graph with 100 nodes and
> # 120 edges
> gnm_graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_gnm_graph(
+     n = 100,
+     m = 120)
> 
> # Get a count of nodes
> gnm_graph %>% count_nodes()
[1] 100
> 
> # Get a count of edges
> gnm_graph %>% count_edges()
[1] 120
> 
> 
> 
> 
> cleanEx()
> nameEx("add_gnp_graph")
> ### * add_gnp_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_gnp_graph
> ### Title: Add a G(n, p) Erdos-Renyi graph
> ### Aliases: add_gnp_graph
> 
> ### ** Examples
> 
> # Create an undirected GNP
> # graph with 100 nodes using
> # a probability value of 0.05
> gnp_graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_gnp_graph(
+     n = 100,
+     p = 0.05)
> 
> # Get a count of nodes
> gnp_graph %>% count_nodes()
[1] 100
> 
> # Get a count of edges
> gnp_graph %>% count_edges()
[1] 245
> 
> 
> 
> 
> cleanEx()
> nameEx("add_graph_action")
> ### * add_graph_action
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_graph_action
> ### Title: Add a graph action for execution at every transform
> ### Aliases: add_graph_action
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 10,
+     m = 22,
+     set_seed = 23)
> 
> # Add a graph action that sets a node
> # attr column with a function; the
> # main function `set_node_attr_w_fcn()`
> # uses the `get_betweenness()` function
> # to provide betweenness values in the
> # `btwns` column; this action will
> # occur whenever there is a function
> # called on the graph that modifies it
> # (e.g., `add_n_nodes()`)
> graph <-
+   graph %>%
+   add_graph_action(
+     fcn = "set_node_attr_w_fcn",
+     node_attr_fcn = "get_betweenness",
+     column_name = "btwns",
+     action_name = "get_btwns")
> 
> # To ensure that the action is
> # available in the graph, use the
> # `get_graph_actions()` function
> graph %>% get_graph_actions()
# A tibble: 1 × 3
  action_index action_name expression                                           
         <int> <chr>       <chr>                                                
1            1 get_btwns   set_node_attr_w_fcn(graph = graph, node_attr_fcn = '…
> 
> 
> 
> 
> cleanEx()
> nameEx("add_graph_to_graph_series")
> ### * add_graph_to_graph_series
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_graph_to_graph_series
> ### Title: Add graph object to a graph series object
> ### Aliases: add_graph_to_graph_series
> 
> ### ** Examples
> 
> # Create three graphs
> graph_1 <-
+   create_graph() %>%
+   add_path(n = 4)
> 
> graph_2 <-
+   create_graph() %>%
+   add_cycle(n = 5)
> 
> graph_3 <-
+   create_graph() %>%
+   add_star(n = 6)
> 
> # Create an empty graph series
> # and add the graphs
> series <-
+   create_graph_series() %>%
+   add_graph_to_graph_series(
+     graph = graph_1) %>%
+   add_graph_to_graph_series(
+     graph = graph_2) %>%
+   add_graph_to_graph_series(
+     graph = graph_3)
> 
> # Count the number of graphs
> # in the graph series
> series %>%
+   count_graphs_in_graph_series()
[1] 3
> 
> 
> 
> 
> cleanEx()
> nameEx("add_grid_2d")
> ### * add_grid_2d
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_grid_2d
> ### Title: Add a 2D grid of nodes to the graph
> ### Aliases: add_grid_2d
> 
> ### ** Examples
> 
> # Create a new graph and add
> # a 3 x 3 grid
> graph <-
+   create_graph() %>%
+   add_grid_2d(
+     x = 3, y = 3,
+     type = "grid")
> 
> # Get node information
> # from this graph
> graph %>%
+   get_node_info()
  id type label deg indeg outdeg loops
1  1 grid     1   2     0      2     0
2  2 grid     2   3     1      2     0
3  3 grid     3   2     1      1     0
4  4 grid     4   3     1      2     0
5  5 grid     5   4     2      2     0
6  6 grid     6   3     2      1     0
7  7 grid     7   2     1      1     0
8  8 grid     8   3     2      1     0
9  9 grid     9   2     2      0     0
> 
> # Attributes can be specified
> # in extra arguments and these
> # are applied in order; Usually
> # these attributes are applied
> # to nodes (e.g., `type` is a
> # node attribute) but the `rel`
> # attribute will apply to the
> # edges
> graph_w_attrs <-
+   create_graph() %>%
+   add_grid_2d(
+     x = 3, y = 2,
+     label = c("one", "two",
+               "three", "four",
+               "five", "six"),
+     type = c("a", "a",
+              "b", "b",
+              "c", "c"),
+     rel = "grid",
+     node_data = node_data(
+       value = c(
+         1.2, 8.4, 3.4,
+         5.2, 6.1, 2.6)))
> 
> # Get the graph's node data frame
> graph_w_attrs %>% get_node_df()
  id type label value
1  1    a   one   1.2
2  2    a   two   8.4
3  3    b three   3.4
4  4    b  four   5.2
5  5    c  five   6.1
6  6    c   six   2.6
> 
> # Get the graph's edge data frame
> graph_w_attrs %>% get_edge_df()
  id from to  rel
1  1    1  2 grid
2  2    1  4 grid
3  3    2  3 grid
4  4    2  5 grid
5  5    3  6 grid
6  6    4  5 grid
7  7    5  6 grid
> 
> 
> 
> 
> cleanEx()
> nameEx("add_grid_3d")
> ### * add_grid_3d
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_grid_3d
> ### Title: Add a 3D grid of nodes to the graph
> ### Aliases: add_grid_3d
> 
> ### ** Examples
> 
> # Create a new graph and add
> # a 2 x 2 x 2 grid
> graph <-
+   create_graph() %>%
+   add_grid_3d(
+     x = 2, y = 2, z = 2,
+     type = "grid")
> 
> # Get node information
> # from this graph
> graph %>%
+   get_node_info()
  id type label deg indeg outdeg loops
1  1 grid     1   3     0      3     0
2  2 grid     2   3     1      2     0
3  3 grid     3   3     1      2     0
4  4 grid     4   3     2      1     0
5  5 grid     5   3     1      2     0
6  6 grid     6   3     2      1     0
7  7 grid     7   3     2      1     0
8  8 grid     8   3     3      0     0
> 
> # Attributes can be specified
> # in extra arguments and these
> # are applied in order; Usually
> # these attributes are applied
> # to nodes (e.g., `type` is a
> # node attribute) but the `rel`
> # attribute will apply to the
> # edges
> graph_w_attrs <-
+   create_graph() %>%
+   add_grid_3d(
+     x = 2, y = 2, z = 2,
+     label = c(
+       "one", "two", "three",
+       "four", "five", "six",
+       "seven", "eight"),
+     type = c(
+       "a", "a", "b",
+       "b", "c", "c",
+       "d", "d"),
+     rel = "grid",
+     node_data = node_data(
+       value = c(
+         1.2, 8.4, 3.4,
+         5.2, 6.1, 2.6,
+         6.3, 9.3)))
> 
> # Get the graph's node data frame
> graph_w_attrs %>% get_node_df()
  id type label value
1  1    a   one   1.2
2  2    a   two   8.4
3  3    b three   3.4
4  4    b  four   5.2
5  5    c  five   6.1
6  6    c   six   2.6
7  7    d seven   6.3
8  8    d eight   9.3
> 
> # Get the graph's edge data frame
> graph_w_attrs %>% get_edge_df()
   id from to  rel
1   1    1  2 grid
2   2    1  3 grid
3   3    1  5 grid
4   4    2  4 grid
5   5    2  6 grid
6   6    3  4 grid
7   7    3  7 grid
8   8    4  8 grid
9   9    5  6 grid
10 10    5  7 grid
11 11    6  8 grid
12 12    7  8 grid
> 
> 
> 
> 
> cleanEx()
> nameEx("add_growing_graph")
> ### * add_growing_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_growing_graph
> ### Title: Create a random growing graph with m edges added per step
> ### Aliases: add_growing_graph
> 
> ### ** Examples
> 
> # Create a random, growing
> # citation graph with 100
> # nodes, adding an edge after
> # each node addition
> growing_graph <-
+   create_graph() %>%
+   add_growing_graph(
+     n = 100,
+     m = 1,
+     citation = TRUE,
+     set_seed = 23)
> 
> # Get a count of nodes
> growing_graph %>% count_nodes()
[1] 100
> 
> # Get a count of edges
> growing_graph %>% count_edges()
[1] 99
> 
> 
> 
> 
> cleanEx()
> nameEx("add_islands_graph")
> ### * add_islands_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_islands_graph
> ### Title: Create a random islands graph with edges between the islands
> ### Aliases: add_islands_graph
> 
> ### ** Examples
> 
> # Create a graph of islands
> islands_graph <-
+   create_graph() %>%
+   add_islands_graph(
+     n_islands = 4,
+     island_size = 10,
+     p = 0.5,
+     edges_between = 1,
+     set_seed = 23)
> 
> # Get a count of nodes
> islands_graph %>% count_nodes()
[1] 40
> 
> # Get a count of edges
> islands_graph %>% count_edges()
[1] 107
> 
> 
> 
> 
> cleanEx()
> nameEx("add_n_node_clones")
> ### * add_n_node_clones
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_n_node_clones
> ### Title: Add one or several clones of an existing node to the graph
> ### Aliases: add_n_node_clones
> 
> ### ** Examples
> 
> # Create a graph with a path of
> # nodes; supply `label`, `type`,
> # and `value` node attributes
> graph <-
+   create_graph() %>%
+   add_path(
+     n = 3,
+     label = c("d", "g", "r"),
+     type = c("a", "b", "c"))
> 
> # Display the graph's internal
> # node data frame
> graph %>% get_node_df()
  id type label
1  1    a     d
2  2    b     g
3  3    c     r
> 
> # Create 3 clones of node `1`
> # but assign new node label
> # values (leaving `label` as
> # NULL yields NA values)
> graph <-
+   graph %>%
+   add_n_node_clones(
+     n = 3,
+     node = 1,
+     label = c("x", "y", "z"))
> 
> # Display the graph's internal
> # node data frame: nodes `4`,
> # `5`, and `6` are clones of `1`
> graph %>% get_node_df()
  id type label
1  1    a     d
2  2    b     g
3  3    c     r
4  4    a     x
5  5    a     y
6  6    a     z
> 
> 
> 
> 
> cleanEx()
> nameEx("add_n_nodes")
> ### * add_n_nodes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_n_nodes
> ### Title: Add one or several unconnected nodes to the graph
> ### Aliases: add_n_nodes
> 
> ### ** Examples
> 
> # Create an empty graph and
> # add 5 nodes; these nodes
> # will be assigned ID values
> # from `1` to `5`
> graph <-
+   create_graph() %>%
+   add_n_nodes(n = 5)
> 
> # Get the graph's node IDs
> graph %>% get_node_ids()
[1] 1 2 3 4 5
> 
> 
> 
> 
> cleanEx()
> nameEx("add_n_nodes_ws")
> ### * add_n_nodes_ws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_n_nodes_ws
> ### Title: Add a multiple of new nodes with edges to or from one or more
> ###   selected nodes
> ### Aliases: add_n_nodes_ws
> 
> ### ** Examples
> 
> # Create an empty graph, add a node to it, select
> # that node, and then add 5 more nodes to the graph
> # with edges from the original node to all of the
> # new nodes
> graph <-
+   create_graph() %>%
+   add_n_nodes(n = 1) %>%
+   select_last_nodes_created() %>%
+   add_n_nodes_ws(
+     n = 5,
+     direction = "from")
> 
> # Get the graph's nodes
> graph %>% get_node_ids()
[1] 1 2 3 4 5 6
> 
> # Get the graph's edges
> graph %>% get_edges()
[1] "1->2" "1->3" "1->4" "1->5" "1->6"
> 
> # Create an empty graph, add a node to it, select
> # that node, and then add 5 more nodes to the graph
> # with edges toward the original node from all of
> # the new nodes
> graph <-
+   create_graph() %>%
+   add_n_nodes(n = 1) %>%
+   select_last_nodes_created() %>%
+   add_n_nodes_ws(
+     n = 5,
+     direction = "to")
> 
> # Get the graph's nodes
> graph %>% get_node_ids()
[1] 1 2 3 4 5 6
> 
> # Get the graph's edges
> graph %>% get_edges()
[1] "2->1" "3->1" "4->1" "5->1" "6->1"
> 
> 
> 
> 
> cleanEx()
> nameEx("add_node")
> ### * add_node
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_node
> ### Title: Add a node to an existing graph object
> ### Aliases: add_node
> 
> ### ** Examples
> 
> # Create an empty graph and add 2 nodes by using
> # the `add_node()` function twice
> graph <-
+   create_graph() %>%
+   add_node() %>%
+   add_node()
> 
> # Get a count of all nodes
> # in the graph
> graph %>% count_nodes()
[1] 2
> 
> # The nodes added were given
> # ID values `1` and `2`; obtain
> # the graph's node IDs
> graph %>% get_node_ids()
[1] 1 2
> 
> # Add a node with a `type`
> # value defined
> graph <-
+   graph %>%
+   add_node(type = "person")
> 
> # View the graph's internal
> # node data frame (ndf)
> graph %>% get_node_df()
  id   type label
1  1   <NA>  <NA>
2  2   <NA>  <NA>
3  3 person  <NA>
> 
> 
> 
> 
> cleanEx()
> nameEx("add_node_clones_ws")
> ### * add_node_clones_ws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_node_clones_ws
> ### Title: Add clones of a selection of nodes
> ### Aliases: add_node_clones_ws
> 
> ### ** Examples
> 
> # Create a graph with a path of
> # nodes; supply `label`, `type`,
> # and `value` node attributes,
> # and select the created nodes
> graph <-
+   create_graph() %>%
+   add_path(
+     n = 3,
+     label = c("d", "g", "r"),
+     type = c("a", "b", "c")) %>%
+   select_last_nodes_created()
> 
> # Display the graph's internal
> # node data frame
> graph %>% get_node_df()
  id type label
1  1    a     d
2  2    b     g
3  3    c     r
> 
> # Create clones of all nodes
> # in the selection but assign
> # new node label values
> # (leaving `label` as NULL
> # yields NA values)
> graph <-
+   graph %>%
+   add_node_clones_ws(
+     label = c("a", "b", "v"))
> 
> # Display the graph's internal
> # node data frame: nodes `4`,
> # `5`, and `6` are clones of
> # `1`, `2`, and `3`
> graph %>% get_node_df()
  id type label
1  1    a     d
2  2    b     g
3  3    c     r
4  4    a     a
5  5    b     b
6  6    c     v
> 
> # Select the last nodes
> # created (`4`, `5`, and `6`)
> # and clone those nodes and
> # their attributes while
> # creating new edges between
> # the new and existing nodes
> graph <-
+   graph %>%
+   select_last_nodes_created() %>%
+   add_node_clones_ws(
+     add_edges = TRUE,
+     direction = "to",
+     label = c("t", "z", "s"))
> 
> # Display the graph's internal
> # edge data frame; there are
> # edges between the selected
> # nodes and their clones
> graph %>% get_edge_df()
  id from to  rel
1  1    1  2 <NA>
2  2    2  3 <NA>
3  3    4  7 <NA>
4  4    5  8 <NA>
5  5    6  9 <NA>
> 
> 
> 
> 
> cleanEx()
> nameEx("add_node_df")
> ### * add_node_df
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_node_df
> ### Title: Add nodes from a node data frame to an existing graph object
> ### Aliases: add_node_df
> 
> ### ** Examples
> 
> # Create an empty graph
> graph <- create_graph()
> 
> # Create a node data frame (ndf)
> ndf <-
+   create_node_df(n = 2)
> 
> # Add the node data frame to
> # the graph object to create
> # a graph with nodes
> graph <-
+   graph %>%
+   add_node_df(
+     node_df = ndf)
> 
> # Inspect the graph's ndf
> graph %>% get_node_df()
  id type label
1  1 <NA>  <NA>
2  2 <NA>  <NA>
> 
> # Create another ndf
> ndf_2 <-
+   create_node_df(n = 3)
> 
> # Add the second node data
> # frame to the graph object
> # to add more nodes with
> # attributes to the graph
> graph <-
+   graph %>%
+   add_node_df(
+     node_df = ndf_2)
> 
> # View the graph's internal
> # node data frame using the
> # `get_node_df()` function
> graph %>% get_node_df()
  id type label
1  1 <NA>  <NA>
2  2 <NA>  <NA>
3  3 <NA>  <NA>
4  4 <NA>  <NA>
5  5 <NA>  <NA>
> 
> 
> 
> 
> cleanEx()
> nameEx("add_nodes_from_df_cols")
> ### * add_nodes_from_df_cols
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_nodes_from_df_cols
> ### Title: Add nodes from distinct values in data frame columns
> ### Aliases: add_nodes_from_df_cols
> 
> ### ** Examples
> 
> # Create an empty graph
> graph <- create_graph()
> 
> # Create a data frame from
> # which several columns have
> # values designated as graph nodes
> df <-
+   data.frame(
+     col_1 = c("f", "p", "q"),
+     col_2 = c("q", "x", "f"),
+     col_3 = c(1, 5, 3),
+     col_4 = c("a", "v", "h"),
+     stringsAsFactors = FALSE)
> 
> # Add nodes from columns `col_1`
> # and `col_2` from the data frame
> # to the graph object
> graph <-
+   graph %>%
+   add_nodes_from_df_cols(
+     df = df,
+     columns = c("col_1", "col_2"))
> 
> # Show the graph's node data
> # frame; duplicate labels are
> # prevented with `keep_duplicates =
> # FALSE`)
> graph %>% get_node_df()
  id type label
1  1 <NA>     f
2  2 <NA>     p
3  3 <NA>     q
4  4 <NA>     x
> 
> # Add new nodes from columns 3 and 4;
> # We can specify the columns by their
> # numbers as well
> graph <-
+   graph %>%
+   add_nodes_from_df_cols(
+     df = df,
+     columns = 3:4)
> 
> # Show the graph's node data
> # frame; note that nodes didn't
> # get made with columns that
> # are not character class columns
> graph %>% get_node_df()
  id type label
1  1 <NA>     f
2  2 <NA>     p
3  3 <NA>     q
4  4 <NA>     x
5  5 <NA>     a
6  6 <NA>     v
7  7 <NA>     h
> 
> 
> 
> 
> cleanEx()
> nameEx("add_nodes_from_table")
> ### * add_nodes_from_table
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_nodes_from_table
> ### Title: Add nodes and attributes to graph from a table
> ### Aliases: add_nodes_from_table
> 
> ### ** Examples
> 
> # To add nodes from the dataset called
> # `currencies` (available as a dataset
> # in the package), call the
> # `add_nodes_from_table()` function
> # after creating an empty graph; new
> # node ID values will be created as
> # monotonically-increasing values
> graph_1 <-
+   create_graph() %>%
+   add_nodes_from_table(
+     table = currencies)
> 
> # View part of the graph's internal
> # node data frame (ndf)
> graph_1 %>%
+   get_node_df() %>%
+   .[, 1:5] %>%
+   head()
  id type label iso_4217_code curr_number
1  1 <NA>  <NA>           AED         784
2  2 <NA>  <NA>           AFN         971
3  3 <NA>  <NA>           ALL           8
4  4 <NA>  <NA>           AMD          51
5  5 <NA>  <NA>           ANG         532
6  6 <NA>  <NA>           AOA         973
> 
> # If you would like to assign
> # any of the table's columns as
> # `type` or `label` attributes,
> # this can be done with the `type_col`
> # and `label_col` arguments; to set
> # a static `type` attribute for all
> # of the table records, use `set_type`
> graph_2 <-
+   create_graph() %>%
+   add_nodes_from_table(
+     table = currencies,
+     label_col = iso_4217_code,
+     set_type = currency)
> 
> # View part of the graph's internal ndf
> graph_2 %>%
+   get_node_df() %>%
+   .[, 1:5] %>%
+   head()
  id     type label curr_number exponent
1  1 currency   AED         784        2
2  2 currency   AFN         971        2
3  3 currency   ALL           8        2
4  4 currency   AMD          51        2
5  5 currency   ANG         532        2
6  6 currency   AOA         973        2
> 
> # Suppose we would like to not
> # include certain columns from the
> # external table in the resulting
> # graph; we can use the `drop_cols`
> # argument to choose which columns
> # to not include as attributes
> graph_3 <-
+   create_graph() %>%
+   add_nodes_from_table(
+     table = currencies,
+     label_col = iso_4217_code,
+     set_type = currency,
+     drop_cols = exponent & currency_name)
> 
> # Show the node attribute names
> # for the graph; note that the
> # `exponent` and `currency_name`
> # columns are not attributes in the
> # graph's internal node data frame
> graph_3 %>%
+   get_node_df() %>%
+   colnames()
[1] "id"          "type"        "label"       "curr_number"
> 
> 
> 
> 
> cleanEx()
> nameEx("add_pa_graph")
> ### * add_pa_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_pa_graph
> ### Title: Add a preferential attachment graph
> ### Aliases: add_pa_graph
> 
> ### ** Examples
> 
> # Create an undirected PA
> # graph with 100 nodes, adding
> # 2 edges at every time step
> pa_graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_pa_graph(
+     n = 100,
+     m = 1)
> 
> # Get a count of nodes
> pa_graph %>% count_nodes()
[1] 100
> 
> # Get a count of edges
> pa_graph %>% count_edges()
[1] 99
> 
> 
> 
> 
> cleanEx()
> nameEx("add_path")
> ### * add_path
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_path
> ### Title: Add a path of nodes to the graph
> ### Aliases: add_path
> 
> ### ** Examples
> 
> # Create a new graph and add
> # 2 paths of varying lengths
> graph <-
+   create_graph() %>%
+   add_path(
+     n = 4,
+     type = "path") %>%
+   add_path(
+     n = 5,
+     type = "path")
> 
> # Get node information
> # from this graph
> graph %>% get_node_info()
  id type label deg indeg outdeg loops
1  1 path     1   1     0      1     0
2  2 path     2   2     1      1     0
3  3 path     3   2     1      1     0
4  4 path     4   1     1      0     0
5  5 path     5   1     0      1     0
6  6 path     6   2     1      1     0
7  7 path     7   2     1      1     0
8  8 path     8   2     1      1     0
9  9 path     9   1     1      0     0
> 
> # Node and edge aesthetic and data
> # attributes can be specified in
> # the `node_aes`, `edge_aes`,
> # `node_data`, and `edge_data`
> # arguments
> 
> suppressWarnings(RNGversion("3.5.0"))
> set.seed(23)
> 
> graph_w_attrs <-
+   create_graph() %>%
+   add_path(
+     n = 3,
+     label = c(
+       "one", "two", "three"),
+     type = c(
+       "a", "a", "b"),
+     rel = "A",
+     node_aes = node_aes(
+       fillcolor = "steelblue"),
+     edge_aes = edge_aes(
+       color = "red",
+       penwidth = 1.2),
+     node_data = node_data(
+       value = c(
+         1.6, 2.8, 3.4)),
+     edge_data = edge_data(
+       value =
+         rnorm(
+           n = 2,
+           mean = 5.0,
+           sd = 1.0)))
> 
> # Get the graph's node data frame
> graph_w_attrs %>% get_node_df()
  id type label fillcolor value
1  1    a   one steelblue   1.6
2  2    a   two steelblue   2.8
3  3    b three steelblue   3.4
> 
> # Get the graph's edge data frame
> graph_w_attrs %>% get_edge_df()
  id from to rel penwidth color    value
1  1    1  2   A      1.2   red 5.996605
2  2    2  3   A      1.2   red 6.107490
> 
> 
> 
> 
> cleanEx()
> nameEx("add_prism")
> ### * add_prism
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_prism
> ### Title: Add a prism of nodes to the graph
> ### Aliases: add_prism
> 
> ### ** Examples
> 
> # Create a new graph and
> # add 2 prisms
> graph <-
+   create_graph() %>%
+   add_prism(
+     n = 3,
+     type = "prism",
+     label = "a") %>%
+   add_prism(
+     n = 3,
+     type = "prism",
+     label = "b")
> 
> # Get node information from this graph
> graph %>% get_node_info()
   id  type label deg indeg outdeg loops
1   1 prism     a   3     1      2     0
2   2 prism     a   3     1      2     0
3   3 prism     a   3     1      2     0
4   4 prism     a   3     2      1     0
5   5 prism     a   3     2      1     0
6   6 prism     a   3     2      1     0
7   7 prism     b   3     1      2     0
8   8 prism     b   3     1      2     0
9   9 prism     b   3     1      2     0
10 10 prism     b   3     2      1     0
11 11 prism     b   3     2      1     0
12 12 prism     b   3     2      1     0
> 
> # Node and edge aesthetic and data
> # attributes can be specified in
> # the `node_aes`, `edge_aes`,
> # `node_data`, and `edge_data`
> # arguments
> 
> suppressWarnings(RNGversion("3.5.0"))
> set.seed(23)
> 
> graph_w_attrs <-
+   create_graph() %>%
+   add_prism(
+     n = 3,
+     label = c(
+       "one", "two",
+       "three", "four",
+       "five", "six"),
+     type = c(
+       "a", "a",
+       "b", "b",
+       "c", "c"),
+     rel = "A",
+     node_aes = node_aes(
+       fillcolor = "steelblue"),
+     edge_aes = edge_aes(
+       color = "red",
+       penwidth = 1.2),
+     node_data = node_data(
+       value = c(
+         1.6, 2.8, 3.4,
+         3.2, 5.3, 6.2)),
+     edge_data = edge_data(
+       value =
+         rnorm(
+           n = 9,
+           mean = 5.0,
+           sd = 1.0)))
> 
> # Get the graph's node data frame
> graph_w_attrs %>% get_node_df()
  id type label fillcolor value
1  1    a   one steelblue   1.6
2  2    a   two steelblue   2.8
3  3    b three steelblue   3.4
4  4    b  four steelblue   3.2
5  5    c  five steelblue   5.3
6  6    c   six steelblue   6.2
> 
> # Get the graph's edge data frame
> graph_w_attrs %>% get_edge_df()
  id from to rel penwidth color    value
1  1    1  2   A      1.2   red 5.996605
2  2    2  3   A      1.2   red 6.107490
3  3    3  1   A      1.2   red 4.721914
4  4    4  5   A      1.2   red 6.019205
5  5    5  6   A      1.2   red 5.045437
6  6    6  4   A      1.2   red 6.575780
7  7    1  4   A      1.2   red 5.218288
8  8    2  5   A      1.2   red 3.953465
9  9    3  6   A      1.2   red 4.711311
> 
> 
> 
> 
> cleanEx()
> nameEx("add_reverse_edges_ws")
> ### * add_reverse_edges_ws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_reverse_edges_ws
> ### Title: Add new edges in the opposite directions of a selection of edges
> ### Aliases: add_reverse_edges_ws
> 
> ### ** Examples
> 
> # Create an empty graph, add 2 nodes to it,
> # and create the edge `1->2`
> graph <-
+   create_graph() %>%
+   add_n_nodes(
+     n = 2,
+     type = "type_a",
+     label = c("a_1", "a_2")) %>%
+   add_edge(
+     from = 1,
+     to = 2,
+     rel = "a")
> 
> # Get the graph's edges
> graph %>% get_edge_ids()
[1] 1
> 
> # Select the edge and create 2 additional edges
> # with the opposite definition of `1->2`, which
> # is `2->1`; also, apply, different `rel` values
> # (`b` and `c`)
> graph <-
+   graph %>%
+   select_edges() %>%
+   add_reverse_edges_ws(rel = "b") %>%
+   add_reverse_edges_ws(rel = "c") %>%
+   clear_selection()
> 
> # Get the graph's edge data frame
> graph %>% get_edge_df()
  id from to rel
1  1    1  2   a
2  2    2  1   b
3  3    2  1   c
> 
> 
> 
> 
> cleanEx()
> nameEx("add_smallworld_graph")
> ### * add_smallworld_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_smallworld_graph
> ### Title: Add a Watts-Strogatz small-world graph
> ### Aliases: add_smallworld_graph
> 
> ### ** Examples
> 
> # Create an undirected smallworld
> # graph with 100 nodes using
> # a probability value of 0.05
> smallworld_graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_smallworld_graph(
+     dimension = 1,
+     size = 50,
+     neighborhood = 1,
+     p = 0.05,
+     set_seed = 23)
> 
> # Get a count of nodes
> smallworld_graph %>% count_nodes()
[1] 50
> 
> # Get a count of edges
> smallworld_graph %>% count_edges()
[1] 50
> 
> 
> 
> 
> cleanEx()
> nameEx("add_star")
> ### * add_star
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_star
> ### Title: Add a star of nodes to the graph
> ### Aliases: add_star
> 
> ### ** Examples
> 
> # Create a new graph and add 2
> # stars of varying numbers of nodes
> graph <-
+   create_graph() %>%
+   add_star(
+     n = 4,
+     type = "four_star") %>%
+   add_star(
+     n = 5,
+     type = "five_star")
> 
> # Get node information from this graph
> graph %>% get_node_info()
  id      type label deg indeg outdeg loops
1  1 four_star     1   3     0      3     0
2  2 four_star     2   1     1      0     0
3  3 four_star     3   1     1      0     0
4  4 four_star     4   1     1      0     0
5  5 five_star     5   4     0      4     0
6  6 five_star     6   1     1      0     0
7  7 five_star     7   1     1      0     0
8  8 five_star     8   1     1      0     0
9  9 five_star     9   1     1      0     0
> 
> # Node and edge aesthetic and data
> # attributes can be specified in
> # the `node_aes`, `edge_aes`,
> # `node_data`, and `edge_data`
> # arguments
> 
> suppressWarnings(RNGversion("3.5.0"))
> set.seed(23)
> 
> graph_w_attrs <-
+   create_graph() %>%
+   add_star(
+     n = 4,
+     label = c(
+       "one", "two",
+       "three", "four"),
+     type = c(
+       "a", "a", "b", "b"),
+     rel = "A",
+     node_aes = node_aes(
+       fillcolor = "steelblue"),
+     edge_aes = edge_aes(
+       color = "red",
+       penwidth = 1.2),
+     node_data = node_data(
+       value = c(
+         1.6, 2.8, 3.4, 8.3)),
+     edge_data = edge_data(
+       value =
+         rnorm(
+           n = 3,
+           mean = 5.0,
+           sd = 1.0)))
> 
> # Get the graph's node data frame
> graph_w_attrs %>% get_node_df()
  id type label fillcolor value
1  1    a   one steelblue   1.6
2  2    a   two steelblue   2.8
3  3    b three steelblue   3.4
4  4    b  four steelblue   8.3
> 
> # Get the graph's edge data frame
> graph_w_attrs %>% get_edge_df()
  id from to rel penwidth color    value
1  1    1  2   A      1.2   red 5.996605
2  2    1  3   A      1.2   red 6.107490
3  3    1  4   A      1.2   red 4.721914
> 
> 
> 
> 
> cleanEx()
> nameEx("clear_selection")
> ### * clear_selection
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clear_selection
> ### Title: Clear an active selection of nodes or edges
> ### Aliases: clear_selection
> 
> ### ** Examples
> 
> # Create a graph with
> # a single path
> graph <-
+   create_graph() %>%
+   add_path(n = 5)
> 
> # Select nodes with IDs `1`
> # and `3`
> graph <-
+   graph %>%
+   select_nodes(
+     nodes = c(1, 3))
> 
> # Verify that a node selection
> # has been made
> graph %>% get_selection()
[1] 1 3
> 
> # Clear the selection with
> # `clear_selection()`
> graph <-
+   graph %>%
+   clear_selection()
> 
> # Verify that the node
> # selection has been cleared
> graph %>% get_selection()
[1] NA
> 
> 
> 
> 
> cleanEx()
> nameEx("colorize_edge_attrs")
> ### * colorize_edge_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: colorize_edge_attrs
> ### Title: Apply colors based on edge attribute values
> ### Aliases: colorize_edge_attrs
> 
> ### ** Examples
> 
> # Create a graph with 5
> # nodes and 4 edges
> graph <-
+   create_graph() %>%
+   add_path(n = 5) %>%
+   set_edge_attrs(
+     edge_attr = weight,
+     values = c(3.7, 6.3, 9.2, 1.6))
> 
> # We can bucketize values in
> # the edge `weight` attribute using
> # `cut_points` and, by doing so,
> # assign colors to each of the
> # bucketed ranges (for values not
> # part of any bucket, a gray color
> # is assigned by default)
> graph <-
+   graph %>%
+   colorize_edge_attrs(
+     edge_attr_from = weight,
+     edge_attr_to = color,
+     cut_points = c(0, 2, 4, 6, 8, 10),
+     palette = "RdYlGn")
> 
> # Now there will be a `color`
> # edge attribute with distinct
> # colors (from the RColorBrewer
> # Red-Yellow-Green palette)
> graph %>% get_edge_df()
  id from to  rel weight   color
1  1    1  2 <NA>    3.7 #FDAE61
2  2    2  3 <NA>    6.3 #A6D96A
3  3    3  4 <NA>    9.2 #1A9641
4  4    4  5 <NA>    1.6 #D7191C
> 
> 
> 
> 
> cleanEx()
> nameEx("colorize_node_attrs")
> ### * colorize_node_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: colorize_node_attrs
> ### Title: Apply colors based on node attribute values
> ### Aliases: colorize_node_attrs
> 
> ### ** Examples
> 
> # Create a graph with 8
> # nodes and 7 edges
> graph <-
+   create_graph() %>%
+   add_path(n = 8) %>%
+   set_node_attrs(
+     node_attr = weight,
+     values = c(
+       8.2, 3.7, 6.3, 9.2,
+       1.6, 2.5, 7.2, 5.4))
> 
> # Find group membership values for all nodes
> # in the graph through the Walktrap community
> # finding algorithm and join those group values
> # to the graph's internal node data frame (ndf)
> # with the `join_node_attrs()` function
> graph <-
+   graph %>%
+   join_node_attrs(
+     df = get_cmty_walktrap(.))
> 
> # Inspect the number of distinct communities
> graph %>%
+   get_node_attrs(
+     node_attr = walktrap_group) %>%
+   unique() %>%
+   sort()
[1] 1 2 3
> 
> # Visually distinguish the nodes in the different
> # communities by applying colors using the
> # `colorize_node_attrs()` function; specifically,
> # set different `fillcolor` values with an alpha
> # value of 90 and apply opaque colors to the node
> # border (with the `color` node attribute)
> graph <-
+   graph %>%
+   colorize_node_attrs(
+     node_attr_from = walktrap_group,
+     node_attr_to = fillcolor,
+     palette = "Greens",
+     alpha = 90) %>%
+   colorize_node_attrs(
+     node_attr_from = walktrap_group,
+     node_attr_to = color,
+     palette = "viridis",
+     alpha = 80)
> 
> # Show the graph's internal node data frame
> graph %>% get_node_df()
  id type label weight walktrap_group fillcolor     color
1  1 <NA>     1    8.2              2 #A1D99B90 #21908C80
2  2 <NA>     2    3.7              2 #A1D99B90 #21908C80
3  3 <NA>     3    6.3              2 #A1D99B90 #21908C80
4  4 <NA>     4    9.2              3 #31A35490 #FDE72580
5  5 <NA>     5    1.6              3 #31A35490 #FDE72580
6  6 <NA>     6    2.5              1 #E5F5E090 #44015480
7  7 <NA>     7    7.2              1 #E5F5E090 #44015480
8  8 <NA>     8    5.4              1 #E5F5E090 #44015480
> 
> # Create a graph with 8 nodes and 7 edges
> graph <-
+   create_graph() %>%
+   add_path(n = 8) %>%
+   set_node_attrs(
+     node_attr = weight,
+     values = c(
+       8.2, 3.7, 6.3, 9.2,
+       1.6, 2.5, 7.2, 5.4))
> 
> # We can bucketize values in `weight` using
> # `cut_points` and assign colors to each of the
> # bucketed ranges (for values not part of any
> # bucket, a gray color is assigned by default)
> graph <-
+   graph %>%
+   colorize_node_attrs(
+     node_attr_from = weight,
+     node_attr_to = fillcolor,
+     cut_points = c(1, 3, 5, 7, 9))
> 
> # Now there will be a `fillcolor` node attribute
> # with distinct colors (the `#D9D9D9` color is
> # the default `gray85` color)
> graph %>% get_node_df()
  id type label weight fillcolor
1  1 <NA>     1    8.2   #2B83BA
2  2 <NA>     2    3.7   #FDAE61
3  3 <NA>     3    6.3   #ABDDA4
4  4 <NA>     4    9.2   #D9D9D9
5  5 <NA>     5    1.6   #D7191C
6  6 <NA>     6    2.5   #D7191C
7  7 <NA>     7    7.2   #2B83BA
8  8 <NA>     8    5.4   #ABDDA4
> 
> 
> 
> 
> cleanEx()
> nameEx("combine_edfs")
> ### * combine_edfs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: combine_edfs
> ### Title: Combine multiple edge data frames into a single edge data frame
> ### Aliases: combine_edfs
> 
> ### ** Examples
> 
> # Create an edge data frame (edf)
> edf_1 <-
+   create_edge_df(
+     from = c(1, 1, 2, 3),
+     to = c(2, 4, 4, 1),
+     rel = "requires",
+     color = "green",
+     data = c(2.7, 8.9, 2.6, 0.6))
> 
> # Create a second edge data frame
> edf_2 <-
+   create_edge_df(
+     from = c(5, 7, 8, 8),
+     to = c(7, 8, 6, 5),
+     rel = "receives",
+     arrowhead = "dot",
+     color = "red")
> 
> # Combine the two edge data frames
> all_edges <- combine_edfs(edf_1, edf_2)
> 
> # View the combined edge data frame
> all_edges
  id from to      rel color data arrowhead
1  1    1  2 requires green  2.7      <NA>
2  2    1  4 requires green  8.9      <NA>
3  3    2  4 requires green  2.6      <NA>
4  4    3  1 requires green  0.6      <NA>
5  5    5  7 receives   red   NA       dot
6  6    7  8 receives   red   NA       dot
7  7    8  6 receives   red   NA       dot
8  8    8  5 receives   red   NA       dot
> 
> 
> 
> 
> cleanEx()
> nameEx("combine_graphs")
> ### * combine_graphs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: combine_graphs
> ### Title: Combine two graphs into a single graph
> ### Aliases: combine_graphs
> 
> ### ** Examples
> 
> # Create a graph with a cycle
> # containing 6 nodes
> graph_cycle <-
+  create_graph() %>%
+    add_cycle(n = 6)
> 
> # Create a random graph with
> # 8 nodes and 15 edges using the
> # `add_gnm_graph()` function
> graph_random <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 8,
+     m = 15,
+     set_seed = 23)
> 
> # Combine the two graphs in a
> # union operation
> combined_graph <-
+   combine_graphs(
+     graph_cycle,
+     graph_random)
> 
> # Get the number of nodes in
> # the combined graph
> combined_graph %>% count_nodes()
[1] 14
> 
> # The `combine_graphs()`
> # function will renumber
> # node ID values in graph `y`
> # during the union; this ensures
> # that node ID values are unique
> combined_graph %>% get_node_ids()
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14
> 
> 
> 
> 
> cleanEx()
> nameEx("combine_ndfs")
> ### * combine_ndfs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: combine_ndfs
> ### Title: Combine multiple node data frames
> ### Aliases: combine_ndfs
> 
> ### ** Examples
> 
> # Create two node data frames
> node_df_1 <-
+   create_node_df(
+     n = 2,
+     type = c("a", "b"),
+     label = c("D", "Z"),
+     value = c(8.4, 3.4))
> 
> node_df_2 <-
+   create_node_df(
+     n = 2,
+     type = c("b", "c"),
+     label = c("U", "A"),
+     value = c(0.4, 3.4))
> 
> # Combine the ndfs using the
> # `combine_ndfs()` function
> node_df_combined <-
+   combine_ndfs(
+     node_df_1,
+     node_df_2)
> 
> # Inspect the combined ndf
> node_df_combined
  id type label value
1  1    a     D   8.4
2  2    b     Z   3.4
3  3    b     U   0.4
4  4    c     A   3.4
> 
> 
> 
> 
> cleanEx()
> nameEx("copy_edge_attrs")
> ### * copy_edge_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: copy_edge_attrs
> ### Title: Copy an edge attribute column and set the name
> ### Aliases: copy_edge_attrs
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 5,
+     m = 8,
+     set_seed = 23) %>%
+   set_edge_attrs(
+     edge_attr = color,
+     values = "green")
> 
> # Get the graph's internal
> # edf to show which edge
> # attributes are available
> graph %>% get_edge_df()
  id from to  rel color
1  1    1  3 <NA> green
2  2    2  1 <NA> green
3  3    2  5 <NA> green
4  4    2  3 <NA> green
5  5    3  2 <NA> green
6  6    3  5 <NA> green
7  7    3  4 <NA> green
8  8    5  3 <NA> green
> 
> # Make a copy the `color`
> # edge attribute as the
> # `color_2` edge attribute
> graph <-
+   graph %>%
+   copy_edge_attrs(
+     edge_attr_from = color,
+     edge_attr_to = color_2)
> 
> # Get the graph's internal
> # edf to show that the edge
> # attribute had been copied
> graph %>% get_edge_df()
  id from to  rel color color_2
1  1    1  3 <NA> green   green
2  2    2  1 <NA> green   green
3  3    2  5 <NA> green   green
4  4    2  3 <NA> green   green
5  5    3  2 <NA> green   green
6  6    3  5 <NA> green   green
7  7    3  4 <NA> green   green
8  8    5  3 <NA> green   green
> 
> 
> 
> 
> cleanEx()
> nameEx("copy_node_attrs")
> ### * copy_node_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: copy_node_attrs
> ### Title: Copy a node attribute column and set the name
> ### Aliases: copy_node_attrs
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 5,
+     m = 10,
+     set_seed = 23) %>%
+   set_node_attrs(
+     node_attr = shape,
+     values = "circle") %>%
+   set_node_attrs(
+     node_attr = value,
+     values = rnorm(
+       n = count_nodes(.),
+       mean = 5,
+       sd = 1) %>% round(1))
> 
> # Get the graph's internal
> # ndf to show which node
> # attributes are available
> graph %>% get_node_df()
  id type label  shape value
1  1 <NA>     1 circle   5.3
2  2 <NA>     2 circle   4.4
3  3 <NA>     3 circle   5.8
4  4 <NA>     4 circle   5.9
5  5 <NA>     5 circle   6.2
> 
> # Make a copy the `value`
> # node attribute as the
> # `width` node attribute
> graph <-
+   graph %>%
+   copy_node_attrs(
+     node_attr_from = value,
+     node_attr_to = size)
> 
> # Get the graph's internal
> # ndf to show that the node
> # attribute had been copied
> graph %>% get_node_df()
  id type label  shape value size
1  1 <NA>     1 circle   5.3  5.3
2  2 <NA>     2 circle   4.4  4.4
3  3 <NA>     3 circle   5.8  5.8
4  4 <NA>     4 circle   5.9  5.9
5  5 <NA>     5 circle   6.2  6.2
> 
> 
> 
> 
> cleanEx()
> nameEx("count_asymmetric_node_pairs")
> ### * count_asymmetric_node_pairs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count_asymmetric_node_pairs
> ### Title: Get the number of asymmetrically-connected node pairs
> ### Aliases: count_asymmetric_node_pairs
> 
> ### ** Examples
> 
> # Create a cycle graph
> graph <-
+   create_graph() %>%
+   add_cycle(n = 5)
> 
> # Get a count of asymmetrically-
> # connected node pairs
> graph %>%
+   count_asymmetric_node_pairs()
[1] 5
> 
> # Create a full graph and then
> # count the asymmetrically-
> # connected node pairs
> create_graph() %>%
+   add_full_graph(n = 10) %>%
+   count_asymmetric_node_pairs()
[1] 0
> 
> 
> 
> 
> cleanEx()
> nameEx("count_automorphisms")
> ### * count_automorphisms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count_automorphisms
> ### Title: Get the number of automorphisms
> ### Aliases: count_automorphisms
> 
> ### ** Examples
> 
> # Create a cycle graph
> graph <-
+   create_graph() %>%
+   add_cycle(n = 5)
> 
> # Get a count of automorphisms
> graph %>%
+   count_automorphisms()
[1] 10
> 
> # Create a full graph and then
> # count the automorphisms
> create_graph() %>%
+   add_full_graph(n = 10) %>%
+   count_automorphisms()
[1] 3628800
> 
> 
> 
> 
> cleanEx()
> nameEx("count_edges")
> ### * count_edges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count_edges
> ### Title: Get a count of all edges
> ### Aliases: count_edges
> 
> ### ** Examples
> 
> # Create a graph with a
> # path of nodes and 3
> # unconnected nodes
> graph <-
+   create_graph() %>%
+   add_path(n = 3) %>%
+   add_n_nodes(n = 3)
> 
> # Get a count of all edges
> # in the graph
> graph %>%
+   count_edges()
[1] 2
> 
> 
> 
> 
> cleanEx()
> nameEx("count_graphs_in_graph_series")
> ### * count_graphs_in_graph_series
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count_graphs_in_graph_series
> ### Title: Count graphs in a graph series object
> ### Aliases: count_graphs_in_graph_series
> 
> ### ** Examples
> 
> # Create three graphs
> graph_1 <-
+   create_graph() %>%
+   add_path(n = 4)
> 
> graph_2 <-
+   create_graph() %>%
+   add_cycle(n = 5)
> 
> graph_3 <-
+   create_graph() %>%
+   add_star(n = 6)
> 
> # Create an empty graph series
> # and add the graphs
> series <-
+   create_graph_series() %>%
+   add_graph_to_graph_series(
+     graph = graph_1) %>%
+   add_graph_to_graph_series(
+     graph = graph_2) %>%
+   add_graph_to_graph_series(
+     graph = graph_3)
> 
> # Count the number of graphs
> # in the graph series
> series %>%
+   count_graphs_in_graph_series()
[1] 3
> 
> 
> 
> 
> cleanEx()
> nameEx("count_loop_edges")
> ### * count_loop_edges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count_loop_edges
> ### Title: Get count of all loop edges
> ### Aliases: count_loop_edges
> 
> ### ** Examples
> 
> # Create an undirected, full graph
> # with 3 nodes and all possible
> # edges, including loop edges
> graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_full_graph(
+     n = 3,
+     keep_loops = TRUE)
> 
> # Get a count of all loop edges
> # in the graph
> graph %>% count_loop_edges()
[1] 3
> 
> 
> 
> 
> cleanEx()
> nameEx("count_mutual_node_pairs")
> ### * count_mutual_node_pairs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count_mutual_node_pairs
> ### Title: Get the number of mutually-connected node pairs
> ### Aliases: count_mutual_node_pairs
> 
> ### ** Examples
> 
> # Create a cycle graph
> graph <-
+   create_graph() %>%
+   add_cycle(n = 5)
> 
> # Get a count of mutually-connected
> # node pairs
> graph %>% count_mutual_node_pairs()
[1] 0
> 
> # Create a full graph and then
> # count the mutually-connected
> # node pairs
> create_graph() %>%
+   add_full_graph(n = 10) %>%
+   count_mutual_node_pairs()
[1] 45
> 
> 
> 
> 
> cleanEx()
> nameEx("count_nodes")
> ### * count_nodes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count_nodes
> ### Title: Get a count of all nodes
> ### Aliases: count_nodes
> 
> ### ** Examples
> 
> # Create a graph with a
> # path of nodes and 3
> # unconnected nodes
> graph <-
+   create_graph() %>%
+   add_path(n = 3) %>%
+   add_n_nodes(n = 3)
> 
> # Get a count of all nodes
> # in the graph
> graph %>%
+   count_nodes()
[1] 6
> 
> 
> 
> 
> cleanEx()
> nameEx("count_s_connected_cmpts")
> ### * count_s_connected_cmpts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count_s_connected_cmpts
> ### Title: Get the number of strongly-connected components
> ### Aliases: count_s_connected_cmpts
> 
> ### ** Examples
> 
> # Create a graph and add
> # several graph islands
> graph <-
+   create_graph() %>%
+   add_islands_graph(
+     n_islands = 4,
+     island_size = 10,
+     p = 1/5,
+     edges_between = 1,
+     set_seed = 23)
> 
> # Get a count of strongly-connected
> # components in the graph
> graph %>% count_s_connected_cmpts()
[1] 2
> 
> 
> 
> 
> cleanEx()
> nameEx("count_unconnected_node_pairs")
> ### * count_unconnected_node_pairs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count_unconnected_node_pairs
> ### Title: Get the number of unconnected node pairs
> ### Aliases: count_unconnected_node_pairs
> 
> ### ** Examples
> 
> # Create a cycle graph
> graph <-
+   create_graph() %>%
+   add_cycle(n = 5)
> 
> # Get a count of unconnected node
> # pairs in the graph
> graph %>%
+   count_unconnected_node_pairs()
[1] 5
> 
> # Create a full graph and then
> # count all unconnected node pairs
> create_graph() %>%
+   add_full_graph(n = 10) %>%
+   count_unconnected_node_pairs()
[1] 0
> 
> 
> 
> 
> cleanEx()
> nameEx("count_unconnected_nodes")
> ### * count_unconnected_nodes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count_unconnected_nodes
> ### Title: Get count of all unconnected nodes
> ### Aliases: count_unconnected_nodes
> 
> ### ** Examples
> 
> # Create a graph with a
> # path of nodes and 3
> # unconnected nodes
> graph <-
+   create_graph() %>%
+   add_path(n = 3) %>%
+   add_n_nodes(n = 3)
> 
> # Get a count of all nodes
> # in the graph
> graph %>% count_nodes()
[1] 6
> 
> # Get a count of all
> # unconnected nodes in the
> # graph
> graph %>%
+   count_unconnected_nodes()
[1] 3
> 
> 
> 
> 
> cleanEx()
> nameEx("count_w_connected_cmpts")
> ### * count_w_connected_cmpts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count_w_connected_cmpts
> ### Title: Get the number of weakly-connected components
> ### Aliases: count_w_connected_cmpts
> 
> ### ** Examples
> 
> # Create a cycle graph
> graph <-
+   create_graph() %>%
+   add_cycle(n = 5) %>%
+   add_cycle(n = 5)
> 
> # Get a count of weakly-connected
> # components in the graph
> graph %>% count_w_connected_cmpts()
[1] 2
> 
> 
> 
> 
> cleanEx()
> nameEx("create_edge_df")
> ### * create_edge_df
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_edge_df
> ### Title: Create an edge data frame
> ### Aliases: create_edge_df
> 
> ### ** Examples
> 
> # Create a simple edge data frame (edf) and
> # view the results
> edf <-
+   create_edge_df(
+     from = c(1, 2, 3),
+     to = c(4, 3, 1),
+     rel = "a")
> 
> # Display the edge data frame
> edf
  id from to rel
1  1    1  4   a
2  2    2  3   a
3  3    3  1   a
> 
> # Create an edf with additional edge
> # attributes (where their classes will
> # be inferred from the input vectors)
> edf <-
+   create_edge_df(
+     from = c(1, 2, 3),
+     to = c(4, 3, 1),
+     rel = "a",
+     length = c(50, 100, 250),
+     color = "green",
+     width = c(1, 5, 2))
> 
> # Display the edge data frame
> edf
  id from to rel length color width
1  1    1  4   a     50 green     1
2  2    2  3   a    100 green     5
3  3    3  1   a    250 green     2
> 
> 
> 
> 
> cleanEx()
> nameEx("create_graph")
> ### * create_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_graph
> ### Title: Create a graph object
> ### Aliases: create_graph
> 
> ### ** Examples
> 
> # With `create_graph()` we can
> # simply create an empty graph (and
> # add in nodes and edges later
> # with other functions)
> graph <- create_graph()
> 
> # A graph can be created with
> # nodes and without having any edges;
> # this can be done in 2 steps:
> # 1. create a node data frame (ndf)
> #    using `create_node_df()`
> ndf <-
+   create_node_df(n = 4)
> 
> # 2. create a new graph object with
> #    `create_graph()` and then pass
> #    in the ndf to `nodes_df`
> graph <-
+   create_graph(
+     nodes_df = ndf)
> 
> # Get information on the graph's nodes
> graph %>%
+   get_node_info()
  id type label deg indeg outdeg loops
1  1 <NA>  <NA>   0     0      0     0
2  2 <NA>  <NA>   0     0      0     0
3  3 <NA>  <NA>   0     0      0     0
4  4 <NA>  <NA>   0     0      0     0
> 
> # You can create a similar graph with
> # just nodes but also providing a
> # range of attributes for the nodes
> # (e.g., types, labels, or arbitrary
> # 'values')
> ndf <-
+   create_node_df(
+     n = 4,
+     label = TRUE,
+     type = c("type_1", "type_1",
+              "type_5", "type_2"),
+     shape = c("circle", "circle",
+               "rectangle", "rectangle"),
+     values = c(3.5, 2.6, 9.4, 2.7))
> 
> graph <-
+   create_graph(nodes_df = ndf)
> 
> # Get information on the graph's
> # internal node data frame (ndf)
> graph %>%
+   get_node_df()
  id   type label     shape values
1  1 type_1     1    circle    3.5
2  2 type_1     2    circle    2.6
3  3 type_5     3 rectangle    9.4
4  4 type_2     4 rectangle    2.7
> 
> # A graph can also be created by
> # specifying both the nodes and
> # edges; create an edge data frame
> # (edf) using the `create_edge_df()`
> # function:
> edf <-
+   create_edge_df(
+     from = c(1, 2, 3),
+     to = c(4, 3, 1),
+     rel = "leading_to",
+     values = c(7.3, 2.6, 8.3))
> 
> # Create the graph object with
> # `create_graph()` and pass in the
> # ndf and edf objects
> graph <-
+   create_graph(
+     nodes_df = ndf,
+     edges_df = edf)
> 
> # Get information on the graph's
> # internal edge data frame (edf)
> graph %>% get_edge_df()
  id from to        rel values
1  1    1  4 leading_to    7.3
2  2    2  3 leading_to    2.6
3  3    3  1 leading_to    8.3
> 
> # Get information on the graph's
> # internal node data frame (ndf)
> graph %>% get_node_df()
  id   type label     shape values
1  1 type_1     1    circle    3.5
2  2 type_1     2    circle    2.6
3  3 type_5     3 rectangle    9.4
4  4 type_2     4 rectangle    2.7
> 
> 
> 
> 
> cleanEx()
> nameEx("create_graph_series")
> ### * create_graph_series
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_graph_series
> ### Title: Create a graph series object
> ### Aliases: create_graph_series
> 
> ### ** Examples
> 
> # Create three graphs
> graph_1 <-
+   create_graph() %>%
+   add_path(n = 4)
> 
> graph_2 <-
+   create_graph() %>%
+   add_cycle(n = 5)
> 
> graph_3 <-
+   create_graph() %>%
+   add_star(n = 6)
> 
> # Create an empty graph series
> # and add the graphs
> series <-
+   create_graph_series() %>%
+   add_graph_to_graph_series(
+     graph = graph_1) %>%
+   add_graph_to_graph_series(
+     graph = graph_2) %>%
+   add_graph_to_graph_series(
+     graph = graph_3)
> 
> # Count the number of graphs
> # in the graph series
> series %>%
+   count_graphs_in_graph_series()
[1] 3
> 
> 
> 
> 
> cleanEx()
> nameEx("create_node_df")
> ### * create_node_df
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_node_df
> ### Title: Create a node data frame
> ### Aliases: create_node_df
> 
> ### ** Examples
> 
> # Create a node data frame (ndf) where the labels
> # are equivalent to the node ID values (this is not
> # recommended); the `label` and `type` node
> # attributes will always be a `character` class
> # whereas `id` will always be an `integer`
> node_df <-
+   create_node_df(
+     n = 4,
+     type = c("a", "a", "b", "b"),
+     label = TRUE)
> 
> # Display the node data frame
> node_df
  id type label
1  1    a     1
2  2    a     2
3  3    b     3
4  4    b     4
> 
> # Create an ndf with distinct labels and
> # additional node attributes (where their classes
> # will be inferred from the input vectors)
> node_df <-
+   create_node_df(
+     n = 4,
+     type = "a",
+     label = c(2384, 3942, 8362, 2194),
+     style = "filled",
+     color = "aqua",
+     shape = c("circle", "circle",
+               "rectangle", "rectangle"),
+     value = c(3.5, 2.6, 9.4, 2.7))
> 
> # Display the node data frame
> node_df
  id type label  style color     shape value
1  1    a  2384 filled  aqua    circle   3.5
2  2    a  3942 filled  aqua    circle   2.6
3  3    a  8362 filled  aqua rectangle   9.4
4  4    a  2194 filled  aqua rectangle   2.7
> 
> 
> 
> 
> cleanEx()
> nameEx("delete_cache")
> ### * delete_cache
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: delete_cache
> ### Title: Delete vectors cached in a graph object
> ### Aliases: delete_cache
> 
> ### ** Examples
> 
> # Create an empty graph
> graph <-
+   create_graph()
> 
> # Cache 3 different vectors inside
> # the graph object
> graph <-
+   graph %>%
+   set_cache(
+     name = "a",
+     to_cache = 1:4) %>%
+   set_cache(
+     name = "b",
+     to_cache = 5:9) %>%
+   set_cache(
+     name = "c",
+     to_cache = 10:14)
> 
> # Delete cache `b`
> graph <-
+   graph %>%
+   delete_cache(name = "b")
> 
> # Delete remaining cached vectors
> graph <-
+   graph %>%
+   delete_cache()
> 
> 
> 
> 
> cleanEx()
> nameEx("delete_edge")
> ### * delete_edge
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: delete_edge
> ### Title: Delete an edge from an existing graph object
> ### Aliases: delete_edge
> 
> ### ** Examples
> 
> # Create a graph with 2 nodes
> graph <-
+   create_graph() %>%
+   add_n_nodes(n = 2)
> 
> # Add an edge
> graph <-
+   graph %>%
+   add_edge(
+     from = 1,
+     to = 2)
> 
> # Delete the edge
> graph <-
+   graph %>%
+   delete_edge(
+     from = 1,
+     to = 2)
> 
> # Get the count of edges in the graph
> graph %>% count_edges()
[1] 0
> 
> # Create an undirected graph with
> # 2 nodes and an edge
> graph_undirected <-
+   create_graph(directed = FALSE) %>%
+   add_n_nodes(n = 2) %>%
+   add_edge(
+     from = 1,
+     to = 2)
> 
> # Delete the edge; the order of node ID
> # values provided in `from` and `to`
> # don't matter for the undirected case
> graph_undirected %>%
+   delete_edge(
+     from = 2,
+     to = 1) %>%
+   count_edges()
[1] 0
> 
> # The undirected graph has a single
> # edge with ID `1`; it can be
> # deleted by specifying `id`
> graph_undirected %>%
+   delete_edge(id = 1) %>%
+   count_edges()
[1] 0
> 
> # Create a directed graph with 2
> # labeled nodes and an edge
> graph_labeled_nodes <-
+   create_graph() %>%
+   add_n_nodes(
+     n = 2,
+     label = c("one", "two")) %>%
+   add_edge(
+     from = "one",
+     to = "two")
> 
> # Delete the edge using the node
> # labels in `from` and `to`; this
> # is analogous to creating the
> # edge using node labels
> graph_labeled_nodes %>%
+   delete_edge(
+     from = "one",
+     to = "two") %>%
+   count_edges()
[1] 0
> 
> 
> 
> 
> cleanEx()
> nameEx("delete_edges_ws")
> ### * delete_edges_ws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: delete_edges_ws
> ### Title: Delete all selected edges in an edge selection
> ### Aliases: delete_edges_ws
> 
> ### ** Examples
> 
> # Create a graph
> graph <-
+   create_graph() %>%
+   add_n_nodes(n = 3) %>%
+   add_edges_w_string(
+     edges = "1->3 1->2 2->3")
> 
> # Select edges attached to
> # node with ID `3` (these are
> # `1`->`3` and `2`->`3`)
> graph <-
+   graph %>%
+   select_edges_by_node_id(nodes = 3)
> 
> # Delete edges in selection
> graph <-
+   graph %>%
+   delete_edges_ws()
> 
> # Get a count of edges in the graph
> graph %>% count_edges()
[1] 1
> 
> 
> 
> 
> cleanEx()
> nameEx("delete_global_graph_attrs")
> ### * delete_global_graph_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: delete_global_graph_attrs
> ### Title: Delete one of the global graph attributes stored within a graph
> ###   object
> ### Aliases: delete_global_graph_attrs
> 
> ### ** Examples
> 
> # Create a new graph and add
> # some extra global graph attrs
> graph <-
+   create_graph() %>%
+   add_global_graph_attrs(
+     attr = "overlap",
+     value = "true",
+     attr_type = "graph") %>%
+   add_global_graph_attrs(
+     attr = "penwidth",
+     value = 3,
+     attr_type = "node") %>%
+   add_global_graph_attrs(
+     attr = "penwidth",
+     value = 3,
+     attr_type = "edge")
> 
> # Inspect the graph's global
> # attributes
> graph %>%
+   get_global_graph_attr_info()
# A tibble: 20 × 3
   attr        value      attr_type
   <chr>       <chr>      <chr>    
 1 layout      neato      graph    
 2 outputorder edgesfirst graph    
 3 bgcolor     white      graph    
 4 fontname    Helvetica  node     
 5 fontsize    10         node     
 6 shape       circle     node     
 7 fixedsize   true       node     
 8 width       0.5        node     
 9 style       filled     node     
10 fillcolor   aliceblue  node     
11 color       gray70     node     
12 fontcolor   gray50     node     
13 fontname    Helvetica  edge     
14 fontsize    8          edge     
15 len         1.5        edge     
16 color       gray80     edge     
17 arrowsize   0.5        edge     
18 overlap     true       graph    
19 penwidth    3          node     
20 penwidth    3          edge     
> 
> # Delete the `penwidth` attribute
> # for the graph's nodes using the
> # `delete_global_graph_attrs()` fcn
> graph <-
+   graph %>%
+   delete_global_graph_attrs(
+     attr = "penwidth",
+     attr_type = "node")
> 
> # View the remaining set of global
> # attributes for the graph
> graph %>%
+   get_global_graph_attr_info()
# A tibble: 19 × 3
   attr        value      attr_type
   <chr>       <chr>      <chr>    
 1 layout      neato      graph    
 2 outputorder edgesfirst graph    
 3 bgcolor     white      graph    
 4 fontname    Helvetica  node     
 5 fontsize    10         node     
 6 shape       circle     node     
 7 fixedsize   true       node     
 8 width       0.5        node     
 9 style       filled     node     
10 fillcolor   aliceblue  node     
11 color       gray70     node     
12 fontcolor   gray50     node     
13 fontname    Helvetica  edge     
14 fontsize    8          edge     
15 len         1.5        edge     
16 color       gray80     edge     
17 arrowsize   0.5        edge     
18 overlap     true       graph    
19 penwidth    3          edge     
> 
> 
> 
> 
> cleanEx()
> nameEx("delete_graph_actions")
> ### * delete_graph_actions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: delete_graph_actions
> ### Title: Delete one or more graph actions stored within a graph object
> ### Aliases: delete_graph_actions
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 5,
+     m = 8,
+     set_seed = 23)
> 
> # Add three graph actions to the
> # graph
> graph <-
+   graph %>%
+   add_graph_action(
+     fcn = "set_node_attr_w_fcn",
+     node_attr_fcn = "get_pagerank",
+     column_name = "pagerank",
+     action_name = "get_pagerank") %>%
+   add_graph_action(
+     fcn = "rescale_node_attrs",
+     node_attr_from = "pagerank",
+     node_attr_to = "width",
+     action_name = "pagerank_to_width") %>%
+   add_graph_action(
+     fcn = "colorize_node_attrs",
+     node_attr_from = "width",
+     node_attr_to = "fillcolor",
+     action_name = "pagerank_fillcolor")
> 
> # View the graph actions for the graph
> # object by using the `get_graph_actions()`
> # function
> graph %>% get_graph_actions()
# A tibble: 3 × 3
  action_index action_name        expression                                    
         <int> <chr>              <chr>                                         
1            1 get_pagerank       set_node_attr_w_fcn(graph = graph, node_attr_…
2            2 pagerank_to_width  rescale_node_attrs(graph = graph, node_attr_f…
3            3 pagerank_fillcolor colorize_node_attrs(graph = graph, node_attr_…
> 
> # Delete the second and third graph
> # actions using `delete_graph_actions()`
> graph <-
+   graph %>%
+   delete_graph_actions(
+     actions = c(2, 3))
> 
> # Verify that these last two graph
> # actions were deleted by again using
> # the `get_graph_actions()` function
> graph %>% get_graph_actions()
# A tibble: 1 × 3
  action_index action_name  expression                                          
         <int> <chr>        <chr>                                               
1            1 get_pagerank set_node_attr_w_fcn(graph = graph, node_attr_fcn = …
> 
> 
> 
> 
> cleanEx()
> nameEx("delete_loop_edges_ws")
> ### * delete_loop_edges_ws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: delete_loop_edges_ws
> ### Title: Delete all loop edges associated with a selection of nodes
> ### Aliases: delete_loop_edges_ws
> 
> ### ** Examples
> 
> # Create an undirected, full graph
> # of 5 nodes with loops retained
> graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_full_graph(
+     n = 5,
+     keep_loops = TRUE)
> 
> # Select nodes `3` and `4`
> # and remove the loop edges
> # associated with those nodes
> graph <-
+   graph %>%
+   select_nodes_by_id(
+     nodes = 3:4) %>%
+   delete_loop_edges_ws()
> 
> # Count the number of loop
> # edges remaining in the graph
> graph %>% count_loop_edges()
[1] 3
> 
> 
> 
> 
> cleanEx()
> nameEx("delete_node")
> ### * delete_node
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: delete_node
> ### Title: Delete a node from an existing graph object
> ### Aliases: delete_node
> 
> ### ** Examples
> 
> # Create a graph with 5 nodes and
> # edges between each in a path
> graph <-
+   create_graph() %>%
+   add_path(n = 5)
> 
> # Delete node with ID `3`
> graph <- delete_node(graph, node = 3)
> 
> # Verify that the node with ID `3`
> # is no longer in the graph
> graph %>% get_node_ids()
[1] 1 2 4 5
> 
> # Also note that edges are removed
> # since there were edges between the
> # removed node to and from other nodes
> graph %>% get_edges()
[1] "1->2" "4->5"
> 
> 
> 
> cleanEx()
> nameEx("delete_nodes_ws")
> ### * delete_nodes_ws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: delete_nodes_ws
> ### Title: Delete all nodes in a node selection
> ### Aliases: delete_nodes_ws
> 
> ### ** Examples
> 
> # Create a graph with 3 nodes
> graph <-
+   create_graph() %>%
+   add_n_nodes(n = 3) %>%
+   add_edges_w_string(
+     edges = "1->3 1->2 2->3")
> 
> # Select node with ID `1`
> graph <-
+   graph %>%
+   select_nodes_by_id(nodes = 1)
> 
> # Delete node in selection (this
> # also deletes any attached edges)
> graph <-
+   graph %>%
+   delete_nodes_ws()
> 
> # Get a count of nodes in the graph
> graph %>% count_nodes()
[1] 2
> 
> 
> 
> 
> cleanEx()
> nameEx("deselect_edges")
> ### * deselect_edges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: deselect_edges
> ### Title: Deselect any selected edges in a graph
> ### Aliases: deselect_edges
> 
> ### ** Examples
> 
> # Create a graph with
> # a single path
> graph <-
+   create_graph() %>%
+   add_path(n = 5)
> 
> # Select edges with IDs `1`
> # and `3`
> graph <-
+   graph %>%
+   select_edges_by_edge_id(
+     edges = c(1, 3))
> 
> # Verify that an edge selection
> # has been made
> graph %>% get_selection()
[1] 1 3
> 
> # Deselect edge `1`
> graph <-
+   graph %>%
+   select_edges_by_edge_id(
+     edges = c(1, 3)) %>%
+   deselect_edges(edges = 1)
> 
> # Verify that the edge selection
> # has been made for edges `1` and
> # `3` and that edge `1` has been
> # deselected (leaving only `3`)
> graph %>% get_selection()
[1] 3
> 
> 
> 
> 
> cleanEx()
> nameEx("deselect_nodes")
> ### * deselect_nodes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: deselect_nodes
> ### Title: Deselect any selected nodes in a graph
> ### Aliases: deselect_nodes
> 
> ### ** Examples
> 
> # Create a node data frame (ndf)
> ndf <-
+   create_node_df(
+     n = 4,
+     type = c("a", "a", "z", "z"),
+     label = TRUE,
+     value = c(3.5, 2.6, 9.4, 2.7))
> 
> # Create an edge data frame (edf)
> edf <-
+   create_edge_df(
+     from = c(1, 2, 3),
+     to = c(4, 3, 1),
+     rel = c("a", "z", "a"))
> 
> # Create a graph with the ndf and edf
> graph <-
+   create_graph(
+     nodes_df = ndf,
+     edges_df = edf)
> 
> # Explicitly select nodes `1` and `3`
> graph <-
+   graph %>%
+   select_nodes(nodes = c(1, 3)) %>%
+   deselect_nodes(nodes = 1)
> 
> # Verify that the node selection
> # has been made for nodes `1` and
> # `3` and that node `1` has been
> # deselected (leaving only `3`)
> graph %>% get_selection()
[1] 3
> 
> 
> 
> 
> cleanEx()
> nameEx("display_metagraph")
> ### * display_metagraph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: display_metagraph
> ### Title: Display a property graph's underlying model
> ### Aliases: display_metagraph
> 
> ### ** Examples
> 
> # Create a randomized property
> # graph with 1000 nodes and 1350 edges
> property_graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 1000,
+     m = 1350,
+     set_seed = 23) %>%
+   select_nodes_by_degree(
+     expressions = "deg >= 3") %>%
+   set_node_attrs_ws(
+     node_attr = type,
+     value = "a") %>%
+   clear_selection() %>%
+   select_nodes_by_degree(
+     expressions = "deg < 3") %>%
+   set_node_attrs_ws(
+     node_attr = type,
+     value = "b") %>%
+   clear_selection() %>%
+   select_nodes_by_degree(
+     expressions = "deg == 0") %>%
+   set_node_attrs_ws(
+     node_attr = type,
+     value = "c") %>%
+   set_node_attr_to_display(
+     attr = type) %>%
+   select_edges_by_node_id(
+     nodes =
+       get_node_ids(.) %>%
+       sample(
+         size = 0.15 * length(.) %>%
+           floor())) %>%
+   set_edge_attrs_ws(
+     edge_attr = rel,
+     value = "r_1") %>%
+   invert_selection() %>%
+   set_edge_attrs_ws(
+     edge_attr = rel,
+     value = "r_2") %>%
+   clear_selection() %>%
+   copy_edge_attrs(
+     edge_attr_from = rel,
+     edge_attr_to = label) %>%
+   add_global_graph_attrs(
+     attr = "fontname",
+     value = "Helvetica",
+     attr_type = "edge") %>%
+   add_global_graph_attrs(
+     attr = "fontcolor",
+     value = "gray50",
+     attr_type = "edge") %>%
+   add_global_graph_attrs(
+     attr = "fontsize",
+     value = 10,
+     attr_type = "edge")
> 
> # Display this graph's
> # metagraph, or, the underlying
> # graph model for a property graph
> # display_metagraph(property_graph)
> 
> 
> 
> 
> cleanEx()
> nameEx("do_bfs")
> ### * do_bfs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_bfs
> ### Title: Use the breadth-first search (bfs) algorithm
> ### Aliases: do_bfs
> 
> ### ** Examples
> 
> # Create a graph containing
> # two balanced trees
> graph <-
+   create_graph() %>%
+   add_balanced_tree(
+     k = 2, h = 2) %>%
+   add_balanced_tree(
+     k = 3, h = 2)
> 
> # Perform a breadth-first
> # search of the graph,
> # beginning at the root node
> # `1` (the default
> # `direction = "all"` doesn't
> # take edge direction into
> # account)
> graph %>%
+   do_bfs(node = 1)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
> 
> # If not specifying a
> # starting node, the function
> # will begin the search from
> # a random node
> graph %>%
+   do_bfs()
 [1]  9  8 12 13 14 10 11 15 16 17 18 19 20  1  2  3  4  5  6  7
> 
> # It's also possible to
> # perform bfs while taking
> # into account edge direction;
> # using `direction = "in"`
> # causes the bfs routine to
> # visit nodes along inward edges
> graph %>%
+   do_bfs(
+     node = 1,
+     direction = "in")
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
> 
> # Using `direction = "out"`
> # results in the bfs moving
> # along solely outward edges
> graph %>%
+   do_bfs(
+     node = 1,
+     direction = "out")
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
> 
> 
> 
> 
> cleanEx()
> nameEx("do_dfs")
> ### * do_dfs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do_dfs
> ### Title: Use the depth-first search (dfs) algorithm
> ### Aliases: do_dfs
> 
> ### ** Examples
> 
> # Create a graph containing
> # two balanced trees
> graph <-
+   create_graph() %>%
+   add_balanced_tree(
+     k = 2, h = 2) %>%
+   add_balanced_tree(
+   k = 3, h = 2)
> 
> # Perform a depth-first
> # search of the graph,
> # beginning at the root
> # node `1` (the default
> # `direction = "all"`
> # doesn't take edge
> # direction into account)
> graph %>%
+   do_dfs(node = 1)
 [1]  1  2  4  5  3  6  7  8  9 12 13 14 10 15 16 17 11 18 19 20
> 
> # If not specifying a
> # starting node, the function
> # will begin the search
> # from a random node
> graph %>%
+   do_dfs()
 [1]  9  8 10 15 16 17 11 18 19 20 12 13 14  1  2  4  5  3  6  7
> 
> # It's also possible to
> # perform dfs while taking
> # into account edge direction;
> # using `direction = "in"`
> # causes the dfs routine to
> # visit nodes along inward edges
> graph %>%
+   do_dfs(
+     node = 1,
+     direction = "in")
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
> 
> # Using `direction = "out"`
> # results in the dfs moving
> # along solely outward edges
> graph %>%
+   do_dfs(
+     node = 1,
+     direction = "out")
 [1]  1  2  4  5  3  6  7  8  9 12 13 14 10 15 16 17 11 18 19 20
> 
> 
> 
> 
> cleanEx()
> nameEx("drop_edge_attrs")
> ### * drop_edge_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drop_edge_attrs
> ### Title: Drop an edge attribute column
> ### Aliases: drop_edge_attrs
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 5,
+     m = 6,
+     set_seed = 23) %>%
+   set_edge_attrs(
+     edge_attr = value,
+     values = 3) %>%
+   mutate_edge_attrs(
+     penwidth = value * 2)
> 
> # Get the graph's internal
> # edf to show which edge
> # attributes are available
> graph %>% get_edge_df()
  id from to  rel value penwidth
1  1    1  4 <NA>     3        6
2  2    2  3 <NA>     3        6
3  3    2  4 <NA>     3        6
4  4    3  1 <NA>     3        6
5  5    4  1 <NA>     3        6
6  6    5  4 <NA>     3        6
> 
> # Drop the `value` edge
> # attribute
> graph <-
+   graph %>%
+   drop_edge_attrs(
+     edge_attr = value)
> 
> # Get the graph's internal
> # edf to show that the edge
> # attribute `value` had been
> # removed
> graph %>% get_edge_df()
  id from to  rel penwidth
1  1    1  4 <NA>        6
2  2    2  3 <NA>        6
3  3    2  4 <NA>        6
4  4    3  1 <NA>        6
5  5    4  1 <NA>        6
6  6    5  4 <NA>        6
> 
> 
> 
> 
> cleanEx()
> nameEx("drop_node_attrs")
> ### * drop_node_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drop_node_attrs
> ### Title: Drop a node attribute column
> ### Aliases: drop_node_attrs
> 
> ### ** Examples
> 
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 5,
+     m = 10,
+     set_seed = 23) %>%
+  set_node_attrs(
+     node_attr = value,
+     values = rnorm(
+       n = count_nodes(.),
+       mean = 5,
+       sd = 1) %>% round(1))
> 
> # Get the graph's internal
> # ndf to show which node
> # attributes are available
> graph %>% get_node_df()
  id type label value
1  1 <NA>     1   5.3
2  2 <NA>     2   4.4
3  3 <NA>     3   5.8
4  4 <NA>     4   5.9
5  5 <NA>     5   6.2
> 
> # Drop the `value` node
> # attribute
> graph <-
+   graph %>%
+   drop_node_attrs(
+     node_attr = value)
> 
> # Get the graph's internal
> # ndf to show that the node
> # attribute `value` had been
> # removed
> graph %>% get_node_df()
  id type label
1  1 <NA>     1
2  2 <NA>     2
3  3 <NA>     3
4  4 <NA>     4
5  5 <NA>     5
> 
> 
> 
> 
> cleanEx()
> nameEx("edge_aes")
> ### * edge_aes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: edge_aes
> ### Title: Insert edge aesthetic attributes during edge creation
> ### Aliases: edge_aes
> 
> ### ** Examples
> 
> # Create a new graph and add
> # a path with several edge
> # aesthetic attributes
> graph <-
+   create_graph() %>%
+   add_path(
+     n = 3,
+     type = "path",
+     edge_aes = edge_aes(
+       style = "dot",
+       color = c("red", "blue")))
> 
> # View the graph's internal
> # node data frame; the node
> # aesthetic attributes have
> # been inserted
> graph %>%
+   get_edge_df()
  id from to  rel style color
1  1    1  2 <NA>   dot   red
2  2    2  3 <NA>   dot  blue
> 
> 
> 
> 
> cleanEx()
> nameEx("edge_data")
> ### * edge_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: edge_data
> ### Title: Insert edge data attributes during edge creation
> ### Aliases: edge_data
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Create a new graph and add
> ##D # a path with several edge
> ##D # data attributes
> ##D graph <-
> ##D   create_graph() %>%
> ##D   add_path(
> ##D     n = 3,
> ##D     type = "path",
> ##D     edge_data = edge_data(
> ##D       hour = 5,
> ##D       index = c(1, 2)))
> ##D 
> ##D # View the graph's internal
> ##D # edge data frame; the edge
> ##D # data attributes have
> ##D # been inserted
> ##D graph %>% get_edge_df()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("export_csv")
> ### * export_csv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: export_csv
> ### Title: Export a graph to CSV files
> ### Aliases: export_csv
> 
> ### ** Examples
> 
> # Create a node data frame (ndf)
> ndf <-
+   create_node_df(
+     n = 4,
+     type = c("a", "a", "z", "z"),
+     label = TRUE,
+     value = c(3.5, 2.6, 9.4, 2.7)
+   )
> 
> # Create an edge data frame (edf)
> edf <-
+   create_edge_df(
+     from = c(1, 2, 3),
+     to = c(4, 3, 1),
+     rel = c("rel_a", "rel_z", "rel_a")
+   )
> 
> # Create a graph with the ndf and edf
> graph <-
+   create_graph(
+     nodes_df = ndf,
+     edges_df = edf
+   )
> 
> # Create separate `nodes.csv` and
> # `edges.csv` files
> # graph %>% export_csv()
> 
> 
> 
> 
> cleanEx()
> nameEx("export_graph")
> ### * export_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: export_graph
> ### Title: Export a graph to various image formats
> ### Aliases: export_graph
> 
> ### ** Examples
> 
> # Create a simple graph
> graph <-
+   create_graph() %>%
+     add_path(
+       n = 5,
+       edge_aes = edge_aes(
+         arrowhead = c(
+           "normal", "vee",
+           "tee", "dot"
+         ),
+         color = c(
+         "red", "blue",
+         "orange", "purple"
+         )
+       )
+     )
> 
> # Create a PDF file for
> # the graph (`graph.pdf`)
> # graph %>%
> #   export_graph(
> #     file_name = "graph.pdf",
> #     title = "Simple Graph"
> #   )
> 
> # Create a PNG file for
> # the graph (`mypng.png`)
> # graph %>%
> #   export_graph(
> #     file_name = "mypng.png",
> #     file_type = "PNG"
> #   )
> 
> 
> 
> 
> cleanEx()
> nameEx("filter_graph_series")
> ### * filter_graph_series
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filter_graph_series
> ### Title: Subset a graph series object
> ### Aliases: filter_graph_series
> 
> ### ** Examples
> 
> # Create three graphs
> graph_time_1 <-
+   create_graph(
+     graph_name = "graph_with_time_1") %>%
+   set_graph_time(
+     time = "2015-03-25 03:00",
+     tz = "GMT")
> 
> graph_time_2 <-
+   create_graph(
+     graph_name = "graph_with_time_2") %>%
+   set_graph_time(
+     time = "2015-03-26 03:00",
+     tz = "GMT")
> 
> graph_time_3 <-
+   create_graph(
+     graph_name = "graph_with_time_3") %>%
+   set_graph_time(
+     time = "2015-03-27 15:00",
+     tz = "GMT")
> 
> # Create an empty graph series and add
> # the graphs
> series_temporal <-
+   create_graph_series(
+     series_type = "temporal") %>%
+   add_graph_to_graph_series(
+     graph = graph_time_1) %>%
+   add_graph_to_graph_series(
+     graph = graph_time_2) %>%
+   add_graph_to_graph_series(
+     graph = graph_time_3)
> 
> # Subset graph series by sequence
> series_sequence_subset <-
+   filter_graph_series(
+     graph_series = series_temporal,
+     by = "number",
+     values = 2)
> 
> # Get a count of graphs in
> # the series
> series_sequence_subset %>%
+   count_graphs_in_graph_series()
[1] 1
> 
> # Subset graph series by date-time
> series_time_subset <-
+   filter_graph_series(
+     graph_series = series_temporal,
+     by = "time",
+     values = c("2015-03-25 12:00",
+                "2015-03-26 12:00"),
+     tz = "GMT")
> 
> # Get a count of graphs in
> # the series
> series_time_subset %>%
+   count_graphs_in_graph_series()
[1] 2
> 
> 
> 
> 
> cleanEx()
> nameEx("from_adj_matrix")
> ### * from_adj_matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: from_adj_matrix
> ### Title: Create a graph using an adjacency matrix
> ### Aliases: from_adj_matrix
> 
> ### ** Examples
> 
> # Create an adjacency matrix
> adj_matrix <-
+   sample(
+     0:1, 100,
+     replace = TRUE,
+     prob = c(0.9,0.1)
+   ) %>%
+   matrix(ncol = 10)
> 
> # Create a graph from the adjacency matrix
> graph <- from_adj_matrix(adj_matrix)
> 
> 
> 
> 
> cleanEx()
> nameEx("from_igraph")
> ### * from_igraph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: from_igraph
> ### Title: Convert an igraph graph to a DiagrammeR one
> ### Aliases: from_igraph
> 
> ### ** Examples
> 
> # Create a DiagrammeR graph object
> dgr_graph_orig <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 36,
+     m = 50,
+     set_seed = 23)
> 
> # Convert the DiagrammeR
> # graph to an igraph object
> ig_graph <-
+   dgr_graph_orig %>%
+   to_igraph()
> 
> # Convert the igraph graph
> # back to a DiagrammeR graph
> dgr_graph_new <-
+   ig_graph %>%
+   from_igraph()
> 
> # Get some graph information
> (dgr_graph_new %>%
+   get_graph_info())[, 1:6]
            name  n  e   dens mn_deg mx_deg
1 graph_CixgM7NI 36 50 0.0571      1      7
> 
> 
> 
> 
> cleanEx()
> nameEx("fully_connect_nodes_ws")
> ### * fully_connect_nodes_ws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fully_connect_nodes_ws
> ### Title: Fully connect all nodes in a selection of nodes
> ### Aliases: fully_connect_nodes_ws
> 
> ### ** Examples
> 
> # Create an empty graph and
> # then add a path of 3 nodes
> # and two isolated nodes
> graph <-
+   create_graph() %>%
+   add_path(n = 3) %>%
+   add_n_nodes(n = 2)
> 
> # Select a node in the path
> # of nodes (node `3`) and
> # the two isolated nodes (`4`
> # and `5`); then, and fully
> # connect these nodes together
> graph <-
+   graph %>%
+   select_nodes_by_id(
+     nodes = 3:5) %>%
+   fully_connect_nodes_ws()
> 
> # Get the graph's edge data frame
> graph %>% get_edge_df()
  id from to  rel
1  1    1  2 <NA>
2  2    2  3 <NA>
3  3    3  4 <NA>
4  4    3  5 <NA>
5  5    4  5 <NA>
6  6    4  3 <NA>
7  7    5  3 <NA>
8  8    5  4 <NA>
> 
> # Create an undirected, empty
> # graph; add a path of 3 nodes
> # and two isolated nodes
> graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_path(n = 3) %>%
+   add_n_nodes(n = 2)
> 
> # Select a node in the path
> # of nodes (node `3`) and
> # the two isolated nodes (`4`
> # and `5`); then, and fully
> # connect these nodes together
> graph <-
+   graph %>%
+   select_nodes_by_id(
+     nodes = 3:5) %>%
+   fully_connect_nodes_ws()
> 
> # Get the graph's edge data
> # frame; in the undirected
> # case, reverse edges aren't
> # added
> graph %>% get_edge_df()
  id from to  rel
1  1    1  2 <NA>
2  2    2  3 <NA>
3  3    3  4 <NA>
4  4    3  5 <NA>
5  5    4  5 <NA>
> 
> 
> 
> 
> cleanEx()
> nameEx("fully_disconnect_nodes_ws")
> ### * fully_disconnect_nodes_ws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fully_disconnect_nodes_ws
> ### Title: Fully disconnect all nodes in a selection of nodes
> ### Aliases: fully_disconnect_nodes_ws
> 
> ### ** Examples
> 
> # Create an empty graph and
> # add a path of 6 nodes
> graph <-
+   create_graph() %>%
+   add_path(n = 6)
> 
> # Select nodes `3` and `4`
> # and fully disconnect them
> # from the graph
> graph <-
+   graph %>%
+   select_nodes_by_id(
+     nodes = 3:4) %>%
+   fully_disconnect_nodes_ws()
> 
> # Get the graph's edge data frame
> graph %>% get_edge_df()
  id from to  rel
1  1    1  2 <NA>
2  5    5  6 <NA>
> 
> 
> 
> 
> cleanEx()
> nameEx("get_adhesion")
> ### * get_adhesion
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_adhesion
> ### Title: Get graph adhesion
> ### Aliases: get_adhesion
> 
> ### ** Examples
> 
> # Create a cycle graph
> graph <-
+   create_graph() %>%
+   add_cycle(n = 5)
> 
> # Determine the graph's adhesion
> graph %>% get_adhesion()
[1] 1
> 
> # Create a full graph and then
> # get the adhesion for that
> create_graph() %>%
+   add_full_graph(n = 8) %>%
+   get_adhesion()
[1] 7
> 
> 
> 
> 
> cleanEx()
> nameEx("get_agg_degree_in")
> ### * get_agg_degree_in
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_agg_degree_in
> ### Title: Get an aggregate value from the indegree of nodes
> ### Aliases: get_agg_degree_in
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 20,
+     m = 35,
+     set_seed = 23) %>%
+   set_node_attrs(
+     node_attr = value,
+     values = rnorm(
+       n = count_nodes(.),
+       mean = 5,
+       sd = 1) %>% round(1))
> 
> # Get the mean indegree value
> # from all nodes in the graph
> graph %>%
+   get_agg_degree_in(
+     agg = "mean")
[1] 1.75
> 
> # Other aggregation functions
> # can be used (`min`, `max`,
> # `median`, `sum`); let's get
> # the median in this example
> graph %>%
+   get_agg_degree_in(
+     agg = "median")
[1] 1.5
> 
> # The aggregation of indegree
> # can occur for a subset of the
> # graph nodes and this is made
> # possible by specifying
> # `conditions` for the nodes
> graph %>%
+   get_agg_degree_in(
+     agg = "mean",
+     conditions = value > 5.0)
[1] 1.5
> 
> 
> 
> 
> cleanEx()
> nameEx("get_agg_degree_out")
> ### * get_agg_degree_out
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_agg_degree_out
> ### Title: Get an aggregate value from the outdegree of nodes
> ### Aliases: get_agg_degree_out
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 20,
+     m = 35,
+     set_seed = 23) %>%
+   set_node_attrs(
+     node_attr = value,
+     values = rnorm(
+       n = count_nodes(.),
+       mean = 5,
+       sd = 1) %>% round(1))
> 
> # Get the mean outdegree value from all
> # nodes in the graph
> graph %>%
+   get_agg_degree_out(
+     agg = "mean")
[1] 1.75
> 
> # Other aggregation functions can be used
> # (`min`, `max`, `median`, `sum`); let's
> # get the median in this example
> graph %>%
+   get_agg_degree_out(
+     agg = "median")
[1] 1
> 
> # The aggregation of outdegree can occur
> # for a subset of the graph nodes and this
> # is made possible by specifying `conditions`
> # for the nodes
> graph %>%
+   get_agg_degree_out(
+     agg = "mean",
+     conditions = value < 5.0)
[1] 2.555556
> 
> 
> 
> 
> cleanEx()
> nameEx("get_agg_degree_total")
> ### * get_agg_degree_total
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_agg_degree_total
> ### Title: Get an aggregate value from the total degree of nodes
> ### Aliases: get_agg_degree_total
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 20,
+     m = 35,
+     set_seed = 23) %>%
+   set_node_attrs(
+     node_attr = value,
+     values = rnorm(
+       n = count_nodes(.),
+       mean = 5,
+       sd = 1) %>% round(1))
> 
> # Get the mean total degree
> # value from all nodes in
> # the graph
> graph %>%
+   get_agg_degree_total(
+     agg = "mean")
[1] 3.5
> 
> # Other aggregation functions
> # can be used (`min`, `max`,
> # `median`, `sum`); let's get
> # the median in this example
> graph %>%
+   get_agg_degree_total(
+     agg = "median")
[1] 3
> 
> # The aggregation of total
> # degree can occur for a
> # subset of the graph nodes
> # and this is made possible
> # by specifying `conditions`
> # for the nodes
> graph %>%
+   get_agg_degree_total(
+     agg = "mean",
+     conditions = value < 5.0)
[1] 4.666667
> 
> 
> 
> 
> cleanEx()
> nameEx("get_all_connected_nodes")
> ### * get_all_connected_nodes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_all_connected_nodes
> ### Title: Get all nodes connected to a specified node
> ### Aliases: get_all_connected_nodes
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function; it
> # has an unconnected node (`6`)
> graph_1 <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 20,
+     m = 32,
+     set_seed = 23)
> 
> # There won't be any connected
> # nodes to `6` so when specifying
> # this node with `get_all_connected_nodes()`
> # we get NA back
> graph_1 %>%
+   get_all_connected_nodes(
+     node = 6)
[1] NA
> 
> # Any other node in `graph_1` will
> # provide a vector of all the nodes
> # other than `6`
> graph_1 %>%
+   get_all_connected_nodes(
+     node = 1)
 [1]  2  3  4  5  7  8  9 10 11 12 13 14 15 16 17 18 19 20
> 
> # The following graph has two
> # clusters of nodes (i.e., the
> # graph has two connected components)
> graph_2 <-
+   create_graph() %>%
+   add_path(n = 6) %>%
+   add_path(n = 4)
> 
> # In `graph_2`, node `1` is in
> # the larger of the two
> # connected components
> graph_2 %>%
+   get_all_connected_nodes(
+     node = 1)
[1] 2 3 4 5 6
> 
> # Also in `graph_2`, node `8`
> # is in the smaller of the two
> # connected components
> graph_2 %>%
+   get_all_connected_nodes(
+     node = 8)
[1]  7  9 10
> 
> 
> 
> 
> cleanEx()
> nameEx("get_alpha_centrality")
> ### * get_alpha_centrality
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_alpha_centrality
> ### Title: Get the alpha centrality for all nodes
> ### Aliases: get_alpha_centrality
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 10,
+     m = 12,
+     set_seed = 23)
> 
> # Get the alpha centrality scores
> # for all nodes
> graph %>%
+   get_alpha_centrality()
   id alpha_centrality
1   1                9
2   2                6
3   3                2
4   4                1
5   5                4
6   6                1
7   7                2
8   8                2
9   9                7
10 10                4
> 
> # Add the alpha centrality
> # scores to the graph as a node
> # attribute
> graph <-
+   graph %>%
+   join_node_attrs(
+     df = get_alpha_centrality(.))
> 
> # Display the graph's node
> # data frame
> graph %>% get_node_df()
   id type label alpha_centrality
1   1 <NA>     1                9
2   2 <NA>     2                6
3   3 <NA>     3                2
4   4 <NA>     4                1
5   5 <NA>     5                4
6   6 <NA>     6                1
7   7 <NA>     7                2
8   8 <NA>     8                2
9   9 <NA>     9                7
10 10 <NA>    10                4
> 
> 
> 
> 
> cleanEx()
> nameEx("get_articulation_points")
> ### * get_articulation_points
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_articulation_points
> ### Title: Get articulation points
> ### Aliases: get_articulation_points
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 10,
+     m = 12,
+     set_seed = 23) %>%
+   set_node_attrs(
+     node_attr = shape,
+     values = "square")
> 
> # Get the articulation points
> # in the graph (i.e., those
> # nodes that if any were to be
> # removed, the graph would
> # become disconnected)
> graph %>%
+   get_articulation_points()
[1] 2 4
> 
> # For the articulation points,
> # change the node shape to
> # a `circle`
> graph <-
+   graph %>%
+   select_nodes_by_id(
+     nodes = get_articulation_points(.)) %>%
+   set_node_attrs_ws(
+     node_attr = shape,
+     value = "circle")
> 
> 
> 
> 
> cleanEx()
> nameEx("get_authority_centrality")
> ### * get_authority_centrality
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_authority_centrality
> ### Title: Get the authority scores for all nodes
> ### Aliases: get_authority_centrality
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 10,
+     m = 15,
+     set_seed = 23)
> 
> # Get the authority centrality scores
> # for all nodes in the graph
> graph %>%
+   get_authority_centrality()
   id authority_centrality
1   1            0.6950912
2   2            0.6176471
3   3            0.0000000
4   4            0.0000000
5   5            0.3674279
6   6            0.3157923
7   7            0.4982552
8   8            1.0000000
9   9            0.1824629
10 10            0.6176471
> 
> # Add the authority centrality
> # scores to the graph as a node
> # attribute
> graph <-
+   graph %>%
+   join_node_attrs(
+     df = get_authority_centrality(.))
> 
> # Display the graph's node data frame
> graph %>% get_node_df()
   id type label authority_centrality
1   1 <NA>     1            0.6950912
2   2 <NA>     2            0.6176471
3   3 <NA>     3            0.0000000
4   4 <NA>     4            0.0000000
5   5 <NA>     5            0.3674279
6   6 <NA>     6            0.3157923
7   7 <NA>     7            0.4982552
8   8 <NA>     8            1.0000000
9   9 <NA>     9            0.1824629
10 10 <NA>    10            0.6176471
> 
> 
> 
> 
> cleanEx()
> nameEx("get_betweenness")
> ### * get_betweenness
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_betweenness
> ### Title: Get betweenness centrality scores
> ### Aliases: get_betweenness
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 10,
+     m = 12,
+     set_seed = 23)
> 
> # Get the betweenness scores
> # for nodes in the graph
> graph %>% get_betweenness()
   id betweenness
1   1           0
2   2           7
3   3           0
4   4           0
5   5           5
6   6           0
7   7           0
8   8           1
9   9           0
10 10           0
> 
> # Add the betweenness
> # values to the graph
> # as a node attribute
> graph <-
+   graph %>%
+   join_node_attrs(
+     df = get_betweenness(.))
> 
> # Display the graph's node
> # data frame
> graph %>% get_node_df()
   id type label betweenness
1   1 <NA>     1           0
2   2 <NA>     2           7
3   3 <NA>     3           0
4   4 <NA>     4           0
5   5 <NA>     5           5
6   6 <NA>     6           0
7   7 <NA>     7           0
8   8 <NA>     8           1
9   9 <NA>     9           0
10 10 <NA>    10           0
> 
> 
> 
> 
> cleanEx()
> nameEx("get_cache")
> ### * get_cache
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_cache
> ### Title: Get a cached vector from a graph object
> ### Aliases: get_cache
> 
> ### ** Examples
> 
> # Set a seed
> suppressWarnings(RNGversion("3.5.0"))
> set.seed(23)
> 
> # Create a graph with 5 nodes and 5 edges
> graph <-
+   create_graph() %>%
+   add_n_nodes(n = 5) %>%
+   set_node_attrs(
+     node_attr = value,
+     values = rnorm(
+       n = count_nodes(.),
+       mean = 8,
+       sd = 2)) %>%
+   add_edges_w_string(
+     edges = "1->2 1->3 2->4 2->5 3->2")
> 
> # Cache all values from the node attribute `value`
> # as a numeric vector
> graph <-
+   graph %>%
+   set_cache(
+     name = "value",
+     to_cache = get_node_attrs(
+       graph = .,
+       node_attr = value))
> 
> # Return the cached vector
> graph %>% get_cache()
        1         2         3         4         5 
 9.993210 10.214981  7.443827 10.038411  8.090874 
> 
> 
> 
> 
> cleanEx()
> nameEx("get_closeness")
> ### * get_closeness
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_closeness
> ### Title: Get closeness centrality values
> ### Aliases: get_closeness
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 10,
+     m = 12,
+     set_seed = 23)
> 
> # Get closeness values for all nodes
> # in the graph
> graph %>% get_closeness()
   id  closeness
1   1 0.05263158
2   2 0.06250000
3   3 0.05555556
4   4 0.06666667
5   5 0.06666667
6   6 0.04166667
7   7 0.04347826
8   8 0.05555556
9   9 0.04166667
10 10 0.04545455
> 
> # Add the closeness values to
> # the graph as a node attribute
> graph <-
+   graph %>%
+   join_node_attrs(
+     df = get_closeness(.))
> 
> # Display the graph's node data frame
> graph %>% get_node_df()
   id type label  closeness
1   1 <NA>     1 0.05263158
2   2 <NA>     2 0.06250000
3   3 <NA>     3 0.05555556
4   4 <NA>     4 0.06666667
5   5 <NA>     5 0.06666667
6   6 <NA>     6 0.04166667
7   7 <NA>     7 0.04347826
8   8 <NA>     8 0.05555556
9   9 <NA>     9 0.04166667
10 10 <NA>    10 0.04545455
> 
> 
> 
> 
> cleanEx()
> nameEx("get_closeness_vitality")
> ### * get_closeness_vitality
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_closeness_vitality
> ### Title: Get closeness vitality
> ### Aliases: get_closeness_vitality
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 10,
+     m = 12,
+     set_seed = 23)
> 
> # Get closeness vitality values
> # for all nodes in the graph
> graph %>% get_closeness_vitality()
   id closeness_vitality
1   1                 32
2   2                118
3   3                 36
4   4                 60
5   5                  0
6   6                 48
7   7                 46
8   8                 30
9   9                 48
10 10                 44
> 
> # Add the closeness vitality
> # values to the graph as a
> # node attribute
> graph <-
+   graph %>%
+   join_node_attrs(
+     df = get_closeness_vitality(.))
> 
> # Display the graph's
> # node data frame
> graph %>% get_node_df()
   id type label closeness_vitality
1   1 <NA>     1                 32
2   2 <NA>     2                118
3   3 <NA>     3                 36
4   4 <NA>     4                 60
5   5 <NA>     5                  0
6   6 <NA>     6                 48
7   7 <NA>     7                 46
8   8 <NA>     8                 30
9   9 <NA>     9                 48
10 10 <NA>    10                 44
> 
> 
> 
> 
> cleanEx()
> nameEx("get_cmty_edge_btwns")
> ### * get_cmty_edge_btwns
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_cmty_edge_btwns
> ### Title: Get community membership by edge betweenness
> ### Aliases: get_cmty_edge_btwns
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_gnm_graph(
+     n = 10,
+     m = 15,
+     set_seed = 23)
> 
> # Get the group membership
> # values for all nodes in the
> # graph through calculation of
> # the leading non-negative
> # eigenvector of the modularity
> # matrix of the graph
> graph %>%
+   get_cmty_edge_btwns()
   id edge_btwns_group
1   1                1
2   2                2
3   3                2
4   4                3
5   5                2
6   6                2
7   7                1
8   8                3
9   9                3
10 10                4
> 
> # Add the group membership
> # values to the graph
> # as a node attribute
> graph <-
+   graph %>%
+   join_node_attrs(
+      df = get_cmty_edge_btwns(.))
> 
> # Display the graph's
> # node data frame
> graph %>% get_node_df()
   id type label edge_btwns_group
1   1 <NA>     1                1
2   2 <NA>     2                2
3   3 <NA>     3                2
4   4 <NA>     4                3
5   5 <NA>     5                2
6   6 <NA>     6                2
7   7 <NA>     7                1
8   8 <NA>     8                3
9   9 <NA>     9                3
10 10 <NA>    10                4
> 
> 
> 
> 
> cleanEx()
> nameEx("get_cmty_fast_greedy")
> ### * get_cmty_fast_greedy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_cmty_fast_greedy
> ### Title: Get community membership by modularity optimization
> ### Aliases: get_cmty_fast_greedy
> 
> ### ** Examples
> 
> # Create a graph with a
> # balanced tree
> graph <-
+   create_graph() %>%
+   add_balanced_tree(
+     k = 2,
+     h = 2)
> 
> # Get the group membership
> # values for all nodes in
> # the graph through the greedy
> # optimization of modularity
> # algorithm
> graph %>%
+   get_cmty_fast_greedy()
  id f_g_group
1  1         1
2  2         2
3  3         1
4  4         2
5  5         2
6  6         1
7  7         1
> 
> # Add the group membership
> # values to the graph as a
> # node attribute
> graph <-
+   graph %>%
+   join_node_attrs(
+     df = get_cmty_fast_greedy(.))
> 
> # Display the graph's
> # node data frame
> graph %>% get_node_df()
  id type label f_g_group
1  1 <NA>     1         1
2  2 <NA>     2         2
3  3 <NA>     3         1
4  4 <NA>     4         2
5  5 <NA>     5         2
6  6 <NA>     6         1
7  7 <NA>     7         1
> 
> 
> 
> 
> cleanEx()
> nameEx("get_cmty_l_eigenvec")
> ### * get_cmty_l_eigenvec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_cmty_l_eigenvec
> ### Title: Get community membership by leading eigenvector
> ### Aliases: get_cmty_l_eigenvec
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_gnm_graph(
+     n = 10,
+     m = 15,
+     set_seed = 23)
> 
> # Get the group membership
> # values for all nodes in the
> # graph through calculation of
> # the leading non-negative
> # eigenvector of the modularity
> # matrix of the graph
> graph %>%
+   get_cmty_l_eigenvec()
   id l_eigenvec_group
1   1                1
2   2                3
3   3                3
4   4                1
5   5                3
6   6                3
7   7                1
8   8                1
9   9                1
10 10                2
> 
> # Add the group membership
> # values to the graph as a node
> # attribute
> graph <-
+   graph %>%
+   join_node_attrs(
+     df = get_cmty_l_eigenvec(.))
> 
> # Display the graph's node data frame
> graph %>% get_node_df()
   id type label l_eigenvec_group
1   1 <NA>     1                1
2   2 <NA>     2                3
3   3 <NA>     3                3
4   4 <NA>     4                1
5   5 <NA>     5                3
6   6 <NA>     6                3
7   7 <NA>     7                1
8   8 <NA>     8                1
9   9 <NA>     9                1
10 10 <NA>    10                2
> 
> 
> 
> 
> cleanEx()
> nameEx("get_cmty_louvain")
> ### * get_cmty_louvain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_cmty_louvain
> ### Title: Get community membership by Louvain optimization
> ### Aliases: get_cmty_louvain
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_gnm_graph(
+     n = 10,
+     m = 15,
+     set_seed = 23)
> 
> # Get the group membership values
> # for all nodes in the graph
> # through the multi-level
> # optimization of modularity
> # algorithm
> graph %>%
+   get_cmty_louvain()
   id louvain_group
1   1             1
2   2             2
3   3             2
4   4             3
5   5             2
6   6             2
7   7             1
8   8             3
9   9             3
10 10             4
> 
> # Add the group membership
> # values to the graph as a
> # node attribute
> graph <-
+   graph %>%
+   join_node_attrs(
+     df = get_cmty_louvain(.))
> 
> # Display the graph's
> # node data frame
> graph %>% get_node_df()
   id type label louvain_group
1   1 <NA>     1             1
2   2 <NA>     2             2
3   3 <NA>     3             2
4   4 <NA>     4             3
5   5 <NA>     5             2
6   6 <NA>     6             2
7   7 <NA>     7             1
8   8 <NA>     8             3
9   9 <NA>     9             3
10 10 <NA>    10             4
> 
> 
> 
> 
> cleanEx()
> nameEx("get_cmty_walktrap")
> ### * get_cmty_walktrap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_cmty_walktrap
> ### Title: Get community membership using the Walktrap method
> ### Aliases: get_cmty_walktrap
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_gnm_graph(
+     n = 10,
+     m = 15,
+     set_seed = 23)
> 
> # Get the group membership
> # values for all nodes in the
> # graph through the Walktrap
> # community finding algorithm
> graph %>%
+   get_cmty_walktrap()
   id walktrap_group
1   1              3
2   2              2
3   3              2
4   4              1
5   5              2
6   6              2
7   7              3
8   8              1
9   9              1
10 10              4
> 
> # Add the group membership
> # values to the graph as a
> # node attribute
> graph <-
+   graph %>%
+   join_node_attrs(
+     df = get_cmty_walktrap(.))
> 
> # Display the graph's
> # node data frame
> graph %>% get_node_df()
   id type label walktrap_group
1   1 <NA>     1              3
2   2 <NA>     2              2
3   3 <NA>     3              2
4   4 <NA>     4              1
5   5 <NA>     5              2
6   6 <NA>     6              2
7   7 <NA>     7              3
8   8 <NA>     8              1
9   9 <NA>     9              1
10 10 <NA>    10              4
> 
> 
> 
> 
> cleanEx()
> nameEx("get_common_nbrs")
> ### * get_common_nbrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_common_nbrs
> ### Title: Get all common neighbors between two or more nodes
> ### Aliases: get_common_nbrs
> 
> ### ** Examples
> 
> # Create a directed graph with 5 nodes
> graph <-
+   create_graph() %>%
+   add_path(n = 5)
> 
> # Find all common neighbor nodes
> # for nodes `1` and `2` (there are no
> # common neighbors amongst them)
> graph %>%
+   get_common_nbrs(
+     nodes = c(1, 2))
[1] NA
> 
> # Find all common neighbor nodes for
> # nodes `1` and `3`
> graph %>%
+   get_common_nbrs(
+     nodes = c(1, 3))
[1] 2
> 
> 
> 
> 
> cleanEx()
> nameEx("get_coreness")
> ### * get_coreness
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_coreness
> ### Title: Get coreness values for graph nodes
> ### Aliases: get_coreness
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_gnm_graph(
+     n = 10,
+     m = 15,
+     set_seed = 23)
> 
> # Get coreness values for
> # all nodes in the graph
> graph %>% get_coreness()
   id coreness
1   1        3
2   2        3
3   3        2
4   4        3
5   5        3
6   6        3
7   7        3
8   8        2
9   9        2
10 10        0
> 
> # Add the coreness values
> # to the graph as a node
> # attribute
> graph <-
+   graph %>%
+   join_node_attrs(
+     df = get_coreness(.))
> 
> # Display the graph's node data frame
> graph %>% get_node_df()
   id type label coreness
1   1 <NA>     1        3
2   2 <NA>     2        3
3   3 <NA>     3        2
4   4 <NA>     4        3
5   5 <NA>     5        3
6   6 <NA>     6        3
7   7 <NA>     7        3
8   8 <NA>     8        2
9   9 <NA>     9        2
10 10 <NA>    10        0
> 
> 
> 
> 
> cleanEx()
> nameEx("get_degree_distribution")
> ### * get_degree_distribution
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_degree_distribution
> ### Title: Get total degree distribution data for a graph
> ### Aliases: get_degree_distribution
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_gnm_graph(
+     n = 10,
+     m = 15,
+     set_seed = 23)
> 
> # Get the total degree
> # distribution for the graph
> graph %>%
+   get_degree_distribution(
+     mode = "total")
  degree total_degree_dist
1      0               0.1
2      1               0.0
3      2               0.2
4      3               0.4
5      4               0.1
6      5               0.2
> 
> 
> 
> 
> cleanEx()
> nameEx("get_degree_histogram")
> ### * get_degree_histogram
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_degree_histogram
> ### Title: Get histogram data for a graph's degree frequency
> ### Aliases: get_degree_histogram
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_gnm_graph(
+     n = 10,
+     m = 15,
+     set_seed = 23)
> 
> # Get degree histogram data for
> # the graph (reporting total degree)
> graph %>%
+   get_degree_histogram(
+     mode = "total")
  degree total_degree_hist
1      0                 1
2      1                 0
3      2                 2
4      3                 4
5      4                 1
6      5                 2
> 
> 
> 
> 
> cleanEx()
> nameEx("get_degree_in")
> ### * get_degree_in
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_degree_in
> ### Title: Get indegree values for all nodes
> ### Aliases: get_degree_in
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_gnm_graph(
+     n = 10,
+     m = 15,
+     set_seed = 23)
> 
> # Get the indegree values for
> # all nodes in the graph
> graph %>%
+   get_degree_in()
   id indegree
1   1        3
2   2        3
3   3        2
4   4        5
5   5        4
6   6        5
7   7        3
8   8        2
9   9        3
10 10        0
> 
> # Add the indegree values
> # to the graph as a node
> # attribute
> graph <-
+   graph %>%
+   join_node_attrs(
+     df = get_degree_in(.))
> 
> # Display the graph's
> # node data frame
> graph %>% get_node_df()
   id type label indegree
1   1 <NA>     1        3
2   2 <NA>     2        3
3   3 <NA>     3        2
4   4 <NA>     4        5
5   5 <NA>     5        4
6   6 <NA>     6        5
7   7 <NA>     7        3
8   8 <NA>     8        2
9   9 <NA>     9        3
10 10 <NA>    10        0
> 
> 
> 
> 
> cleanEx()
> nameEx("get_degree_out")
> ### * get_degree_out
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_degree_out
> ### Title: Get outdegree values for all nodes
> ### Aliases: get_degree_out
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_gnm_graph(
+     n = 10,
+     m = 15,
+     set_seed = 23)
> 
> # Get the outdegree values
> # for all nodes in the graph
> graph %>%
+   get_degree_out()
   id outdegree
1   1         3
2   2         3
3   3         2
4   4         5
5   5         4
6   6         5
7   7         3
8   8         2
9   9         3
10 10         0
> 
> # Add the outdegree values
> # to the graph as a node
> # attribute
> graph <-
+   graph %>%
+   join_node_attrs(
+     df = get_degree_out(.))
> 
> # Display the graph's
> # node data frame
> graph %>% get_node_df()
   id type label outdegree
1   1 <NA>     1         3
2   2 <NA>     2         3
3   3 <NA>     3         2
4   4 <NA>     4         5
5   5 <NA>     5         4
6   6 <NA>     6         5
7   7 <NA>     7         3
8   8 <NA>     8         2
9   9 <NA>     9         3
10 10 <NA>    10         0
> 
> 
> 
> 
> cleanEx()
> nameEx("get_degree_total")
> ### * get_degree_total
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_degree_total
> ### Title: Get total degree values for all nodes
> ### Aliases: get_degree_total
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_gnm_graph(
+     n = 10,
+     m = 15,
+     set_seed = 23)
> 
> # Get the total degree values
> # for all nodes in the graph
> graph %>%
+   get_degree_total()
   id total_degree
1   1            3
2   2            3
3   3            2
4   4            5
5   5            4
6   6            5
7   7            3
8   8            2
9   9            3
10 10            0
> 
> # Add the total degree values
> # to the graph as a node
> # attribute
> graph <-
+   graph %>%
+   join_node_attrs(
+     df = get_degree_total(.))
> 
> # Display the graph's
> # node data frame
> graph %>% get_node_df()
   id type label total_degree
1   1 <NA>     1            3
2   2 <NA>     2            3
3   3 <NA>     3            2
4   4 <NA>     4            5
5   5 <NA>     5            4
6   6 <NA>     6            5
7   7 <NA>     7            3
8   8 <NA>     8            2
9   9 <NA>     9            3
10 10 <NA>    10            0
> 
> 
> 
> 
> cleanEx()
> nameEx("get_dice_similarity")
> ### * get_dice_similarity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_dice_similarity
> ### Title: Get Dice similarity coefficient scores
> ### Aliases: get_dice_similarity
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_gnm_graph(
+     n = 10,
+     m = 15,
+     set_seed = 23)
> 
> # Get the Dice similarity
> # values for nodes `5`, `6`,
> # and `7`
> graph %>%
+   get_dice_similarity(
+     nodes = 5:7)
      5     6     7
5 1.000 0.444 0.571
6 0.444 1.000 0.500
7 0.571 0.500 1.000
> 
> 
> 
> 
> cleanEx()
> nameEx("get_eccentricity")
> ### * get_eccentricity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_eccentricity
> ### Title: Get node eccentricities
> ### Aliases: get_eccentricity
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_gnm_graph(
+     n = 10,
+     m = 15,
+     set_seed = 23)
> 
> # Get the eccentricity values for
> # all nodes in the graph
> graph %>% get_eccentricity()
   id eccentricity
1   1            2
2   2            3
3   3            3
4   4            2
5   5            3
6   6            2
7   7            3
8   8            3
9   9            2
10 10            0
> 
> 
> 
> 
> cleanEx()
> nameEx("get_edge_attrs")
> ### * get_edge_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_edge_attrs
> ### Title: Get edge attribute values
> ### Aliases: get_edge_attrs
> 
> ### ** Examples
> 
> # Create a simple graph where
> # edges have an edge attribute
> # named `value`
> graph <-
+   create_graph() %>%
+   add_n_nodes(n = 4) %>%
+   {
+     edges <-
+       create_edge_df(
+         from = c(1, 2, 1, 4),
+           to = c(2, 3, 4, 3),
+          rel = "rel")
+     add_edge_df(
+       graph = .,
+       edge_df = edges)
+   } %>%
+   set_edge_attrs(
+     edge_attr = value,
+     values = 1.6,
+     from = 1,
+       to = 2) %>%
+   set_edge_attrs(
+     edge_attr = value,
+     values = 4.3,
+     from = 1,
+       to = 4) %>%
+   set_edge_attrs(
+     edge_attr = value,
+     values = 2.9,
+     from = 2,
+       to = 3) %>%
+   set_edge_attrs(
+     edge_attr = value,
+     values = 8.4,
+     from = 4,
+       to = 3)
> 
> # Get the values for the
> # `value` edge attribute
> graph %>%
+   get_edge_attrs(
+     edge_attr = value)
1->2 2->3 1->4 4->3 
 1.6  2.9  4.3  8.4 
> 
> # To only return edge attribute
> # values for specified edges, use
> # the `from` and `to` arguments
> graph %>%
+   get_edge_attrs(
+     edge_attr = value,
+     from = c(1, 2),
+       to = c(2, 3))
1->2 2->3 
 1.6  2.9 
> 
> 
> 
> 
> cleanEx()
> nameEx("get_edge_attrs_ws")
> ### * get_edge_attrs_ws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_edge_attrs_ws
> ### Title: Get edge attribute values from a selection of edges
> ### Aliases: get_edge_attrs_ws
> 
> ### ** Examples
> 
> # Create a simple graph where
> # edges have an edge attribute
> # named `value`
> graph <-
+   create_graph() %>%
+   add_n_nodes(n = 4) %>%
+   {
+     edges <-
+       create_edge_df(
+         from = c(1, 2, 1, 4),
+           to = c(2, 3, 4, 3),
+          rel = "rel")
+     add_edge_df(
+       graph = .,
+       edge_df = edges)
+   } %>%
+   set_edge_attrs(
+     edge_attr = value,
+     values = 1.6,
+     from = 1,
+       to = 2) %>%
+   set_edge_attrs(
+     edge_attr = value,
+     values = 4.3,
+     from = 1,
+       to = 4) %>%
+   set_edge_attrs(
+     edge_attr = value,
+     values = 2.9,
+     from = 2,
+       to = 3) %>%
+   set_edge_attrs(
+     edge_attr = value,
+     values = 8.4,
+     from = 4,
+       to = 3)
> 
> # Select the edges defined as
> # `1`->`3` and `2`->`3`
> graph <-
+   graph %>%
+   select_edges(
+     from = c(1, 2),
+     to = c(2, 3))
> 
> # Get the edge attribute values
> # for the `value` attribute, limited
> # to the current edge selection
> graph %>%
+   get_edge_attrs_ws(
+     edge_attr = value)
1->2 2->3 
 1.6  2.9 
> 
> 
> 
> 
> cleanEx()
> nameEx("get_edge_count_w_multiedge")
> ### * get_edge_count_w_multiedge
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_edge_count_w_multiedge
> ### Title: Get count of edge definitions where multiple edges occur
> ### Aliases: get_edge_count_w_multiedge
> 
> ### ** Examples
> 
> # Create a node data frame (ndf)
> ndf <-
+   create_node_df(
+     n = 5,
+     label = TRUE)
> 
> # Create an edge data frame (edf)
> edf <-
+   create_edge_df(
+     from = c(1, 4, 4, 3, 5, 1, 3, 4),
+       to = c(4, 1, 1, 2, 2, 2, 2, 1))
> 
> # Create a graph with the ndf and edf
> graph <-
+   create_graph(
+     nodes_df = ndf,
+     edges_df = edf)
> 
> # Get the total number of edge
> # definitions (e.g., `4` -> `1`) where
> # there are multiple edges (i.e.,
> # distinct edges with separate edge
> # ID values)
> graph %>% get_edge_count_w_multiedge()
[1] 2
> 
> 
> 
> 
> cleanEx()
> nameEx("get_edge_df")
> ### * get_edge_df
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_edge_df
> ### Title: Get an edge data frame from a graph
> ### Aliases: get_edge_df
> 
> ### ** Examples
> 
> # Create a graph
> graph <-
+   create_graph() %>%
+   add_n_nodes(
+     n = 1,
+     type = "a") %>%
+   select_last_nodes_created() %>%
+   add_n_nodes_ws(
+     n = 5,
+     direction = "from",
+     type = "b") %>%
+   select_edges_by_node_id(
+     nodes = 3:5) %>%
+   set_edge_attrs_ws(
+     edge_attr = color,
+     value = "green") %>%
+   set_edge_attrs_ws(
+     edge_attr = rel,
+     value = "a") %>%
+   invert_selection %>%
+   set_edge_attrs_ws(
+     edge_attr = color,
+     value = "blue") %>%
+   set_edge_attrs_ws(
+     edge_attr = rel,
+     value = "b") %>%
+   clear_selection()
> 
> # Get the graph's internal
> # edge data frame (edf)
> graph %>% get_edge_df()
  id from to rel color
1  1    1  2   b  blue
2  2    1  3   a green
3  3    1  4   a green
4  4    1  5   a green
5  5    1  6   b  blue
> 
> 
> 
> 
> cleanEx()
> nameEx("get_edge_df_ws")
> ### * get_edge_df_ws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_edge_df_ws
> ### Title: Get the graph's edf filtered by a selection of edges
> ### Aliases: get_edge_df_ws
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 4,
+     m = 4,
+     set_seed = 23) %>%
+   set_edge_attrs(
+     edge_attr = value,
+     values = c(2.5, 8.2, 4.2, 2.4))
> 
> # Select edges with ID values
> # `1` and `3`
> graph <-
+   graph %>%
+   select_edges_by_edge_id(
+     edges = c(1, 3))
> 
> # Get the edge data frame that's
> # limited to the rows that correspond
> # to the edge selection
> graph %>% get_edge_df_ws()
  id from to  rel value
1  1    2  1 <NA>   2.5
2  3    3  2 <NA>   4.2
> 
> 
> 
> 
> cleanEx()
> nameEx("get_edge_ids")
> ### * get_edge_ids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_edge_ids
> ### Title: Get a vector of edge ID values
> ### Aliases: get_edge_ids
> 
> ### ** Examples
> 
> # Create a node data frame (ndf)
> ndf <-
+   create_node_df(
+     n = 4,
+     type = "letter",
+     color = c("red", "green", "grey", "blue"),
+     value = c(3.5, 2.6, 9.4, 2.7))
> 
> # Create an edge data frame (edf)
> edf <-
+   create_edge_df(
+     from = c(1, 2, 3),
+     to = c(4, 3, 1),
+     rel = "leading_to",
+     color = c("pink", "blue", "blue"),
+     value = c(3.9, 2.5, 7.3))
> 
> # Create a graph
> graph <-
+   create_graph(
+     nodes_df = ndf,
+     edges_df = edf)
> 
> # Get a vector of all edges in a graph
> graph %>% get_edge_ids()
[1] 1 2 3
> 
> # Get a vector of edge ID values using a
> # numeric comparison (i.e., all edges with
> # `value` attribute greater than 3)
> get_edge_ids(
+   graph,
+   conditions = value > 3)
[1] 1 3
> 
> # Get a vector of edge ID values using
> # a match pattern (i.e., all edges with
> # `color` attribute of `pink`)
> get_edge_ids(
+   graph,
+   conditions = color == "pink")
[1] 1
> 
> # Use multiple conditions to return edges
> # with the desired attribute values
> get_edge_ids(
+   graph,
+   conditions =
+     color == "blue" &
+     value > 5)
[1] 3
> 
> 
> 
> 
> cleanEx()
> nameEx("get_edge_info")
> ### * get_edge_info
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_edge_info
> ### Title: Get detailed information on edges
> ### Aliases: get_edge_info
> 
> ### ** Examples
> 
> # Create a simple graph
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 5, m = 10,
+     set_seed = 23)
> 
> # Get information on the
> # graph's edges
> graph %>% get_edge_info()
   id from to  rel
1   1    1  3 <NA>
2   2    2  1 <NA>
3   3    2  5 <NA>
4   4    2  3 <NA>
5   5    3  1 <NA>
6   6    3  2 <NA>
7   7    3  5 <NA>
8   8    3  4 <NA>
9   9    4  1 <NA>
10 10    5  4 <NA>
> 
> 
> 
> 
> cleanEx()
> nameEx("get_edges")
> ### * get_edges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_edges
> ### Title: Get node IDs associated with edges
> ### Aliases: get_edges
> 
> ### ** Examples
> 
> # Create a node data frame (ndf)
> ndf <-
+   create_node_df(
+     n = 4,
+     label = c("one", "two", "three", "four"),
+     type = "letter",
+     color = c("red", "green", "grey", "blue"),
+     value = c(3.5, 2.6, 9.4, 2.7))
> 
> # Create an edge data frame (edf)
> edf <-
+   create_edge_df(
+     from = c(1, 2, 3),
+     to = c(4, 3, 1),
+     rel = "leading_to",
+     color = c("pink", "blue", "blue"),
+     value = c(3.9, 2.5, 7.3))
> 
> # Create a graph
> graph <-
+   create_graph(
+     nodes_df = ndf,
+     edges_df = edf)
> 
> # Get all edges within a graph, returned as a list
> graph %>%
+   get_edges(
+     return_type = "vector")
[1] "1->4" "2->3" "3->1"
> 
> # Get all edges within a graph, returned as a
> # data frame
> graph %>%
+   get_edges(
+     return_type = "df")
  from to
1    1  4
2    2  3
3    3  1
> 
> # Get all edges returned as a list
> graph %>%
+   get_edges(
+     return_type = "list")
[[1]]
[1] 1 2 3

[[2]]
[1] 4 3 1

> 
> # Get a vector of edges using
> # a numeric comparison (i.e.,
> # all edges with a `value`
> # attribute greater than 3)
> graph %>%
+   get_edges(
+     conditions = value > 3,
+     return_type = "vector")
[1] "1->4" "3->1"
> 
> # Get a vector of edges using
> # a matching condition
> graph %>%
+   get_edges(
+     conditions = color == "pink",
+     return_type = "vector")
[1] "1->4"
> 
> # Use multiple conditions to
> # return edges with the
> # desired attribute values
> graph %>%
+   get_edges(
+     conditions =
+       color == "blue" &
+       value > 3,
+     return_type = "vector")
[1] "3->1"
> 
> # Use `return_values = "label"`
> # to return the labels of the
> # connected nodes
> graph %>%
+   get_edges(
+     conditions =
+       color == "blue" &
+       value > 3,
+     return_type = "vector",
+     return_values = "label")
[1] "three->one"
> 
> 
> 
> 
> cleanEx()
> nameEx("get_eigen_centrality")
> ### * get_eigen_centrality
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_eigen_centrality
> ### Title: Get the eigen centrality for all nodes
> ### Aliases: get_eigen_centrality
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_gnm_graph(
+     n = 10, m = 15,
+     set_seed = 23)
> 
> # Get the eigen centrality scores
> # for nodes in the graph
> graph %>% get_eigen_centrality()
   id eigen_centrality
1   1           0.6640
2   2           0.6767
3   3           0.4988
4   4           0.9541
5   5           0.7908
6   6           1.0000
7   7           0.6391
8   8           0.4524
9   9           0.6702
10 10           0.0000
> 
> 
> 
> 
> cleanEx()
> nameEx("get_girth")
> ### * get_girth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_girth
> ### Title: Get the graph girth
> ### Aliases: get_girth
> 
> ### ** Examples
> 
> # Create a cycle graph
> graph <-
+   create_graph() %>%
+   add_cycle(n = 5)
> 
> # Determine the graph's girth
> graph %>% get_girth()
[1] 5
> 
> # Create a full graph and then
> # get the girth for that
> create_graph() %>%
+   add_full_graph(n = 10) %>%
+   get_girth()
[1] 3
> 
> 
> 
> 
> cleanEx()
> nameEx("get_global_graph_attr_info")
> ### * get_global_graph_attr_info
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_global_graph_attr_info
> ### Title: Get global graph attributes
> ### Aliases: get_global_graph_attr_info
> 
> ### ** Examples
> 
> # Create a new, empty graph
> graph <- create_graph()
> 
> # View the graph's set of
> # global attributes
> graph %>%
+   get_global_graph_attr_info()
# A tibble: 17 × 3
   attr        value      attr_type
   <chr>       <chr>      <chr>    
 1 layout      neato      graph    
 2 outputorder edgesfirst graph    
 3 bgcolor     white      graph    
 4 fontname    Helvetica  node     
 5 fontsize    10         node     
 6 shape       circle     node     
 7 fixedsize   true       node     
 8 width       0.5        node     
 9 style       filled     node     
10 fillcolor   aliceblue  node     
11 color       gray70     node     
12 fontcolor   gray50     node     
13 fontname    Helvetica  edge     
14 fontsize    8          edge     
15 len         1.5        edge     
16 color       gray80     edge     
17 arrowsize   0.5        edge     
> 
> 
> 
> 
> cleanEx()
> nameEx("get_graph_actions")
> ### * get_graph_actions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_graph_actions
> ### Title: Get information on any available graph actions
> ### Aliases: get_graph_actions
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_gnm_graph(
+     n = 10,
+     m = 15,
+     set_seed = 23)
> 
> # Add a graph action that sets a node
> # attr column with a function; the
> # main function `set_node_attr_w_fcn()`
> # uses the `get_betweenness()` function
> # to provide betweenness values in the
> # `btwns` column
> graph <-
+   graph %>%
+   add_graph_action(
+     fcn = "set_node_attr_w_fcn",
+     node_attr_fcn = "get_betweenness",
+     column_name = "btwns",
+     action_name = "get_btwns")
> 
> # To ensure that the action is
> # available in the graph, use the
> # `get_graph_actions()` function
> graph %>% get_graph_actions()
# A tibble: 1 × 3
  action_index action_name expression                                           
         <int> <chr>       <chr>                                                
1            1 get_btwns   set_node_attr_w_fcn(graph = graph, node_attr_fcn = '…
> 
> 
> 
> 
> cleanEx()
> nameEx("get_graph_from_graph_series")
> ### * get_graph_from_graph_series
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_graph_from_graph_series
> ### Title: Get a graph available in a series
> ### Aliases: get_graph_from_graph_series
> 
> ### ** Examples
> 
> # Create three graphs
> graph_1 <-
+   create_graph() %>%
+   add_path(n = 4)
> 
> graph_2 <-
+   create_graph() %>%
+   add_cycle(n = 5)
> 
> graph_3 <-
+   create_graph() %>%
+   add_star(n = 6)
> 
> # Create an empty graph series
> # and add the graphs
> series <-
+   create_graph_series() %>%
+   add_graph_to_graph_series(
+     graph = graph_1) %>%
+   add_graph_to_graph_series(
+     graph = graph_2) %>%
+   add_graph_to_graph_series(
+     graph = graph_3)
> 
> # Get the second graph in the series
> extracted_graph <-
+   series %>%
+   get_graph_from_graph_series(
+     graph_no = 2)
> 
> 
> 
> 
> cleanEx()
> nameEx("get_graph_info")
> ### * get_graph_info
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_graph_info
> ### Title: Get metrics for a graph
> ### Aliases: get_graph_info
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Import a GML graph file available
> ##D # in the DiagrammeR package
> ##D karate_club <-
> ##D   system.file(
> ##D     "extdata", "karate.gml",
> ##D     package = "DiagrammeR") %>%
> ##D   import_graph() %>%
> ##D   set_graph_name("karate")
> ##D 
> ##D # Display a data frame with
> ##D # graph information
> ##D karate_club %>%
> ##D   get_graph_info()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("get_graph_log")
> ### * get_graph_log
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_graph_log
> ### Title: Get the graph log information
> ### Aliases: get_graph_log
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function and
> # delete 2 nodes from the graph
> graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_gnm_graph(
+     n = 10,
+     m = 15,
+     set_seed = 23) %>%
+   delete_node(node = 5) %>%
+   delete_node(node = 7)
> 
> # Get the graph log, which is a
> # record of all graph transformations
> graph %>% get_graph_log()
# A tibble: 4 × 8
  version_id function_used time_modified       duration nodes edges   d_n   d_e
       <int> <chr>         <dttm>                 <dbl> <int> <int> <int> <int>
1          1 create_graph  2024-11-21 16:58:37  0.00572     0     0     0     0
2          2 add_gnm_graph 2024-11-21 16:58:37  0.0212     10    15    10    15
3          3 delete_node   2024-11-21 16:58:37  0.0272      9    11    -1    -4
4          4 delete_node   2024-11-21 16:58:37  0.0333      8     8    -1    -3
> 
> 
> 
> 
> cleanEx()
> nameEx("get_graph_name")
> ### * get_graph_name
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_graph_name
> ### Title: Get graph name
> ### Aliases: get_graph_name
> 
> ### ** Examples
> 
> # Create an empty graph
> graph <- create_graph()
> 
> # Provide the new graph with a name
> graph <-
+   set_graph_name(
+     graph,
+     name = "the_name")
> 
> # Get the graph's name
> graph %>% get_graph_name()
[1] "the_name"
> 
> 
> 
> 
> cleanEx()
> nameEx("get_graph_series_info")
> ### * get_graph_series_info
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_graph_series_info
> ### Title: Get information on a graph series
> ### Aliases: get_graph_series_info
> 
> ### ** Examples
> 
> # Create three graphs
> graph_1 <-
+   create_graph() %>%
+   add_path(n = 4)
> 
> graph_2 <-
+   create_graph() %>%
+   add_cycle(n = 5)
> 
> graph_3 <-
+   create_graph() %>%
+   add_star(n = 6)
> 
> # Create an empty graph series
> # and add the graphs
> series <-
+   create_graph_series() %>%
+   add_graph_to_graph_series(
+     graph = graph_1) %>%
+   add_graph_to_graph_series(
+     graph = graph_2) %>%
+   add_graph_to_graph_series(
+     graph = graph_3)
> 
> # Get information on the graphs in the series
> series %>% get_graph_series_info()
  graph           name           date_time            tz nodes edges directed
1     1 graph_4DmAh8Wq 2024-11-21 16:58:37 Europe/London     4     3     TRUE
2     2 graph_1tJGIOUk 2024-11-21 16:58:37 Europe/London     5     5     TRUE
3     3 graph_YrOgTiFJ 2024-11-21 16:58:37 Europe/London     6     5     TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("get_graph_time")
> ### * get_graph_time
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_graph_time
> ### Title: Get the graph date-time or timezone
> ### Aliases: get_graph_time
> 
> ### ** Examples
> 
> # Create an empty graph and
> # set the graph's time; if nothing
> # is supplied for the `tz` argument,
> # `GMT` is used as the time zone
> graph <-
+   create_graph() %>%
+     set_graph_time(
+       time = "2015-10-25 15:23:00")
> 
> # Get the graph's time as a POSIXct
> # object using `get_graph_time()`
> graph %>% get_graph_time()
[1] "2015-10-25 15:23:00 GMT"
> 
> 
> 
> 
> cleanEx()
> nameEx("get_jaccard_similarity")
> ### * get_jaccard_similarity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_jaccard_similarity
> ### Title: Get Jaccard similarity coefficient scores
> ### Aliases: get_jaccard_similarity
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_gnm_graph(
+     n = 10,
+     m = 15,
+     set_seed = 23)
> 
> # Get the Jaccard similarity
> # values for nodes `5`, `6`,
> # and `7`
> graph %>%
+   get_jaccard_similarity(
+     nodes = 5:7)
      5     6     7
5 1.000 0.286 0.400
6 0.286 1.000 0.333
7 0.400 0.333 1.000
> 
> 
> 
> 
> cleanEx()
> nameEx("get_last_edges_created")
> ### * get_last_edges_created
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_last_edges_created
> ### Title: Get the last set of edges created in a graph
> ### Aliases: get_last_edges_created
> 
> ### ** Examples
> 
> # Create a graph and add a cycle and then
> # a tree in 2 separate function calls
> graph <-
+   create_graph() %>%
+   add_cycle(
+     n = 3,
+     rel = "a") %>%
+   add_balanced_tree(
+     k = 2, h = 2,
+     rel = "b")
> 
> # Get the last edges created (all edges
> # from the tree)
> graph %>% get_last_edges_created()
[1] 4 5 6 7 8 9
> 
> 
> 
> 
> cleanEx()
> nameEx("get_last_nodes_created")
> ### * get_last_nodes_created
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_last_nodes_created
> ### Title: Get the last set of nodes created in a graph
> ### Aliases: get_last_nodes_created
> 
> ### ** Examples
> 
> # Create a graph and add 4 nodes
> # in 2 separate function calls
> graph <-
+   create_graph() %>%
+   add_n_nodes(
+     n = 2,
+     type = "a",
+     label = c("a_1", "a_2")) %>%
+   add_n_nodes(
+     n = 2,
+     type = "b",
+     label = c("b_1", "b_2"))
> 
> # Get the last nodes created (2 nodes
> # from the last function call)
> graph %>% get_last_nodes_created()
[1] 3 4
> 
> 
> 
> 
> cleanEx()
> nameEx("get_leverage_centrality")
> ### * get_leverage_centrality
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_leverage_centrality
> ### Title: Get leverage centrality
> ### Aliases: get_leverage_centrality
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_gnm_graph(
+     n = 10,
+     m = 15,
+     set_seed = 23)
> 
> # Get leverage centrality values
> # for all nodes in the graph
> graph %>%
+   get_leverage_centrality()
   id leverage_centrality
1   1             -0.1964
2   2             -0.1964
3   3             -0.3810
4   4              0.0556
5   5             -0.0556
6   6              0.0556
7   7             -0.1964
8   8             -0.3810
9   9             -0.1964
10 10             -1.0000
> 
> # Add the leverage centrality
> # values to the graph as a
> # node attribute
> graph <-
+   graph %>%
+   join_node_attrs(
+     df = get_leverage_centrality(.))
> 
> # Display the graph's node data frame
> graph %>% get_node_df()
   id type label leverage_centrality
1   1 <NA>     1             -0.1964
2   2 <NA>     2             -0.1964
3   3 <NA>     3             -0.3810
4   4 <NA>     4              0.0556
5   5 <NA>     5             -0.0556
6   6 <NA>     6              0.0556
7   7 <NA>     7             -0.1964
8   8 <NA>     8             -0.3810
9   9 <NA>     9             -0.1964
10 10 <NA>    10             -1.0000
> 
> 
> 
> 
> cleanEx()
> nameEx("get_max_eccentricity")
> ### * get_max_eccentricity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_max_eccentricity
> ### Title: Get the maximum graph eccentricity
> ### Aliases: get_max_eccentricity
> 
> ### ** Examples
> 
> # Create a cycle graph
> graph <-
+   create_graph() %>%
+   add_cycle(n = 5)
> 
> # Determine the graph's maximum
> # eccentricity
> graph %>%
+   get_max_eccentricity()
[1] 4
> 
> # Create a full graph and then
> # get the maximum eccentricity
> # value for that
> create_graph() %>%
+   add_full_graph(n = 10) %>%
+   get_max_eccentricity()
[1] 1
> 
> 
> 
> 
> cleanEx()
> nameEx("get_mean_distance")
> ### * get_mean_distance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_mean_distance
> ### Title: Get the mean distance
> ### Aliases: get_mean_distance
> 
> ### ** Examples
> 
> # Create a cycle graph
> graph <-
+   create_graph() %>%
+   add_cycle(n = 5)
> 
> # Determine the mean distance
> graph %>%
+   get_mean_distance()
[1] 2.5
> 
> # Create a full graph and then
> # get the mean distance value
> create_graph() %>%
+   add_full_graph(n = 10) %>%
+   get_mean_distance()
[1] 1
> 
> 
> 
> 
> cleanEx()
> nameEx("get_min_cut_between")
> ### * get_min_cut_between
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_min_cut_between
> ### Title: Get the minimum cut between source and sink nodes
> ### Aliases: get_min_cut_between
> 
> ### ** Examples
> 
> # Set a seed
> suppressWarnings(RNGversion("3.5.0"))
> set.seed(23)
> 
> # Create a cycle graph
> graph <-
+   create_graph() %>%
+   add_cycle(n = 5)
> 
> # Determine the minimum cut
> # between nodes `1` and `4`
> graph %>%
+   get_min_cut_between(
+     from = 1,
+     to = 2)
[1] 1
> 
> # Create a cycle graph with
> # randomized values given to all
> # edges as the `capacity` attribute
> graph_capacity <-
+   create_graph() %>%
+   add_cycle(n = 5) %>%
+   select_edges() %>%
+   set_edge_attrs_ws(
+     edge_attr = capacity,
+     value =
+       rnorm(
+         n = count_edges(.),
+         mean = 5,
+         sd = 1)) %>%
+   clear_selection()
> 
> # Determine the minimum cut
> # between nodes `1` and `4` for
> # this graph, where `capacity`is
> # set as an edge attribute
> graph_capacity %>%
+   get_min_cut_between(
+     from = 1,
+     to = 2)
[1] 4.479822
> 
> # Create a full graph and then
> # get the minimum cut requirement
> # between nodes `2` and `8`
> create_graph() %>%
+   add_full_graph(n = 10) %>%
+   get_min_cut_between(
+     from = 2,
+     to = 8)
[1] 9
> 
> 
> 
> 
> cleanEx()
> nameEx("get_min_eccentricity")
> ### * get_min_eccentricity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_min_eccentricity
> ### Title: Get the minimum graph eccentricity
> ### Aliases: get_min_eccentricity
> 
> ### ** Examples
> 
> # Create a cycle graph
> graph <-
+   create_graph() %>%
+   add_cycle(n = 5)
> 
> # Determine the graph's minimum
> # eccentricity
> graph %>%
+   get_min_eccentricity()
[1] 2
> 
> # Create a full graph and then
> # get the minimum eccentricity
> # value for that
> create_graph() %>%
+   add_full_graph(n = 10) %>%
+   get_min_eccentricity()
[1] 1
> 
> 
> 
> 
> cleanEx()
> nameEx("get_multiedge_count")
> ### * get_multiedge_count
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_multiedge_count
> ### Title: Get the count of multiple edges
> ### Aliases: get_multiedge_count
> 
> ### ** Examples
> 
> # Create a node data frame (ndf)
> ndf <-
+   create_node_df(
+     n = 5,
+     label = TRUE)
> 
> # Create an edge data frame (edf)
> edf <-
+   create_edge_df(
+     from = c(1, 4, 4, 3, 5, 1, 3, 4),
+       to = c(4, 1, 1, 2, 2, 2, 2, 1))
> 
> # Create a graph with the ndf and edf
> graph <-
+   create_graph(
+     nodes_df = ndf,
+     edges_df = edf)
> 
> # Get the total number of multiple
> # edges (those edges that share an
> # edge definition) in the graph
> graph %>% get_multiedge_count()
[1] 3
> 
> 
> 
> 
> cleanEx()
> nameEx("get_nbrs")
> ### * get_nbrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_nbrs
> ### Title: Get all neighbors of one or more nodes
> ### Aliases: get_nbrs
> 
> ### ** Examples
> 
> # Create a simple, directed graph with 5
> # nodes and 4 edges
> graph <-
+   create_graph() %>%
+   add_path(n = 5)
> 
> # Find all neighbor nodes for node `2`
> graph %>% get_nbrs(nodes = 2)
[1] 1 3
> 
> # Find all neighbor nodes for nodes `1`
> # and `5`
> graph %>% get_nbrs(nodes = c(1, 5))
[1] 2 4
> 
> # Color node `3` with purple, get its
> # neighbors and color those nodes green
> graph <-
+   graph %>%
+   select_nodes_by_id(nodes = 3) %>%
+   set_node_attrs_ws(
+     node_attr = color,
+     value = "purple") %>%
+   clear_selection() %>%
+   select_nodes_by_id(
+     nodes = get_nbrs(
+       graph = .,
+       nodes = 3)) %>%
+   set_node_attrs_ws(
+     node_attr = color,
+     value = "green")
> 
> 
> 
> 
> cleanEx()
> nameEx("get_node_attrs")
> ### * get_node_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_node_attrs
> ### Title: Get node attribute values
> ### Aliases: get_node_attrs
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 4,
+     m = 4,
+     set_seed = 23) %>%
+   set_node_attrs(
+     node_attr = value,
+     values = c(2.5, 8.2, 4.2, 2.4))
> 
> # Get all of the values from
> # the `value` node attribute
> # as a named vector
> graph %>%
+   get_node_attrs(
+     node_attr = value)
  1   2   3   4 
2.5 8.2 4.2 2.4 
> 
> # To only return node attribute
> # values for specified nodes,
> # use the `nodes` argument
> graph %>%
+   get_node_attrs(
+     node_attr = value,
+     nodes = c(1, 3))
  1   3 
2.5 4.2 
> 
> 
> 
> 
> cleanEx()
> nameEx("get_node_attrs_ws")
> ### * get_node_attrs_ws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_node_attrs_ws
> ### Title: Get node attribute values from a selection of nodes
> ### Aliases: get_node_attrs_ws
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 4,
+     m = 4,
+     set_seed = 23) %>%
+   set_node_attrs(
+     node_attr = value,
+     values = c(2.5, 8.2, 4.2, 2.4))
> 
> # Select nodes with ID values
> # `1` and `3`
> graph <-
+   graph %>%
+   select_nodes_by_id(
+     nodes = c(1, 3))
> 
> # Get the node attribute values
> # for the `value` attribute, limited
> # to the current node selection
> graph %>%
+   get_node_attrs_ws(
+     node_attr = value)
  1   3 
2.5 4.2 
> 
> 
> 
> 
> cleanEx()
> nameEx("get_node_df")
> ### * get_node_df
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_node_df
> ### Title: Get a node data frame from a graph
> ### Aliases: get_node_df
> 
> ### ** Examples
> 
> # Create a graph
> graph <-
+   create_graph() %>%
+   add_n_nodes(
+     n = 1,
+     type = "a") %>%
+   select_last_nodes_created() %>%
+   add_n_nodes_ws(
+     n = 5,
+     direction = "from",
+     type = "b") %>%
+   select_nodes_by_id(
+     nodes = 1) %>%
+   set_node_attrs_ws(
+     node_attr = value,
+     value = 25.3) %>%
+   clear_selection() %>%
+   select_nodes_by_id(
+     nodes = 2:4) %>%
+   set_node_attrs_ws(
+     node_attr = color,
+     value = "grey70") %>%
+   invert_selection() %>%
+   set_node_attrs_ws(
+     node_attr = color,
+     value = "grey80") %>%
+   clear_selection()
> 
> # Get the graph's internal node
> # data frame (ndf)
> graph %>%
+   get_node_df()
  id type label value  color
1  1    a  <NA>  25.3 grey80
2  2    b  <NA>    NA grey70
3  3    b  <NA>    NA grey70
4  4    b  <NA>    NA grey70
5  5    b  <NA>    NA grey80
6  6    b  <NA>    NA grey80
> 
> 
> 
> 
> cleanEx()
> nameEx("get_node_df_ws")
> ### * get_node_df_ws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_node_df_ws
> ### Title: Get the graph's ndf filtered by a selection of nodes
> ### Aliases: get_node_df_ws
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 4,
+     m = 4,
+     set_seed = 23) %>%
+   set_node_attrs(
+     node_attr = value,
+     values = c(2.5, 8.2, 4.2, 2.4))
> 
> # Select nodes with ID values
> # `1` and `3`
> graph <-
+   graph %>%
+   select_nodes_by_id(
+     nodes = c(1, 3))
> 
> # Get the node data frame that's
> # limited to the rows that correspond
> # to the node selection
> graph %>% get_node_df_ws()
  id type label value
1  1 <NA>     1   2.5
2  3 <NA>     3   4.2
> 
> 
> 
> 
> cleanEx()
> nameEx("get_node_ids")
> ### * get_node_ids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_node_ids
> ### Title: Get a vector of node ID values
> ### Aliases: get_node_ids
> 
> ### ** Examples
> 
> # Create a node data
> # frame (ndf)
> ndf <-
+   create_node_df(
+     n = 4,
+     type = "letter",
+     color = c(
+       "red", "green",
+       "blue", "blue"),
+     value = c(
+       3.5, 2.6, 9.4, 2.7))
> 
> # Create a graph using
> # the ndf
> graph <-
+   create_graph(
+     nodes_df = ndf)
> 
> # Get a vector of all nodes in a graph
> graph %>% get_node_ids()
[1] 1 2 3 4
> 
> # Get a vector of node ID values using a
> # numeric comparison (i.e., all nodes with
> # `value` attribute greater than 3)
> graph %>%
+   get_node_ids(
+     conditions = value > 3)
[1] 1 3
> 
> # Get a vector of node ID values using
> # a match pattern (i.e., all nodes with
> # `color` attribute of `green`)
> graph %>%
+   get_node_ids(
+     conditions = color == "green")
[1] 2
> 
> # Use multiple conditions to return nodes
> # with the desired attribute values
> graph %>%
+   get_node_ids(
+     conditions =
+       color == "blue" &
+       value > 5)
[1] 3
> 
> 
> 
> 
> cleanEx()
> nameEx("get_node_info")
> ### * get_node_info
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_node_info
> ### Title: Get detailed information on nodes
> ### Aliases: get_node_info
> 
> ### ** Examples
> 
> # Create a simple graph
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 5, m = 10,
+     set_seed = 23)
> 
> # Get information on the graph's nodes
> graph %>% get_node_info()
  id type label deg indeg outdeg loops
1  1 <NA>     1   4     3      1     0
2  2 <NA>     2   4     1      3     0
3  3 <NA>     3   6     2      4     0
4  4 <NA>     4   3     2      1     0
5  5 <NA>     5   3     2      1     0
> 
> 
> 
> 
> cleanEx()
> nameEx("get_non_nbrs")
> ### * get_non_nbrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_non_nbrs
> ### Title: Get non-neighbors of a node in a graph
> ### Aliases: get_non_nbrs
> 
> ### ** Examples
> 
> # Create a simple, directed graph with 5
> # nodes and 4 edges
> graph <-
+   create_graph() %>%
+   add_path(n = 5)
> 
> # Find all non-neighbors of node `2`
> graph %>% get_non_nbrs(node = 2)
[1] 4 5
> 
> 
> 
> 
> cleanEx()
> nameEx("get_pagerank")
> ### * get_pagerank
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_pagerank
> ### Title: Get the PageRank values for all nodes
> ### Aliases: get_pagerank
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 10,
+     m = 15,
+     set_seed = 23)
> 
> # Get the PageRank scores
> # for all nodes in the graph
> graph %>%
+   get_pagerank()
   id pagerank
1   1   0.1302
2   2   0.1037
3   3   0.0450
4   4   0.0450
5   5   0.1501
6   6   0.0578
7   7   0.0871
8   8   0.1780
9   9   0.0744
10 10   0.1287
> 
> # Colorize nodes according to their
> # PageRank scores
> graph <-
+   graph %>%
+   join_node_attrs(
+     df = get_pagerank(graph = .)) %>%
+   colorize_node_attrs(
+     node_attr_from = pagerank,
+     node_attr_to = fillcolor,
+     palette = "RdYlGn")
> 
> 
> 
> 
> cleanEx()
> nameEx("get_paths")
> ### * get_paths
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_paths
> ### Title: Get paths from a specified node in a directed graph
> ### Aliases: get_paths
> 
> ### ** Examples
> 
> # Create a simple graph
> graph <-
+   create_graph() %>%
+   add_n_nodes(n = 8) %>%
+   add_edge(from = 1, to = 2) %>%
+   add_edge(from = 1, to = 3) %>%
+   add_edge(from = 3, to = 4) %>%
+   add_edge(from = 3, to = 5) %>%
+   add_edge(from = 4, to = 6) %>%
+   add_edge(from = 2, to = 7) %>%
+   add_edge(from = 7, to = 5) %>%
+   add_edge(from = 4, to = 8)
> 
> # Get a list of all paths outward from node `1`
> graph %>%
+   get_paths(from = 1)
[[1]]
[1] 1 3 5

[[2]]
[1] 1 2 7 5

[[3]]
[1] 1 3 4 6

[[4]]
[1] 1 3 4 8

> 
> # Get a list of all paths leading to node `6`
> graph %>%
+   get_paths(to = 6)
[[1]]
[1] 1 3 4 6

> 
> # Get a list of all paths from `1` to `5`
> graph %>%
+   get_paths(
+    from = 1,
+    to = 5)
[[1]]
[1] 1 3 5

[[2]]
[1] 1 2 7 5

> 
> # Get a list of all paths from `1` up to a distance
> # of 2 node traversals
> graph %>%
+   get_paths(
+     from = 1,
+     distance = 2)
[[1]]
[1] 1 3 5

[[2]]
[1] 1 2 7

[[3]]
[1] 1 3 4

> 
> # Get a list of the shortest paths from `1` to `5`
> get_paths(
+   graph,
+   from = 1,
+   to = 5,
+   shortest_path = TRUE)
[[1]]
[1] 1 3 5

> 
> # Get a list of the longest paths from `1` to `5`
> get_paths(
+   graph,
+   from = 1,
+   to = 5,
+   longest_path = TRUE)
[[1]]
[1] 1 2 7 5

> 
> 
> 
> 
> cleanEx()
> nameEx("get_periphery")
> ### * get_periphery
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_periphery
> ### Title: Get nodes that form the graph periphery
> ### Aliases: get_periphery
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function and
> # get the nodes in the graph periphery
> create_graph() %>%
+   add_gnm_graph(
+     n = 28,
+     m = 35,
+     set_seed = 23) %>%
+   get_periphery()
[1]  6  9 25 28
> 
> 
> 
> 
> cleanEx()
> nameEx("get_predecessors")
> ### * get_predecessors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_predecessors
> ### Title: Get node IDs for predecessor nodes to the specified node
> ### Aliases: get_predecessors
> 
> ### ** Examples
> 
> # Set a seed
> suppressWarnings(RNGversion("3.5.0"))
> set.seed(23)
> 
> # Create a node data frame (ndf)
> ndf <- create_node_df(n = 26)
> 
> # Create an edge data
> # frame (edf)
> edf <-
+   create_edge_df(
+     from = sample(
+       1:26, replace = TRUE),
+     to = sample(
+       1:26, replace = TRUE))
> 
> # From the ndf and edf,
> # create a graph object
> graph <-
+   create_graph(
+     nodes_df = ndf,
+     edges_df = edf)
> 
> # Get predecessors for node
> # `23` in the graph
> graph %>%
+   get_predecessors(
+     node = 23)
[1] 6
> 
> # If there are no predecessors,
> # `NA` is returned
> graph %>%
+   get_predecessors(
+     node = 26)
[1] NA
> 
> 
> 
> 
> cleanEx()
> nameEx("get_radiality")
> ### * get_radiality
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_radiality
> ### Title: Get radiality centrality scores
> ### Aliases: get_radiality
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 10,
+     m = 15,
+     set_seed = 23)
> 
> # Get the radiality scores for nodes in the graph
> graph %>%
+   get_radiality()
   id radiality
1   1    2.3333
2   2    3.0000
3   3    2.6667
4   4    2.8889
5   5    2.5556
6   6    2.4444
7   7    2.6667
8   8    2.7778
9   9    2.1111
10 10    2.3333
> 
> # Add the radiality values
> # to the graph as a node
> # attribute
> graph <-
+   graph %>%
+   join_node_attrs(
+     df = get_radiality(.))
> 
> # Display the graph's node data frame
> graph %>%
+   get_node_df()
   id type label radiality
1   1 <NA>     1    2.3333
2   2 <NA>     2    3.0000
3   3 <NA>     3    2.6667
4   4 <NA>     4    2.8889
5   5 <NA>     5    2.5556
6   6 <NA>     6    2.4444
7   7 <NA>     7    2.6667
8   8 <NA>     8    2.7778
9   9 <NA>     9    2.1111
10 10 <NA>    10    2.3333
> 
> 
> 
> 
> cleanEx()
> nameEx("get_reciprocity")
> ### * get_reciprocity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_reciprocity
> ### Title: Get the graph reciprocity
> ### Aliases: get_reciprocity
> 
> ### ** Examples
> 
> # Define a graph where 2 edge definitions
> # have pairs of reciprocal edges
> graph <-
+   create_graph() %>%
+   add_cycle(n = 3) %>%
+   add_node(
+     from = 1,
+       to = 1) %>%
+   add_node(
+     from = 1,
+       to = 1)
> 
> # Get the graph reciprocity, which will
> # be calculated as the ratio 4/7 (where
> # 4 is the number reciprocating edges
> # and 7 is the total number of edges
> # in the graph)
> graph %>%
+   get_reciprocity()
[1] 0.5714286
> 
> # For an undirected graph, all edges
> # are reciprocal, so the ratio will
> # always be 1
> graph %>%
+   set_graph_undirected() %>%
+   get_reciprocity()
[1] 1
> 
> # For a graph with no edges, the graph
> # reciprocity cannot be determined (and
> # the same NA result is obtained from an
> # empty graph)
> create_graph() %>%
+   add_n_nodes(n = 5) %>%
+   get_reciprocity()
[1] NA
> 
> 
> 
> 
> cleanEx()
> nameEx("get_s_connected_cmpts")
> ### * get_s_connected_cmpts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_s_connected_cmpts
> ### Title: Get nodes within strongly connected components
> ### Aliases: get_s_connected_cmpts
> 
> ### ** Examples
> 
> suppressWarnings(RNGversion("3.5.0"))
> set.seed(23)
> 
> # Create a graph with a random
> # connection between 2 different
> # node cycles
> graph <-
+   create_graph() %>%
+   add_cycle(
+     n = 3,
+     type = "cycle_1") %>%
+   add_cycle(
+     n = 4,
+     type = "cycle_2") %>%
+   add_edge(
+     from =
+       get_node_ids(
+         graph = .,
+         conditions =
+           type == "cycle_1") %>%
+         sample(size = 1),
+     to =
+       get_node_ids(
+         graph = .,
+         conditions =
+           type == "cycle_2") %>%
+         sample(size = 1))
> 
> # Get the strongly connected
> # components as a data frame of
> # nodes and their groupings
> graph %>% get_s_connected_cmpts()
  id sc_component
1  1            1
2  2            1
3  3            1
4  4            2
5  5            2
6  6            2
7  7            2
> 
> 
> 
> 
> cleanEx()
> nameEx("get_selection")
> ### * get_selection
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_selection
> ### Title: Get the current selection available in a graph object
> ### Aliases: get_selection
> 
> ### ** Examples
> 
> # Create a simple graph
> graph <-
+   create_graph() %>%
+   add_path(n = 6)
> 
> # Select node `4`, then select
> # all nodes a distance of 1 away
> # from node `4`, and finally
> # return the selection of nodes as
> # a vector object
> graph %>%
+   select_nodes(nodes = 4) %>%
+   select_nodes_in_neighborhood(
+     node = 4,
+     distance = 1) %>%
+   get_selection()
[1] 3 4 5
> 
> # Select edges associated with
> # node `4` and return the
> # selection of edges
> graph %>%
+   select_edges_by_node_id(
+     nodes = 4) %>%
+   get_selection()
[1] 3 4
> 
> 
> 
> 
> cleanEx()
> nameEx("get_similar_nbrs")
> ### * get_similar_nbrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_similar_nbrs
> ### Title: Get neighboring nodes based on node attribute similarity
> ### Aliases: get_similar_nbrs
> 
> ### ** Examples
> 
> # Getting similar neighbors can
> # be done through numerical comparisons;
> # start by creating a random, directed
> # graph with 18 nodes and 22 edges
> # using the `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 18,
+     m = 25,
+     set_seed = 23) %>%
+   set_node_attrs(
+     node_attr = value,
+     values = rnorm(
+       n = count_nodes(.),
+       mean = 5,
+       sd = 1) %>% round(0))
> 
> # Starting with node `10`, we
> # can test whether any nodes
> # adjacent and beyond are
> # numerically equivalent in `value`
> graph %>%
+   get_similar_nbrs(
+     node = 10,
+     node_attr = value)
[1]  2 14
> 
> # We can also set a tolerance
> # for ascribing similarly by using
> # either the `tol_abs` or `tol_pct`
> # arguments (the first applies absolute
> # lower and upper bounds from the
> # value in the starting node and the
> # latter uses a percentage difference
> # to do the same); try setting `tol_abs`
> # with a fairly large range to
> # determine if several nodes can be
> # selected
> graph %>%
+   get_similar_nbrs(
+     node = 10,
+     node_attr = value,
+     tol_abs = c(1, 1))
[1]  1  2  9 14
> 
> # That resulted in a fairly large
> # set of 4 neigboring nodes; for
> # sake of example, setting the range
> # to be very large will effectively
> # return all nodes in the graph
> # except for the starting node
> graph %>%
+   get_similar_nbrs(
+     node = 10,
+     node_attr = value,
+     tol_abs = c(10, 10)) %>%
+     length()
[1] 17
> 
> 
> 
> 
> cleanEx()
> nameEx("get_successors")
> ### * get_successors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_successors
> ### Title: Get node IDs for successor nodes to the specified node
> ### Aliases: get_successors
> 
> ### ** Examples
> 
> # Set a seed
> suppressWarnings(RNGversion("3.5.0"))
> set.seed(23)
> 
> # Create a node data frame (ndf)
> ndf <- create_node_df(n = 26)
> 
> # Create an edge data
> # frame (edf)
> edf <-
+   create_edge_df(
+     from = sample(
+       1:26, replace = TRUE),
+     to = sample(
+       1:26, replace = TRUE))
> 
> # From the ndf and edf,
> # create a graph object
> graph <-
+   create_graph(
+     nodes_df = ndf,
+     edges_df = edf)
> 
> # Get sucessors for node
> # `4` in the graph
> graph %>%
+   get_successors(
+     node = 4)
[1] 3 8
> 
> # If there are no successors,
> # NA is returned
> graph %>%
+   get_successors(
+     node = 1)
[1] NA
> 
> 
> 
> 
> cleanEx()
> nameEx("get_w_connected_cmpts")
> ### * get_w_connected_cmpts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_w_connected_cmpts
> ### Title: Get all nodes associated with connected components
> ### Aliases: get_w_connected_cmpts
> 
> ### ** Examples
> 
> # Create a graph with 2 cycles
> graph <-
+   create_graph() %>%
+   add_cycle(n = 4) %>%
+   add_cycle(n = 3)
> 
> # Check if the graph is connected
> graph %>%
+   is_graph_connected()
[1] FALSE
> 
> # Get the graph's weakly-connected
> # components
> graph %>% get_w_connected_cmpts()
  id wc_component
1  1            1
2  2            1
3  3            1
4  4            1
5  5            2
6  6            2
7  7            2
> 
> 
> 
> 
> cleanEx()
> nameEx("import_graph")
> ### * import_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: import_graph
> ### Title: Import a graph from various graph formats
> ### Aliases: import_graph
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Import a GML graph file
> ##D gml_graph <-
> ##D   import_graph(
> ##D     system.file(
> ##D       "extdata/karate.gml",
> ##D       package = "DiagrammeR"))
> ##D 
> ##D # Get a count of the graph's nodes
> ##D gml_graph %>%
> ##D   count_nodes()
> ##D 
> ##D # Get a count of the graph's edges
> ##D gml_graph %>%
> ##D   count_edges()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("invert_selection")
> ### * invert_selection
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: invert_selection
> ### Title: Invert selection of nodes or edges in a graph
> ### Aliases: invert_selection
> 
> ### ** Examples
> 
> # Create a node data frame (ndf)
> ndf <-
+   create_node_df(
+     n = 4,
+     type = "standard")
> 
> # Create an edge data frame (edf)
> edf <-
+   create_edge_df(
+     from = c(1, 2, 3),
+     to = c(4, 3, 1),
+     rel = "leading_to")
> 
> # Create a graph
> graph <-
+   create_graph(
+     nodes_df = ndf,
+     edges_df = edf)
> 
> # Select nodes with ID
> # values `1` and `3`
> graph <-
+   graph %>%
+   select_nodes(
+     nodes = c(1, 3))
> 
> # Verify that a node
> # selection has been made
> graph %>% get_selection()
[1] 1 3
> 
> # Invert the selection
> graph <-
+   graph %>%
+   invert_selection()
> 
> # Verify that the node
> # selection has been changed
> graph %>% get_selection()
[1] 2 4
> 
> 
> 
> 
> cleanEx()
> nameEx("is_edge_loop")
> ### * is_edge_loop
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_edge_loop
> ### Title: Is the edge a loop edge?
> ### Aliases: is_edge_loop
> 
> ### ** Examples
> 
> # Create a graph that has multiple
> # loop edges
> graph <-
+   create_graph() %>%
+   add_path(n = 4) %>%
+   add_edge(
+     from = 1,
+     to = 1) %>%
+   add_edge(
+     from = 3,
+     to = 3)
> 
> # Get the graph's internal
> # edge data frame
> graph %>% get_edge_df()
  id from to  rel
1  1    1  2 <NA>
2  2    2  3 <NA>
3  3    3  4 <NA>
4  4    1  1 <NA>
5  5    3  3 <NA>
> 
> # Determine if edge `4` is
> # a loop edge
> graph %>% is_edge_loop(edge = 4)
[1] TRUE
> 
> # Determine if edge `2` is
> # a loop edge
> graph %>% is_edge_loop(edge = 2)
[1] FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("is_edge_multiple")
> ### * is_edge_multiple
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_edge_multiple
> ### Title: Is the edge a multiple edge?
> ### Aliases: is_edge_multiple
> 
> ### ** Examples
> 
> # Create a graph that has multiple
> # edges across some node pairs
> graph <-
+   create_graph() %>%
+   add_path(n = 4) %>%
+   add_edge(
+     from = 1,
+     to = 2) %>%
+   add_edge(
+     from = 3,
+     to = 4)
> 
> # Get the graph's internal
> # edge data frame
> graph %>% get_edge_df()
  id from to  rel
1  1    1  2 <NA>
2  2    2  3 <NA>
3  3    3  4 <NA>
4  4    1  2 <NA>
5  5    3  4 <NA>
> 
> # Determine if edge `1` is
> # a multiple edge
> graph %>%
+   is_edge_multiple(edge = 1)
[1] TRUE
> 
> # Determine if edge `2` is
> # a multiple edge
> graph %>%
+   is_edge_multiple(edge = 2)
[1] FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("is_edge_mutual")
> ### * is_edge_mutual
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_edge_mutual
> ### Title: Is the edge mutual with another edge?
> ### Aliases: is_edge_mutual
> 
> ### ** Examples
> 
> # Create a graph that has mutual
> # edges across some node pairs
> graph <-
+   create_graph() %>%
+   add_path(n = 4) %>%
+   add_edge(
+     from = 4,
+     to = 3) %>%
+   add_edge(
+     from = 2,
+     to = 1)
> 
> # Get the graph's internal
> # edge data frame
> graph %>% get_edge_df()
  id from to  rel
1  1    1  2 <NA>
2  2    2  3 <NA>
3  3    3  4 <NA>
4  4    4  3 <NA>
5  5    2  1 <NA>
> 
> # Determine if edge `1` has
> # a mutual edge
> graph %>%
+   is_edge_mutual(edge = 1)
[1] TRUE
> 
> # Determine if edge `2` has
> # a mutual edge
> graph %>%
+   is_edge_mutual(edge = 2)
[1] FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("is_edge_present")
> ### * is_edge_present
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_edge_present
> ### Title: Determine whether a specified edge is present
> ### Aliases: is_edge_present
> 
> ### ** Examples
> 
> # Create a simple graph with
> # a path of four nodes
> graph <-
+   create_graph() %>%
+   add_path(
+     n = 4,
+     type = "path",
+     label = c("one", "two",
+               "three", "four"))
> 
> # Find out if edge ID `3`
> # is present in the graph
> graph %>%
+   is_edge_present(edge = 3)
[1] TRUE
> 
> # Determine if there are any edges
> # with the definition `1` -> `2`
> graph %>%
+   is_edge_present(
+     from = 1,
+     to = 2)
[1] TRUE
> 
> # Determine if there are any edges
> # with the definition `4` -> `5`
> graph %>%
+   is_edge_present(
+     from = 4,
+     to = 5)
[1] FALSE
> 
> # Determine whether an edge,
> # defined by its labels as
> # `two` -> `three`, exists in
> # the graph
> graph %>%
+   is_edge_present(
+     from = "two",
+     to = "three")
[1] TRUE
> 
> # Set the graph as undirected
> # and determine whether an
> # edge between nodes with labels
> # `three` and `two` exists
> graph %>%
+   set_graph_undirected() %>%
+   is_edge_present(
+     from = "three",
+     to = "two")
[1] TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("is_graph_connected")
> ### * is_graph_connected
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_graph_connected
> ### Title: Is the graph a connected graph?
> ### Aliases: is_graph_connected
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function; this
> # graph is not connected
> create_graph() %>%
+   add_gnm_graph(
+     n = 15,
+     m = 10,
+     set_seed = 23) %>%
+   is_graph_connected()
[1] FALSE
> 
> # Create another random graph;
> # this graph is connected
> create_graph() %>%
+   add_gnm_graph(
+     n = 10,
+     m = 15,
+     set_seed = 23) %>%
+   is_graph_connected()
[1] TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("is_graph_dag")
> ### * is_graph_dag
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_graph_dag
> ### Title: Is the graph a directed acyclic graph?
> ### Aliases: is_graph_dag
> 
> ### ** Examples
> 
> # Create a directed graph containing
> # only a balanced tree
> graph_tree <-
+   create_graph() %>%
+   add_balanced_tree(
+     k = 2, h = 3)
> 
> # Determine whether this graph
> # is a DAG
> graph_tree %>%
+   is_graph_dag()
[1] TRUE
> 
> # Create a directed graph containing
> # a single cycle
> graph_cycle <-
+   create_graph() %>%
+   add_cycle(n = 5)
> 
> # Determine whether this graph
> # is a DAG
> graph_cycle %>%
+   is_graph_dag()
[1] FALSE
> 
> # Create an undirected graph
> # containing a balanced tree
> graph_tree_undirected <-
+   create_graph(
+     directed = FALSE) %>%
+   add_balanced_tree(
+     k = 2, h = 2)
> 
> # Determine whether this graph
> # is a DAG
> graph_tree_undirected %>%
+   is_graph_dag()
[1] FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("is_graph_directed")
> ### * is_graph_directed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_graph_directed
> ### Title: Is the graph a directed graph?
> ### Aliases: is_graph_directed
> 
> ### ** Examples
> 
> # Create an empty graph; by default,
> # new graphs made by `create_graph()`
> # are directed
> graph <- create_graph()
> 
> # Determine whether the graph
> # is directed
> graph %>% is_graph_directed()
[1] TRUE
> 
> # Use the `set_graph_undirected()`
> # function and check again whether
> # the graph is directed
> graph %>%
+   set_graph_undirected() %>%
+   is_graph_directed()
[1] FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("is_graph_empty")
> ### * is_graph_empty
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_graph_empty
> ### Title: Is the graph empty?
> ### Aliases: is_graph_empty
> 
> ### ** Examples
> 
> # Create an empty graph
> graph <- create_graph()
> 
> # Determine whether the graph is empty
> graph %>% is_graph_empty()
[1] TRUE
> 
> # Create a non-empty graph
> graph <-
+   create_graph() %>%
+   add_n_nodes(n = 3)
> 
> # Determine whether this graph is empty
> graph %>% is_graph_empty()
[1] FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("is_graph_simple")
> ### * is_graph_simple
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_graph_simple
> ### Title: Is the graph a simple graph?
> ### Aliases: is_graph_simple
> 
> ### ** Examples
> 
> # Create a graph with 2 cycles
> graph <-
+   create_graph() %>%
+   add_cycle(n = 4) %>%
+   add_cycle(n = 3)
> 
> # Check if the graph is simple
> graph %>% is_graph_simple()
[1] TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("is_graph_undirected")
> ### * is_graph_undirected
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_graph_undirected
> ### Title: Is the graph an undirected graph?
> ### Aliases: is_graph_undirected
> 
> ### ** Examples
> 
> # Create an empty graph; by
> # default, new graphs made
> # by `create_graph()` are
> # directed graph, so, use
> # `directed = FALSE` to create
> # an undirected graph
> graph <-
+   create_graph(
+     directed = FALSE)
> 
> # Determine whether the
> # graph is undirected
> graph %>% is_graph_undirected()
[1] TRUE
> 
> # Use the `set_graph_directed()`
> # function and check again
> # as to whether the graph is
> # undirected
> graph %>%
+   set_graph_directed() %>%
+   is_graph_undirected()
[1] FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("is_graph_weighted")
> ### * is_graph_weighted
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_graph_weighted
> ### Title: Is the graph a weighted graph?
> ### Aliases: is_graph_weighted
> 
> ### ** Examples
> 
> # Create a graph where the edges have
> # a `weight` attribute
> graph <-
+   create_graph() %>%
+   add_cycle(n = 5) %>%
+   select_edges() %>%
+   set_edge_attrs_ws(
+     edge_attr = weight,
+     value = c(3, 5, 2, 9, 6)) %>%
+   clear_selection()
> 
> # Determine whether the graph
> # is a weighted graph
> graph %>% is_graph_weighted()
[1] TRUE
> 
> # Create graph where the edges do
> # not have a `weight` attribute
> graph <-
+   create_graph() %>%
+   add_cycle(n = 5)
> 
> # Determine whether this graph
> # is weighted
> graph %>% is_graph_weighted()
[1] FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("is_node_present")
> ### * is_node_present
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_node_present
> ### Title: Determine whether a specified node is present
> ### Aliases: is_node_present
> 
> ### ** Examples
> 
> # Create a simple graph with
> # a path of four nodes
> graph <-
+   create_graph() %>%
+   add_path(
+     n = 4,
+     type = "path",
+     label = c(
+       "one", "two",
+       "three", "four"))
> 
> # Determine if there is a node
> # with ID `1` in the graph
> graph %>%
+   is_node_present(node = 1)
[1] TRUE
> 
> # Determine if there is a node
> # with ID `5` in the graph
> graph %>%
+   is_node_present(node = 5)
[1] FALSE
> 
> # Determine if there is a node
> # with label `two` in the graph
> graph %>%
+   is_node_present(node = "two")
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("is_property_graph")
> ### * is_property_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_property_graph
> ### Title: Is the graph a property graph?
> ### Aliases: is_property_graph
> 
> ### ** Examples
> 
> # Create a graph with 2 nodes
> # (with `type` values) and a
> # single edge (with a `rel`)
> simple_property_graph <-
+   create_graph() %>%
+   add_node(
+     type = "a",
+     label = "first") %>%
+   add_node(
+     type = "b",
+     label = "second") %>%
+   add_edge(
+     from = "first",
+     to = "second",
+     rel = "rel_1")
> 
> # This is indeed a property graph
> # but to confirm this, use the
> # `is_property_graph()` function
> is_property_graph(simple_property_graph)
[1] TRUE
> 
> # If a `type` attribute is
> # removed, then this graph will
> # no longer be a property graph
> simple_property_graph %>%
+   set_node_attrs(
+     node_attr = type,
+     values = NA,
+     nodes = 1) %>%
+   is_property_graph()
[1] FALSE
> 
> # An empty graph will return FALSE
> create_graph() %>%
+   is_property_graph()
[1] FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("join_edge_attrs")
> ### * join_edge_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: join_edge_attrs
> ### Title: Join new edge attribute values using a data frame
> ### Aliases: join_edge_attrs
> 
> ### ** Examples
> 
> # Set a seed
> suppressWarnings(RNGversion("3.5.0"))
> set.seed(23)
> 
> # Create a simple graph
> graph <-
+   create_graph() %>%
+   add_n_nodes(n = 5) %>%
+   add_edges_w_string(
+     edges = "1->2 1->3 2->4 2->5 3->5")
> 
> # Create a data frame with node ID values
> # representing the graph edges (with `from` and `to`
> # columns), and, a set of numeric values
> df <-
+   data.frame(
+     from = c(1, 1, 2, 2, 3),
+     to = c(2, 3, 4, 5, 5),
+     values = rnorm(5, 5))
> 
> # Join the values in the data frame to the
> # graph's edges; this works as a left join using
> # identically-named columns in the graph and the df
> # (in this case `from` and `to` are common to both)
> graph <-
+   graph %>%
+   join_edge_attrs(
+     df = df)
> 
> # Get the graph's internal edf to show that the
> # join has been made
> graph %>% get_edge_df()
  id from to  rel   values
1  1    1  2 <NA> 5.996605
2  2    1  3 <NA> 6.107490
3  3    2  4 <NA> 4.721914
4  4    2  5 <NA> 6.019205
5  5    3  5 <NA> 5.045437
> 
> 
> 
> cleanEx()
> nameEx("join_node_attrs")
> ### * join_node_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: join_node_attrs
> ### Title: Join new node attribute values using a data frame
> ### Aliases: join_node_attrs
> 
> ### ** Examples
> 
> # Set a seed
> suppressWarnings(RNGversion("3.5.0"))
> set.seed(23)
> 
> # Create a simple graph
> graph <-
+   create_graph() %>%
+   add_n_nodes(n = 5) %>%
+   add_edges_w_string(
+     edges = "1->2 1->3 2->4 2->5 3->5")
> 
> # Create a data frame with node ID values and a
> # set of numeric values
> df <-
+   data.frame(
+     values = round(rnorm(6, 5), 2),
+     id = 1:6)
> 
> # Join the values in the data frame to the
> # graph's nodes; this works as a left join using
> # identically-named columns in the graph and the df
> # (in this case the `id` column is common to both)
> graph <-
+   graph %>%
+   join_node_attrs(
+     df = df)
> 
> # Get the graph's internal ndf to show that the
> # join has been made
> graph %>% get_node_df()
  id type label values
1  1 <NA>  <NA>   6.00
2  2 <NA>  <NA>   6.11
3  3 <NA>  <NA>   4.72
4  4 <NA>  <NA>   6.02
5  5 <NA>  <NA>   5.05
> 
> # Get betweenness values for each node and
> # add them as a node attribute (Note the
> # common column name `id` in the different
> # tables results in a natural join)
> graph <-
+   graph %>%
+   join_node_attrs(
+     df = get_betweenness(.))
> 
> # Get the graph's internal ndf to show that
> # this join has been made
> graph %>% get_node_df()
  id type label values betweenness
1  1 <NA>  <NA>   6.00         0.0
2  2 <NA>  <NA>   6.11         1.5
3  3 <NA>  <NA>   4.72         0.5
4  4 <NA>  <NA>   6.02         0.0
5  5 <NA>  <NA>   5.05         0.0
> 
> 
> 
> cleanEx()
> nameEx("layout_nodes_w_string")
> ### * layout_nodes_w_string
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: layout_nodes_w_string
> ### Title: Layout nodes using a text-based schematic
> ### Aliases: layout_nodes_w_string
> 
> ### ** Examples
> 
> # Create a graph with unique labels and
> # several node `type` groupings
> graph <-
+   create_graph() %>%
+   add_node(type = "a", label = "a") %>%
+   add_node(type = "a", label = "b") %>%
+   add_node(type = "b", label = "c") %>%
+   add_node(type = "b", label = "d") %>%
+   add_node(type = "b", label = "e") %>%
+   add_node(type = "c", label = "f") %>%
+   add_node(type = "c", label = "g")
> 
> # Define a 'layout' for groups of nodes
> # using a text string (dashes are empty
> # grid cells, numbers--representing
> # ad-hoc groupings--correspond to
> # individual nodes); here, define a layout
> # with 3 groups of nodes
> layout <-
+ "
+ 1--------
+ 1--------
+ ---222---
+ --------3
+ --------3
+ "
> 
> # Use the `layout` along with what nodes
> # the numbers correspond to in the graph
> # with the `nodes` named vectors; the
> # optional `sort` vector describes how
> # we should sort the collection of node
> # before adding position information
> graph <-
+   graph %>%
+   layout_nodes_w_string(
+     layout = layout,
+     nodes = c("1" = "type:a",
+               "2" = "type:b",
+               "3" = "type:c"),
+     sort = c("1" = "label:asc",
+              "2" = "label:desc",
+              "3" = "label:desc"))
> 
> # Show the graph's node data frame
> # to confirm that `x` and `y` values
> # were added to each of the nodes
> graph %>% get_node_df()
  id type label x y
1  1    a     a 0 8
2  2    a     b 0 6
3  3    b     c 5 4
4  4    b     d 4 4
5  5    b     e 3 4
6  6    c     f 8 0
7  7    c     g 8 2
> 
> 
> 
> cleanEx()
> nameEx("mermaid")
> ### * mermaid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mermaid
> ### Title: R + mermaid.js
> ### Aliases: mermaid
> 
> ### ** Examples
> 
> # Create a simple graph running left to right (note
> # that the whitespace is not important)
> # DiagrammeR("
> #   graph LR
> #     A-->B
> #     A-->C
> #     C-->E
> #     B-->D
> #     C-->D
> #     D-->F
> #     E-->F
> # ")
> 
> # Create the equivalent graph but have it running
> # from top to bottom
> # DiagrammeR("
> #    graph TB
> #    A-->B
> #    A-->C
> #    C-->E
> #    B-->D
> #    C-->D
> #    D-->F
> #    E-->F
> # ")
> 
> # Create a graph with different node shapes and
> # provide fill styles for each node
> # DiagrammeR("graph LR;A(Rounded)-->B[Squared];B-->C{A Decision};
> #  C-->D[Square One];C-->E[Square Two];
> #  style A fill:#E5E25F;  style B fill:#87AB51; style C fill:#3C8937;
> #  style D fill:#23772C;  style E fill:#B6E6E6;"
> # )
> 
> # Load in the 'mtcars' dataset
> # data(mtcars)
> # connections <- sapply(
> #  1:ncol(mtcars)
> #   ,function(i) {
> #      paste0(
> #         i
> #       ,"(",colnames(mtcars)[i],")---"
> #       ,i,"-stats("
> #       ,paste0(
> #         names(summary(mtcars[,i]))
> #         ,": "
> #         ,unname(summary(mtcars[,i]))
> #         ,collapse="<br/>"
> #       )
> #       ,")"
> #    )
> #  }
> # )
> 
> # Create a diagram using the 'connections' object
> # DiagrammeR(
> #    paste0(
> #      "graph TD;", "\n",
> #      paste(connections, collapse = "\n"),"\n",
> #      "classDef column fill:#0001CC, stroke:#0D3FF3, stroke-width:1px;" ,"\n",
> #      "class ", paste0(1:length(connections), collapse = ","), " column;"
> #    )
> #  )
> 
> # Also with `DiagrammeR()`, you can use tags
> # from `htmltools` (just make sure to use
> # `class = "mermaid"`)
> library(htmltools)
> # diagramSpec = "
> # graph LR;
> #   id1(Start)-->id2(Stop);
> #   style id1 fill:#f9f,stroke:#333,stroke-width:4px;
> #   style id2 fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5;
> # "
> # html_print(tagList(
> #   tags$h1("R + mermaid.js = Something Special")
> #   ,tags$pre(diagramSpec)
> #   ,tags$div(class="mermaid", diagramSpec)
> #   ,DiagrammeR()
> # ))
> 
> # Create a sequence diagram
> # DiagrammeR("
> # sequenceDiagram;
> #    customer->>ticket seller: ask for a ticket;
> #    ticket seller->>database: seats;
> #    alt tickets available
> #      database->>ticket seller: ok;
> #      ticket seller->>customer: confirm;
> #      customer->>ticket seller: ok;
> #      ticket seller->>database: book a seat;
> #      ticket seller->>printer: print a ticket;
> #    else sold out
> #      database->>ticket seller: none left;
> #      ticket seller->>customer: sorry;
> #    end
> # ")
> 
> 
> 
> 
> cleanEx()

detaching ‘package:htmltools’

> nameEx("mutate_edge_attrs")
> ### * mutate_edge_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mutate_edge_attrs
> ### Title: Mutate a set of edge attribute values
> ### Aliases: mutate_edge_attrs
> 
> ### ** Examples
> 
> # Create a graph with 3 edges
> graph <-
+   create_graph() %>%
+   add_path(n = 4) %>%
+   set_edge_attrs(
+     edge_attr = width,
+     values = c(3.4, 2.3, 7.2))
> 
> # Get the graph's internal edf
> # to show which edge attributes
> # are available
> graph %>% get_edge_df()
  id from to  rel width
1  1    1  2 <NA>   3.4
2  2    2  3 <NA>   2.3
3  3    3  4 <NA>   7.2
> 
> # Mutate the `width` edge
> # attribute, dividing each
> # value by 2
> graph <-
+   graph %>%
+   mutate_edge_attrs(
+     width = width / 2)
> 
> # Get the graph's internal
> # edf to show that the edge
> # attribute `width` had its
> # values changed
> graph %>% get_edge_df()
  id from to  rel width
1  1    1  2 <NA>  1.70
2  2    2  3 <NA>  1.15
3  3    3  4 <NA>  3.60
> 
> # Create a new edge attribute,
> # called `length`, that is the
> # log of values in `width` plus
> # 2 (and, also, round all values
> # to 2 decimal places)
> graph <-
+   graph %>%
+   mutate_edge_attrs(
+     length = (log(width) + 2) %>%
+                round(2))
> 
> # Get the graph's internal edf
> # to show that the edge attribute
> # values had been mutated
> graph %>% get_edge_df()
  id from to  rel width length
1  1    1  2 <NA>  1.70   2.53
2  2    2  3 <NA>  1.15   2.14
3  3    3  4 <NA>  3.60   3.28
> 
> # Create a new edge attribute
> # called `area`, which is the
> # product of the `width` and
> # `length` attributes
> graph <-
+   graph %>%
+   mutate_edge_attrs(
+     area = width * length)
> 
> # Get the graph's internal edf
> # to show that the edge attribute
> # values had been multiplied
> # together (with new attr `area`)
> graph %>% get_edge_df()
  id from to  rel width length   area
1  1    1  2 <NA>  1.70   2.53  4.301
2  2    2  3 <NA>  1.15   2.14  2.461
3  3    3  4 <NA>  3.60   3.28 11.808
> 
> 
> 
> 
> cleanEx()
> nameEx("mutate_edge_attrs_ws")
> ### * mutate_edge_attrs_ws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mutate_edge_attrs_ws
> ### Title: Mutate edge attribute values for a selection of edges
> ### Aliases: mutate_edge_attrs_ws
> 
> ### ** Examples
> 
> # Create a graph with 3 edges
> # and then select edge `1`
> graph <-
+   create_graph() %>%
+   add_path(n = 4) %>%
+   set_edge_attrs(
+     edge_attr = width,
+     values = c(3.4, 2.3, 7.2)) %>%
+   select_edges(edges = 1)
> 
> # Get the graph's internal edf
> # to show which edge attributes
> # are available
> graph %>% get_edge_df()
  id from to  rel width
1  1    1  2 <NA>   3.4
2  2    2  3 <NA>   2.3
3  3    3  4 <NA>   7.2
> 
> # Mutate the `width` edge
> # attribute for the edges
> # only in the active selection
> # of edges (edge `1`); here,
> # we divide each value in the
> # selection by 2
> graph <-
+   graph %>%
+   mutate_edge_attrs_ws(
+     width = width / 2)
> 
> # Get the graph's internal
> # edf to show that the edge
> # attribute `width` had its
> # values changed
> graph %>% get_edge_df()
  id from to  rel width
1  1    1  2 <NA>   1.7
2  2    2  3 <NA>   2.3
3  3    3  4 <NA>   7.2
> 
> # Create a new edge attribute,
> # called `length`, that is the
> # log of values in `width` plus
> # 2 (and, also, round all values
> # to 2 decimal places)
> graph <-
+   graph %>%
+   clear_selection() %>%
+   select_edges(edges = 2:3) %>%
+   mutate_edge_attrs_ws(
+     length = (log(width) + 2) %>%
+                round(2))
> 
> # Get the graph's internal edf
> # to show that the edge attribute
> # values had been mutated only
> # for edges `2` and `3` (since
> # edge `1` is excluded, an NA
> # value is applied)
> graph %>% get_edge_df()
  id from to  rel width length
1  1    1  2 <NA>   1.7     NA
2  2    2  3 <NA>   2.3   2.83
3  3    3  4 <NA>   7.2   3.97
> 
> # Create a new edge attribute
> # called `area`, which is the
> # product of the `width` and
> # `length` attributes
> graph <-
+   graph %>%
+   mutate_edge_attrs_ws(
+     area = width * length)
> 
> # Get the graph's internal edf
> # to show that the edge attribute
> # values had been multiplied
> # together (with new attr `area`)
> # for nodes `2` and `3`
> graph %>% get_edge_df()
  id from to  rel width length   area
1  1    1  2 <NA>   1.7     NA     NA
2  2    2  3 <NA>   2.3   2.83  6.509
3  3    3  4 <NA>   7.2   3.97 28.584
> 
> # We can invert the selection
> # and mutate edge `1` several
> # times to get an `area` value
> # for that edge
> graph <-
+   graph %>%
+   invert_selection() %>%
+   mutate_edge_attrs_ws(
+     length = (log(width) + 5) %>%
+                round(2),
+     area = width * length)
> 
> # Get the graph's internal edf
> # to show that the 2 mutations
> # occurred for edge `1`, yielding
> # non-NA values for its edge
> # attributes without changing
> # those of the other edges
> graph %>% get_edge_df()
  id from to  rel width length   area
1  1    1  2 <NA>   1.7   5.53  9.401
2  2    2  3 <NA>   2.3   2.83  6.509
3  3    3  4 <NA>   7.2   3.97 28.584
> 
> 
> 
> 
> cleanEx()
> nameEx("mutate_node_attrs")
> ### * mutate_node_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mutate_node_attrs
> ### Title: Mutate a set of node attribute values
> ### Aliases: mutate_node_attrs
> 
> ### ** Examples
> 
> # Create a graph with 3 nodes
> graph <-
+   create_graph() %>%
+   add_path(n = 3) %>%
+   set_node_attrs(
+     node_attr = width,
+     values = c(1.4, 0.3, 1.1))
> 
> # Get the graph's internal ndf
> # to show which node attributes
> # are available
> graph %>% get_node_df()
  id type label width
1  1 <NA>     1   1.4
2  2 <NA>     2   0.3
3  3 <NA>     3   1.1
> 
> # Mutate the `width` node
> # attribute, dividing each
> # value by 2
> graph <-
+   graph %>%
+   mutate_node_attrs(
+     width = width / 2)
> 
> # Get the graph's internal
> # ndf to show that the node
> # attribute `width` had its
> # values changed
> graph %>% get_node_df()
  id type label width
1  1 <NA>     1  0.70
2  2 <NA>     2  0.15
3  3 <NA>     3  0.55
> 
> # Create a new node attribute,
> # called `length`, that is the
> # log of values in `width` plus
> # 2 (and, also, round all values
> # to 2 decimal places)
> graph <-
+   graph %>%
+   mutate_node_attrs(
+     length = (log(width) + 2) %>%
+                round(2))
> 
> # Get the graph's internal ndf
> # to show that the node attribute
> # values had been mutated
> graph %>% get_node_df()
  id type label width length
1  1 <NA>     1  0.70   1.64
2  2 <NA>     2  0.15   0.10
3  3 <NA>     3  0.55   1.40
> 
> # Create a new node attribute
> # called `area`, which is the
> # product of the `width` and
> # `length` attributes
> graph <-
+   graph %>%
+   mutate_node_attrs(
+     area = width * length)
> 
> # Get the graph's internal ndf
> # to show that the node attribute
> # values had been multiplied
> # together (with new attr `area`)
> graph %>% get_node_df()
  id type label width length  area
1  1 <NA>     1  0.70   1.64 1.148
2  2 <NA>     2  0.15   0.10 0.015
3  3 <NA>     3  0.55   1.40 0.770
> 
> 
> 
> 
> cleanEx()
> nameEx("mutate_node_attrs_ws")
> ### * mutate_node_attrs_ws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mutate_node_attrs_ws
> ### Title: Mutate node attribute values for a selection of nodes
> ### Aliases: mutate_node_attrs_ws
> 
> ### ** Examples
> 
> # Create a graph with 3 nodes
> # and then select node `1`
> graph <-
+   create_graph() %>%
+   add_path(n = 3) %>%
+   set_node_attrs(
+     node_attr = width,
+     values = c(1.4, 0.3, 1.1)) %>%
+   select_nodes(nodes = 1)
> 
> # Get the graph's internal ndf
> # to show which node attributes
> # are available
> graph %>% get_node_df()
  id type label width
1  1 <NA>     1   1.4
2  2 <NA>     2   0.3
3  3 <NA>     3   1.1
> 
> # Mutate the `width` node
> # attribute for the nodes
> # only in the active selection
> # of nodes (node `1`); here,
> # we divide each value in the
> # selection by 2
> graph <-
+   graph %>%
+   mutate_node_attrs_ws(
+     width = width / 2)
> 
> # Get the graph's internal
> # ndf to show that the node
> # attribute `width` was
> # mutated only for node `1`
> graph %>% get_node_df()
  id type label width
1  1 <NA>     1   0.7
2  2 <NA>     2   0.3
3  3 <NA>     3   1.1
> 
> # Create a new node attribute,
> # called `length`, that is the
> # log of values in `width` plus
> # 2 (and, also, round all values
> # to 2 decimal places)
> graph <-
+   graph %>%
+   clear_selection() %>%
+   select_nodes(nodes = 2:3) %>%
+   mutate_node_attrs_ws(
+     length = (log(width) + 2) %>%
+                round(2))
> 
> # Get the graph's internal ndf
> # to show that the node attribute
> # values had been mutated only
> # for nodes `2` and `3` (since
> # node `1` is excluded, an NA
> # value is applied)
> graph %>% get_node_df()
  id type label width length
1  1 <NA>     1   0.7     NA
2  2 <NA>     2   0.3    0.8
3  3 <NA>     3   1.1    2.1
> 
> # Create a new node attribute
> # called `area`, which is the
> # product of the `width` and
> # `length` attributes
> graph <-
+   graph %>%
+   mutate_node_attrs_ws(
+     area = width * length)
> 
> # Get the graph's internal ndf
> # to show that the node attribute
> # values had been multiplied
> # together (with new attr `area`)
> # for nodes `2` and `3`
> graph %>% get_node_df()
  id type label width length area
1  1 <NA>     1   0.7     NA   NA
2  2 <NA>     2   0.3    0.8 0.24
3  3 <NA>     3   1.1    2.1 2.31
> 
> # We can invert the selection
> # and mutate node `1` several
> # times to get an `area` value
> # for that node
> graph <-
+   graph %>%
+   invert_selection() %>%
+   mutate_node_attrs_ws(
+     length = (log(width) + 5) %>%
+                round(2),
+     area = width * length)
> 
> # Get the graph's internal ndf
> # to show that the 2 mutations
> # occurred for node `1`, yielding
> # non-NA values for its node
> # attributes without changing
> # those of the other nodes
> graph %>% get_node_df()
  id type label width length  area
1  1 <NA>     1   0.7   4.64 3.248
2  2 <NA>     2   0.3   0.80 0.240
3  3 <NA>     3   1.1   2.10 2.310
> 
> 
> 
> 
> cleanEx()
> nameEx("node_aes")
> ### * node_aes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: node_aes
> ### Title: Insert node aesthetic attributes during node creation
> ### Aliases: node_aes
> 
> ### ** Examples
> 
> # Create a new graph and add
> # a path with several node
> # aesthetic attributes
> graph <-
+   create_graph() %>%
+   add_path(
+     n = 3,
+     type = "path",
+     node_aes = node_aes(
+       shape = "circle",
+       x = c(1, 3, 2),
+       y = c(4, -1, 3)
+     )
+   )
> 
> # View the graph's internal
> # node data frame; the node
> # aesthetic attributes have
> # been inserted
> graph %>% get_node_df()
  id type label  shape x  y
1  1 path     1 circle 1  4
2  2 path     2 circle 3 -1
3  3 path     3 circle 2  3
> 
> # Create a new graph which is
> # fully connected
> graph <-
+   create_graph() %>%
+   add_full_graph(
+     n = 4,
+     node_data = node_data(value = 1:4),
+     node_aes = node_aes(
+       x = c(2, 1, 3, 2),
+       y = c(3, 2, 2, 1)
+     ),
+     edge_aes = edge_aes(color = "blue")
+   )
> 
> 
> 
> cleanEx()
> nameEx("node_data")
> ### * node_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: node_data
> ### Title: Insert node data attributes during node creation
> ### Aliases: node_data
> 
> ### ** Examples
> 
> # Create a new graph and add
> # a path with several node
> # data attributes
> graph <-
+   create_graph() %>%
+   add_path(
+     n = 3,
+     type = "path",
+     node_data = node_data(
+       hour = 5,
+       index = c(1, 3, 2)))
> 
> # View the graph's internal
> # node data frame; the node
> # data attributes have been
> # inserted
> graph %>% get_node_df()
  id type label hour index
1  1 path     1    5     1
2  2 path     2    5     3
3  3 path     3    5     2
> 
> 
> 
> cleanEx()
> nameEx("nudge_node_positions_ws")
> ### * nudge_node_positions_ws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nudge_node_positions_ws
> ### Title: Move layout positions of a selection of nodes
> ### Aliases: nudge_node_positions_ws
> 
> ### ** Examples
> 
> # Create a simple graph with 4 nodes
> graph <-
+   create_graph() %>%
+   add_node(
+     type = "a",
+     label = "one") %>%
+   add_node(
+     type = "a",
+     label = "two") %>%
+   add_node(
+     type = "b",
+     label = "three") %>%
+   add_node(
+     type = "b",
+     label = "four")
> 
> # Add position information to each of
> # the graph's nodes
> graph <-
+   graph %>%
+   set_node_position(
+     node = 1, x = 1, y = 1) %>%
+   set_node_position(
+     node = 2, x = 2, y = 2) %>%
+   set_node_position(
+     node = 3, x = 3, y = 3) %>%
+   set_node_position(
+     node = 4, x = 4, y = 4)
> 
> # Select all of the graph's nodes using the
> # `select_nodes()` function (and only
> # specifying the graph object)
> graph <- select_nodes(graph)
> 
> # Move the selected nodes (all the nodes,
> # in this case) 5 units to the right
> graph <-
+   graph %>%
+   nudge_node_positions_ws(
+     dx = 5, dy = 0)
> 
> # View the graph's node data frame
> graph %>% get_node_df()
  id type label x y
1  1    a   one 6 1
2  2    a   two 7 2
3  3    b three 8 3
4  4    b  four 9 4
> 
> # Now select nodes that have `type == "b"`
> # and move them in the `y` direction 2 units
> # (the graph still has an active selection
> # and so it must be cleared first)
> graph <-
+   graph %>%
+   clear_selection() %>%
+   select_nodes(
+     conditions = type == "b") %>%
+   nudge_node_positions_ws(
+     dx = 0, dy = 2)
> 
> # View the graph's node data frame
> graph %>% get_node_df()
  id type label x y
1  1    a   one 6 1
2  2    a   two 7 2
3  3    b three 8 5
4  4    b  four 9 6
> 
> 
> 
> 
> cleanEx()
> nameEx("open_graph")
> ### * open_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: open_graph
> ### Title: Read a graph or graph series from disk
> ### Aliases: open_graph
> 
> ### ** Examples
> 
> # Create an undirected GNP
> # graph with 100 nodes using
> # a probability value of 0.05
> gnp_graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_gnp_graph(
+     n = 100,
+     p = 0.05
+   )
> 
> # Save the graph to disk; use
> # the file name `gnp_graph.dgr`
> # save_graph(
> #   x = gnp_graph,
> #   file = "gnp_graph"
> # )
> 
> # To read the graph file from
> # disk, use `open_graph()`
> # gnp_graph_2 <-
> #   open_graph(
> #     file = "gnp_graph.dgr"
> #   )
> 
> 
> 
> 
> cleanEx()
> nameEx("print.dgr_graph")
> ### * print.dgr_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.dgr_graph
> ### Title: Print the graph to the terminal
> ### Aliases: print.dgr_graph
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Create a random graph using the
> ##D # `add_gnm_graph()` function
> ##D graph <-
> ##D   create_graph() %>%
> ##D   add_gnm_graph(
> ##D     n = 10,
> ##D     m = 15,
> ##D     set_seed = 23)
> ##D 
> ##D # Get a summary of the graph
> ##D graph
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("recode_edge_attrs")
> ### * recode_edge_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: recode_edge_attrs
> ### Title: Recode a set of edge attribute values
> ### Aliases: recode_edge_attrs
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 4,
+     m = 6,
+     set_seed = 23) %>%
+   set_edge_attrs(
+     edge_attr = rel,
+     values = c("a", "b", "a",
+                "c", "b", "d"))
> 
> # Get the graph's internal edf
> # to show which edge attributes
> # are available
> graph %>% get_edge_df()
  id from to rel
1  1    1  3   a
2  2    2  4   b
3  3    2  3   a
4  4    3  1   c
5  5    3  4   b
6  6    4  3   d
> 
> # Recode the `rel` node
> # attribute, creating a new edge
> # attribute called `penwidth`;
> # here, `a` is recoded to `1.0`,
> # `b` maps to `1.5`, and all
> # other values become `0.5`
> graph <-
+   graph %>%
+   recode_edge_attrs(
+     edge_attr_from = rel,
+     "a -> 1.0",
+     "b -> 1.5",
+     otherwise = 0.5,
+     edge_attr_to = penwidth)
> 
> # Get the graph's internal edf
> # to show that the node
> # attribute values had been
> # recoded and copied into a
> # new node attribute
> graph %>% get_edge_df()
  id from to rel penwidth
1  1    1  3   a      1.0
2  2    2  4   b      1.5
3  3    2  3   a      1.0
4  4    3  1   c      0.5
5  5    3  4   b      1.5
6  6    4  3   d      0.5
> 
> 
> 
> 
> cleanEx()
> nameEx("recode_node_attrs")
> ### * recode_node_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: recode_node_attrs
> ### Title: Recode a set of node attribute values
> ### Aliases: recode_node_attrs
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 5,
+     m = 10,
+     set_seed = 23) %>%
+   set_node_attrs(
+     node_attr = shape,
+     values =
+       c("circle", "hexagon",
+         "rectangle", "rectangle",
+         "circle"))
> 
> # Get the graph's internal ndf
> # to show which node
> # attributes are available
> graph %>% get_node_df()
  id type label     shape
1  1 <NA>     1    circle
2  2 <NA>     2   hexagon
3  3 <NA>     3 rectangle
4  4 <NA>     4 rectangle
5  5 <NA>     5    circle
> 
> # Recode the `shape` node
> # attribute, so that `circle`
> # is recoded to `square` and that
> # `rectangle` becomes `triangle`
> graph <-
+   graph %>%
+   recode_node_attrs(
+     node_attr_from = shape,
+     "circle -> square",
+     "rectangle -> triangle")
> 
> # Get the graph's internal
> # ndf to show that the node
> # attribute values had been recoded
> graph %>% get_node_df()
  id type label    shape
1  1 <NA>     1   square
2  2 <NA>     2  hexagon
3  3 <NA>     3 triangle
4  4 <NA>     4 triangle
5  5 <NA>     5   square
> 
> # Create a new node attribute,
> # called `color`, that is based
> # on a recoding of `shape`; here,
> # map the square shape to a `red`
> # color and map all other shapes
> # to a `green` color
> graph <-
+   graph %>%
+   recode_node_attrs(
+     node_attr_from = shape,
+     "square -> red",
+     otherwise = "green",
+     node_attr_to = color)
> 
> # Get the graph's internal ndf
> # to see the change
> graph %>% get_node_df()
  id type label    shape color
1  1 <NA>     1   square   red
2  2 <NA>     2  hexagon green
3  3 <NA>     3 triangle green
4  4 <NA>     4 triangle green
5  5 <NA>     5   square   red
> 
> 
> 
> 
> cleanEx()
> nameEx("remove_graph_from_graph_series")
> ### * remove_graph_from_graph_series
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: remove_graph_from_graph_series
> ### Title: Remove a graph from a graph series
> ### Aliases: remove_graph_from_graph_series
> 
> ### ** Examples
> 
> # Create three graphs
> graph_1 <-
+   create_graph() %>%
+   add_path(n = 4)
> 
> graph_2 <-
+   create_graph() %>%
+   add_cycle(n = 5)
> 
> graph_3 <-
+   create_graph() %>%
+   add_star(n = 6)
> 
> # Create an empty graph series
> # and add the graphs
> series <-
+   create_graph_series() %>%
+   add_graph_to_graph_series(
+     graph = graph_1) %>%
+   add_graph_to_graph_series(
+     graph = graph_2) %>%
+   add_graph_to_graph_series(
+     graph = graph_3)
> 
> # Remove the second graph
> # from the graph series
> series <-
+   series %>%
+   remove_graph_from_graph_series(
+     index = 2)
> 
> # With `get_graph_series_info()`,
> # we can ensure that a graph
> # was removed
> series %>%
+   get_graph_series_info()
  graph           name           date_time            tz nodes edges directed
1     1 graph_4DmAh8Wq 2024-11-21 16:58:40 Europe/London     4     3     TRUE
2     2 graph_YrOgTiFJ 2024-11-21 16:58:40 Europe/London     6     5     TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("rename_edge_attrs")
> ### * rename_edge_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rename_edge_attrs
> ### Title: Rename an edge attribute
> ### Aliases: rename_edge_attrs
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 5,
+     m = 8,
+     set_seed = 23) %>%
+   set_edge_attrs(
+     edge_attr = color,
+     values = "green")
> 
> # Get the graph's internal edf
> # to show which edge attributes
> # are available
> graph %>% get_edge_df()
  id from to  rel color
1  1    1  3 <NA> green
2  2    2  1 <NA> green
3  3    2  5 <NA> green
4  4    2  3 <NA> green
5  5    3  2 <NA> green
6  6    3  5 <NA> green
7  7    3  4 <NA> green
8  8    5  3 <NA> green
> 
> # Rename the `color` node
> # attribute as `weight`
> graph <-
+   graph %>%
+   rename_edge_attrs(
+     edge_attr_from = color,
+     edge_attr_to = labelfontcolor)
> 
> # Get the graph's internal
> # edf to show that the edge
> # attribute had been renamed
> graph %>% get_edge_df()
  id from to  rel labelfontcolor
1  1    1  3 <NA>          green
2  2    2  1 <NA>          green
3  3    2  5 <NA>          green
4  4    2  3 <NA>          green
5  5    3  2 <NA>          green
6  6    3  5 <NA>          green
7  7    3  4 <NA>          green
8  8    5  3 <NA>          green
> 
> 
> 
> 
> cleanEx()
> nameEx("rename_node_attrs")
> ### * rename_node_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rename_node_attrs
> ### Title: Rename a node attribute
> ### Aliases: rename_node_attrs
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 5,
+     m = 8,
+     set_seed = 23) %>%
+   set_node_attrs(
+     node_attr = shape,
+     values = "circle") %>%
+   set_node_attrs(
+     node_attr = value,
+     values = rnorm(
+       n = count_nodes(.),
+       mean = 5,
+       sd = 1) %>% round(1))
> 
> # Get the graph's internal ndf
> # to show which node attributes
> # are available
> graph %>% get_node_df()
  id type label  shape value
1  1 <NA>     1 circle   5.2
2  2 <NA>     2 circle   5.3
3  3 <NA>     3 circle   4.4
4  4 <NA>     4 circle   5.8
5  5 <NA>     5 circle   5.9
> 
> # Rename the `value` node
> # attribute as `weight`
> graph <-
+   graph %>%
+   rename_node_attrs(
+     node_attr_from = value,
+     node_attr_to = weight)
> 
> # Get the graph's internal
> # ndf to show that the node
> # attribute had been renamed
> graph %>% get_node_df()
  id type label  shape weight
1  1 <NA>     1 circle    5.2
2  2 <NA>     2 circle    5.3
3  3 <NA>     3 circle    4.4
4  4 <NA>     4 circle    5.8
5  5 <NA>     5 circle    5.9
> 
> 
> 
> 
> cleanEx()
> nameEx("render_graph")
> ### * render_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: render_graph
> ### Title: Render the graph in various formats
> ### Aliases: render_graph
> 
> ### ** Examples
> 
> if (interactive()) {
+ 
+   # Render a graph that's a
+   # balanced tree
+   create_graph() %>%
+     add_balanced_tree(
+       k = 2, h = 3
+     ) %>%
+     render_graph()
+ 
+   # Use the `tree` layout for
+   # better node placement in this
+   # hierarchical graph
+   create_graph() %>%
+     add_balanced_tree(
+       k = 2, h = 3
+     ) %>%
+     render_graph(layout = "tree")
+ 
+   # Plot the same tree graph but
+   # don't show the node ID values
+   create_graph() %>%
+     add_balanced_tree(
+       k = 2, h = 3
+     ) %>%
+     set_node_attr_to_display() %>%
+     render_graph(layout = "tree")
+ 
+   # Create a circle graph
+   create_graph() %>%
+     add_gnm_graph(
+       n = 55,
+       m = 75,
+       set_seed = 23
+     ) %>%
+     render_graph(
+       layout = "circle"
+     )
+ 
+   # Render the graph using the
+   # `visNetwork` output option
+   create_graph() %>%
+     add_balanced_tree(
+       k = 2, h = 3
+     ) %>%
+     render_graph(
+       output = "visNetwork"
+     )
+ }
> 
> 
> 
> 
> cleanEx()
> nameEx("render_graph_from_graph_series")
> ### * render_graph_from_graph_series
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: render_graph_from_graph_series
> ### Title: Render a graph available in a series
> ### Aliases: render_graph_from_graph_series
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Create three graphs
> ##D graph_1 <-
> ##D   create_graph() %>%
> ##D   add_path(n = 4)
> ##D 
> ##D graph_2 <-
> ##D   create_graph() %>%
> ##D   add_cycle(n = 5)
> ##D 
> ##D graph_3 <-
> ##D   create_graph() %>%
> ##D   add_star(n = 6)
> ##D 
> ##D # Create an empty graph series
> ##D # and add the graphs
> ##D series <-
> ##D   create_graph_series() %>%
> ##D   add_graph_to_graph_series(
> ##D     graph = graph_1) %>%
> ##D   add_graph_to_graph_series(
> ##D     graph = graph_2) %>%
> ##D   add_graph_to_graph_series(
> ##D     graph = graph_3)
> ##D 
> ##D # View the second graph in
> ##D # the series in the Viewer
> ##D render_graph_from_graph_series(
> ##D   graph_series = series,
> ##D   graph_no = 2)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("reorder_graph_actions")
> ### * reorder_graph_actions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reorder_graph_actions
> ### Title: Reorder the stored series of graph actions
> ### Aliases: reorder_graph_actions
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 4,
+     m = 4,
+     set_seed = 23)
> 
> # Add three graph actions to the
> # graph
> graph <-
+   graph %>%
+   add_graph_action(
+     fcn = "rescale_node_attrs",
+     node_attr_from = "pagerank",
+     node_attr_to = "width",
+     action_name = "pgrnk_to_width") %>%
+   add_graph_action(
+     fcn = "set_node_attr_w_fcn",
+     node_attr_fcn = "get_pagerank",
+     column_name = "pagerank",
+     action_name = "get_pagerank") %>%
+   add_graph_action(
+     fcn = "colorize_node_attrs",
+     node_attr_from = "width",
+     node_attr_to = "fillcolor",
+     action_name = "pgrnk_fillcolor")
> 
> # View the graph actions for the graph
> # object by using the function called
> # `get_graph_actions()`
> graph %>% get_graph_actions()
# A tibble: 3 × 3
  action_index action_name     expression                                       
         <int> <chr>           <chr>                                            
1            1 pgrnk_to_width  rescale_node_attrs(graph = graph, node_attr_from…
2            2 get_pagerank    set_node_attr_w_fcn(graph = graph, node_attr_fcn…
3            3 pgrnk_fillcolor colorize_node_attrs(graph = graph, node_attr_fro…
> 
> # We note that the order isn't
> # correct and that the `get_pagerank`
> # action should be the 1st action
> # and `pgrnk_to_width` should go
> # in 2nd place; to fix this, use the
> # function `reorder_graph_actions()`
> # and specify the reordering with a
> # numeric vector
> graph <-
+   graph %>%
+   reorder_graph_actions(
+     indices = c(2, 1, 3))
> 
> # View the graph actions for the graph
> # object once again to verify that
> # we have the desired order of actions
> graph %>% get_graph_actions()
# A tibble: 3 × 3
  action_index action_name     expression                                       
         <int> <chr>           <chr>                                            
1            1 get_pagerank    set_node_attr_w_fcn(graph = graph, node_attr_fcn…
2            2 pgrnk_to_width  rescale_node_attrs(graph = graph, node_attr_from…
3            3 pgrnk_fillcolor colorize_node_attrs(graph = graph, node_attr_fro…
> 
> 
> 
> 
> cleanEx()
> nameEx("replace_in_spec")
> ### * replace_in_spec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: replace_in_spec
> ### Title: Razor-like template for diagram specification
> ### Aliases: replace_in_spec
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # a simple example to use a LETTER as a node label
> ##D spec <- "
> ##D   digraph { '@1' }
> ##D 
> ##D  [1]: LETTERS[1]
> ##D "
> ##D grViz(replace_in_spec(spec))
> ##D 
> ##D 
> ##D spec <- "
> ##D digraph a_nice_graph {
> ##D node [fontname = Helvetica]
> ##D a [label = '@1']
> ##D b [label = '@2-1']
> ##D c [label = '@2-2']
> ##D d [label = '@2-3']
> ##D e [label = '@2-4']
> ##D f [label = '@2-5']
> ##D g [label = '@2-6']
> ##D h [label = '@2-7']
> ##D i [label = '@2-8']
> ##D j [label = '@2-9']
> ##D a -> { b c d e f g h i j}
> ##D }
> ##D 
> ##D [1]: 'top'
> ##D [2]: 10:20
> ##D "
> ##D grViz(replace_in_spec(spec))
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("rescale_edge_attrs")
> ### * rescale_edge_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rescale_edge_attrs
> ### Title: Rescale numeric edge attribute values
> ### Aliases: rescale_edge_attrs
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 10,
+     m = 7,
+     set_seed = 23) %>%
+   set_edge_attrs(
+     edge_attr = weight,
+     values = rnorm(
+       n = count_edges(.),
+       mean = 5,
+       sd = 1))
> 
> # Get the graph's internal edf
> # to show which edge attributes
> # are available
> graph %>% get_edge_df()
  id from to  rel   weight
1  1    2  8 <NA> 5.045437
2  2    4  2 <NA> 6.575780
3  3    4  6 <NA> 5.218288
4  4    4  9 <NA> 3.953465
5  5    6  5 <NA> 4.711311
6  6    6 10 <NA> 5.481550
7  7   10  9 <NA> 3.783624
> 
> # Rescale the `weight` edge
> # attribute, so that its values
> # are rescaled between 0 and 1
> graph <-
+   graph %>%
+   rescale_edge_attrs(
+     edge_attr_from = weight,
+     to_lower_bound = 0,
+     to_upper_bound = 1)
> 
> # Get the graph's internal edf
> # to show that the edge attribute
> # values had been rescaled
> graph %>% get_edge_df()
  id from to  rel weight
1  1    2  8 <NA>  0.452
2  2    4  2 <NA>  1.000
3  3    4  6 <NA>  0.514
4  4    4  9 <NA>  0.061
5  5    6  5 <NA>  0.332
6  6    6 10 <NA>  0.608
7  7   10  9 <NA>  0.000
> 
> # Scale the values in the `weight`
> # edge attribute to different
> # shades of gray for the `color`
> # edge attribute and different
> # numerical values for the
> # `penwidth` attribute
> graph <-
+   graph %>%
+   rescale_edge_attrs(
+     edge_attr_from = weight,
+     to_lower_bound = "gray80",
+     to_upper_bound = "gray20",
+     edge_attr_to = color) %>%
+   rescale_edge_attrs(
+     edge_attr_from = weight,
+     to_lower_bound = 0.5,
+     to_upper_bound = 3,
+     edge_attr_to = penwidth)
> 
> # Get the graph's internal edf
> # once more to show that scaled
> # grayscale colors are now available
> # in `color` and scaled numerical
> # values are in the `penwidth`
> # edge attribute
> graph %>% get_edge_df()
  id from to  rel weight   color penwidth
1  1    2  8 <NA>  0.452 #838383    1.630
2  2    4  2 <NA>  1.000 #333333    3.000
3  3    4  6 <NA>  0.514 #797979    1.785
4  4    4  9 <NA>  0.061 #C2C2C2    0.652
5  5    6  5 <NA>  0.332 #959595    1.330
6  6    6 10 <NA>  0.608 #6B6B6B    2.020
7  7   10  9 <NA>  0.000 #CCCCCC    0.500
> 
> 
> 
> 
> cleanEx()
> nameEx("rescale_node_attrs")
> ### * rescale_node_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rescale_node_attrs
> ### Title: Rescale numeric node attribute values
> ### Aliases: rescale_node_attrs
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 5,
+     m = 10,
+     set_seed = 23) %>%
+   set_node_attrs(
+     node_attr = value,
+     values = rnorm(
+       n = count_nodes(.),
+       mean = 5,
+       sd = 1) %>% round(1))
> 
> # Get the graph's internal ndf
> # to show which node attributes
> # are available
> graph %>% get_node_df()
  id type label value
1  1 <NA>     1   5.3
2  2 <NA>     2   4.4
3  3 <NA>     3   5.8
4  4 <NA>     4   5.9
5  5 <NA>     5   6.2
> 
> # Rescale the `value` node
> # attribute, so that its values
> # are rescaled between 0 and 1
> graph <-
+   graph %>%
+   rescale_node_attrs(
+     node_attr_from = value,
+     to_lower_bound = 0,
+     to_upper_bound = 1)
> 
> # Get the graph's internal ndf
> # to show that the node attribute
> # values had been rescaled
> graph %>% get_node_df()
  id type label value
1  1 <NA>     1 0.500
2  2 <NA>     2 0.000
3  3 <NA>     3 0.778
4  4 <NA>     4 0.833
5  5 <NA>     5 1.000
> 
> # Scale the values in the `value`
> # node attribute to different
> # shades of gray for the `fillcolor`
> # and `fontcolor` node attributes
> graph <-
+   graph %>%
+   rescale_node_attrs(
+     node_attr_from = value,
+     to_lower_bound = "gray80",
+     to_upper_bound = "gray20",
+     node_attr_to = fillcolor) %>%
+   rescale_node_attrs(
+     node_attr_from = value,
+     to_lower_bound = "gray5",
+     to_upper_bound = "gray95",
+     node_attr_to = fontcolor)
> 
> # Get the graph's internal ndf
> # once more to show that scaled
> # grayscale colors are now available
> # in the `fillcolor` and `fontcolor`
> # node attributes
> graph %>% get_node_df()
  id type label value fillcolor fontcolor
1  1 <NA>     1 0.500   #7B7B7B   #767676
2  2 <NA>     2 0.000   #CCCCCC   #0D0D0D
3  3 <NA>     3 0.778   #525252   #B9B9B9
4  4 <NA>     4 0.833   #4A4A4A   #C7C7C7
5  5 <NA>     5 1.000   #333333   #F2F2F2
> 
> 
> 
> 
> cleanEx()
> nameEx("rev_edge_dir")
> ### * rev_edge_dir
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rev_edge_dir
> ### Title: Reverse the direction of all edges in a graph
> ### Aliases: rev_edge_dir
> 
> ### ** Examples
> 
> # Create a graph with a
> # directed tree
> graph <-
+   create_graph() %>%
+   add_balanced_tree(
+     k = 2, h = 2)
> 
> # Inspect the graph's edges
> graph %>% get_edges()
[1] "1->2" "1->3" "2->4" "2->5" "3->6" "3->7"
> 
> # Reverse the edge directions
> # such that edges are directed
> # toward the root of the tree
> graph <-
+   graph %>%
+   rev_edge_dir()
> 
> # Inspect the graph's edges
> # after their reversal
> graph %>% get_edges()
[1] "2->1" "3->1" "4->2" "5->2" "6->3" "7->3"
> 
> 
> 
> 
> cleanEx()
> nameEx("rev_edge_dir_ws")
> ### * rev_edge_dir_ws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rev_edge_dir_ws
> ### Title: Reverse the direction of selected edges in a graph using an edge
> ###   selection
> ### Aliases: rev_edge_dir_ws
> 
> ### ** Examples
> 
> # Create a graph with a
> # directed tree
> graph <-
+   create_graph() %>%
+   add_balanced_tree(
+     k = 2, h = 2)
> 
> # Inspect the graph's edges
> graph %>% get_edges()
[1] "1->2" "1->3" "2->4" "2->5" "3->6" "3->7"
> 
> # Select all edges associated
> # with nodes `1` and `2`
> graph <-
+   graph %>%
+   select_edges_by_node_id(
+     nodes = 1:2)
> 
> # Reverse the edge directions
> # of the edges associated with
> # nodes `1` and `2`
> graph <-
+   graph %>%
+   rev_edge_dir_ws()
> 
> # Inspect the graph's edges
> # after their reversal
> graph %>% get_edges()
[1] "2->1" "3->1" "4->2" "5->2" "3->6" "3->7"
> 
> 
> 
> 
> cleanEx()
> nameEx("save_graph")
> ### * save_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: save_graph
> ### Title: Save a graph or graph series to disk
> ### Aliases: save_graph
> 
> ### ** Examples
> 
> # Create an undirected GNP
> # graph with 100 nodes using
> # a probability value of 0.05
> gnp_graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_gnp_graph(
+     n = 100,
+     p = 0.05)
> 
> # Save the graph to disk; use
> # the file name `gnp_graph.dgr`
> # save_graph(
> #   x = gnp_graph,
> #   file = "gnp_graph"
> # )
> 
> # To read the graph file from
> # disk, use `open_graph()`
> # gnp_graph_2 <-
> #   open_graph(
> #     file = "gnp_graph.dgr"
> # )
> 
> 
> 
> 
> cleanEx()
> nameEx("select_edges")
> ### * select_edges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: select_edges
> ### Title: Select edges in a graph
> ### Aliases: select_edges
> 
> ### ** Examples
> 
> # Create a node data frame (ndf)
> ndf <-
+   create_node_df(
+     n = 4,
+     type = "basic",
+     label = TRUE,
+     value = c(3.5, 2.6, 9.4, 2.7))
> 
> # Create an edge data frame (edf)
> edf <-
+   create_edge_df(
+     from = c(1, 2, 3),
+     to = c(4, 3, 1),
+     rel = c("a", "z", "a"),
+     value = c(6.4, 2.9, 5.0))
> 
> # Create a graph with the ndf and edf
> graph <-
+   create_graph(
+     nodes_df = ndf,
+     edges_df = edf)
> 
> # Explicitly select the edge `1`->`4`
> graph <-
+   graph %>%
+   select_edges(
+     from = 1,
+     to = 4)
> 
> # Verify that an edge selection has been made
> # using the `get_selection()` function
> graph %>% get_selection()
[1] 1
> 
> # Select edges based on the relationship label
> # being `z`
> graph <-
+   graph %>%
+   clear_selection() %>%
+   select_edges(
+     conditions = rel == "z")
> 
> # Verify that an edge selection has been made, and
> # recall that the `2`->`3` edge uniquely has the
> # `z` relationship label
> graph %>% get_selection()
[1] 2
> 
> # Select edges based on the edge value attribute
> # being greater than 3.0 (first clearing the current
> # selection of edges)
> graph <-
+   graph %>%
+   clear_selection() %>%
+   select_edges(
+     conditions = value > 3.0)
> 
> # Verify that the correct edge selection has been
> # made; in this case, edges `1`->`4` and
> # `3`->`1` have values for `value` > 3.0
> graph %>% get_selection()
[1] 1 3
> 
> 
> 
> 
> cleanEx()
> nameEx("select_edges_by_edge_id")
> ### * select_edges_by_edge_id
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: select_edges_by_edge_id
> ### Title: Select edges in a graph using edge ID values
> ### Aliases: select_edges_by_edge_id
> 
> ### ** Examples
> 
> # Create a graph with 5 nodes
> graph <-
+   create_graph() %>%
+   add_path(n = 5)
> 
> # Create a graph selection by selecting
> # edges with edge IDs `1` and `2`
> graph <-
+   graph %>%
+   select_edges_by_edge_id(
+     edges = 1:2)
> 
> # Get the selection of edges
> graph %>% get_selection()
[1] 1 2
> 
> # Perform another selection of edges,
> # with edge IDs `1`, `2`, and `4`
> graph <-
+   graph %>%
+   clear_selection() %>%
+   select_edges_by_edge_id(
+     edges = c(1, 2, 4))
> 
> # Get the selection of edges
> graph %>% get_selection()
[1] 1 2 4
> 
> # Get the fraction of edges selected
> # over all the edges in the graph
> graph %>%
+   {
+     l <- get_selection(.) %>%
+       length(.)
+     e <- count_edges(.)
+     l/e
+   }
[1] 0.75
> 
> 
> 
> 
> cleanEx()
> nameEx("select_edges_by_node_id")
> ### * select_edges_by_node_id
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: select_edges_by_node_id
> ### Title: Select edges in a graph using node ID values
> ### Aliases: select_edges_by_node_id
> 
> ### ** Examples
> 
> # Create a graph with 5 nodes
> graph <-
+   create_graph() %>%
+   add_path(n = 5)
> 
> # Create a graph selection by selecting edges
> # associated with nodes `1` and `2`
> graph <-
+   graph %>%
+   select_edges_by_node_id(
+     nodes = 1:2)
> 
> # Get the selection of edges
> graph %>% get_selection()
[1] 1 2
> 
> # Perform another selection of edges, with nodes
> # `1`, `2`, and `4`
> graph <-
+   graph %>%
+   clear_selection() %>%
+   select_edges_by_node_id(
+     nodes = c(1, 2, 4))
> 
> # Get the selection of edges
> graph %>% get_selection()
[1] 1 2 3 4
> 
> # Get a fraction of the edges selected over all
> # the edges in the graph
> graph %>%
+   {
+     l <- get_selection(.) %>%
+       length(.)
+     e <- count_edges(.)
+     l/e
+   }
[1] 1
> 
> 
> 
> 
> cleanEx()
> nameEx("select_last_edges_created")
> ### * select_last_edges_created
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: select_last_edges_created
> ### Title: Select the last set of edges created in a graph
> ### Aliases: select_last_edges_created
> 
> ### ** Examples
> 
> # Create a graph and add a cycle and then
> # a tree in 2 separate function calls
> graph <-
+   create_graph() %>%
+   add_cycle(
+     n = 3,
+     rel = "a") %>%
+   add_balanced_tree(
+     k = 2, h = 2,
+     rel = "b")
> 
> # Select the last edges created (all edges
> # from the tree) and then set their edge
> # color to be `red`
> graph <-
+   graph %>%
+   select_last_edges_created() %>%
+   set_edge_attrs_ws(
+     edge_attr = color,
+     value = "red") %>%
+   clear_selection()
> 
> # Display the graph's internal edge
> # data frame to verify the change
> graph %>% get_edge_df()
  id from to rel color
1  1    1  2   a  <NA>
2  2    2  3   a  <NA>
3  3    3  1   a  <NA>
4  4    4  5   b   red
5  5    4  6   b   red
6  6    5  7   b   red
7  7    5  8   b   red
8  8    6  9   b   red
9  9    6 10   b   red
> 
> 
> 
> 
> cleanEx()
> nameEx("select_last_nodes_created")
> ### * select_last_nodes_created
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: select_last_nodes_created
> ### Title: Select the last set of nodes created in a graph
> ### Aliases: select_last_nodes_created
> 
> ### ** Examples
> 
> # Create a graph and add 4 nodes
> # in 2 separate function calls
> graph <-
+   create_graph() %>%
+   add_n_nodes(
+     n = 2,
+     type = "a",
+     label = c("a_1", "a_2")) %>%
+   add_n_nodes(
+     n = 2,
+     type = "b",
+     label = c("b_1", "b_2"))
> 
> # Select the last nodes created (2 nodes
> # from the last function call) and then
> # set their color to be `red`
> graph <-
+   graph %>%
+   select_last_nodes_created() %>%
+   set_node_attrs_ws(
+     node_attr = color,
+     value = "red") %>%
+   clear_selection()
> 
> # Display the graph's internal node
> # data frame to verify the change
> graph %>% get_node_df()
  id type label color
1  1    a   a_1  <NA>
2  2    a   a_2  <NA>
3  3    b   b_1   red
4  4    b   b_2   red
> 
> 
> 
> 
> cleanEx()
> nameEx("select_nodes")
> ### * select_nodes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: select_nodes
> ### Title: Select nodes in a graph
> ### Aliases: select_nodes
> 
> ### ** Examples
> 
> # Create a node data frame (ndf)
> ndf <-
+   create_node_df(
+     n = 4,
+     type = c("a", "a", "z", "z"),
+     label = TRUE,
+     value = c(3.5, 2.6, 9.4, 2.7))
> 
> # Create an edge data frame (edf)
> edf <-
+   create_edge_df(
+     from = c(1, 2, 3),
+     to = c(4, 3, 1),
+     rel = c("a", "z", "a"))
> 
> # Create a graph with the ndf and edf
> graph <-
+   create_graph(
+     nodes_df = ndf,
+     edges_df = edf)
> 
> # Explicitly select nodes `1` and `3`
> graph <-
+   graph %>%
+   select_nodes(nodes = c(1, 3))
> 
> # Verify that the node selection has been made
> # using the `get_selection()` function
> graph %>% get_selection()
[1] 1 3
> 
> # Select nodes based on the node `type`
> # being `z`
> graph <-
+   graph %>%
+   clear_selection() %>%
+   select_nodes(
+     conditions = type == "z")
> 
> # Verify that an node selection has been made, and
> # recall that the `3` and `4` nodes are of the
> # `z` type
> graph %>% get_selection()
[1] 3 4
> 
> # Select edges based on the node value attribute
> # being greater than 3.0 (first clearing the current
> # selection of nodes)
> graph <-
+   graph %>%
+   clear_selection() %>%
+   select_nodes(
+     conditions = value > 3.0)
> 
> # Verify that the correct node selection has been
> # made; in this case, nodes `1` and `3` have values
> # for `value` greater than 3.0
> graph %>% get_selection()
[1] 1 3
> 
> 
> 
> 
> cleanEx()
> nameEx("select_nodes_by_degree")
> ### * select_nodes_by_degree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: select_nodes_by_degree
> ### Title: Select nodes in the graph based on their degree values
> ### Aliases: select_nodes_by_degree
> 
> ### ** Examples
> 
> # Create a random graph using
> # the `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 35, m = 125,
+     set_seed = 23)
> 
> # Report which nodes have a
> # total degree (in-degree +
> # out-degree) of exactly 9
> graph %>%
+   select_nodes_by_degree(
+     expressions = "deg == 9") %>%
+   get_selection()
[1]  5 10 26 31
> 
> # Report which nodes have a
> # total degree greater than or
> # equal to 9
> graph %>%
+   select_nodes_by_degree(
+     expressions = "deg >= 9") %>%
+   get_selection()
 [1]  1  2  4  5 10 12 18 25 26 31
> 
> # Combine two calls of
> # `select_nodes_by_degree()` to
> # get those nodes with total
> # degree less than 3 and total
> # degree greater than 10 (by
> # default, those `select...()`
> # functions will `union` the
> # sets of nodes selected)
> graph %>%
+   select_nodes_by_degree(
+     expressions = "deg < 3") %>%
+   select_nodes_by_degree(
+     expressions = "deg > 10") %>%
+   get_selection()
[1] 1 2
> 
> # Combine two calls of
> # `select_nodes_by_degree()` to
> # get those nodes with total
> # degree greater than or equal
> # to 3 and less than or equal
> # to 10 (the key here is to
> # `intersect` the sets of nodes
> # selected in the second call)
> graph %>%
+   select_nodes_by_degree(
+     expressions = "deg >= 3") %>%
+   select_nodes_by_degree(
+     expressions = "deg <= 10",
+     set_op = "intersect") %>%
+   get_selection()
 [1]  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
[26] 28 29 30 31 32 33 34 35
> 
> # Select all nodes with an
> # in-degree greater than 5, then,
> # apply a node attribute to those
> # selected nodes (coloring the
> # selected nodes red)
> graph_2 <-
+   graph %>%
+   select_nodes_by_degree(
+     expressions = "indeg > 5") %>%
+   set_node_attrs_ws(
+     node_attr = color,
+     value = "red")
> 
> # Get the selection of nodes
> graph_2 %>% get_selection()
[1]  1  4 13 25 35
> 
> 
> 
> 
> cleanEx()
> nameEx("select_nodes_by_id")
> ### * select_nodes_by_id
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: select_nodes_by_id
> ### Title: Select nodes in a graph by their ID values
> ### Aliases: select_nodes_by_id
> 
> ### ** Examples
> 
> # Create a node data frame (ndf)
> ndf <- create_node_df(n = 10)
> 
> # Create a graph
> graph <-
+   create_graph(
+     nodes_df = ndf)
> 
> # Select nodes `1` to `5` and show that
> # selection of nodes with `get_selection()`
> graph %>%
+   select_nodes_by_id(nodes = 1:5) %>%
+   get_selection()
[1] 1 2 3 4 5
> 
> 
> 
> 
> cleanEx()
> nameEx("select_nodes_in_neighborhood")
> ### * select_nodes_in_neighborhood
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: select_nodes_in_neighborhood
> ### Title: Select nodes based on a walk distance from a specified node
> ### Aliases: select_nodes_in_neighborhood
> 
> ### ** Examples
> 
> # Create a graph containing
> # a balanced tree
> graph <-
+   create_graph() %>%
+   add_balanced_tree(
+     k = 2, h = 2)
> 
> # Create a graph selection by
> # selecting nodes in the
> # neighborhood of node `1`, where
> # the neighborhood is limited by
> # nodes that are 1 connection
> # away from node `1`
> graph <-
+   graph %>%
+   select_nodes_in_neighborhood(
+     node = 1,
+     distance = 1)
> 
> # Get the selection of nodes
> graph %>% get_selection()
[1] 1 2 3
> 
> # Perform another selection
> # of nodes, this time with a
> # neighborhood spanning 2 nodes
> # from node `1`
> graph <-
+   graph %>%
+   clear_selection() %>%
+   select_nodes_in_neighborhood(
+     node = 1,
+     distance = 2)
> 
> # Get the selection of nodes
> graph %>% get_selection()
[1] 1 2 3 4 5 6 7
> 
> 
> 
> 
> cleanEx()
> nameEx("set_cache")
> ### * set_cache
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_cache
> ### Title: Cache a vector in the graph
> ### Aliases: set_cache
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 10,
+     m = 22,
+     set_seed = 23
+   )
> 
> # Get the closeness values for
> # all nodes from `1` to `10` and
> # store in the graph's cache
> graph <-
+   graph %>%
+   set_cache(
+     name = "closeness_vector",
+     to_cache = get_closeness(.),
+     col = "closeness"
+   )
> 
> # Get the graph's cache
> graph %>%
+   get_cache(name = "closeness_vector")
 [1] 0.07692308 0.08333333 0.07692308 0.06666667 0.05555556 0.06250000
 [7] 0.06666667 0.05000000 0.06666667 0.04761905
> 
> # Get the difference of betweenness
> # and closeness values for nodes in
> # the graph and store the vector in
> # the graph's cache
> graph <-
+   graph %>%
+   set_cache(
+     name = "difference",
+     to_cache =
+       get_betweenness(.)$betweenness -
+         get_closeness(.)$closeness
+   )
> 
> # Get the graph's cache
> graph %>%
+   get_cache(name = "difference")
 [1]  9.25641026 28.91666667 19.08974359  2.60000000  0.44444444 17.93750000
 [7] 11.93333333 -0.05000000 10.26666667 -0.04761905
> 
> 
> 
> 
> cleanEx()
> nameEx("set_edge_attr_to_display")
> ### * set_edge_attr_to_display
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_edge_attr_to_display
> ### Title: Set the edge attribute values to be rendered
> ### Aliases: set_edge_attr_to_display
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 4,
+     m = 4,
+     set_seed = 23) %>%
+   set_edge_attrs(
+     edge_attr = value,
+     values = c(2.5, 8.2, 4.2, 2.4))
> 
> # For edge ID values of `1`,
> # `2`, and `3`, choose to display
> # the edge `value` attribute (for
> # the other edges, display nothing)
> graph <-
+   graph %>%
+   set_edge_attr_to_display(
+     edges = 1:3,
+     attr = value,
+     default = NA)
> 
> # Show the graph's edge data frame; the
> # `display` edge attribute will show, for
> # each row, which edge attribute value to
> # display when the graph is rendered
> graph %>% get_edge_df()
  id from to  rel display value
1  1    2  1 <NA>   value   2.5
2  2    3  1 <NA>   value   8.2
3  3    3  2 <NA>   value   4.2
4  4    4  3 <NA>    <NA>   2.4
> 
> # This function can be called multiple
> # times on a graph; after the first time
> # (i.e., creation of the `display`
> # attribute), the `default` value won't
> # be used
> graph %>%
+   set_edge_attr_to_display(
+     edges = 4,
+     attr = to) %>%
+   set_edge_attr_to_display(
+     edges = c(1, 3),
+     attr = id) %>%
+   get_edge_df()
  id from to  rel display value
1  1    2  1 <NA>      id   2.5
2  2    3  1 <NA>   value   8.2
3  3    3  2 <NA>      id   4.2
4  4    4  3 <NA>      to   2.4
> 
> 
> 
> 
> cleanEx()
> nameEx("set_edge_attrs")
> ### * set_edge_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_edge_attrs
> ### Title: Set edge attribute values
> ### Aliases: set_edge_attrs
> 
> ### ** Examples
> 
> # Create a simple graph
> ndf <-
+   create_node_df(
+     n = 4,
+     type = "basic",
+     label = TRUE,
+     value = c(3.5, 2.6, 9.4, 2.7))
> 
> edf <-
+   create_edge_df(
+     from = c(1, 2, 3),
+     to = c(4, 3, 1),
+     rel = "leading_to")
> 
> graph <-
+   create_graph(
+     nodes_df = ndf,
+     edges_df = edf)
> 
> # Set attribute `color = "green"`
> # for edges `1`->`4` and `3`->`1`
> # in the graph
> graph <-
+   graph %>%
+   set_edge_attrs(
+     edge_attr = color,
+     values = "green",
+     from = c(1, 3),
+     to = c(4, 1))
> 
> # Set attribute `color = "blue"`
> # for all edges in the graph
> graph <-
+   graph %>%
+   set_edge_attrs(
+     edge_attr = color,
+     values = "blue")
> 
> # Set attribute `color = "pink"`
> # for all edges in graph outbound
> # from node with ID value `1`
> graph <-
+   graph %>%
+   set_edge_attrs(
+     edge_attr = color,
+     values = "pink",
+     from = 1)
> 
> # Set attribute `color = "black"`
> # for all edges in graph inbound
> # to node with ID `1`
> graph <-
+   graph %>%
+   set_edge_attrs(
+     edge_attr = color,
+     values = "black",
+     to = 1)
> 
> 
> 
> 
> cleanEx()
> nameEx("set_edge_attrs_ws")
> ### * set_edge_attrs_ws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_edge_attrs_ws
> ### Title: Set edge attributes with an edge selection
> ### Aliases: set_edge_attrs_ws
> 
> ### ** Examples
> 
> # Create a simple graph
> graph <-
+   create_graph() %>%
+   add_path(n = 6)
> 
> # Select specific edges from
> # the graph and apply the edge
> # attribute `color = blue` to
> # those selected edges
> graph <-
+   graph %>%
+   select_nodes_by_id(nodes = 2:4) %>%
+   trav_out_edge() %>%
+   set_edge_attrs_ws(
+     edge_attr = color,
+     value = "blue")
> 
> # Show the internal edge data
> # frame to verify that the
> # edge attribute has been set
> # for specific edges
> graph %>% get_edge_df()
  id from to  rel color
1  1    1  2 <NA>  <NA>
2  2    2  3 <NA>  blue
3  3    3  4 <NA>  blue
4  4    4  5 <NA>  blue
5  5    5  6 <NA>  <NA>
> 
> 
> 
> 
> cleanEx()
> nameEx("set_graph_directed")
> ### * set_graph_directed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_graph_directed
> ### Title: Convert an undirected graph to a directed graph
> ### Aliases: set_graph_directed
> 
> ### ** Examples
> 
> # Create a graph with a
> # undirected tree
> graph <-
+   create_graph(
+     directed = FALSE) %>%
+   add_balanced_tree(
+     k = 2, h = 2)
> 
> # Convert this graph from
> # undirected to directed
> graph <-
+   graph %>%
+   set_graph_directed()
> 
> # Perform a check on whether
> # graph is directed
> graph %>% is_graph_directed()
[1] TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("set_graph_name")
> ### * set_graph_name
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_graph_name
> ### Title: Set graph name
> ### Aliases: set_graph_name
> 
> ### ** Examples
> 
> # Create an empty graph
> graph <- create_graph()
> 
> # Provide the new graph with a name
> graph <-
+   graph %>%
+   set_graph_name(
+     name = "example_name")
> 
> 
> 
> 
> cleanEx()
> nameEx("set_graph_time")
> ### * set_graph_time
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_graph_time
> ### Title: Set graph date-time and timezone
> ### Aliases: set_graph_time
> 
> ### ** Examples
> 
> # Create an empty graph
> graph <- create_graph()
> 
> # Provide the new graph with a timestamp (if `tz`
> # is not supplied, `GMT` is used as the time zone)
> graph_1 <-
+   graph %>%
+   set_graph_time(time = "2015-10-25 15:23:00")
> 
> # Provide the new graph with a timestamp that is
> # the current time; the time zone is inferred from
> # the user's locale
> graph_2 <-
+   graph %>%
+   set_graph_time()
> 
> # The time zone can be updated when a timestamp
> # is present
> graph_2 <-
+   graph_2 %>%
+   set_graph_time(tz = "America/Los_Angeles")
> 
> 
> 
> 
> cleanEx()
> nameEx("set_graph_undirected")
> ### * set_graph_undirected
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_graph_undirected
> ### Title: Convert a directed graph to an undirected graph
> ### Aliases: set_graph_undirected
> 
> ### ** Examples
> 
> # Create a graph with a
> # directed tree
> graph <-
+   create_graph() %>%
+   add_balanced_tree(
+     k = 2, h = 2)
> 
> # Convert this graph from
> # directed to undirected
> graph <-
+   graph %>%
+   set_graph_undirected()
> 
> # Perform a check on whether
> # graph is directed
> graph %>% is_graph_directed()
[1] FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("set_node_attr_to_display")
> ### * set_node_attr_to_display
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_node_attr_to_display
> ### Title: Set the node attribute values to be rendered
> ### Aliases: set_node_attr_to_display
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 4,
+     m = 4,
+     set_seed = 23) %>%
+   set_node_attrs(
+     node_attr = value,
+     values = c(2.5, 8.2, 4.2, 2.4))
> 
> # For node ID values of `1`,
> # `2`, and `3`, choose to display
> # the node `value` attribute (for
> # the other nodes, display nothing)
> graph <-
+   graph %>%
+   set_node_attr_to_display(
+     nodes = 1:3,
+     attr = value,
+     default = NA)
> 
> # Show the graph's node data frame; the
> # `display` node attribute will show for
> # each row, which node attribute value to
> # display when the graph is rendered
> graph %>% get_node_df()
  id type label display value
1  1 <NA>     1   value   2.5
2  2 <NA>     2   value   8.2
3  3 <NA>     3   value   4.2
4  4 <NA>     4    <NA>   2.4
> 
> # This function can be called multiple
> # times on a graph; after the first time
> # (i.e., creation of the `display`
> # attribute), the `default` value won't
> # be used
> graph %>%
+   set_node_attr_to_display(
+     nodes = 4,
+     attr = label) %>%
+   set_node_attr_to_display(
+     nodes = c(1, 3),
+     attr = id) %>%
+   get_node_df()
  id type label display value
1  1 <NA>     1      id   2.5
2  2 <NA>     2   value   8.2
3  3 <NA>     3      id   4.2
4  4 <NA>     4   label   2.4
> 
> 
> 
> 
> cleanEx()
> nameEx("set_node_attr_w_fcn")
> ### * set_node_attr_w_fcn
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_node_attr_w_fcn
> ### Title: Set node attribute values with a graph function
> ### Aliases: set_node_attr_w_fcn
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 10,
+     m = 22,
+     set_seed = 23) %>%
+   set_node_attrs(
+     node_attr = value,
+     values = rnorm(
+       n = count_nodes(.),
+       mean = 5,
+       sd = 1) %>% round(1))
> 
> # Get the betweenness values for
> # each of the graph's nodes as a
> # node attribute
> graph_1 <-
+   graph %>%
+   set_node_attr_w_fcn(
+     node_attr_fcn = "get_betweenness")
> 
> # Inspect the graph's internal
> # node data frame
> graph_1 %>% get_node_df()
   id type label value betweenness__A
1   1 <NA>     1   4.4       9.333333
2   2 <NA>     2   4.6      29.000000
3   3 <NA>     3   5.9      19.166667
4   4 <NA>     4   6.5       2.666667
5   5 <NA>     5   4.1       0.500000
6   6 <NA>     6   3.6      18.000000
7   7 <NA>     7   5.4      12.000000
8   8 <NA>     8   5.8       0.000000
9   9 <NA>     9   4.7      10.333333
10 10 <NA>    10   5.7       0.000000
> 
> # If a specified function takes argument
> # values, these can be supplied as well
> graph_2 <-
+   graph %>%
+   set_node_attr_w_fcn(
+     node_attr_fcn = "get_alpha_centrality",
+     alpha = 2,
+     exo = 2)
> 
> # Inspect the graph's internal
> # node data frame
> graph_2 %>% get_node_df()
   id type label value alpha_centrality__A
1   1 <NA>     1   4.4           0.0621118
2   2 <NA>     2   4.6          -0.5341615
3   3 <NA>     3   5.9          -0.8157350
4   4 <NA>     4   6.5          -0.6997930
5   5 <NA>     5   4.1           1.0641822
6   6 <NA>     6   3.6          -0.8737060
7   7 <NA>     7   5.4          -0.6832298
8   8 <NA>     8   5.8           0.9316770
9   9 <NA>     9   4.7          -0.4679089
10 10 <NA>    10   5.7           0.3685300
> 
> # The new column name can be provided
> graph_3 <-
+   graph %>%
+   set_node_attr_w_fcn(
+     node_attr_fcn = "get_pagerank",
+     column_name = "pagerank")
> 
> # Inspect the graph's internal
> # node data frame
> graph_3 %>% get_node_df()
   id type label value pagerank
1   1 <NA>     1   4.4   0.1416
2   2 <NA>     2   4.6   0.1401
3   3 <NA>     3   5.9   0.1262
4   4 <NA>     4   6.5   0.0637
5   5 <NA>     5   4.1   0.0478
6   6 <NA>     6   3.6   0.1976
7   7 <NA>     7   5.4   0.1318
8   8 <NA>     8   5.8   0.0422
9   9 <NA>     9   4.7   0.0693
10 10 <NA>    10   5.7   0.0398
> 
> # If `graph_3` is modified by
> # adding a new node then the column
> # `pagerank` will have stale data; we
> # can run the function again and re-use
> # the existing column name to provide
> # updated values
> graph_3 <-
+   graph_3 %>%
+   add_node(
+     from = 1,
+     to = 3) %>%
+   set_node_attr_w_fcn(
+     node_attr_fcn = "get_pagerank",
+     column_name = "pagerank")
> 
> # Inspect the graph's internal
> # node data frame
> graph_3 %>% get_node_df()
   id type label value pagerank
1   1 <NA>     1   4.4   0.1349
2   2 <NA>     2   4.6   0.1352
3   3 <NA>     3   5.9   0.1585
4   4 <NA>     4   6.5   0.0670
5   5 <NA>     5   4.1   0.0461
6   6 <NA>     6   3.6   0.1300
7   7 <NA>     7   5.4   0.1014
8   8 <NA>     8   5.8   0.0400
9   9 <NA>     9   4.7   0.0685
10 10 <NA>    10   5.7   0.0440
11 11 <NA>  <NA>    NA   0.0744
> 
> 
> 
> 
> cleanEx()
> nameEx("set_node_attrs")
> ### * set_node_attrs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_node_attrs
> ### Title: Set node attribute values
> ### Aliases: set_node_attrs
> 
> ### ** Examples
> 
> # Create a node data frame (ndf)
> ndf <-
+   create_node_df(
+     n = 4,
+     type = "basic",
+     label = TRUE,
+     value = c(3.5, 2.6, 9.4, 2.7))
> 
> # Create an edge data frame (edf)
> edf <-
+   create_edge_df(
+     from = c(1, 2, 3),
+     to = c(4, 3, 1),
+     rel = "leading_to")
> 
> # Create a graph
> graph <-
+   create_graph(
+     nodes_df = ndf,
+     edges_df = edf)
> 
> # Set attribute `color = "green"` for
> # nodes `1` and `3` using the graph object
> graph <-
+   graph %>%
+   set_node_attrs(
+     node_attr = color,
+     values = "green",
+     nodes = c(1, 3))
> 
> # View the graph's node data frame
> graph %>% get_node_df()
  id  type label value color
1  1 basic     1   3.5 green
2  2 basic     2   2.6  <NA>
3  3 basic     3   9.4 green
4  4 basic     4   2.7  <NA>
> 
> # Set attribute `color = "blue"` for
> # all nodes in the graph
> graph <-
+   graph %>%
+   set_node_attrs(
+     node_attr = color,
+     values = "blue")
> 
> # Display the graph's ndf
> graph %>% get_node_df()
  id  type label value color
1  1 basic     1   3.5  blue
2  2 basic     2   2.6  blue
3  3 basic     3   9.4  blue
4  4 basic     4   2.7  blue
> 
> 
> 
> 
> cleanEx()
> nameEx("set_node_attrs_ws")
> ### * set_node_attrs_ws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_node_attrs_ws
> ### Title: Set node attributes with a node selection
> ### Aliases: set_node_attrs_ws
> 
> ### ** Examples
> 
> # Create a simple graph
> graph <-
+   create_graph() %>%
+   add_path(n = 6)
> 
> # Select specific nodes from the graph and
> # apply the node attribute `color = blue` to
> # those selected nodes
> graph <-
+   graph %>%
+   select_nodes_by_id(
+     nodes = 1:4) %>%
+   trav_out() %>%
+   set_node_attrs_ws(
+     node_attr = color,
+     value = "blue")
> 
> # Show the internal node data frame to verify
> # that the node attribute has been set for
> # specific node
> graph %>% get_node_df()
  id type label color
1  1 <NA>     1  <NA>
2  2 <NA>     2  blue
3  3 <NA>     3  blue
4  4 <NA>     4  blue
5  5 <NA>     5  blue
6  6 <NA>     6  <NA>
> 
> 
> 
> 
> cleanEx()
> nameEx("set_node_position")
> ### * set_node_position
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_node_position
> ### Title: Apply a layout position to a single node
> ### Aliases: set_node_position
> 
> ### ** Examples
> 
> # Create a simple graph with 4 nodes
> graph <-
+   create_graph() %>%
+   add_node(label = "one") %>%
+   add_node(label = "two") %>%
+   add_node(label = "three") %>%
+   add_node(label = "four")
> 
> # Add position information to each of
> # the graph's nodes
> graph <-
+   graph %>%
+   set_node_position(
+     node = 1,
+     x = 1, y = 1) %>%
+   set_node_position(
+     node = 2,
+     x = 2, y = 2) %>%
+   set_node_position(
+     node = 3,
+     x = 3, y = 3) %>%
+   set_node_position(
+     node = 4,
+     x = 4, y = 4)
> 
> # View the graph's node data frame to
> # verify that the `x` and `y` node
> # attributes are available and set to
> # the values provided
> graph %>% get_node_df()
  id type label x y
1  1 <NA>   one 1 1
2  2 <NA>   two 2 2
3  3 <NA> three 3 3
4  4 <NA>  four 4 4
> 
> # The same function can modify the data
> # in the `x` and `y` attributes
> graph <-
+   graph %>%
+   set_node_position(
+     node = 1,
+     x = 1, y = 4) %>%
+   set_node_position(
+     node = 2,
+     x = 3, y = 3) %>%
+   set_node_position(
+     node = 3,
+     x = 3, y = 2) %>%
+   set_node_position(
+     node = 4,
+     x = 4, y = 1)
> 
> # View the graph's node data frame
> graph %>% get_node_df()
  id type label x y
1  1 <NA>   one 1 4
2  2 <NA>   two 3 3
3  3 <NA> three 3 2
4  4 <NA>  four 4 1
> 
> # Position changes can also be made by
> # supplying a node `label` value (and setting
> # `use_labels` to TRUE). For this to work,
> # all `label` values in the graph's ndf must
> # be unique and non-NA
> graph <-
+   graph %>%
+   set_node_position(
+     node = "one",
+     x = 1, y = 1,
+     use_labels = TRUE) %>%
+   set_node_position(
+     node = "two",
+     x = 2, y = 2,
+     use_labels = TRUE)
> 
> # View the graph's node data frame
> graph %>% get_node_df()
  id type label x y
1  1 <NA>   one 1 1
2  2 <NA>   two 2 2
3  3 <NA> three 3 2
4  4 <NA>  four 4 1
> 
> 
> 
> 
> cleanEx()
> nameEx("to_igraph")
> ### * to_igraph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: to_igraph
> ### Title: Convert a DiagrammeR graph to an igraph one
> ### Aliases: to_igraph
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 36,
+     m = 50,
+     set_seed = 23)
> 
> # Confirm that `graph` is a
> # DiagrammeR graph by getting
> # the object's class
> class(graph)
[1] "dgr_graph"
> 
> # Convert the DiagrammeR graph
> # to an igraph object
> ig_graph <- to_igraph(graph)
> 
> # Get the class of the converted
> # graph, just to be certain
> class(ig_graph)
[1] "igraph"
> 
> # Get a summary of the igraph
> # graph object
> summary(ig_graph)
IGRAPH aad6cd9 DN-B 36 50 -- 
+ attr: name (v/c), type (v/c), label (v/c), rel (e/c)
> 
> 
> 
> 
> cleanEx()
> nameEx("transform_to_complement_graph")
> ### * transform_to_complement_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: transform_to_complement_graph
> ### Title: Create a complement of a graph
> ### Aliases: transform_to_complement_graph
> 
> ### ** Examples
> 
> # Create a simple graph
> # with a single cycle
> graph <-
+   create_graph() %>%
+   add_cycle(n = 4)
> 
> # Get the graph's edge
> # data frame
> graph %>% get_edge_df()
  id from to  rel
1  1    1  2 <NA>
2  2    2  3 <NA>
3  3    3  4 <NA>
4  4    4  1 <NA>
> 
> # Create the complement
> # of the graph
> graph_c <-
+   graph %>%
+     transform_to_complement_graph()
> 
> # Get the edge data frame
> # for the complement graph
> graph_c %>% get_edge_df()
  id from to  rel
1  1    1  4 <NA>
2  2    1  3 <NA>
3  3    2  4 <NA>
4  4    2  1 <NA>
5  5    3  2 <NA>
6  6    3  1 <NA>
7  7    4  3 <NA>
8  8    4  2 <NA>
> 
> 
> 
> 
> cleanEx()
> nameEx("transform_to_min_spanning_tree")
> ### * transform_to_min_spanning_tree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: transform_to_min_spanning_tree
> ### Title: Get a minimum spanning tree subgraph
> ### Aliases: transform_to_min_spanning_tree
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 10,
+     m = 15,
+     set_seed = 23)
> 
> # Obtain Jaccard similarity
> # values for each pair of
> # nodes as a square matrix
> j_sim_matrix <-
+   graph %>%
+     get_jaccard_similarity()
> 
> # Create a weighted, undirected
> # graph from the resultant matrix
> # (effectively treating that
> # matrix as an adjacency matrix)
> graph <-
+   j_sim_matrix %>%
+   from_adj_matrix(weighted = TRUE)
> 
> # The graph in this case is a fully connected graph
> # with loops, where jaccard similarity values are
> # assigned as edge weights (edge attribute `weight`);
> # The minimum spanning tree for this graph is the
> # connected subgraph where the edges retained have
> # the lowest similarity values possible
> min_spanning_tree_graph <-
+   graph %>%
+   transform_to_min_spanning_tree() %>%
+   copy_edge_attrs(
+     edge_attr_from = weight,
+     edge_attr_to = label) %>%
+   set_edge_attrs(
+     edge_attr = fontname,
+     values = "Helvetica") %>%
+   set_edge_attrs(
+     edge_attr = color,
+     values = "gray85") %>%
+   rescale_edge_attrs(
+     edge_attr_from = weight,
+     to_lower_bound = 0.5,
+     to_upper_bound = 4.0,
+       edge_attr_to = penwidth)
> 
> 
> 
> 
> cleanEx()
> nameEx("transform_to_subgraph_ws")
> ### * transform_to_subgraph_ws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: transform_to_subgraph_ws
> ### Title: Create a subgraph using a node or edge selection
> ### Aliases: transform_to_subgraph_ws
> 
> ### ** Examples
> 
> # Create a node data frame (ndf)
> ndf <-
+   create_node_df(
+     n = 6,
+     value =
+       c(3.5, 2.6, 9.4,
+         2.7, 5.2, 2.1))
> 
> # Create an edge data frame (edf)
> edf <-
+   create_edge_df(
+     from = c(1, 2, 4, 5, 2, 6, 2),
+       to = c(2, 4, 1, 3, 5, 5, 4))
> 
> # Create a graph
> graph <-
+   create_graph(
+     nodes_df = ndf,
+     edges_df = edf)
> 
> # Create a selection of nodes, this selects
> # nodes `1`, `3`, and `5`
> graph <-
+   graph %>%
+   select_nodes(
+     conditions = value > 3)
> 
> # Create a subgraph based on the selection
> subgraph <-
+   graph %>%
+   transform_to_subgraph_ws()
> 
> # Display the graph's node data frame
> subgraph %>% get_node_df()
  id type label value
1  1 <NA>  <NA>   3.5
2  3 <NA>  <NA>   9.4
3  5 <NA>  <NA>   5.2
> 
> # Display the graph's edge data frame
> subgraph %>% get_edge_df()
  id from to  rel
1  4    5  3 <NA>
> 
> # Create a selection of edges, this selects
> # edges `1`, `2`
> graph <-
+   graph %>%
+   clear_selection() %>%
+   select_edges(
+   edges = c(1,2))
> 
> # Create a subgraph based on the selection
> subgraph <-
+   graph %>%
+   transform_to_subgraph_ws()
> 
> # Display the graph's node data frame
> subgraph %>% get_node_df()
  id type label value
1  1 <NA>  <NA>   3.5
2  2 <NA>  <NA>   2.6
3  4 <NA>  <NA>   2.7
> 
> # Display the graph's edge data frame
> subgraph %>% get_edge_df()
  id from to  rel
1  1    1  2 <NA>
2  2    2  4 <NA>
> 
> 
> 
> 
> cleanEx()
> nameEx("trav_both")
> ### * trav_both
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trav_both
> ### Title: Traverse from one or more selected nodes onto neighboring nodes
> ### Aliases: trav_both
> 
> ### ** Examples
> 
> # Set a seed
> suppressWarnings(RNGversion("3.5.0"))
> set.seed(23)
> 
> # Create a simple graph
> graph <-
+   create_graph() %>%
+   add_n_nodes(
+     n = 2,
+     type = "a",
+     label = c("asd", "iekd")) %>%
+   add_n_nodes(
+     n = 3,
+     type = "b",
+     label = c("idj", "edl", "ohd")) %>%
+   add_edges_w_string(
+     edges = "1->2 1->3 2->4 2->5 3->5",
+     rel = c(NA, "A", "B", "C", "D"))
> 
> # Create a data frame with node ID values
> # representing the graph edges (with `from`
> # and `to` columns), and, a set of numeric values
> df_edges <-
+   data.frame(
+     from = c(1, 1, 2, 2, 3),
+     to = c(2, 3, 4, 5, 5),
+     values = round(rnorm(5, 5), 2))
> 
> # Create a data frame with node ID values
> # representing the graph nodes (with the `id`
> # columns), and, a set of numeric values
> df_nodes <-
+   data.frame(
+     id = 1:5,
+     values = round(rnorm(5, 7), 2))
> 
> # Join the data frame to the graph's internal
> # edge data frame (edf)
> graph <-
+   graph %>%
+   join_edge_attrs(df = df_edges) %>%
+   join_node_attrs(df = df_nodes)
> 
> # Show the graph's internal node data frame
> graph %>% get_node_df()
  id type label values
1  1    a   asd   8.58
2  2    a  iekd   7.22
3  3    b   idj   5.95
4  4    b   edl   6.71
5  5    b   ohd   7.48
> 
> # Show the graph's internal edge data frame
> graph %>% get_edge_df()
  id from to  rel values
1  1    1  2 <NA>   6.00
2  2    1  3    A   6.11
3  3    2  4    B   4.72
4  4    2  5    C   6.02
5  5    3  5    D   5.05
> 
> # Perform a simple traversal from node `3`
> # to adjacent nodes with no conditions on
> # the nodes traversed to
> graph %>%
+   select_nodes_by_id(nodes = 3) %>%
+   trav_both() %>%
+   get_selection()
[1] 1 5
> 
> # Traverse from node `2` to any adjacent
> # nodes, filtering to those nodes that have
> # numeric values less than `8.0` for
> # the `values` node attribute
> graph %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_both(
+     conditions = values < 8.0) %>%
+   get_selection()
[1] 4 5
> 
> # Traverse from node `5` to any adjacent
> # nodes, filtering to those nodes that
> # have a `type` attribute of `b`
> graph %>%
+   select_nodes_by_id(nodes = 5) %>%
+   trav_both(
+     conditions = type == "b") %>%
+   get_selection()
[1] 3
> 
> # Traverse from node `2` to any adjacent
> # nodes, and use multiple conditions for the
> # traversal
> graph %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_both(
+     conditions =
+       type == "a" &
+       values > 8.0) %>%
+   get_selection()
[1] 1
> 
> # Traverse from node `2` to any adjacent
> # nodes, and use multiple conditions with
> # a single-length vector
> graph %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_both(
+     conditions =
+       type == "a" | values > 8.0) %>%
+   get_selection()
[1] 1
> 
> # Traverse from node `2` to any adjacent
> # nodes, and use a regular expression as
> # a filtering condition
> graph %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_both(
+     conditions = grepl("..d", label)) %>%
+   get_selection()
[1] 1 5
> 
> # Create another simple graph to demonstrate
> # copying of node attribute values to traversed
> # nodes
> graph <-
+   create_graph() %>%
+   add_path(n = 5) %>%
+   select_nodes_by_id(nodes = c(2, 4)) %>%
+   set_node_attrs_ws(
+     node_attr = value,
+     value = 5)
> 
> # Show the graph's internal node data frame
> graph %>% get_node_df()
  id type label value
1  1 <NA>     1    NA
2  2 <NA>     2     5
3  3 <NA>     3    NA
4  4 <NA>     4     5
5  5 <NA>     5    NA
> 
> # Show the graph's internal edge data frame
> graph %>% get_edge_df()
  id from to  rel
1  1    1  2 <NA>
2  2    2  3 <NA>
3  3    3  4 <NA>
4  4    4  5 <NA>
> 
> # Perform a traversal from the inner nodes
> # (`2` and `4`) to their adjacent nodes (`1`,
> # `3`, and `5`) while also applying the node
> # attribute `value` to target nodes; node `3`
> # will obtain a `value` of 10 since a traversal
> # to `3` will occur from `2` and `4` (and
> # multiple values passed will be summed)
> graph <-
+   graph %>%
+   trav_both(
+     copy_attrs_from = value,
+     agg = "sum")
> 
> # Show the graph's internal node data frame
> # after this change
> graph %>% get_node_df()
  id type label value
1  1 <NA>     1     5
2  3 <NA>     3    10
3  5 <NA>     5     5
4  2 <NA>     2     5
5  4 <NA>     4     5
> 
> 
> 
> 
> cleanEx()
> nameEx("trav_both_edge")
> ### * trav_both_edge
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trav_both_edge
> ### Title: Traverse from one or more selected nodes onto adjacent edges
> ### Aliases: trav_both_edge
> 
> ### ** Examples
> 
> # Set a seed
> suppressWarnings(RNGversion("3.5.0"))
> set.seed(23)
> 
> # Create a simple graph
> graph <-
+   create_graph() %>%
+   add_n_nodes(
+     n = 2,
+     type = "a",
+     label = c("asd", "iekd")) %>%
+   add_n_nodes(
+     n = 3,
+     type = "b",
+     label = c("idj", "edl", "ohd")) %>%
+   add_edges_w_string(
+     edges = "1->2 1->3 2->4 2->5 3->5",
+     rel = c(NA, "A", "B", "C", "D"))
> 
> # Create a data frame with node ID values
> # representing the graph edges (with `from`
> # and `to` columns), and, a set of numeric values
> df <-
+   data.frame(
+     from = c(1, 1, 2, 2, 3),
+     to = c(2, 3, 4, 5, 5),
+     values = round(rnorm(5, 5), 2))
> 
> # Join the data frame to the graph's internal
> # edge data frame (edf)
> graph <-
+   graph %>%
+   join_edge_attrs(df = df)
> 
> # Show the graph's internal edge data frame
> graph %>% get_edge_df()
  id from to  rel values
1  1    1  2 <NA>   6.00
2  2    1  3    A   6.11
3  3    2  4    B   4.72
4  4    2  5    C   6.02
5  5    3  5    D   5.05
> 
> # Perform a simple traversal from nodes to
> # adjacent edges with no conditions on the
> # nodes traversed to
> graph %>%
+   select_nodes_by_id(nodes = 3) %>%
+   trav_both_edge() %>%
+   get_selection()
[1] 2 5
> 
> # Traverse from node `2` to any adjacent
> # edges, filtering to those edges that have
> # NA values for the `rel` edge attribute
> graph %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_both_edge(
+     conditions = is.na(rel)) %>%
+   get_selection()
[1] 1
> 
> # Traverse from node `2` to any adjacent
> # edges, filtering to those edges that have
> # numeric values greater than `6.5` for
> # the `rel` edge attribute
> graph %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_both_edge(
+     conditions = values > 6.5) %>%
+   get_selection()
[1] 2
> 
> # Traverse from node `5` to any adjacent
> # edges, filtering to those edges that
> # have values equal to `C` for the `rel`
> # edge attribute
> graph %>%
+   select_nodes_by_id(nodes = 5) %>%
+   trav_both_edge(
+     conditions = rel == "C") %>%
+   get_selection()
[1] 4
> 
> # Traverse from node `2` to any adjacent
> # edges, filtering to those edges that
> # have values in the set `B` and `C` for
> # the `rel` edge attribute
> graph %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_both_edge(
+     conditions = rel %in% c("B", "C")) %>%
+   get_selection()
[1] 3 4
> 
> # Traverse from node `2` to any adjacent
> # edges, and use multiple conditions for the
> # traversal
> graph %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_both_edge(
+     conditions =
+       rel %in% c("B", "C") &
+       values > 4.0) %>%
+   get_selection()
[1] 3 4
> 
> # Traverse from node `2` to any adjacent
> # edges, and use multiple conditions with
> # a single-length vector
> graph %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_both_edge(
+     conditions =
+       rel %in% c("B", "C") |
+       values > 4.0) %>%
+   get_selection()
[1] 1 3 4
> 
> # Traverse from node `2` to any adjacent
> # edges, and use a regular expression as
> # a filtering condition
> graph %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_both_edge(
+     conditions = grepl("B|C", rel)) %>%
+   get_selection()
[1] 3 4
> 
> # Create another simple graph to demonstrate
> # copying of node attribute values to traversed
> # edges
> graph <-
+   create_graph() %>%
+   add_path(n = 4) %>%
+   select_nodes_by_id(nodes = 2:3) %>%
+   set_node_attrs_ws(
+     node_attr = value,
+     value = 5)
> 
> # Show the graph's internal edge data frame
> graph %>%get_edge_df()
  id from to  rel
1  1    1  2 <NA>
2  2    2  3 <NA>
3  3    3  4 <NA>
> 
> # Show the graph's internal node data frame
> graph %>% get_node_df()
  id type label value
1  1 <NA>     1    NA
2  2 <NA>     2     5
3  3 <NA>     3     5
4  4 <NA>     4    NA
> 
> # Perform a traversal from the nodes to
> # the adjacent edges while also applying
> # the node attribute `value` to the edges (in
> # this case summing the `value` of 5 from
> # all contributing nodes adding as an edge
> # attribute)
> graph <-
+   graph %>%
+   trav_both_edge(
+     copy_attrs_from = value,
+     agg = "sum")
> 
> # Show the graph's internal edge data frame
> # after this change
> graph %>% get_edge_df()
  id from to  rel value
1  1    1  2 <NA>     5
2  2    2  3 <NA>    10
3  3    3  4 <NA>     5
> 
> 
> 
> 
> cleanEx()
> nameEx("trav_in")
> ### * trav_in
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trav_in
> ### Title: Traverse from one or more selected nodes onto adjacent, inward
> ###   nodes
> ### Aliases: trav_in
> 
> ### ** Examples
> 
> # Set a seed
> suppressWarnings(RNGversion("3.5.0"))
> set.seed(23)
> 
> # Create a simple graph
> graph <-
+   create_graph() %>%
+   add_n_nodes(
+     n = 2,
+     type = "a",
+     label = c("asd", "iekd")) %>%
+   add_n_nodes(
+     n = 3,
+     type = "b",
+     label = c("idj", "edl", "ohd")) %>%
+   add_edges_w_string(
+     edges = "1->2 1->3 2->4 2->5 3->5",
+     rel = c(NA, "A", "B", "C", "D"))
> 
> # Create a data frame with node ID values
> # representing the graph edges (with `from`
> # and `to` columns), and, a set of numeric values
> df_edges <-
+   data.frame(
+     from = c(1, 1, 2, 2, 3),
+     to = c(2, 3, 4, 5, 5),
+     values = round(rnorm(5, 5), 2))
> 
> # Create a data frame with node ID values
> # representing the graph nodes (with the `id`
> # columns), and, a set of numeric values
> df_nodes <-
+   data.frame(
+     id = 1:5,
+     values = round(rnorm(5, 7), 2))
> 
> # Join the data frame to the graph's internal
> # edge data frame (edf)
> graph <-
+   graph %>%
+   join_edge_attrs(df = df_edges) %>%
+   join_node_attrs(df = df_nodes)
> 
> # Show the graph's internal node data frame
> graph %>% get_node_df()
  id type label values
1  1    a   asd   8.58
2  2    a  iekd   7.22
3  3    b   idj   5.95
4  4    b   edl   6.71
5  5    b   ohd   7.48
> 
> # Show the graph's internal edge data frame
> graph %>% get_edge_df()
  id from to  rel values
1  1    1  2 <NA>   6.00
2  2    1  3    A   6.11
3  3    2  4    B   4.72
4  4    2  5    C   6.02
5  5    3  5    D   5.05
> 
> # Perform a simple traversal from node `4` to
> # inward adjacent edges with no conditions
> # on the nodes traversed to
> graph %>%
+   select_nodes_by_id(nodes = 4) %>%
+   trav_in() %>%
+   get_selection()
[1] 2
> 
> # Traverse from node `5` to inbound-facing
> # nodes, filtering to those nodes that have
> # numeric values greater than `5.0` for
> # the `values` node attribute
> graph %>%
+   select_nodes_by_id(nodes = 4) %>%
+   trav_in(
+     conditions = values > 5.0) %>%
+   get_selection()
[1] 2
> 
> # Traverse from node `5` to any inbound
> # nodes, filtering to those nodes that
> # have a `type` attribute of `b`
> graph %>%
+   select_nodes_by_id(nodes = 5) %>%
+   trav_in(
+     conditions = type == "b") %>%
+   get_selection()
[1] 3
> 
> # Traverse from node `5` to any inbound
> # nodes, filtering to those nodes that
> # have a degree of `2`
> graph %>%
+   {
+   node_degrees <-
+     get_node_info(.) %>%
+     dplyr::select(id, deg)
+   join_node_attrs(., node_degrees)
+   } %>%
+   select_nodes_by_id(nodes = 5) %>%
+   trav_in(
+     conditions = deg == 2) %>%
+   get_selection()
[1] 3
> 
> # Traverse from node `5` to any inbound
> # nodes, and use multiple conditions for the
> # traversal
> graph %>%
+   select_nodes_by_id(nodes = 5) %>%
+   trav_in(
+     conditions =
+       type == "a" &
+       values > 6.0) %>%
+   get_selection()
[1] 2
> 
> # Traverse from node `5` to any inbound
> # nodes, and use multiple conditions with
> # a single-length vector
> graph %>%
+   select_nodes_by_id(nodes = 5) %>%
+   trav_in(
+     conditions =
+       type == "b" | values > 6.0) %>%
+   get_selection()
[1] 2 3
> 
> # Traverse from node `5` to any inbound
> # nodes, and use a regular expression as
> # a filtering condition
> graph %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_in(
+     conditions = grepl("^i.*", label)) %>%
+   get_selection()
[1] 2
> 
> # Create another simple graph to demonstrate
> # copying of node attribute values to traversed
> # nodes
> graph <-
+   create_graph() %>%
+   add_node() %>%
+   select_nodes() %>%
+   add_n_nodes_ws(
+     n = 2,
+     direction = "from") %>%
+   clear_selection() %>%
+   select_nodes_by_id(nodes = 2:3) %>%
+   set_node_attrs_ws(
+     node_attr = value,
+     value = 5)
> 
> # Show the graph's internal node data frame
> graph %>% get_node_df()
  id type label value
1  1 <NA>  <NA>    NA
2  2 <NA>  <NA>     5
3  3 <NA>  <NA>     5
> 
> # Show the graph's internal edge data frame
> graph %>% get_edge_df()
  id from to  rel
1  1    1  2 <NA>
2  2    1  3 <NA>
> 
> # Perform a traversal from the outer nodes
> # (`2` and `3`) to the central node (`1`) while
> # also applying the node attribute `value` to
> # node `1` (summing the `value` of 5 from
> # both nodes before applying the value to the
> # target node)
> graph <-
+   graph %>%
+   trav_in(
+     copy_attrs_from = value,
+     agg = "sum")
> 
> # Show the graph's internal node data frame
> # after this change
> graph %>% get_node_df()
  id type label value
1  1 <NA>  <NA>    10
2  2 <NA>  <NA>     5
3  3 <NA>  <NA>     5
> 
> 
> 
> 
> cleanEx()
> nameEx("trav_in_edge")
> ### * trav_in_edge
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trav_in_edge
> ### Title: Traverse from one or more selected nodes onto adjacent, inward
> ###   edges
> ### Aliases: trav_in_edge
> 
> ### ** Examples
> 
> # Set a seed
> suppressWarnings(RNGversion("3.5.0"))
> set.seed(23)
> 
> # Create a simple graph
> graph <-
+   create_graph() %>%
+   add_n_nodes(
+     n = 2,
+     type = "a",
+     label = c("asd", "iekd")) %>%
+   add_n_nodes(
+     n = 3,
+     type = "b",
+     label = c("idj", "edl", "ohd")) %>%
+   add_edges_w_string(
+     edges = "1->2 1->3 2->4 2->5 3->5",
+     rel = c(NA, "A", "B", "C", "D"))
> 
> # Create a data frame with node ID
> # values representing the graph edges
> # (with `from` and `to` columns), and,
> # a set of numeric values
> df <-
+   data.frame(
+     from = c(1, 1, 2, 2, 3),
+     to = c(2, 3, 4, 5, 5),
+     values = round(rnorm(5, 5), 2))
> 
> # Join the data frame to the graph's
> # internal edge data frame (edf)
> graph <-
+   graph %>%
+   join_edge_attrs(df = df)
> 
> # Show the graph's internal edge data frame
> graph %>% get_edge_df()
  id from to  rel values
1  1    1  2 <NA>   6.00
2  2    1  3    A   6.11
3  3    2  4    B   4.72
4  4    2  5    C   6.02
5  5    3  5    D   5.05
> 
> # Perform a simple traversal from
> # nodes to inbound edges with no
> # conditions on the nodes
> # traversed to
> graph %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_in_edge() %>%
+   get_selection()
[1] 1
> 
> # Traverse from node `2` to any
> # inbound edges, filtering to
> # those edges that have NA values
> # for the `rel` edge attribute
> graph %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_in_edge(
+     conditions = is.na(rel)) %>%
+   get_selection()
[1] 1
> 
> # Traverse from node `2` to any
> # inbound edges, filtering to those
> # edges that do not have NA values
> # for the `rel` edge attribute
> # (since there are no allowed
> # traversals, the selection of node
> # `2` is retained)
> graph %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_in_edge(
+     conditions = !is.na(rel)) %>%
+   get_selection()
[1] 2
> 
> # Traverse from node `5` to any
> # inbound edges, filtering to those
> # edges that have numeric values
> # greater than `5.5` for the `rel`
> # edge attribute
> graph %>%
+   select_nodes_by_id(nodes = 5) %>%
+   trav_in_edge(
+     conditions = values > 5.5) %>%
+   get_selection()
[1] 4
> 
> # Traverse from node `5` to any
> # inbound edges, filtering to those
> # edges that have values equal to
> # `D` for the `rel` edge attribute
> graph %>%
+   select_nodes_by_id(nodes = 5) %>%
+   trav_in_edge(
+     conditions = rel == "D") %>%
+   get_selection()
[1] 5
> 
> # Traverse from node `5` to any
> # inbound edges, filtering to those
> # edges that have values in the set
> # `C` and `D` for the `rel` edge
> # attribute
> graph %>%
+   select_nodes_by_id(nodes = 5) %>%
+   trav_in_edge(
+     conditions = rel %in% c("C", "D")) %>%
+   get_selection()
[1] 4 5
> 
> # Traverse from node `5` to any
> # inbound edges, and use multiple
> # conditions for the traversal
> graph %>%
+   select_nodes_by_id(nodes = 5) %>%
+   trav_in_edge(
+     conditions =
+       rel %in% c("C", "D") &
+       values > 5.5) %>%
+   get_selection()
[1] 4
> 
> # Traverse from node `5` to any
> # inbound edges, and use multiple
> # conditions with a single-length
> # vector
> graph %>%
+   select_nodes_by_id(nodes = 5) %>%
+   trav_in_edge(
+     conditions =
+       rel %in% c("D", "E") |
+       values > 5.5) %>%
+   get_selection()
[1] 4 5
> 
> # Traverse from node `5` to any
> # inbound edges, and use a regular
> # expression as a filtering condition
> graph %>%
+   select_nodes_by_id(nodes = 5) %>%
+   trav_in_edge(
+     conditions = grepl("C|D", rel)) %>%
+   get_selection()
[1] 4 5
> 
> # Show the graph's internal ndf
> graph %>% get_node_df()
  id type label
1  1    a   asd
2  2    a  iekd
3  3    b   idj
4  4    b   edl
5  5    b   ohd
> 
> # Show the graph's internal edf
> graph %>% get_edge_df()
  id from to  rel values
1  1    1  2 <NA>   6.00
2  2    1  3    A   6.11
3  3    2  4    B   4.72
4  4    2  5    C   6.02
5  5    3  5    D   5.05
> 
> # Perform a traversal from all
> # nodes to their incoming edges and,
> # while doing so, copy the `label`
> # node attribute to any of the nodes'
> # incoming edges
> graph <-
+   graph %>%
+   select_nodes() %>%
+   trav_in_edge(
+     copy_attrs_from = label)
> 
> # Show the graph's internal edge
> # data frame after this change
> graph %>% get_edge_df()
  id from to  rel label values
1  1    1  2 <NA>  iekd   6.00
2  2    1  3    A   idj   6.11
3  3    2  4    B   edl   4.72
4  4    2  5    C   ohd   6.02
5  5    3  5    D   ohd   5.05
> 
> 
> 
> 
> cleanEx()
> nameEx("trav_in_node")
> ### * trav_in_node
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trav_in_node
> ### Title: Traverse from one or more selected edges onto adjacent, inward
> ###   nodes
> ### Aliases: trav_in_node
> 
> ### ** Examples
> 
> # Set a seed
> suppressWarnings(RNGversion("3.5.0"))
> set.seed(23)
> 
> # Create a simple graph
> graph <-
+   create_graph() %>%
+   add_n_nodes(
+     n = 2,
+     type = "a",
+     label = c("asd", "iekd")) %>%
+   add_n_nodes(
+     n = 3,
+     type = "b",
+     label = c("idj", "edl", "ohd")) %>%
+   add_edges_w_string(
+     edges = "1->2 1->3 2->4 2->5 3->5",
+     rel = c(NA, "A", "B", "C", "D"))
> 
> # Create a data frame with node ID values
> # representing the graph edges (with `from`
> # and `to` columns), and, a set of numeric values
> df_edges <-
+   data.frame(
+     from = c(1, 1, 2, 2, 3),
+     to = c(2, 3, 4, 5, 5),
+     values = round(rnorm(5, 5), 2))
> 
> # Create a data frame with node ID values
> # representing the graph nodes (with the `id`
> # columns), and, a set of numeric values
> df_nodes <-
+   data.frame(
+     id = 1:5,
+     values = round(rnorm(5, 7), 2))
> 
> # Join the data frame to the graph's internal
> # edge data frame (edf)
> graph <-
+   graph %>%
+   join_edge_attrs(df = df_edges) %>%
+   join_node_attrs(df = df_nodes)
> 
> # Show the graph's internal node data frame
> graph %>% get_node_df()
  id type label values
1  1    a   asd   8.58
2  2    a  iekd   7.22
3  3    b   idj   5.95
4  4    b   edl   6.71
5  5    b   ohd   7.48
> 
> # Show the graph's internal edge data frame
> graph %>% get_edge_df()
  id from to  rel values
1  1    1  2 <NA>   6.00
2  2    1  3    A   6.11
3  3    2  4    B   4.72
4  4    2  5    C   6.02
5  5    3  5    D   5.05
> 
> # Perform a simple traversal from the
> # edge `1`->`3` to the attached node
> # in the direction of the edge; here, no
> # conditions are placed on the nodes
> # traversed to
> graph %>%
+   select_edges(
+     from = 1,
+     to = 3) %>%
+   trav_in_node() %>%
+   get_selection()
[1] 3
> 
> # Traverse from edges `2`->`5` and
> # `3`->`5` to the attached node along
> # the direction of the edge; both
> # traversals lead to the same node
> graph %>%
+   select_edges(
+     from = 2,
+     to = 5) %>%
+   select_edges(
+     from = 3,
+     to = 5) %>%
+   trav_in_node() %>%
+   get_selection()
[1] 5
> 
> # Traverse from the edge `1`->`3`
> # to the attached node where the edge
> # is incoming, this time filtering
> # numeric values greater than `5.0` for
> # the `values` node attribute
> graph %>%
+   select_edges(
+     from = 1,
+     to = 3) %>%
+   trav_in_node(
+     conditions = values > 5.0) %>%
+   get_selection()
[1] 3
> 
> # Traverse from the edge `1`->`3`
> # to the attached node where the edge
> # is incoming, this time filtering
> # numeric values less than `5.0` for
> # the `values` node attribute (the
> # condition is not met so the original
> # selection of edge `1` -> `3` remains)
> graph %>%
+   select_edges(
+     from = 1,
+     to = 3) %>%
+   trav_in_node(
+     conditions = values < 5.0) %>%
+   get_selection()
[1] 2
> 
> # Traverse from the edge `1`->`2` to
> # the node `2` using multiple conditions
> # with a single-length vector
> graph %>%
+   select_edges(
+     from = 1,
+     to = 2) %>%
+   trav_in_node(
+     conditions =
+       grepl(".*d$", label) |
+       values < 6.0) %>%
+   get_selection()
[1] 2
> 
> # Create another simple graph to demonstrate
> # copying of edge attribute values to traversed
> # nodes
> graph <-
+   create_graph() %>%
+   add_node() %>%
+   select_nodes() %>%
+   add_n_nodes_ws(
+     n = 2,
+     direction = "to") %>%
+   clear_selection() %>%
+   select_nodes_by_id(nodes = 2) %>%
+   set_node_attrs_ws(
+     node_attr = value,
+     value = 8) %>%
+   clear_selection() %>%
+   select_edges_by_edge_id(edges = 1) %>%
+   set_edge_attrs_ws(
+     edge_attr = value,
+     value = 5) %>%
+   clear_selection() %>%
+   select_edges_by_edge_id(edges = 2) %>%
+   set_edge_attrs_ws(
+     edge_attr = value,
+     value = 5) %>%
+   clear_selection() %>%
+   select_edges()
> 
> # Show the graph's internal edge data frame
> graph %>% get_edge_df()
  id from to  rel value
1  1    2  1 <NA>     5
2  2    3  1 <NA>     5
> 
> # Show the graph's internal node data frame
> graph %>% get_node_df()
  id type label value
1  1 <NA>  <NA>    NA
2  2 <NA>  <NA>     8
3  3 <NA>  <NA>    NA
> 
> # Perform a traversal from the edges to
> # the central node (`1`) while also applying
> # the edge attribute `value` to the node (in
> # this case summing the `value` of 5 from
> # both edges before adding as a node attribute)
> graph <-
+   graph %>%
+   trav_in_node(
+     copy_attrs_from = value,
+     agg = "sum")
> 
> # Show the graph's internal node data frame
> # after this change
> graph %>% get_node_df()
  id type label value
1  1 <NA>  <NA>    10
2  2 <NA>  <NA>     8
3  3 <NA>  <NA>    NA
> 
> 
> 
> 
> cleanEx()
> nameEx("trav_in_until")
> ### * trav_in_until
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trav_in_until
> ### Title: Traverse inward node-by-node until stopping conditions are met
> ### Aliases: trav_in_until
> 
> ### ** Examples
> 
> # Create a path graph and add
> # values of 1 to 10 across the
> # nodes from beginning to end;
> # select the last path node
> graph <-
+   create_graph() %>%
+   add_path(
+     n = 10,
+     node_data = node_data(
+       value = 1:10)) %>%
+   select_nodes_by_id(
+     nodes = 10)
> 
> # Traverse inward, node-by-node
> # until stopping at a node where
> # the `value` attribute is 1
> graph <-
+   graph %>%
+   trav_in_until(
+     conditions =
+       value == 1)
> 
> # Get the graph's node selection
> graph %>% get_selection()
[1] 1
> 
> # Create two cycles in a graph and
> # add values of 1 to 6 to the
> # first cycle, and values 7 to
> # 12 in the second; select nodes
> # `6` and `12`
> graph <-
+   create_graph() %>%
+   add_cycle(
+     n = 6,
+     node_data = node_data(
+       value = 1:6)) %>%
+   add_cycle(
+     n = 6,
+     node_data = node_data(
+       value = 7:12)) %>%
+   select_nodes_by_id(
+     nodes = c(6, 12))
> 
> # Traverse inward, node-by-node
> # from `6` and `12` until stopping
> # at the first nodes where the
> # `value` attribute is 1, 2, or 10;
> # specify that we should only
> # keep the finally traversed to
> # nodes that satisfy the conditions
> graph <-
+   graph %>%
+   trav_in_until(
+     conditions =
+       value %in% c(1, 2, 10),
+     exclude_unmatched = TRUE)
> 
> # Get the graph's node selection
> graph %>% get_selection()
[1]  2 10
> 
> 
> 
> 
> cleanEx()
> nameEx("trav_out")
> ### * trav_out
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trav_out
> ### Title: Traverse from one or more selected nodes onto adjacent, outward
> ###   nodes
> ### Aliases: trav_out
> 
> ### ** Examples
> 
> # Set a seed
> suppressWarnings(RNGversion("3.5.0"))
> set.seed(23)
> 
> # Create a simple graph
> graph <-
+   create_graph() %>%
+   add_n_nodes(
+     n = 2,
+     type = "a",
+     label = c("asd", "iekd")) %>%
+   add_n_nodes(
+     n = 3,
+     type = "b",
+     label = c("idj", "edl", "ohd")) %>%
+   add_edges_w_string(
+     edges = "1->2 1->3 2->4 2->5 3->5",
+     rel = c(NA, "A", "B", "C", "D"))
> 
> # Create a data frame with node ID values
> # representing the graph edges (with `from`
> # and `to` columns), and, a set of numeric values
> df_edges <-
+   data.frame(
+     from = c(1, 1, 2, 2, 3),
+     to = c(2, 3, 4, 5, 5),
+     values = round(rnorm(5, 5), 2))
> 
> # Create a data frame with node ID values
> # representing the graph nodes (with the `id`
> # columns), and, a set of numeric values
> df_nodes <-
+   data.frame(
+     id = 1:5,
+     values = round(rnorm(5, 7), 2))
> 
> # Join the data frame to the graph's internal
> # edge data frame (edf)
> graph <-
+   graph %>%
+   join_edge_attrs(df = df_edges) %>%
+   join_node_attrs(df = df_nodes)
> 
> # Show the graph's internal node data frame
> graph %>% get_node_df()
  id type label values
1  1    a   asd   8.58
2  2    a  iekd   7.22
3  3    b   idj   5.95
4  4    b   edl   6.71
5  5    b   ohd   7.48
> 
> # Show the graph's internal edge data frame
> graph %>% get_edge_df()
  id from to  rel values
1  1    1  2 <NA>   6.00
2  2    1  3    A   6.11
3  3    2  4    B   4.72
4  4    2  5    C   6.02
5  5    3  5    D   5.05
> 
> # Perform a simple traversal from node `3`
> # to outward adjacent nodes with no conditions
> # on the nodes traversed to
> graph %>%
+   select_nodes_by_id(nodes = 3) %>%
+   trav_out() %>%
+   get_selection()
[1] 5
> 
> # Traverse from node `1` to outbound
> # nodes, filtering to those nodes that have
> # numeric values greater than `7.0` for
> # the `values` node attribute
> graph %>%
+   select_nodes_by_id(nodes = 1) %>%
+   trav_out(
+     conditions = values > 7.0) %>%
+   get_selection()
[1] 2
> 
> # Traverse from node `1` to any outbound
> # nodes, filtering to those nodes that
> # have a `type` attribute of `b`
> graph %>%
+   select_nodes_by_id(nodes = 1) %>%
+   trav_out(
+     conditions = type == "b") %>%
+   get_selection()
[1] 3
> 
> # Traverse from node `2` to any outbound
> # nodes, filtering to those nodes that
> # have a degree of `1`
> graph %>%
+   {
+   node_degrees <-
+     get_node_info(.) %>%
+     dplyr::select(id, deg)
+   join_node_attrs(
+     graph = .,
+     df = node_degrees)
+   } %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_out(
+     conditions = deg == 1) %>%
+   get_selection()
[1] 4
> 
> # Traverse from node `2` to any outbound
> # nodes, and use multiple conditions for
> # the traversal
> graph %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_out(
+     conditions =
+       type == "a" &
+       values > 8.0) %>%
+   get_selection()
[1] 2
> 
> # Traverse from node `2` to any
> # outbound nodes, and use multiple
> # conditions with a single-length vector
> graph %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_out(
+     conditions =
+       type == "b" |
+       values > 8.0) %>%
+   get_selection()
[1] 4 5
> 
> # Traverse from node `2` to any outbound
> # nodes, and use a regular expression as
> # a filtering condition
> graph %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_out(
+     conditions = grepl("..d", label)) %>%
+   get_selection()
[1] 5
> 
> # Create another simple graph to demonstrate
> # copying of node attribute values to traversed
> # nodes
> graph <-
+   create_graph() %>%
+   add_node() %>%
+   select_nodes() %>%
+   add_n_nodes_ws(
+     n = 2,
+     direction = "to") %>%
+   clear_selection() %>%
+   select_nodes_by_id(nodes = 2:3) %>%
+   set_node_attrs_ws(
+     node_attr = value,
+     value = 5)
> 
> # Show the graph's internal node data frame
> graph %>% get_node_df()
  id type label value
1  1 <NA>  <NA>    NA
2  2 <NA>  <NA>     5
3  3 <NA>  <NA>     5
> 
> # Show the graph's internal edge data frame
> graph %>% get_edge_df()
  id from to  rel
1  1    2  1 <NA>
2  2    3  1 <NA>
> 
> # Perform a traversal from the outer nodes
> # (`2` and `3`) to the central node (`1`) while
> # also applying the node attribute `value` to
> # node `1` (summing the `value` of 5 from
> # both nodes before applying that value to the
> # target node)
> graph <-
+   graph %>%
+   trav_out(
+     copy_attrs_from = value,
+     agg = "sum")
> 
> # Show the graph's internal node data
> # frame after this change
> graph %>% get_node_df()
  id type label value
1  1 <NA>  <NA>    10
2  2 <NA>  <NA>     5
3  3 <NA>  <NA>     5
> 
> 
> 
> 
> cleanEx()
> nameEx("trav_out_edge")
> ### * trav_out_edge
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trav_out_edge
> ### Title: Traverse from one or more selected nodes onto adjacent, outward
> ###   edges
> ### Aliases: trav_out_edge
> 
> ### ** Examples
> 
> # Set a seed
> suppressWarnings(RNGversion("3.5.0"))
> set.seed(23)
> 
> # Create a simple graph
> graph <-
+   create_graph() %>%
+   add_n_nodes(
+     n = 2,
+     type = "a",
+     label = c("asd", "iekd")) %>%
+   add_n_nodes(
+     n = 3,
+     type = "b",
+     label = c("idj", "edl", "ohd")) %>%
+   add_edges_w_string(
+     edges = "1->2 1->3 2->4 2->5 3->5",
+     rel = c(NA, "A", "B", "C", "D")) %>%
+   set_node_attrs(
+     node_attr = values,
+     values = c(2.3, 4.7, 9.4,
+                8.3, 6.3))
> 
> # Create a data frame with node ID values
> # representing the graph edges (with `from`
> # and `to` columns), and, a set of numeric values
> df <-
+   data.frame(
+     from = c(1, 1, 2, 2, 3),
+     to = c(2, 3, 4, 5, 5),
+     values = round(rnorm(5, 5), 2))
> 
> # Join the data frame to the graph's internal
> # edge data frame (edf)
> graph <-
+   graph %>%
+   join_edge_attrs(
+     df = df)
> 
> # Show the graph's internal node data frame
> graph %>% get_node_df()
  id type label values
1  1    a   asd    2.3
2  2    a  iekd    4.7
3  3    b   idj    9.4
4  4    b   edl    8.3
5  5    b   ohd    6.3
> 
> # Show the graph's internal edge data frame
> graph %>% get_edge_df()
  id from to  rel values
1  1    1  2 <NA>   6.00
2  2    1  3    A   6.11
3  3    2  4    B   4.72
4  4    2  5    C   6.02
5  5    3  5    D   5.05
> 
> # Perform a simple traversal from nodes to
> # outbound edges with no conditions on the
> # nodes traversed to
> graph %>%
+   select_nodes_by_id(nodes = 1) %>%
+   trav_out_edge() %>%
+   get_selection()
[1] 1 2
> 
> # Traverse from node `1` to any outbound
> # edges, filtering to those edges that have
> # NA values for the `rel` edge attribute
> graph %>%
+   select_nodes_by_id(nodes = 1) %>%
+   trav_out_edge(
+     conditions = is.na(rel)) %>%
+   get_selection()
[1] 1
> 
> # Traverse from node `3` to any outbound
> # edges, filtering to those edges that have
> # numeric values greater than `5.0` for
> # the `rel` edge attribute
> graph %>%
+   select_nodes_by_id(nodes = 3) %>%
+   trav_out_edge(
+     conditions = values > 5.0) %>%
+   get_selection()
[1] 5
> 
> # Traverse from node `1` to any outbound
> # edges, filtering to those edges that
> # have values equal to `A` for the `rel`
> # edge attribute
> graph %>%
+   select_nodes_by_id(nodes = 1) %>%
+   trav_out_edge(
+     conditions = rel == "A") %>%
+   get_selection()
[1] 2
> 
> # Traverse from node `2` to any outbound
> # edges, filtering to those edges that
> # have values in the set `B` and `C` for
> # the `rel` edge attribute
> graph %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_out_edge(
+     conditions = rel %in% c("B", "C")) %>%
+   get_selection()
[1] 3 4
> 
> # Traverse from node `2` to any
> # outbound edges, and use multiple
> # conditions for the traversal
> graph %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_out_edge(
+     conditions =
+       rel %in% c("B", "C") &
+       values >= 5.0) %>%
+   get_selection()
[1] 4
> 
> # Traverse from node `2` to any
> # outbound edges, and use multiple
> # conditions
> graph %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_out_edge(
+     conditions =
+       rel %in% c("B", "C") |
+       values > 6.0) %>%
+   get_selection()
[1] 3 4
> 
> # Traverse from node `2` to any outbound
> # edges, and use a regular expression as
> # a filtering condition
> graph %>%
+   select_nodes_by_id(nodes = 2) %>%
+   trav_out_edge(
+     conditions = grepl("B|C", rel)) %>%
+   get_selection()
[1] 3 4
> 
> # Perform a traversal from all nodes to
> # their outgoing edges and, while doing
> # so, copy the `label` node attribute
> # to any of the nodes' incoming edges
> graph <-
+   graph %>%
+   select_nodes() %>%
+   trav_out_edge(
+     copy_attrs_from = label)
> 
> # Show the graph's internal edge
> # data frame after this change
> graph %>% get_edge_df()
  id from to  rel label values
1  1    1  2 <NA>   asd   6.00
2  1    2  3    A   asd   6.11
3  2    3  4    B  iekd   4.72
4  2    4  5    C  iekd   6.02
5  3    5  5    D   idj   5.05
> 
> 
> 
> 
> cleanEx()
> nameEx("trav_out_node")
> ### * trav_out_node
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trav_out_node
> ### Title: Traverse from one or more selected edges onto adjacent, outward
> ###   nodes
> ### Aliases: trav_out_node
> 
> ### ** Examples
> 
> # Set a seed
> suppressWarnings(RNGversion("3.5.0"))
> set.seed(23)
> 
> # Create a simple graph
> graph <-
+   create_graph() %>%
+   add_n_nodes(
+     n = 2,
+     type = "a",
+     label = c("asd", "iekd")) %>%
+   add_n_nodes(
+     n = 3,
+     type = "b",
+     label = c("idj", "edl", "ohd")) %>%
+   add_edges_w_string(
+     edges = "1->2 1->3 2->4 2->5 3->5",
+     rel = c(NA, "A", "B", "C", "D"))
> 
> # Create a data frame with node ID values
> # representing the graph edges (with `from`
> # and `to` columns), and, a set of numeric values
> df_edges <-
+   data.frame(
+     from = c(1, 1, 2, 2, 3),
+       to = c(2, 3, 4, 5, 5),
+     values = round(rnorm(5, 5), 2))
> 
> # Create a data frame with node ID values
> # representing the graph nodes (with the `id`
> # columns), and, a set of numeric values
> df_nodes <-
+   data.frame(
+     id = 1:5,
+     values = round(rnorm(5, 7), 2))
> 
> # Join the data frame to the graph's internal
> # edge data frame (edf)
> graph <-
+   graph %>%
+   join_edge_attrs(df = df_edges) %>%
+   join_node_attrs(df = df_nodes)
> 
> # Show the graph's internal node data frame
> graph %>% get_node_df()
  id type label values
1  1    a   asd   8.58
2  2    a  iekd   7.22
3  3    b   idj   5.95
4  4    b   edl   6.71
5  5    b   ohd   7.48
> 
> # Show the graph's internal edge data frame
> graph %>% get_edge_df()
  id from to  rel values
1  1    1  2 <NA>   6.00
2  2    1  3    A   6.11
3  3    2  4    B   4.72
4  4    2  5    C   6.02
5  5    3  5    D   5.05
> 
> # Perform a simple traversal from the
> # edge `1`->`3` to the attached node
> # in the direction of the edge; here, no
> # conditions are placed on the nodes
> # traversed to
> graph %>%
+   select_edges(
+     from = 1,
+       to = 3) %>%
+   trav_out_node() %>%
+   get_selection()
[1] 1
> 
> # Traverse from edges `2`->`5` and
> # `3`->`5` to the attached node along
> # the direction of the edge; here, the
> # traversals lead to different nodes
> graph %>%
+   select_edges(
+     from = 2,
+       to = 5) %>%
+   select_edges(
+     from = 3,
+       to = 5) %>%
+   trav_out_node() %>%
+   get_selection()
[1] 2 3
> 
> # Traverse from the edge `1`->`3`
> # to the attached node where the edge
> # is outgoing, this time filtering
> # numeric values greater than `7.0` for
> # the `values` node attribute
> graph %>%
+   select_edges(
+     from = 1,
+       to = 3) %>%
+   trav_out_node(
+     conditions = values > 7.0) %>%
+   get_selection()
[1] 1
> 
> # Traverse from the edge `1`->`3`
> # to the attached node where the edge
> # is outgoing, this time filtering
> # numeric values less than `7.0` for
> # the `values` node attribute (the
> # condition is not met so the original
> # selection of edge `1`->`3` remains)
> graph %>%
+   select_edges(
+     from = 1,
+       to = 3) %>%
+   trav_out_node(
+     conditions = values < 7.0) %>%
+   get_selection()
[1] 2
> 
> # Traverse from the edge `1`->`2`
> # to node `2`, using multiple conditions
> graph %>%
+   select_edges(
+     from = 1,
+       to = 2) %>%
+   trav_out_node(
+     conditions =
+       grepl(".*d$", label) |
+       values < 6.0) %>%
+   get_selection()
[1] 1
> 
> # Create another simple graph to demonstrate
> # copying of edge attribute values to traversed
> # nodes
> graph <-
+   create_graph() %>%
+   add_node() %>%
+   select_nodes() %>%
+   add_n_nodes_ws(
+     n = 2,
+     direction = "from") %>%
+   clear_selection() %>%
+   select_nodes_by_id(nodes = 2) %>%
+   set_node_attrs_ws(
+     node_attr = value,
+     value = 8) %>%
+   clear_selection() %>%
+   select_edges_by_edge_id(edges = 1) %>%
+   set_edge_attrs_ws(
+     edge_attr = value,
+     value = 5) %>%
+   clear_selection() %>%
+   select_edges_by_edge_id(edges = 2) %>%
+   set_edge_attrs_ws(
+     edge_attr = value,
+     value = 5) %>%
+   clear_selection() %>%
+   select_edges()
> 
> # Show the graph's internal edge data frame
> graph %>% get_edge_df()
  id from to  rel value
1  1    1  2 <NA>     5
2  2    1  3 <NA>     5
> 
> # Show the graph's internal node data frame
> graph %>% get_node_df()
  id type label value
1  1 <NA>  <NA>    NA
2  2 <NA>  <NA>     8
3  3 <NA>  <NA>    NA
> 
> # Perform a traversal from the edges to
> # the central node (`1`) while also applying
> # the edge attribute `value` to the node (in
> # this case summing the `value` of 5 from
> # both edges before adding as a node attribute)
> graph <-
+   graph %>%
+   trav_out_node(
+     copy_attrs_from = value,
+     agg = "sum")
> 
> # Show the graph's internal node data frame
> # after this change
> graph %>% get_node_df()
  id type label value
1  1 <NA>  <NA>    10
2  2 <NA>  <NA>     8
3  3 <NA>  <NA>    NA
> 
> 
> 
> 
> cleanEx()
> nameEx("trav_out_until")
> ### * trav_out_until
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trav_out_until
> ### Title: Traverse outward node-by-node until stopping conditions are met
> ### Aliases: trav_out_until
> 
> ### ** Examples
> 
> # Create a path graph and add
> # values of 1 to 10 across the
> # nodes from beginning to end;
> # select the first path node
> graph <-
+   create_graph() %>%
+   add_path(
+     n = 10,
+     node_data = node_data(
+       value = 1:10)) %>%
+   select_nodes_by_id(
+     nodes = 1)
> 
> # Traverse outward, node-by-node
> # until stopping at a node where
> # the `value` attribute is 8
> graph <-
+   graph %>%
+   trav_out_until(
+     conditions =
+       value == 8)
> 
> # Get the graph's node selection
> graph %>% get_selection()
[1] 8
> 
> # Create two cycles in graph and
> # add values of 1 to 6 to the
> # first cycle, and values 7 to
> # 12 in the second; select nodes
> # `1` and `7`
> graph <-
+   create_graph() %>%
+   add_cycle(
+     n = 6,
+     node_data = node_data(
+       value = 1:6)) %>%
+   add_cycle(
+     n = 6,
+     node_data = node_data(
+       value = 7:12)) %>%
+   select_nodes_by_id(
+     nodes = c(1, 7))
> 
> # Traverse outward, node-by-node
> # from `1` and `7` until stopping
> # at the first nodes where the
> # `value` attribute is 5, 6, or 15;
> # specify that we should only
> # keep the finally traversed to
> # nodes that satisfy the conditions
> graph <-
+   graph %>%
+   trav_out_until(
+     conditions =
+       value %in% c(5, 6, 9),
+     exclude_unmatched = TRUE)
> 
> # Get the graph's node selection
> graph %>% get_selection()
[1] 5 9
> 
> 
> 
> 
> cleanEx()
> nameEx("trav_reverse_edge")
> ### * trav_reverse_edge
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trav_reverse_edge
> ### Title: Traverse to any reverse edges
> ### Aliases: trav_reverse_edge
> 
> ### ** Examples
> 
> # Create a node data frame (ndf)
> ndf <-
+   create_node_df(
+     n = 4,
+     type = "basic",
+     label = TRUE)
> 
> # Create an edge data frame (edf)
> edf <-
+   create_edge_df(
+     from = c(1, 4, 2, 3, 3),
+     to =   c(4, 1, 3, 2, 1))
> 
> # Create a graph with the
> # ndf and edf
> graph <-
+   create_graph(
+     nodes_df = ndf,
+     edges_df = edf)
> 
> # Explicitly select the edges
> # `1`->`4` and `2`->`3`
> graph <-
+   graph %>%
+   select_edges(
+     from = 1,
+       to = 4) %>%
+   select_edges(
+     from = 2,
+       to = 3)
> 
> # Get the inital edge selection
> graph %>% get_selection()
[1] 1 3
> 
> # Traverse to the reverse edges
> # (edges `2`: `4`->`1` and
> # `4`:`3`->`2`)
> graph <-
+   graph %>%
+   trav_reverse_edge()
> 
> # Get the current selection of edges
> graph %>% get_selection()
[1] 2 4
> 
> 
> 
> 
> cleanEx()
> nameEx("trigger_graph_actions")
> ### * trigger_graph_actions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trigger_graph_actions
> ### Title: Trigger the execution of a series of graph actions
> ### Aliases: trigger_graph_actions
> 
> ### ** Examples
> 
> # Create a random graph using the
> # `add_gnm_graph()` function
> graph <-
+   create_graph() %>%
+   add_gnm_graph(
+     n = 5,
+     m = 10,
+     set_seed = 23)
> 
> # Add a graph action that sets a node
> # attr column with a function; this
> # uses the `get_pagerank()` function
> # to provide PageRank values in the
> # `pagerank` column
> graph <-
+   graph %>%
+   add_graph_action(
+     fcn = "set_node_attr_w_fcn",
+     node_attr_fcn = "get_pagerank",
+     column_name = "pagerank",
+     action_name = "get_pagerank")
> 
> # Add a second graph action (to be
> # executed after the first one) that
> # rescales values in the `pagerank`
> # column between 0 and 1, and, puts
> # these values in the `width` column
> graph <-
+   graph %>%
+   add_graph_action(
+     fcn = "rescale_node_attrs",
+     node_attr_from = "pagerank",
+     node_attr_to = "width",
+     action_name = "pgrnk_to_width")
> 
> # Add a third and final graph action
> # (to be executed last) that creates
> # color values in the `fillcolor` column,
> # based on the numeric values from the
> # `width` column
> graph <-
+   graph %>%
+   add_graph_action(
+     fcn = "colorize_node_attrs",
+     node_attr_from = "width",
+     node_attr_to = "fillcolor",
+     action_name = "pgrnk_fillcolor")
> 
> # View the graph actions for the graph
> # object by using the `get_graph_actions()`
> # function
> graph %>% get_graph_actions()
# A tibble: 3 × 3
  action_index action_name     expression                                       
         <int> <chr>           <chr>                                            
1            1 get_pagerank    set_node_attr_w_fcn(graph = graph, node_attr_fcn…
2            2 pgrnk_to_width  rescale_node_attrs(graph = graph, node_attr_from…
3            3 pgrnk_fillcolor colorize_node_attrs(graph = graph, node_attr_fro…
> 
> # Manually trigger to invocation of
> # the graph actions using the
> # `trigger_graph_actions()` function
> graph <-
+   graph %>%
+   trigger_graph_actions()
> 
> # Examine the graph's internal node
> # data frame (ndf) to verify that
> # the `pagerank`, `width`, and
> # `fillcolor` columns are present
> graph %>% get_node_df()
  id type label pagerank width fillcolor
1  1 <NA>     1   0.2877 0.935   #ABDDA4
2  2 <NA>     2   0.0940 0.000   #D7191C
3  3 <NA>     3   0.3012 1.000   #2B83BA
4  4 <NA>     4   0.1965 0.495   #FFFFBF
5  5 <NA>     5   0.1206 0.128   #FDAE61
> 
> 
> 
> 
> cleanEx()
> nameEx("visnetwork")
> ### * visnetwork
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visnetwork
> ### Title: Render graph with visNetwork
> ### Aliases: visnetwork
> 
> ### ** Examples
> 
> # Create a node data frame (ndf)
> ndf <-
+   create_node_df(
+     n = 6,
+     label = TRUE,
+     fillcolor = c("lightgrey", "red", "orange",
+                   "pink", "aqua", "yellow"),
+     shape = "dot",
+     size = c(20, 80, 40, 10, 30, 50),
+     type = c("1", "1", "1", "2", "2", "2")
+   )
> 
> # Create an edge data frame (edf)
> edf <-
+   create_edge_df(
+     from = c(1, 2, 3, 4, 6, 5),
+     to = c(4, 3, 1, 3, 1, 4),
+     color = c("green", "green", "grey",
+               "grey", "blue", "blue"),
+     rel = "leading_to"
+   )
> 
> # Create a graph object
> graph <-
+   create_graph(
+     nodes_df = ndf,
+     edges_df = edf
+   )
> 
> # visnetwork(graph)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  18.67 0.42 19.693 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
