
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEogIBAAKCAQEApIzQCmTLMWvFKE72Mu2Ji3P8+Gpa6cAXa1b+UU3GVFpQKP+Y"
 [3] "RRuzxwK8EFDC7gAVrCesbxYqmglHroozT6KGhHECGLOAIa1F3MLiHeW17iN2YBsz"
 [4] "m6BOep4l1oPS12Mc6unxKCoVusNWRJeJB7c6T5HduOYPjmYXy148kOtLEXPQbpfO"
 [5] "1x8eU0Nrw5MtO8QIO+cvx2dwHrvDLg/PwAAGvIa7ekqYJqst3EyFj3EcSeDz9phZ"
 [6] "1JXKPELoT1jz9sVravhe9uRw/7J8ngbamFgjfEMQG7X7ObcReVrIfc+nYGZoSBl9"
 [7] "WqiUc2LpS8k3ZW2zEX4dWaRAmwTfqd3/3k5zWwIDAQABAoIBAACWIRipE8piF2Hy"
 [8] "4Dk7c1GJ241zPV6zNS2rlydZcXdvnCwWWyeMwvKztCcarPC6Rwh1w4HKiVM1xm/I"
 [9] "rgxDvuluRRmHGypF3OzT0OSlWTXG7Nn0ls4bt4hupIx750VP627EKdBHn3Dzbok/"
[10] "jmtD6mWHyKIt8tSXBNhUsFbM6u0GpW1jRLHEmOvR4h3VsHg6R0HHUbSy6NncHP36"
[11] "gtZ96erY5g5S7XH/VRPRuQ6wtvQMgS00vpG7ydPEpirjP0BTKakXv7nKUPmw6kAS"
[12] "jt8wXsGvMj+tyq9WbIHbCLcN0GtLGrQsPD4ZwXkK9UQhVkIQTiGOVdguTpn8ZcNW"
[13] "TmKm6IECgYEAt9HYqPNGUhZF29CMiDFN3KPt6wUpy/E8IHPnHwbT5tjnXxRoG0oV"
[14] "JolYqEU73lzLJ33yaBL0lLL9CfyS25Bhcq3MxII7h+laaFIEgE/ro6pjER4IE8wK"
[15] "wP6gXsZN+gUonBgGlH8wwE2QWCeJBOuNBgNMweiT/Uw8zN5wKPazQ+ECgYEA5Snq"
[16] "1h+OkYZ7UlgTBaFubJmEwS7KqglueWci7CaRSMyWJ5VlLVviMDdMIdkZwCQOMdxP"
[17] "CzDD/bTUOA9FkomP3FsskS7gk5KHjJlQAvzIxKklAGW0FN7vTapmaOEQnRT0c+zL"
[18] "F/ErfqIP5/qWPYqbj9fbf4q6s+8Qg38ag3RXnrsCgYB4m38Em1nwUhzT9Sm/0lm8"
[19] "AvL/2QtrfIRu5p0mhlxSgs6MW99SyHDIMCWzgnmdlFTXPJPoJUfEqQvNmaLh3QGT"
[20] "NOW9qZVVv45KFEZPyiBZ6lnFyWaTVrVXm7mtdX+EJA5ZHIp0tF9QTZP/wzDrwYFu"
[21] "CIw8TlWLRJI/+VKuDe/hAQKBgCodRfcL3ZuI52j+nqBORojWvbry6nPNP+w3tAdK"
[22] "HzENyBqGLg3j8PGDeA5QY5cYCTPIlQ4tbBdYABg9Vj/T4AhTCSG1R7hXGWoRUs75"
[23] "vbvGifJEvo+HWNshEaj8k50KmNIlFj3UKHYhOmMbfjjZHDWXKdOKnz0qFhLUbP7z"
[24] "hpa5AoGAeW4saiZhF96BXSru3DQuv4Iue4HW2fu5dJNSalHkK7RSJSgGxriTI9GB"
[25] "S5Hn1B+5daGZISGrpS8WCQDRQXl8JEwpCN7iPAYhGiVssyv1Ki+G6nBl9qH+w8zD"
[26] "zUY7w1dXLnsRfSyQfi1apakzqtGl1gbNVO+YNUn0WN4RZwtVWOc="            
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a2 02 01 00 02 82 01 01 00 a4 8c d0 0a 64 cb 31 6b c5 28 4e f6
  [25] 32 ed 89 8b 73 fc f8 6a 5a e9 c0 17 6b 56 fe 51 4d c6 54 5a 50 28 ff 98
  [49] 45 1b b3 c7 02 bc 10 50 c2 ee 00 15 ac 27 ac 6f 16 2a 9a 09 47 ae 8a 33
  [73] 4f a2 86 84 71 02 18 b3 80 21 ad 45 dc c2 e2 1d e5 b5 ee 23 76 60 1b 33
  [97] 9b a0 4e 7a 9e 25 d6 83 d2 d7 63 1c ea e9 f1 28 2a 15 ba c3 56 44 97 89
 [121] 07 b7 3a 4f 91 dd b8 e6 0f 8e 66 17 cb 5e 3c 90 eb 4b 11 73 d0 6e 97 ce
 [145] d7 1f 1e 53 43 6b c3 93 2d 3b c4 08 3b e7 2f c7 67 70 1e bb c3 2e 0f cf
 [169] c0 00 06 bc 86 bb 7a 4a 98 26 ab 2d dc 4c 85 8f 71 1c 49 e0 f3 f6 98 59
 [193] d4 95 ca 3c 42 e8 4f 58 f3 f6 c5 6b 6a f8 5e f6 e4 70 ff b2 7c 9e 06 da
 [217] 98 58 23 7c 43 10 1b b5 fb 39 b7 11 79 5a c8 7d cf a7 60 66 68 48 19 7d
 [241] 5a a8 94 73 62 e9 4b c9 37 65 6d b3 11 7e 1d 59 a4 40 9b 04 df a9 dd ff
 [265] de 4e 73 5b 02 03 01 00 01 02 82 01 00 00 96 21 18 a9 13 ca 62 17 61 f2
 [289] e0 39 3b 73 51 89 db 8d 73 3d 5e b3 35 2d ab 97 27 59 71 77 6f 9c 2c 16
 [313] 5b 27 8c c2 f2 b3 b4 27 1a ac f0 ba 47 08 75 c3 81 ca 89 53 35 c6 6f c8
 [337] ae 0c 43 be e9 6e 45 19 87 1b 2a 45 dc ec d3 d0 e4 a5 59 35 c6 ec d9 f4
 [361] 96 ce 1b b7 88 6e a4 8c 7b e7 45 4f eb 6e c4 29 d0 47 9f 70 f3 6e 89 3f
 [385] 8e 6b 43 ea 65 87 c8 a2 2d f2 d4 97 04 d8 54 b0 56 cc ea ed 06 a5 6d 63
 [409] 44 b1 c4 98 eb d1 e2 1d d5 b0 78 3a 47 41 c7 51 b4 b2 e8 d9 dc 1c fd fa
 [433] 82 d6 7d e9 ea d8 e6 0e 52 ed 71 ff 55 13 d1 b9 0e b0 b6 f4 0c 81 2d 34
 [457] be 91 bb c9 d3 c4 a6 2a e3 3f 40 53 29 a9 17 bf b9 ca 50 f9 b0 ea 40 12
 [481] 8e df 30 5e c1 af 32 3f ad ca af 56 6c 81 db 08 b7 0d d0 6b 4b 1a b4 2c
 [505] 3c 3e 19 c1 79 0a f5 44 21 56 42 10 4e 21 8e 55 d8 2e 4e 99 fc 65 c3 56
 [529] 4e 62 a6 e8 81 02 81 81 00 b7 d1 d8 a8 f3 46 52 16 45 db d0 8c 88 31 4d
 [553] dc a3 ed eb 05 29 cb f1 3c 20 73 e7 1f 06 d3 e6 d8 e7 5f 14 68 1b 4a 15
 [577] 26 89 58 a8 45 3b de 5c cb 27 7d f2 68 12 f4 94 b2 fd 09 fc 92 db 90 61
 [601] 72 ad cc c4 82 3b 87 e9 5a 68 52 04 80 4f eb a3 aa 63 11 1e 08 13 cc 0a
 [625] c0 fe a0 5e c6 4d fa 05 28 9c 18 06 94 7f 30 c0 4d 90 58 27 89 04 eb 8d
 [649] 06 03 4c c1 e8 93 fd 4c 3c cc de 70 28 f6 b3 43 e1 02 81 81 00 e5 29 ea
 [673] d6 1f 8e 91 86 7b 52 58 13 05 a1 6e 6c 99 84 c1 2e ca aa 09 6e 79 67 22
 [697] ec 26 91 48 cc 96 27 95 65 2d 5b e2 30 37 4c 21 d9 19 c0 24 0e 31 dc 4f
 [721] 0b 30 c3 fd b4 d4 38 0f 45 92 89 8f dc 5b 2c 91 2e e0 93 92 87 8c 99 50
 [745] 02 fc c8 c4 a9 25 00 65 b4 14 de ef 4d aa 66 68 e1 10 9d 14 f4 73 ec cb
 [769] 17 f1 2b 7e a2 0f e7 fa 96 3d 8a 9b 8f d7 db 7f 8a ba b3 ef 10 83 7f 1a
 [793] 83 74 57 9e bb 02 81 80 78 9b 7f 04 9b 59 f0 52 1c d3 f5 29 bf d2 59 bc
 [817] 02 f2 ff d9 0b 6b 7c 84 6e e6 9d 26 86 5c 52 82 ce 8c 5b df 52 c8 70 c8
 [841] 30 25 b3 82 79 9d 94 54 d7 3c 93 e8 25 47 c4 a9 0b cd 99 a2 e1 dd 01 93
 [865] 34 e5 bd a9 95 55 bf 8e 4a 14 46 4f ca 20 59 ea 59 c5 c9 66 93 56 b5 57
 [889] 9b b9 ad 75 7f 84 24 0e 59 1c 8a 74 b4 5f 50 4d 93 ff c3 30 eb c1 81 6e
 [913] 08 8c 3c 4e 55 8b 44 92 3f f9 52 ae 0d ef e1 01 02 81 80 2a 1d 45 f7 0b
 [937] dd 9b 88 e7 68 fe 9e a0 4e 46 88 d6 bd ba f2 ea 73 cd 3f ec 37 b4 07 4a
 [961] 1f 31 0d c8 1a 86 2e 0d e3 f0 f1 83 78 0e 50 63 97 18 09 33 c8 95 0e 2d
 [985] 6c 17 58 00 18 3d 56 3f d3 e0 08 53 09 21 b5 47 b8 57 19 6a 11 52 ce f9
[1009] bd bb c6 89 f2 44 be 8f 87 58 db 21 11 a8 fc 93 9d 0a 98 d2 25 16 3d d4
[1033] 28 76 21 3a 63 1b 7e 38 d9 1c 35 97 29 d3 8a 9f 3d 2a 16 12 d4 6c fe f3
[1057] 86 96 b9 02 81 80 79 6e 2c 6a 26 61 17 de 81 5d 2a ee dc 34 2e bf 82 2e
[1081] 7b 81 d6 d9 fb b9 74 93 52 6a 51 e4 2b b4 52 25 28 06 c6 b8 93 23 d1 81
[1105] 4b 91 e7 d4 1f b9 75 a1 99 21 21 ab a5 2f 16 09 00 d1 41 79 7c 24 4c 29
[1129] 08 de e2 3c 06 21 1a 25 6c b3 2b f5 2a 2f 86 ea 70 65 f6 a1 fe c3 cc c3
[1153] cd 46 3b c3 57 57 2e 7b 11 7d 2c 90 7e 2d 5a a5 a9 33 aa d1 a5 d6 06 cd
[1177] 54 ef 98 35 49 f4 58 de 11 67 0b 55 58 e7
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x55ef9d169a20>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x55ef9d15b180>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApIzQCmTLMWvFKE72Mu2J"
[3] "i3P8+Gpa6cAXa1b+UU3GVFpQKP+YRRuzxwK8EFDC7gAVrCesbxYqmglHroozT6KG"
[4] "hHECGLOAIa1F3MLiHeW17iN2YBszm6BOep4l1oPS12Mc6unxKCoVusNWRJeJB7c6"
[5] "T5HduOYPjmYXy148kOtLEXPQbpfO1x8eU0Nrw5MtO8QIO+cvx2dwHrvDLg/PwAAG"
[6] "vIa7ekqYJqst3EyFj3EcSeDz9phZ1JXKPELoT1jz9sVravhe9uRw/7J8ngbamFgj"
[7] "fEMQG7X7ObcReVrIfc+nYGZoSBl9WqiUc2LpS8k3ZW2zEX4dWaRAmwTfqd3/3k5z"
[8] "WwIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 a4 8c d0 0a 64 cb 31 6b c5 28 4e f6 32 ed 89 8b 73
 [51] fc f8 6a 5a e9 c0 17 6b 56 fe 51 4d c6 54 5a 50 28 ff 98 45 1b b3 c7 02 bc
 [76] 10 50 c2 ee 00 15 ac 27 ac 6f 16 2a 9a 09 47 ae 8a 33 4f a2 86 84 71 02 18
[101] b3 80 21 ad 45 dc c2 e2 1d e5 b5 ee 23 76 60 1b 33 9b a0 4e 7a 9e 25 d6 83
[126] d2 d7 63 1c ea e9 f1 28 2a 15 ba c3 56 44 97 89 07 b7 3a 4f 91 dd b8 e6 0f
[151] 8e 66 17 cb 5e 3c 90 eb 4b 11 73 d0 6e 97 ce d7 1f 1e 53 43 6b c3 93 2d 3b
[176] c4 08 3b e7 2f c7 67 70 1e bb c3 2e 0f cf c0 00 06 bc 86 bb 7a 4a 98 26 ab
[201] 2d dc 4c 85 8f 71 1c 49 e0 f3 f6 98 59 d4 95 ca 3c 42 e8 4f 58 f3 f6 c5 6b
[226] 6a f8 5e f6 e4 70 ff b2 7c 9e 06 da 98 58 23 7c 43 10 1b b5 fb 39 b7 11 79
[251] 5a c8 7d cf a7 60 66 68 48 19 7d 5a a8 94 73 62 e9 4b c9 37 65 6d b3 11 7e
[276] 1d 59 a4 40 9b 04 df a9 dd ff de 4e 73 5b 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x55ef9d068870>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x55ef9d06a120>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
 !! gmp not found, skipping bignum tests
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
