
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEogIBAAKCAQEApzQusd3txas0qPgrlRIEMrT1zqtgsnU+4d1Fod75MHcbUbLY"
 [3] "IS6Ew/RzVg+w5lpS4LfRaQXDZbj+6SaKqDhUeGxi44dnSq4SnMn21WRZEt6UZl27"
 [4] "d3Be3Vbd3WQa/pZLJjPaGsAFFF/iZ26BuA73JaqDE0hiPQcaWJ8/HgYq6JK0P8KK"
 [5] "sZmIxWFfmo9NYu9slL7T2thYFW3Bq/VSWzEPGBwKODhgo5yTWPaqiroAB0CSmTKr"
 [6] "HoBx0OTlLVZt1q9HrAEpWBibn+8ZkPw5FrXz8hejTfQDL3DQhR2tWq5KTuO/7BU1"
 [7] "70rYCqmKyMSEgDLhikiIR/iS5pNy5Vncpy2XwQIDAQABAoIBAB6PhJtg92UiOkFJ"
 [8] "/tlDzj2gYq8wFr/3exNYWLJR6VTo6DbiC+vgr0aLpwsLWid4Sd6l6mIaOhEdI4Zk"
 [9] "04IUrafHE7oHlSMKtv8uUO3G5hrzUMd3CV02zjgBeRLOibqPqNOmNY6fGy6SqfSC"
[10] "t7X3Ekgxprx/BemmozOgg65OrUgNwGiKBsicpB21YN+ZPJrwxR3sib9U/40Ak3VQ"
[11] "xntuZfSn1aF/ieKxnVeL+GlEAR6MswFvOaU5IgDIn9Boa6Kkfj6ObfzF44OuGbXr"
[12] "5Q6QJ9MT5hJ0qBGwh2wQmMYODfosHN6kZO1VRA9fPsI2URI7zvCr4R77Y6uuJ7V8"
[13] "taTmvLkCgYEA44GIe6P/zovNFEqzbtXgpRTeekLRPZdxJwlNWyc80oU9Lw/cCC9W"
[14] "mOn4hBsJxEP3df3l0/JX6C/dHWyK164BImeAjhKzNovZ19B8eIBC1oCEYVlADjpd"
[15] "6ANj4nvI3/Lej4KFuqxkXKRPv4gykC352VSl7knhUJurogiW+7JdlxUCgYEAvCUy"
[16] "WPFLnrZQm8bPm71RSVwr+EUvoyRtHaVP2BTZpxlzvv5Rsbqr5hWWrimUomuXTHRx"
[17] "DZM3kVXU5HGeexckYDWfvnn7zVwdF4VqOIluB+2ZxdUkkvjCJHk4LVDac32weJmp"
[18] "kGdYctDvafV1PEy7m+YHm7dGmAX8WzraAAHEKP0CgYAV1AfUVRfmKWOz3rb4m2zC"
[19] "ag4ujNqmnjEtHadeZ5VeXYpRSaRC5MfaRBikFDQLsLm9iG7UtxvYGz+L4y4vI3LY"
[20] "ajXba8/mG+T63/YRWb0P96S78mRC+TapXCnpQRc05YiVHGDYWFII0XsVVWwEiWS/"
[21] "hW+mPVBw+36sPUa/P43bQQKBgFdwihef/N8EKC5dlXrx32dSuPSnYt5VPYj7nUH1"
[22] "Xro0MADhvSH2eZFzExZaKMPbcPONYkVG2BppY4nP7DGUrckw4s7pbkcgujyGOrmP"
[23] "1V1F5aN1zYuopMHCvIMDAqOOFIfYEmAUR50E0V/TPesKVl6752lNIjfhAEl97nb2"
[24] "Wy4ZAoGAbCRKbPvJUYj1cEmfVCJ30H8RnXn1qhPRUOwG65CkM8lgBRoDj/XdPnbt"
[25] "edUfRdVkNglrFjPWkwRO4r4qm8MCn9SfN/zhkyzyc/TM7qlylYPjcrpKofuBucd8"
[26] "IZo4S+6mIhvavqobnOBfAuhXkYn0glM9JuHFiOaLgqTAQXdXVwY="            
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a2 02 01 00 02 82 01 01 00 a7 34 2e b1 dd ed c5 ab 34 a8 f8 2b
  [25] 95 12 04 32 b4 f5 ce ab 60 b2 75 3e e1 dd 45 a1 de f9 30 77 1b 51 b2 d8
  [49] 21 2e 84 c3 f4 73 56 0f b0 e6 5a 52 e0 b7 d1 69 05 c3 65 b8 fe e9 26 8a
  [73] a8 38 54 78 6c 62 e3 87 67 4a ae 12 9c c9 f6 d5 64 59 12 de 94 66 5d bb
  [97] 77 70 5e dd 56 dd dd 64 1a fe 96 4b 26 33 da 1a c0 05 14 5f e2 67 6e 81
 [121] b8 0e f7 25 aa 83 13 48 62 3d 07 1a 58 9f 3f 1e 06 2a e8 92 b4 3f c2 8a
 [145] b1 99 88 c5 61 5f 9a 8f 4d 62 ef 6c 94 be d3 da d8 58 15 6d c1 ab f5 52
 [169] 5b 31 0f 18 1c 0a 38 38 60 a3 9c 93 58 f6 aa 8a ba 00 07 40 92 99 32 ab
 [193] 1e 80 71 d0 e4 e5 2d 56 6d d6 af 47 ac 01 29 58 18 9b 9f ef 19 90 fc 39
 [217] 16 b5 f3 f2 17 a3 4d f4 03 2f 70 d0 85 1d ad 5a ae 4a 4e e3 bf ec 15 35
 [241] ef 4a d8 0a a9 8a c8 c4 84 80 32 e1 8a 48 88 47 f8 92 e6 93 72 e5 59 dc
 [265] a7 2d 97 c1 02 03 01 00 01 02 82 01 00 1e 8f 84 9b 60 f7 65 22 3a 41 49
 [289] fe d9 43 ce 3d a0 62 af 30 16 bf f7 7b 13 58 58 b2 51 e9 54 e8 e8 36 e2
 [313] 0b eb e0 af 46 8b a7 0b 0b 5a 27 78 49 de a5 ea 62 1a 3a 11 1d 23 86 64
 [337] d3 82 14 ad a7 c7 13 ba 07 95 23 0a b6 ff 2e 50 ed c6 e6 1a f3 50 c7 77
 [361] 09 5d 36 ce 38 01 79 12 ce 89 ba 8f a8 d3 a6 35 8e 9f 1b 2e 92 a9 f4 82
 [385] b7 b5 f7 12 48 31 a6 bc 7f 05 e9 a6 a3 33 a0 83 ae 4e ad 48 0d c0 68 8a
 [409] 06 c8 9c a4 1d b5 60 df 99 3c 9a f0 c5 1d ec 89 bf 54 ff 8d 00 93 75 50
 [433] c6 7b 6e 65 f4 a7 d5 a1 7f 89 e2 b1 9d 57 8b f8 69 44 01 1e 8c b3 01 6f
 [457] 39 a5 39 22 00 c8 9f d0 68 6b a2 a4 7e 3e 8e 6d fc c5 e3 83 ae 19 b5 eb
 [481] e5 0e 90 27 d3 13 e6 12 74 a8 11 b0 87 6c 10 98 c6 0e 0d fa 2c 1c de a4
 [505] 64 ed 55 44 0f 5f 3e c2 36 51 12 3b ce f0 ab e1 1e fb 63 ab ae 27 b5 7c
 [529] b5 a4 e6 bc b9 02 81 81 00 e3 81 88 7b a3 ff ce 8b cd 14 4a b3 6e d5 e0
 [553] a5 14 de 7a 42 d1 3d 97 71 27 09 4d 5b 27 3c d2 85 3d 2f 0f dc 08 2f 56
 [577] 98 e9 f8 84 1b 09 c4 43 f7 75 fd e5 d3 f2 57 e8 2f dd 1d 6c 8a d7 ae 01
 [601] 22 67 80 8e 12 b3 36 8b d9 d7 d0 7c 78 80 42 d6 80 84 61 59 40 0e 3a 5d
 [625] e8 03 63 e2 7b c8 df f2 de 8f 82 85 ba ac 64 5c a4 4f bf 88 32 90 2d f9
 [649] d9 54 a5 ee 49 e1 50 9b ab a2 08 96 fb b2 5d 97 15 02 81 81 00 bc 25 32
 [673] 58 f1 4b 9e b6 50 9b c6 cf 9b bd 51 49 5c 2b f8 45 2f a3 24 6d 1d a5 4f
 [697] d8 14 d9 a7 19 73 be fe 51 b1 ba ab e6 15 96 ae 29 94 a2 6b 97 4c 74 71
 [721] 0d 93 37 91 55 d4 e4 71 9e 7b 17 24 60 35 9f be 79 fb cd 5c 1d 17 85 6a
 [745] 38 89 6e 07 ed 99 c5 d5 24 92 f8 c2 24 79 38 2d 50 da 73 7d b0 78 99 a9
 [769] 90 67 58 72 d0 ef 69 f5 75 3c 4c bb 9b e6 07 9b b7 46 98 05 fc 5b 3a da
 [793] 00 01 c4 28 fd 02 81 80 15 d4 07 d4 55 17 e6 29 63 b3 de b6 f8 9b 6c c2
 [817] 6a 0e 2e 8c da a6 9e 31 2d 1d a7 5e 67 95 5e 5d 8a 51 49 a4 42 e4 c7 da
 [841] 44 18 a4 14 34 0b b0 b9 bd 88 6e d4 b7 1b d8 1b 3f 8b e3 2e 2f 23 72 d8
 [865] 6a 35 db 6b cf e6 1b e4 fa df f6 11 59 bd 0f f7 a4 bb f2 64 42 f9 36 a9
 [889] 5c 29 e9 41 17 34 e5 88 95 1c 60 d8 58 52 08 d1 7b 15 55 6c 04 89 64 bf
 [913] 85 6f a6 3d 50 70 fb 7e ac 3d 46 bf 3f 8d db 41 02 81 80 57 70 8a 17 9f
 [937] fc df 04 28 2e 5d 95 7a f1 df 67 52 b8 f4 a7 62 de 55 3d 88 fb 9d 41 f5
 [961] 5e ba 34 30 00 e1 bd 21 f6 79 91 73 13 16 5a 28 c3 db 70 f3 8d 62 45 46
 [985] d8 1a 69 63 89 cf ec 31 94 ad c9 30 e2 ce e9 6e 47 20 ba 3c 86 3a b9 8f
[1009] d5 5d 45 e5 a3 75 cd 8b a8 a4 c1 c2 bc 83 03 02 a3 8e 14 87 d8 12 60 14
[1033] 47 9d 04 d1 5f d3 3d eb 0a 56 5e bb e7 69 4d 22 37 e1 00 49 7d ee 76 f6
[1057] 5b 2e 19 02 81 80 6c 24 4a 6c fb c9 51 88 f5 70 49 9f 54 22 77 d0 7f 11
[1081] 9d 79 f5 aa 13 d1 50 ec 06 eb 90 a4 33 c9 60 05 1a 03 8f f5 dd 3e 76 ed
[1105] 79 d5 1f 45 d5 64 36 09 6b 16 33 d6 93 04 4e e2 be 2a 9b c3 02 9f d4 9f
[1129] 37 fc e1 93 2c f2 73 f4 cc ee a9 72 95 83 e3 72 ba 4a a1 fb 81 b9 c7 7c
[1153] 21 9a 38 4b ee a6 22 1b da be aa 1b 9c e0 5f 02 e8 57 91 89 f4 82 53 3d
[1177] 26 e1 c5 88 e6 8b 82 a4 c0 41 77 57 57 06
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x5638e895ba20>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x5638e894d180>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApzQusd3txas0qPgrlRIE"
[3] "MrT1zqtgsnU+4d1Fod75MHcbUbLYIS6Ew/RzVg+w5lpS4LfRaQXDZbj+6SaKqDhU"
[4] "eGxi44dnSq4SnMn21WRZEt6UZl27d3Be3Vbd3WQa/pZLJjPaGsAFFF/iZ26BuA73"
[5] "JaqDE0hiPQcaWJ8/HgYq6JK0P8KKsZmIxWFfmo9NYu9slL7T2thYFW3Bq/VSWzEP"
[6] "GBwKODhgo5yTWPaqiroAB0CSmTKrHoBx0OTlLVZt1q9HrAEpWBibn+8ZkPw5FrXz"
[7] "8hejTfQDL3DQhR2tWq5KTuO/7BU170rYCqmKyMSEgDLhikiIR/iS5pNy5Vncpy2X"
[8] "wQIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 a7 34 2e b1 dd ed c5 ab 34 a8 f8 2b 95 12 04 32 b4
 [51] f5 ce ab 60 b2 75 3e e1 dd 45 a1 de f9 30 77 1b 51 b2 d8 21 2e 84 c3 f4 73
 [76] 56 0f b0 e6 5a 52 e0 b7 d1 69 05 c3 65 b8 fe e9 26 8a a8 38 54 78 6c 62 e3
[101] 87 67 4a ae 12 9c c9 f6 d5 64 59 12 de 94 66 5d bb 77 70 5e dd 56 dd dd 64
[126] 1a fe 96 4b 26 33 da 1a c0 05 14 5f e2 67 6e 81 b8 0e f7 25 aa 83 13 48 62
[151] 3d 07 1a 58 9f 3f 1e 06 2a e8 92 b4 3f c2 8a b1 99 88 c5 61 5f 9a 8f 4d 62
[176] ef 6c 94 be d3 da d8 58 15 6d c1 ab f5 52 5b 31 0f 18 1c 0a 38 38 60 a3 9c
[201] 93 58 f6 aa 8a ba 00 07 40 92 99 32 ab 1e 80 71 d0 e4 e5 2d 56 6d d6 af 47
[226] ac 01 29 58 18 9b 9f ef 19 90 fc 39 16 b5 f3 f2 17 a3 4d f4 03 2f 70 d0 85
[251] 1d ad 5a ae 4a 4e e3 bf ec 15 35 ef 4a d8 0a a9 8a c8 c4 84 80 32 e1 8a 48
[276] 88 47 f8 92 e6 93 72 e5 59 dc a7 2d 97 c1 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x5638e885a870>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x5638e885c120>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
 !! gmp not found, skipping bignum tests
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
