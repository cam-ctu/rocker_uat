
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "jpeg"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('jpeg')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("readJPEG")
> ### * readJPEG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readJPEG
> ### Title: Read a bitmap image stored in the JPEG format
> ### Aliases: readJPEG
> ### Keywords: IO
> 
> ### ** Examples
> 
> # read a sample file (R logo)
> img <- readJPEG(system.file("img", "Rlogo.jpg", package="jpeg"))
> 
> # read it also in native format
> img.n <- readJPEG(system.file("img", "Rlogo.jpg", package="jpeg"), TRUE)
> 
> # if your R supports it, we'll plot it
> if (exists("rasterImage")) { # can plot only in R 2.11.0 and higher
+   plot(1:2, type='n')
+ 
+   rasterImage(img, 1.2, 1.27, 1.8, 1.73)
+   rasterImage(img.n, 1.5, 1.5, 1.9, 1.8)
+ }
> 
> 
> 
> cleanEx()
> nameEx("writeJPEG")
> ### * writeJPEG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeJPEG
> ### Title: Write a bitmap image in JPEG format
> ### Aliases: writeJPEG
> ### Keywords: IO
> 
> ### ** Examples
> 
> # read a sample file (R logo)
> img <- readJPEG(system.file("img","Rlogo.jpg",package="jpeg"))
> # write the image into a raw vector - using a low quality
> r <- writeJPEG(img, raw(), quality=0.3)
> # read it back again
> img2 <- readJPEG(r)
> # it will be slightly different since JPEG is a lossy format
> # in particular at the low quality
> max(abs(img - img2))
[1] 0.2941176
> stopifnot(max(abs(img - img2)) < 0.4)
> 
> # try to write a native raster
> img3 <- readJPEG(system.file("img","Rlogo.jpg",package="jpeg"), TRUE)
> r2 <- writeJPEG(img3, raw())
> img4 <- readJPEG(r2, TRUE)
> # comparing nativeRaster values is not easy, so let's do write/read again
> img5 <- readJPEG(writeJPEG(img4, raw()))
> max(abs(img - img5))
[1] 0.1843137
> stopifnot(max(abs(img - img5)) < 0.3)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.065 0.006 0.071 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
