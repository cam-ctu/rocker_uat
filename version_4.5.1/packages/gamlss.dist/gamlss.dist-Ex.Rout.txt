
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "gamlss.dist"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('gamlss.dist')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("BB")
> ### * BB
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BB
> ### Title: Beta Binomial Distribution For Fitting a GAMLSS Model
> ### Aliases: BB dBB pBB qBB rBB
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> # BB()# gives information about the default links for the Beta Binomial distribution 
> #plot the pdf
> plot(function(y) dBB(y, mu = .5, sigma = 1, bd =40), from=0, to=40, n=40+1, type="h")
> #calculate the cdf and plotting it
> ppBB <- pBB(seq(from=0, to=40), mu=.2 , sigma=3, bd=40)
> plot(0:40,ppBB, type="h")
> #calculating quantiles and plotting them  
> qqBB <- qBB(ppBB, mu=.2 , sigma=3, bd=40)
> plot(qqBB~ ppBB)
> # when the argument fast is useful
> p <- pBB(c(0,1,2,3,4,5), mu=.01 , sigma=1, bd=5)
> qBB(p, mu=.01 , sigma=1, bd=5, fast=TRUE)
[1] 0 1 2 3 4 5
> #  0 1 1 2 3 5
> qBB(p, mu=.01 , sigma=1, bd=5, fast=FALSE)
[1] 0 1 2 3 4 5
> #  0 1 2 3 4 5
> # generate random sample
> tN <- table(Ni <- rBB(1000, mu=.2, sigma=1, bd=20))
> r <- barplot(tN, col='lightblue')
> # fitting a model 
> # library(gamlss)
> #data(aep)   
> # fits a Beta-Binomial model
> #h<-gamlss(y~ward+loglos+year, sigma.formula=~year+ward, family=BB, data=aep) 
> 
> 
> 
> cleanEx()
> nameEx("BCCG")
> ### * BCCG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BCCG
> ### Title: Box-Cox Cole and Green distribution (or Box-Cox normal) for
> ###   fitting a GAMLSS
> ### Aliases: BCCG BCCGuntr dBCCG pBCCG qBCCG rBCCG BCCGo pBCCGo qBCCGo
> ###   rBCCGo dBCCGo
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> BCCG()   # gives information about the default links for the Cole and Green distribution 

GAMLSS Family: BCCG Box-Cox-Cole-Green 
Link function for mu   : identity 
Link function for sigma: log 
Link function for nu   : identity 
> # library(gamlss)
> #data(abdom)
> #h<-gamlss(y~cs(x,df=3), sigma.formula=~cs(x,1), family=BCCG, data=abdom) 
> #plot(h)
> plot(function(x) dBCCG(x, mu=5,sigma=.5,nu=-1), 0.0, 20, 
+  main = "The BCCG  density mu=5,sigma=.5,nu=-1")
> plot(function(x) pBCCG(x, mu=5,sigma=.5,nu=-1), 0.0, 20, 
+  main = "The BCCG  cdf mu=5, sigma=.5, nu=-1")
> 
> 
> 
> cleanEx()
> nameEx("BCPE")
> ### * BCPE
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BCPE
> ### Title: Box-Cox Power Exponential distribution for fitting a GAMLSS
> ### Aliases: BCPE dBCPE pBCPE qBCPE rBCPE BCPEuntr checkBCPE BCPEo dBCPEo
> ###   pBCPEo qBCPEo rBCPEo
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> # BCPE()   #
> # library(gamlss) 
> # data(abdom)
> #h<-gamlss(y~cs(x,df=3), sigma.formula=~cs(x,1), family=BCPE, data=abdom) 
> #plot(h)
> plot(function(x)dBCPE(x, mu=5,sigma=.5,nu=1, tau=3), 0.0, 15, 
+  main = "The BCPE  density mu=5,sigma=.5,nu=1, tau=3")
> plot(function(x) pBCPE(x, mu=5,sigma=.5,nu=1, tau=3), 0.0, 15, 
+  main = "The BCPE  cdf mu=5, sigma=.5, nu=1, tau=3")
> 
> 
> 
> cleanEx()
> nameEx("BCt")
> ### * BCt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BCT
> ### Title: Box-Cox t distribution for fitting a GAMLSS
> ### Aliases: BCT dBCT pBCT qBCT rBCT BCTuntr BCTo dBCTo pBCTo qBCTo rBCTo
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> BCT()   # gives information about the default links for the Box Cox t distribution

GAMLSS Family: BCT Box-Cox t 
Link function for mu   : identity 
Link function for sigma: log 
Link function for nu   : identity 
Link function for tau  : log 
> # library(gamlss)
> #data(abdom)
> #h<-gamlss(y~cs(x,df=3), sigma.formula=~cs(x,1), family=BCT, data=abdom) # 
> #plot(h)
> plot(function(x)dBCT(x, mu=5,sigma=.5,nu=1, tau=2), 0.0, 20, 
+  main = "The BCT  density mu=5,sigma=.5,nu=1, tau=2")
> plot(function(x) pBCT(x, mu=5,sigma=.5,nu=1, tau=2), 0.0, 20, 
+  main = "The BCT  cdf mu=5, sigma=.5, nu=1, tau=2")
> 
> 
> 
> cleanEx()
> nameEx("BE")
> ### * BE
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BE
> ### Title: The beta distribution for fitting a GAMLSS
> ### Aliases: BE dBE pBE qBE rBE BEo dBEo pBEo qBEo rBEo
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> BE()# gives information about the default links for the beta distribution

GAMLSS Family: BE Beta 
Link function for mu   : logit 
Link function for sigma: logit 
> dat1<-rBE(100, mu=.3, sigma=.5)
> hist(dat1)        
> #library(gamlss)
> # mod1<-gamlss(dat1~1,family=BE) # fits a constant for mu and sigma 
> #fitted(mod1)[1]
> #fitted(mod1,"sigma")[1]
> plot(function(y) dBE(y, mu=.1 ,sigma=.5), 0.001, .999)
> plot(function(y) pBE(y, mu=.1 ,sigma=.5), 0.001, 0.999)
> plot(function(y) qBE(y, mu=.1 ,sigma=.5), 0.001, 0.999)
> plot(function(y) qBE(y, mu=.1 ,sigma=.5, lower.tail=FALSE), 0.001, .999)
> dat2<-rBEo(100, mu=1, sigma=2)
> #mod2<-gamlss(dat2~1,family=BEo) # fits a constant for mu and sigma 
> #fitted(mod2)[1]
> #fitted(mod2,"sigma")[1]
> 
> 
> 
> cleanEx()
> nameEx("BEINF")
> ### * BEINF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BEINF
> ### Title: The beta inflated distribution for fitting a GAMLSS
> ### Aliases: BEINF dBEINF pBEINF qBEINF rBEINF plotBEINF meanBEINF BEINF0
> ###   dBEINF0 pBEINF0 qBEINF0 rBEINF0 BEINF1 dBEINF1 pBEINF1 qBEINF1
> ###   rBEINF1 meanBEINF0 meanBEINF1 plotBEINF0 plotBEINF1
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> BEINF()# gives information about the default links for the beta inflated distribution

GAMLSS Family: BEINF Beta Inflated 
Link function for mu   : logit 
Link function for sigma: logit 
Link function for nu   : log 
Link function for tau  : log 
> BEINF0()

GAMLSS Family: BEINF0 Beta Inflated zero 
Link function for mu   : logit 
Link function for sigma: logit 
Link function for nu   : log 
> BEINF1()

GAMLSS Family: BEINF1 Beta Inflated one 
Link function for mu   : logit 
Link function for sigma: logit 
Link function for nu   : log 
> # plotting the distributions
> op<-par(mfrow=c(2,2)) 
> plotBEINF( mu =.5 , sigma=.5, nu = 0.5, tau = 0.5, from = 0, to=1, n = 101)
> plotBEINF0( mu =.5 , sigma=.5, nu = 0.5,  from = 0, to=1, n = 101)
> plotBEINF1( mu =.5 , sigma=.5, nu = 0.5,  from = 0.001, to=1, n = 101)
> curve(dBE(x, mu =.5, sigma=.5),  0.01, 0.999)
> par(op)
> # plotting the cdf
> op<-par(mfrow=c(2,2)) 
> plotBEINF( mu =.5 , sigma=.5, nu = 0.5, tau = 0.5, from = 0, to=1, n = 101, main="BEINF")
> plotBEINF0( mu =.5 , sigma=.5, nu = 0.5,  from = 0, to=1, n = 101, main="BEINF0")
> plotBEINF1( mu =.5 , sigma=.5, nu = 0.5,  from = 0.001, to=1, n = 101, main="BEINF1")
> curve(dBE(x, mu =.5, sigma=.5),  0.01, 0.999, main="BE")
> par(op)
> #---------------------------------------------
> op<-par(mfrow=c(2,2)) 
> plotBEINF( mu =.5 , sigma=.5, nu = 0.5, tau = 0.5, from = 0, to=1, n = 101, main="BEINF")
> plotBEINF0( mu =.5 , sigma=.5, nu = 0.5,  from = 0, to=1, n = 101, main="BEINF0")
> plotBEINF1( mu =.5 , sigma=.5, nu = 0.5,  from = 0.001, to=1, n = 101, main="BEINF1")
> curve(dBE(x, mu =.5, sigma=.5),  0.01, 0.999, main="BE")
> par(op)
> #---------------------------------------------
> op<-par(mfrow=c(2,2)) 
> curve( pBEINF(x, mu=.5 ,sigma=.5, nu = 0.5, tau = 0.5,), 0, 1, ylim=c(0,1), main="BEINF" )
> curve(pBEINF0(x, mu=.5 ,sigma=.5, nu = 0.5), 0, 1, ylim=c(0,1), main="BEINF0")
> curve(pBEINF1(x, mu=.5 ,sigma=.5, nu = 0.5), 0, 1, ylim=c(0,1), main="BEINF1")
> curve(    pBE(x, mu=.5 ,sigma=.5), .001, .99, ylim=c(0,1), main="BE")
> par(op)
> #---------------------------------------------
> op<-par(mfrow=c(2,2)) 
> curve(qBEINF(x, mu=.5 ,sigma=.5, nu = 0.5, tau = 0.5), .01, .99, main="BEINF" )
> curve(qBEINF0(x, mu=.5 ,sigma=.5, nu = 0.5), .01, .99, main="BEINF0" )
> curve(qBEINF1(x, mu=.5 ,sigma=.5, nu = 0.5), .01, .99, main="BEINF1" )
> curve(qBE(x, mu=.5 ,sigma=.5), .01, .99 , main="BE")
> par(op)
> 
> #---------------------------------------------
> op<-par(mfrow=c(2,2)) 
> hist(rBEINF(200, mu=.5 ,sigma=.5, nu = 0.5, tau = 0.5))
> hist(rBEINF0(200, mu=.5 ,sigma=.5, nu = 0.5))
> hist(rBEINF1(200, mu=.5 ,sigma=.5, nu = 0.5))
> hist(rBE(200, mu=.5 ,sigma=.5))
> par(op)
> # fit a model to the data 
> # library(gamlss)
> #m1<-gamlss(dat~1,family=BEINF)
> #meanBEINF(m1)[1]
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("BEOI")
> ### * BEOI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BEOI
> ### Title: The one-inflated beta distribution for fitting a GAMLSS
> ### Aliases: BEOI dBEOI pBEOI qBEOI rBEOI plotBEOI meanBEOI
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> 
> BEOI()# gives information about the default links for the BEOI distribution

GAMLSS Family: BEOI One Inflated Beta 
Link function for mu   : logit 
Link function for sigma: log 
Link function for nu   : logit 
> # plotting the distribution
> plotBEOI( mu =0.5 , sigma=5, nu = 0.1, from = 0.001, to=1, n = 101)
[1] 0.1
> # plotting the cdf
> plot(function(y) pBEOI(y, mu=.5 ,sigma=5, nu=0.1), 0.001, 0.999)
> # plotting the inverse cdf
> plot(function(y) qBEOI(y, mu=.5 ,sigma=5, nu=0.1), 0.001, 0.999)
> # generate random numbers
> dat<-rBEOI(100, mu=.5, sigma=5, nu=0.1)
> # fit a model to the data. 
> # library(gamlss)
> #mod1<-gamlss(dat~1,sigma.formula=~1, nu.formula=~1, family=BEOI) 
> #fitted(mod1)[1]
> #summary(mod1)
> #fitted(mod1,"mu")[1]        #fitted mu
> #fitted(mod1,"sigma")[1]     #fitted sigma
> #fitted(mod1,"nu")[1]        #fitted nu
> #meanBEOI(mod1)[1] # expected value of the response
> 
> 
> 
> cleanEx()
> nameEx("BEZI")
> ### * BEZI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BEZI
> ### Title: The zero-inflated beta distribution for fitting a GAMLSS
> ### Aliases: BEZI dBEZI pBEZI qBEZI rBEZI plotBEZI meanBEZI
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> 
>  BEZI()# gives information about the default links for the BEZI distribution

GAMLSS Family: BEZI Zero Inflated Beta 
Link function for mu   : logit 
Link function for sigma: log 
Link function for nu   : logit 
> # plotting the distribution
> plotBEZI( mu =0.5 , sigma=5, nu = 0.1, from = 0, to=0.99, n = 101)
> # plotting the cdf
> plot(function(y) pBEZI(y, mu=.5 ,sigma=5, nu=0.1), 0, 0.999)
> # plotting the inverse cdf
> plot(function(y) qBEZI(y, mu=.5 ,sigma=5, nu=0.1), 0, 0.999)
> # generate random numbers
> dat<-rBEZI(100, mu=.5, sigma=5, nu=0.1)
> # fit a model to the data. Tits a constant for mu, sigma and nu
> # library(gamlss)
> #mod1<-gamlss(dat~1,sigma.formula=~1, nu.formula=~1, family=BEZI) 
> #fitted(mod1)[1]
> #summary(mod1)
> #fitted(mod1,"mu")[1]         #fitted mu   
> #fitted(mod1,"sigma")[1]      #fitted sigma 
> #fitted(mod1,"nu")[1]         #fitted nu  
> #meanBEZI(mod1)[1] # expected value of the response
> 
> 
> 
> cleanEx()
> nameEx("BI")
> ### * BI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BI
> ### Title: Binomial distribution for fitting a GAMLSS
> ### Aliases: BI pBI dBI qBI rBI
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
>  BI()# gives information about the default links for the Binomial distribution 

GAMLSS Family: BI Binomial 
Link function for mu   : logit 
> # data(aep)   
> # library(gamlss)
> # h<-gamlss(y~ward+loglos+year, family=BI, data=aep)  
> # plot of the binomial distribution
> curve(dBI(x, mu = .5, bd=10), from=0, to=10, n=10+1, type="h")
> tN <- table(Ni <- rBI(1000, mu=.2, bd=10))
> r <- barplot(tN, col='lightblue')
> 
> 
> 
> cleanEx()
> nameEx("BNB")
> ### * BNB
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BNB
> ### Title: Beta Negative Binomial distribution for fitting a GAMLSS
> ### Aliases: BNB dBNB pBNB qBNB rBNB ZABNB dZABNB pZABNB qZABNB rZABNB
> ###   ZIBNB dZIBNB pZIBNB qZIBNB rZIBNB
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> BNB()   # gives information about the default links for the beta negative binomial

GAMLSS Family: BNB Beta Negative Binomial 
Link function for mu   : log 
Link function for sigma: log 
Link function for nu   : log 
> # plotting the distribution
> plot(function(y) dBNB(y, mu = 10, sigma = 0.5, nu=2), from=0, to=40, n=40+1, type="h")
> # creating random variables and plot them 
> tN <- table(Ni <- rBNB(1000, mu=5, sigma=0.5, nu=2))
> r <- barplot(tN, col='lightblue')
> 
> ZABNB()

GAMLSS Family: ZABNB Zero Adjusted BNB 
Link function for mu   : log 
Link function for sigma: log 
Link function for nu   : log 
Link function for tau  : logit 
> ZIBNB()

GAMLSS Family: ZIBNB 
Link function for mu   : log 
Link function for sigma: log 
Link function for nu   : log 
Link function for tau  : logit 
> # plotting the distribution
> plot(function(y) dZABNB(y, mu = 10, sigma = 0.5, nu=2, tau=.1),  
+      from=0, to=40, n=40+1, type="h")
> plot(function(y) dZIBNB(y, mu = 10, sigma = 0.5, nu=2, tau=.1),  
+      from=0, to=40, n=40+1, type="h")
> ## Not run: 
> ##D library(gamlss)
> ##D data(species)
> ##D species <- transform(species, x=log(lake))
> ##D m6 <- gamlss(fish~ pb(x), sigma.fo=~1, data=species, family=BNB)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("DBI")
> ### * DBI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DBI
> ### Title: The Double binomial distribution
> ### Aliases: DBI pDBI dDBI qDBI rDBI GetBI_C
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> DBI()

GAMLSS Family: DBI Double Binomial 
Link function for mu   : logit 
Link function for sigma: log 
> x <- 0:20
> # underdispersed DBI
> plot(x, dDBI(x, mu=.5, sigma=.2, bd=20), type="h", col="green", lwd=2)
> # binomial
> lines(x+0.1, dDBI(x, mu=.5, sigma=1, bd=20), type="h", col="black", lwd=2)
> # overdispersed DBI
> lines(x+.2, dDBI(x, mu=.5, sigma=2, bd=20), type="h", col="red",lwd=2)
> 
> 
> 
> cleanEx()
> nameEx("DBURR12")
> ### * DBURR12
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DBURR12
> ### Title: The Discrete Burr type XII distribution for fitting a GAMLSS
> ###   model
> ### Aliases: DBURR12 dDBURR12 pDBURR12 qDBURR12 rDBURR12
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> DBURR12()# 

GAMLSS Family: DBURR12 Discrete Burr XII 
Link function for mu   : log 
Link function for sigma: log 
Link function for nu   : log 
> #plot the pdf using plot 
> plot(function(y) dDBURR12(y, mu=10, sigma=1, nu=1), from=0, to=100, n=100+1, type="h") # pdf
> # plot the cdf
> plot(seq(from=0,to=100),pDBURR12(seq(from=0,to=100), mu=10, sigma=1, nu=1), type="h")   # cdf
> # generate random sample
> tN <- table(Ni <- rDBURR12(100, mu=5, sigma=1, nu=1))
> r <- barplot(tN, col='lightblue')
> 
> 
> 
> cleanEx()
> nameEx("DEL")
> ### * DEL
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DEL
> ### Title: The Delaporte distribution for fitting a GAMLSS model
> ### Aliases: DEL dDEL pDEL qDEL rDEL
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
>  DEL()# gives information about the default links for the  Delaporte distribution 

GAMLSS Family: DEL Delaporte 
Link function for mu   : log 
Link function for sigma: log 
Link function for nu   : logit 
> #plot the pdf using plot 
> plot(function(y) dDEL(y, mu=10, sigma=1, nu=.5), from=0, to=100, n=100+1, type="h") # pdf
> # plot the cdf
> plot(seq(from=0,to=100),pDEL(seq(from=0,to=100), mu=10, sigma=1, nu=0.5), type="h")   # cdf
> # generate random sample
> tN <- table(Ni <- rDEL(100, mu=10, sigma=1, nu=0.5))
> r <- barplot(tN, col='lightblue')
> # fit a model to the data 
> # libary(gamlss)
> # gamlss(Ni~1,family=DEL, control=gamlss.control(n.cyc=50))
> 
> 
> 
> cleanEx()
> nameEx("DPO")
> ### * DPO
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DPO
> ### Title: The Double Poisson distribution
> ### Aliases: DPO pDPO dDPO qDPO rDPO get_C
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> DPO()

GAMLSS Family: DPO Double Poisson 
Link function for mu   : log 
Link function for sigma: log 
> # overdisperse DPO
> x <- 0:20
> plot(x, dDPO(x, mu=5, sigma=3), type="h", col="red")
> # underdisperse DPO
> plot(x, dDPO(x, mu=5, sigma=.3), type="h", col="red")
> # generate random sample
>  Y <- rDPO(100,5,.5)
> plot(table(Y))
> points(0:20, 100*dDPO(0:20, mu=5, sigma=.5)+0.2,  col="red")
> # fit a model to the data 
> # library(gamlss)
> # gamlss(Y~1,family=DPO)
> 
> 
> 
> cleanEx()
> nameEx("EGB2")
> ### * EGB2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: EGB2
> ### Title: The exponential generalized Beta type 2 distribution for fitting
> ###   a GAMLSS
> ### Aliases: EGB2 dEGB2 pEGB2 qEGB2 rEGB2
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> EGB2()   # 

GAMLSS Family: EGB2 Exponential generalized beta 2 (i.e. of the second kind) 
Link function for mu   : identity 
Link function for sigma: log 
Link function for nu   : log 
Link function for tau  : log 
> y<- rEGB2(200, mu=5, sigma=2, nu=1, tau=4)
> library(MASS)
> truehist(y)
> fx<-dEGB2(seq(min(y), 20, length=200), mu=5 ,sigma=2, nu=1, tau=4)
> lines(seq(min(y),20,length=200),fx)
> # something funny here
> # library(gamlss)
> # histDist(y, family=EGB2, n.cyc=60)
> integrate(function(x) x*dEGB2(x=x, mu=5, sigma=2, nu=1, tau=4), -Inf, Inf)
1.333333 with absolute error < 7.3e-05
> curve(dEGB2(x, mu=5 ,sigma=2, nu=1, tau=4), -10, 10, main = "The EGB2  density 
+              mu=5, sigma=2, nu=1, tau=4")
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("EXP")
> ### * EXP
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: EXP
> ### Title: Exponential distribution for fitting a GAMLSS
> ### Aliases: EXP pEXP dEXP qEXP rEXP
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> y<-rEXP(1000,mu=1) # generates 1000 random observations 
> hist(y)
> # library(gamlss)
> # histDist(y, family=EXP) 
> 
> 
> 
> cleanEx()
> nameEx("GA")
> ### * GA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GA
> ### Title: Gamma distribution for fitting a GAMLSS
> ### Aliases: GA dGA qGA pGA rGA
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> GA()# gives information about the default links for the gamma distribution      

GAMLSS Family: GA Gamma 
Link function for mu   : log 
Link function for sigma: log 
> # dat<-rgamma(100, shape=1, scale=10) # generates 100 random observations 
> # fit a gamlss model
> # gamlss(dat~1,family=GA) 
> # fits a constant for each parameter mu and sigma of the gamma distribution
> newdata<-rGA(1000,mu=1,sigma=1) # generates 1000 random observations
> hist(newdata) 
> rm(dat,newdata)
Warning in rm(dat, newdata) : object 'dat' not found
> 
> 
> 
> cleanEx()
> nameEx("GAF")
> ### * GAF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GAF
> ### Title: The Gamma distribution family
> ### Aliases: GAF dGAF pGAF qGAF rGAF
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> GAF()

GAMLSS Family: GAF gamma family 
Link function for mu   : log 
Link function for sigma: log 
Link function for nu   : identity 
> ## Not run: 
> ##D m1<-gamlss(y~poly(x,2),data=abdom,family=GAF, method=mixed(1,100),  
> ##D            c.crit=0.00001)
> ##D # using RS()
> ##D m2<-gamlss(y~poly(x,2),data=abdom,family=GAF,  n.cyc=5000, c.crit=0.00001)
> ##D # the estimates of nu slightly different
> ##D fitted(m1, "nu")[1]
> ##D fitted(m2, "nu")[1]
> ##D # global deviance almost identical
> ##D AIC(m1, m2)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("GAMLSS")
> ### * GAMLSS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GAMLSS
> ### Title: Create a GAMLSS Distribution
> ### Aliases: GAMLSS format.GAMLSS print.GAMLSS mean.GAMLSS variance.GAMLSS
> ###   skewness.GAMLSS kurtosis.GAMLSS pdf.GAMLSS log_pdf.GAMLSS cdf.GAMLSS
> ###   quantile.GAMLSS random.GAMLSS support.GAMLSS is_discrete.GAMLSS
> ###   is_continuous.GAMLSS
> 
> ### ** Examples
> 
> ## Don't show: 
>  if(!requireNamespace("distributions3")) {
+   if(interactive() || is.na(Sys.getenv("_R_CHECK_PACKAGE_NAME_", NA))) {
+     stop("not all packages required for the example are installed")
+   } else q() }
Loading required namespace: distributions3
> ## End(Don't show)
> ## package and random seed
> library("distributions3")

Attaching package: ‘distributions3’

The following object is masked from ‘package:gamlss.dist’:

    GP

The following object is masked from ‘package:stats’:

    Gamma

The following object is masked from ‘package:grDevices’:

    pdf

> set.seed(6020)
> 
> ## three Weibull distributions
> X <- GAMLSS("WEI", mu = c(1, 1, 2), sigma = c(1, 2, 2))
> X
[1] "GAMLSS WEI(mu = 1, sigma = 1)" "GAMLSS WEI(mu = 1, sigma = 2)"
[3] "GAMLSS WEI(mu = 2, sigma = 2)"
> 
> ## moments
> mean(X)
[1] 1.0000000 0.8862269 1.7724539
> variance(X)
[1] 1.0000000 0.2146018 0.8584073
> 
> ## support interval (minimum and maximum)
> support(X)
     min max
[1,]   0 Inf
[2,]   0 Inf
[3,]   0 Inf
> is_discrete(X)
[1] FALSE FALSE FALSE
> is_continuous(X)
[1] TRUE TRUE TRUE
> 
> ## simulate random variables
> random(X, 5)
          r_1       r_2       r_3      r_4      r_5
[1,] 1.004812 0.3993868 1.3084904 0.741085 3.209012
[2,] 1.023982 0.5593371 0.5440658 1.046042 2.244104
[3,] 1.254624 2.8848168 3.0103388 2.166692 2.572731
> 
> ## histograms of 1,000 simulated observations
> x <- random(X, 1000)
> hist(x[1, ], main = "WEI(1,1)")
> hist(x[2, ], main = "WEI(1,2)")
> hist(x[3, ], main = "WEI(2,2)")
> 
> ## probability density function (PDF) and log-density (or log-likelihood)
> x <- c(2, 2, 1)
> pdf(X, x)
[1] 0.13533528 0.07326256 0.38940039
> pdf(X, x, log = TRUE)
[1] -2.0000000 -2.6137056 -0.9431472
> log_pdf(X, x)
[1] -2.0000000 -2.6137056 -0.9431472
> 
> ## cumulative distribution function (CDF)
> cdf(X, x)
[1] 0.8646647 0.9816844 0.2211992
> 
> ## quantiles
> quantile(X, 0.5)
[1] 0.6931472 0.8325546 1.6651092
> 
> ## cdf() and quantile() are inverses
> cdf(X, quantile(X, 0.5))
[1] 0.5 0.5 0.5
> quantile(X, cdf(X, 1))
[1] 1 1 1
> 
> ## all methods above can either be applied elementwise or for
> ## all combinations of X and x, if length(X) = length(x),
> ## also the result can be assured to be a matrix via drop = FALSE
> p <- c(0.05, 0.5, 0.95)
> quantile(X, p, elementwise = FALSE)
         q_0.05     q_0.5   q_0.95
[1,] 0.05129329 0.6931472 2.995732
[2,] 0.22648023 0.8325546 1.730818
[3,] 0.45296046 1.6651092 3.461637
> quantile(X, p, elementwise = TRUE)
[1] 0.05129329 0.83255461 3.46163677
> quantile(X, p, elementwise = TRUE, drop = FALSE)
       quantile
[1,] 0.05129329
[2,] 0.83255461
[3,] 3.46163677
> 
> ## compare theoretical and empirical mean from 1,000 simulated observations
> cbind(
+   "theoretical" = mean(X),
+   "empirical" = rowMeans(random(X, 1000))
+ )
     theoretical empirical
[1,]   1.0000000 1.0075953
[2,]   0.8862269 0.9057806
[3,]   1.7724539 1.7587308
> 
> 
> 
> cleanEx()

detaching ‘package:distributions3’

> nameEx("GB1")
> ### * GB1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GB1
> ### Title: The generalized Beta type 1 distribution for fitting a GAMLSS
> ### Aliases: GB1 dGB1 pGB1 qGB1 rGB1
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> GB1()   # 

GAMLSS Family: GB1 Generalized beta type 1 
Link function for mu   : logit 
Link function for sigma: logit 
Link function for nu   : log 
Link function for tau  : log 
> y<- rGB1(200, mu=.1, sigma=.6, nu=1, tau=4)
> hist(y)
> # library(gamlss)
> # histDist(y, family=GB1, n.cyc=60)
> curve(dGB1(x, mu=.1 ,sigma=.6, nu=1, tau=4), 0.01, 0.99, main = "The GB1  
+            density mu=0.1, sigma=.6, nu=1, tau=4")
> 
> 
> 
> 
> cleanEx()
> nameEx("GB2")
> ### * GB2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GB2
> ### Title: The generalized Beta type 2 and generalized Pareto distributions
> ###   for fitting a GAMLSS
> ### Aliases: GB2 dGB2 pGB2 qGB2 rGB2 dGP pGP qGP rGP GP
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> GB2()   # 

GAMLSS Family: GB2 Generalized beta 2 (i.e. of the second kind) 
Link function for mu   : log 
Link function for sigma: log 
Link function for nu   : log 
Link function for tau  : log 
> y<- rGB2(200, mu=5, sigma=2, nu=1, tau=1)
> library(MASS)
> truehist(y)
> fx<-dGB2(seq(0.01, 20, length=200), mu=5 ,sigma=2, nu=1, tau=1)
> lines(seq(0.01,20,length=200),fx)
> integrate(function(x) x*dGB2(x=x, mu=5, sigma=2, nu=1, tau=1), 0, Inf)
7.853982 with absolute error < 4.1e-06
> mean(y)
[1] 7.365776
> curve(dGB2(x, mu=5 ,sigma=2, nu=1, tau=1), 0.01, 20, 
+             main = "The GB2  density mu=5, sigma=2, nu=1, tau=4")
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("GEOM")
> ### * GEOM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GEOM
> ### Title: Geometric distribution for fitting a GAMLSS model
> ### Aliases: GEOM dGEOM pGEOM qGEOM rGEOM GEOMo dGEOMo pGEOMo qGEOMo rGEOMo
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> par(mfrow=c(2,2))
> y<-seq(0,20,1)
> plot(y, dGEOM(y), type="h")
> q <- seq(0, 20, 1)
> plot(q, pGEOM(q), type="h")
> p<-seq(0.0001,0.999,0.05)
> plot(p , qGEOM(p), type="s")
> dat <- rGEOM(100)
> hist(dat)
> #summary(gamlss(dat~1, family=GEOM))
> par(mfrow=c(2,2))
> y<-seq(0,20,1)
> plot(y, dGEOMo(y), type="h")
> q <- seq(0, 20, 1)
> plot(q, pGEOMo(q), type="h")
> p<-seq(0.0001,0.999,0.05)
> plot(p , qGEOMo(p), type="s")
> dat <- rGEOMo(100)
> hist(dat)
> #summary(gamlss(dat~1, family="GE"))
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("GG")
> ### * GG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GG
> ### Title: Generalized Gamma distribution for fitting a GAMLSS
> ### Aliases: GG pGG dGG qGG rGG
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> y<-rGG(100,mu=1,sigma=0.1, nu=-.5) # generates 100 random observations  
> hist(y)
> # library(gamlss)
> #histDist(y, family=GG)
> #m1 <-gamlss(y~1,family=GG)
> #prof.dev(m1, "nu", min=-2, max=2, step=0.2)
> 
> 
> 
> cleanEx()
> nameEx("GIG")
> ### * GIG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GIG
> ### Title: Generalized Inverse Gaussian distribution for fitting a GAMLSS
> ### Aliases: GIG pGIG dGIG qGIG rGIG
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> y<-rGIG(100,mu=1,sigma=1, nu=-0.5) # generates 1000 random observations 
> hist(y)
> # library(gamlss)
> # histDist(y, family=GIG) 
> 
> 
> 
> cleanEx()
> nameEx("GPO")
> ### * GPO
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GPO
> ### Title: The generalised Poisson distribution
> ### Aliases: GPO dGPO pGPO qGPO rGPO
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> GPO()# gives information about the default links for the

GAMLSS Family: GPO Generalised Poisson 
Link function for mu   : log 
Link function for sigma: log 
> #plot the pdf using plot 
> plot(function(y) dGPO(y, mu=10, sigma=1 ), from=0, to=100, n=100+1, type="h") # pdf
> # plot the cdf
> plot(seq(from=0,to=100),pGPO(seq(from=0,to=100), mu=10, sigma=1), type="h")   # cdf
> # generate random sample
> tN <- table(Ni <- rGPO(100, mu=5, sigma=1))
> r <- barplot(tN, col='lightblue')
> 
> 
> 
> cleanEx()
> nameEx("GT")
> ### * GT
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GT
> ### Title: The generalized t distribution for fitting a GAMLSS
> ### Aliases: GT dGT pGT qGT rGT
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> GT()   # 

GAMLSS Family: GT Generalized t 
Link function for mu   : identity 
Link function for sigma: log 
Link function for nu   : log 
Link function for tau  : log 
> y<- rGT(200, mu=5, sigma=1, nu=1, tau=4)
> hist(y)
> curve(dGT(x, mu=5 ,sigma=2,nu=1, tau=4), -2, 11, 
+       main = "The GT  density mu=5 ,sigma=1, nu=1, tau=4")
> # library(gamlss)
> # m1<-gamlss(y~1, family=GT) 
> 
> 
> 
> cleanEx()
> nameEx("GU")
> ### * GU
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GU
> ### Title: The Gumbel distribution for fitting a GAMLSS
> ### Aliases: GU dGU pGU qGU rGU
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> 
> plot(function(x) dGU(x, mu=0,sigma=1), -6, 3, 
+  main = "{Gumbel  density mu=0,sigma=1}")
> GU()# gives information about the default links for the Gumbel distribution      

GAMLSS Family: GU Gumbel 
Link function for mu   : identity 
Link function for sigma: log 
> dat<-rGU(100, mu=10, sigma=2) # generates 100 random observations 
> hist(dat)
> # library(gamlss)
> # gamlss(dat~1,family=GU) # fits a constant for each parameter mu and sigma 
> 
> 
> 
> 
> cleanEx()
> nameEx("IG")
> ### * IG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: IG
> ### Title: Inverse Gaussian distribution for fitting a GAMLSS
> ### Aliases: IG dIG pIG qIG rIG
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> IG()# gives information about the default links for the normal distribution

GAMLSS Family: IG Inverse Gaussian 
Link function for mu   : log 
Link function for sigma: log 
> # library(gamlss)
> # data(rent)        
> # gamlss(R~cs(Fl),family=IG, data=rent) # 
> plot(function(x)dIG(x, mu=1,sigma=.5), 0.01, 6, 
+  main = "{Inverse Gaussian  density mu=1,sigma=0.5}")
> plot(function(x)pIG(x, mu=1,sigma=.5), 0.01, 6, 
+  main = "{Inverse Gaussian  cdf mu=1,sigma=0.5}")
> 
> 
> 
> cleanEx()
> nameEx("IGAMMA")
> ### * IGAMMA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: IGAMMA
> ### Title: Inverse Gamma distribution for fitting a GAMLSS
> ### Aliases: IGAMMA dIGAMMA pIGAMMA qIGAMMA rIGAMMA
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> par(mfrow=c(2,2))
> y<-seq(0.2,20,0.2)
> plot(y, dIGAMMA(y), type="l")
> q <- seq(0.2, 20, 0.2)
> plot(q, pIGAMMA(q), type="l")
> p<-seq(0.0001,0.999,0.05)
> plot(p , qIGAMMA(p), type="l")
> dat <- rIGAMMA(50)
> hist(dat)
> #summary(gamlss(dat~1, family="IGAMMA"))
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("JSU")
> ### * JSU
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: JSU
> ### Title: The Johnson's Su distribution for fitting a GAMLSS
> ### Aliases: JSU dJSU pJSU qJSU rJSU
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> JSU()   

GAMLSS Family: JSU Johnson SU 
Link function for mu   : identity 
Link function for sigma: log 
Link function for nu   : identity 
Link function for tau  : log 
> plot(function(x)dJSU(x, mu=0,sigma=1,nu=-1, tau=.5), -4, 4, 
+  main = "The JSU  density mu=0,sigma=1,nu=-1, tau=.5")
> plot(function(x) pJSU(x, mu=0,sigma=1,nu=-1, tau=.5), -4, 4, 
+  main = "The JSU  cdf mu=0, sigma=1, nu=-1, tau=.5")
> # library(gamlss)
> # data(abdom) 
> # h<-gamlss(y~cs(x,df=3), sigma.formula=~cs(x,1), family=JSU, data=abdom) 
> 
> 
> 
> cleanEx()
> nameEx("JSUoriginal")
> ### * JSUoriginal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: JSUo
> ### Title: The original Johnson's Su distribution for fitting a GAMLSS
> ### Aliases: JSUo dJSUo pJSUo qJSUo rJSUo
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> JSU()   

GAMLSS Family: JSU Johnson SU 
Link function for mu   : identity 
Link function for sigma: log 
Link function for nu   : identity 
Link function for tau  : log 
> plot(function(x)dJSUo(x, mu=0,sigma=1,nu=-1, tau=.5), -4, 15, 
+  main = "The JSUo  density mu=0,sigma=1,nu=-1, tau=.5")
> plot(function(x) pJSUo(x, mu=0,sigma=1,nu=-1, tau=.5), -4, 15, 
+  main = "The JSUo  cdf mu=0, sigma=1, nu=-1, tau=.5")
> # library(gamlss)
> # data(abdom)
> # h<-gamlss(y~cs(x,df=3), sigma.formula=~cs(x,1), family=JSUo, 
> #          data=abdom, method=mixed(2,20)) 
> # plot(h)
> 
> 
> 
> cleanEx()
> nameEx("LG")
> ### * LG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: LG
> ### Title: Logarithmic and zero adjusted logarithmic distributions for
> ###   fitting a GAMLSS model
> ### Aliases: LG dLG pLG qLG rLG ZALG dZALG pZALG qZALG rZALG
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> LG() 

GAMLSS Family: LG Logarithmic 
Link function for mu   : logit 
> ZAP()

GAMLSS Family: ZAP Zero Adjusted Poisson 
Link function for mu   : log 
Link function for sigma: logit 
> # creating data and plotting them 
>  dat <- rLG(1000, mu=.3)
>    r <- barplot(table(dat), col='lightblue')
> dat1 <- rZALG(1000, mu=.3, sigma=.1)
>   r1 <- barplot(table(dat1), col='lightblue')
> 
> 
> 
> cleanEx()
> nameEx("LNO")
> ### * LNO
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: LNO
> ### Title: Log Normal distribution for fitting in GAMLSS
> ### Aliases: LNO dLNO pLNO qLNO rLNO LOGNO dLOGNO pLOGNO qLOGNO rLOGNO
> ###   LOGNO2 dLOGNO2 pLOGNO2 qLOGNO2 rLOGNO2
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> LOGNO()#  gives information about the default links for the log normal distribution 

GAMLSS Family: LOGNO Log Normal 
Link function for mu   : identity 
Link function for sigma: log 
> LOGNO2()

GAMLSS Family: LOGNO2 Log Normal 2 
Link function for mu   : log 
Link function for sigma: log 
> LNO()# gives information about the default links for the Box Cox distribution 

GAMLSS Family: LNO Box-Cox 
Link function for mu   : identity 
Link function for sigma: log 
Link function for nu   : 
> 
> # plotting the d, p, q, and r functions
> op<-par(mfrow=c(2,2))
> curve(dLOGNO(x, mu=0), 0, 10)
> curve(pLOGNO(x, mu=0), 0, 10)
> curve(qLOGNO(x, mu=0), 0, 1)
> Y<- rLOGNO(200)
> hist(Y)
> par(op)
> 
> # plotting the d, p, q, and r functions
> op<-par(mfrow=c(2,2))
> curve(dLOGNO2(x, mu=1), 0, 10)
> curve(pLOGNO2(x, mu=1), 0, 10)
> curve(qLOGNO2(x, mu=1), 0, 1)
> Y<- rLOGNO(200)
> hist(Y)
> par(op)
> 
> # library(gamlss)
> # data(abdom)
> # h1<-gamlss(y~cs(x), family=LOGNO, data=abdom)#fits the log-Normal distribution  
> # h2<-gamlss(y~cs(x), family=LNO, data=abdom)  #should be identical to the one above   
> # to change to square root transformation, i.e. fix nu=0.5 
> # h3<-gamlss(y~cs(x), family=LNO, data=abdom, nu.fix=TRUE, nu.start=0.5)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("LOGISTIC")
> ### * LOGISTIC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: LO
> ### Title: Logistic distribution for fitting a GAMLSS
> ### Aliases: LO dLO pLO qLO rLO
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> LO()# gives information about the default links for the Logistic distribution 

GAMLSS Family: LO Logistic 
Link function for mu   : identity 
Link function for sigma: log 
> plot(function(y) dLO(y, mu=10 ,sigma=2), 0, 20)
> plot(function(y) pLO(y, mu=10 ,sigma=2), 0, 20)
> plot(function(y) qLO(y, mu=10 ,sigma=2), 0, 1)
> # library(gamlss)
> # data(abdom)
> # h<-gamlss(y~cs(x,df=3), sigma.formula=~cs(x,1), family=LO, data=abdom) # fits 
> # plot(h)
> 
> 
> 
> cleanEx()
> nameEx("LOGITNO")
> ### * LOGITNO
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: LOGITNO
> ### Title: Logit Normal distribution for fitting in GAMLSS
> ### Aliases: LOGITNO dLOGITNO pLOGITNO qLOGITNO rLOGITNO
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> # plotting the d, p, q, and r functions
> op<-par(mfrow=c(2,2))
> curve(dLOGITNO(x), 0, 1)
> curve(pLOGITNO(x), 0, 1)
> curve(qLOGITNO(x), 0, 1)
> Y<- rLOGITNO(200)
> hist(Y)
> par(op)
> 
> # plotting the d, p, q, and r functions
> # sigma 3
> op<-par(mfrow=c(2,2))
> curve(dLOGITNO(x, sigma=3), 0, 1)
> curve(pLOGITNO(x, sigma=3), 0, 1)
> curve(qLOGITNO(x, sigma=3), 0, 1)
> Y<- rLOGITNO(200, sigma=3)
> hist(Y)
> par(op)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("LQNO")
> ### * LQNO
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: LQNO
> ### Title: Normal distribution with a specific mean and variance
> ###   relationship for fitting a GAMLSS model
> ### Aliases: LQNO dLQNO pLQNO qLQNO rLQNO
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> LQNO()# gives information about the default links for the normal distribution

GAMLSS Family: LQNO Normal with Linear Quadratic relationship between mean and variance 
Link function for mu   : log 
Link function for sigma: log 
> # a comparison of different Normal models
> #m1 <- gamlss(y~pb(x), sigma.fo=~pb(x), data=abdom,  family=NO(mu.link="log"))
> #m2 <- gamlss(y~pb(x), sigma.fo=~pb(x), data=abdom, family=LQNO)
> #m3 <- gamlss(y~pb(x), sigma.fo=~pb(x), data=abdom, family=NOF(mu.link="log"))
> #AIC(m1,m2,m3)
> 
> 
> 
> cleanEx()
> nameEx("Multinomial")
> ### * Multinomial
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MN3
> ### Title: Multinomial distribution in GAMLSS
> ### Aliases: MN3 MN4 MN5 dMN3 dMN4 dMN5 pMN3 pMN4 pMN5 qMN3 qMN4 qMN5 rMN3
> ###   rMN4 rMN5 MULTIN fittedMN
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
>  dMN3(3)
[1] 0.3333333
>  pMN3(2)
[1] 0.6666667
>  qMN3(.6)
[1] 2
>  rMN3(10)
 [1] 1 2 2 3 1 3 3 2 2 1
>   
> 
> 
> cleanEx()
> nameEx("NBF")
> ### * NBF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NBF
> ### Title: Negative Binomial Family distribution for fitting a GAMLSS
> ### Aliases: NBF dNBF pNBF qNBF rNBF ZINBF dZINBF pZINBF qZINBF rZINBF
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> NBF() # default link functions for the Negative Binomial Family 

GAMLSS Family: NBF NB Family 
Link function for mu   : log 
Link function for sigma: log 
Link function for nu   : log 
> # plotting the distribution
> plot(function(y) dNBF(y, mu = 10, sigma = 0.5, nu=2 ), from=0, 
+      to=40, n=40+1, type="h")
> # creating random variables and plot them 
> tN <- table(Ni <- rNBF(1000, mu=5, sigma=0.5, nu=2))
> r <- barplot(tN, col='lightblue')
> # zero inflated NBF
> ZINBF() # default link functions  for the zero inflated NBF 

GAMLSS Family: ZINBF 
Link function for mu   : log 
Link function for sigma: log 
Link function for nu   : log 
Link function for tau  : logit 
> # plotting the distribution
> plot(function(y) dZINBF(y, mu = 10, sigma = 0.5, nu=2, tau=.1 ), 
+      from=0, to=40, n=40+1, type="h")
> # creating random variables and plot them 
> tN <- table(Ni <- rZINBF(1000, mu=5, sigma=0.5, nu=2, tau=0.1))
> r <- barplot(tN, col='lightblue')
> ## Not run: 
> ##D library(gamlss)
> ##D data(species)
> ##D species <- transform(species, x=log(lake))
> ##D m6 <- gamlss(fish~poly(x,2), sigma.fo=~1, data=species, family=NBF, 
> ##D           n.cyc=200)
> ##D fitted(m6, "nu")[1]
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("NBI")
> ### * NBI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NBI
> ### Title: Negative Binomial type I distribution for fitting a GAMLSS
> ### Aliases: NBI dNBI pNBI qNBI rNBI
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> NBI()   # gives information about the default links for the Negative Binomial type I distribution  

GAMLSS Family: NBI Negative Binomial type I 
Link function for mu   : log 
Link function for sigma: log 
> # plotting the distribution
> plot(function(y) dNBI(y, mu = 10, sigma = 0.5 ), from=0, to=40, n=40+1, type="h")
> # creating random variables and plot them 
> tN <- table(Ni <- rNBI(1000, mu=5, sigma=0.5))
> r <- barplot(tN, col='lightblue')
> # library(gamlss)
> # data(aids)
> # h<-gamlss(y~cs(x,df=7)+qrt, family=NBI, data=aids) # fits the model 
> # plot(h)
> # pdf.plot(family=NBI, mu=10, sigma=0.5, min=0, max=40, step=1)
> 
> 
> 
> cleanEx()
> nameEx("NBII")
> ### * NBII
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NBII
> ### Title: Negative Binomial type II distribution for fitting a GAMLSS
> ### Aliases: NBII dNBII pNBII qNBII rNBII
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> NBII()  # gives information about the default links for the Negative Binomial type II distribution  

GAMLSS Family: NBII Negative Binomial type II 
Link function for mu   : log 
Link function for sigma: log 
> # plotting the distribution
> plot(function(y) dNBII(y, mu = 10, sigma = 0.5 ), from=0, to=40, n=40+1, type="h")
> # creating random variables and plot them 
> tN <- table(Ni <- rNBII(1000, mu=5, sigma=0.5))
> r <- barplot(tN, col='lightblue')
> # library(gamlss)
> # data(aids)
> # h<-gamlss(y~cs(x,df=7)+qrt, family=NBII, data=aids) # fits a model 
> # plot(h)
> # pdf.plot(family=NBII, mu=10, sigma=0.5, min=0, max=40, step=1)
> 
> 
> 
> cleanEx()
> nameEx("NET")
> ### * NET
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NET
> ### Title: Normal Exponential t distribution (NET) for fitting a GAMLSS
> ### Aliases: NET dNET pNET qNET rNET
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> NET()   # 

GAMLSS Family: NET Normal Exponential t 
Link function for mu   : identity 
Link function for sigma: log 
Link function for nu   : identity 
Link function for tau  : identity 
> data(abdom)
Warning in data(abdom) : data set ‘abdom’ not found
> plot(function(x)dNET(x, mu=0,sigma=1,nu=2, tau=3), -5, 5)
> plot(function(x)pNET(x, mu=0,sigma=1,nu=2, tau=3), -5, 5) 
> # fit NET with nu=1 and tau=3
> # library(gamlss)
> #h<-gamlss(y~cs(x,df=3), sigma.formula=~cs(x,1), family=NET, 
> #        data=abdom, nu.start=2, tau.start=3) 
> #plot(h)
> 
> 
> 
> cleanEx()
> nameEx("NO")
> ### * NO
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NO
> ### Title: Normal distribution for fitting a GAMLSS
> ### Aliases: NO dNO pNO qNO rNO
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> NO()# gives information about the default links for the normal distribution

GAMLSS Family: NO Normal 
Link function for mu   : identity 
Link function for sigma: log 
> plot(function(y) dNO(y, mu=10 ,sigma=2), 0, 20)
> plot(function(y) pNO(y, mu=10 ,sigma=2), 0, 20)
> plot(function(y) qNO(y, mu=10 ,sigma=2), 0, 1)
> dat<-rNO(100)
> hist(dat)
> # library(gamlss)        
> # gamlss(dat~1,family=NO) # fits a constant for mu and sigma 
> 
> 
> 
> cleanEx()
> nameEx("NO2")
> ### * NO2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NO2
> ### Title: Normal distribution (with variance as sigma parameter) for
> ###   fitting a GAMLSS
> ### Aliases: NO2 dNO2 pNO2 qNO2 rNO2
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> NO()# gives information about the default links for the normal distribution

GAMLSS Family: NO Normal 
Link function for mu   : identity 
Link function for sigma: log 
> dat<-rNO(100)
> hist(dat)        
> plot(function(y) dNO(y, mu=10 ,sigma=2), 0, 20)
> plot(function(y) pNO(y, mu=10 ,sigma=2), 0, 20)
> plot(function(y) qNO(y, mu=10 ,sigma=2), 0, 1)
> # library(gamlss)
> # gamlss(dat~1,family=NO) # fits a constant for mu and sigma 
> 
> 
> 
> cleanEx()
> nameEx("NOF")
> ### * NOF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NOF
> ### Title: Normal distribution family for fitting a GAMLSS
> ### Aliases: NOF dNOF pNOF qNOF rNOF
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> NOF()# gives information about the default links for the normal distribution family

GAMLSS Family: NOF normal Family 
Link function for mu   : identity 
Link function for sigma: log 
Link function for nu   : identity 
> ## Not run: 
> ##D ## the normal distribution, fitting a constant sigma
> ##D m1<-gamlss(y~poly(x,2), sigma.fo=~1, family=NO, data=abdom)
> ##D ## the normal family, fitting a variance proportional to the mean (mu)
> ##D m2<-gamlss(y~poly(x,2), sigma.fo=~1, family=NOF, data=abdom, method=mixed(1,20))
> ##D ## the nornal distribution fitting  the variance as a function of x
> ##D m3 <-gamlss(y~poly(x,2), sigma.fo=~x,   family=NO, data=abdom, method=mixed(1,20)) 
> ##D GAIC(m1,m2,m3)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("PARETO2")
> ### * PARETO2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PARETO2
> ### Title: Pareto distributions for fitting in GAMLSS
> ### Aliases: PARETO2 dPARETO2 pPARETO2 qPARETO2 rPARETO2 PARETO2o dPARETO2o
> ###   pPARETO2o qPARETO2o rPARETO2o PARETO dPARETO pPARETO qPARETO rPARETO
> ###   PARETO1 dPARETO1 pPARETO1 qPARETO1 rPARETO1 PARETO1o dPARETO1o
> ###   pPARETO1o qPARETO1o rPARETO1o
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> par(mfrow=c(2,2))
> y<-seq(0.2,20,0.2)
> plot(y, dPARETO2(y), type="l" , lwd=2)
> q<-seq(0,20,0.2)
> plot(q, pPARETO2(q), ylim=c(0,1), type="l", lwd=2) 
> p<-seq(0.0001,0.999,0.05)
> plot(p, qPARETO2(p), type="l", lwd=2)
> dat <- rPARETO2(100)
> hist(rPARETO2(100), nclass=30)
> #summary(gamlss(a~1, family="PARETO2"))
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("PE")
> ### * PE
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PE
> ### Title: Power Exponential distribution for fitting a GAMLSS
> ### Aliases: PE dPE pPE qPE rPE PE2 dPE2 pPE2 qPE2 rPE2
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> PE()# gives information about the default links for the Power Exponential distribution  

GAMLSS Family: PE Power Exponential 
Link function for mu   : identity 
Link function for sigma: log 
Link function for nu   : log 
> # library(gamlss)
> # data(abdom)
> # h1<-gamlss(y~cs(x,df=3), sigma.formula=~cs(x,1), family=PE, data=abdom) # fit
> # h2<-gamlss(y~cs(x,df=3), sigma.formula=~cs(x,1), family=PE2, data=abdom) # fit 
> # plot(h1)
> # plot(h2)
> # leptokurtotic
> plot(function(x) dPE(x, mu=10,sigma=2,nu=1), 0.0, 20, 
+  main = "The PE  density mu=10,sigma=2,nu=1")
> # platykurtotic
> plot(function(x) dPE(x, mu=10,sigma=2,nu=4), 0.0, 20, 
+  main = "The PE  density mu=10,sigma=2,nu=4") 
> 
> 
> 
> cleanEx()
> nameEx("PIG")
> ### * PIG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PIG
> ### Title: The Poisson-inverse Gaussian distribution for fitting a GAMLSS
> ###   model
> ### Aliases: PIG PIG2 dPIG dPIG2 pPIG pPIG2 qPIG qPIG2 rPIG rPIG2 ZIPIG
> ###   dZIPIG pZIPIG qZIPIG rZIPIG ZAPIG dZAPIG pZAPIG qZAPIG rZAPIG PIG2
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> PIG()# gives information about the default links for the  Poisson-inverse Gaussian distribution 

GAMLSS Family: PIG Poisson.Inverse.Gaussian 
Link function for mu   : log 
Link function for sigma: log 
> #plot the pdf using plot 
> plot(function(y) dPIG(y, mu=10, sigma = 1 ), from=0, to=50, n=50+1, type="h") # pdf
> # plot the cdf
> plot(seq(from=0,to=50),pPIG(seq(from=0,to=50), mu=10, sigma=1), type="h")   # cdf
> # generate random sample
> tN <- table(Ni <- rPIG(100, mu=5, sigma=1))
> r <- barplot(tN, col='lightblue')
> # fit a model to the data 
> # library(gamlss)
> # gamlss(Ni~1,family=PIG)
> ZIPIG()

GAMLSS Family: ZIPIG Zero inflated Poisson inverse Gaussian 
Link function for mu   : log 
Link function for sigma: log 
Link function for nu   : logit 
> ZAPIG()

GAMLSS Family: ZAPIG Zero altered Poisson inv. Gaussian 
Link function for mu   : log 
Link function for sigma: log 
Link function for nu   : logit 
> 
> 
> 
> cleanEx()
> nameEx("PO")
> ### * PO
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PO
> ### Title: Poisson distribution for fitting a GAMLSS model
> ### Aliases: PO dPO pPO qPO rPO
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> PO()# gives information about the default links for the Poisson distribution  

GAMLSS Family: PO Poisson 
Link function for mu   : log 
> # fitting data using PO()
> 
> # plotting the distribution
> plot(function(y) dPO(y, mu=10 ), from=0, to=20, n=20+1, type="h")
> # creating random variables and plot them 
> tN <- table(Ni <- rPO(1000, mu=5))
>  r <- barplot(tN, col='lightblue')
> # library(gamlss)
> # data(aids)
> # h<-gamlss(y~cs(x,df=7)+qrt, family=PO, data=aids) # fits the constant+x+qrt model 
> # plot(h)
> # pdf.plot(family=PO, mu=10, min=0, max=20, step=1)
> 
> 
> 
> cleanEx()
> nameEx("RG")
> ### * RG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RG
> ### Title: The Reverse Gumbel distribution for fitting a GAMLSS
> ### Aliases: RG dRG pRG qRG rRG
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> 
> plot(function(x) dRG(x, mu=0,sigma=1), -3, 6, 
+  main = "{Reverse Gumbel  density mu=0,sigma=1}")
> RG()# gives information about the default links for the Gumbel distribution      

GAMLSS Family: RG Reverse Gumbel 
Link function for mu   : identity 
Link function for sigma: log 
> dat<-rRG(100, mu=10, sigma=2) # generates 100 random observations 
> # library(gamlss)
> # gamlss(dat~1,family=RG) # fits a constant for each parameter mu and sigma 
> 
> 
> 
> 
> cleanEx()
> nameEx("RGE")
> ### * RGE
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RGE
> ### Title: Reverse generalized extreme family distribution for fitting a
> ###   GAMLSS
> ### Aliases: RGE dRGE pRGE qRGE rRGE
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> RGE()# default links for the reverse generalized extreme family distribution 

GAMLSS Family: RGE Reverse-Generalized-Extreme 
Link function for mu   : identity 
Link function for sigma: log 
Link function for nu   : log 
> newdata<-rRGE(100,mu=0,sigma=1,nu=5) # generates 100 random observations
> # library(gamlss)
> # gamlss(newdata~1, family=RGE, method=mixed(5,50)) # difficult to converse 
> 
> 
> 
> cleanEx()
> nameEx("SEP")
> ### * SEP
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SEP
> ### Title: The Skew Power exponential (SEP) distribution for fitting a
> ###   GAMLSS
> ### Aliases: SEP dSEP pSEP qSEP rSEP
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> SEP()   # 

GAMLSS Family: SEP Skew Exponential Power 
Link function for mu   : identity 
Link function for sigma: log 
Link function for nu   : identity 
Link function for tau  : log 
> plot(function(x)dSEP(x, mu=0,sigma=1, nu=1, tau=2), -5, 5, 
+  main = "The SEP  density mu=0,sigma=1,nu=1, tau=2")
> plot(function(x) pSEP(x, mu=0,sigma=1,nu=1, tau=2), -5, 5, 
+  main = "The BCPE  cdf mu=0, sigma=1, nu=1, tau=2")
> dat <- rSEP(100,mu=10,sigma=1,nu=-1,tau=1.5)
> # library(gamlss)
> # gamlss(dat~1,family=SEP, control=gamlss.control(n.cyc=30))
> 
> 
> 
> cleanEx()
> nameEx("SEP1")
> ### * SEP1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SEP1
> ### Title: The Skew exponential power type 1-4 distribution for fitting a
> ###   GAMLSS
> ### Aliases: SEP1 dSEP1 pSEP1 qSEP1 rSEP1 SEP2 dSEP2 pSEP2 qSEP2 rSEP2 SEP3
> ###   dSEP3 pSEP3 qSEP3 rSEP3 SEP4 dSEP4 pSEP4 qSEP4 rSEP4
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> SEP1() 

GAMLSS Family: SEP1 Skew exponential power (Azzalini type 1) 
Link function for mu   : identity 
Link function for sigma: log 
Link function for nu   : identity 
Link function for tau  : log 
> curve(dSEP4(x, mu=5 ,sigma=1, nu=2, tau=1.5), -2, 10, 
+           main = "The SEP4  density mu=5 ,sigma=1, nu=1, tau=1.5")
> # library(gamlss)
> #y<- rSEP4(100, mu=5, sigma=1, nu=2, tau=1.5);hist(y)
> #m1<-gamlss(y~1, family=SEP1, n.cyc=50)
> #m2<-gamlss(y~1, family=SEP2, n.cyc=50)
> #m3<-gamlss(y~1, family=SEP3, n.cyc=50)
> #m4<-gamlss(y~1, family=SEP4, n.cyc=50) 
> #GAIC(m1,m2,m3,m4)
> 
> 
> 
> cleanEx()
> nameEx("SHASH")
> ### * SHASH
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SHASH
> ### Title: The Sinh-Arcsinh (SHASH) distribution for fitting a GAMLSS
> ### Aliases: SHASH dSHASH pSHASH qSHASH rSHASH SHASHo dSHASHo pSHASHo
> ###   qSHASHo rSHASHo SHASHo2 dSHASHo2 pSHASHo2 qSHASHo2 rSHASHo2
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> SHASH()   # 

GAMLSS Family: SHASH Sinh-Arcsinh 
Link function for mu   : identity 
Link function for sigma: log 
Link function for nu   : log 
Link function for tau  : log 
> plot(function(x)dSHASH(x, mu=0,sigma=1, nu=1, tau=2), -5, 5, 
+  main = "The SHASH  density mu=0,sigma=1,nu=1, tau=2")
> plot(function(x) pSHASH(x, mu=0,sigma=1,nu=1, tau=2), -5, 5, 
+  main = "The BCPE  cdf mu=0, sigma=1, nu=1, tau=2")
> dat<-rSHASH(100,mu=10,sigma=1,nu=1,tau=1.5)
> hist(dat)
> # library(gamlss)
> # gamlss(dat~1,family=SHASH, control=gamlss.control(n.cyc=30))
> 
> 
> 
> cleanEx()
> nameEx("SI")
> ### * SI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SI
> ### Title: The Sichel dustribution for fitting a GAMLSS model
> ### Aliases: SI dSI pSI qSI rSI tofyS
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> SI()# gives information about the default links for the  Sichel distribution 

GAMLSS Family: SI Sichel 
Link function for mu   : log 
Link function for sigma: log 
Link function for nu   : identity 
> #plot the pdf using plot 
> plot(function(y) dSI(y, mu=10, sigma=1, nu=1), from=0, to=100, n=100+1, type="h") # pdf
> # plot the cdf
> plot(seq(from=0,to=100),pSI(seq(from=0,to=100), mu=10, sigma=1, nu=1), type="h")   # cdf
> # generate random sample
> tN <- table(Ni <- rSI(100, mu=5, sigma=1, nu=1))
> r <- barplot(tN, col='lightblue')
> # fit a model to the data 
> # library(gamlss)
> # gamlss(Ni~1,family=SI, control=gamlss.control(n.cyc=50))
> 
> 
> 
> cleanEx()
> nameEx("SICHEL")
> ### * SICHEL
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SICHEL
> ### Title: The Sichel distribution for fitting a GAMLSS model
> ### Aliases: SICHEL dSICHEL pSICHEL qSICHEL rSICHEL VSICHEL tofySICHEL
> ###   ZASICHEL dZASICHEL pZASICHEL qZASICHEL rZASICHEL ZISICHEL dZISICHEL
> ###   pZISICHEL qZISICHEL rZISICHEL
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> SICHEL()# gives information about the default links for the  Sichel distribution 

GAMLSS Family: SICHEL Sichel 
Link function for mu   : log 
Link function for sigma: log 
Link function for nu   : identity 
> #plot the pdf using plot 
> plot(function(y) dSICHEL(y, mu=10, sigma=1, nu=1), from=0, to=100, n=100+1, type="h") # pdf
> # plot the cdf
> plot(seq(from=0,to=100),pSICHEL(seq(from=0,to=100), mu=10, sigma=1, nu=1), type="h")   # cdf
> # generate random sample
> tN <- table(Ni <- rSICHEL(100, mu=5, sigma=1, nu=1))
> r <- barplot(tN, col='lightblue')
> # fit a model to the data 
> # library(gamlss)
> # gamlss(Ni~1,family=SICHEL, control=gamlss.control(n.cyc=50))
> 
> 
> 
> cleanEx()
> nameEx("SIMPLEX")
> ### * SIMPLEX
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SIMPLEX
> ### Title: The simplex distribution for fitting a GAMLSS
> ### Aliases: SIMPLEX dSIMPLEX pSIMPLEX qSIMPLEX rSIMPLEX
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> SIMPLEX()#  default links for the simplex distribution

GAMLSS Family: SIMPLEX Simplex 
Link function for mu   : logit 
Link function for sigma: log 
> plot(function(y) dSIMPLEX(y, mu=.5 ,sigma=1), 0.001, .999)
> plot(function(y) pSIMPLEX(y, mu=.5 ,sigma=1), 0.001, 0.999)
> plot(function(y) qSIMPLEX(y, mu=.5 ,sigma=1), 0.001, 0.999)
> plot(function(y) qSIMPLEX(y, mu=.5 ,sigma=1, lower.tail=FALSE), 0.001, .999)
> 
> 
> 
> cleanEx()
> nameEx("SN1")
> ### * SN1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SN1
> ### Title: Skew Normal Type 1 distribution for fitting a GAMLSS
> ### Aliases: SN1 dSN1 pSN1 qSN1 rSN1
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> par(mfrow=c(2,2))
> y<-seq(-3,3,0.2)
> plot(y, dSN1(y), type="l" , lwd=2)
> q<-seq(-3,3,0.2)
> plot(q, pSN1(q), ylim=c(0,1), type="l", lwd=2) 
> p<-seq(0.0001,0.999,0.05)
> plot(p, qSN1(p), type="l", lwd=2)
> dat <- rSN1(100)
> hist(rSN1(100), nclass=30)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("SN2")
> ### * SN2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SN2
> ### Title: Skew Normal Type 2 distribution for fitting a GAMLSS
> ### Aliases: SN2 dSN2 pSN2 qSN2 rSN2
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> par(mfrow=c(2,2))
> y<-seq(-3,3,0.2)
> plot(y, dSN2(y), type="l" , lwd=2)
> q<-seq(-3,3,0.2)
> plot(q, pSN2(q), ylim=c(0,1), type="l", lwd=2) 
> p<-seq(0.0001,0.999,0.05)
> plot(p, qSN2(p), type="l", lwd=2)
> dat <- rSN2(100)
> hist(rSN2(100), nclass=30)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("ST1")
> ### * ST1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ST1
> ### Title: The skew t distributions, type 1 to 5
> ### Aliases: ST1 dST1 pST1 qST1 rST1 ST2 dST2 pST2 qST2 rST2 ST3 dST3 pST3
> ###   qST3 rST3 ST3C dST3C pST3C qST3C rST3C ST4 dST4 pST4 qST4 rST4 ST5
> ###   dST5 pST5 qST5 rST5 SST dSST pSST qSST rSST
> ### Keywords: distribution regression
> 
> ### ** Examples
>  
> y<- rST5(200, mu=5, sigma=1, nu=.1)
> hist(y)
> curve(dST5(x, mu=30 ,sigma=5,nu=-1), -50, 50, main = "The ST5  density mu=30 ,sigma=5,nu=1")
> # library(gamlss)
> # m1<-gamlss(y~1, family=ST1)
> # m2<-gamlss(y~1, family=ST2)
> # m3<-gamlss(y~1, family=ST3)
> # m4<-gamlss(y~1, family=ST4)
> # m5<-gamlss(y~1, family=ST5) 
> # GAIC(m1,m2,m3,m4,m5)
> 
> 
> 
> cleanEx()
> nameEx("TF")
> ### * TF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TF
> ### Title: t family distribution for fitting a GAMLSS
> ### Aliases: TF dTF pTF qTF rTF TF2 dTF2 pTF2 qTF2 rTF2
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> TF()# gives information about the default links for the t-family distribution 

GAMLSS Family: TF t Family 
Link function for mu   : identity 
Link function for sigma: log 
Link function for nu   : log 
> # library(gamlss)
> #data(abdom)
> #h<-gamlss(y~cs(x,df=3), sigma.formula=~cs(x,1), family=TF, data=abdom) # fits 
> #plot(h)
> newdata<-rTF(1000,mu=0,sigma=1,nu=5) # generates 1000 random observations
> hist(newdata) 
> 
> 
> 
> cleanEx()
> nameEx("WARING")
> ### * WARING
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: WARING
> ### Title: Waring distribution for fitting a GAMLSS model
> ### Aliases: WARING dWARING pWARING qWARING rWARING
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> par(mfrow=c(2,2))
> y<-seq(0,20,1)
> plot(y, dWARING(y), type="h")
> q <- seq(0, 20, 1)
> plot(q, pWARING(q), type="h")
> p<-seq(0.0001,0.999,0.05)
> plot(p , qWARING(p), type="s")
> dat <- rWARING(100)
> hist(dat)
> #summary(gamlss(dat~1, family=WARING))
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("WEI")
> ### * WEI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: WEI
> ### Title: Weibull distribution for fitting a GAMLSS
> ### Aliases: WEI dWEI pWEI qWEI rWEI
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> WEI()

GAMLSS Family: WEI Weibull 
Link function for mu   : log 
Link function for sigma: log 
> dat<-rWEI(100, mu=10, sigma=2)
> # library(gamlss)
> # gamlss(dat~1, family=WEI)
> 
> 
> 
> 
> cleanEx()
> nameEx("WEI2")
> ### * WEI2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: WEI2
> ### Title: A specific parameterization of the Weibull distribution for
> ###   fitting a GAMLSS
> ### Aliases: WEI2 dWEI2 pWEI2 qWEI2 rWEI2
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> WEI2()

GAMLSS Family: WEI2 Weibull type 2 
Link function for mu   : log 
Link function for sigma: log 
> dat<-rWEI(100, mu=.1, sigma=2)
> hist(dat)
> # library(gamlss)
> # gamlss(dat~1, family=WEI2, method=CG())
> 
> 
> 
> 
> cleanEx()
> nameEx("WEI3")
> ### * WEI3
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: WEI3
> ### Title: A specific parameterization of the Weibull distribution for
> ###   fitting a GAMLSS
> ### Aliases: WEI3 dWEI3 pWEI3 qWEI3 rWEI3
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> WEI3()

GAMLSS Family: WEI3 Weibull type 3 
Link function for mu   : log 
Link function for sigma: log 
> dat<-rWEI(100, mu=.1, sigma=2)
> # library(gamlss)
> # gamlss(dat~1, family=WEI3, method=CG())
> 
> 
> 
> 
> cleanEx()
> nameEx("YULE")
> ### * YULE
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: YULE
> ### Title: Yule distribution for fitting a GAMLSS model
> ### Aliases: YULE dYULE pYULE qYULE rYULE
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> par(mfrow=c(2,2))
> y<-seq(0,20,1)
> plot(y, dYULE(y), type="h")
> q <- seq(0, 20, 1)
> plot(q, pYULE(q), type="h")
> p<-seq(0.0001,0.999,0.05)
> plot(p , qYULE(p), type="s")
> dat <- rYULE(100)
> hist(dat)
> #summary(gamlss(dat~1, family=YULE))
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("ZABB")
> ### * ZABB
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ZABB
> ### Title: Zero inflated and zero adjusted Binomial distribution for
> ###   fitting in GAMLSS
> ### Aliases: ZABB dZABB pZABB qZABB rZABB ZIBB dZIBB pZIBB qZIBB rZIBB
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> ZIBB() 

GAMLSS Family: ZIBB Zero Inflated Beta Binomial 
Link function for mu   : logit 
Link function for sigma: log 
Link function for nu   : logit 
> ZABB()

GAMLSS Family: ZABB Zero Adjusted Beta Binomial 
Link function for mu   : logit 
Link function for sigma: log 
Link function for nu   : logit 
> # creating data and plotting them 
>  dat <- rZIBB(1000, mu=.5, sigma=.5, nu=0.1, bd=10)
>    r <- barplot(table(dat), col='lightblue')
> dat1 <- rZABB(1000, mu=.5, sigma=.2, nu=0.1, bd=10)
>    r1 <- barplot(table(dat1), col='lightblue')
> 
> 
> 
> cleanEx()
> nameEx("ZABI")
> ### * ZABI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ZABI
> ### Title: Zero inflated and zero adjusted Binomial distribution for
> ###   fitting in GAMLSS
> ### Aliases: ZABI dZABI pZABI qZABI rZABI ZIBI dZIBI pZIBI qZIBI rZIBI
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> ZABI() 

GAMLSS Family: ZABI Zero Adjusted Binomial 
Link function for mu   : logit 
Link function for sigma: logit 
> curve(dZABI(x, mu = .5, bd=10), from=0, to=10, n=10+1, type="h")
> tN <- table(Ni <- rZABI(1000, mu=.2, sigma=.3, bd=10))
> r <- barplot(tN, col='lightblue')
> 
> ZIBI() 

GAMLSS Family: ZIBI Binomial Zero Inflated 
Link function for mu   : logit 
Link function for sigma: logit 
> curve(dZIBI(x, mu = .5, bd=10), from=0, to=10, n=10+1, type="h")
> tN <- table(Ni <- rZIBI(1000, mu=.2, sigma=.3, bd=10))
> r <- barplot(tN, col='lightblue')
> 
> 
> 
> cleanEx()
> nameEx("ZAGA")
> ### * ZAGA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ZAGA
> ### Title: The zero adjusted Gamma distribution for fitting a GAMLSS model
> ### Aliases: ZAGA plotZAGA dZAGA pZAGA qZAGA rZAGA meanZAGA
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> ZAGA()# gives information about the default links for the ZAGA distribution

GAMLSS Family: ZAGA Zero Adjusted GA 
Link function for mu   : log 
Link function for sigma: log 
Link function for nu   : logit 
> # plotting the function
> PPP <- par(mfrow=c(2,2))
> plotZAGA(mu=1, sigma=.5, nu=.2, from=0,to=3)
> #curve(dZAGA(x,mu=1, sigma=.5, nu=.2), 0,3) # pdf
> curve(pZAGA(x,mu=1, sigma=.5, nu=.2), 0,3,  ylim=c(0,1)) # cdf
> curve(qZAGA(x,mu=1, sigma=.5, nu=.2), 0,.99) # inverse cdf
> y<-rZAGA(100, mu=1, sigma=.5, nu=.2) # randomly generated values
> hist(y)
> par(PPP)
> # check that the  positive part sums up to .8 (since nu=0.2)  
> integrate(function(x) dZAGA(x,mu=1, sigma=.5, nu=.2), 0,Inf)
0.8 with absolute error < 2.9e-06
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("ZAIG")
> ### * ZAIG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ZAIG
> ### Title: The zero adjusted Inverse Gaussian distribution for fitting a
> ###   GAMLSS model
> ### Aliases: ZAIG plotZAIG dZAIG pZAIG qZAIG rZAIG meanZAIG
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> ZAIG()# gives information about the default links for the ZAIG distribution

GAMLSS Family: ZAIG Zero adjusted IG 
Link function for mu   : log 
Link function for sigma: log 
Link function for nu   : logit 
> # plotting the distribution
> plotZAIG( mu =10 , sigma=.5, nu = 0.1, from = 0, to=10, n = 101)
> # plotting the cdf
> plot(function(y) pZAIG(y, mu=10 ,sigma=.5, nu = 0.1 ), 0, 1)
> # plotting the inverse cdf
> plot(function(y) qZAIG(y, mu=10 ,sigma=.5, nu = 0.1 ), 0.001, .99)
> # generate random numbers
> dat <- rZAIG(100,mu=10,sigma=.5, nu=.1)
> # fit a model to the data 
> # library(gamlss)
> # m1<-gamlss(dat~1,family=ZAIG)
> # meanZAIG(m1)[1]
> 
> 
> 
> 
> cleanEx()
> nameEx("ZANBI")
> ### * ZANBI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ZANBI
> ### Title: Zero inflated and zero adjusted negative binomial distributions
> ###   for fitting a GAMLSS model
> ### Aliases: ZANBI dZANBI pZANBI qZANBI rZANBI ZINBI dZINBI pZINBI qZINBI
> ###   rZINBI
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> ZINBI() 

GAMLSS Family: ZINBI Zero inflated negative binomial type I 
Link function for mu   : log 
Link function for sigma: log 
Link function for nu   : logit 
> ZANBI()

GAMLSS Family: ZANBI Zero Altered Negative binomial type I 
Link function for mu   : log 
Link function for sigma: log 
Link function for nu   : logit 
> # creating data and plotting them 
>  dat <- rZINBI(1000, mu=5, sigma=.5, nu=0.1)
>    r <- barplot(table(dat), col='lightblue')
> dat1 <- rZANBI(1000, mu=5, sigma=.5, nu=0.1)
>    r1 <- barplot(table(dat1), col='lightblue')
> 
> 
> 
> cleanEx()
> nameEx("ZAP")
> ### * ZAP
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ZAP
> ### Title: Zero adjusted poisson distribution for fitting a GAMLSS model
> ### Aliases: ZAP dZAP pZAP qZAP rZAP
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> ZAP()

GAMLSS Family: ZAP Zero Adjusted Poisson 
Link function for mu   : log 
Link function for sigma: logit 
> # creating data and plotting them 
> dat<-rZAP(1000, mu=5, sigma=.1)
> r <- barplot(table(dat), col='lightblue')
> 
> 
> 
> cleanEx()
> nameEx("ZIP")
> ### * ZIP
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ZIP
> ### Title: Zero inflated poisson distribution for fitting a GAMLSS model
> ### Aliases: ZIP dZIP pZIP qZIP rZIP
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> ZIP()# gives information about the default links for the normal distribution

GAMLSS Family: ZIP Poisson Zero Inflated 
Link function for mu   : log 
Link function for sigma: logit 
> # creating data and plotting them 
> dat<-rZIP(1000, mu=5, sigma=.1)
> r <- barplot(table(dat), col='lightblue')
> # library(gamlss)
> # fit the distribution 
> # mod1<-gamlss(dat~1, family=ZIP)# fits a constant for mu and sigma 
> # fitted(mod1)[1]
> # fitted(mod1,"sigma")[1]
> 
> 
> 
> cleanEx()
> nameEx("ZIP2")
> ### * ZIP2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ZIP2
> ### Title: Zero inflated poisson distribution for fitting a GAMLSS model
> ### Aliases: ZIP2 dZIP2 pZIP2 qZIP2 rZIP2
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> ZIP2()# gives information about the default links for the normal distribution

GAMLSS Family: ZIP2 Zero Inflated Poisson 2 
Link function for mu   : log 
Link function for sigma: logit 
> # creating data and plotting them 
> dat<-rZIP2(1000, mu=5, sigma=.1)
> r <- barplot(table(dat), col='lightblue')
> # fit the disteibution
> # library(gamlss) 
> # mod1<-gamlss(dat~1, family=ZIP2)# fits a constant for mu and sigma 
> # fitted(mod1)[1]
> # fitted(mod1,"sigma")[1]
> 
> 
> 
> cleanEx()
> nameEx("ZIPF")
> ### * ZIPF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ZIPF
> ### Title: The zipf and zero adjusted zipf distributions for fitting a
> ###   GAMLSS model
> ### Aliases: ZIPF dZIPF pZIPF qZIPF rZIPF zetaP ZAZIPF dZAZIPF pZAZIPF
> ###   qZAZIPF rZAZIPF
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> # ZIPF
> par(mfrow=c(2,2))
> y<-seq(1,20,1)
> plot(y, dZIPF(y), type="h")
> q <- seq(1, 20, 1)
> plot(q, pZIPF(q), type="h")
> p<-seq(0.0001,0.999,0.05)
> plot(p , qZIPF(p), type="s")
> dat <- rZIPF(100)
> hist(dat)
> # ZAZIPF
> y<-seq(0,20,1)
> plot(y, dZAZIPF(y,  mu=.9, sigma=.1), type="h")
> q <- seq(1, 20, 1)
> plot(q, pZAZIPF(q,  mu=.9, sigma=.1), type="h")
> p<-seq(0.0001,0.999,0.05)
> plot(p, qZAZIPF(p,  mu=.9, sigma=.1), type="s")
> dat <- rZAZIPF(100, mu=.9, sigma=.1)
> hist(dat)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("count_1_31")
> ### * count_1_31
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count_1_31
> ### Title: A set of functions to plot gamlss.family distributions
> ### Aliases: count_1_31 count_1_22 count_2_32 count_2_32R count_2_33
> ###   count_3_32 count_3_33 binom_1_31 binom_2_33 binom_3_33 contR_2_12
> ###   contR_3_11 contR_4_13 contRplus_2_11 contRplus_3_13 contRplus_4_33
> ###   contR01_2_13 contR01_4_33
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> count_1_31()
> 
> 
> 
> cleanEx()
> nameEx("exGAUS")
> ### * exGAUS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: exGAUS
> ### Title: The ex-Gaussian distribution
> ### Aliases: exGAUS dexGAUS pexGAUS qexGAUS rexGAUS
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> exGAUS()   # 

GAMLSS Family: exGAUS ex-Gaussian 
Link function for mu   : identity 
Link function for sigma: log 
Link function for nu   : log 
> y<- rexGAUS(100, mu=300, nu=100, sigma=35)
> hist(y)
> # library(gamlss)
> # m1<-gamlss(y~1, family=exGAUS) 
> # plot(m1)
> curve(dexGAUS(x, mu=300 ,sigma=35,nu=100), 100, 600, 
+  main = "The ex-GAUS  density mu=300 ,sigma=35,nu=100")
> plot(function(x) pexGAUS(x, mu=300,sigma=35,nu=100), 100, 600, 
+  main = "The ex-GAUS  cdf mu=300, sigma=35, nu=100")
> 
> 
> 
> cleanEx()
> nameEx("flexDist")
> ### * flexDist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: flexDist
> ### Title: Non-parametric pdf from limited information data
> ### Aliases: flexDist
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> # Normal
> r1<-flexDist(quantiles=list(values=qNO(c(0.05, 0.25, 0.5,0.75, 0.95), mu=0, 
+              sigma=1), prob=c( 0.05, 0.25, 0.5,0.75,0.95 )), 
+              no.inter=200, lambda=10,  kappa=10, perc.quant=0.3)
> # GAMMA
> r1<-flexDist(quantiles=list(values=qGA(c(0.05,0.25, 0.5,0.75,0.95), mu=1, 
+        sigma=.8), prob=c(0.05,0.25, 0.5,0.75,0.95)), 
+        expectiles=list(values=1, prob=0.5),  lambda=10, 
+        kappa=10, lower=0, upper=5)# 
> 
> 
> 
> cleanEx()
> nameEx("gamlss.dist-package")
> ### * gamlss.dist-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gamlss.dist-package
> ### Title: Distributions for Generalized Additive Models for Location Scale
> ###   and Shape
> ### Aliases: gamlss.dist-package gamlss.dist
> ### Keywords: package
> 
> ### ** Examples
> 
> # pdf plot
> plot(function(y) dSICHEL(y, mu=10, sigma = 0.1 , nu=1 ), 
+               from=0, to=30, n=30+1, type="h")
> # cdf plot
> PPP <- par(mfrow=c(2,1))
> plot(function(y) pSICHEL(y, mu=10, sigma =0.1, nu=1 ), 
+              from=0, to=30, n=30+1, type="h") # cdf
> cdf<-pSICHEL(0:30, mu=10, sigma=0.1, nu=1) 
> sfun1  <- stepfun(1:30, cdf, f = 0)
> plot(sfun1, xlim=c(0,30), main="cdf(x)")
> par(PPP)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("gamlss.family")
> ### * gamlss.family
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gamlss.family
> ### Title: Family Objects for fitting a GAMLSS model
> ### Aliases: gamlss.family as.gamlss.family print.gamlss.family
> ###   gamlss.family.default as.family
> ### Keywords: regression
> 
> ### ** Examples
> 
>  normal<-NO(mu.link="log", sigma.link="log")
>  normal

GAMLSS Family: NO Normal 
Link function for mu   : log 
Link function for sigma: log 
> 
> 
> 
> cleanEx()
> nameEx("gen.Family")
> ### * gen.Family
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gen.Family
> ### Title: Functions to generate log and logit distributions from existing
> ###   continuous gamlss.family distributions
> ### Aliases: gen.Family Family Family.d Family.p Family.q Family.r
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> # generating a log t distribution
> gen.Family("TF")
A  log  family of distributions from TF has been generated 
 and saved under the names:  
 dlogTF plogTF qlogTF rlogTF logTF 
> # plotting the d, p, q, and r functions
> op<-par(mfrow=c(2,2))
> curve(dlogTF(x, mu=0), 0, 10)
> curve(plogTF(x, mu=0), 0, 10)
> curve(qlogTF(x, mu=0), 0, 1)
> Y<- rlogTF(200)
> hist(Y)
> par(op)
> 
> 
> # different mu
> curve(dlogTF(x, mu=-1, sigma=1, nu=10), 0, 5, ylim=c(0,1))
> curve(dlogTF(x, mu=0, sigma=1, nu=10), 0,  5, add=TRUE, col="red", lty=2)
> curve(dlogTF(x, mu=1, sigma=1, nu=10), 0, 5, add=TRUE, col="blue", lty=3)
> 
> # different sigma
> curve(dlogTF(x, mu=0, sigma=.5, nu=10), 0, 5, ylim=c(0,1))
> curve(dlogTF(x, mu=0, sigma=1, nu=10), 0, 5, add=TRUE, col="red", lty=2)
> curve(dlogTF(x, mu=0, sigma=2, nu=10), 0, 5, add=TRUE, col="blue", lty=3)
> 
> # different degrees of freedom nu
> curve(dlogTF(x,  mu=0, sigma=1, nu=1), 0, 5, ylim=c(0,.8), n = 1001)
> curve(dlogTF(x,  mu=0, sigma=1, nu=2), 0, 5, add=TRUE, col="red", lty=2)
> curve(dlogTF(x,  mu=0, sigma=1, nu=5), 0, 5, add=TRUE, col="blue", lty=3)
> 
> 
> # generating a logit t distribution
> gen.Family("TF", "logit")
A  logit  family of distributions from TF has been generated 
 and saved under the names:  
 dlogitTF plogitTF qlogitTF rlogitTF logitTF 
> # plotting the d, p, q, and r functions
> op<-par(mfrow=c(2,2))
> curve(dlogitTF(x, mu=0), 0, 1)
> curve(plogitTF(x, mu=0), 0, 1)
> curve(qlogitTF(x, mu=0), 0, 1)
> abline(v=1)
> Y<- rlogitTF(200)
> hist(Y)
> par(op)
> 
> 
> # different mu
> curve(dlogitTF(x, mu=-2, sigma=1, nu=10), 0, 1, ylim=c(0,5))
> curve(dlogitTF(x, mu=0, sigma=1, nu=10), 0, 1, add=TRUE, col="red", lty=2)
> curve(dlogitTF(x, mu=2, sigma=1, nu=10), 0, 1, add=TRUE, col="blue", lty=3)
> 
> # different sigma
> curve(dlogitTF(x, mu=0, sigma=1, nu=10), 0, 1, ylim=c(0,2.5))
> curve(dlogitTF(x, mu=0, sigma=2, nu=10), 0, 1, add=TRUE, col="red", lty=2)
> curve(dlogitTF(x, mu=0, sigma=.7, nu=10), 0, 1, add=TRUE, col="blue", lty=3)
> 
> # different degrees of freedom nu
> curve(dlogitTF(x,  mu=0, sigma=1, nu=1), 0, 1, ylim=c(0,1.6))
> curve(dlogitTF(x,  mu=0, sigma=1, nu=2), 0, 1, add=TRUE, col="red", lty=2)
> curve(dlogitTF(x,  mu=0, sigma=1, nu=5), 0, 1, add=TRUE, col="blue", lty=3)
> 
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("hazardFun")
> ### * hazardFun
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hazardFun
> ### Title: Hazard functions for gamlss.family distributions
> ### Aliases: hazardFun gen.hazard
> ### Keywords: distribution regression
> 
> ### ** Examples
> 
> gen.hazard("WEI2")
A hazard function for WEI2 is generated 
 and saved under the name:  
 hWEI2 
> y<-seq(0,10,by=0.01)
> plot(hWEI2(y, mu=1, sigma=1)~y, type="l", col="black", ylab="h(y)", ylim=c(0,2.5))
> lines(hWEI2(y, mu=1, sigma=1.2)~y, col="red",lt=2,lw=2)
> lines(hWEI2(y, mu=1, sigma=.5)~y, col="blue",lt=3,lw=2)
> 
> 
> 
> 
> cleanEx()
> nameEx("make.link.gamlss")
> ### * make.link.gamlss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.link.gamlss
> ### Title: Create a Link for GAMLSS families
> ### Aliases: make.link.gamlss show.link own.linkfun own.linkinv own.mu.eta
> ###   own.valideta
> ### Keywords: regression
> 
> ### ** Examples
> 
> str(make.link.gamlss("logshiftto1"))
List of 5
 $ linkfun :function (mu)  
 $ linkinv :function (eta)  
 $ mu.eta  :function (eta)  
 $ valideta:function (eta)  
 $ name    : chr "logshiftto1"
 - attr(*, "class")= chr "link-gamlss"
> l2<-make.link.gamlss("logshiftto1")
> l2$linkfun(2) # should close to zero (Note that 0.00001 is added)
[1] 9.99995e-06
> l2$linkfun(1-0.00001) # should be -Inf but it is large negative
[1] -37.62858
> #---------------------------------------------------------
> # now use the own link function
> # first if the distribution allows you
> show.link(BI)
$mu
c("logit", "probit", "cloglog", "cauchit", "log", "own")

> # seems OK now define the four own functions
> # First try the probit link using the own link function
> # 1: the linkfun function
> own.linkfun <- function(mu) { qNO(p=mu)}
> # 2: the inverse link function 
> own.linkinv <- function(eta) { 
+               thresh <- -qNO(.Machine$double.eps)
+                eta <- pmin(thresh, pmax(eta, -thresh))
+               pNO(eta)}
> # 3: the dmu/deta function 
> own.mu.eta <- function(eta) pmax(dNO(eta), .Machine$double.eps)
> # 4: the valideta function 
> own.valideta <- function(eta) TRUE
> 
> ## bring the data
> # library(gamlss) 
> #data(aep)
> # fitting the model using "own"   
> # h1<-gamlss(y~ward+loglos+year, family=BI(mu.link="own"), data=aep)  
> # model h1 should be identical to the probit 
> # h2<-gamlss(y~ward+loglos+year, family=BI(mu.link="probit"), data=aep)
> # now using a function instead of "own" 
> probittest <- function()
+ {
+ linkfun <- function(mu) { qNO(p=mu)}
+ linkinv <- function(eta) 
+             { 
+               thresh <- -qNO(.Machine$double.eps)
+                eta <- pmin(thresh, pmax(eta, -thresh))
+               pNO(eta)
+             }
+ mu.eta <- function(eta) pmax(dNO(eta), .Machine$double.eps) 
+ valideta <- function(eta) TRUE
+ link <- "probitTest"
+ structure(list(linkfun = linkfun, linkinv = linkinv, mu.eta = mu.eta, 
+         valideta = valideta, name = link), class = "link-gamlss")
+ }
> # h3<-gamlss(y~ward+loglos+year, family=BI(mu.link=probittest()), data=aep)  
> # Second try the complementary log-log 
> # using the Gumbel distribution  
> own.linkfun <- function(mu) { qGU(p=mu)} 
> own.linkinv <- function(eta) { 
+               thresh <- -qGU(.Machine$double.eps)
+                eta <- pmin(thresh, pmax(eta, -thresh))
+               pGU(eta)} 
> own.mu.eta <- function(eta) pmax(dGU(eta), .Machine$double.eps)
> own.valideta <- function(eta) TRUE
> # h1 and h2 should be identical to cloglog
> # h1<-gamlss(y~ward+loglos+year, family=BI(mu.link="own"), data=aep)  
> # h2<-gamlss(y~ward+loglos+year, family=BI(mu.link="cloglog"), data=aep)
> # note that the Gumbel distribution is negatively skew
> # for a positively skew link function we can used the Reverse Gumbel 
> revloglog  <- function()
+ {
+ linkfun <- function(mu) { qRG(p=mu)} 
+ linkinv <- function(eta) { 
+               thresh <- -qRG(.Machine$double.eps)
+                eta <- pmin(thresh, pmax(eta, -thresh))
+               pRG(eta)}
+ mu.eta <- function(eta) pmax(dRG(eta), .Machine$double.eps)
+ valideta <- function(eta) TRUE
+ link <- "revloglog"
+ structure(list(linkfun = linkfun, linkinv = linkinv, mu.eta = mu.eta, 
+         valideta = valideta, name = link), class = "link-gamlss")
+ }
> # h1<-gamlss(y~ward+loglos+year, family=BI(mu.link=revloglog()), data=aep)  
> # a considerable improvement in the deviance
> # try a shifted logit link function from -1, 1 
> own.linkfun <- function(mu)
+              { shift = c(-1,1)           
+                log((mu-shift[1])/(shift[2]-mu))
+              }
> own.linkinv <- function(eta) 
+             {
+             shift = c(-1,1)  
+             thresh <- -log(.Machine$double.eps)
+                eta <- pmin(thresh, pmax(eta, -thresh))
+                       shift[2]-(shift[2]-shift[1])/(1 + exp(eta))
+             } 
> own.mu.eta <- function(eta) 
+             {
+         shift = c(-1,1)  
+             thresh <- -log(.Machine$double.eps)
+                res <- rep(.Machine$double.eps, length(eta))
+             res[abs(eta) < thresh] <- ((shift[2]-shift[1])*exp(eta)/(1 + 
+                                  exp(eta))^2)[abs(eta) < thresh]
+             res
+             }
> own.valideta <- function(eta) TRUE       
> #----------
> str(make.link.gamlss("own"))
List of 5
 $ linkfun :function (mu)  
 $ linkinv :function (eta)  
 $ mu.eta  :function (eta)  
 $ valideta:function (eta)  
 $ name    : chr "own"
 - attr(*, "class")= chr "link-gamlss"
> l2<-make.link.gamlss("own")
> l2$linkfun(0) # should be zero
[1] 0
> l2$linkfun(1) # should be Inf
[1] Inf
> l2$linkinv(-5:5)
 [1] -0.9866143 -0.9640276 -0.9051483 -0.7615942 -0.4621172  0.0000000
 [7]  0.4621172  0.7615942  0.9051483  0.9640276  0.9866143
> 
> 
> 
> cleanEx()
> nameEx("momentSK")
> ### * momentSK
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: momentSK
> ### Title: Sample and theoretical Moment and Centile Skewness and Kurtosis
> ###   Functions
> ### Aliases: momentSK centileSK centileSkew centileKurt theoCentileSK
> ###   plotCentileSK boundary fEGB2_1 fEGB2_2 fJSU fSEP3 fST3_1 fST3_2
> ###   SKmoment_col SKmoment_gray SKmomentBoth checkMomentSK cEGB2_1 tEGB2_1
> ###   cEGB2_2 tEGB2_2 cEGB2_1Data cJSU tJSU cSB tSB cSEP3 tSEP3 cSHASH
> ###   tSHASH cST3_1 tST3_1 cST3_2 tST3_2 SKcentile_col SKcentile_gray
> ###   SKcentileBoth checkCentileSK
> ### Keywords: distribution
> 
> ### ** Examples
> 
> Y <- rSEP3(1000)
> momentSK(Y)
$mom.skew
[1] 0.8870194

$trans.mom.skew
[1] 0.4700637

$mom.kurt
[1] 3.750824

$excess.mom.kurt
[1] 0.7508242

$trans.mom.kurt
[1] 0.4288404

$jarque.bera.test
[1] 154.6229

> centileSK(Y)
$S0.25
          
0.1914211 

$S0.01
          
0.3871955 

$K0.01
         
3.339174 

$standK0.01
          
0.9681572 

$exc.K0.01
          
-0.109826 

$trans.K0.01
            
-0.09895782 

> centileSkew(Y, cent=20)
$p
[1] 0.2

$Sp
          
0.1967718 

> centileKurt(Y, cent=30)
$p
[1] 0.3

$Kp
          
0.7960846 

$sKp
          
0.2308161 

$ex.Kp
          
-2.652915 

$teKp
           
-0.7262461 

> 
> theoCentileSK("BCCG", mu=2, sigma=.2, nu=2)
$IR
[1] 0.5395878

$SIR
[1] 0.2697939

$S_0.25
[1] -0.06473032

$S_0.01
[1] -0.2317742

$K_0.01
[1] 3.746159

$sK_0.01
[1] 1.086143

> plotCentileSK(fam="BCCG",  mu=2, sigma=.2, nu=2)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.037 0.364 5.061 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
