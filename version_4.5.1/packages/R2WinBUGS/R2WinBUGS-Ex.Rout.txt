
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "R2WinBUGS"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('R2WinBUGS')
Loading required package: coda
Loading required package: boot
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("attach.all")
> ### * attach.all
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: attach.all
> ### Title: Attach / detach elements of (bugs) objects to search path
> ### Aliases: attach.all detach.all attach.bugs detach.bugs
> ### Keywords: data
> 
> ### ** Examples
> 
> # An example model file is given in:
> model.file <- system.file("model", "schools.txt", package="R2WinBUGS")
> # Some example data (see ?schools for details):
> data(schools)
> J <- nrow(schools)
> y <- schools$estimate
> sigma.y <- schools$sd
> data <- list ("J", "y", "sigma.y")
> inits <- function(){
+     list(theta = rnorm(J, 0, 100), mu.theta = rnorm(1, 0, 100),
+         sigma.theta = runif(1, 0, 100))
+ }
> parameters <- c("theta", "mu.theta", "sigma.theta")
> ## Not run: 
> ##D ## You may need to edit "bugs.directory",
> ##D ## also you need write access in the working directory:
> ##D schools.sim <- bugs(data, inits, parameters, model.file,
> ##D     n.chains = 3, n.iter = 1000,
> ##D     bugs.directory = "c:/Program Files/WinBUGS14/",
> ##D     working.directory = NULL)
> ##D 
> ##D # Do some inferential summaries
> ##D attach.bugs(schools.sim)
> ##D # posterior probability that the coaching program in school A
> ##D # is better than in school C:
> ##D print(mean(theta[,1] > theta[,3]))
> ##D # 50##D 
> ##D # and school C's program:
> ##D print(quantile(theta[,1] - theta[,3], c(.25, .75)))
> ##D plot(theta[,1], theta[,3])
> ##D detach.bugs()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("bugs")
> ### * bugs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bugs
> ### Title: Run WinBUGS and OpenBUGS from R or S-PLUS
> ### Aliases: bugs
> ### Keywords: interface models
> 
> ### ** Examples
> 
> # An example model file is given in:
> model.file <- system.file(package="R2WinBUGS", "model", "schools.txt")
> # Let's take a look:
> file.show(model.file)
   model {
       for (j in 1:J){
         y[j] ~ dnorm (theta[j], tau.y[j])
         theta[j] ~ dnorm (mu.theta, tau.theta)
         tau.y[j] <- pow(sigma.y[j], -2)
       }
       mu.theta ~ dnorm (0.0, 1.0E-6)
       tau.theta <- pow(sigma.theta, -2)
       sigma.theta ~ dunif (0, 1000)
     }  
> 
> # Some example data (see ?schools for details):
> data(schools)
> schools
  school estimate   sd
1      A    28.39 14.9
2      B     7.94 10.2
3      C    -2.75 16.3
4      D     6.82 11.0
5      E    -0.64  9.4
6      F     0.63 11.4
7      G    18.01 10.4
8      H    12.16 17.6
> 
> J <- nrow(schools)
> y <- schools$estimate
> sigma.y <- schools$sd
> data <- list(J=J, y=y, sigma.y=sigma.y)
> inits <- function(){
+     list(theta=rnorm(J, 0, 100), mu.theta=rnorm(1, 0, 100),
+          sigma.theta=runif(1, 0, 100))
+ }
> ## or alternatively something like:
> # inits <- list(
> #   list(theta=rnorm(J, 0, 90), mu.theta=rnorm(1, 0, 90),
> #        sigma.theta=runif(1, 0, 90)),
> #   list(theta=rnorm(J, 0, 100), mu.theta=rnorm(1, 0, 100),
> #        sigma.theta=runif(1, 0, 100))
> #   list(theta=rnorm(J, 0, 110), mu.theta=rnorm(1, 0, 110),
> #        sigma.theta=runif(1, 0, 110)))
> 
> parameters <- c("theta", "mu.theta", "sigma.theta")
> 
> ## Not run: 
> ##D ## You may need to edit "bugs.directory",
> ##D ## also you need write access in the working directory:
> ##D schools.sim <- bugs(data, inits, parameters, model.file,
> ##D     n.chains=3, n.iter=5000,
> ##D     bugs.directory="c:/Program Files/WinBUGS14/")
> ##D print(schools.sim)
> ##D plot(schools.sim)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("openbugs")
> ### * openbugs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: openbugs
> ### Title: Wrapper to run OpenBUGS
> ### Aliases: openbugs
> ### Keywords: interface models
> 
> ### ** Examples
> 
> # An example model file is given in:
> model.file <- system.file(package = "R2WinBUGS", "model", "schools.txt")
> # Let's take a look:
> file.show(model.file)
   model {
       for (j in 1:J){
         y[j] ~ dnorm (theta[j], tau.y[j])
         theta[j] ~ dnorm (mu.theta, tau.theta)
         tau.y[j] <- pow(sigma.y[j], -2)
       }
       mu.theta ~ dnorm (0.0, 1.0E-6)
       tau.theta <- pow(sigma.theta, -2)
       sigma.theta ~ dunif (0, 1000)
     }  
> 
> # Some example data (see ?schools for details):
> data(schools)
> schools
  school estimate   sd
1      A    28.39 14.9
2      B     7.94 10.2
3      C    -2.75 16.3
4      D     6.82 11.0
5      E    -0.64  9.4
6      F     0.63 11.4
7      G    18.01 10.4
8      H    12.16 17.6
> 
> J <- nrow(schools)
> y <- schools$estimate
> sigma.y <- schools$sd
> data <- list ("J", "y", "sigma.y")
> inits <- function(){
+     list(theta = rnorm(J, 0, 100), mu.theta = rnorm(1, 0, 100),
+          sigma.theta = runif(1, 0, 100))
+ }
> ## or alternatively something like:
> # inits <- list(
> #   list(theta = rnorm(J, 0, 90), mu.theta = rnorm(1, 0, 90),
> #        sigma.theta = runif(1, 0, 90)),
> #   list(theta = rnorm(J, 0, 100), mu.theta = rnorm(1, 0, 100),
> #        sigma.theta = runif(1, 0, 100))
> #   list(theta = rnorm(J, 0, 110), mu.theta = rnorm(1, 0, 110),
> #        sigma.theta = runif(1, 0, 110)))
> 
> parameters <- c("theta", "mu.theta", "sigma.theta")
> 
> ## Not run: 
> ##D ## both write access in the working directory and package BRugs required:
> ##D schools.sim <- bugs(data, inits, parameters, model.file,
> ##D     n.chains = 3, n.iter = 5000,
> ##D     program = "openbugs", working.directory = NULL)
> ##D print(schools.sim)
> ##D plot(schools.sim)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("write.model")
> ### * write.model
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: write.model
> ### Title: Creating a WinBUGS model file
> ### Aliases: write.model
> ### Keywords: IO file
> 
> ### ** Examples
> 
> ## Same "schoolsmodel" that is used in the examples in ?bugs:
> schoolsmodel <- function(){
+     for (j in 1:J){
+         y[j] ~ dnorm (theta[j], tau.y[j])
+         theta[j] ~ dnorm (mu.theta, tau.theta)
+         tau.y[j] <- pow(sigma.y[j], -2)
+     }
+     mu.theta ~ dnorm (0.0, 1.0E-6)
+     tau.theta <- pow(sigma.theta, -2)
+     sigma.theta ~ dunif (0, 1000)
+ }
> 
> ## some temporary filename:
> filename <- file.path(tempdir(), "schoolsmodel.bug")
> 
> 
> ## write model file:
> write.model(schoolsmodel, filename)
> ## and let's take a look:
> file.show(filename)
model
{
    for (j in 1:J) {
        y[j] ~ dnorm(theta[j], tau.y[j])
        theta[j] ~ dnorm(mu.theta, tau.theta)
        tau.y[j] <- pow(sigma.y[j], -2)
    }
    mu.theta ~ dnorm(0.00000E+00, 1.00000E-06)
    tau.theta <- pow(sigma.theta, -2)
    sigma.theta ~ dunif(0.00000E+00, 1000)
}

> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.097 0.017 0.123 0.003 0.005 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
