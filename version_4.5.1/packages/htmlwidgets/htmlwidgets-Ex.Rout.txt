
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "htmlwidgets"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('htmlwidgets')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("JS")
> ### * JS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: JS
> ### Title: Mark character strings as literal JavaScript code
> ### Aliases: JS
> 
> ### ** Examples
> 
> library(htmlwidgets)
> JS('1 + 1')
[1] "1 + 1"
attr(,"class")
[1] "JS_EVAL"
> list(x = JS('function(foo) {return foo;}'), y = 1:10)
$x
[1] "function(foo) {return foo;}"
attr(,"class")
[1] "JS_EVAL"

$y
 [1]  1  2  3  4  5  6  7  8  9 10

> JS('function(x) {', 'return x + 1;', '}')
[1] "function(x) {\nreturn x + 1;\n}"
attr(,"class")
[1] "JS_EVAL"
> 
> 
> 
> cleanEx()
> nameEx("htmlwidgets-shiny")
> ### * htmlwidgets-shiny
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: htmlwidgets-shiny
> ### Title: Shiny bindings for HTML widgets
> ### Aliases: htmlwidgets-shiny shinyWidgetOutput shinyRenderWidget
> 
> ### ** Examples
> 
> # shiny output binding for a widget named 'foo'
> fooOutput <- function(outputId, width = "100%", height = "400px") {
+   htmlwidgets::shinyWidgetOutput(outputId, "foo", width, height)
+ }
> 
> # shiny render function for a widget named 'foo'
> renderFoo <- function(expr, env = parent.frame(), quoted = FALSE) {
+   if (!quoted) { expr <- substitute(expr) } # force quoted
+   htmlwidgets::shinyRenderWidget(expr, fooOutput, env, quoted = TRUE)
+ }
> 
> 
> 
> cleanEx()
> nameEx("onRender")
> ### * onRender
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: onRender
> ### Title: Execute custom JavaScript code after rendering
> ### Aliases: onRender
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(leaflet)
> ##D 
> ##D # This example uses browser geolocation. RStudio users:
> ##D # this won't work in the Viewer pane; try popping it
> ##D # out into your system web browser.
> ##D leaflet() %>% addTiles() %>%
> ##D   onRender("
> ##D     function(el, x) {
> ##D       // Navigate the map to the user's location
> ##D       this.locate({setView: true});
> ##D     }
> ##D   ")
> ##D 
> ##D 
> ##D # This example shows how you can make an R data frame available
> ##D # to your JavaScript code.
> ##D 
> ##D meh <- "&#x1F610;";
> ##D yikes <- "&#x1F628;";
> ##D 
> ##D df <- data.frame(
> ##D   lng = quakes$long,
> ##D   lat = quakes$lat,
> ##D   html = ifelse(quakes$mag < 5.5, meh, yikes),
> ##D   stringsAsFactors = FALSE
> ##D )
> ##D 
> ##D leaflet() %>% addTiles() %>%
> ##D   fitBounds(min(df$lng), min(df$lat), max(df$lng), max(df$lat)) %>%
> ##D   onRender("
> ##D     function(el, x, data) {
> ##D       for (var i = 0; i < data.lng.length; i++) {
> ##D         var icon = L.divIcon({className: '', html: data.html[i]});
> ##D         L.marker([data.lat[i], data.lng[i]], {icon: icon}).addTo(this);
> ##D       }
> ##D     }
> ##D   ", data = df)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("onStaticRenderComplete")
> ### * onStaticRenderComplete
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: onStaticRenderComplete
> ### Title: Execute JavaScript code after static render
> ### Aliases: onStaticRenderComplete
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(leaflet)
> ##D library(htmltools)
> ##D library(htmlwidgets)
> ##D 
> ##D page <- tagList(
> ##D   leaflet() %>% addTiles(),
> ##D   onStaticRenderComplete(
> ##D     "HTMLWidgets.find('.leaflet').setZoom(4);"
> ##D   )
> ##D )
> ##D print(page, browse = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.146 0.015 0.16 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
