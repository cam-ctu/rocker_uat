
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEpAIBAAKCAQEAxAwD4jauIHWIcyqfMaIoWXgx1C+ZHNSDZtCjbppzs6B1WM1y"
 [3] "teVkMslQjGwNDMvUeP5pY3ytXU9BNiUvIFDvkQixQPo4HxyrNbe3YR6MgozsAzQq"
 [4] "DEi0pnx4xlH/Z2729Hivb0nSVEhalGYW/uKLeFo1KBUrAXcJND/x+nxJY6ioIkQi"
 [5] "3mYUMDtMzSoh+a7GYZMrkAj9j02O2yH17vqr5W5Kr0ZH9tEwovb3acd35S248ffm"
 [6] "7psEXJtC3xIsx9Sije5GDmayFAB04Wq8jED0IiUl+PKTOD70QIJjyU1wseW5hzF6"
 [7] "QWtXZKMtIF0Mg51jsWvgD/o0sCHZxfh24FZLRQIDAQABAoIBAC3jtBsE+qBdcqmm"
 [8] "jenzz6cVs/A7jgcKFZIA/2h53eBrjFxThujd/6TFq8Wa2zkmEx+ZSbkAa6I+VYDj"
 [9] "llLlrxYPZ1JS38UklEz4KoQgvvomG26qjLcgY6ze0PR3KCYheswB3eraaFHTN+Sp"
[10] "uvNBuyzaTLwLrGvk3bItz6n24sThQg4RZH7F66PBWk5P4NQpY/CsTd472LDze0CI"
[11] "evDxcCUQaLTThCJSRyqibu08fzxAuj2bJQSEz5hb3Qhw5iSiEz4pHmjG4tqyrZ9Z"
[12] "LHalYaJoIBGqCB0BT4cWc6aMsyPZqhdZSsRXGp4SPy2X+Nb+5UEV1+72yMCnBnTk"
[13] "8gqC5wcCgYEA7+Iq21NAicNWnLftytYBCjAkOQ207NkRh/2oCTgzMxK7tNavRE5J"
[14] "86V8AjBfV7tQU+CMcjgs0X+S9QKAb9+5nYA9iNUYsOIzL63LDqgmo1FuEZ2ntnKt"
[15] "VFI5WdW17OSJHpIY/Huu4GxvtejvB6xqxL/i60QRNN+gXz9QfUQeNscCgYEA0Tfj"
[16] "oqPHgZHMcpxJlHEIErfzOQ5te2z68vs37tfMUX1fKIL8YID/CD3G5Rv6ntQZJVCc"
[17] "NztaITAp5gqYdBBLaqUrF+QEObkl60/leJOLdoZofQ0mXqk5zep20Wm+jYwMesQt"
[18] "W4bXghKHRJaW+NWRFi2zj1zVCXguQSVq7HG5cZMCgYAQKt0alRzXbBvtShQzxIKj"
[19] "biUy1zKnd+XPlY/6txf0TEHsaT+8yc4AJtoZx6rVXeGHFa5BkHms0P1VmAqR/7Eh"
[20] "5V/AViRo34X1o6/41+pqvXU+qLKCAG6gLT6CSH4PbkOzlMMsWSWrKIPK7d0WVk+H"
[21] "3SrtElRajOvhH4JMPwgORwKBgQCWWq3y4fSsfxUIgJy4WwrMOPpIVMAFZWprWHL3"
[22] "6InjPlA2kvvAdrPRPmRDnnnbzt1LXcUGRFcfZreVpKOvNU6dk5mGj80hlpdTppVo"
[23] "s9AUG7/Xrq2WddMe0pMVKANTQgRt7bITBrK1vY8MkZRpu0GLSMi0DKjlJ0NGehd/"
[24] "WLNGlQKBgQCtXENNruk2YZyLnHQUpmxsBCRtNv35id/bqv9JP64Tt30S8kd1ok0x"
[25] "BjVkuigDBeY/VuOnUIb9paQs9zOAVK1BCE5dduDf8RKjhRTNvjSOdptevqaRX4YI"
[26] "zQHikO0bIO9D7oFFz2Oeo/jz9vecs3nIHm+FPSyrcemXaVFMMKQYZA=="        
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a4 02 01 00 02 82 01 01 00 c4 0c 03 e2 36 ae 20 75 88 73 2a 9f
  [25] 31 a2 28 59 78 31 d4 2f 99 1c d4 83 66 d0 a3 6e 9a 73 b3 a0 75 58 cd 72
  [49] b5 e5 64 32 c9 50 8c 6c 0d 0c cb d4 78 fe 69 63 7c ad 5d 4f 41 36 25 2f
  [73] 20 50 ef 91 08 b1 40 fa 38 1f 1c ab 35 b7 b7 61 1e 8c 82 8c ec 03 34 2a
  [97] 0c 48 b4 a6 7c 78 c6 51 ff 67 6e f6 f4 78 af 6f 49 d2 54 48 5a 94 66 16
 [121] fe e2 8b 78 5a 35 28 15 2b 01 77 09 34 3f f1 fa 7c 49 63 a8 a8 22 44 22
 [145] de 66 14 30 3b 4c cd 2a 21 f9 ae c6 61 93 2b 90 08 fd 8f 4d 8e db 21 f5
 [169] ee fa ab e5 6e 4a af 46 47 f6 d1 30 a2 f6 f7 69 c7 77 e5 2d b8 f1 f7 e6
 [193] ee 9b 04 5c 9b 42 df 12 2c c7 d4 a2 8d ee 46 0e 66 b2 14 00 74 e1 6a bc
 [217] 8c 40 f4 22 25 25 f8 f2 93 38 3e f4 40 82 63 c9 4d 70 b1 e5 b9 87 31 7a
 [241] 41 6b 57 64 a3 2d 20 5d 0c 83 9d 63 b1 6b e0 0f fa 34 b0 21 d9 c5 f8 76
 [265] e0 56 4b 45 02 03 01 00 01 02 82 01 00 2d e3 b4 1b 04 fa a0 5d 72 a9 a6
 [289] 8d e9 f3 cf a7 15 b3 f0 3b 8e 07 0a 15 92 00 ff 68 79 dd e0 6b 8c 5c 53
 [313] 86 e8 dd ff a4 c5 ab c5 9a db 39 26 13 1f 99 49 b9 00 6b a2 3e 55 80 e3
 [337] 96 52 e5 af 16 0f 67 52 52 df c5 24 94 4c f8 2a 84 20 be fa 26 1b 6e aa
 [361] 8c b7 20 63 ac de d0 f4 77 28 26 21 7a cc 01 dd ea da 68 51 d3 37 e4 a9
 [385] ba f3 41 bb 2c da 4c bc 0b ac 6b e4 dd b2 2d cf a9 f6 e2 c4 e1 42 0e 11
 [409] 64 7e c5 eb a3 c1 5a 4e 4f e0 d4 29 63 f0 ac 4d de 3b d8 b0 f3 7b 40 88
 [433] 7a f0 f1 70 25 10 68 b4 d3 84 22 52 47 2a a2 6e ed 3c 7f 3c 40 ba 3d 9b
 [457] 25 04 84 cf 98 5b dd 08 70 e6 24 a2 13 3e 29 1e 68 c6 e2 da b2 ad 9f 59
 [481] 2c 76 a5 61 a2 68 20 11 aa 08 1d 01 4f 87 16 73 a6 8c b3 23 d9 aa 17 59
 [505] 4a c4 57 1a 9e 12 3f 2d 97 f8 d6 fe e5 41 15 d7 ee f6 c8 c0 a7 06 74 e4
 [529] f2 0a 82 e7 07 02 81 81 00 ef e2 2a db 53 40 89 c3 56 9c b7 ed ca d6 01
 [553] 0a 30 24 39 0d b4 ec d9 11 87 fd a8 09 38 33 33 12 bb b4 d6 af 44 4e 49
 [577] f3 a5 7c 02 30 5f 57 bb 50 53 e0 8c 72 38 2c d1 7f 92 f5 02 80 6f df b9
 [601] 9d 80 3d 88 d5 18 b0 e2 33 2f ad cb 0e a8 26 a3 51 6e 11 9d a7 b6 72 ad
 [625] 54 52 39 59 d5 b5 ec e4 89 1e 92 18 fc 7b ae e0 6c 6f b5 e8 ef 07 ac 6a
 [649] c4 bf e2 eb 44 11 34 df a0 5f 3f 50 7d 44 1e 36 c7 02 81 81 00 d1 37 e3
 [673] a2 a3 c7 81 91 cc 72 9c 49 94 71 08 12 b7 f3 39 0e 6d 7b 6c fa f2 fb 37
 [697] ee d7 cc 51 7d 5f 28 82 fc 60 80 ff 08 3d c6 e5 1b fa 9e d4 19 25 50 9c
 [721] 37 3b 5a 21 30 29 e6 0a 98 74 10 4b 6a a5 2b 17 e4 04 39 b9 25 eb 4f e5
 [745] 78 93 8b 76 86 68 7d 0d 26 5e a9 39 cd ea 76 d1 69 be 8d 8c 0c 7a c4 2d
 [769] 5b 86 d7 82 12 87 44 96 96 f8 d5 91 16 2d b3 8f 5c d5 09 78 2e 41 25 6a
 [793] ec 71 b9 71 93 02 81 80 10 2a dd 1a 95 1c d7 6c 1b ed 4a 14 33 c4 82 a3
 [817] 6e 25 32 d7 32 a7 77 e5 cf 95 8f fa b7 17 f4 4c 41 ec 69 3f bc c9 ce 00
 [841] 26 da 19 c7 aa d5 5d e1 87 15 ae 41 90 79 ac d0 fd 55 98 0a 91 ff b1 21
 [865] e5 5f c0 56 24 68 df 85 f5 a3 af f8 d7 ea 6a bd 75 3e a8 b2 82 00 6e a0
 [889] 2d 3e 82 48 7e 0f 6e 43 b3 94 c3 2c 59 25 ab 28 83 ca ed dd 16 56 4f 87
 [913] dd 2a ed 12 54 5a 8c eb e1 1f 82 4c 3f 08 0e 47 02 81 81 00 96 5a ad f2
 [937] e1 f4 ac 7f 15 08 80 9c b8 5b 0a cc 38 fa 48 54 c0 05 65 6a 6b 58 72 f7
 [961] e8 89 e3 3e 50 36 92 fb c0 76 b3 d1 3e 64 43 9e 79 db ce dd 4b 5d c5 06
 [985] 44 57 1f 66 b7 95 a4 a3 af 35 4e 9d 93 99 86 8f cd 21 96 97 53 a6 95 68
[1009] b3 d0 14 1b bf d7 ae ad 96 75 d3 1e d2 93 15 28 03 53 42 04 6d ed b2 13
[1033] 06 b2 b5 bd 8f 0c 91 94 69 bb 41 8b 48 c8 b4 0c a8 e5 27 43 46 7a 17 7f
[1057] 58 b3 46 95 02 81 81 00 ad 5c 43 4d ae e9 36 61 9c 8b 9c 74 14 a6 6c 6c
[1081] 04 24 6d 36 fd f9 89 df db aa ff 49 3f ae 13 b7 7d 12 f2 47 75 a2 4d 31
[1105] 06 35 64 ba 28 03 05 e6 3f 56 e3 a7 50 86 fd a5 a4 2c f7 33 80 54 ad 41
[1129] 08 4e 5d 76 e0 df f1 12 a3 85 14 cd be 34 8e 76 9b 5e be a6 91 5f 86 08
[1153] cd 01 e2 90 ed 1b 20 ef 43 ee 81 45 cf 63 9e a3 f8 f3 f6 f7 9c b3 79 c8
[1177] 1e 6f 85 3d 2c ab 71 e9 97 69 51 4c 30 a4 18 64
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x56405edf7760>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x56405edf1030>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxAwD4jauIHWIcyqfMaIo"
[3] "WXgx1C+ZHNSDZtCjbppzs6B1WM1yteVkMslQjGwNDMvUeP5pY3ytXU9BNiUvIFDv"
[4] "kQixQPo4HxyrNbe3YR6MgozsAzQqDEi0pnx4xlH/Z2729Hivb0nSVEhalGYW/uKL"
[5] "eFo1KBUrAXcJND/x+nxJY6ioIkQi3mYUMDtMzSoh+a7GYZMrkAj9j02O2yH17vqr"
[6] "5W5Kr0ZH9tEwovb3acd35S248ffm7psEXJtC3xIsx9Sije5GDmayFAB04Wq8jED0"
[7] "IiUl+PKTOD70QIJjyU1wseW5hzF6QWtXZKMtIF0Mg51jsWvgD/o0sCHZxfh24FZL"
[8] "RQIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 c4 0c 03 e2 36 ae 20 75 88 73 2a 9f 31 a2 28 59 78
 [51] 31 d4 2f 99 1c d4 83 66 d0 a3 6e 9a 73 b3 a0 75 58 cd 72 b5 e5 64 32 c9 50
 [76] 8c 6c 0d 0c cb d4 78 fe 69 63 7c ad 5d 4f 41 36 25 2f 20 50 ef 91 08 b1 40
[101] fa 38 1f 1c ab 35 b7 b7 61 1e 8c 82 8c ec 03 34 2a 0c 48 b4 a6 7c 78 c6 51
[126] ff 67 6e f6 f4 78 af 6f 49 d2 54 48 5a 94 66 16 fe e2 8b 78 5a 35 28 15 2b
[151] 01 77 09 34 3f f1 fa 7c 49 63 a8 a8 22 44 22 de 66 14 30 3b 4c cd 2a 21 f9
[176] ae c6 61 93 2b 90 08 fd 8f 4d 8e db 21 f5 ee fa ab e5 6e 4a af 46 47 f6 d1
[201] 30 a2 f6 f7 69 c7 77 e5 2d b8 f1 f7 e6 ee 9b 04 5c 9b 42 df 12 2c c7 d4 a2
[226] 8d ee 46 0e 66 b2 14 00 74 e1 6a bc 8c 40 f4 22 25 25 f8 f2 93 38 3e f4 40
[251] 82 63 c9 4d 70 b1 e5 b9 87 31 7a 41 6b 57 64 a3 2d 20 5d 0c 83 9d 63 b1 6b
[276] e0 0f fa 34 b0 21 d9 c5 f8 76 e0 56 4b 45 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x56405ed5da50>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x56405ed5f460>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
  [1] 30 81 9f 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 81 8d 00 30 81 89
 [26] 02 81 81 00 aa 18 ab a4 3b 50 de ef 38 59 8f af 87 d2 ab 63 4e 45 71 c1 30
 [51] a9 bc a7 b8 78 26 74 14 fa ab 8b 47 1b d8 96 5f 5c 9f c3 81 84 85 ea f5 29
 [76] c2 62 46 f3 05 50 64 a8 de 19 c8 c3 38 be 54 96 cb ae b0 59 dc 0b 35 81 43
[101] b4 4a 35 44 9e b2 64 11 31 21 a4 55 bd 7f de 3f ac 91 9e 94 b5 6f b9 bb 4f
[126] 65 1c db 23 ea d4 39 d6 cd 52 3e b0 81 91 e7 5b 35 fd 13 a7 41 9b 30 90 f2
[151] 47 87 bd 4f 4e 19 67 02 03 01 00 01
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
