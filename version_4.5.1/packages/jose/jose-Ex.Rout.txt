
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "jose"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('jose')
Loading required package: openssl
Linking to: OpenSSL 3.0.13 30 Jan 2024
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("jwk")
> ### * jwk
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_jwk
> ### Title: JSON web-keys
> ### Aliases: read_jwk jwk_read jwk write_jwk jwk_write
> 
> ### ** Examples
> 
> # generate an ecdsa key
> library(openssl)
> key <- ec_keygen("P-521")
> write_jwk(key)
{"kty":"EC","crv":"P-521","x":"AMpuJL_PePFrfcibGmDLV1zN8aDS6sVrRjd4TnLuyyjo8-k1ccnecLcDkITSUIsM_zI1ZuPq8CeZC66HpBbT-j0E","y":"AJh-q0wujVYlJQ1LdgZ19eFf6_cUIF5fR4wbgvMBFxZkviVxwq4UwMFb0rFNQLH4XJHgwMwtyZJ-j7K-tMFnC9R3","d":"AJlevGXGgpvHeVX4-eQGyJTUuHB7UgfdWdrwZCMcuIMNEeuYfP1Ytejnxe3A7GOTTn5xSpHV2kGM2i4GFPZTt1Wf"} 
> write_jwk(as.list(key)$pubkey)
{"kty":"EC","crv":"P-521","x":"AMpuJL_PePFrfcibGmDLV1zN8aDS6sVrRjd4TnLuyyjo8-k1ccnecLcDkITSUIsM_zI1ZuPq8CeZC66HpBbT-j0E","y":"AJh-q0wujVYlJQ1LdgZ19eFf6_cUIF5fR4wbgvMBFxZkviVxwq4UwMFb0rFNQLH4XJHgwMwtyZJ-j7K-tMFnC9R3"} 
> 
> # Same for RSA
> key <- rsa_keygen()
> write_jwk(key)
{"e":"AQAB","n":"AOW3beOWgliDMzk6sLQofNRvc-_thGgIxrB9D_85zz43sw4UXXA0PhdQT_6Nx7Nnxk41h9e6ooiSEQeWU4Mv92Alv5X6knHmY3V7P0DqpBhcC5zl3ppewx2BSklWA3qwCn5gDXMIfCkVbjwv_WWaonWtNRdbvqyXj5OkLm8wyPIG5b8Yunq114ROSlLF2veKPHXWWytd9vmOoXmJ9VRhBiuXiYkR6b9nNeqfDsiu0lE5YXorsKPlrw-8VDU8-BP126rloeJYteEw3tbCzGVNut1LINn_RsoNTtbvZSwQfBV7KHeAAFPGrSCtsuyhsWMO5mH_a27FtLvF_WVdId_Ol1s","p":"APxDCIy8ab0Giwl5ub1iGZcVM34jYpdLcyYVkR8yExEBXS5eR31tSsHo3lPnCAjCKUYUGgdPRmCEIQ0v9UtDIpUqpY2slZF6r3MCz4b64OP753AnV-XDIwyKJf8o7jHNU0E51oemqzHiom3v0FcEG7j2mCFnym6Y05BQ8gFMlyQB","q":"AOke3oA8e84emt59SmkYTnsgiIyMb4M8O2F1z1tgi2G2d8FAIiRy6sf3FmM6ZMapDxEBD_mzpZEuPmbhaw-umYIpR9jpROfJKV-ysXRSGsg4LfevdS--R1DYJZhCfWbT2vy-2qRVF4f71LMND558Wks5IjNLQQ9QJv7NwnSsiMtb","d":"Dz7gwqmDBhfTBvnPr20-d6Tb93D2iCcI9L6gGKrAB9uPfSA54U_-TPLOFFFZjx0Uiq0_0j_3OIQlMDE4Yq0EyHNI503FeVy2fh4LYSYRdPJq7ONOpkUiwusJQJu-SF61m5SJX_iQsPNUqRbwRNWB8bhonR_AJFk8tKpBUKzWsUVGtGivIL3vy6L1ACz3axSg5Dc63zA1lbMvVWCYXpKo0ZZ5O5smhfgYeG68uYOGiLhJ9dEqVE8u06rtz0N9hD98Od9opBd-s1ycFXr2QxxzD6Tang0vOyhhSQH0DlSDKf1O1NKqQhslAmB3yAc-DnhiDr8KFrRxngTVUUgxfHJcAQ","dp":"ANhMmg4il__OlnUffJXYgdy7_xUPPkBAH5HuOCspgpO4Oa_Cg0YW6lzuUYRbutXXthAyuEbAQLYNVVG7Z3aLMCH7GU0rSGwfaEUTieJRR3f0zPOrqICIG4trAT2SWPs29UYeU8aosG3ryB6_3EJgcWzddIBgQIEoZW9_GKLoi0gB","dq":"TukMGAxhPBxQABAZKAn6RuN0VV8UQDAbSZo_XocHp0PEtb2n0P61SorxIRWbF0QSvYbGiZet677jkJ-tRdmsTMr8bwhHMs59Gs-6Ec3ZEv0xUi4qVMbsDQmdcDTRjgUYk4VnLUlAdd9g2FsLdnJRfjUQxpwqoaxYBthPgn8ErxE","qi":"c2G9oAwAm92KOgx5sIbXauGPl6mdtA2t-L7FBNMiYfzYAoPxUWq6OfjkDLtB5t1bHEPJC_JO2rN3cODsDBkaPTWdC1UZCXcFwpN0NYzXBQZuRB_nq5RwrxCmXX0t4Sj90br9KcXiNPt2LRMfsxobxQ3cSvGH4ucwSRHRlxTcb4o","kty":"RSA"} 
> write_jwk(as.list(key)$pubkey)
{"e":"AQAB","n":"AOW3beOWgliDMzk6sLQofNRvc-_thGgIxrB9D_85zz43sw4UXXA0PhdQT_6Nx7Nnxk41h9e6ooiSEQeWU4Mv92Alv5X6knHmY3V7P0DqpBhcC5zl3ppewx2BSklWA3qwCn5gDXMIfCkVbjwv_WWaonWtNRdbvqyXj5OkLm8wyPIG5b8Yunq114ROSlLF2veKPHXWWytd9vmOoXmJ9VRhBiuXiYkR6b9nNeqfDsiu0lE5YXorsKPlrw-8VDU8-BP126rloeJYteEw3tbCzGVNut1LINn_RsoNTtbvZSwQfBV7KHeAAFPGrSCtsuyhsWMO5mH_a27FtLvF_WVdId_Ol1s","kty":"RSA"} 
> 
> 
> 
> cleanEx()
> nameEx("jwt_encode")
> ### * jwt_encode
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jwt_encode_hmac
> ### Title: JSON Web Token
> ### Aliases: jwt_encode_hmac jwt jose jwt_decode_hmac jwt_encode_sig
> ###   jwt_decode_sig jwt_split
> 
> ### ** Examples
> 
> # HMAC signing
> mysecret <- "This is super secret"
> token <- jwt_claim(name = "jeroen", session = 123456)
> sig <- jwt_encode_hmac(token, mysecret)
> jwt_decode_hmac(sig, mysecret)
$iat
[1] 1750148752

$name
[1] "jeroen"

$session
[1] 123456

> 
> # RSA encoding
> mykey <- openssl::rsa_keygen()
> pubkey <- as.list(mykey)$pubkey
> sig <- jwt_encode_sig(token, mykey)
> jwt_decode_sig(sig, pubkey)
$iat
[1] 1750148752

$name
[1] "jeroen"

$session
[1] 123456

> 
> # Same with EC
> mykey <- openssl::ec_keygen()
> pubkey <- as.list(mykey)$pubkey
> sig <- jwt_encode_sig(token, mykey)
> jwt_decode_sig(sig, pubkey)
$iat
[1] 1750148752

$name
[1] "jeroen"

$session
[1] 123456

> 
> # Get elements of the key
> mysecret <- "This is super secret"
> token <- jwt_claim(name = "jeroen", session = 123456)
> jwt <- jwt_encode_hmac(token, mysecret)
> jwt_split(jwt)
$type
[1] "HMAC"

$keysize
[1] 256

$data
  [1] 65 79 4a 30 65 58 41 69 4f 69 4a 4b 56 31 51 69 4c 43 4a 68 62 47 63 69 4f
 [26] 69 4a 49 55 7a 49 31 4e 69 4a 39 2e 65 79 4a 70 59 58 51 69 4f 6a 45 33 4e
 [51] 54 41 78 4e 44 67 33 4e 54 49 73 49 6d 35 68 62 57 55 69 4f 69 4a 71 5a 58
 [76] 4a 76 5a 57 34 69 4c 43 4a 7a 5a 58 4e 7a 61 57 39 75 49 6a 6f 78 4d 6a 4d
[101] 30 4e 54 5a 39

$sig
 [1] 22 e2 85 8d e4 35 96 30 12 50 2a 1d 3c f2 d5 f1 c9 57 60 a8 95 21 b3 14 87
[26] b4 b3 7a ba 63 51 35

$payload
$payload$iat
[1] 1750148752

$payload$name
[1] "jeroen"

$payload$session
[1] 123456


$header
$header$typ
[1] "JWT"

$header$alg
[1] "HS256"


> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.5 0.02 0.52 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
