
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("R.utils")
Loading required package: R.oo
Loading required package: R.methodsS3
R.methodsS3 v1.8.2 (2022-06-13 22:00:14 UTC) successfully loaded. See ?R.methodsS3 for help.
R.oo v1.27.1 (2025-05-02 21:00:05 UTC) successfully loaded. See ?R.oo for help.

Attaching package: ‘R.oo’

The following object is masked from ‘package:R.methodsS3’:

    throw

The following objects are masked from ‘package:methods’:

    getClasses, getMethods

The following objects are masked from ‘package:base’:

    attach, detach, load, save

R.utils v2.13.0 (2025-02-24 21:20:02 UTC) successfully loaded. See ?R.utils for help.

Attaching package: ‘R.utils’

The following object is masked from ‘package:utils’:

    timestamp

The following objects are masked from ‘package:base’:

    cat, commandArgs, getOption, isOpen, nullfile, parse, use, warnings

> 
> x <- 1:10
> y <- seqToIntervals(x)
> print(y)  # [1 10]
     from to
[1,]    1 10
> 
> x <- c(1:10, 15:18, 20)
> y <- seqToIntervals(x)
> print(y)  # [1 10; 15 18; 20 20]
     from to
[1,]    1 10
[2,]   15 18
[3,]   20 20
> 
> z <- intervalsToSeq(y)
> print(z)
 [1]  1  2  3  4  5  6  7  8  9 10 15 16 17 18 20
> stopifnot(all.equal(x,z))
> 
> y <- matrix(c(5,11, 1,10), ncol=2L, byrow=TRUE)
> z <- intervalsToSeq(y, unique=FALSE)
> print(z)
 [1]  5  6  7  8  9 10 11  1  2  3  4  5  6  7  8  9 10
> z <- intervalsToSeq(y, unique=TRUE)
> print(z)
 [1]  5  6  7  8  9 10 11  1  2  3  4
> z <- intervalsToSeq(y, sort=TRUE)
> print(z)
 [1]  1  2  3  4  5  5  6  6  7  7  8  8  9  9 10 10 11
> z <- intervalsToSeq(y, unique=TRUE, sort=TRUE)
> print(z)
 [1]  1  2  3  4  5  6  7  8  9 10 11
> 
> ## Corner cases
> x <- integer(0)
> y <- seqToIntervals(x)
> print(y)
     from to
> str(y)
 int[0 , 1:2] 
 - attr(*, "dimnames")=List of 2
  ..$ : NULL
  ..$ : chr [1:2] "from" "to"
> stopifnot(all.equal(dim(y), c(0,2)))
> 
