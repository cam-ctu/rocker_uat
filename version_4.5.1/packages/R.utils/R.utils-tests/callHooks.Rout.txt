
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("R.utils")
Loading required package: R.oo
Loading required package: R.methodsS3
R.methodsS3 v1.8.2 (2022-06-13 22:00:14 UTC) successfully loaded. See ?R.methodsS3 for help.
R.oo v1.27.1 (2025-05-02 21:00:05 UTC) successfully loaded. See ?R.oo for help.

Attaching package: ‘R.oo’

The following object is masked from ‘package:R.methodsS3’:

    throw

The following objects are masked from ‘package:methods’:

    getClasses, getMethods

The following objects are masked from ‘package:base’:

    attach, detach, load, save

R.utils v2.13.0 (2025-02-24 21:20:02 UTC) successfully loaded. See ?R.utils for help.

Attaching package: ‘R.utils’

The following object is masked from ‘package:utils’:

    timestamp

The following objects are masked from ‘package:base’:

    cat, commandArgs, getOption, isOpen, nullfile, parse, use, warnings

> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Example 1
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # First, clean up if called more than once
> setHook("myFunction.onEnter", NULL, action="replace")
> setHook("myFunction.onExit", NULL, action="replace")
> 
> runConference <- function(...) {
+   callHooks("myFunction.onEnter")
+   cat("Speaker A: Hello there...\n")
+   callHooks("myFunction.onExit")
+ }
> 
> setHook("myFunction.onEnter", function(...) {
+   cat("Chair: Welcome to our conference.\n")
+ })
> 
> setHook("myFunction.onEnter", function(...) {
+   cat("Chair: Please welcome Speaker A!\n")
+ })
> 
> setHook("myFunction.onExit", function(...) {
+   cat("Chair: Please thanks Speaker A!\n")
+ })
> 
> runConference()
Chair: Welcome to our conference.
Chair: Please welcome Speaker A!
Speaker A: Hello there...
Chair: Please thanks Speaker A!
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Example 2
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> setHook("randomNumber", NULL, action="replace")
> setHook("randomNumber", rnorm)      # By function
> setHook("randomNumber", "rexp")     # By name
> setHook("randomNumber", "runiff")   # Non-existing name
> setHook("randomNumber", .GlobalEnv) # Not a function
> 
> res <- callHooks("randomNumber", n=1, removeCalledHooks=TRUE)
> str(res)
List of 4
 $       :List of 3
  ..$ fcn      :function (n, mean = 0, sd = 1)  
  ..$ result   : num -1.89
  ..$ exception: NULL
 $ rexp  :List of 3
  ..$ fcn      : chr "rexp"
  ..$ result   : num 0.83
  ..$ exception: NULL
 $ runiff:List of 3
  ..$ fcn      : logi NA
  ..$ result   : NULL
  ..$ exception:List of 2
  .. ..$ message: chr "could not find function \"fcn\""
  .. ..$ call   : language fcn(...)
  .. ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
 $       :List of 3
  ..$ fcn      :<environment: R_GlobalEnv> 
  ..$ result   : NULL
  ..$ exception:List of 2
  .. ..$ message: chr "could not find function \"fcn\""
  .. ..$ call   : language fcn(...)
  .. ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
 - attr(*, "failedHooks")= logi [1:4] FALSE FALSE TRUE TRUE
> cat("Number of hooks: ", length(res), "\n")
Number of hooks:  4 
> isErroneous <- unlist(lapply(res, FUN=function(x) !is.null(x$exception)))
> cat("Erroneous hooks: ", sum(isErroneous), "\n")
Erroneous hooks:  2 
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Exception handling
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> res <- try(callHooks(character(0L)), silent=TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> res <- try(callHooks(c("a", "b")), silent=TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> 
