
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("R.utils")
Loading required package: R.oo
Loading required package: R.methodsS3
R.methodsS3 v1.8.2 (2022-06-13 22:00:14 UTC) successfully loaded. See ?R.methodsS3 for help.
R.oo v1.27.1 (2025-05-02 21:00:05 UTC) successfully loaded. See ?R.oo for help.

Attaching package: ‘R.oo’

The following object is masked from ‘package:R.methodsS3’:

    throw

The following objects are masked from ‘package:methods’:

    getClasses, getMethods

The following objects are masked from ‘package:base’:

    attach, detach, load, save

R.utils v2.13.0 (2025-02-24 21:20:02 UTC) successfully loaded. See ?R.utils for help.

Attaching package: ‘R.utils’

The following object is masked from ‘package:utils’:

    timestamp

The following objects are masked from ‘package:base’:

    cat, commandArgs, getOption, isOpen, nullfile, parse, use, warnings

> warnifnot <- egsub("stop", "warning", stopifnot, value=FALSE)
> 
> message("Absolute and relative paths ...")
Absolute and relative paths ...
> 
> message("- Absolute and relative path of getwd()")
- Absolute and relative path of getwd()
> stopifnot(identical(getAbsolutePath("."), getwd()))
> stopifnot(identical(getRelativePath("."), "."))
> 
> message("- Tilde expansion")
- Tilde expansion
> pathH0 <- normalizePath("~")
> print(pathH0)
[1] "/github/home"
> pathH <- normalizePath("~", winslash = "/")
> print(pathH)
[1] "/github/home"
> pathHA <- getAbsolutePath(pathH)
> print(pathHA)
[1] "/github/home"
> 
> pathA <- getAbsolutePath("~", expandTilde=TRUE)
> print(pathA)
[1] "/github/home"
> warnifnot(identical(tolower(pathA), tolower(pathH)))
> 
> pathR <- getRelativePath("~")
> print(pathR)
[1] "../../../../../../github/home"
> warnifnot(identical(tolower(getAbsolutePath(pathR)), tolower(pathH)))
> 
> pathR <- getRelativePath("~", caseSensitive=TRUE)
> print(pathR)
[1] "../../../../../../github/home"
> 
> 
> message("- ~/../Documents")
- ~/../Documents
> pathA <- getAbsolutePath("~/../Documents", expandTilde=TRUE)
> pathA0 <- file.path(getParent(pathH), "Documents")
> ## Account for the case when getParent(pathH) = "C:/", which in case
> ## we get C://Documents instead of C:/Documents
> pathA0 <- normalizePath(pathA0, winslash = "/")
Warning message:
In normalizePath(pathA0, winslash = "/") :
  path[1]="/github/Documents": No such file or directory
> utils::str(list(pathA = pathA, pathA0 = pathA0))
List of 2
 $ pathA : chr "/github/Documents"
 $ pathA0: chr "/github/Documents"
> stopifnot(pathA == pathA0)
> 
> message("- /tmp/")
- /tmp/
> pathA <- getAbsolutePath("/tmp/", expandTilde=TRUE)
> print(pathA)
[1] "/tmp"
> stopifnot(identical(pathA, "/tmp"))
> 
> 
> message("- Microsoft Windows UNC paths")
- Microsoft Windows UNC paths
> stopifnot(identical(getAbsolutePath("//vinata/biomed"), "//vinata/biomed"))
> stopifnot(identical(getAbsolutePath("//vinata///biomed"), "//vinata/biomed"))
> 
> message("- Vector of files")
- Vector of files
> paths <- c(".", "..", getwd())
> print(paths)
[1] "."                                                        
[2] ".."                                                       
[3] "/__w/rocker_uat/rocker_uat/packages/R.utils/R.utils-tests"
> pathsA <- getAbsolutePath(paths)
> print(pathsA)
                                                          . 
"/__w/rocker_uat/rocker_uat/packages/R.utils/R.utils-tests" 
                                                         .. 
              "/__w/rocker_uat/rocker_uat/packages/R.utils" 
  /__w/rocker_uat/rocker_uat/packages/R.utils/R.utils-tests 
"/__w/rocker_uat/rocker_uat/packages/R.utils/R.utils-tests" 
> pathsR <- getRelativePath(paths)
> print(pathsR)
                                                        . 
                                                      "." 
                                                       .. 
                                                     ".." 
/__w/rocker_uat/rocker_uat/packages/R.utils/R.utils-tests 
                                                      "." 
> pathsAR <- getRelativePath(pathsA)
> print(pathsAR)
/__w/rocker_uat/rocker_uat/packages/R.utils/R.utils-tests 
                                                      "." 
              /__w/rocker_uat/rocker_uat/packages/R.utils 
                                                     ".." 
/__w/rocker_uat/rocker_uat/packages/R.utils/R.utils-tests 
                                                      "." 
> pathsRA <- getAbsolutePath(pathsR)
> print(pathsRA)
                                                          . 
"/__w/rocker_uat/rocker_uat/packages/R.utils/R.utils-tests" 
                                                         .. 
              "/__w/rocker_uat/rocker_uat/packages/R.utils" 
                                                          . 
"/__w/rocker_uat/rocker_uat/packages/R.utils/R.utils-tests" 
> 
> # Sanity checks
> stopifnot(all(isAbsolutePath(pathsA)))
> stopifnot(all(!isAbsolutePath(pathsR)))
> stopifnot(all(pathsRA == pathsA))
> stopifnot(all(pathsAR == pathsR))
> 
> 
> message("- Paths relative to given directories")
- Paths relative to given directories
> stopifnot(getRelativePath("foo", "foo") == ".")
> stopifnot(getRelativePath("foo/bar", "foo") == "bar")
> stopifnot(getRelativePath("foo/bar", "foo/bar/yah") == "..")
> stopifnot(getRelativePath("foo/bar/cool", "foo/bar/yah/sub/") == "../../cool")
> stopifnot(getRelativePath("/tmp/foo/", "/tmp/") == "foo")
> stopifnot(getRelativePath("/tmp/bar/", "/bar/foo/") == "../../tmp/bar")
> stopifnot(getRelativePath("C:/foo/bar/", "C:/bar/") == "../foo/bar")
> stopifnot(getRelativePath("C:/foo/bar/", "D:/bar/") == "C:/foo/bar")
> 
> message("Absolute and relative paths ... DONE")
Absolute and relative paths ... DONE
> 
