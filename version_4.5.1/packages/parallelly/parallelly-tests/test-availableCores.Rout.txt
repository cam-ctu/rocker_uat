
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-availableCores.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> parallelly:::testme("availableCores")
Test ‘availableCores’ ...
Sourcing 7 prologue scripts ...
01/07 prologue script ‘/usr/local/lib/R/site-library/parallelly/testme/_prologue/001.load.R’
02/07 prologue script ‘/usr/local/lib/R/site-library/parallelly/testme/_prologue/002.record-state.R’
03/07 prologue script ‘/usr/local/lib/R/site-library/parallelly/testme/_prologue/030.imports.R’
04/07 prologue script ‘/usr/local/lib/R/site-library/parallelly/testme/_prologue/050.utils.R’
05/07 prologue script ‘/usr/local/lib/R/site-library/parallelly/testme/_prologue/090.context.R’
06/07 prologue script ‘/usr/local/lib/R/site-library/parallelly/testme/_prologue/090.options.R’
07/07 prologue script ‘/usr/local/lib/R/site-library/parallelly/testme/_prologue/091.envvars.R’
Sourcing 7 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/parallelly/testme/test-availableCores.R’

> library(parallelly)

> message("*** availableCores() ...")
*** availableCores() ...

> n <- parallel::detectCores()

> message(sprintf("detectCores() = %d", n))
detectCores() = 4

> stopifnot(length(n) == 1, is.numeric(n))

> n <- availableCores()

> message(sprintf("availableCores() = %d", n))
availableCores() = 2

> stopifnot(length(n) == 1, is.integer(n), n >= 1)

> print(availableCores(which = "min"))
mc.cores 
       2 

> print(availableCores(which = "max"))
system 
     4 

> ns <- availableCores(na.rm = FALSE, which = "all")

> stopifnot(length(ns) >= 1, is.integer(ns), all(is.na(ns) | 
+     ns >= 0))

> n <- availableCores(methods = "system")

> print(n)
system 
     4 

> stopifnot(length(n) == 1, is.integer(n), n >= 1)

> print(availableCores(methods = "PBS"))
current 
      1 

> print(availableCores(methods = "SGE"))
current 
      1 

> print(availableCores(methods = "Slurm"))
current 
      1 

> print(availableCores(methods = "LSF"))
current 
      1 

> print(availableCores(methods = c("width", "FOO_BAR_ENV"), 
+     na.rm = FALSE, which = "all"))
      width FOO_BAR_ENV 
         80          NA 

> Sys.setenv(FOO_BAR_ENV = "0")

> res <- try(availableCores(methods = "FOO_BAR_ENV"), 
+     silent = TRUE)

> stopifnot(inherits(res, "try-error"))

> ncores0 <- 42

> message("*** LSF ...")
*** LSF ...

> message(" - LSB_DJOB_NUMPROC")
 - LSB_DJOB_NUMPROC

> Sys.setenv(LSB_DJOB_NUMPROC = as.character(ncores0))

> env <- environment(parallelly:::availableCoresLSF)

> env$n <- NULL

> ncores <- availableCores(methods = "LSF")

> print(ncores)
LSF 
 42 

> stopifnot(ncores == ncores0)

> message("*** LSF ... done")
*** LSF ... done

> message("*** PJM (Fujitsu Technical Computing Suite) ...")
*** PJM (Fujitsu Technical Computing Suite) ...

> message(" - PJM_VNODE_CORE")
 - PJM_VNODE_CORE

> Sys.setenv(PJM_VNODE_CORE = as.character(ncores0))

> env <- environment(parallelly:::availableCoresPJM)

> env$n <- NULL

> ncores <- availableCores(methods = "PJM")

> print(ncores)
PJM 
 42 

> stopifnot(ncores == ncores0)

> Sys.unsetenv("PJM_VNODE_CORE")

> message(" - PJM_PROC_BY_NODE")
 - PJM_PROC_BY_NODE

> Sys.setenv(PJM_PROC_BY_NODE = as.character(ncores0))

> env <- environment(parallelly:::availableCoresPJM)

> env$n <- NULL

> ncores <- availableCores(methods = "PJM")

> print(ncores)
PJM 
 42 

> stopifnot(ncores == ncores0)

> Sys.unsetenv("PJM_PROC_BY_NODE")

> message("*** PJM (Fujitsu Technical Computing Suite) ... done")
*** PJM (Fujitsu Technical Computing Suite) ... done

> message("*** Internal detectCores() ...")
*** Internal detectCores() ...

> env <- environment(parallelly:::detectCores)

> env$cache <- list(NULL, NULL)

> options(parallelly.availableCores.system = 2)

> n <- detectCores()

> print(n)
[1] 2

> stopifnot(is.integer(n), is.finite(n), n >= 1, n == 
+     2)

> options(parallelly.availableCores.system = NULL)

> env <- environment(parallelly:::detectCores)

> env$cache <- list(NULL, NULL)

> n <- detectCores()

> print(n)
[1] 4

> stopifnot(is.integer(n), is.finite(n), n >= 1)

> message("*** Internal detectCores() ... DONE")
*** Internal detectCores() ... DONE

> message("*** availableCores() ... DONE")
*** availableCores() ... DONE
Sourcing 4 epilogue scripts ...
01/04 epilogue script ‘/usr/local/lib/R/site-library/parallelly/testme/_epilogue/002.undo-state.R’
02/04 epilogue script ‘/usr/local/lib/R/site-library/parallelly/testme/_epilogue/090.gc.R’
03/04 epilogue script ‘/usr/local/lib/R/site-library/parallelly/testme/_epilogue/099.session_info.R’
04/04 epilogue script ‘/usr/local/lib/R/site-library/parallelly/testme/_epilogue/999.detritus.R’
Looking for detritus files generated by test ‘availableCores’:
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 4 epilogue scripts ... done
Test time: user.self=0.03s, sys.self=0.005s, elapsed=0.04s, user.child=0.001s, sys.child=0.008s
Test ‘availableCores’ ... success
> 
