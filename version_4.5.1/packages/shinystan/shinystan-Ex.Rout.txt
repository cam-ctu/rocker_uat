
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "shinystan"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('shinystan')
Loading required package: shiny

This is shinystan version 2.6.0

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("as.shinystan")
> ### * as.shinystan
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.shinystan
> ### Title: Create and test 'shinystan' objects
> ### Aliases: as.shinystan is.shinystan as.shinystan,array-method
> ###   as.shinystan,list-method as.shinystan,mcmc.list-method
> ###   as.shinystan,stanfit-method as.shinystan,stanreg-method
> ###   as.shinystan,CmdStanMCMC-method
> 
> ### ** Examples
> 
>  
> ## Not run: 
> ##D sso <- as.shinystan(X, ...) # replace ... with optional arguments or omit it
> ##D launch_shinystan(sso)
> ## End(Not run)
> 
> ## Not run: 
> ##D    
> ##D ########################
> ##D ### list of matrices ###
> ##D ########################
> ##D 
> ##D # Generate some fake data
> ##D chain1 <- cbind(beta1 = rnorm(100), beta2 = rnorm(100), sigma = rexp(100))
> ##D chain2 <- cbind(beta1 = rnorm(100), beta2 = rnorm(100), sigma = rexp(100))
> ##D sso <- as.shinystan(list(chain1, chain2))
> ##D launch_shinystan(sso)
> ##D 
> ##D # We can also specify some or all of the optional arguments
> ##D # note: in order to use param_dims we need to rename 'beta1' and 'beta2'
> ##D # to 'beta[1]' and 'beta[2]'
> ##D colnames(chain1) <- colnames(chain2) <- c(paste0("beta[",1:2,"]"), "sigma")
> ##D sso2 <- as.shinystan(list(chain1, chain2), 
> ##D                      model_name = "Example", warmup = 0, 
> ##D                      param_dims = list(beta = 2, sigma = 0))
> ##D launch_shinystan(sso2)
> ## End(Not run)
> 
> ## Not run: 
> ##D ######################
> ##D ### stanfit object ###
> ##D ######################
> ##D library("rstan")
> ##D fit <- stan_demo("eight_schools")
> ##D sso <- as.shinystan(fit, model_name = "example")
> ## End(Not run)
> 
> ## Not run: 
> ##D ######################
> ##D ### stanreg object ###
> ##D ######################
> ##D library("rstanarm")
> ##D example("example_model")
> ##D sso <- as.shinystan(example_model)
> ##D launch_shinystan(sso)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("deploy_shinystan")
> ### * deploy_shinystan
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: deploy_shinystan
> ### Title: Deploy a 'ShinyStan' app on the web using 'shinyapps.io' by
> ###   'RStudio'
> ### Aliases: deploy_shinystan
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # For this example assume sso is the name of the \code{shinystan} object for
> ##D # the model you want to use. Assume also that you want to name your app
> ##D # 'my-model' and that your shinyapps.io username is 'username'.
> ##D 
> ##D deploy_shinystan(sso, appName = "my-model", account = "username")
> ##D 
> ##D # If you only have one ShinyApps account configured then you can also omit
> ##D # the 'account' argument.
> ##D 
> ##D deploy_shinystan(sso, appName = "my-model")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("drop_parameters")
> ### * drop_parameters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drop_parameters
> ### Title: Drop parameters from a 'shinystan' object
> ### Aliases: drop_parameters
> 
> ### ** Examples
> 
> # Using example shinystan object 'eight_schools'
> print(eight_schools@param_names)
 [1] "mu"            "theta[1]"      "theta[2]"      "theta[3]"     
 [5] "theta[4]"      "theta[5]"      "theta[6]"      "theta[7]"     
 [9] "theta[8]"      "tau"           "log-posterior"
> 
> # Remove the scalar parameters mu and tau
> sso <- drop_parameters(eight_schools, pars = c("mu", "tau"))
> print(sso@param_names)
[1] "theta[1]"      "theta[2]"      "theta[3]"      "theta[4]"     
[5] "theta[5]"      "theta[6]"      "theta[7]"      "theta[8]"     
[9] "log-posterior"
> 
> # Remove all elements of the parameter vector theta
> sso <- drop_parameters(sso, pars = "theta")
> print(sso@param_names)
[1] "log-posterior"
> 
> 
> 
> 
> cleanEx()
> nameEx("generate_quantity")
> ### * generate_quantity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generate_quantity
> ### Title: Add new quantity to shinystan object
> ### Aliases: generate_quantity
> 
> ### ** Examples
> 
> # Using example shinystan object 'eight_schools'
> sso <- eight_schools
> sso <- generate_quantity(sso, fun = function(x) x^2, 
+                          param1 = "tau", new_name = "tau_sq")

This might take a moment for large shinystan objects...
> sso <- generate_quantity(sso, fun = "-", 
+                          param1 = "theta[1]", param2 = "theta[2]", 
+                          new_name = "theta1minus2")

This might take a moment for large shinystan objects...
>                          
> 
> 
> 
> cleanEx()
> nameEx("launch_shinystan")
> ### * launch_shinystan
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: launch_shinystan
> ### Title: Launch the 'ShinyStan' app
> ### Aliases: launch_shinystan launch_shinystan.default
> ###   launch_shinystan.shinystan
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #######################################
> ##D # Example 1: 'sso' is a shinystan object
> ##D #######################################
> ##D 
> ##D # Just launch shinystan
> ##D launch_shinystan(sso)
> ##D 
> ##D # Launch shinystan and replace sso with an updated version of itself
> ##D # if any changes are made to sso while using the app
> ##D sso <- launch_shinystan(sso)
> ##D 
> ##D # Launch shinystan but save any changes made to sso while running the app
> ##D # in a new shinystan object sso2. sso will remained unchanged. 
> ##D sso2 <- launch_shinystan(sso) 
> ##D 
> ##D #######################################
> ##D # Example 2: 'sf' is a stanfit object
> ##D #######################################
> ##D 
> ##D # Just launch shinystan
> ##D launch_shinystan(sf)
> ##D 
> ##D # Launch shinystan and save the resulting shinystan object
> ##D sf_sso <- launch_shinystan(sf)
> ##D 
> ##D # Now sf_sso is a shinystan object and so Example 1 (above) applies when
> ##D # using sf_sso. 
> ##D 
> ##D #######################################
> ##D # Example 3: 'fit' is an mcmc.list, array or list of matrices
> ##D #######################################
> ##D 
> ##D # First create shinystan object (see ?as.shinystan) for full details)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("launch_shinystan_demo")
> ### * launch_shinystan_demo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: launch_shinystan_demo
> ### Title: 'ShinyStan' demo
> ### Aliases: launch_shinystan_demo eight_schools
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # launch demo but don't save a shinystan object
> ##D launch_shinystan_demo() 
> ##D 
> ##D # launch demo and save the shinystan object for the demo 
> ##D sso_demo <- launch_shinystan_demo()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("retrieve")
> ### * retrieve
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: retrieve
> ### Title: Get summary statistics from shinystan object
> ### Aliases: retrieve
> 
> ### ** Examples
> 
> # Using example shinystan object 'eight_schools'
> sso <- eight_schools
> retrieve(sso, "rhat")
           mu      theta[1]      theta[2]      theta[3]      theta[4] 
     1.000408      1.000543      1.001548      1.000518      1.000856 
     theta[5]      theta[6]      theta[7]      theta[8]           tau 
     1.001214      1.000248      1.003489      1.000177      1.007904 
log-posterior 
     1.021784 
> retrieve(sso, "mean", pars = c('theta[1]', 'mu'))
 theta[1]        mu 
12.463055  8.364435 
> retrieve(sso, "quantiles")
                    2.5%         25%        50%        75%     97.5%
mu             -2.353100   5.1145147   8.235383  11.634226 18.832640
theta[1]       -2.337721   6.8603573  11.307956  17.105685 33.069280
theta[2]       -5.005552   3.8081126   8.045067  12.246303 21.681474
theta[3]      -12.142390   1.6861830   6.638008  11.265691 21.997043
theta[4]       -5.856721   3.9138352   8.075504  11.992252 21.604468
theta[5]       -9.304029   0.6588147   5.189271   9.009807 16.282473
theta[6]       -9.278113   1.9676098   6.449365  10.557170 19.452161
theta[7]       -1.449085   6.8776511  10.931001  15.700186 26.912940
theta[8]       -7.994186   4.1264315   8.722433  13.589607 27.326509
tau             1.411547   4.0011385   6.474779  10.155257 22.018404
log-posterior -28.093941 -22.2340468 -19.269627 -15.908783 -8.326459
> retrieve(sso, "max_treedepth")  # equivalent to retrieve(sso, "depth"), retrieve(sso, "tree"), etc.
chain1 chain2 chain3 chain4 
     5      6      6      5 
> retrieve(sso, "prop_divergent")
chain1 chain2 chain3 chain4 
 0.019  0.004  0.018  0.024 
> retrieve(sso, "prop_divergent", inc_warmup = TRUE)
chain1 chain2 chain3 chain4 
0.0285 0.0245 0.0280 0.0310 
> 
> 
> 
> 
> cleanEx()
> nameEx("shinystan-metadata")
> ### * shinystan-metadata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shinystan-metadata
> ### Title: View or change metadata associated with a 'shinystan' object
> ### Aliases: shinystan-metadata sso_info model_code notes model_name
> 
> ### ** Examples
> 
> # use eight_schools example object
> sso <- eight_schools
> 
> ################
> ### sso_info ###
> ################
> 
> sso_info(sso)
sso
---------------------
Model name: Demo (Eight Schools)
Parameters: 11
Parameter groups: 4
Chains: 4
Iterations: 2000
Warmup: 1000
Has model code: TRUE
Has user notes: FALSE
> 
> ##################
> ### model_code ###
> ##################
> 
> # view model code in example shinystan object 'eight_schools'
> cat(model_code(sso))
data {
  int<lower=0> J;          // number of schools
  real y[J];               // estimated treatment effect (school j)
  real<lower=0> sigma[J];  // std err of effect estimate (school j)
}
parameters {
  real mu;
  real theta[J];
  real<lower=0> tau;
}
model {
  theta ~ normal(mu, tau); 
  y ~ normal(theta,sigma);
}> 
> # change the model code in sso 
> # some jags style code
> my_code <- "
+  model {
+    for (i in 1:length(Y)) {
+      Y[i] ~ dpois(lambda[i])
+      log(lambda[i]) <- inprod(X[i,], theta[])
+    }
+    for (j in 1:J) {
+      theta[j] ~ dt(0.0, 1.0, 1.0)
+    }
+  }
+ "
> sso <- model_code(sso, my_code)
Successfully added code.
You can view the code in theShinyStan GUI on the 'Model Code' page.
> cat(model_code(sso))

 model {
   for (i in 1:length(Y)) {
     Y[i] ~ dpois(lambda[i])
     log(lambda[i]) <- inprod(X[i,], theta[])
   }
   for (j in 1:J) {
     theta[j] ~ dt(0.0, 1.0, 1.0)
   }
 }
> 
> #############
> ### notes ###
> #############
> 
> # view existing notes
> notes(sso)
[1] "Use this space to store notes about your model"
> 
> # add a note to the existing notes
> sso <- notes(sso, "New note")
Successfully added note. 
You can view the notes in the ShinyStan GUI on the 'Notepad' page.
> notes(sso)
[1] "Use this space to store notes about your model"
[2] "\n\nNew note"                                  
> cat(notes(sso))
Use this space to store notes about your model 

New note> 
> # replace existing notes
> sso <- notes(sso, "replacement note", replace = TRUE)
Successfully added note. 
You can view the notes in the ShinyStan GUI on the 'Notepad' page.
> notes(sso)
[1] "replacement note"
>  
> ##################
> ### model_name ###
> ##################
> 
> # view model name
> model_name(sso)
[1] "Demo (Eight Schools)"
> 
> # change model name
> sso <- model_name(sso, "some other name")
Successfully changed model name to some other name
> identical(model_name(sso), "some other name")
[1] TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("update_sso")
> ### * update_sso
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: update_sso
> ### Title: Update an object created by the previous version of shinystan
> ### Aliases: update_sso
> 
> ### ** Examples
> 
> ## Not run: 
> ##D sso_new <- update_sso(sso)
> ## End(Not run)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.111 0.129 1.953 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
