
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-findGlobals,dfs.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> globals:::testme("findGlobals,dfs")
Test ‘findGlobals,dfs’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/globals/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/globals/testme/_prologue/005.globals.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/globals/testme/_prologue/010.record-state.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/globals/testme/_prologue/030.imports.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/globals/testme/_prologue/050.utils.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/globals/testme/_prologue/090.context.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/globals/testme/_prologue/090.options.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/globals/testme/_prologue/091.envvars.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/globals/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/globals/testme/test-findGlobals,dfs.R’

> options(globals.debug = (.Platform[["OS.type"]] == 
+     "windows"))

> commaq <- globals:::commaq

> exprs <- list()

> truths <- list()

> append_expr <- function(expr, substitute = TRUE, truth = character(0)) {
+     if (substitute) 
+         expr <- substitute(expr)
+     truth <- so .... [TRUNCATED] 

> append_expr(42, truth = character(0))

> append_expr(a, truth = c("a"))

> append_expr(a <- 42, truth = c("<-", if (getRversion() < 
+     "4.0.0") c("a")))

> append_expr({
+     a + b
+ }, truth = c("{", "+", "a", "b"))

> append_expr({
+     a <- 42
+     a + b
+ }, truth = c("{", "<-", "+", "b", if (getRversion() < "4.0.0") "a"))

> append_expr({
+     c()
+ }, truth = c("{", "c"))

> append_expr({
+     c(1:3)
+ }, truth = c("{", "c", ":"))

> append_expr({
+     pi
+ }, truth = c("{", "pi"))

> append_expr({
+     base::pi
+ }, truth = c("{", "::"))

> append_expr({
+     base:::pi
+ }, truth = c("{", ":::"))

> append_expr(a$b, truth = c("a", "$"))

> append_expr(a$b(), truth = c("a", "$"))

> append_expr(a$b(2), truth = c("a", "$"))

> append_expr(a()$b, truth = c("a", "$"))

> append_expr(a(2)$b, truth = c("a", "$"))

> append_expr(a@b, truth = c("a", "@"))

> append_expr(a@b(), truth = c("a", "@"))

> append_expr(a@b(2), truth = c("a", "@"))

> append_expr(a()@b, truth = c("a", "@"))

> append_expr(a(2)@b, truth = c("a", "@"))

> append_expr(a[1], truth = c("a", "["))

> append_expr(a[NA], truth = c("a", "["))

> append_expr(a[NA], truth = c("a", "["))

> append_expr(a[Inf], truth = c("a", "["))

> append_expr(a[], truth = c("a", "["))

> append_expr(a[1, ], truth = c("a", "["))

> append_expr(a[, 1], truth = c("a", "["))

> append_expr(a[1] <- 0, truth = c("a", "[<-"))

> append_expr(a[b <- 1] <- 0, truth = c("a", "[<-", 
+     "<-", if (getRversion() < "4.0.0") c("b")))

> append_expr({
+     a[b <- 1] <- 0
+ }, truth = c("{", "a", "[<-", "<-", if (getRversion() < "4.0.0") c("b")))

> append_expr({
+     a$b <- 0
+ }, truth = c("{", "a", "$<-"))

> append_expr({
+     a@b <- 0
+ }, truth = c("{", "a", "@<-"))

> append_expr(names(a) <- "A", truth = c("a", "names<-"))

> append_expr({
+     a[1] = 0
+ }, truth = c("{", "a", "[<-"))

> append_expr({
+     a[b = 1] = 0
+ }, truth = c("{", "a", "[<-"))

> append_expr({
+     a$b = 0
+ }, truth = c("{", "a", "$<-"))

> append_expr({
+     names(a) = "A"
+ }, truth = c("{", "a", "names<-"))

> append_expr({
+     names(a)[1] = "A"
+ }, truth = c("{", "names<-", "a", "[<-", "names"))

> append_expr(x[is.na(x)] <- 0, truth = c("[<-", "is.na", 
+     "x"))

> append_expr({
+     x[is.na(x)] = 0
+ }, truth = c("{", "[<-", "is.na", "x"))

> append_expr(function(a) a, truth = character(0))

> append_expr(function(a) a + b, truth = c("+", "b"))

> append_expr(function(a, b) a + b, truth = c("+"))

> append_expr(function(a, b = 1) a + b, truth = c("+"))

> append_expr({
+     g <- function(a) a
+     g(a)
+ }, truth = c("{", "<-", "a", if (getRversion() < "4.0.0") "g"))

> append_expr({
+     x <- 1
+     y <- function(a) {
+         b <- 3
+         a + b + x
+     }
+     z <- y(2 * x)
+ }, truth = c("{", "<-", "+",  .... [TRUNCATED] 

> append_expr({
+     y <- function(a) a + x
+     x <- 1
+     z <- y(2 * x)
+ }, truth = c("{", "<-", "x", "+", "*", if (getRversion() < "4.0.0") c( .... [TRUNCATED] 

> append_expr({
+     lapply(1:3, function(i) {
+         G <- function(a, b, c) c(a, b, c)
+         G(a, b, c)
+     })
+ }, truth = c(":", "{", "<- ..." ... [TRUNCATED] 

> append_expr({
+     base::lapply(1:3, function(i) {
+         G <- function(a, b, c) c(a, b, c)
+         G(a, b, c)
+     })
+ }, truth = c("::", " ..." ... [TRUNCATED] 

> append_expr(~x, substitute = FALSE, truth = c("~", 
+     "x"))

> append_expr(. ~ x, substitute = FALSE, truth = c("~", 
+     ".", "x"))

> append_expr(y ~ x + 1, truth = c("~", "y", "+", "x"))

> env <- new.env(parent = emptyenv())

> append_expr(env, substitute = FALSE, truth = character(0))

> fcn <- function() a * x

> append_expr(fcn, substitute = FALSE, truth = c("*", 
+     "a", "x"))

> fcn <- function(a) a * x

> append_expr(fcn, substitute = FALSE, truth = c("*", 
+     "x"))

> fcn <- function(a, b = 1) a * x + b

> append_expr(fcn, substitute = FALSE, truth = c("*", 
+     "x", "+"))

> fcn <- function(...) NULL

> append_expr(fcn, substitute = FALSE, truth = character(0))

> fcn <- function(...) list(...)

> append_expr(fcn, substitute = FALSE, truth = c("list"))

> fcn <- function() list(...)

> append_expr(fcn, substitute = FALSE, truth = c("list", 
+     "..."))

> fcn <- function(a, ...) base::list(a = a, ...)

> append_expr(fcn, substitute = FALSE, truth = c("::"))

> fcn <- function(a, ...) c(a = a, ...)

> append_expr(fcn, substitute = FALSE, truth = c("c"))

> expr <- expression(x)

> append_expr(expr, substitute = FALSE, truth = c("x"))

> expr <- expression(x + y)

> append_expr(expr, substitute = FALSE, truth = c("+", 
+     "x", "y"))

> expr <- asS3(methods::getClass("S4")@prototype, complete = FALSE)

> append_expr(expr, substitute = FALSE, truth = character(0))

> con <- rawConnection(raw())

> append_expr(con, substitute = FALSE, truth = character(0))

> close(con)

> expr <- quote(for (x in NULL) NULL)

> append_expr(expr, substitute = FALSE, truth = c("for"))

> expr <- quote(for (x in NULL) x)

> append_expr(expr, substitute = FALSE, truth = c("for"))

> expr <- quote(base::names(x)[1] <- 0)

> append_expr(expr, substitute = FALSE, truth = c("::", 
+     "x", "[<-"))

> for (kk in seq_along(exprs)) {
+     message(sprintf("\n*** Expression #%d ***", kk))
+     expr <- exprs[[kk]]
+     truth <- truths[[kk]]
+     pr .... [TRUNCATED] 

*** Expression #1 ***
[1] 42
       findGlobals(..., type = 'ordered'): [n=0] 
[ OK ] findGlobals(..., type = 'dfs'    ): [n=0] 

*** Expression #2 ***
a
       findGlobals(..., type = 'ordered'): [n=1] ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=1] ‘a’

*** Expression #3 ***
a <- 42
       findGlobals(..., type = 'ordered'): [n=1] ‘<-’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=1] ‘<-’

*** Expression #4 ***
{
    a + b
}
       findGlobals(..., type = 'ordered'): [n=4] ‘{’, ‘+’, ‘a’, ‘b’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=4] ‘{’, ‘+’, ‘a’, ‘b’

*** Expression #5 ***
{
    a <- 42
    a + b
}
       findGlobals(..., type = 'ordered'): [n=4] ‘{’, ‘+’, ‘<-’, ‘b’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=4] ‘{’, ‘+’, ‘<-’, ‘b’

*** Expression #6 ***
{
    c()
}
       findGlobals(..., type = 'ordered'): [n=2] ‘{’, ‘c’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘{’, ‘c’

*** Expression #7 ***
{
    c(1:3)
}
       findGlobals(..., type = 'ordered'): [n=3] ‘:’, ‘{’, ‘c’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=3] ‘:’, ‘{’, ‘c’

*** Expression #8 ***
{
    pi
}
       findGlobals(..., type = 'ordered'): [n=2] ‘{’, ‘pi’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘{’, ‘pi’

*** Expression #9 ***
{
    base::pi
}
       findGlobals(..., type = 'ordered'): [n=2] ‘::’, ‘{’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘::’, ‘{’

*** Expression #10 ***
{
    base:::pi
}
       findGlobals(..., type = 'ordered'): [n=2] ‘:::’, ‘{’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘:::’, ‘{’

*** Expression #11 ***
a$b
       findGlobals(..., type = 'ordered'): [n=2] ‘$’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘$’, ‘a’

*** Expression #12 ***
a$b()
       findGlobals(..., type = 'ordered'): [n=2] ‘$’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘$’, ‘a’

*** Expression #13 ***
a$b(2)
       findGlobals(..., type = 'ordered'): [n=2] ‘$’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘$’, ‘a’

*** Expression #14 ***
a()$b
       findGlobals(..., type = 'ordered'): [n=2] ‘$’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘$’, ‘a’

*** Expression #15 ***
a(2)$b
       findGlobals(..., type = 'ordered'): [n=2] ‘$’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘$’, ‘a’

*** Expression #16 ***
a@b
       findGlobals(..., type = 'ordered'): [n=2] ‘@’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘@’, ‘a’

*** Expression #17 ***
a@b()
       findGlobals(..., type = 'ordered'): [n=2] ‘@’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘@’, ‘a’

*** Expression #18 ***
a@b(2)
       findGlobals(..., type = 'ordered'): [n=2] ‘@’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘@’, ‘a’

*** Expression #19 ***
a()@b
       findGlobals(..., type = 'ordered'): [n=2] ‘@’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘@’, ‘a’

*** Expression #20 ***
a(2)@b
       findGlobals(..., type = 'ordered'): [n=2] ‘@’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘@’, ‘a’

*** Expression #21 ***
a[1]
       findGlobals(..., type = 'ordered'): [n=2] ‘[’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘[’, ‘a’

*** Expression #22 ***
a[NA]
       findGlobals(..., type = 'ordered'): [n=2] ‘[’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘[’, ‘a’

*** Expression #23 ***
a[NA_character_]
       findGlobals(..., type = 'ordered'): [n=2] ‘[’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘[’, ‘a’

*** Expression #24 ***
a[Inf]
       findGlobals(..., type = 'ordered'): [n=2] ‘[’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘[’, ‘a’

*** Expression #25 ***
a[]
       findGlobals(..., type = 'ordered'): [n=2] ‘[’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘[’, ‘a’

*** Expression #26 ***
a[1, ]
       findGlobals(..., type = 'ordered'): [n=2] ‘[’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘[’, ‘a’

*** Expression #27 ***
a[, 1]
       findGlobals(..., type = 'ordered'): [n=2] ‘[’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘[’, ‘a’

*** Expression #28 ***
a[1] <- 0
       findGlobals(..., type = 'ordered'): [n=4] ‘[’, ‘[<-’, ‘<-’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘[<-’, ‘a’

*** Expression #29 ***
a[b <- 1] <- 0
       findGlobals(..., type = 'ordered'): [n=4] ‘[’, ‘[<-’, ‘<-’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=3] ‘[<-’, ‘<-’, ‘a’

*** Expression #30 ***
{
    a[b <- 1] <- 0
}
       findGlobals(..., type = 'ordered'): [n=5] ‘[’, ‘[<-’, ‘{’, ‘<-’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=4] ‘[<-’, ‘{’, ‘<-’, ‘a’

*** Expression #31 ***
{
    a$b <- 0
}
       findGlobals(..., type = 'ordered'): [n=5] ‘{’, ‘<-’, ‘$’, ‘$<-’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=3] ‘{’, ‘$<-’, ‘a’

*** Expression #32 ***
{
    a@b <- 0
}
       findGlobals(..., type = 'ordered'): [n=5] ‘{’, ‘@’, ‘@<-’, ‘<-’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=3] ‘{’, ‘@<-’, ‘a’

*** Expression #33 ***
names(a) <- "A"
       findGlobals(..., type = 'ordered'): [n=4] ‘<-’, ‘a’, ‘names’, ‘names<-’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘a’, ‘names<-’

*** Expression #34 ***
{
    a[1] = 0
}
       findGlobals(..., type = 'ordered'): [n=5] ‘[’, ‘[<-’, ‘{’, ‘=’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=3] ‘[<-’, ‘{’, ‘a’

*** Expression #35 ***
{
    a[b = 1] = 0
}
       findGlobals(..., type = 'ordered'): [n=5] ‘[’, ‘[<-’, ‘{’, ‘=’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=3] ‘[<-’, ‘{’, ‘a’

*** Expression #36 ***
{
    a$b = 0
}
       findGlobals(..., type = 'ordered'): [n=5] ‘{’, ‘=’, ‘$’, ‘$<-’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=3] ‘{’, ‘$<-’, ‘a’

*** Expression #37 ***
{
    names(a) = "A"
}
       findGlobals(..., type = 'ordered'): [n=5] ‘{’, ‘=’, ‘a’, ‘names’, ‘names<-’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=3] ‘{’, ‘a’, ‘names<-’

*** Expression #38 ***
{
    names(a)[1] = "A"
}
       findGlobals(..., type = 'ordered'): [n=7] ‘[’, ‘[<-’, ‘{’, ‘=’, ‘a’, ‘names’, ‘names<-’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=5] ‘[<-’, ‘{’, ‘a’, ‘names’, ‘names<-’

*** Expression #39 ***
x[is.na(x)] <- 0
       findGlobals(..., type = 'ordered'): [n=5] ‘[’, ‘[<-’, ‘<-’, ‘is.na’, ‘x’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=3] ‘[<-’, ‘is.na’, ‘x’

*** Expression #40 ***
{
    x[is.na(x)] = 0
}
       findGlobals(..., type = 'ordered'): [n=6] ‘[’, ‘[<-’, ‘{’, ‘=’, ‘is.na’, ‘x’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=4] ‘[<-’, ‘{’, ‘is.na’, ‘x’

*** Expression #41 ***
function(a) a
       findGlobals(..., type = 'ordered'): [n=0] 
[ OK ] findGlobals(..., type = 'dfs'    ): [n=0] 

*** Expression #42 ***
function(a) a + b
       findGlobals(..., type = 'ordered'): [n=2] ‘+’, ‘b’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘+’, ‘b’

*** Expression #43 ***
function(a, b) a + b
       findGlobals(..., type = 'ordered'): [n=1] ‘+’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=1] ‘+’

*** Expression #44 ***
function(a, b = 1) a + b
       findGlobals(..., type = 'ordered'): [n=1] ‘+’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=1] ‘+’

*** Expression #45 ***
{
    g <- function(a) a
    g(a)
}
       findGlobals(..., type = 'ordered'): [n=3] ‘{’, ‘<-’, ‘a’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=3] ‘{’, ‘<-’, ‘a’

*** Expression #46 ***
{
    x <- 1
    y <- function(a) {
        b <- 3
        a + b + x
    }
    z <- y(2 * x)
}
       findGlobals(..., type = 'ordered'): [n=4] ‘{’, ‘*’, ‘+’, ‘<-’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=4] ‘{’, ‘*’, ‘+’, ‘<-’

*** Expression #47 ***
{
    y <- function(a) a + x
    x <- 1
    z <- y(2 * x)
}
       findGlobals(..., type = 'ordered'): [n=5] ‘{’, ‘*’, ‘+’, ‘<-’, ‘x’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=5] ‘{’, ‘*’, ‘+’, ‘<-’, ‘x’

*** Expression #48 ***
{
    lapply(1:3, function(i) {
        G <- function(a, b, c) c(a, b, c)
        G(a, b, c)
    })
}
       findGlobals(..., type = 'ordered'): [n=4] ‘:’, ‘{’, ‘<-’, ‘lapply’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=7] ‘:’, ‘{’, ‘<-’, ‘a’, ‘b’, ‘c’, ‘lapply’

*** Expression #49 ***
{
    base::lapply(1:3, function(i) {
        G <- function(a, b, c) c(a, b, c)
        G(a, b, c)
    })
}
       findGlobals(..., type = 'ordered'): [n=4] ‘:’, ‘::’, ‘{’, ‘<-’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=7] ‘:’, ‘::’, ‘{’, ‘<-’, ‘a’, ‘b’, ‘c’

*** Expression #50 ***
~x
       findGlobals(..., type = 'ordered'): [n=2] ‘~’, ‘x’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘~’, ‘x’

*** Expression #51 ***
. ~ x
       findGlobals(..., type = 'ordered'): [n=3] ‘.’, ‘~’, ‘x’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=3] ‘.’, ‘~’, ‘x’

*** Expression #52 ***
y ~ x + 1
       findGlobals(..., type = 'ordered'): [n=4] ‘+’, ‘~’, ‘x’, ‘y’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=4] ‘+’, ‘~’, ‘x’, ‘y’

*** Expression #53 ***
<environment: 0x55fcefb319b0>
       findGlobals(..., type = 'ordered'): [n=0] 
[ OK ] findGlobals(..., type = 'dfs'    ): [n=0] 

*** Expression #54 ***
function () 
a * x
       findGlobals(..., type = 'ordered'): [n=3] ‘*’, ‘a’, ‘x’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=3] ‘*’, ‘a’, ‘x’

*** Expression #55 ***
function (a) 
a * x
       findGlobals(..., type = 'ordered'): [n=2] ‘*’, ‘x’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘*’, ‘x’

*** Expression #56 ***
function (a, b = 1) 
a * x + b
       findGlobals(..., type = 'ordered'): [n=3] ‘*’, ‘+’, ‘x’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=3] ‘*’, ‘+’, ‘x’

*** Expression #57 ***
function (...) 
NULL
       findGlobals(..., type = 'ordered'): [n=0] 
[ OK ] findGlobals(..., type = 'dfs'    ): [n=0] 

*** Expression #58 ***
function (...) 
list(...)
       findGlobals(..., type = 'ordered'): [n=1] ‘list’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=1] ‘list’

*** Expression #59 ***
function () 
list(...)
       findGlobals(..., type = 'ordered'): [n=2] ‘...’, ‘list’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=2] ‘...’, ‘list’

*** Expression #60 ***
function (a, ...) 
base::list(a = a, ...)
       findGlobals(..., type = 'ordered'): [n=1] ‘::’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=1] ‘::’

*** Expression #61 ***
function (a, ...) 
c(a = a, ...)
       findGlobals(..., type = 'ordered'): [n=1] ‘c’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=1] ‘c’

*** Expression #62 ***
expression(x)
       findGlobals(..., type = 'ordered'): [n=1] ‘x’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=1] ‘x’

*** Expression #63 ***
expression(x + y)
       findGlobals(..., type = 'ordered'): [n=3] ‘+’, ‘x’, ‘y’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=3] ‘+’, ‘x’, ‘y’

*** Expression #64 ***
<object>
       findGlobals(..., type = 'ordered'): [n=0] 
[ OK ] findGlobals(..., type = 'dfs'    ): [n=0] 

*** Expression #65 ***
A connection, specifically, ‘rawConnection’, but invalid.
       findGlobals(..., type = 'ordered'): [n=0] 
[ OK ] findGlobals(..., type = 'dfs'    ): [n=0] 

*** Expression #66 ***
for (x in NULL) NULL
       findGlobals(..., type = 'ordered'): [n=1] ‘for’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=1] ‘for’

*** Expression #67 ***
for (x in NULL) x
       findGlobals(..., type = 'ordered'): [n=1] ‘for’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=1] ‘for’

*** Expression #68 ***
base::names(x)[1] <- 0
       findGlobals(..., type = 'ordered'): [n=5] ‘::’, ‘[’, ‘[<-’, ‘<-’, ‘x’
[ OK ] findGlobals(..., type = 'dfs'    ): [n=3] ‘::’, ‘[<-’, ‘x’
Sourcing 5 epilogue scripts ...
01/05 epilogue script ‘/usr/local/lib/R/site-library/globals/testme/_epilogue/002.undo-state.R’
02/05 epilogue script ‘/usr/local/lib/R/site-library/globals/testme/_epilogue/090.gc.R’
03/05 epilogue script ‘/usr/local/lib/R/site-library/globals/testme/_epilogue/099.session_info.R’
04/05 epilogue script ‘/usr/local/lib/R/site-library/globals/testme/_epilogue/995.detritus-connections.R’
05/05 epilogue script ‘/usr/local/lib/R/site-library/globals/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 5 epilogue scripts ... done
Test time: user.self=0.3s, sys.self=0.008s, elapsed=0.3s, user.child=0s, sys.child=0s
Test ‘findGlobals,dfs’ ... success
> 
