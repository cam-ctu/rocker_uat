
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-findGlobals.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> globals:::testme("findGlobals")
Test ‘findGlobals’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/globals/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/globals/testme/_prologue/005.globals.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/globals/testme/_prologue/010.record-state.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/globals/testme/_prologue/030.imports.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/globals/testme/_prologue/050.utils.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/globals/testme/_prologue/090.context.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/globals/testme/_prologue/090.options.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/globals/testme/_prologue/091.envvars.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/globals/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/globals/testme/test-findGlobals.R’

> library(globals)

> message("*** findGlobals() ...")
*** findGlobals() ...

> message(" ** findGlobals(..., method = 'conservative'):")
 ** findGlobals(..., method = 'conservative'):

> expr <- exprs$A

> globals_c <- findGlobals(expr, method = "conservative")

> print(globals_c)
[1] "{"  "<-" "c"  "d"  "+" 

> assert_identical_sets(globals_c, c("{", "<-", "c", 
+     "d", "+"))

> message(" ** findGlobals(..., method = 'liberal'):")
 ** findGlobals(..., method = 'liberal'):

> expr <- exprs$A

> globals_l <- findGlobals(expr, method = "liberal")

> print(globals_l)
[1] "{"  "<-" "b"  "c"  "d"  "+"  "a"  "e" 

> assert_identical_sets(globals_l, c("{", "<-", "b", 
+     "c", "d", "+", "a", "e"))

> message(" ** findGlobals(..., method = 'ordered'):")
 ** findGlobals(..., method = 'ordered'):

> expr <- exprs$A

> globals_i <- findGlobals(expr, method = "ordered")

> print(globals_i)
[1] "{"  "<-" "b"  "c"  "d"  "a"  "+"  "e" 

> assert_identical_sets(globals_i, c("{", "<-", "b", 
+     "c", "d", "+", "a", "e"))

> message(" ** findGlobals(..., method = 'dfs'):")
 ** findGlobals(..., method = 'dfs'):

> expr <- exprs$A

> print(expr)
{
    x <- b
    b <- 1
    y <- c
    z <- d
    a <- a + 1
    e <- e()
}

> globals_t <- findGlobals(expr, method = "dfs")

> print(globals_t)
[1] "{"  "<-" "b"  "c"  "d"  "a"  "+"  "e" 

> if (getRversion() < "4.0.0") globals_t <- setdiff(globals_t, 
+     c("x", "y", "z"))

> assert_identical_sets(globals_t, c("{", "<-", "b", 
+     "c", "d", "+", "a", "e"))

> fcn <- function() {
+     a <- a + 1
+     a
+ }

> print(fcn)
function () 
{
    a <- a + 1
    a
}

> globals_i <- globals::findGlobals(fcn)

> print(globals_i)
[1] "{"  "<-" "a"  "+" 

> assert_identical_sets(globals_i, c("{", "<-", "a", 
+     "+"))

> globals_t <- findGlobals(fcn, method = "dfs")

> print(globals_t)
[1] "{"  "<-" "a"  "+" 

> assert_identical_sets(globals_t, c("{", "<-", "a", 
+     "+"))

> fcn <- function() {
+     a
+     a <- a + 1
+ }

> print(fcn)
function () 
{
    a
    a <- a + 1
}

> globals_i <- findGlobals(fcn)

> print(globals_i)
[1] "{"  "a"  "<-" "+" 

> assert_identical_sets(globals_i, c("{", "a", "<-", 
+     "+"))

> globals_t <- findGlobals(fcn, method = "dfs")

> print(globals_t)
[1] "{"  "a"  "<-" "+" 

> assert_identical_sets(globals_t, c("{", "a", "<-", 
+     "+"))

> fcn <- function(x) x <- x

> print(fcn)
function (x) 
x <- x

> globals_i <- findGlobals(fcn)

> print(globals_i)
[1] "<-"

> assert_identical_sets(globals_i, c("<-"))

> globals_t <- findGlobals(fcn, method = "dfs")

> print(globals_t)
[1] "<-"

> assert_identical_sets(globals_t, c("<-"))

> fcn <- function(x) x[1] <- 0

> print(fcn)
function (x) 
x[1] <- 0

> globals_i <- findGlobals(fcn)

> print(globals_i)
[1] "<-"  "["   "[<-"

> assert_identical_sets(globals_i, c("<-", "[", "[<-"))

> globals_t <- findGlobals(fcn, method = "dfs")

> print(globals_t)
[1] "[<-"

> assert_identical_sets(globals_t, c("[<-"))

> fcn <- function(x) a <- x$a

> print(fcn)
function (x) 
a <- x$a

> globals_i <- findGlobals(fcn)

> print(globals_i)
[1] "<-" "$" 

> assert_identical_sets(globals_i, c("<-", "$"))

> globals_t <- findGlobals(fcn, method = "dfs")

> print(globals_t)
[1] "<-" "$" 

> if (getRversion() < "4.0.0") globals_t <- setdiff(globals_t, 
+     "a")

> assert_identical_sets(globals_t, c("<-", "$"))

> fcn <- function(...) args <- list(...)

> print(fcn)
function (...) 
args <- list(...)

> globals_i <- findGlobals(fcn)

> print(globals_i)
[1] "<-"   "list"

> assert_identical_sets(globals_i, c("<-", "list"))

> globals_t <- findGlobals(fcn, method = "dfs")

> print(globals_t)
[1] "<-"   "list"

> if (getRversion() < "4.0.0") globals_t <- setdiff(globals_t, 
+     "args")

> assert_identical_sets(globals_t, c("<-", "list"))

> fcn <- function() args <- list(...)

> print(fcn)
function () 
args <- list(...)

> globals_i <- findGlobals(fcn)

> print(globals_i)
[1] "<-"   "list" "..." 

> assert_identical_sets(globals_i, c("<-", "list", "..."))

> globals_t <- findGlobals(fcn, method = "dfs")

> print(globals_t)
[1] "<-"   "list" "..." 

> if (getRversion() < "4.0.0") globals_t <- setdiff(globals_t, 
+     "args")

> assert_identical_sets(globals_t, c("<-", "list", "..."))

> expr <- quote({
+     function(x) x
+     x
+ })

> print(expr)
{
    function(x) x
    x
}

> globals_i <- findGlobals(expr)

> print(globals_i)
[1] "{" "x"

> assert_identical_sets(globals_i, c("{", "x"))

> globals_t <- findGlobals(expr, method = "dfs")

> print(globals_t)
[1] "{" "x"

> assert_identical_sets(globals_t, c("{", "x"))

> expr <- quote({
+     "x" <- 1
+     x
+ })

> globals_i <- findGlobals(expr)

> print(globals_i)
[1] "{"  "<-"

> assert_identical_sets(globals_i, c("{", "<-"))

> globals_t <- findGlobals(expr, method = "dfs")

> if (getRversion() < "4.0.0") globals_t <- setdiff(globals_t, 
+     "x")

> print(globals_t)
[1] "{"  "<-"

> assert_identical_sets(globals_t, c("{", "<-"))

> x <- list()

> globals <- findGlobals(x)

> print(globals)
character(0)

> assert_identical_sets(globals, character(0))

> globals_t <- findGlobals(x, method = "dfs")

> print(globals_t)
character(0)

> assert_identical_sets(globals_t, character(0))

> expr <- quote(list())

> attr(expr, "abc") <- quote({
+     a
+ })

> attr(expr, "def") <- quote({
+     d
+ })

> globals <- findGlobals(expr)

> print(globals)
[1] "list" "{"    "a"    "d"   

> assert_identical_sets(globals, c("list", "{", "a", 
+     "d"))

> globals_t <- findGlobals(expr, method = "dfs")

> print(globals_t)
[1] "list" "{"    "a"    "d"   

> assert_identical_sets(globals_t, c("list", "{", "a", 
+     "d"))

> globals <- findGlobals(expr, attributes = "abc")

> print(globals)
[1] "list" "{"    "a"   

> assert_identical_sets(globals, c("list", "{", "a"))

> globals_t <- findGlobals(expr, method = "dfs")

> print(globals_t)
[1] "list" "{"    "a"    "d"   

> assert_identical_sets(globals_t, c("list", "{", "a", 
+     "d"))

> message(" ** findGlobals(..., tweak):")
 ** findGlobals(..., tweak):

> tweak_another_expression <- function(expr) {
+     quote({
+         x <- B
+         B <- 1
+         y <- C
+         z <- D
+     })
+ }

> expr <- exprs$A

> print(expr)
{
    x <- b
    b <- 1
    y <- c
    z <- d
    a <- a + 1
    e <- e()
}

> globals_i <- findGlobals(expr, tweak = tweak_another_expression)

> assert_identical_sets(globals_i, c("{", "<-", "B", 
+     "C", "D"))

> globals_t <- findGlobals(expr, tweak = tweak_another_expression, 
+     method = "dfs")

> print(globals_t)
[1] "{"  "<-" "B"  "C"  "D" 

> if (getRversion() < "4.0.0") globals_t <- setdiff(globals_t, 
+     c("x", "y", "z"))

> assert_identical_sets(globals_t, c("{", "<-", "B", 
+     "C", "D"))

> message(" ** findGlobals(..., trace = TRUE):")
 ** findGlobals(..., trace = TRUE):

> expr <- exprs$A

> print(expr)
{
    x <- b
    b <- 1
    y <- c
    z <- d
    a <- a + 1
    e <- e()
}

> globals_i <- findGlobals(expr, trace = TRUE)
findGlobals(..., dotdotdot = 'warning', method = 'ordered', unlist = TRUE) ...
   call_find_globals_with_dotdotdot(dotdotdot = ‘warning’) ...
      find_globals_ordered() ...
         type = {
         length(expr) = 7
         find_globals_ordered() ...
            type = call
            Convert to an anonymous function:
            function () 
            x <- b
            enter_global(type=‘function’, v=‘<-’) ...
               before:
               [1] name  class
               <0 rows> (or 0-length row.names)
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘<-’
               LHS <- RHS:
               after:
                 name  class
               1   <- global
            enter_global(type=‘function’, v=‘<-’) ... done
            enter_local(type=‘<-’, v=‘x’) ...
               before:
                 name  class
               1   <- global
               hardcoded locals: [n=0] 
               LHS <- RHS:
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ...
                  find_globals_ordered() ...
                     type = call
                     Convert to an anonymous function:
                     function () 
                     b
                     <environment: 0x560f37e565f0>
                     enter_global(type=‘variable’, v=‘b’) ...
                        before:
                        [1] name  class
                        <0 rows> (or 0-length row.names)
                        hardcoded locals: [n=0] 
                        Add ‘global’ variable ‘b’
                        => Nothing to else to explore
                        after:
                          name  class
                        1    b global
                     enter_global(type=‘variable’, v=‘b’) ... done
                     variables (with duplicates):
                       name  class
                     1    b global
                     variables (no duplicates):
                       name  class
                     1    b global
                  find_globals_ordered() ... done
                  globals: [n=1] ‘b’
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ... done
               RHS globals: [n=1] ‘b’
               hardcoded locals: [n=0] 
               Add ‘local’ variable ‘x’
               after:
                 name  class
               1   <- global
               2    x  local
            enter_local(type=‘<-’, v=‘x’) ... done
            enter_global(type=‘variable’, v=‘b’) ...
               before:
                 name  class
               1   <- global
               2    x  local
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘b’
               => Nothing to else to explore
               after:
                 name  class
               1   <- global
               2    x  local
               3    b global
            enter_global(type=‘variable’, v=‘b’) ... done
            variables (with duplicates):
              name  class
            1   <- global
            2    x  local
            3    b global
            variables (no duplicates):
              name  class
            1   <- global
            2    x  local
            3    b global
         find_globals_ordered() ... done
         Add ‘global’ variable ‘<-’, ‘b’
         Add ‘local’ variable ‘x’
         find_globals_ordered() ...
            type = call
            Convert to an anonymous function:
            function () 
            b <- 1
            enter_global(type=‘function’, v=‘<-’) ...
               before:
               [1] name  class
               <0 rows> (or 0-length row.names)
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘<-’
               LHS <- RHS:
               after:
                 name  class
               1   <- global
            enter_global(type=‘function’, v=‘<-’) ... done
            enter_local(type=‘<-’, v=‘b’) ...
               before:
                 name  class
               1   <- global
               hardcoded locals: [n=0] 
               LHS <- RHS:
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ...
                  find_globals_ordered() ...
                     type = call
                     Convert to an anonymous function:
                     function () 
                     1
                     <environment: 0x560f35cf0bd0>
                     variables (with duplicates):
                     [1] name  class
                     <0 rows> (or 0-length row.names)
                     variables (no duplicates):
                     [1] name  class
                     <0 rows> (or 0-length row.names)
                  find_globals_ordered() ... done
                  globals: [n=0] 
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ... done
               RHS globals: [n=0] 
               hardcoded locals: [n=0] 
               Add ‘local’ variable ‘b’
               after:
                 name  class
               1   <- global
               2    b  local
            enter_local(type=‘<-’, v=‘b’) ... done
            variables (with duplicates):
              name  class
            1   <- global
            2    b  local
            variables (no duplicates):
              name  class
            1   <- global
            2    b  local
         find_globals_ordered() ... done
         Add ‘global’ variable ‘<-’
         Add ‘local’ variable ‘b’
         find_globals_ordered() ...
            type = call
            Convert to an anonymous function:
            function () 
            y <- c
            enter_global(type=‘function’, v=‘<-’) ...
               before:
               [1] name  class
               <0 rows> (or 0-length row.names)
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘<-’
               LHS <- RHS:
               after:
                 name  class
               1   <- global
            enter_global(type=‘function’, v=‘<-’) ... done
            enter_local(type=‘<-’, v=‘y’) ...
               before:
                 name  class
               1   <- global
               hardcoded locals: [n=0] 
               LHS <- RHS:
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ...
                  find_globals_ordered() ...
                     type = call
                     Convert to an anonymous function:
                     function () 
                     c
                     <environment: 0x560f37546b80>
                     enter_global(type=‘variable’, v=‘c’) ...
                        before:
                        [1] name  class
                        <0 rows> (or 0-length row.names)
                        hardcoded locals: [n=0] 
                        Add ‘global’ variable ‘c’
                        => Nothing to else to explore
                        after:
                          name  class
                        1    c global
                     enter_global(type=‘variable’, v=‘c’) ... done
                     variables (with duplicates):
                       name  class
                     1    c global
                     variables (no duplicates):
                       name  class
                     1    c global
                  find_globals_ordered() ... done
                  globals: [n=1] ‘c’
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ... done
               RHS globals: [n=1] ‘c’
               hardcoded locals: [n=0] 
               Add ‘local’ variable ‘y’
               after:
                 name  class
               1   <- global
               2    y  local
            enter_local(type=‘<-’, v=‘y’) ... done
            enter_global(type=‘variable’, v=‘c’) ...
               before:
                 name  class
               1   <- global
               2    y  local
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘c’
               => Nothing to else to explore
               after:
                 name  class
               1   <- global
               2    y  local
               3    c global
            enter_global(type=‘variable’, v=‘c’) ... done
            variables (with duplicates):
              name  class
            1   <- global
            2    y  local
            3    c global
            variables (no duplicates):
              name  class
            1   <- global
            2    y  local
            3    c global
         find_globals_ordered() ... done
         Add ‘global’ variable ‘<-’, ‘c’
         Add ‘local’ variable ‘y’
         find_globals_ordered() ...
            type = call
            Convert to an anonymous function:
            function () 
            z <- d
            enter_global(type=‘function’, v=‘<-’) ...
               before:
               [1] name  class
               <0 rows> (or 0-length row.names)
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘<-’
               LHS <- RHS:
               after:
                 name  class
               1   <- global
            enter_global(type=‘function’, v=‘<-’) ... done
            enter_local(type=‘<-’, v=‘z’) ...
               before:
                 name  class
               1   <- global
               hardcoded locals: [n=0] 
               LHS <- RHS:
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ...
                  find_globals_ordered() ...
                     type = call
                     Convert to an anonymous function:
                     function () 
                     d
                     <environment: 0x560f37e15e70>
                     enter_global(type=‘variable’, v=‘d’) ...
                        before:
                        [1] name  class
                        <0 rows> (or 0-length row.names)
                        hardcoded locals: [n=0] 
                        Add ‘global’ variable ‘d’
                        => Nothing to else to explore
                        after:
                          name  class
                        1    d global
                     enter_global(type=‘variable’, v=‘d’) ... done
                     variables (with duplicates):
                       name  class
                     1    d global
                     variables (no duplicates):
                       name  class
                     1    d global
                  find_globals_ordered() ... done
                  globals: [n=1] ‘d’
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ... done
               RHS globals: [n=1] ‘d’
               hardcoded locals: [n=0] 
               Add ‘local’ variable ‘z’
               after:
                 name  class
               1   <- global
               2    z  local
            enter_local(type=‘<-’, v=‘z’) ... done
            enter_global(type=‘variable’, v=‘d’) ...
               before:
                 name  class
               1   <- global
               2    z  local
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘d’
               => Nothing to else to explore
               after:
                 name  class
               1   <- global
               2    z  local
               3    d global
            enter_global(type=‘variable’, v=‘d’) ... done
            variables (with duplicates):
              name  class
            1   <- global
            2    z  local
            3    d global
            variables (no duplicates):
              name  class
            1   <- global
            2    z  local
            3    d global
         find_globals_ordered() ... done
         Add ‘global’ variable ‘<-’, ‘d’
         Add ‘local’ variable ‘z’
         find_globals_ordered() ...
            type = call
            Convert to an anonymous function:
            function () 
            a <- a + 1
            enter_global(type=‘function’, v=‘<-’) ...
               before:
               [1] name  class
               <0 rows> (or 0-length row.names)
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘<-’
               LHS <- RHS:
               after:
                 name  class
               1   <- global
            enter_global(type=‘function’, v=‘<-’) ... done
            enter_local(type=‘<-’, v=‘a’) ...
               before:
                 name  class
               1   <- global
               hardcoded locals: [n=0] 
               LHS <- RHS:
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ...
                  find_globals_ordered() ...
                     type = call
                     Convert to an anonymous function:
                     function () 
                     a + 1
                     <environment: 0x560f35ea06a8>
                     enter_global(type=‘function’, v=‘+’) ...
                        before:
                        [1] name  class
                        <0 rows> (or 0-length row.names)
                        hardcoded locals: [n=0] 
                        Add ‘global’ variable ‘+’
                        => A function, but not of interest
                        after:
                          name  class
                        1    + global
                     enter_global(type=‘function’, v=‘+’) ... done
                     enter_global(type=‘variable’, v=‘a’) ...
                        before:
                          name  class
                        1    + global
                        hardcoded locals: [n=0] 
                        Add ‘global’ variable ‘a’
                        => Nothing to else to explore
                        after:
                          name  class
                        1    + global
                        2    a global
                     enter_global(type=‘variable’, v=‘a’) ... done
                     variables (with duplicates):
                       name  class
                     1    + global
                     2    a global
                     variables (no duplicates):
                       name  class
                     1    + global
                     2    a global
                  find_globals_ordered() ... done
                  globals: [n=2] ‘+’, ‘a’
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ... done
               RHS globals: [n=2] ‘+’, ‘a’
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘a’
               Add ‘local’ variable ‘a’
               after:
                 name  class
               1   <- global
               2    a global
               3    a  local
            enter_local(type=‘<-’, v=‘a’) ... done
            enter_global(type=‘function’, v=‘+’) ...
               before:
                 name  class
               1   <- global
               2    a global
               3    a  local
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘+’
               => A function, but not of interest
               after:
                 name  class
               1   <- global
               2    a global
               3    a  local
               4    + global
            enter_global(type=‘function’, v=‘+’) ... done
            enter_global(type=‘variable’, v=‘a’) ...
               before:
                 name  class
               1   <- global
               2    a global
               3    a  local
               4    + global
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘a’
               => Nothing to else to explore
               after:
                 name  class
               1   <- global
               2    a global
               3    a  local
               4    + global
               5    a global
            enter_global(type=‘variable’, v=‘a’) ... done
            variables (with duplicates):
              name  class
            1   <- global
            2    a global
            3    a  local
            4    + global
            5    a global
            variables (no duplicates):
              name  class
            1   <- global
            2    a global
            3    + global
         find_globals_ordered() ... done
         Add ‘global’ variable ‘<-’, ‘a’, ‘+’
         Add ‘local’ variable ‘a’
         find_globals_ordered() ...
            type = call
            Convert to an anonymous function:
            function () 
            e <- e()
            enter_global(type=‘function’, v=‘<-’) ...
               before:
               [1] name  class
               <0 rows> (or 0-length row.names)
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘<-’
               LHS <- RHS:
               after:
                 name  class
               1   <- global
            enter_global(type=‘function’, v=‘<-’) ... done
            enter_local(type=‘<-’, v=‘e’) ...
               before:
                 name  class
               1   <- global
               hardcoded locals: [n=0] 
               LHS <- RHS:
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ...
                  find_globals_ordered() ...
                     type = call
                     Convert to an anonymous function:
                     function () 
                     e()
                     <environment: 0x560f3798d678>
                     enter_global(type=‘function’, v=‘e’) ...
                        before:
                        [1] name  class
                        <0 rows> (or 0-length row.names)
                        hardcoded locals: [n=0] 
                        Add ‘global’ variable ‘e’
                        => A function, but not of interest
                        after:
                          name  class
                        1    e global
                     enter_global(type=‘function’, v=‘e’) ... done
                     variables (with duplicates):
                       name  class
                     1    e global
                     variables (no duplicates):
                       name  class
                     1    e global
                  find_globals_ordered() ... done
                  globals: [n=1] ‘e’
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ... done
               RHS globals: [n=1] ‘e’
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘e’
               Add ‘local’ variable ‘e’
               after:
                 name  class
               1   <- global
               2    e global
               3    e  local
            enter_local(type=‘<-’, v=‘e’) ... done
            enter_global(type=‘function’, v=‘e’) ...
               before:
                 name  class
               1   <- global
               2    e global
               3    e  local
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘e’
               => A function, but not of interest
               after:
                 name  class
               1   <- global
               2    e global
               3    e  local
               4    e global
            enter_global(type=‘function’, v=‘e’) ... done
            variables (with duplicates):
              name  class
            1   <- global
            2    e global
            3    e  local
            4    e global
            variables (no duplicates):
              name  class
            1   <- global
            2    e global
         find_globals_ordered() ... done
         Add ‘global’ variable ‘<-’, ‘e’
         Add ‘local’ variable ‘e’
         variables (with duplicates):
            name  class
         1     { global
         2    <- global
         3     b global
         4     x locals
         5    <- global
         6     b locals
         7    <- global
         8     c global
         9     y locals
         10   <- global
         11    d global
         12    z locals
         13   <- global
         14    a global
         15    + global
         16    a locals
         17   <- global
         18    e global
         19    e locals
         variables (no duplicates):
            name  class
         1     { global
         2    <- global
         3     b global
         4     x locals
         5     c global
         6     y locals
         7     d global
         8     z locals
         9     a global
         10    + global
         11    e global
      find_globals_ordered() ... done
      globals: [n=8] ‘{’, ‘<-’, ‘b’, ‘c’, ‘d’, ‘a’, ‘+’, ‘e’
   call_find_globals_with_dotdotdot(dotdotdot = ‘warning’) ... done
findGlobals(..., dotdotdot = 'warning', method = 'ordered', unlist = TRUE) ... done

> print(globals_i)
[1] "{"  "<-" "b"  "c"  "d"  "a"  "+"  "e" 

> assert_identical_sets(globals_i, c("{", "<-", "b", 
+     "c", "d", "+", "a", "e"))

> globals_t <- findGlobals(expr, method = "dfs")

> print(globals_t)
[1] "{"  "<-" "b"  "c"  "d"  "a"  "+"  "e" 

> if (getRversion() < "4.0.0") globals_t <- setdiff(globals_t, 
+     c("x", "y", "z"))

> assert_identical_sets(globals_t, c("{", "<-", "b", 
+     "c", "d", "+", "a", "e"))

> message(" ** findGlobals(a <- pkg::a):")
 ** findGlobals(a <- pkg::a):

> expr <- exprs$B

> print(expr)
a <- pkg::a

> globals_i <- findGlobals(expr)

> print(globals_i)
[1] "<-" "::"

> assert_identical_sets(globals_i, c("<-", "::"))

> globals_t <- findGlobals(expr, method = "dfs")

> print(globals_t)
[1] "<-" "::"

> if (getRversion() < "4.0.0") globals_t <- setdiff(globals_t, 
+     "a")

> assert_identical_sets(globals_t, c("<-", "::"))

> message(" ** findGlobals(a[1] <- 0) etc.:")
 ** findGlobals(a[1] <- 0) etc.:

> expr <- quote(a[1] <- 0)

> print(expr)
a[1] <- 0

> globals_i <- findGlobals(expr)

> print(globals_i)
[1] "<-"  "["   "a"   "[<-"

> false_globals <- "["

> assert_identical_sets(setdiff(globals_i, false_globals), 
+     c("<-", "a", "[<-"))

> globals_t <- findGlobals(expr, method = "dfs")

> print(globals_t)
[1] "[<-" "a"  

> assert_identical_sets(globals_t, c("a", "[<-"))

> expr <- quote({
+     a[1] = 0
+ })

> print(expr)
{
    a[1] = 0
}

> globals_i <- findGlobals(expr)

> print(globals_i)
[1] "{"   "="   "["   "a"   "[<-"

> false_globals <- "["

> assert_identical_sets(setdiff(globals_i, false_globals), 
+     c("{", "=", "a", "[<-"))

> globals_t <- findGlobals(expr, method = "dfs")

> print(globals_t)
[1] "{"   "[<-" "a"  

> assert_identical_sets(globals_t, c("{", "a", "[<-"))

> expr <- quote(a[b <- 1] <- 0)

> print(expr)
a[b <- 1] <- 0

> globals_i <- findGlobals(expr)

> print(globals_i)
[1] "<-"  "["   "a"   "[<-"

> false_globals <- "["

> assert_identical_sets(setdiff(globals_i, false_globals), 
+     c("<-", "a", "[<-"))

> globals_t <- findGlobals(expr, method = "dfs")

> print(globals_t)
[1] "[<-" "a"   "<-" 

> if (getRversion() < "4.0.0") globals_t <- setdiff(globals_t, 
+     "b")

> assert_identical_sets(globals_t, c("<-", "a", "[<-"))

> expr <- quote(a[b = 1] <- 0)

> print(expr)
a[b = 1] <- 0

> globals_i <- findGlobals(expr)

> print(globals_i)
[1] "<-"  "["   "a"   "[<-"

> false_globals <- "["

> assert_identical_sets(setdiff(globals_i, false_globals), 
+     c("<-", "a", "[<-"))

> globals_t <- findGlobals(expr, method = "dfs")

> print(globals_t)
[1] "[<-" "a"  

> if (getRversion() < "4.0.0") globals_t <- setdiff(globals_t, 
+     "b")

> assert_identical_sets(globals_t, c("a", "[<-"))

> expr <- quote({
+     a[b <- 1] = 0
+ })

> print(expr)
{
    a[b <- 1] = 0
}

> globals_i <- findGlobals(expr)

> print(globals_i)
[1] "{"   "="   "["   "a"   "<-"  "[<-"

> false_globals <- "["

> assert_identical_sets(setdiff(globals_i, false_globals), 
+     c("{", "=", "a", "<-", "[<-"))

> globals_t <- findGlobals(expr, method = "dfs")

> print(globals_t)
[1] "{"   "[<-" "a"   "<-" 

> if (getRversion() < "4.0.0") globals_t <- setdiff(globals_t, 
+     "b")

> assert_identical_sets(globals_t, c("{", "a", "<-", 
+     "[<-"))

> expr <- quote(a$b <- 0)

> print(expr)
a$b <- 0

> globals_i <- findGlobals(expr)

> print(globals_i)
[1] "<-"  "$"   "a"   "$<-"

> false_globals <- "$"

> assert_identical_sets(setdiff(globals_i, false_globals), 
+     c("<-", "a", "$<-"))

> globals_t <- findGlobals(expr, method = "dfs")

> print(globals_t)
[1] "$<-" "a"  

> assert_identical_sets(globals_t, c("a", "$<-"))

> expr <- quote({
+     a$b = 0
+ })

> print(expr)
{
    a$b = 0
}

> globals_i <- findGlobals(expr)

> print(globals_i)
[1] "{"   "="   "$"   "a"   "$<-"

> false_globals <- "$"

> assert_identical_sets(setdiff(globals_i, false_globals), 
+     c("{", "=", "a", "$<-"))

> globals_t <- findGlobals(expr, method = "dfs")

> print(globals_t)
[1] "{"   "$<-" "a"  

> assert_identical_sets(setdiff(globals_t, false_globals), 
+     c("{", "a", "$<-"))

> expr <- quote(names(a) <- "A")

> print(expr)
names(a) <- "A"

> globals_i <- findGlobals(expr)

> print(globals_i)
[1] "<-"      "names"   "a"       "names<-"

> assert_identical_sets(globals_i, c("<-", "a", "names", 
+     "names<-"))

> globals_t <- findGlobals(expr, method = "dfs")

> print(globals_t)
[1] "names<-" "a"      

> assert_identical_sets(globals_t, c("a", "names<-"))

> expr <- quote({
+     names(a) = "A"
+ })

> print(expr)
{
    names(a) = "A"
}

> globals_i <- findGlobals(expr)

> print(globals_i)
[1] "{"       "="       "names"   "a"       "names<-"

> assert_identical_sets(globals_i, c("{", "=", "a", 
+     "names", "names<-"))

> globals_t <- findGlobals(expr, method = "dfs")

> print(globals_t)
[1] "{"       "names<-" "a"      

> assert_identical_sets(globals_t, c("{", "a", "names<-"))

> expr <- quote(names(a)[1] <- "A")

> print(expr)
names(a)[1] <- "A"

> globals_i <- findGlobals(expr)

> print(globals_i)
[1] "<-"      "["       "names"   "a"       "[<-"     "names<-"

> false_globals <- c("[", "[<-")

> assert_identical_sets(setdiff(globals_i, false_globals), 
+     c("<-", "a", "names", "names<-"))

> globals_t <- findGlobals(expr, method = "dfs")

> print(globals_t)
[1] "[<-"     "names<-" "names"   "a"      

> assert_identical_sets(globals_t, c("names<-", "a", 
+     "[<-", "names"))

> expr <- quote({
+     names(a)[1] = "A"
+ })

> print(expr)
{
    names(a)[1] = "A"
}

> globals_i <- findGlobals(expr)

> print(globals_i)
[1] "{"       "="       "["       "names"   "a"       "[<-"     "names<-"

> false_globals <- c("[", "[<-")

> assert_identical_sets(setdiff(globals_i, false_globals), 
+     c("{", "=", "a", "names", "names<-"))

> globals_t <- findGlobals(expr, method = "dfs")

> print(globals_t)
[1] "{"       "[<-"     "names<-" "names"   "a"      

> assert_identical_sets(globals_t, c("{", "names<-", 
+     "a", "[<-", "names"))

> expr <- expression(x)

> print(expr)
expression(x)

> globals_i <- findGlobals(expr)

> print(globals_i)
[1] "x"

> assert_identical_sets(globals_i, c("x"))

> globals_t <- findGlobals(expr, method = "dfs")

> print(globals_t)
[1] "x"

> assert_identical_sets(globals_t, c("x"))

> expr <- expression(x + y)

> print(expr)
expression(x + y)

> globals_i <- findGlobals(expr)

> print(globals_i)
[1] "+" "x" "y"

> assert_identical_sets(globals_i, c("+", "x", "y"))

> globals_t <- findGlobals(expr, method = "dfs")

> print(globals_t)
[1] "+" "x" "y"

> assert_identical_sets(globals_t, c("+", "x", "y"))

> expr <- as.call(list(function(...) GLOBAL, quote(ARG)))

> print(expr)
(function (...) 
GLOBAL)(ARG)

> for (method in c("conservative", "liberal", "ordered", 
+     "dfs")) {
+     message(sprintf("method=%s", sQuote(method)))
+     globals_i <- findG .... [TRUNCATED] 
method=‘conservative’
[1] "GLOBAL" "ARG"   
method=‘liberal’
[1] "GLOBAL" "ARG"   
method=‘ordered’
[1] "GLOBAL" "ARG"   
method=‘dfs’
[1] "GLOBAL" "ARG"   

> expr <- quote({
+     a * b
+ })

> globals <- findGlobals(expr, trace = TRUE)
findGlobals(..., dotdotdot = 'warning', method = 'ordered', unlist = TRUE) ...
   call_find_globals_with_dotdotdot(dotdotdot = ‘warning’) ...
      find_globals_ordered() ...
         type = {
         length(expr) = 2
         find_globals_ordered() ...
            type = call
            Convert to an anonymous function:
            function () 
            a * b
            enter_global(type=‘function’, v=‘*’) ...
               before:
               [1] name  class
               <0 rows> (or 0-length row.names)
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘*’
               => A function, but not of interest
               after:
                 name  class
               1    * global
            enter_global(type=‘function’, v=‘*’) ... done
            enter_global(type=‘variable’, v=‘a’) ...
               before:
                 name  class
               1    * global
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘a’
               => Nothing to else to explore
               after:
                 name  class
               1    * global
               2    a global
            enter_global(type=‘variable’, v=‘a’) ... done
            enter_global(type=‘variable’, v=‘b’) ...
               before:
                 name  class
               1    * global
               2    a global
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘b’
               => Nothing to else to explore
               after:
                 name  class
               1    * global
               2    a global
               3    b global
            enter_global(type=‘variable’, v=‘b’) ... done
            variables (with duplicates):
              name  class
            1    * global
            2    a global
            3    b global
            variables (no duplicates):
              name  class
            1    * global
            2    a global
            3    b global
         find_globals_ordered() ... done
         Add ‘global’ variable ‘*’, ‘a’, ‘b’
         variables (with duplicates):
           name  class
         1    { global
         2    * global
         3    a global
         4    b global
         variables (no duplicates):
           name  class
         1    { global
         2    * global
         3    a global
         4    b global
      find_globals_ordered() ... done
      globals: [n=4] ‘{’, ‘*’, ‘a’, ‘b’
   call_find_globals_with_dotdotdot(dotdotdot = ‘warning’) ... done
findGlobals(..., dotdotdot = 'warning', method = 'ordered', unlist = TRUE) ... done

> print(globals)
[1] "{" "*" "a" "b"

> assert_identical_sets(globals, c("{", "*", "a", "b"))

> globals_t <- findGlobals(expr, method = "dfs")

> print(globals_t)
[1] "{" "*" "a" "b"

> assert_identical_sets(globals_t, c("{", "*", "a", 
+     "b"))

> expr <- asS3(methods::getClass("S4")@prototype, complete = FALSE)

> print(expr)
<object>

> globals <- findGlobals(expr, trace = TRUE)
findGlobals(..., dotdotdot = 'warning', method = 'ordered', unlist = TRUE) ...
   call_find_globals_with_dotdotdot(dotdotdot = ‘warning’) ...
      find_globals_ordered() ...
         type = call
         Convert to an anonymous function:
         function () 
         <object>
         variables (with duplicates):
         [1] name  class
         <0 rows> (or 0-length row.names)
         variables (no duplicates):
         [1] name  class
         <0 rows> (or 0-length row.names)
      find_globals_ordered() ... done
      globals: [n=0] 
   call_find_globals_with_dotdotdot(dotdotdot = ‘warning’) ... done
findGlobals(..., dotdotdot = 'warning', method = 'ordered', unlist = TRUE) ... done

> print(globals)
character(0)

> assert_identical_sets(globals, character(0))

> globals_t <- findGlobals(expr, method = "dfs")

> print(globals_t)
character(0)

> assert_identical_sets(globals, character(0))

> message("*** findGlobals() - multiple 'method's ...")
*** findGlobals() - multiple 'method's ...

> expr <- quote({
+     a + 1
+     a <- 1
+ })

> globals <- findGlobals(expr, method = c("ordered", 
+     "dfs"))

> print(globals)
[1] "{"  "+"  "a"  "<-"

> assert_identical_sets(globals, c("{", "+", "a", "<-"))

> expr <- quote({
+     for (x in NULL) NULL
+ })

> globals <- findGlobals(expr, method = c("ordered", 
+     "dfs"))

> print(globals)
[1] "{"   "for"

> assert_identical_sets(globals, c("{", "for"))

> expr <- quote({
+     for (x in NULL) x
+ })

> globals <- findGlobals(expr, method = c("ordered", 
+     "dfs"))

> print(globals)
[1] "{"   "for"

> assert_identical_sets(globals, c("{", "for"))

> message("*** findGlobals() - multiple 'method's ... DONE")
*** findGlobals() - multiple 'method's ... DONE

> message("*** findGlobals() ... DONE")
*** findGlobals() ... DONE
Sourcing 5 epilogue scripts ...
01/05 epilogue script ‘/usr/local/lib/R/site-library/globals/testme/_epilogue/002.undo-state.R’
02/05 epilogue script ‘/usr/local/lib/R/site-library/globals/testme/_epilogue/090.gc.R’
03/05 epilogue script ‘/usr/local/lib/R/site-library/globals/testme/_epilogue/099.session_info.R’
04/05 epilogue script ‘/usr/local/lib/R/site-library/globals/testme/_epilogue/995.detritus-connections.R’
05/05 epilogue script ‘/usr/local/lib/R/site-library/globals/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 5 epilogue scripts ... done
Test time: user.self=0.3s, sys.self=0.02s, elapsed=0.3s, user.child=0s, sys.child=0s
Test ‘findGlobals’ ... success
> 
