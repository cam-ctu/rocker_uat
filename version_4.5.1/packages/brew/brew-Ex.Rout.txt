
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "brew"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('brew')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("brew")
> ### * brew
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: brew
> ### Title: Report Brewing For Text and R Output
> ### Aliases: brew
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> ## A port of the Sweave test file.
> brew(system.file("brew-test-1.brew",package="brew"),"brew-test-1.tex",envir=new.env())
> ##clean up generated files
> unlink("brew-test-1-1.eps")
> unlink("brew-test-1-2.eps")
> unlink("brew-test-1.tex")
> 
> ## Everything you wanted to know about your R session.
> brew(system.file("brew-test-2.brew",package="brew"),"brew-test-2.html",envir=new.env())
Error in if (length(obj) == 0 || is.null(obj) || obj == "") obj <- "&nbsp;" : 
  missing value where TRUE/FALSE needed
> browseURL(paste('file://',file.path(getwd(),'brew-test-2.html'),sep=''))
> 
> ## clean up generated files
> unlink("brew-test-2.html")
> 
> ## Don't sully up environment, so use envir=new.env(). Nested brew calls will still work.
> brew(system.file("example1.brew",package="brew"),envir=new.env())
sh: 1: xdg-open: not found
Title: brew test
current time: 2025-06-17 07:35:36
value of foo: bar
 i is 1
from example2.brew, foo is: bar1
 i is 2
from example2.brew, foo is: bar12
 i is 3
from example2.brew, foo is: bar123
 i is 4
from example2.brew, foo is: bar1234
 i is 5
from example2.brew, foo is: bar12345
 i is 6
from example2.brew, foo is: bar123456
 i is 7
from example2.brew, foo is: bar1234567
 i is 8
from example2.brew, foo is: bar12345678
 i is 9
from example2.brew, foo is: bar123456789
 i is 10
from example2.brew, foo is: bar12345678910
> 
> ## Various ways to print R output 
> library(datasets)
> brew(system.file("catprint.brew",package="brew"),envir=new.env())
DATA FRAME OUTPUT (LISTS TOO)

Let's run this: <% data(iris) %>

Let's look at some R output:

If we say this: <% head(iris) %>
the output is this:

nothing right?

if we say this: <%= head(iris) %>
it's an error because cat() cannot handle lists.

But if we say this: <% print(head(iris)) %>
the output is this:
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa


VECTOR OUTPUT

We'll work with v: <% v <- head(iris)$Sepal.Length %>


If we say this: <%= v %>
the output is this:
5.1 4.9 4.7 4.6 5 5.4
because 'cat()' coerces v to a character vector

How about <%= v > 5 %>
TRUE FALSE FALSE FALSE FALSE TRUE
So cat() can deal with any vector 

And if we say this: <% print(v) %>
the output is:
[1] 5.1 4.9 4.7 4.6 5.0 5.4

> rm(iris)
> 
> ## The example from the Details section
> brew(system.file("featurefull.brew",package="brew"),envir=new.env())
You won't see this R output, but it will run. 
Now foo is bar and today is June 17, 2025.
How about generating a template from a template?
<% 
	foo <- 'fee fi fo fum' 
	brew <- 'haha'
%>
foo is still bar.
Contents of current directory:
 [1] "brew-Ex.pdf"       "brew-Ex.R"         "brew-Ex.Rout.fail"
 [4] "DESCRIPTION"       "empty_output.Rout" "inst"             
 [7] "man"               "MD5"               "NAMESPACE"        
[10] "R"                 "README.md"         "tests"            

> 
> ## Using the tplParser argument
> tParse <- function(text) paste('Got this: <',text,'>\n',sep='',collapse='')
> brew(system.file("featurefull.brew",package="brew"),envir=new.env(),tplParser=tParse)
You won't see this R output, but it will run. 
Now foo is bar and today is June 17, 2025.
How about generating a template from a template?
Got this: < 
>
Got this: <	foo <- 'fee fi fo fum' 
>
Got this: <	brew <- 'haha'
>
Got this: <>

foo is still bar.
Contents of current directory:
 [1] "brew-Ex.pdf"       "brew-Ex.R"         "brew-Ex.Rout.fail"
 [4] "DESCRIPTION"       "empty_output.Rout" "inst"             
 [7] "man"               "MD5"               "NAMESPACE"        
[10] "R"                 "README.md"         "tests"            

> rm(tParse)
> 
> 
> 
> cleanEx()
> nameEx("brewCache")
> ### * brewCache
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: brewCache
> ### Title: Caching Brew Templates
> ### Aliases: brewCache setBufLen brewCacheOn brewCacheOff
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> ## Turn on caching
> brewCacheOn()
> 
> ## Brew a template
> brew(system.file("featurefull.brew",package="brew"),envir=new.env())
You won't see this R output, but it will run. 
Now foo is bar and today is June 17, 2025.
How about generating a template from a template?
<% 
	foo <- 'fee fi fo fum' 
	brew <- 'haha'
%>
foo is still bar.
Contents of current directory:
 [1] "brew-Ex.pdf"       "brew-Ex.R"         "brew-Ex.Rout.fail"
 [4] "DESCRIPTION"       "empty_output.Rout" "inst"             
 [7] "man"               "MD5"               "NAMESPACE"        
[10] "R"                 "README.md"         "tests"            

> 
> ## Get the internal cache
> cache <- brewCache()
> 
> ## Inspect
> as.list(cache)
$`/usr/local/lib/R/site-library/brew/featurefull.brew`
$`/usr/local/lib/R/site-library/brew/featurefull.brew`$mtime
[1] "2025-06-16 07:44:03 UTC"

$`/usr/local/lib/R/site-library/brew/featurefull.brew`$env
<environment: 0x55792926b5c0>


> 
> ## Inspect first file cached in list
> as.list(cache)[[1]]
$mtime
[1] "2025-06-16 07:44:03 UTC"

$env
<environment: 0x55792926b5c0>

> 
> ## Inspect environment that contains text and parsed code
> as.list(as.list(cache)[[1]]$env)
$code
expression(.brew.cat(1, 1), foo <- "bar", .brew.cat(3, 4), cat(foo), 
    .brew.cat(6, 6), cat(format(Sys.time(), "%B %d, %Y")), .brew.cat(8, 
        8), .brew.cat(13, 20), cat(foo), .brew.cat(22, 23), print(dir()), 
    .brew.cat(25, 25))

$text
 [1] "You won't see this R output, but it will run. "    
 [2] " foo <- 'bar' "                                    
 [3] "\n"                                                
 [4] "Now foo is "                                       
 [5] "foo"                                               
 [6] " and today is "                                    
 [7] "format(Sys.time(),'%B %d, %Y')"                    
 [8] ".\n"                                               
 [9] "# Comment -- ignored -- useful in testing. \n"     
[10] "    Also notice the dash-percent-gt.\n"            
[11] "    It chops off the trailing newline. \n"         
[12] "    You can add it to any percent-gt. "            
[13] "How about generating a template from a template?\n"
[14] "<%"                                                
[15] " \n"                                               
[16] "\tfoo <- 'fee fi fo fum' \n"                       
[17] "\tbrew <- 'haha'\n"                                
[18] "%>"                                                
[19] "\n"                                                
[20] "foo is still "                                     
[21] "foo"                                               
[22] ".\n"                                               
[23] "Contents of current directory:\n"                  
[24] " print(dir()) "                                    
[25] "\n"                                                

> 
> ## Turn off brew caching
> brewCacheOff()
> rm(cache)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.147 0.012 0.163 0 0.001 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
