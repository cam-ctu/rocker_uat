
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "microbenchmark"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('microbenchmark')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("autoplot.microbenchmark")
> ### * autoplot.microbenchmark
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: autoplot.microbenchmark
> ### Title: Autoplot method for microbenchmark objects: Prettier graphs for
> ###   microbenchmark using ggplot2
> ### Aliases: autoplot.microbenchmark
> 
> ### ** Examples
> 
> if (requireNamespace("ggplot2", quietly = TRUE)) {
+     tm <- microbenchmark(rchisq(100, 0),
+                          rchisq(100, 1),
+                          rchisq(100, 2),
+                          rchisq(100, 3),
+                          rchisq(100, 5), times=1000L)
+     ggplot2::autoplot(tm)
+ 
+     # add a custom title
+     ggplot2::autoplot(tm) + ggplot2::ggtitle("my timings")
+ }
> 
> 
> 
> cleanEx()
> nameEx("microbenchmark")
> ### * microbenchmark
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: microbenchmark
> ### Title: Sub-millisecond accurate timing of expression evaluation.
> ### Aliases: microbenchmark
> 
> ### ** Examples
> 
> ## Measure the time it takes to dispatch a simple function call
> ## compared to simply evaluating the constant \code{NULL}
> f <- function() NULL
> res <- microbenchmark(NULL, f(), times=1000L)
> 
> ## Print results:
> print(res)
Unit: nanoseconds
 expr min  lq    mean median  uq    max neval cld
 NULL   0  10  10.011     10  10     40  1000   a
  f() 120 130 649.021    131 140 512256  1000   a
> 
> ## Plot results:
> boxplot(res)
> 
> ## Pretty plot:
> if (requireNamespace("ggplot2")) {
+   ggplot2::autoplot(res)
+ }
Warning in ggplot2::scale_y_log10(name = y_label) :
  log-10 transformation introduced infinite values.
Warning: Removed 17 rows containing non-finite outside the scale range
(`stat_ydensity()`).
> 
> ## Example check usage
> my_check <- function(values) {
+   all(sapply(values[-1], function(x) identical(values[[1]], x)))
+ }
> 
> f <- function(a, b)
+   2 + 2
> 
> a <- 2
> ## Check passes
> microbenchmark(2 + 2, 2 + a, f(2, a), f(2, 2), check=my_check)
Unit: nanoseconds
    expr min  lq   mean median  uq  max neval cld
   2 + 2  50  60  83.39   70.0  80 1082   100  a 
   2 + a  60  80  94.19   85.5  90  521   100  a 
 f(2, a) 260 281 411.60  291.0 301 8346   100   b
 f(2, 2) 270 281 304.87  291.0 301  681   100   b
> ## Not run: 
> ##D a <- 3
> ##D ## Check fails
> ##D microbenchmark(2 + 2, 2 + a, f(2, a), f(2, 2), check=my_check)
> ## End(Not run)
> ## Example setup usage
> set.seed(21)
> x <- rnorm(10)
> microbenchmark(x, rnorm(10), check=my_check, setup=set.seed(21))
Unit: nanoseconds
      expr  min   lq    mean median     uq   max neval cld
         x   20   30   47.93   40.5   51.0   581   100  a 
 rnorm(10) 1563 1623 1799.93 1643.0 1713.5 12944   100   b
> ## Will fail without setup
> ## Not run: 
> ##D microbenchmark(x, rnorm(10), check=my_check)
> ## End(Not run)
> ## using check
> a <- 2
> microbenchmark(2 + 2, 2 + a, sum(2, a), sum(2, 2), check='identical')
Unit: nanoseconds
      expr min  lq   mean median  uq  max neval cld
     2 + 2  50  60  78.86     70  80  651   100  a 
     2 + a  70  80  87.28     80  90  211   100  a 
 sum(2, a) 190 201 274.43    211 221 4839   100   b
 sum(2, 2) 180 200 219.13    210 211  451   100   b
> microbenchmark(2 + 2, 2 + a, sum(2, a), sum(2, 2), check='equal')
Unit: nanoseconds
      expr min  lq   mean median    uq  max neval cld
     2 + 2  60  70  79.97     70  80.0  271   100  a 
     2 + a  60  70 109.36     81  90.0 2204   100  a 
 sum(2, a) 190 200 230.17    211 225.5  542   100   b
 sum(2, 2) 180 200 244.62    210 211.0 2575   100   b
> attr(a, 'abc') <- 123
> microbenchmark(2 + 2, 2 + a, sum(2, a), sum(2, 2), check='equivalent')
Unit: nanoseconds
      expr min    lq   mean median  uq  max neval cld
     2 + 2  50  70.0  77.52     71  80  340   100  a 
     2 + a 150 171.0 215.85    181 191 2645   100   b
 sum(2, a) 190 201.0 265.34    220 231 3617   100   b
 sum(2, 2) 190 200.5 228.12    211 221  692   100   b
> ## check='equal' will fail due to difference in attribute
> ## Not run: 
> ##D microbenchmark(2 + 2, 2 + a, sum(2, a), sum(2, 2), check='equal')
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("print.microbenchmark")
> ### * print.microbenchmark
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.microbenchmark
> ### Title: Print 'microbenchmark' timings.
> ### Aliases: print.microbenchmark
> 
> ### ** Examples
> 
> a1 <- a2 <- a3 <- a4 <- numeric(0)
> 
> res <- microbenchmark(a1 <- c(a1, 1),
+                       a2 <- append(a2, 1),
+                       a3[length(a3) + 1] <- 1,
+                       a4[[length(a4) + 1]] <- 1,
+                       times=100L)
> print(res)
Unit: nanoseconds
                      expr  min     lq    mean median   uq   max neval cld
            a1 <- c(a1, 1)  230  401.0  479.02  490.5  541  1273   100 a  
       a2 <- append(a2, 1) 1092 1302.0 1454.00 1373.0 1478  5381   100  b 
   a3[length(a3) + 1] <- 1  682  756.5 1020.08  851.0  987 10740   100   c
 a4[[length(a4) + 1]] <- 1  661  722.0  978.30  792.0  947 13204   100   c
> ## Change default unit to relative runtime
> options(microbenchmark.unit="relative")
> print(res)
Unit: nanoseconds
                      expr  min     lq    mean median   uq   max neval cld
            a1 <- c(a1, 1)  230  401.0  479.02  490.5  541  1273   100 a  
       a2 <- append(a2, 1) 1092 1302.0 1454.00 1373.0 1478  5381   100  b 
   a3[length(a3) + 1] <- 1  682  756.5 1020.08  851.0  987 10740   100   c
 a4[[length(a4) + 1]] <- 1  661  722.0  978.30  792.0  947 13204   100   c
> ## Change default unit to evaluations per second
> options(microbenchmark.unit="eps")
> print(res)
Unit: nanoseconds
                      expr  min     lq    mean median   uq   max neval cld
            a1 <- c(a1, 1)  230  401.0  479.02  490.5  541  1273   100 a  
       a2 <- append(a2, 1) 1092 1302.0 1454.00 1373.0 1478  5381   100  b 
   a3[length(a3) + 1] <- 1  682  756.5 1020.08  851.0  987 10740   100   c
 a4[[length(a4) + 1]] <- 1  661  722.0  978.30  792.0  947 13204   100   c
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.98 0.103 4.083 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
