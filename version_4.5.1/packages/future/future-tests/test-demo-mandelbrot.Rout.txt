
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-demo-mandelbrot.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("demo-mandelbrot")
Test ‘demo-mandelbrot’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-demo-mandelbrot.R’

> library(future)
[08:07:31.960] Option 'future.startup.script': TRUE
[08:07:31.961] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:07:31.961] Future startup scripts found: <none>

> if (getRversion() < "4.1") options(future.debug = FALSE)

> message("*** Mandelbrot demo of the 'future' package ...")
*** Mandelbrot demo of the 'future' package ...

> options(future.demo.mandelbrot.nrow = 2)

> options(future.demo.mandelbrot.resolution = 50)

> options(future.demo.mandelbrot.delay = FALSE)

> for (cores in 1:availCores) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+     for (strategy in supp .... [TRUNCATED] 
Testing with 1 cores ...
- plan('sequential') ...
[08:07:31.968] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:31.968] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:07:31.969] | : all.equal() for FutureStrategyList ...
[08:07:31.969] | : . New stack:
[08:07:31.969] | : . List of 1
[08:07:31.969] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:31.969] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:31.969] | : .   ..- attr(*, "init")= logi TRUE
[08:07:31.969] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:31.969] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:31.969] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:31.969] | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:31.969] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:31.975] | : . Old stack:
[08:07:31.975] | : . List of 1
[08:07:31.975] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:31.975] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:31.975] | : .   ..- attr(*, "init")= logi TRUE
[08:07:31.975] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:31.975] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:31.975] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:31.975] | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:31.975] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:31.977] | : . Not identical
[08:07:31.977] | : . all.equal() for future ...
[08:07:31.978] | : . ' List of 2
[08:07:31.978] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:31.978] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:31.978] | : . '   ..- attr(*, "init")= logi TRUE
[08:07:31.978] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:31.978] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:31.978] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:31.978] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:31.978] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:31.978] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:31.978] | : . '   ..- attr(*, "init")= logi TRUE
[08:07:31.978] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:31.978] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:31.978] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:31.978] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:07:31.982] | : . all.equal() for future ... done
[08:07:31.982] | : all.equal() for FutureStrategyList ... done
[08:07:31.982] | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:31.982] | : List of future strategies:
[08:07:31.982] | : 1. sequential:
[08:07:31.982] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:31.982] | :    - tweaked: FALSE
[08:07:31.982] | :    - call: plan(sequential)
[08:07:31.983] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:07:31.983] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library(future)

> library(graphics)

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 1 2 3 4

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[08:07:32.013] future(..., label = NULL) ...
[08:07:32.014] | lazy: TRUE
[08:07:32.014] | stdout: TRUE
[08:07:32.014] | conditions: [n=1] ‘condition’
[08:07:32.014] | gc: FALSE
[08:07:32.014] | earlySignal: FALSE
[08:07:32.015] | getGlobalsAndPackages() ...
[08:07:32.015] | : Searching for globals ...
[08:07:32.047] | : . globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:32.047] | : Searching for globals ... done
[08:07:32.047] | : Resolving globals: FALSE
[08:07:32.048] | : Search for packages associated with the globals ...
[08:07:32.048] | : . Packages associated with globals: [2] ‘base’, ‘future’
[08:07:32.048] | : . Packages: [2] ‘base’, ‘future’
[08:07:32.048] | : Search for packages associated with the globals ... done
[08:07:32.049] | : Packages after dropping 'base': [1] ‘future’
[08:07:32.049] | : Packages after dropping non-attached packages: [1] ‘future’
[08:07:32.049] | : globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:32.049] | : packages: [1] ‘future’
[08:07:32.049] | getGlobalsAndPackages() ... done
[08:07:32.050] future(..., label = NULL) ... done
 2[08:07:32.053] future(..., label = NULL) ...
[08:07:32.053] | lazy: TRUE
[08:07:32.054] | stdout: TRUE
[08:07:32.054] | conditions: [n=1] ‘condition’
[08:07:32.054] | gc: FALSE
[08:07:32.054] | earlySignal: FALSE
[08:07:32.054] | getGlobalsAndPackages() ...
[08:07:32.054] | : Searching for globals ...
[08:07:32.077] | : . globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:32.078] | : Searching for globals ... done
[08:07:32.078] | : Resolving globals: FALSE
[08:07:32.078] | : Search for packages associated with the globals ...
[08:07:32.078] | : . Packages associated with globals: [2] ‘base’, ‘future’
[08:07:32.078] | : . Packages: [2] ‘base’, ‘future’
[08:07:32.079] | : Search for packages associated with the globals ... done
[08:07:32.079] | : Packages after dropping 'base': [1] ‘future’
[08:07:32.079] | : Packages after dropping non-attached packages: [1] ‘future’
[08:07:32.079] | : globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:32.079] | : packages: [1] ‘future’
[08:07:32.079] | getGlobalsAndPackages() ... done
[08:07:32.079] future(..., label = NULL) ... done
 3[08:07:32.080] future(..., label = NULL) ...
[08:07:32.080] | lazy: TRUE
[08:07:32.080] | stdout: TRUE
[08:07:32.080] | conditions: [n=1] ‘condition’
[08:07:32.080] | gc: FALSE
[08:07:32.080] | earlySignal: FALSE
[08:07:32.080] | getGlobalsAndPackages() ...
[08:07:32.080] | : Searching for globals ...
[08:07:32.104] | : . globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:32.104] | : Searching for globals ... done
[08:07:32.104] | : Resolving globals: FALSE
[08:07:32.104] | : Search for packages associated with the globals ...
[08:07:32.104] | : . Packages associated with globals: [2] ‘base’, ‘future’
[08:07:32.105] | : . Packages: [2] ‘base’, ‘future’
[08:07:32.105] | : Search for packages associated with the globals ... done
[08:07:32.105] | : Packages after dropping 'base': [1] ‘future’
[08:07:32.105] | : Packages after dropping non-attached packages: [1] ‘future’
[08:07:32.105] | : globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:32.105] | : packages: [1] ‘future’
[08:07:32.106] | getGlobalsAndPackages() ... done
[08:07:32.106] future(..., label = NULL) ... done
 4[08:07:32.106] future(..., label = NULL) ...
[08:07:32.106] | lazy: TRUE
[08:07:32.106] | stdout: TRUE
[08:07:32.106] | conditions: [n=1] ‘condition’
[08:07:32.106] | gc: FALSE
[08:07:32.106] | earlySignal: FALSE
[08:07:32.106] | getGlobalsAndPackages() ...
[08:07:32.107] | : Searching for globals ...
[08:07:32.128] | : . globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:32.129] | : Searching for globals ... done
[08:07:32.129] | : Resolving globals: FALSE
[08:07:32.129] | : Search for packages associated with the globals ...
[08:07:32.129] | : . Packages associated with globals: [2] ‘base’, ‘future’
[08:07:32.129] | : . Packages: [2] ‘base’, ‘future’
[08:07:32.129] | : Search for packages associated with the globals ... done
[08:07:32.130] | : Packages after dropping 'base': [1] ‘future’
[08:07:32.130] | : Packages after dropping non-attached packages: [1] ‘future’
[08:07:32.130] | : globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:32.130] | : packages: [1] ‘future’
[08:07:32.130] | getGlobalsAndPackages() ... done
[08:07:32.130] future(..., label = NULL) ... done

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[08:07:32.140] resolved() for Future (<unnamed-1>) ...
[08:07:32.140] | state: ‘created’
[08:07:32.140] | run: TRUE
[08:07:32.141] | run() ...
[08:07:32.141] | : run() for ‘Future’ (<unnamed-1>) ...
[08:07:32.141] | : . state: ‘created’
[08:07:32.141] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.141] | : . ' plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:32.141] | : . ' , function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.141] | : . ' ,  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.141] | : . ' ,  - attr(*, "init")= logi TRUE
[08:07:32.141] | : . ' ,  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.141] | : . ' ,   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.141] | : . ' ,  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.141] | : . ' ,  - attr(*, "call")= language plan(sequential)
[08:07:32.143] | : . ' , init: TRUE
[08:07:32.144] | : . ' , makeFutureBackend(<sequential>) ...
[08:07:32.144] | : . ' , ; Backend function: <‘NULL’>
[08:07:32.144] | : . ' , ; Evaluator tweak arguments: [n=0]
[08:07:32.144] | : . ' , ;  list()
[08:07:32.144] | : . ' , ; Evaluator formal arguments: [n=2]
[08:07:32.144] | : . ' , ;  list()
[08:07:32.145] | : . ' , ; Backend factory arguments: [n=2]
[08:07:32.145] | : . ' , ; Dotted pair list of 2
[08:07:32.145] | : . ' , ;  $ gc         : logi FALSE
[08:07:32.145] | : . ' , ;  $ earlySignal: logi FALSE
[08:07:32.146] | : . ' , ; Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:32.146] | : . ' , makeFutureBackend(<sequential>) ... done
[08:07:32.146] | : . ' plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:32.146] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.146] | : . Using SequentialFutureBackend ...
[08:07:32.146] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:07:32.147] | : . ' Launching futures ...
[08:07:32.147] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:32.147] | : . ' , ; getFutureData() ...
[08:07:32.147] | : . ' , ; ` getFutureCore() ...
[08:07:32.147] | : . ' , ; ` | Packages needed by the future expression (n = 1): ‘future’
[08:07:32.147] | : . ' , ; ` getFutureCore() ... done
[08:07:32.147] | : . ' , ; ` getFutureCapture() ...
[08:07:32.148] | : . ' , ; ` getFutureCapture() ... done
[08:07:32.148] | : . ' , ; ` getFutureContext() ...
[08:07:32.148] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.148] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:07:32.148] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.148] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:07:32.148] | : . ' , ; ` getFutureContext() ... done
[08:07:32.148] | : . ' , ; getFutureData() ... done
[08:07:32.151] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.151] | : . ' , ; ` Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:32.151] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.151] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.152] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:32.152] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:32.152] | : . ' , ; ` | : New stack:
[08:07:32.152] | : . ' , ; ` | : List of 1
[08:07:32.152] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.152] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.152] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:32.152] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.152] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.152] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.152] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.152] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.156] | : . ' , ; ` | : Old stack:
[08:07:32.156] | : . ' , ; ` | : List of 1
[08:07:32.156] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.156] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.156] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:32.156] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.156] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.156] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.156] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:32.156] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2a6e1b48> 
[08:07:32.156] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.156] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.156] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.159] | : . ' , ; ` | : Not identical
[08:07:32.159] | : . ' , ; ` | : all.equal() for future ...
[08:07:32.159] | : . ' , ; ` | : . List of 2
[08:07:32.159] | : . ' , ; ` | : .  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.159] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.159] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:07:32.159] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.159] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.159] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.159] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.159] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.159] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.159] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.159] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.159] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.159] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.159] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:32.159] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2a6e1b48> 
[08:07:32.159] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.159] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.164] | : . ' , ; ` | : all.equal() for future ... done
[08:07:32.164] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:32.164] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:32.164] | : . ' , ; ` | List of future strategies:
[08:07:32.164] | : . ' , ; ` | 1. sequential:
[08:07:32.164] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:32.164] | : . ' , ; ` |    - tweaked: FALSE
[08:07:32.164] | : . ' , ; ` |    - call: plan(sequential)
[08:07:32.165] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:32.165] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.165] | : . ' , ; assign_globals() ...
[08:07:32.165] | : . ' , ; List of 4
[08:07:32.165] | : . ' , ;  $ ii   : int 1
[08:07:32.165] | : . ' , ;  $ n    : int 4
[08:07:32.165] | : . ' , ;  $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[08:07:32.165] | : . ' , ;   ..- attr(*, "region")=List of 2
[08:07:32.165] | : . ' , ;   .. ..$ xrange: num [1:2] -2.25 -0.781
[08:07:32.165] | : . ' , ;   .. ..$ yrange: num [1:2] -1.5 -0.0306
[08:07:32.165] | : . ' , ;   ..- attr(*, "tile")= int [1:2] 1 1
[08:07:32.165] | : . ' , ;  $ delay:function (counts)  
[08:07:32.165] | : . ' , ;   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[08:07:32.165] | : . ' , ;   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x558b29edefb0> 
[08:07:32.165] | : . ' , ;  - attr(*, "where")=List of 4
[08:07:32.165] | : . ' , ;   ..$ ii   :<environment: 0x558b2a399fb0> 
[08:07:32.165] | : . ' , ;   ..$ n    :<environment: R_GlobalEnv> 
[08:07:32.165] | : . ' , ;   ..$ C    :<environment: 0x558b2a399fb0> 
[08:07:32.165] | : . ' , ;   ..$ delay:<environment: R_GlobalEnv> 
[08:07:32.165] | : . ' , ;  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:32.165] | : . ' , ;  - attr(*, "resolved")= logi FALSE
[08:07:32.165] | : . ' , ;  - attr(*, "total_size")= num NA
[08:07:32.165] | : . ' , ;  - attr(*, "already-done")= logi TRUE
[08:07:32.171] | : . ' , ; - copied ‘ii’ to environment
[08:07:32.171] | : . ' , ; - copied ‘n’ to environment
[08:07:32.171] | : . ' , ; - copied ‘C’ to environment
[08:07:32.172] | : . ' , ; - reassign environment for ‘delay’ [where=globalenv()]
[08:07:32.172] | : . ' , ; - copied ‘delay’ to environment
[08:07:32.172] | : . ' , ; assign_globals() ... done
[08:07:32.175] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.176] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.176] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:32.176] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:07:32.176] | : . ' , ; ` | : . New stack:
[08:07:32.176] | : . ' , ; ` | : . List of 1
[08:07:32.176] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.176] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.176] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.176] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.176] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.176] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.176] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:32.176] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2a6e1b48> 
[08:07:32.176] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.176] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.176] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.179] | : . ' , ; ` | : . Old stack:
[08:07:32.179] | : . ' , ; ` | : . List of 1
[08:07:32.179] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.179] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.179] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.179] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.179] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.179] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.179] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:32.179] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2a6e1b48> 
[08:07:32.179] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.179] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.179] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.182] | : . ' , ; ` | : . Identical
[08:07:32.182] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:07:32.182] | : . ' , ; ` | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:32.182] | : . ' , ; ` | : List of future strategies:
[08:07:32.182] | : . ' , ; ` | : 1. sequential:
[08:07:32.182] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:32.182] | : . ' , ; ` | :    - tweaked: FALSE
[08:07:32.182] | : . ' , ; ` | :    - call: plan(sequential)
[08:07:32.183] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:32.183] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.183] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.186] | : . ' , ; SequentialFuture started (and completed)
[08:07:32.186] | : . ' , ; signalConditions() ...
[08:07:32.186] | : . ' , ; ` include = ‘immediateCondition’
[08:07:32.186] | : . ' , ; ` exclude = 
[08:07:32.186] | : . ' , ; ` resignal = FALSE
[08:07:32.187] | : . ' , ; ` Number of conditions: 8
[08:07:32.187] | : . ' , ; `  int 8
[08:07:32.187] | : . ' , ; ` Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.187] | : . ' , ; ` Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.187] | : . ' , ; ` Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.187] | : . ' , ; ` Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.187] | : . ' , ; ` Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.188] | : . ' , ; ` Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.188] | : . ' , ; ` Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.188] | : . ' , ; ` Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.188] | : . ' , ; signalConditions() ... done
[08:07:32.188] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:32.188] | : . ' Launching futures ... done
[08:07:32.188] | : . ' Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:32.188] | : . Using SequentialFutureBackend ... done
[08:07:32.188] | : run() for ‘Future’ (<unnamed-1>) ... done
[08:07:32.189] | run() ... done
[08:07:32.189] | resolved() ...
[08:07:32.189] | : resolved() for SequentialFuture (<unnamed-1>) ...
[08:07:32.189] | : . state: ‘finished’
[08:07:32.189] | : . run: TRUE
[08:07:32.189] | : . result: ‘FutureResult’
[08:07:32.189] | : resolved() for SequentialFuture (<unnamed-1>) ... done
[08:07:32.189] | : resolved: TRUE
[08:07:32.189] | resolved() ... done
[08:07:32.189] resolved() for Future (<unnamed-1>) ... done
Plotting tile #1 of 4 ...
[08:07:32.190] value() for SequentialFuture (<unnamed-1>) ...
[08:07:32.190] | signalConditions() ...
[08:07:32.190] | : include = ‘immediateCondition’
[08:07:32.190] | : exclude = 
[08:07:32.190] | : resignal = FALSE
[08:07:32.190] | : Number of conditions: 8
[08:07:32.191] | :  int 8
[08:07:32.191] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.191] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.192] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.192] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.192] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.193] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.193] | : Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.193] | : Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.193] | signalConditions() ... done
[08:07:32.193] | relay stdout ...
[08:07:32.193] | relay stdout ... done
[08:07:32.193] | check for misuse ...
[08:07:32.193] | check for misuse ... done
[08:07:32.193] | relay conditions ...
[08:07:32.193] | : Future state: ‘finished’
[08:07:32.194] | : signalConditions() ...
[08:07:32.194] | : . include = ‘condition’
[08:07:32.194] | : . exclude = ‘immediateCondition’
[08:07:32.194] | : . resignal = TRUE
[08:07:32.194] | : . Number of conditions: 8
[08:07:32.194] | : .  int 8
[08:07:32.194] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.195] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.150] | : . ' , ; attachPackages() ...
[08:07:32.195] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.195] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.150] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:32.195] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.195] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.150] | : . ' , ; attachPackages() ... done
[08:07:32.195] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.195] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.150] | : . ' , ; attachPackages() ...
[08:07:32.195] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.195] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.150] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:32.196] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.196] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.150] | : . ' , ; attachPackages() ... done
[08:07:32.196] | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.196] | : . Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[08:07:32.196] | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.196] | : . Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:32.196] | : signalConditions() ... done
[08:07:32.196] | relay conditions ... done
[08:07:32.197] value() for SequentialFuture (<unnamed-1>) ... done
[08:07:32.198] resolved() for Future (<unnamed-2>) ...
[08:07:32.198] | state: ‘created’
[08:07:32.198] | run: TRUE
[08:07:32.198] | run() ...
[08:07:32.198] | : run() for ‘Future’ (<unnamed-2>) ...
[08:07:32.198] | : . state: ‘created’
[08:07:32.198] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.199] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.199] | : . Using SequentialFutureBackend ...
[08:07:32.199] | : . ' Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:07:32.199] | : . ' Launching futures ...
[08:07:32.199] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:32.199] | : . ' , ; getFutureData() ...
[08:07:32.199] | : . ' , ; ` getFutureCore() ...
[08:07:32.199] | : . ' , ; ` | Packages needed by the future expression (n = 1): ‘future’
[08:07:32.199] | : . ' , ; ` getFutureCore() ... done
[08:07:32.200] | : . ' , ; ` getFutureCapture() ...
[08:07:32.200] | : . ' , ; ` getFutureCapture() ... done
[08:07:32.200] | : . ' , ; ` getFutureContext() ...
[08:07:32.200] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.200] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:07:32.200] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.200] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:07:32.200] | : . ' , ; ` getFutureContext() ... done
[08:07:32.200] | : . ' , ; getFutureData() ... done
[08:07:32.202] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.202] | : . ' , ; ` Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:32.202] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.202] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.202] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:32.202] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:32.202] | : . ' , ; ` | : New stack:
[08:07:32.203] | : . ' , ; ` | : List of 1
[08:07:32.203] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.203] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.203] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:32.203] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.203] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.203] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.203] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.203] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.205] | : . ' , ; ` | : Old stack:
[08:07:32.205] | : . ' , ; ` | : List of 1
[08:07:32.205] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.205] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.205] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:32.205] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.205] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.205] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.205] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:32.205] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2a6e1b48> 
[08:07:32.205] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.205] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.205] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.208] | : . ' , ; ` | : Not identical
[08:07:32.208] | : . ' , ; ` | : all.equal() for future ...
[08:07:32.208] | : . ' , ; ` | : . List of 2
[08:07:32.208] | : . ' , ; ` | : .  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.208] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.208] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:07:32.208] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.208] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.208] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.208] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.208] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.208] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.208] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.208] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.208] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.208] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.208] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:32.208] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2a6e1b48> 
[08:07:32.208] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.208] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.214] | : . ' , ; ` | : all.equal() for future ... done
[08:07:32.214] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:32.214] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:32.214] | : . ' , ; ` | List of future strategies:
[08:07:32.214] | : . ' , ; ` | 1. sequential:
[08:07:32.214] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:32.214] | : . ' , ; ` |    - tweaked: FALSE
[08:07:32.214] | : . ' , ; ` |    - call: plan(sequential)
[08:07:32.215] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:32.215] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.215] | : . ' , ; assign_globals() ...
[08:07:32.215] | : . ' , ; List of 4
[08:07:32.215] | : . ' , ;  $ ii   : int 2
[08:07:32.215] | : . ' , ;  $ n    : int 4
[08:07:32.215] | : . ' , ;  $ C    : cplx [1:25, 1:25] -0.719-1.5i -0.719-1.44i -0.719-1.38i ...
[08:07:32.215] | : . ' , ;   ..- attr(*, "region")=List of 2
[08:07:32.215] | : . ' , ;   .. ..$ xrange: num [1:2] -0.719 0.75
[08:07:32.215] | : . ' , ;   .. ..$ yrange: num [1:2] -1.5 -0.0306
[08:07:32.215] | : . ' , ;   ..- attr(*, "tile")= int [1:2] 1 2
[08:07:32.215] | : . ' , ;  $ delay:function (counts)  
[08:07:32.215] | : . ' , ;   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[08:07:32.215] | : . ' , ;   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x558b29edefb0> 
[08:07:32.215] | : . ' , ;  - attr(*, "where")=List of 4
[08:07:32.215] | : . ' , ;   ..$ ii   :<environment: 0x558b281cac58> 
[08:07:32.215] | : . ' , ;   ..$ n    :<environment: R_GlobalEnv> 
[08:07:32.215] | : . ' , ;   ..$ C    :<environment: 0x558b281cac58> 
[08:07:32.215] | : . ' , ;   ..$ delay:<environment: R_GlobalEnv> 
[08:07:32.215] | : . ' , ;  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:32.215] | : . ' , ;  - attr(*, "resolved")= logi FALSE
[08:07:32.215] | : . ' , ;  - attr(*, "total_size")= num NA
[08:07:32.215] | : . ' , ;  - attr(*, "already-done")= logi TRUE
[08:07:32.221] | : . ' , ; - copied ‘ii’ to environment
[08:07:32.221] | : . ' , ; - copied ‘n’ to environment
[08:07:32.221] | : . ' , ; - copied ‘C’ to environment
[08:07:32.222] | : . ' , ; - reassign environment for ‘delay’ [where=globalenv()]
[08:07:32.222] | : . ' , ; - copied ‘delay’ to environment
[08:07:32.222] | : . ' , ; assign_globals() ... done
[08:07:32.224] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.225] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.225] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:32.225] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:07:32.225] | : . ' , ; ` | : . New stack:
[08:07:32.225] | : . ' , ; ` | : . List of 1
[08:07:32.225] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.225] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.225] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.225] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.225] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.225] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.225] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:32.225] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2a6e1b48> 
[08:07:32.225] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.225] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.225] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.229] | : . ' , ; ` | : . Old stack:
[08:07:32.229] | : . ' , ; ` | : . List of 1
[08:07:32.229] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.229] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.229] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.229] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.229] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.229] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.229] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:32.229] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2a6e1b48> 
[08:07:32.229] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.229] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.229] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.232] | : . ' , ; ` | : . Identical
[08:07:32.232] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:07:32.232] | : . ' , ; ` | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:32.233] | : . ' , ; ` | : List of future strategies:
[08:07:32.233] | : . ' , ; ` | : 1. sequential:
[08:07:32.233] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:32.233] | : . ' , ; ` | :    - tweaked: FALSE
[08:07:32.233] | : . ' , ; ` | :    - call: plan(sequential)
[08:07:32.233] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:32.233] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.233] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.233] | : . ' , ; SequentialFuture started (and completed)
[08:07:32.234] | : . ' , ; signalConditions() ...
[08:07:32.234] | : . ' , ; ` include = ‘immediateCondition’
[08:07:32.234] | : . ' , ; ` exclude = 
[08:07:32.234] | : . ' , ; ` resignal = FALSE
[08:07:32.234] | : . ' , ; ` Number of conditions: 8
[08:07:32.234] | : . ' , ; `  int 8
[08:07:32.234] | : . ' , ; ` Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.235] | : . ' , ; ` Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.235] | : . ' , ; ` Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.235] | : . ' , ; ` Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.235] | : . ' , ; ` Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.235] | : . ' , ; ` Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.235] | : . ' , ; ` Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.235] | : . ' , ; ` Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.235] | : . ' , ; signalConditions() ... done
[08:07:32.235] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:32.236] | : . ' Launching futures ... done
[08:07:32.236] | : . ' Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:32.236] | : . Using SequentialFutureBackend ... done
[08:07:32.236] | : run() for ‘Future’ (<unnamed-2>) ... done
[08:07:32.236] | run() ... done
[08:07:32.236] | resolved() ...
[08:07:32.236] | : resolved() for SequentialFuture (<unnamed-2>) ...
[08:07:32.236] | : . state: ‘finished’
[08:07:32.236] | : . run: TRUE
[08:07:32.236] | : . result: ‘FutureResult’
[08:07:32.236] | : resolved() for SequentialFuture (<unnamed-2>) ... done
[08:07:32.237] | : resolved: TRUE
[08:07:32.237] | resolved() ... done
[08:07:32.237] resolved() for Future (<unnamed-2>) ... done
Plotting tile #2 of 4 ...
[08:07:32.237] value() for SequentialFuture (<unnamed-2>) ...
[08:07:32.237] | signalConditions() ...
[08:07:32.237] | : include = ‘immediateCondition’
[08:07:32.237] | : exclude = 
[08:07:32.237] | : resignal = FALSE
[08:07:32.237] | : Number of conditions: 8
[08:07:32.237] | :  int 8
[08:07:32.238] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.238] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.238] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.238] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.238] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.238] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.238] | : Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.239] | : Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.239] | signalConditions() ... done
[08:07:32.239] | relay stdout ...
[08:07:32.239] | relay stdout ... done
[08:07:32.239] | check for misuse ...
[08:07:32.239] | check for misuse ... done
[08:07:32.239] | relay conditions ...
[08:07:32.239] | : Future state: ‘finished’
[08:07:32.239] | : signalConditions() ...
[08:07:32.239] | : . include = ‘condition’
[08:07:32.240] | : . exclude = ‘immediateCondition’
[08:07:32.240] | : . resignal = TRUE
[08:07:32.240] | : . Number of conditions: 8
[08:07:32.240] | : .  int 8
[08:07:32.240] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.240] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.201] | : . ' , ; attachPackages() ...
[08:07:32.240] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.241] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.201] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:32.241] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.241] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.201] | : . ' , ; attachPackages() ... done
[08:07:32.241] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.241] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.201] | : . ' , ; attachPackages() ...
[08:07:32.241] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.241] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.201] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:32.241] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.241] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.201] | : . ' , ; attachPackages() ... done
[08:07:32.242] | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.242] | : . Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[08:07:32.242] | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.242] | : . Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:32.242] | : signalConditions() ... done
[08:07:32.242] | relay conditions ... done
[08:07:32.242] value() for SequentialFuture (<unnamed-2>) ... done
[08:07:32.243] resolved() for Future (<unnamed-3>) ...
[08:07:32.243] | state: ‘created’
[08:07:32.243] | run: TRUE
[08:07:32.243] | run() ...
[08:07:32.243] | : run() for ‘Future’ (<unnamed-3>) ...
[08:07:32.243] | : . state: ‘created’
[08:07:32.243] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.244] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.244] | : . Using SequentialFutureBackend ...
[08:07:32.244] | : . ' Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:07:32.244] | : . ' Launching futures ...
[08:07:32.244] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:32.244] | : . ' , ; getFutureData() ...
[08:07:32.244] | : . ' , ; ` getFutureCore() ...
[08:07:32.245] | : . ' , ; ` | Packages needed by the future expression (n = 1): ‘future’
[08:07:32.245] | : . ' , ; ` getFutureCore() ... done
[08:07:32.245] | : . ' , ; ` getFutureCapture() ...
[08:07:32.246] | : . ' , ; ` getFutureCapture() ... done
[08:07:32.246] | : . ' , ; ` getFutureContext() ...
[08:07:32.246] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.246] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:07:32.246] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.246] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:07:32.246] | : . ' , ; ` getFutureContext() ... done
[08:07:32.246] | : . ' , ; getFutureData() ... done
[08:07:32.248] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.248] | : . ' , ; ` Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:32.248] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.248] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.248] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:32.248] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:32.248] | : . ' , ; ` | : New stack:
[08:07:32.248] | : . ' , ; ` | : List of 1
[08:07:32.248] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.248] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.248] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:32.248] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.248] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.248] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.248] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.248] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.251] | : . ' , ; ` | : Old stack:
[08:07:32.251] | : . ' , ; ` | : List of 1
[08:07:32.251] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.251] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.251] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:32.251] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.251] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.251] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.251] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:32.251] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2a6e1b48> 
[08:07:32.251] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.251] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.251] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.254] | : . ' , ; ` | : Not identical
[08:07:32.254] | : . ' , ; ` | : all.equal() for future ...
[08:07:32.254] | : . ' , ; ` | : . List of 2
[08:07:32.254] | : . ' , ; ` | : .  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.254] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.254] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:07:32.254] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.254] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.254] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.254] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.254] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.254] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.254] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.254] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.254] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.254] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.254] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:32.254] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2a6e1b48> 
[08:07:32.254] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.254] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.259] | : . ' , ; ` | : all.equal() for future ... done
[08:07:32.259] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:32.259] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:32.259] | : . ' , ; ` | List of future strategies:
[08:07:32.259] | : . ' , ; ` | 1. sequential:
[08:07:32.259] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:32.259] | : . ' , ; ` |    - tweaked: FALSE
[08:07:32.259] | : . ' , ; ` |    - call: plan(sequential)
[08:07:32.260] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:32.260] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.260] | : . ' , ; assign_globals() ...
[08:07:32.260] | : . ' , ; List of 4
[08:07:32.260] | : . ' , ;  $ ii   : int 3
[08:07:32.260] | : . ' , ;  $ n    : int 4
[08:07:32.260] | : . ' , ;  $ C    : cplx [1:25, 1:25] -2.25+0.0306i -2.25+0.0918i -2.25+0.1531i ...
[08:07:32.260] | : . ' , ;   ..- attr(*, "region")=List of 2
[08:07:32.260] | : . ' , ;   .. ..$ xrange: num [1:2] -2.25 -0.781
[08:07:32.260] | : . ' , ;   .. ..$ yrange: num [1:2] 0.0306 1.5
[08:07:32.260] | : . ' , ;   ..- attr(*, "tile")= int [1:2] 2 1
[08:07:32.260] | : . ' , ;  $ delay:function (counts)  
[08:07:32.260] | : . ' , ;   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[08:07:32.260] | : . ' , ;   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x558b29edefb0> 
[08:07:32.260] | : . ' , ;  - attr(*, "where")=List of 4
[08:07:32.260] | : . ' , ;   ..$ ii   :<environment: 0x558b2aa221f0> 
[08:07:32.260] | : . ' , ;   ..$ n    :<environment: R_GlobalEnv> 
[08:07:32.260] | : . ' , ;   ..$ C    :<environment: 0x558b2aa221f0> 
[08:07:32.260] | : . ' , ;   ..$ delay:<environment: R_GlobalEnv> 
[08:07:32.260] | : . ' , ;  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:32.260] | : . ' , ;  - attr(*, "resolved")= logi FALSE
[08:07:32.260] | : . ' , ;  - attr(*, "total_size")= num NA
[08:07:32.260] | : . ' , ;  - attr(*, "already-done")= logi TRUE
[08:07:32.267] | : . ' , ; - copied ‘ii’ to environment
[08:07:32.267] | : . ' , ; - copied ‘n’ to environment
[08:07:32.267] | : . ' , ; - copied ‘C’ to environment
[08:07:32.267] | : . ' , ; - reassign environment for ‘delay’ [where=globalenv()]
[08:07:32.267] | : . ' , ; - copied ‘delay’ to environment
[08:07:32.267] | : . ' , ; assign_globals() ... done
[08:07:32.270] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.270] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.270] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:32.270] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:07:32.270] | : . ' , ; ` | : . New stack:
[08:07:32.270] | : . ' , ; ` | : . List of 1
[08:07:32.270] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.270] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.270] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.270] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.270] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.270] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.270] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:32.270] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2a6e1b48> 
[08:07:32.270] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.270] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.270] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.273] | : . ' , ; ` | : . Old stack:
[08:07:32.273] | : . ' , ; ` | : . List of 1
[08:07:32.273] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.273] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.273] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.273] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.273] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.273] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.273] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:32.273] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2a6e1b48> 
[08:07:32.273] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.273] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.273] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.276] | : . ' , ; ` | : . Identical
[08:07:32.276] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:07:32.277] | : . ' , ; ` | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:32.277] | : . ' , ; ` | : List of future strategies:
[08:07:32.277] | : . ' , ; ` | : 1. sequential:
[08:07:32.277] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:32.277] | : . ' , ; ` | :    - tweaked: FALSE
[08:07:32.277] | : . ' , ; ` | :    - call: plan(sequential)
[08:07:32.277] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:32.277] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.278] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.278] | : . ' , ; SequentialFuture started (and completed)
[08:07:32.278] | : . ' , ; signalConditions() ...
[08:07:32.279] | : . ' , ; ` include = ‘immediateCondition’
[08:07:32.279] | : . ' , ; ` exclude = 
[08:07:32.279] | : . ' , ; ` resignal = FALSE
[08:07:32.279] | : . ' , ; ` Number of conditions: 8
[08:07:32.279] | : . ' , ; `  int 8
[08:07:32.279] | : . ' , ; ` Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.279] | : . ' , ; ` Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.280] | : . ' , ; ` Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.280] | : . ' , ; ` Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.280] | : . ' , ; ` Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.280] | : . ' , ; ` Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.280] | : . ' , ; ` Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.280] | : . ' , ; ` Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.280] | : . ' , ; signalConditions() ... done
[08:07:32.280] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:32.280] | : . ' Launching futures ... done
[08:07:32.280] | : . ' Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:32.281] | : . Using SequentialFutureBackend ... done
[08:07:32.281] | : run() for ‘Future’ (<unnamed-3>) ... done
[08:07:32.281] | run() ... done
[08:07:32.281] | resolved() ...
[08:07:32.281] | : resolved() for SequentialFuture (<unnamed-3>) ...
[08:07:32.281] | : . state: ‘finished’
[08:07:32.281] | : . run: TRUE
[08:07:32.281] | : . result: ‘FutureResult’
[08:07:32.281] | : resolved() for SequentialFuture (<unnamed-3>) ... done
[08:07:32.281] | : resolved: TRUE
[08:07:32.281] | resolved() ... done
[08:07:32.282] resolved() for Future (<unnamed-3>) ... done
Plotting tile #3 of 4 ...
[08:07:32.282] value() for SequentialFuture (<unnamed-3>) ...
[08:07:32.282] | signalConditions() ...
[08:07:32.282] | : include = ‘immediateCondition’
[08:07:32.282] | : exclude = 
[08:07:32.282] | : resignal = FALSE
[08:07:32.282] | : Number of conditions: 8
[08:07:32.282] | :  int 8
[08:07:32.283] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.283] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.283] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.283] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.283] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.283] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.283] | : Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.283] | : Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.283] | signalConditions() ... done
[08:07:32.284] | relay stdout ...
[08:07:32.284] | relay stdout ... done
[08:07:32.284] | check for misuse ...
[08:07:32.284] | check for misuse ... done
[08:07:32.284] | relay conditions ...
[08:07:32.284] | : Future state: ‘finished’
[08:07:32.284] | : signalConditions() ...
[08:07:32.284] | : . include = ‘condition’
[08:07:32.284] | : . exclude = ‘immediateCondition’
[08:07:32.284] | : . resignal = TRUE
[08:07:32.285] | : . Number of conditions: 8
[08:07:32.285] | : .  int 8
[08:07:32.285] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.285] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.246] | : . ' , ; attachPackages() ...
[08:07:32.285] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.285] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.247] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:32.285] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.286] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.247] | : . ' , ; attachPackages() ... done
[08:07:32.286] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.286] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.247] | : . ' , ; attachPackages() ...
[08:07:32.286] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.286] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.247] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:32.286] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.286] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.247] | : . ' , ; attachPackages() ... done
[08:07:32.286] | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.286] | : . Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[08:07:32.287] | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.287] | : . Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:32.287] | : signalConditions() ... done
[08:07:32.287] | relay conditions ... done
[08:07:32.287] value() for SequentialFuture (<unnamed-3>) ... done
[08:07:32.288] resolved() for Future (<unnamed-4>) ...
[08:07:32.288] | state: ‘created’
[08:07:32.288] | run: TRUE
[08:07:32.288] | run() ...
[08:07:32.288] | : run() for ‘Future’ (<unnamed-4>) ...
[08:07:32.288] | : . state: ‘created’
[08:07:32.288] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.288] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.288] | : . Using SequentialFutureBackend ...
[08:07:32.289] | : . ' Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:07:32.289] | : . ' Launching futures ...
[08:07:32.289] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:32.289] | : . ' , ; getFutureData() ...
[08:07:32.289] | : . ' , ; ` getFutureCore() ...
[08:07:32.289] | : . ' , ; ` | Packages needed by the future expression (n = 1): ‘future’
[08:07:32.289] | : . ' , ; ` getFutureCore() ... done
[08:07:32.289] | : . ' , ; ` getFutureCapture() ...
[08:07:32.289] | : . ' , ; ` getFutureCapture() ... done
[08:07:32.289] | : . ' , ; ` getFutureContext() ...
[08:07:32.290] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.290] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:07:32.290] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.290] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:07:32.290] | : . ' , ; ` getFutureContext() ... done
[08:07:32.290] | : . ' , ; getFutureData() ... done
[08:07:32.291] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.292] | : . ' , ; ` Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:32.292] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.292] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.292] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:32.292] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:32.292] | : . ' , ; ` | : New stack:
[08:07:32.292] | : . ' , ; ` | : List of 1
[08:07:32.292] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.292] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.292] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:32.292] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.292] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.292] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.292] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.292] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.296] | : . ' , ; ` | : Old stack:
[08:07:32.296] | : . ' , ; ` | : List of 1
[08:07:32.296] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.296] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.296] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:32.296] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.296] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.296] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.296] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:32.296] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2a6e1b48> 
[08:07:32.296] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.296] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.296] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.299] | : . ' , ; ` | : Not identical
[08:07:32.299] | : . ' , ; ` | : all.equal() for future ...
[08:07:32.299] | : . ' , ; ` | : . List of 2
[08:07:32.299] | : . ' , ; ` | : .  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.299] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.299] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:07:32.299] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.299] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.299] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.299] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.299] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.299] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.299] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.299] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.299] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.299] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.299] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:32.299] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2a6e1b48> 
[08:07:32.299] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.299] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.304] | : . ' , ; ` | : all.equal() for future ... done
[08:07:32.304] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:32.304] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:32.304] | : . ' , ; ` | List of future strategies:
[08:07:32.304] | : . ' , ; ` | 1. sequential:
[08:07:32.304] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:32.304] | : . ' , ; ` |    - tweaked: FALSE
[08:07:32.304] | : . ' , ; ` |    - call: plan(sequential)
[08:07:32.305] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:32.305] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.305] | : . ' , ; assign_globals() ...
[08:07:32.305] | : . ' , ; List of 4
[08:07:32.305] | : . ' , ;  $ ii   : int 4
[08:07:32.305] | : . ' , ;  $ n    : int 4
[08:07:32.305] | : . ' , ;  $ C    : cplx [1:25, 1:25] -0.719+0.0306i -0.719+0.0918i -0.719+0.1531i ...
[08:07:32.305] | : . ' , ;   ..- attr(*, "region")=List of 2
[08:07:32.305] | : . ' , ;   .. ..$ xrange: num [1:2] -0.719 0.75
[08:07:32.305] | : . ' , ;   .. ..$ yrange: num [1:2] 0.0306 1.5
[08:07:32.305] | : . ' , ;   ..- attr(*, "tile")= int [1:2] 2 2
[08:07:32.305] | : . ' , ;  $ delay:function (counts)  
[08:07:32.305] | : . ' , ;   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[08:07:32.305] | : . ' , ;   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x558b29edefb0> 
[08:07:32.305] | : . ' , ;  - attr(*, "where")=List of 4
[08:07:32.305] | : . ' , ;   ..$ ii   :<environment: 0x558b29db6098> 
[08:07:32.305] | : . ' , ;   ..$ n    :<environment: R_GlobalEnv> 
[08:07:32.305] | : . ' , ;   ..$ C    :<environment: 0x558b29db6098> 
[08:07:32.305] | : . ' , ;   ..$ delay:<environment: R_GlobalEnv> 
[08:07:32.305] | : . ' , ;  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:32.305] | : . ' , ;  - attr(*, "resolved")= logi FALSE
[08:07:32.305] | : . ' , ;  - attr(*, "total_size")= num NA
[08:07:32.305] | : . ' , ;  - attr(*, "already-done")= logi TRUE
[08:07:32.312] | : . ' , ; - copied ‘ii’ to environment
[08:07:32.312] | : . ' , ; - copied ‘n’ to environment
[08:07:32.312] | : . ' , ; - copied ‘C’ to environment
[08:07:32.312] | : . ' , ; - reassign environment for ‘delay’ [where=globalenv()]
[08:07:32.312] | : . ' , ; - copied ‘delay’ to environment
[08:07:32.313] | : . ' , ; assign_globals() ... done
[08:07:32.315] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.315] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.316] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:32.316] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:07:32.316] | : . ' , ; ` | : . New stack:
[08:07:32.316] | : . ' , ; ` | : . List of 1
[08:07:32.316] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.316] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.316] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.316] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.316] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.316] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.316] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:32.316] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2a6e1b48> 
[08:07:32.316] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.316] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.316] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.319] | : . ' , ; ` | : . Old stack:
[08:07:32.319] | : . ' , ; ` | : . List of 1
[08:07:32.319] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.319] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.319] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.319] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.319] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.319] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.319] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:32.319] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2a6e1b48> 
[08:07:32.319] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.319] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.319] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.322] | : . ' , ; ` | : . Identical
[08:07:32.322] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:07:32.322] | : . ' , ; ` | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:32.322] | : . ' , ; ` | : List of future strategies:
[08:07:32.322] | : . ' , ; ` | : 1. sequential:
[08:07:32.322] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:32.322] | : . ' , ; ` | :    - tweaked: FALSE
[08:07:32.322] | : . ' , ; ` | :    - call: plan(sequential)
[08:07:32.323] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:32.323] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.323] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.323] | : . ' , ; SequentialFuture started (and completed)
[08:07:32.323] | : . ' , ; signalConditions() ...
[08:07:32.323] | : . ' , ; ` include = ‘immediateCondition’
[08:07:32.324] | : . ' , ; ` exclude = 
[08:07:32.324] | : . ' , ; ` resignal = FALSE
[08:07:32.324] | : . ' , ; ` Number of conditions: 8
[08:07:32.324] | : . ' , ; `  int 8
[08:07:32.324] | : . ' , ; ` Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.324] | : . ' , ; ` Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.324] | : . ' , ; ` Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.325] | : . ' , ; ` Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.325] | : . ' , ; ` Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.325] | : . ' , ; ` Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.325] | : . ' , ; ` Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.325] | : . ' , ; ` Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.325] | : . ' , ; signalConditions() ... done
[08:07:32.325] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:32.325] | : . ' Launching futures ... done
[08:07:32.325] | : . ' Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:32.325] | : . Using SequentialFutureBackend ... done
[08:07:32.326] | : run() for ‘Future’ (<unnamed-4>) ... done
[08:07:32.326] | run() ... done
[08:07:32.326] | resolved() ...
[08:07:32.326] | : resolved() for SequentialFuture (<unnamed-4>) ...
[08:07:32.326] | : . state: ‘finished’
[08:07:32.326] | : . run: TRUE
[08:07:32.326] | : . result: ‘FutureResult’
[08:07:32.326] | : resolved() for SequentialFuture (<unnamed-4>) ... done
[08:07:32.326] | : resolved: TRUE
[08:07:32.326] | resolved() ... done
[08:07:32.327] resolved() for Future (<unnamed-4>) ... done
Plotting tile #4 of 4 ...
[08:07:32.327] value() for SequentialFuture (<unnamed-4>) ...
[08:07:32.327] | signalConditions() ...
[08:07:32.327] | : include = ‘immediateCondition’
[08:07:32.327] | : exclude = 
[08:07:32.327] | : resignal = FALSE
[08:07:32.327] | : Number of conditions: 8
[08:07:32.327] | :  int 8
[08:07:32.328] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.354] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.354] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.355] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.355] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.355] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.355] | : Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.355] | : Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.355] | signalConditions() ... done
[08:07:32.355] | relay stdout ...
[08:07:32.356] | relay stdout ... done
[08:07:32.356] | check for misuse ...
[08:07:32.356] | check for misuse ... done
[08:07:32.356] | relay conditions ...
[08:07:32.356] | : Future state: ‘finished’
[08:07:32.356] | : signalConditions() ...
[08:07:32.356] | : . include = ‘condition’
[08:07:32.356] | : . exclude = ‘immediateCondition’
[08:07:32.356] | : . resignal = TRUE
[08:07:32.357] | : . Number of conditions: 8
[08:07:32.357] | : .  int 8
[08:07:32.357] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.357] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.290] | : . ' , ; attachPackages() ...
[08:07:32.357] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.358] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.291] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:32.358] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.358] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.291] | : . ' , ; attachPackages() ... done
[08:07:32.358] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.358] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.291] | : . ' , ; attachPackages() ...
[08:07:32.358] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.358] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.291] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:32.358] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.358] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.291] | : . ' , ; attachPackages() ... done
[08:07:32.359] | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.359] | : . Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[08:07:32.359] | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.359] | : . Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:32.359] | : signalConditions() ... done
[08:07:32.359] | relay conditions ... done
[08:07:32.359] value() for SequentialFuture (<unnamed-4>) ... done

> close.screen()
[1] 1 2 3 4

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('sequential') ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
- plan('multicore') ...
[08:07:32.361] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.361] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:07:32.361] | : all.equal() for FutureStrategyList ...
[08:07:32.361] | : . New stack:
[08:07:32.361] | : . List of 1
[08:07:32.361] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.361] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.361] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.361] | : .   ..- attr(*, "init")= logi TRUE
[08:07:32.361] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.361] | : .     ...)  
[08:07:32.361] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.361] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.361] | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:32.361] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.364] | : . Old stack:
[08:07:32.364] | : . List of 1
[08:07:32.364] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.364] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.364] | : .   ..- attr(*, "init")= chr "done"
[08:07:32.364] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.364] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.364] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.364] | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:32.364] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2a6e1b48> 
[08:07:32.364] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.364] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.364] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.367] | : . Not identical
[08:07:32.367] | : . all.equal() for future ...
[08:07:32.368] | : . ' List of 2
[08:07:32.368] | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.368] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.368] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.368] | : . '   ..- attr(*, "init")= logi TRUE
[08:07:32.368] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.368] | : . '     ...)  
[08:07:32.368] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.368] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.368] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:32.368] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.368] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.368] | : . '   ..- attr(*, "init")= chr "done"
[08:07:32.368] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.368] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.368] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.368] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:07:32.368] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2a6e1b48> 
[08:07:32.368] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.368] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.373] | : . ' Formals differ
[08:07:32.373] | : . all.equal() for future ... done
[08:07:32.373] | : . Future strategies differ at level 1
[08:07:32.373] | : all.equal() for FutureStrategyList ... done
[08:07:32.373] | : plan(): Setting new future backend stack:
[08:07:32.374] | : List of future strategies:
[08:07:32.374] | : 1. multicore:
[08:07:32.374] | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:32.374] | :    - tweaked: FALSE
[08:07:32.374] | :    - call: plan(strategy)
[08:07:32.374] | : List of 1
[08:07:32.374] | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.374] | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.374] | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.374] | :   ..- attr(*, "init")= logi TRUE
[08:07:32.374] | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.374] | :     ...)  
[08:07:32.374] | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.374] | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.374] | :   ..- attr(*, "call")= language plan(strategy)
[08:07:32.374] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.377] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:07:32.377] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.377] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:32.377] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.377] | : . Legacy shutdown of cluster workers ...
[08:07:32.378] | : . ' Stopping existing cluster ...
[08:07:32.378] | : . ' , No pre-existing cluster. Skipping
[08:07:32.378] | : . ' Stopping existing cluster ... done
[08:07:32.378] | : . Legacy shutdown of cluster workers ... done
[08:07:32.378] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:07:32.378] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:07:32.378] | : . function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.378] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.378] | : .  - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.378] | : .  - attr(*, "init")= logi TRUE
[08:07:32.378] | : .  - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.378] | : .     ...)  
[08:07:32.378] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.378] | : .  - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.378] | : .  - attr(*, "call")= language plan(strategy)
[08:07:32.380] | : . init: TRUE
[08:07:32.380] | : . makeFutureBackend(<multicore>) ...
[08:07:32.380] | : . ' Backend function: <‘NULL’>
[08:07:32.381] | : . ' Evaluator tweak arguments: [n=0]
[08:07:32.381] | : . '  list()
[08:07:32.381] | : . ' Evaluator formal arguments: [n=3]
[08:07:32.381] | : . '  list()
[08:07:32.381] | : . ' Backend factory arguments: [n=3]
[08:07:32.381] | : . ' Dotted pair list of 3
[08:07:32.381] | : . '  $ workers    : language availableCores(constraints = "multicore")
[08:07:32.381] | : . '  $ gc         : logi FALSE
[08:07:32.381] | : . '  $ earlySignal: logi FALSE
[08:07:32.384] | : . ' Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:32.384] | : . makeFutureBackend(<multicore>) ... done
[08:07:32.385] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:07:32.385] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.385] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.385] | : plan(): nbrOfWorkers() = 2
[08:07:32.385] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:07:32.385] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library(future)

> library(graphics)

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 5 6 7 8

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[08:07:32.389] future(..., label = NULL) ...
[08:07:32.389] | lazy: TRUE
[08:07:32.389] | stdout: TRUE
[08:07:32.389] | conditions: [n=1] ‘condition’
[08:07:32.389] | gc: FALSE
[08:07:32.389] | earlySignal: FALSE
[08:07:32.389] | getGlobalsAndPackages() ...
[08:07:32.389] | : Searching for globals ...
[08:07:32.413] | : . globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:32.413] | : Searching for globals ... done
[08:07:32.413] | : Resolving globals: FALSE
[08:07:32.413] | : Search for packages associated with the globals ...
[08:07:32.413] | : . Packages associated with globals: [2] ‘base’, ‘future’
[08:07:32.414] | : . Packages: [2] ‘base’, ‘future’
[08:07:32.414] | : Search for packages associated with the globals ... done
[08:07:32.414] | : Packages after dropping 'base': [1] ‘future’
[08:07:32.414] | : Packages after dropping non-attached packages: [1] ‘future’
[08:07:32.414] | : globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:32.414] | : packages: [1] ‘future’
[08:07:32.415] | getGlobalsAndPackages() ... done
[08:07:32.415] future(..., label = NULL) ... done
 2[08:07:32.418] future(..., label = NULL) ...
[08:07:32.418] | lazy: TRUE
[08:07:32.419] | stdout: TRUE
[08:07:32.419] | conditions: [n=1] ‘condition’
[08:07:32.419] | gc: FALSE
[08:07:32.419] | earlySignal: FALSE
[08:07:32.419] | getGlobalsAndPackages() ...
[08:07:32.419] | : Searching for globals ...
[08:07:32.442] | : . globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:32.442] | : Searching for globals ... done
[08:07:32.442] | : Resolving globals: FALSE
[08:07:32.442] | : Search for packages associated with the globals ...
[08:07:32.443] | : . Packages associated with globals: [2] ‘base’, ‘future’
[08:07:32.443] | : . Packages: [2] ‘base’, ‘future’
[08:07:32.443] | : Search for packages associated with the globals ... done
[08:07:32.443] | : Packages after dropping 'base': [1] ‘future’
[08:07:32.443] | : Packages after dropping non-attached packages: [1] ‘future’
[08:07:32.443] | : globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:32.444] | : packages: [1] ‘future’
[08:07:32.444] | getGlobalsAndPackages() ... done
[08:07:32.444] future(..., label = NULL) ... done
 3[08:07:32.444] future(..., label = NULL) ...
[08:07:32.444] | lazy: TRUE
[08:07:32.444] | stdout: TRUE
[08:07:32.444] | conditions: [n=1] ‘condition’
[08:07:32.444] | gc: FALSE
[08:07:32.444] | earlySignal: FALSE
[08:07:32.445] | getGlobalsAndPackages() ...
[08:07:32.445] | : Searching for globals ...
[08:07:32.467] | : . globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:32.467] | : Searching for globals ... done
[08:07:32.468] | : Resolving globals: FALSE
[08:07:32.468] | : Search for packages associated with the globals ...
[08:07:32.468] | : . Packages associated with globals: [2] ‘base’, ‘future’
[08:07:32.468] | : . Packages: [2] ‘base’, ‘future’
[08:07:32.468] | : Search for packages associated with the globals ... done
[08:07:32.469] | : Packages after dropping 'base': [1] ‘future’
[08:07:32.469] | : Packages after dropping non-attached packages: [1] ‘future’
[08:07:32.469] | : globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:32.469] | : packages: [1] ‘future’
[08:07:32.469] | getGlobalsAndPackages() ... done
[08:07:32.469] future(..., label = NULL) ... done
 4[08:07:32.469] future(..., label = NULL) ...
[08:07:32.469] | lazy: TRUE
[08:07:32.470] | stdout: TRUE
[08:07:32.470] | conditions: [n=1] ‘condition’
[08:07:32.470] | gc: FALSE
[08:07:32.470] | earlySignal: FALSE
[08:07:32.470] | getGlobalsAndPackages() ...
[08:07:32.470] | : Searching for globals ...
[08:07:32.493] | : . globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:32.493] | : Searching for globals ... done
[08:07:32.493] | : Resolving globals: FALSE
[08:07:32.493] | : Search for packages associated with the globals ...
[08:07:32.494] | : . Packages associated with globals: [2] ‘base’, ‘future’
[08:07:32.494] | : . Packages: [2] ‘base’, ‘future’
[08:07:32.494] | : Search for packages associated with the globals ... done
[08:07:32.494] | : Packages after dropping 'base': [1] ‘future’
[08:07:32.494] | : Packages after dropping non-attached packages: [1] ‘future’
[08:07:32.494] | : globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:32.494] | : packages: [1] ‘future’
[08:07:32.495] | getGlobalsAndPackages() ... done
[08:07:32.495] future(..., label = NULL) ... done

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[08:07:32.504] resolved() for Future (<unnamed-5>) ...
[08:07:32.504] | state: ‘created’
[08:07:32.504] | run: TRUE
[08:07:32.504] | run() ...
[08:07:32.505] | : run() for ‘Future’ (<unnamed-5>) ...
[08:07:32.505] | : . state: ‘created’
[08:07:32.505] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.505] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.505] | : . Using MulticoreFutureBackend ...
[08:07:32.505] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:07:32.505] | : . ' Launching futures ...
[08:07:32.506] | : . ' , launchFuture() for MulticoreFutureBackend ...
[08:07:32.506] | : . ' , ; getFutureData() ...
[08:07:32.506] | : . ' , ; ` getFutureCore() ...
[08:07:32.506] | : . ' , ; ` | Packages needed by the future expression (n = 1): ‘future’
[08:07:32.506] | : . ' , ; ` getFutureCore() ... done
[08:07:32.506] | : . ' , ; ` getFutureCapture() ...
[08:07:32.506] | : . ' , ; ` getFutureCapture() ... done
[08:07:32.506] | : . ' , ; ` getFutureContext() ...
[08:07:32.506] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.506] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:07:32.507] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.507] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:07:32.507] | : . ' , ; ` getFutureContext() ... done
[08:07:32.507] | : . ' , ; getFutureData() ... done
[08:07:32.507] | : . ' , ; requestCore(..., workers = 2) ...
[08:07:32.508] | : . ' , ; requestCore(..., workers = 2) ... done
[08:07:32.511] | : . ' , ; MulticoreFuture started
[08:07:32.511] | : . ' , launchFuture() for MulticoreFutureBackend ... done
[08:07:32.511] | : . ' Launching futures ... done
[08:07:32.512] | : . ' Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:32.512] | : . Using MulticoreFutureBackend ... done
[08:07:32.512] | : run() for ‘Future’ (<unnamed-5>) ... done
[08:07:32.513] | run() ... done
[08:07:32.513] | resolved() ...
[08:07:32.514] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.514] | : . ' , ; ` Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:32.515] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.515] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.515] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:32.515] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:32.516] | : . ' , ; ` | : New stack:
[08:07:32.516] | : . ' , ; ` | : List of 1
[08:07:32.516] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.516] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.516] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:32.516] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.516] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.516] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.516] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.516] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.521] | : . ' , ; ` | : Old stack:
[08:07:32.524] | : readImmediateCondition() ...
[08:07:32.525] | : . Path: ‘/tmp/RtmprJwE6j/.future/immediateConditions’
[08:07:32.525] | : . Number of RDS files: 0
[08:07:32.525] | : . Returned conditions set:
[08:07:32.525] | : .  list()
[08:07:32.526] | : readImmediateCondition() ... done
[08:07:32.526] | : resolved: FALSE
[08:07:32.526] | resolved() ... done
[08:07:32.526] resolved() for Future (<unnamed-5>) ... done
[08:07:32.526] resolved() for Future (<unnamed-6>) ...
[08:07:32.527] | state: ‘created’
[08:07:32.527] | run: TRUE
[08:07:32.527] | run() ...
[08:07:32.527] | : run() for ‘Future’ (<unnamed-6>) ...
[08:07:32.527] | : . state: ‘created’
[08:07:32.527] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.528] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.528] | : . Using MulticoreFutureBackend ...
[08:07:32.528] | : . ' Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:07:32.528] | : . ' Launching futures ...
[08:07:32.528] | : . ' , launchFuture() for MulticoreFutureBackend ...
[08:07:32.528] | : . ' , ; getFutureData() ...
[08:07:32.529] | : . ' , ; ` getFutureCore() ...
[08:07:32.529] | : . ' , ; ` | Packages needed by the future expression (n = 1): ‘future’
[08:07:32.529] | : . ' , ; ` getFutureCore() ... done
[08:07:32.529] | : . ' , ; ` getFutureCapture() ...
[08:07:32.529] | : . ' , ; ` getFutureCapture() ... done
[08:07:32.529] | : . ' , ; ` getFutureContext() ...
[08:07:32.530] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.530] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:07:32.530] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.530] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:07:32.523] | : . ' , ; ` | : List of 1
[08:07:32.523] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.523] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.523] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.523] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:32.523] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.523] | : . ' , ; ` | :     ...)  
[08:07:32.523] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.523] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.523] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:32.523] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.523] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.523] | : . ' , ; ` | :     ...)  
[08:07:32.523] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.523] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.531] | : . ' , ; ` | : Not identical
[08:07:32.531] | : . ' , ; ` | : all.equal() for future ...
[08:07:32.530] | : . ' , ; ` getFutureContext() ... done
[08:07:32.532] | : . ' , ; getFutureData() ... done
[08:07:32.533] | : . ' , ; requestCore(..., workers = 2) ...
[08:07:32.533] | : . ' , ; requestCore(..., workers = 2) ... done
[08:07:32.536] | : . ' , ; MulticoreFuture started
[08:07:32.537] | : . ' , launchFuture() for MulticoreFutureBackend ... done
[08:07:32.538] | : . ' Launching futures ... done
[08:07:32.531] | : . ' , ; ` | : . List of 2
[08:07:32.531] | : . ' , ; ` | : .  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.531] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.531] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:07:32.531] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.531] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.531] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.531] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.531] | : . ' , ; ` | : .  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.531] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.531] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.531] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.531] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.531] | : . ' , ; ` | : .     ...)  
[08:07:32.531] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.531] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.531] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:32.531] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.531] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.531] | : . ' , ; ` | : .     ...)  
[08:07:32.531] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.538] | : . ' Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:32.539] | : . ' , ; ` | : . Formals differ
[08:07:32.539] | : . ' , ; ` | : all.equal() for future ... done
[08:07:32.539] | : . Using MulticoreFutureBackend ... done
[08:07:32.539] | : . ' , ; ` | : Future strategies differ at level 1
[08:07:32.539] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:32.540] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:07:32.539] | : run() for ‘Future’ (<unnamed-6>) ... done
[08:07:32.540] | run() ... done
[08:07:32.540] | : . ' , ; ` | List of future strategies:
[08:07:32.540] | : . ' , ; ` | 1. sequential:
[08:07:32.540] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:32.540] | : . ' , ; ` |    - tweaked: FALSE
[08:07:32.540] | : . ' , ; ` |    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.540] | resolved() ...
[08:07:32.542] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.542] | : . ' , ; ` Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:32.543] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.543] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.540] | : . ' , ; ` | List of 1
[08:07:32.540] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.540] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.540] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:32.540] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.540] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.540] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.540] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.540] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.544] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:32.544] | : . ' , ; ` | plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:32.544] | : . ' , ; ` | plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:32.544] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:32.544] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.544] | : . ' , ; ` | : New stack:
[08:07:32.544] | : . ' , ; ` | : plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:32.545] | : . ' , ; ` | : . function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.545] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.545] | : . ' , ; ` | : .  - attr(*, "init")= logi TRUE
[08:07:32.545] | : . ' , ; ` | : .  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.545] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.545] | : . ' , ; ` | : .  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.545] | : . ' , ; ` | : .  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.547] | : . ' , ; ` | : . init: TRUE
[08:07:32.547] | : . ' , ; ` | : . makeFutureBackend(<sequential>) ...
[08:07:32.547] | : . ' , ; ` | : . ' Backend function: <‘NULL’>
[08:07:32.547] | : . ' , ; ` | : . ' Evaluator tweak arguments: [n=0]
[08:07:32.547] | : . ' , ; ` | : . '  list()
[08:07:32.548] | : . ' , ; ` | : . ' Evaluator formal arguments: [n=2]
[08:07:32.548] | : . ' , ; ` | : . '  list()
[08:07:32.548] | : . ' , ; ` | : . ' Backend factory arguments: [n=2]
[08:07:32.545] | : . ' , ; ` | : List of 1
[08:07:32.545] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.545] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.545] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:32.545] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.545] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.545] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.545] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.545] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.550] | : . ' , ; ` | : Old stack:
[08:07:32.548] | : . ' , ; ` | : . ' Dotted pair list of 2
[08:07:32.548] | : . ' , ; ` | : . '  $ gc         : logi FALSE
[08:07:32.548] | : . ' , ; ` | : . '  $ earlySignal: logi FALSE
[08:07:32.551] | : . ' , ; ` | : . ' Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:32.551] | : . ' , ; ` | : . makeFutureBackend(<sequential>) ... done
[08:07:32.551] | : . ' , ; ` | : plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:32.551] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.551] | : readImmediateCondition() ...
[08:07:32.551] | : . ' , ; ` | plan(): nbrOfWorkers() = 1
[08:07:32.551] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:32.551] | : . Path: ‘/tmp/RtmprJwE6j/.future/immediateConditions’
[08:07:32.552] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.552] | : . ' , ; assign_globals() ...
[08:07:32.552] | : . Number of RDS files: 0
[08:07:32.552] | : . Returned conditions set:
[08:07:32.552] | : .  list()
[08:07:32.553] | : readImmediateCondition() ... done
[08:07:32.553] | : resolved: FALSE
[08:07:32.554] | resolved() ... done
[08:07:32.554] resolved() for Future (<unnamed-6>) ... done
[08:07:32.554] resolved() for Future (<unnamed-7>) ...
[08:07:32.554] | state: ‘created’
[08:07:32.555] | run: TRUE
[08:07:32.555] | run() ...
[08:07:32.555] | : run() for ‘Future’ (<unnamed-7>) ...
[08:07:32.555] | : . state: ‘created’
[08:07:32.556] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.556] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.556] | : . Using MulticoreFutureBackend ...
[08:07:32.556] | : . ' Number of futures since start: 2 (2 created, 2 launched, 0 finished)
[08:07:32.557] | : . ' Launching futures ...
[08:07:32.557] | : . ' , launchFuture() for MulticoreFutureBackend ...
[08:07:32.557] | : . ' , ; getFutureData() ...
[08:07:32.558] | : . ' , ; ` getFutureCore() ...
[08:07:32.558] | : . ' , ; ` | Packages needed by the future expression (n = 1): ‘future’
[08:07:32.550] | : . ' , ; ` | : List of 1
[08:07:32.550] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.550] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.550] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.550] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:32.550] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.550] | : . ' , ; ` | :     ...)  
[08:07:32.550] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.550] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.550] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:32.550] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.550] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.550] | : . ' , ; ` | :     ...)  
[08:07:32.550] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.550] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.558] | : . ' , ; ` | : Not identical
[08:07:32.558] | : . ' , ; ` getFutureCore() ... done
[08:07:32.558] | : . ' , ; ` getFutureCapture() ...
[08:07:32.558] | : . ' , ; ` | : all.equal() for future ...
[08:07:32.559] | : . ' , ; ` getFutureCapture() ... done
[08:07:32.552] | : . ' , ; List of 4
[08:07:32.552] | : . ' , ;  $ ii   : int 1
[08:07:32.552] | : . ' , ;  $ n    : int 4
[08:07:32.552] | : . ' , ;  $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[08:07:32.552] | : . ' , ;   ..- attr(*, "region")=List of 2
[08:07:32.552] | : . ' , ;   .. ..$ xrange: num [1:2] -2.25 -0.781
[08:07:32.552] | : . ' , ;   .. ..$ yrange: num [1:2] -1.5 -0.0306
[08:07:32.552] | : . ' , ;   ..- attr(*, "tile")= int [1:2] 1 1
[08:07:32.552] | : . ' , ;  $ delay:function (counts)  
[08:07:32.552] | : . ' , ;   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[08:07:32.552] | : . ' , ;   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x558b2a04f4a0> 
[08:07:32.552] | : . '[08:07:32.559] | : . ' , ; ` getFutureContext() ...
 , ;  - attr(*, "where")=List of 4
[08:07:32.552] | : . ' , ;   ..$ ii   :<environment: 0x558b2a2013f8> 
[08:07:32.552] | : . ' , ;   ..$ n    :<environment: R_GlobalEnv> 
[08:07:32.552] | : . ' , ;   ..$ C    :<environment: 0x558b2a2013f8> 
[08:07:32.552] | : . ' , ;   ..$ delay:<environment: R_GlobalEnv> 
[08:07:32.552] | : . ' , ;  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:32.552] | : . ' , ;  - attr(*, "resolved")= logi FALSE
[08:07:32.552] | : . ' , ;  - attr(*, "total_size")= num NA
[08:07:32.552] | : . ' , ;  - attr(*, "already-done")= logi TRUE
[08:07:32.559] | : . ' , ; - copied ‘ii’ to environment
[08:07:32.559] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.559] | : . ' , ; - copied ‘n’ to environment
[08:07:32.559] | : . ' , ; - copied ‘C’ to environment
[08:07:32.559] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:07:32.559] | : . ' , ; - reassign environment for ‘delay’ [where=globalenv()]
[08:07:32.560] | : . ' , ; - copied ‘delay’ to environment
[08:07:32.560] | : . ' , ; assign_globals() ... done
[08:07:32.560] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.560] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:07:32.560] | : . ' , ; ` getFutureContext() ... done
[08:07:32.560] | : . ' , ; getFutureData() ... done
[08:07:32.561] | : . ' , ; requestCore(..., workers = 2) ...
[08:07:32.561] | : . ' , ; ` Poll #1 (0): usedCores() = 2, workers = 2
[08:07:32.563] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.563] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.563] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:32.563] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:07:32.564] | : . ' , ; ` | : . New stack:
[08:07:32.558] | : . ' , ; ` | : . List of 2
[08:07:32.558] | : . ' , ; ` | : .  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.558] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.558] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:07:32.558] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.558] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.558] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.558] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.558] | : . ' , ; ` | : .  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.558] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.558] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.558] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.558] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.558] | : . ' , ; ` | : .     ...)  
[08:07:32.558] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.558] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.558] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:32.558] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.558] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.558] | : . ' , ; ` | : .     ...)  
[08:07:32.558] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.564] | : . ' , ; ` | : . List of 1
[08:07:32.564] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.564] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.564] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.564] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.564] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.564] | : . ' , ; ` | : .     ...)  
[08:07:32.564] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.564] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.564] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:32.564] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.564] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.564] | : . ' , ; ` | : .     ...)  
[08:07:32.564] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.564] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.567] | : . ' , ; ` | : . Old stack:
[08:07:32.567] | : . ' , ; ` | : . Formals differ
[08:07:32.568] | : . ' , ; ` | : all.equal() for future ... done
[08:07:32.568] | : . ' , ; ` | : Future strategies differ at level 1
[08:07:32.568] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:32.568] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:07:32.568] | : . ' , ; ` | List of future strategies:
[08:07:32.568] | : . ' , ; ` | 1. sequential:
[08:07:32.568] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:32.568] | : . ' , ; ` |    - tweaked: FALSE
[08:07:32.568] | : . ' , ; ` |    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.567] | : . ' , ; ` | : . List of 1
[08:07:32.567] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.567] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.567] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.567] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.567] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.567] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.567] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.567] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b290aab90> 
[08:07:32.567] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.567] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.567] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.572] | : . ' , ; ` | : . Not identical
[08:07:32.572] | : . ' , ; ` | : . all.equal() for future ...
[08:07:32.569] | : . ' , ; ` | List of 1
[08:07:32.569] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.569] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.569] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:32.569] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.569] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.569] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.569] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.569] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.574] | : . ' , ; ` | plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:32.574] | : . ' , ; ` | plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:32.575] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.575] | : . ' , ; ` | : plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:32.575] | : . ' , ; ` | : . function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.575] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.575] | : . ' , ; ` | : .  - attr(*, "init")= logi TRUE
[08:07:32.575] | : . ' , ; ` | : .  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.575] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.575] | : . ' , ; ` | : .  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.575] | : . ' , ; ` | : .  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.577] | : . ' , ; ` | : . init: TRUE
[08:07:32.577] | : . ' , ; ` | : . makeFutureBackend(<sequential>) ...
[08:07:32.577] | : . ' , ; ` | : . ' Backend function: <‘NULL’>
[08:07:32.577] | : . ' , ; ` | : . ' Evaluator tweak arguments: [n=0]
[08:07:32.578] | : . ' , ; ` | : . '  list()
[08:07:32.578] | : . ' , ; ` | : . ' Evaluator formal arguments: [n=2]
[08:07:32.572] | : . ' , ; ` | : . ' List of 2
[08:07:32.572] | : . ' , ; ` | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.572] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.572] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.572] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:07:32.572] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.572] | : . ' , ; ` | : . '     ...)  
[08:07:32.572] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.572] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.572] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:32.572] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.572] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.572] | : . ' , ; ` | : . '     ...)  
[08:07:32.572] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.572] | : . ' , ; ` | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.572] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.572] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:07:32.572] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.572] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.572] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.572] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.572] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b290aab90> 
[08:07:32.572] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.572] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.578] | : . ' , ; ` | : . '  list()
[08:07:32.578] | : . ' , ; ` | : . ' Backend factory arguments: [n=2]
[08:07:32.578] | : . ' , ; ` | : . ' Formals differ
[08:07:32.579] | : . ' , ; ` | : . all.equal() for future ... done
[08:07:32.579] | : . ' , ; ` | : . Future strategies differ at level 1
[08:07:32.579] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:07:32.579] | : . ' , ; ` | : plan(): Setting new future backend stack:
[08:07:32.579] | : . ' , ; ` | : List of future strategies:
[08:07:32.579] | : . ' , ; ` | : 1. multicore:
[08:07:32.579] | : . ' , ; ` | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:32.579] | : . ' , ; ` | :    - tweaked: FALSE
[08:07:32.579] | : . ' , ; ` | :    - call: plan(strategy)
[08:07:32.578] | : . ' , ; ` | : . ' Dotted pair list of 2
[08:07:32.578] | : . ' , ; ` | : . '  $ gc         : logi FALSE
[08:07:32.578] | : . ' , ; ` | : . '  $ earlySignal: logi FALSE
[08:07:32.580] | : . ' , ; ` | : . ' Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:32.580] | : . ' , ; ` | : . makeFutureBackend(<sequential>) ... done
[08:07:32.580] | : . ' , ; ` | : plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:32.580] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.580] | : . ' , ; ` | plan(): nbrOfWorkers() = 1
[08:07:32.580] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:32.580] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.581] | : . ' , ; assign_globals() ...
[08:07:32.582] | : . ' , ; ` readImmediateCondition() ...
[08:07:32.579] | : . ' , ; ` | : List of 1
[08:07:32.579] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.579] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.579] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.579] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:32.579] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.579] | : . ' , ; ` | :     ...)  
[08:07:32.579] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.579] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.579] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:32.579] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.579] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.579] | : . ' , ; ` | :     ...)  
[08:07:32.579] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.579] | : . ' , ; ` | :  - attr(*, "cla[08:07:32.582] | : . ' , ; ` | Path: ‘/tmp/RtmprJwE6j/.future/immediateConditions’
ss")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.583] | : . ' , ; ` | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:32.583] | : . ' , ; ` | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:32.583] | : . ' , ; ` | Number of RDS files: 0
[08:07:32.583] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.583] | : . ' , ; ` | Returned conditions set:
[08:07:32.583] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.583] | : . ' , ; ` | : plan(): nbrOfWorkers() = 2
[08:07:32.583] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:32.583] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.584] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.583] | : . ' , ; ` |  list()
[08:07:32.584] | : . ' , ; ` readImmediateCondition() ... done
[08:07:32.581] | : . ' , ; List of 4
[08:07:32.581] | : . ' , ;  $ ii   : int 2
[08:07:32.581] | : . ' , ;  $ n    : int 4
[08:07:32.581] | : . ' , ;  $ C    : cplx [1:25, 1:25] -0.719-1.5i -0.719-1.44i -0.719-1.38i ...
[08:07:32.581] | : . ' , ;   ..- attr(*, "region")=List of 2
[08:07:32.581] | : . ' , ;   .. ..$ xrange: num [1:2] -0.719 0.75
[08:07:32.581] | : . ' , ;   .. ..$ yrange: num [1:2] -1.5 -0.0306
[08:07:32.581] | : . ' , ;   ..- attr(*, "tile")= int [1:2] 1 2
[08:07:32.581] | : . ' , ;  $ delay:function (counts)  
[08:07:32.581] | : . ' , ;   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[08:07:32.581] | : . ' , ;   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x558b2a04f4a0> 
[08:07:32.581] | : . ' , ;  - attr(*, "where")=List of 4
[08:07:32.581] | : . ' , ;   ..$ ii   :<environment: 0x558b29cd4a40> 
[08:07:32.581] | : . ' , ;   ..$ n    :<environment: R_GlobalEnv> 
[08:07:32.581] | : . ' , ;   ..$ C    :<environment: 0x558b29cd4a40> 
[08:07:32.581] | : . ' , ;   ..$ delay:<environment: R_GlobalEnv> 
[08:07:32.581] | : . ' , ;  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:32.581] | : . ' , ;  - attr(*, "resolved")= logi FALSE
[08:07:32.581] | : . ' , ;  - attr(*, "total_size")= num NA
[08:07:32.581] | : . ' , ;  - attr(*, "already-done")= logi TRUE
[08:07:32.588] | : . ' , ; - copied ‘ii’ to environment
[08:07:32.588] | : . ' , ; - copied ‘n’ to environment
[08:07:32.589] | : . ' , ; - copied ‘C’ to environment
[08:07:32.589] | : . ' , ; - reassign environment for ‘delay’ [where=globalenv()]
[08:07:32.589] | : . ' , ; - copied ‘delay’ to environment
[08:07:32.589] | : . ' , ; assign_globals() ... done
[08:07:32.594] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.594] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.594] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:32.594] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:07:32.594] | : . ' , ; ` | : . New stack:
[08:07:32.594] | : . ' , ; ` readImmediateCondition() ...
[08:07:32.594] | : . ' , ; ` | Path: ‘/tmp/RtmprJwE6j/.future/immediateConditions’
[08:07:32.595] | : . ' , ; ` | Number of RDS files: 0
[08:07:32.595] | : . ' , ; ` | Returned conditions set:
[08:07:32.595] | : . ' , ; ` |  list()
[08:07:32.596] | : . ' , ; ` readImmediateCondition() ... done
[08:07:32.596] | : . ' , ; ` Poll #2 (0.04 secs): usedCores() = 2, workers = 2
[08:07:32.594] | : . ' , ; ` | : . List of 1
[08:07:32.594] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.594] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.594] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.594] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.594] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.594] | : . ' , ; ` | : .     ...)  
[08:07:32.594] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.594] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.594] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:32.594] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.594] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.594] | : . ' , ; ` | : .     ...)  
[08:07:32.594] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.594] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.600] | : . ' , ; ` | : . Old stack:
[08:07:32.600] | : . ' , ; ` | : . List of 1
[08:07:32.600] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.600] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.600] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.600] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.600] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.600] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.600] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.600] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b281c1f70> 
[08:07:32.600] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.600] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.600] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.604] | : . ' , ; ` | : . Not identical
[08:07:32.604] | : . ' , ; ` | : . all.equal() for future ...
[08:07:32.604] | : . ' , ; ` | : . ' List of 2
[08:07:32.604] | : . ' , ; ` | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.604] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.604] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.604] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:07:32.604] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.604] | : . ' , ; ` | : . '     ...)  
[08:07:32.604] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.604] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.604] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:32.604] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.604] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.604] | : . ' , ; ` | : . '     ...)  
[08:07:32.604] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.604] | : . ' , ; ` | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.604] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.604] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:07:32.604] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.604] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.604] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.604] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.604] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b281c1f70> 
[08:07:32.604] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.604] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.611] | : . ' , ; ` | : . ' Formals differ
[08:07:32.611] | : . ' , ; ` | : . all.equal() for future ... done
[08:07:32.612] | : . ' , ; ` | : . Future strategies differ at level 1
[08:07:32.612] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:07:32.612] | : . ' , ; ` | : plan(): Setting new future backend stack:
[08:07:32.612] | : . ' , ; ` | : List of future strategies:
[08:07:32.612] | : . ' , ; ` | : 1. multicore:
[08:07:32.612] | : . ' , ; ` | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:32.612] | : . ' , ; ` | :    - tweaked: FALSE
[08:07:32.612] | : . ' , ; ` | :    - call: plan(strategy)
[08:07:32.613] | : . ' , ; ` | : List of 1
[08:07:32.613] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.613] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.613] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.613] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:32.613] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.613] | : . ' , ; ` | :     ...)  
[08:07:32.613] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.613] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.613] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:32.613] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.613] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.613] | : . ' , ; ` | :     ...)  
[08:07:32.613] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.613] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.619] | : . ' , ; ` | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:32.619] | : . ' , ; ` | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:32.619] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.619] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.619] | : . ' , ; ` | : plan(): nbrOfWorkers() = 2
[08:07:32.619] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:32.619] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.620] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.643] | : . ' , ; ` readImmediateCondition() ...
[08:07:32.643] | : . ' , ; ` | Path: ‘/tmp/RtmprJwE6j/.future/immediateConditions’
[08:07:32.643] | : . ' , ; ` | Number of RDS files: 0
[08:07:32.643] | : . ' , ; ` | Returned conditions set:
[08:07:32.643] | : . ' , ; ` |  list()
[08:07:32.644] | : . ' , ; ` readImmediateCondition() ... done
[08:07:32.644] | : . ' , ; ` value() for MulticoreFuture (<unnamed-5>) ...
[08:07:32.645] | : . ' , ; ` | result() for MulticoreFuture ...
[08:07:32.646] | : . ' , ; ` | : readImmediateCondition() ...
[08:07:32.646] | : . ' , ; ` | : . Path: ‘/tmp/RtmprJwE6j/.future/immediateConditions’
[08:07:32.646] | : . ' , ; ` | : . Number of RDS files: 0
[08:07:32.646] | : . ' , ; ` | : . Returned conditions set:
[08:07:32.646] | : . ' , ; ` | : .  list()
[08:07:32.647] | : . ' , ; ` | : readImmediateCondition() ... done
[08:07:32.647] | : . ' , ; ` | : result() for MulticoreFuture ...
[08:07:32.647] | : . ' , ; ` | : result() for MulticoreFuture ... done
[08:07:32.647] | : . ' , ; ` | : signalConditions() ...
[08:07:32.647] | : . ' , ; ` | : . include = ‘immediateCondition’
[08:07:32.648] | : . ' , ; ` | : . exclude = 
[08:07:32.648] | : . ' , ; ` | : . resignal = FALSE
[08:07:32.648] | : . ' , ; ` | : . Number of conditions: 8
[08:07:32.648] | : . ' , ; ` | : .  int 8
[08:07:32.648] | : . ' , ; ` | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.649] | : . ' , ; ` | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.649] | : . ' , ; ` | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.649] | : . ' , ; ` | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.649] | : . ' , ; ` | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.649] | : . ' , ; ` | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.649] | : . ' , ; ` | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.649] | : . ' , ; ` | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.649] | : . ' , ; ` | : signalConditions() ... done
[08:07:32.649] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:07:32.650] | : . ' , ; ` | result() for MulticoreFuture ...
[08:07:32.650] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:07:32.650] | : . ' , ; ` | signalConditions() ...
[08:07:32.650] | : . ' , ; ` | : include = ‘immediateCondition’
[08:07:32.650] | : . ' , ; ` | : exclude = 
[08:07:32.650] | : . ' , ; ` | : resignal = FALSE
[08:07:32.650] | : . ' , ; ` | : Number of conditions: 8
[08:07:32.650] | : . ' , ; ` | :  int 8
[08:07:32.651] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.651] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.651] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.651] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.651] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.651] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.652] | : . ' , ; ` | : Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.652] | : . ' , ; ` | : Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.652] | : . ' , ; ` | signalConditions() ... done
[08:07:32.652] | : . ' , ; ` | check for misuse ...
[08:07:32.652] | : . ' , ; ` | check for misuse ... done
[08:07:32.652] | : . ' , ; ` value() for MulticoreFuture (<unnamed-5>) ... done
[08:07:32.653] | : . ' , ; requestCore(..., workers = 2) ... done
[08:07:32.654] | : . ' , ; MulticoreFuture started
[08:07:32.655] | : . ' , launchFuture() for MulticoreFutureBackend ... done
[08:07:32.655] | : . ' Launching futures ... done
[08:07:32.655] | : . ' Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:32.656] | : . Using MulticoreFutureBackend ... done
[08:07:32.656] | : run() for ‘Future’ (<unnamed-7>) ... done
[08:07:32.656] | run() ... done
[08:07:32.656] | resolved() ...
[08:07:32.658] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.658] | : . ' , ; ` Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:32.658] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.659] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.659] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:32.659] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:32.660] | : . ' , ; ` | : New stack:
[08:07:32.660] | : . ' , ; ` | : List of 1
[08:07:32.660] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.660] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.660] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:32.660] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.660] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.660] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.660] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.660] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.665] | : . ' , ; ` | : Old stack:
[08:07:32.667] | : readImmediateCondition() ...
[08:07:32.667] | : . Path: ‘/tmp/RtmprJwE6j/.future/immediateConditions’
[08:07:32.667] | : . Number of RDS files: 0
[08:07:32.667] | : . Returned conditions set:
[08:07:32.667] | : .  list()
[08:07:32.668] | : readImmediateCondition() ... done
[08:07:32.668] | : resolved: FALSE
[08:07:32.668] | resolved() ... done
[08:07:32.668] resolved() for Future (<unnamed-7>) ... done
[08:07:32.669] resolved() for Future (<unnamed-8>) ...
[08:07:32.669] | state: ‘created’
[08:07:32.669] | run: TRUE
[08:07:32.669] | run() ...
[08:07:32.669] | : run() for ‘Future’ (<unnamed-8>) ...
[08:07:32.669] | : . state: ‘created’
[08:07:32.669] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.670] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.670] | : . Using MulticoreFutureBackend ...
[08:07:32.670] | : . ' Number of futures since start: 3 (3 created, 3 launched, 2 finished)
[08:07:32.670] | : . ' Launching futures ...
[08:07:32.670] | : . ' , launchFuture() for MulticoreFutureBackend ...
[08:07:32.670] | : . ' , ; getFutureData() ...
[08:07:32.671] | : . ' , ; ` getFutureCore() ...
[08:07:32.671] | : . ' , ; ` | Packages needed by the future expression (n = 1): ‘future’
[08:07:32.671] | : . ' , ; ` getFutureCore() ... done
[08:07:32.671] | : . ' , ; ` getFutureCapture() ...
[08:07:32.671] | : . ' , ; ` getFutureCapture() ... done
[08:07:32.671] | : . ' , ; ` getFutureContext() ...
[08:07:32.672] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.672] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:07:32.672] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.672] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:07:32.672] | : . ' , ; ` getFutureContext() ... done
[08:07:32.672] | : . ' , ; getFutureData() ... done
[08:07:32.673] | : . ' , ; requestCore(..., workers = 2) ...
[08:07:32.673] | : . ' , ; ` Poll #1 (0): usedCores() = 2, workers = 2
[08:07:32.665] | : . ' , ; ` | : List of 1
[08:07:32.665] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.665] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.665] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.665] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:32.665] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.665] | : . ' , ; ` | :     ...)  
[08:07:32.665] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.665] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.665] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:32.665] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.665] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.665] | : . ' , ; ` | :     ...)  
[08:07:32.665] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.665] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.675] | : . ' , ; ` | : Not identical
[08:07:32.676] | : . ' , ; ` | : all.equal() for future ...
[08:07:32.676] | : . ' , ; ` | : . List of 2
[08:07:32.676] | : . ' , ; ` | : .  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.676] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.676] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:07:32.676] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.676] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.676] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.676] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.676] | : . ' , ; ` | : .  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.676] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.676] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.676] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.676] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.676] | : . ' , ; ` | : .     ...)  
[08:07:32.676] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.676] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.676] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:32.676] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.676] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.676] | : . ' , ; ` | : .     ...)  
[08:07:32.676] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.683] | : . ' , ; ` readImmediateCondition() ...
[08:07:32.684] | : . ' , ; ` | Path: ‘/tmp/RtmprJwE6j/.future/immediateConditions’
[08:07:32.684] | : . ' , ; ` | : . Formals differ
[08:07:32.684] | : . ' , ; ` | Number of RDS files: 0
[08:07:32.684] | : . ' , ; ` | : all.equal() for future ... done
[08:07:32.684] | : . ' , ; ` | : Future strategies differ at level 1
[08:07:32.684] | : . ' , ; ` | Returned conditions set:
[08:07:32.684] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:32.684] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:07:32.684] | : . ' , ; ` |  list()
[08:07:32.685] | : . ' , ; ` readImmediateCondition() ... done
[08:07:32.685] | : . ' , ; ` value() for MulticoreFuture (<unnamed-6>) ...
[08:07:32.685] | : . ' , ; ` | List of future strategies:
[08:07:32.685] | : . ' , ; ` | 1. sequential:
[08:07:32.685] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:32.685] | : . ' , ; ` |    - tweaked: FALSE
[08:07:32.685] | : . ' , ; ` |    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.685] | : . ' , ; ` | result() for MulticoreFuture ...
[08:07:32.686] | : . ' , ; ` | : readImmediateCondition() ...
[08:07:32.686] | : . ' , ; ` | : . Path: ‘/tmp/RtmprJwE6j/.future/immediateConditions’
[08:07:32.687] | : . ' , ; ` | : . Number of RDS files: 0
[08:07:32.687] | : . ' , ; ` | : . Returned conditions set:
[08:07:32.685] | : . ' , ; ` | List of 1
[08:07:32.685] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.685] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.685] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:32.685] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.685] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.685] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.685] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.685] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.689] | : . ' , ; ` | plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:32.687] | : . ' , ; ` | : .  list()
[08:07:32.690] | : . ' , ; ` | plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:32.690] | : . ' , ; ` | : readImmediateCondition() ... done
[08:07:32.690] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.690] | : . ' , ; ` | : plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:32.690] | : . ' , ; ` | : result() for MulticoreFuture ...
[08:07:32.690] | : . ' , ; ` | : result() for MulticoreFuture ... done
[08:07:32.691] | : . ' , ; ` | : signalConditions() ...
[08:07:32.691] | : . ' , ; ` | : . include = ‘immediateCondition’
[08:07:32.691] | : . ' , ; ` | : . exclude = 
[08:07:32.691] | : . ' , ; ` | : . resignal = FALSE
[08:07:32.691] | : . ' , ; ` | : . Number of conditions: 8
[08:07:32.692] | : . ' , ; ` | : .  int 8
[08:07:32.692] | : . ' , ; ` | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.692] | : . ' , ; ` | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.693] | : . ' , ; ` | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.690] | : . ' , ; ` | : . function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.690] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.690] | : . ' , ; ` | : .  - attr(*, "init")= logi TRUE
[08:07:32.690] | : . ' , ; ` | : .  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.690] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.690] | : . ' , ; ` | : .  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.690] | : . ' , ; ` | : .  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.693] | : . ' , ; ` | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.693] | : . ' , ; ` | : . init: TRUE
[08:07:32.693] | : . ' , ; ` | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.693] | : . ' , ; ` | : . makeFutureBackend(<sequential>) ...
[08:07:32.693] | : . ' , ; ` | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.693] | : . ' , ; ` | : . ' Backend function: <‘NULL’>
[08:07:32.693] | : . ' , ; ` | : . ' Evaluator tweak arguments: [n=0]
[08:07:32.693] | : . ' , ; ` | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.693] | : . ' , ; ` | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.694] | : . ' , ; ` | : signalConditions() ... done
[08:07:32.693] | : . ' , ; ` | : . '  list()
[08:07:32.694] | : . ' , ; ` | : . ' Evaluator formal arguments: [n=2]
[08:07:32.694] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:07:32.694] | : . ' , ; ` | result() for MulticoreFuture ...
[08:07:32.694] | : . ' , ; ` | : . '  list()
[08:07:32.694] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:07:32.694] | : . ' , ; ` | : . ' Backend factory arguments: [n=2]
[08:07:32.694] | : . ' , ; ` | signalConditions() ...
[08:07:32.694] | : . ' , ; ` | : include = ‘immediateCondition’
[08:07:32.695] | : . ' , ; ` | : exclude = 
[08:07:32.695] | : . ' , ; ` | : resignal = FALSE
[08:07:32.695] | : . ' , ; ` | : Number of conditions: 8
[08:07:32.695] | : . ' , ; ` | :  int 8
[08:07:32.694] | : . ' , ; ` | : . ' Dotted pair list of 2
[08:07:32.694] | : . ' , ; ` | : . '  $ gc         : logi FALSE
[08:07:32.694] | : . ' , ; ` | : . '  $ earlySignal: logi FALSE
[08:07:32.696] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.696] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.696] | : . ' , ; ` | : . ' Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:32.696] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.696] | : . ' , ; ` | : . makeFutureBackend(<sequential>) ... done
[08:07:32.696] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.696] | : . ' , ; ` | : plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:32.696] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.696] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.696] | : . ' , ; ` | plan(): nbrOfWorkers() = 1
[08:07:32.696] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.696] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:32.696] | : . ' , ; ` | : Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.697] | : . ' , ; ` | : Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.697] | : . ' , ; ` | signalConditions() ... done
[08:07:32.697] | : . ' , ; ` | check for misuse ...
[08:07:32.697] | : . ' , ; ` | check for misuse ... done
[08:07:32.697] | : . ' , ; ` value() for MulticoreFuture (<unnamed-6>) ... done
[08:07:32.698] | : . ' , ; requestCore(..., workers = 2) ... done
[08:07:32.697] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.698] | : . ' , ; assign_globals() ...
[08:07:32.700] | : . ' , ; MulticoreFuture started
[08:07:32.700] | : . ' , launchFuture() for MulticoreFutureBackend ... done
[08:07:32.701] | : . ' Launching futures ... done
[08:07:32.701] | : . ' Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:32.702] | : . Using MulticoreFutureBackend ... done
[08:07:32.702] | : run() for ‘Future’ (<unnamed-8>) ... done
[08:07:32.702] | run() ... done
[08:07:32.702] | resolved() ...
[08:07:32.704] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.705] | : . ' , ; ` Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:32.705] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.705] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.698] | : . ' , ; List of 4
[08:07:32.698] | : . ' , ;  $ ii   : int 3
[08:07:32.698] | : . ' , ;  $ n    : int 4
[08:07:32.698] | : . ' , ;  $ C    : cplx [1:25, 1:25] -2.25+0.0306i -2.25+0.0918i -2.25+0.1531i ...
[08:07:32.698] | : . ' , ;   ..- attr(*, "region")=List of 2
[08:07:32.698] | : . ' , ;   .. ..$ xrange: num [1:2] -2.25 -0.781
[08:07:32.698] | : . ' , ;   .. ..$ yrange: num [1:2] 0.0306 1.5
[08:07:32.698] | : . ' , ;   ..- attr(*, "tile")= int [1:2] 2 1
[08:07:32.698] | : . ' , ;  $ delay:function (counts)  
[08:07:32.698] | : . ' , ;   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[08:07:32.698] | : . ' , ;   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x558b2a04f4a0> 
[08:07:32.698] | : . ' , ;  - attr(*, "where")=List of 4
[08:07:32.698] | : . ' , ;   ..$ ii   :<environment: 0x558b2899f8a8> 
[08:07:32.698] | : . ' , ;   ..$ n    :<environment: R_GlobalEnv> 
[08:07:32.698] | : . ' , ;   ..$ C    :<environment: 0x558b2899f8a8> 
[08:07:32.698] | : . ' , ;   ..$ delay:<environment: R_GlobalEnv> 
[08:07:32.698] | : . ' , ;  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:32.698] | : . ' , ;  - attr(*, "resolved")= logi FALSE
[08:07:32.698] | : . ' , ;  - attr(*, "total_size")= num NA
[08:07:32.698] | : . ' , ;  - attr(*, "already-done")= logi TRUE
[08:07:32.706] | : . ' , ; - copied ‘ii’ to environment
[08:07:32.706] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:32.706] | : . ' , ; - copied ‘n’ to environment
[08:07:32.706] | : . ' , ; - copied ‘C’ to environment
[08:07:32.706] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:32.706] | : . ' , ; - reassign environment for ‘delay’ [where=globalenv()]
[08:07:32.706] | : . ' , ; - copied ‘delay’ to environment
[08:07:32.706] | : . ' , ; ` | : New stack:
[08:07:32.706] | : . ' , ; assign_globals() ... done
[08:07:32.710] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.710] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.710] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:32.710] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:07:32.710] | : . ' , ; ` | : . New stack:
[08:07:32.706] | : . ' , ; ` | : List of 1
[08:07:32.706] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.706] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.706] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:32.706] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.706] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.706] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.706] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.706] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.711] | : . ' , ; ` | : Old stack:
[08:07:32.713] | : readImmediateCondition() ...
[08:07:32.713] | : . Path: ‘/tmp/RtmprJwE6j/.future/immediateConditions’
[08:07:32.714] | : . Number of RDS files: 0
[08:07:32.711] | : . ' , ; ` | : . List of 1
[08:07:32.711] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.711] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.711] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.711] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.711] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.711] | : . ' , ; ` | : .     ...)  
[08:07:32.711] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.711] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.711] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:32.711] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.711] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.711] | : . ' , ; ` | : .     ...)  
[08:07:32.711] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.711] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.714] | : . Returned conditions set:
[08:07:32.714] | : . ' , ; ` | : . Old stack:
[08:07:32.714] | : .  list()
[08:07:32.715] | : readImmediateCondition() ... done
[08:07:32.715] | : resolved: FALSE
[08:07:32.716] | resolved() ... done
[08:07:32.716] resolved() for Future (<unnamed-8>) ... done
Plotting tile #1 of 4 ...
[08:07:32.716] value() for MulticoreFuture (<unnamed-5>) ...
[08:07:32.717] | result() for MulticoreFuture ...
[08:07:32.717] | result() for MulticoreFuture ... done
[08:07:32.717] | result() for MulticoreFuture ...
[08:07:32.717] | result() for MulticoreFuture ... done
[08:07:32.718] | signalConditions() ...
[08:07:32.718] | : include = ‘immediateCondition’
[08:07:32.718] | : exclude = 
[08:07:32.718] | : resignal = FALSE
[08:07:32.718] | : Number of conditions: 8
[08:07:32.714] | : . ' , ; ` | : . List of 1
[08:07:32.714] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.714] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.714] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.714] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.714] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.714] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.714] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.714] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2aa51d78> 
[08:07:32.714] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.714] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.714] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.719] | :  int 8
[08:07:32.712] | : . ' , ; ` | : List of 1
[08:07:32.712] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.712] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.712] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.712] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:32.712] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.712] | : . ' , ; ` | :     ...)  
[08:07:32.712] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.712] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.712] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:32.712] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.712] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.712] | : . ' , ; ` | :     ...)  
[08:07:32.712] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.712] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.720] | : . ' , ; ` | : . Not identical
[08:07:32.720] | : . ' , ; ` | : Not identical
[08:07:32.720] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.720] | : . ' , ; ` | : . all.equal() for future ...
[08:07:32.720] | : . ' , ; ` | : all.equal() for future ...
[08:07:32.720] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.720] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.720] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.721] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.721] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.721] | : Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.721] | : Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.722] | signalConditions() ... done
[08:07:32.722] | relay stdout ...
[08:07:32.722] | relay stdout ... done
[08:07:32.722] | check for misuse ...
[08:07:32.723] | check for misuse ... done
[08:07:32.723] | relay conditions ...
[08:07:32.723] | : Future state: ‘finished’
[08:07:32.723] | : result() for MulticoreFuture ...
[08:07:32.724] | : result() for MulticoreFuture ... done
[08:07:32.724] | : signalConditions() ...
[08:07:32.724] | : . include = ‘condition’
[08:07:32.724] | : . exclude = ‘immediateCondition’
[08:07:32.724] | : . resignal = TRUE
[08:07:32.725] | : . Number of conditions: 8
[08:07:32.725] | : .  int 8
[08:07:32.720] | : . ' , ; ` | : . ' List of 2
[08:07:32.720] | : . ' , ; ` | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.720] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.720] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.720] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:07:32.720] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.720] | : . ' , ; ` | : . '     ...)  
[08:07:32.720] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.720] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.720] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:32.720] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.720] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.720] | : . ' , ; ` | : . '     ...)  
[08:07:32.720] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.720] | : . ' , ; ` | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.720] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.720] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:07:32.720] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.720] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.720] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.720] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.720] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2aa51d78> 
[08:07:32.720] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.720] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.726] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.726] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.726] | : . ' , ; ` | : . ' Formals differ
[08:07:32.511] | : . ' , ; attachPackages() ...
[08:07:32.726] | : . ' , ; ` | : . all.equal() for future ... done
[08:07:32.726] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.726] | : . ' , ; ` | : . Future strategies differ at level 1
[08:07:32.726] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:07:32.726] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.726] | : . ' , ; ` | : plan(): Setting new future backend stack:
[08:07:32.512] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:32.727] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.727] | : . ' , ; ` | : List of future strategies:
[08:07:32.727] | : . ' , ; ` | : 1. multicore:
[08:07:32.727] | : . ' , ; ` | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:32.727] | : . ' , ; ` | :    - tweaked: FALSE
[08:07:32.727] | : . ' , ; ` | :    - call: plan(strategy)
[08:07:32.727] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.512] | : . ' , ; attachPackages() ... done
[08:07:32.727] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.727] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.512] | : . ' , ; attachPackages() ...
[08:07:32.727] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.728] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.513] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:32.728] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.728] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.513] | : . ' , ; attachPackages() ... done
[08:07:32.728] | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.729] | : . Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[08:07:32.729] | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.729] | : . Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:32.730] | : signalConditions() ... done
[08:07:32.730] | relay conditions ... done
[08:07:32.730] value() for MulticoreFuture (<unnamed-5>) ... done
[08:07:32.727] | : . ' , ; ` | : List of 1
[08:07:32.727] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.727] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.727] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.727] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:32.727] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.727] | : . ' , ; ` | :     ...)  
[08:07:32.727] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.727] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.727] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:32.727] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.727] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.727] | : . ' , ; ` | :     ...)  
[08:07:32.727] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.727] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.730] | : . ' , ; ` | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:32.730] | : . ' , ; ` | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:32.731] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.731] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.731] | : . ' , ; ` | : plan(): nbrOfWorkers() = 2
[08:07:32.731] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:32.731] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.731] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
Plotting tile #2 of 4 ...
[08:07:32.732] value() for MulticoreFuture (<unnamed-6>) ...
[08:07:32.732] | result() for MulticoreFuture ...
[08:07:32.732] | result() for MulticoreFuture ... done
[08:07:32.732] | result() for MulticoreFuture ...
[08:07:32.732] | result() for MulticoreFuture ... done
[08:07:32.733] | signalConditions() ...
[08:07:32.733] | : include = ‘immediateCondition’
[08:07:32.733] | : exclude = 
[08:07:32.733] | : resignal = FALSE
[08:07:32.734] | : Number of conditions: 8
[08:07:32.734] | :  int 8
[08:07:32.735] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.735] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.735] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.735] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.735] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.720] | : . ' , ; ` | : . List of 2
[08:07:32.720] | : . ' , ; ` | : .  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.720] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.720] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:07:32.720] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.720] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.720] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.720] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.720] | : . ' , ; ` | : .  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.720] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.720] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.720] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.720] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.720] | : . ' , ; ` | : .     ...)  
[08:07:32.720] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.720] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.720] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:32.720] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.720] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.720] | : . ' , ; ` | : .     ...)  
[08:07:32.720] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.738] | : . ' , ; ` | : . Formals differ
[08:07:32.736] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.738] | : . ' , ; ` | : all.equal() for future ... done
[08:07:32.738] | : Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.738] | : . ' , ; ` | : Future strategies differ at level 1
[08:07:32.739] | : Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.739] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:32.739] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:07:32.739] | signalConditions() ... done
[08:07:32.739] | relay stdout ...
[08:07:32.740] | relay stdout ... done
[08:07:32.740] | check for misuse ...
[08:07:32.739] | : . ' , ; ` | List of future strategies:
[08:07:32.739] | : . ' , ; ` | 1. sequential:
[08:07:32.739] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:32.739] | : . ' , ; ` |    - tweaked: FALSE
[08:07:32.739] | : . ' , ; ` |    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.740] | check for misuse ... done
[08:07:32.741] | relay conditions ...
[08:07:32.741] | : Future state: ‘finished’
[08:07:32.741] | : result() for MulticoreFuture ...
[08:07:32.741] | : result() for MulticoreFuture ... done
[08:07:32.742] | : signalConditions() ...
[08:07:32.742] | : . include = ‘condition’
[08:07:32.742] | : . exclude = ‘immediateCondition’
[08:07:32.742] | : . resignal = TRUE
[08:07:32.743] | : . Number of conditions: 8
[08:07:32.743] | : .  int 8
[08:07:32.744] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.744] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.537] | : . ' , ; attachPackages() ...
[08:07:32.744] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.744] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.538] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:32.745] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.745] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.539] | : . ' , ; attachPackages() ... done
[08:07:32.745] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.745] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.540] | : . ' , ; attachPackages() ...
[08:07:32.740] | : . ' , ; ` | List of 1
[08:07:32.740] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.740] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.740] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:32.740] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.740] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.740] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.740] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.740] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.745] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.746] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.540] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:32.746] | : . ' , ; ` | plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:32.746] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.746] | : . ' , ; ` | plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:32.746] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.541] | : . ' , ; attachPackages() ... done
[08:07:32.746] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.746] | : . ' , ; ` | : plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:32.746] | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.746] | : . Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[08:07:32.746] | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.747] | : . Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:32.747] | : signalConditions() ... done
[08:07:32.747] | relay conditions ... done
[08:07:32.747] value() for MulticoreFuture (<unnamed-6>) ... done
[08:07:32.748] readImmediateCondition() ...
[08:07:32.748] | Path: ‘/tmp/RtmprJwE6j/.future/immediateConditions’
[08:07:32.748] | Number of RDS files: 0
[08:07:32.746] | : . ' , ; ` | : . function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.746] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.746] | : . ' , ; ` | : .  - attr(*, "init")= logi TRUE
[08:07:32.746] | : . ' , ; ` | : .  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.746] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.746] | : . ' , ; ` | : .  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.746] | : . ' , ; ` | : .  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.748] | Returned conditions set:
[08:07:32.748] | : . ' , ; ` | : . init: TRUE
[08:07:32.749] | : . ' , ; ` | : . makeFutureBackend(<sequential>) ...
[08:07:32.748] |  list()
[08:07:32.749] | : . ' , ; ` | : . ' Backend function: <‘NULL’>
[08:07:32.749] readImmediateCondition() ... done
[08:07:32.749] | : . ' , ; ` | : . ' Evaluator tweak arguments: [n=0]
Plotting tile #3 of 4 ...
[08:07:32.749] value() for MulticoreFuture (<unnamed-7>) ...
[08:07:32.749] | result() for MulticoreFuture ...
[08:07:32.749] | : . ' , ; ` | : . '  list()
[08:07:32.749] | : . ' , ; ` | : . ' Evaluator formal arguments: [n=2]
[08:07:32.749] | : . ' , ; ` | : . '  list()
[08:07:32.750] | : . ' , ; ` | : . ' Backend factory arguments: [n=2]
[08:07:32.750] | : readImmediateCondition() ...
[08:07:32.750] | : . Path: ‘/tmp/RtmprJwE6j/.future/immediateConditions’
[08:07:32.750] | : . Number of RDS files: 0
[08:07:32.750] | : . Returned conditions set:
[08:07:32.751] | : .  list()
[08:07:32.751] | : readImmediateCondition() ... done
[08:07:32.750] | : . ' , ; ` | : . ' Dotted pair list of 2
[08:07:32.750] | : . ' , ; ` | : . '  $ gc         : logi FALSE
[08:07:32.750] | : . ' , ; ` | : . '  $ earlySignal: logi FALSE
[08:07:32.751] | : result() for MulticoreFuture ...
[08:07:32.751] | : result() for MulticoreFuture ... done
[08:07:32.751] | : signalConditions() ...
[08:07:32.751] | : . ' , ; ` | : . ' Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:32.751] | : . include = ‘immediateCondition’
[08:07:32.752] | : . exclude = 
[08:07:32.752] | : . ' , ; ` | : . makeFutureBackend(<sequential>) ... done
[08:07:32.752] | : . resignal = FALSE
[08:07:32.752] | : . ' , ; ` | : plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:32.752] | : . Number of conditions: 8
[08:07:32.752] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.752] | : . ' , ; ` | plan(): nbrOfWorkers() = 1
[08:07:32.752] | : .  int 8
[08:07:32.752] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:32.752] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.752] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.752] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.753] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.753] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.753] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.753] | : . ' , ; assign_globals() ...
[08:07:32.753] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.753] | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.753] | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.753] | : signalConditions() ... done
[08:07:32.753] | result() for MulticoreFuture ... done
[08:07:32.753] | result() for MulticoreFuture ...
[08:07:32.754] | result() for MulticoreFuture ... done
[08:07:32.754] | signalConditions() ...
[08:07:32.754] | : include = ‘immediateCondition’
[08:07:32.754] | : exclude = 
[08:07:32.754] | : resignal = FALSE
[08:07:32.754] | : Number of conditions: 8
[08:07:32.754] | :  int 8
[08:07:32.755] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.755] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.755] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.755] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.755] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.755] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.755] | : Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.755] | : Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.756] | signalConditions() ... done
[08:07:32.756] | relay stdout ...
[08:07:32.756] | relay stdout ... done
[08:07:32.756] | check for misuse ...
[08:07:32.756] | check for misuse ... done
[08:07:32.756] | relay conditions ...
[08:07:32.756] | : Future state: ‘finished’
[08:07:32.756] | : result() for MulticoreFuture ...
[08:07:32.756] | : result() for MulticoreFuture ... done
[08:07:32.757] | : signalConditions() ...
[08:07:32.757] | : . include = ‘condition’
[08:07:32.757] | : . exclude = ‘immediateCondition’
[08:07:32.757] | : . resignal = TRUE
[08:07:32.757] | : . Number of conditions: 8
[08:07:32.757] | : .  int 8
[08:07:32.758] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.758] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.655] | : . ' , ; attachPackages() ...
[08:07:32.758] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.758] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.656] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:32.758] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.758] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.656] | : . ' , ; attachPackages() ... done
[08:07:32.758] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.758] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.656] | : . ' , ; attachPackages() ...
[08:07:32.759] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.759] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.657] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:32.759] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.759] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.657] | : . ' , ; attachPackages() ... done
[08:07:32.759] | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.759] | : . Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[08:07:32.759] | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.759] | : . Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:32.760] | : signalConditions() ... done
[08:07:32.760] | relay conditions ... done
[08:07:32.760] value() for MulticoreFuture (<unnamed-7>) ... done
[08:07:32.753] | : . ' , ; List of 4
[08:07:32.753] | : . ' , ;  $ ii   : int 4
[08:07:32.753] | : . ' , ;  $ n    : int 4
[08:07:32.753] | : . ' , ;  $ C    : cplx [1:25, 1:25] -0.719+0.0306i -0.719+0.0918i -0.719+0.1531i ...
[08:07:32.753] | : . ' , ;   ..- attr(*, "region")=List of 2
[08:07:32.753] | : . ' , ;   .. ..$ xrange: num [1:2] -0.719 0.75
[08:07:32.753] | : . ' , ;   .. ..$ yrange: num [1:2] 0.0306 1.5
[08:07:32.753] | : . ' , ;   ..- attr(*, "tile")= int [1:2] 2 2
[08:07:32.753] | : . ' , ;  $ delay:function (counts)  
[08:07:32.753] | : . ' , ;   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[08:07:32.753] | : . ' , ;   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x558b2a04f4a0> 
[08:07:32.753] | : . ' , ;  - attr(*, "where")=List of 4
[08:07:32.753] | : . ' , ;   ..$ ii   :<environment: 0x558b28c67fa0> 
[08:07:32.753] | : . ' , ;   ..$ n    :<environment: R_GlobalEnv> 
[08:07:32.753] | : . ' , ;   ..$ C    :<environment: 0x558b28c67fa0> 
[08:07:32.753] | : . ' , ;   ..$ delay:<environment: R_GlobalEnv> 
[08:07:32.753] | : . ' , ;  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:32.753] | : . ' , ;  - attr(*, "resolved")= logi FALSE
[08:07:32.753] | : . ' , ;  - attr(*, "total_size")= num NA
[08:07:32.753] | : . ' , ;  - attr(*, "already-done")= logi TRUE
[08:07:32.766] | : . ' , ; - copied ‘ii’ to environment
[08:07:32.766] | : . ' , ; - copied ‘n’ to environment
[08:07:32.766] | : . ' , ; - copied ‘C’ to environment
[08:07:32.766] | : . ' , ; - reassign environment for ‘delay’ [where=globalenv()]
[08:07:32.766] | : . ' , ; - copied ‘delay’ to environment
[08:07:32.766] | : . ' , ; assign_globals() ... done
[08:07:32.771] readImmediateCondition() ...
[08:07:32.771] | Path: ‘/tmp/RtmprJwE6j/.future/immediateConditions’
[08:07:32.771] | Number of RDS files: 0
[08:07:32.771] | Returned conditions set:
[08:07:32.772] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.772] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:32.772] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:32.772] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:07:32.772] | : . ' , ; ` | : . New stack:
[08:07:32.771] |  list()
[08:07:32.775] readImmediateCondition() ... done
[08:07:32.772] | : . ' , ; ` | : . List of 1
[08:07:32.772] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.772] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.772] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.772] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.772] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.772] | : . ' , ; ` | : .     ...)  
[08:07:32.772] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.772] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.772] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:32.772] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.772] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.772] | : . ' , ; ` | : .     ...)  
[08:07:32.772] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.772] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.776] | : . ' , ; ` | : . Old stack:
[08:07:32.776] | : . ' , ; ` | : . List of 1
[08:07:32.776] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.776] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.776] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:32.776] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.776] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.776] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.776] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.776] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2a1c4620> 
[08:07:32.776] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.776] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.776] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.779] | : . ' , ; ` | : . Not identical
[08:07:32.779] | : . ' , ; ` | : . all.equal() for future ...
[08:07:32.785] readImmediateCondition() ...
[08:07:32.785] | Path: ‘/tmp/RtmprJwE6j/.future/immediateConditions’
[08:07:32.786] | Number of RDS files: 0
[08:07:32.786] | Returned conditions set:
[08:07:32.786] |  list()
[08:07:32.786] readImmediateCondition() ... done
[08:07:32.780] | : . ' , ; ` | : . ' List of 2
[08:07:32.780] | : . ' , ; ` | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.780] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.780] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.780] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:07:32.780] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.780] | : . ' , ; ` | : . '     ...)  
[08:07:32.780] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.780] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.780] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:32.780] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.780] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.780] | : . ' , ; ` | : . '     ...)  
[08:07:32.780] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.780] | : . ' , ; ` | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.780] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:32.780] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:07:32.780] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.780] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.780] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.780] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:32.780] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b2a1c4620> 
[08:07:32.780] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:32.780] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:32.787] | : . ' , ; ` | : . ' Formals differ
[08:07:32.787] | : . ' , ; ` | : . all.equal() for future ... done
[08:07:32.788] | : . ' , ; ` | : . Future strategies differ at level 1
[08:07:32.788] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:07:32.788] | : . ' , ; ` | : plan(): Setting new future backend stack:
[08:07:32.788] | : . ' , ; ` | : List of future strategies:
[08:07:32.788] | : . ' , ; ` | : 1. multicore:
[08:07:32.788] | : . ' , ; ` | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:32.788] | : . ' , ; ` | :    - tweaked: FALSE
[08:07:32.788] | : . ' , ; ` | :    - call: plan(strategy)
[08:07:32.788] | : . ' , ; ` | : List of 1
[08:07:32.788] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.788] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.788] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.788] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:32.788] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.788] | : . ' , ; ` | :     ...)  
[08:07:32.788] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.788] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.788] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:32.788] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.788] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.788] | : . ' , ; ` | :     ...)  
[08:07:32.788] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.788] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.792] | : . ' , ; ` | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:32.792] | : . ' , ; ` | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:32.792] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.792] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.792] | : . ' , ; ` | : plan(): nbrOfWorkers() = 2
[08:07:32.793] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:32.793] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.793] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:32.793] readImmediateCondition() ...
[08:07:32.793] | Path: ‘/tmp/RtmprJwE6j/.future/immediateConditions’
[08:07:32.794] | Number of RDS files: 0
[08:07:32.794] | Returned conditions set:
[08:07:32.794] |  list()
[08:07:32.794] readImmediateCondition() ... done
Plotting tile #4 of 4 ...
[08:07:32.795] value() for MulticoreFuture (<unnamed-8>) ...
[08:07:32.795] | result() for MulticoreFuture ...
[08:07:32.795] | : readImmediateCondition() ...
[08:07:32.796] | : . Path: ‘/tmp/RtmprJwE6j/.future/immediateConditions’
[08:07:32.796] | : . Number of RDS files: 0
[08:07:32.796] | : . Returned conditions set:
[08:07:32.796] | : .  list()
[08:07:32.796] | : readImmediateCondition() ... done
[08:07:32.797] | : result() for MulticoreFuture ...
[08:07:32.797] | : result() for MulticoreFuture ... done
[08:07:32.797] | : signalConditions() ...
[08:07:32.797] | : . include = ‘immediateCondition’
[08:07:32.797] | : . exclude = 
[08:07:32.797] | : . resignal = FALSE
[08:07:32.797] | : . Number of conditions: 8
[08:07:32.797] | : .  int 8
[08:07:32.798] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.798] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.798] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.798] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.798] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.798] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.798] | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.799] | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.799] | : signalConditions() ... done
[08:07:32.799] | result() for MulticoreFuture ... done
[08:07:32.799] | result() for MulticoreFuture ...
[08:07:32.799] | result() for MulticoreFuture ... done
[08:07:32.799] | signalConditions() ...
[08:07:32.799] | : include = ‘immediateCondition’
[08:07:32.799] | : exclude = 
[08:07:32.800] | : resignal = FALSE
[08:07:32.800] | : Number of conditions: 8
[08:07:32.800] | :  int 8
[08:07:32.800] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.800] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.800] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.801] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.801] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.801] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.801] | : Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.801] | : Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.801] | signalConditions() ... done
[08:07:32.801] | relay stdout ...
[08:07:32.801] | relay stdout ... done
[08:07:32.801] | check for misuse ...
[08:07:32.802] | check for misuse ... done
[08:07:32.802] | relay conditions ...
[08:07:32.802] | : Future state: ‘finished’
[08:07:32.802] | : result() for MulticoreFuture ...
[08:07:32.802] | : result() for MulticoreFuture ... done
[08:07:32.802] | : signalConditions() ...
[08:07:32.802] | : . include = ‘condition’
[08:07:32.802] | : . exclude = ‘immediateCondition’
[08:07:32.802] | : . resignal = TRUE
[08:07:32.803] | : . Number of conditions: 8
[08:07:32.803] | : .  int 8
[08:07:32.803] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.803] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.701] | : . ' , ; attachPackages() ...
[08:07:32.803] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.803] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.702] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:32.804] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.804] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.702] | : . ' , ; attachPackages() ... done
[08:07:32.804] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.804] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.702] | : . ' , ; attachPackages() ...
[08:07:32.804] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.804] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.703] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:32.804] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.804] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:32.703] | : . ' , ; attachPackages() ... done
[08:07:32.805] | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.805] | : . Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[08:07:32.805] | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:32.805] | : . Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:32.805] | : signalConditions() ... done
[08:07:32.805] | relay conditions ... done
[08:07:32.805] value() for MulticoreFuture (<unnamed-8>) ... done

> close.screen()
[1] 1 2 3 4 5 6 7 8

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multicore') ... DONE
- plan('multisession') ...
[08:07:32.807] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.807] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:07:32.807] | : all.equal() for FutureStrategyList ...
[08:07:32.807] | : . New stack:
[08:07:32.807] | : . List of 1
[08:07:32.807] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:07:32.807] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.807] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:07:32.807] | : .   ..- attr(*, "init")= logi TRUE
[08:07:32.807] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:32.807] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:32.807] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:32.807] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:32.807] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:07:32.807] | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:32.807] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.811] | : . Old stack:
[08:07:32.811] | : . List of 1
[08:07:32.811] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.811] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.811] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.811] | : .   ..- attr(*, "init")= chr "done"
[08:07:32.811] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.811] | : .     ...)  
[08:07:32.811] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.811] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.811] | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:32.811] | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.811] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.811] | : .     ...)  
[08:07:32.811] | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.811] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.816] | : . Not identical
[08:07:32.816] | : . all.equal() for future ...
[08:07:32.816] | : . ' List of 2
[08:07:32.816] | : . '  $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:07:32.816] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.816] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:07:32.816] | : . '   ..- attr(*, "init")= logi TRUE
[08:07:32.816] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:32.816] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:32.816] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:32.816] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:32.816] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:07:32.816] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:32.816] | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:32.816] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:07:32.816] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:32.816] | : . '   ..- attr(*, "init")= chr "done"
[08:07:32.816] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.816] | : . '     ...)  
[08:07:32.816] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.816] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.816] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:32.816] | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558b29e93278> 
[08:07:32.816] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:32.816] | : . '     ...)  
[08:07:32.816] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:32.822] | : . ' Formals differ
[08:07:32.822] | : . all.equal() for future ... done
[08:07:32.822] | : . Future strategies differ at level 1
[08:07:32.822] | : all.equal() for FutureStrategyList ... done
[08:07:32.823] | : plan(): Setting new future backend stack:
[08:07:32.823] | : List of future strategies:
[08:07:32.823] | : 1. multisession:
[08:07:32.823] | :    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:32.823] | :    - tweaked: FALSE
[08:07:32.823] | :    - call: plan(strategy)
[08:07:32.823] | : List of 1
[08:07:32.823] | :  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:07:32.823] | :     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.823] | :   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:07:32.823] | :   ..- attr(*, "init")= logi TRUE
[08:07:32.823] | :   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:32.823] | :     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:32.823] | :   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:32.823] | :   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:32.823] | :   ..- attr(*, "untweakable")= chr "persistent"
[08:07:32.823] | :   ..- attr(*, "call")= language plan(strategy)
[08:07:32.823] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:32.826] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:07:32.826] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:32.826] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:32.826] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:32.827] | : . Legacy shutdown of cluster workers ...
[08:07:32.827] | : . ' Stopping existing cluster ...
[08:07:32.827] | : . ' , No pre-existing cluster. Skipping
[08:07:32.827] | : . ' Stopping existing cluster ... done
[08:07:32.828] | : . Legacy shutdown of cluster workers ... done
[08:07:32.828] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:07:32.828] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:07:32.828] | : . function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:07:32.828] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:32.828] | : .  - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:07:32.828] | : .  - attr(*, "init")= logi TRUE
[08:07:32.828] | : .  - attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:32.828] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:32.828] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:32.828] | : .  - attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:32.828] | : .  - attr(*, "untweakable")= chr "persistent"
[08:07:32.828] | : .  - attr(*, "call")= language plan(strategy)
[08:07:32.830] | : . init: TRUE
[08:07:32.830] | : . makeFutureBackend(<multisession>) ...
[08:07:32.831] | : . ' Backend function: <‘NULL’>
[08:07:32.831] | : . ' Evaluator tweak arguments: [n=0]
[08:07:32.831] | : . '  list()
[08:07:32.831] | : . ' Evaluator formal arguments: [n=4]
[08:07:32.831] | : . '  list()
[08:07:32.833] | : . ' Backend factory arguments: [n=4]
[08:07:32.833] | : . ' Dotted pair list of 4
[08:07:32.833] | : . '  $ workers     : language availableCores()
[08:07:32.833] | : . '  $ rscript_libs: language .libPaths()
[08:07:32.833] | : . '  $ gc          : logi FALSE
[08:07:32.833] | : . '  $ earlySignal : logi FALSE
[08:07:32.834] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ...
[08:07:32.835] | : . ' , Arguments:
[08:07:32.835] | : . ' , List of 5
[08:07:32.835] | : . ' ,  $ workers     : Named int 2
[08:07:32.835] | : . ' ,   ..- attr(*, "names")= chr "mc.cores"
[08:07:32.835] | : . ' ,  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:07:32.835] | : . ' ,  $ interrupts  : logi TRUE
[08:07:32.835] | : . ' ,  $ gc          : logi FALSE
[08:07:32.835] | : . ' ,  $ earlySignal : logi FALSE
[08:07:32.839] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[08:07:32.839] | : . ' , ; workers: 2
[08:07:32.839] | : . ' , ; getCluster() ...
[08:07:32.839] | : . ' , ; getCluster() ... done
[08:07:32.839] | : . ' , ; Stopping existing cluster ...
[08:07:32.839] | : . ' , ; ` No pre-existing cluster. Skipping
[08:07:32.839] | : . ' , ; Stopping existing cluster ... done
[08:07:32.839] | : . ' , ; Starting new cluster ...
[08:07:32.839] | : . ' , ; ` makeCluster(workers, ...) ...
[08:07:32.840] | : . ' , ; ` | Arguments:
[08:07:32.840] | : . ' , ; ` | List of 2
[08:07:32.840] | : . ' , ; ` |  $             : int 2
[08:07:32.840] | : . ' , ; ` |  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:07:32.841] | : . ' , ; ` | .makeCluster() ...
[08:07:32.841] | : . ' , ; ` | : workers: ‘2’
[08:07:32.841] | : . ' , ; ` | : R_FUTURE_PLAN: NA
[08:07:32.841] | : . ' , ; ` | : parallelly::makeClusterPSOCK() arguments:
[08:07:32.841] | : . ' , ; ` | : List of 2
[08:07:32.841] | : . ' , ; ` | :  $             : int 2
[08:07:32.841] | : . ' , ; ` | :  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:07:33.357] | : . ' , ; ` | : Generated cluster UUID
[08:07:33.357] | : . ' , ; ` | : Cluster UUID: ‘31027bd0e5612620187a694a5df8390c’
[08:07:33.357] | : . ' , ; ` | : Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:33.360] | : . ' , ; ` | .makeCluster() ... done
[08:07:33.360] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:33.361] | : . ' , ; ` makeCluster(workers, ...) ... done
[08:07:33.361] | : . ' , ; ` Number of workers: 2
[08:07:33.362] | : . ' , ; ` Workers UUID: ‘31027bd0e5612620187a694a5df8390c’
[08:07:33.362] | : . ' , ; Starting new cluster ... done
[08:07:33.362] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[08:07:33.362] | : . ' , Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:33.362] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ... done
[08:07:33.362] | : . makeFutureBackend(<multisession>) ... done
[08:07:33.362] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:33.363] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:33.363] | : . plan(): nbrOfWorkers() = 2
[08:07:33.363] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:07:33.363] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library(future)

> library(graphics)

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1]  9 10 11 12

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[08:07:33.367] | future(..., label = NULL) ...
[08:07:33.367] | : lazy: TRUE
[08:07:33.367] | : stdout: TRUE
[08:07:33.367] | : conditions: [n=1] ‘condition’
[08:07:33.367] | : gc: FALSE
[08:07:33.367] | : earlySignal: FALSE
[08:07:33.367] | : getGlobalsAndPackages() ...
[08:07:33.367] | : . Searching for globals ...
[08:07:33.396] | : . ' globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:33.396] | : . Searching for globals ... done
[08:07:33.396] | : . Resolving globals: FALSE
[08:07:33.396] | : . Search for packages associated with the globals ...
[08:07:33.397] | : . ' Packages associated with globals: [2] ‘base’, ‘future’
[08:07:33.397] | : . ' Packages: [2] ‘base’, ‘future’
[08:07:33.397] | : . Search for packages associated with the globals ... done
[08:07:33.397] | : . Packages after dropping 'base': [1] ‘future’
[08:07:33.398] | : . Packages after dropping non-attached packages: [1] ‘future’
[08:07:33.398] | : . globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:33.398] | : . packages: [1] ‘future’
[08:07:33.398] | : getGlobalsAndPackages() ... done
[08:07:33.398] | future(..., label = NULL) ... done
 2[08:07:33.403] | future(..., label = NULL) ...
[08:07:33.403] | : lazy: TRUE
[08:07:33.403] | : stdout: TRUE
[08:07:33.404] | : conditions: [n=1] ‘condition’
[08:07:33.404] | : gc: FALSE
[08:07:33.404] | : earlySignal: FALSE
[08:07:33.404] | : getGlobalsAndPackages() ...
[08:07:33.404] | : . Searching for globals ...
[08:07:33.436] | : . ' globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:33.436] | : . Searching for globals ... done
[08:07:33.436] | : . Resolving globals: FALSE
[08:07:33.436] | : . Search for packages associated with the globals ...
[08:07:33.436] | : . ' Packages associated with globals: [2] ‘base’, ‘future’
[08:07:33.437] | : . ' Packages: [2] ‘base’, ‘future’
[08:07:33.437] | : . Search for packages associated with the globals ... done
[08:07:33.437] | : . Packages after dropping 'base': [1] ‘future’
[08:07:33.437] | : . Packages after dropping non-attached packages: [1] ‘future’
[08:07:33.437] | : . globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:33.437] | : . packages: [1] ‘future’
[08:07:33.437] | : getGlobalsAndPackages() ... done
[08:07:33.438] | future(..., label = NULL) ... done
 3[08:07:33.438] | future(..., label = NULL) ...
[08:07:33.438] | : lazy: TRUE
[08:07:33.438] | : stdout: TRUE
[08:07:33.438] | : conditions: [n=1] ‘condition’
[08:07:33.438] | : gc: FALSE
[08:07:33.438] | : earlySignal: FALSE
[08:07:33.438] | : getGlobalsAndPackages() ...
[08:07:33.438] | : . Searching for globals ...
[08:07:33.461] | : . ' globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:33.461] | : . Searching for globals ... done
[08:07:33.461] | : . Resolving globals: FALSE
[08:07:33.462] | : . Search for packages associated with the globals ...
[08:07:33.462] | : . ' Packages associated with globals: [2] ‘base’, ‘future’
[08:07:33.462] | : . ' Packages: [2] ‘base’, ‘future’
[08:07:33.462] | : . Search for packages associated with the globals ... done
[08:07:33.462] | : . Packages after dropping 'base': [1] ‘future’
[08:07:33.463] | : . Packages after dropping non-attached packages: [1] ‘future’
[08:07:33.463] | : . globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:33.463] | : . packages: [1] ‘future’
[08:07:33.463] | : getGlobalsAndPackages() ... done
[08:07:33.463] | future(..., label = NULL) ... done
 4[08:07:33.463] | future(..., label = NULL) ...
[08:07:33.463] | : lazy: TRUE
[08:07:33.464] | : stdout: TRUE
[08:07:33.464] | : conditions: [n=1] ‘condition’
[08:07:33.464] | : gc: FALSE
[08:07:33.464] | : earlySignal: FALSE
[08:07:33.464] | : getGlobalsAndPackages() ...
[08:07:33.464] | : . Searching for globals ...
[08:07:33.486] | : . ' globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:33.487] | : . Searching for globals ... done
[08:07:33.487] | : . Resolving globals: FALSE
[08:07:33.487] | : . Search for packages associated with the globals ...
[08:07:33.487] | : . ' Packages associated with globals: [2] ‘base’, ‘future’
[08:07:33.487] | : . ' Packages: [2] ‘base’, ‘future’
[08:07:33.488] | : . Search for packages associated with the globals ... done
[08:07:33.488] | : . Packages after dropping 'base': [1] ‘future’
[08:07:33.488] | : . Packages after dropping non-attached packages: [1] ‘future’
[08:07:33.488] | : . globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:33.488] | : . packages: [1] ‘future’
[08:07:33.488] | : getGlobalsAndPackages() ... done
[08:07:33.489] | future(..., label = NULL) ... done

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[08:07:33.499] | resolved() for Future (<unnamed-9>) ...
[08:07:33.499] | : state: ‘created’
[08:07:33.499] | : run: TRUE
[08:07:33.499] | : run() ...
[08:07:33.499] | : . run() for ‘Future’ (<unnamed-9>) ...
[08:07:33.499] | : . ' state: ‘created’
[08:07:33.500] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:33.500] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:33.500] | : . ' Using MultisessionFutureBackend ...
[08:07:33.500] | : . ' , Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:07:33.500] | : . ' , Launching futures ...
[08:07:33.500] | : . ' , ; launchFuture() for ClusterFutureBackend ...
[08:07:33.500] | : . ' , ; ` Workers: [n=2]
[08:07:33.501] | : . ' , ; ` Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:33.502] | : . ' , ; ` FutureRegistry: ‘workers-31027bd0e5612620187a694a5df8390c’
[08:07:33.502] | : . ' , ; ` requestWorker() ...
[08:07:33.502] | : . ' , ; ` | requestNode() ...
[08:07:33.502] | : . ' , ; ` | : Number of workers: 2
[08:07:33.503] | : . ' , ; ` | : Polling for a free worker ...
[08:07:33.503] | : . ' , ; ` | : . FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ...
[08:07:33.503] | : . ' , ; ` | : . ' Created empty registry ‘workers-31027bd0e5612620187a694a5df8390c’
[08:07:33.503] | : . ' , ; ` | : . ' Listing all futures
[08:07:33.503] | : . ' , ; ` | : . ' Number of registered futures: 0
[08:07:33.503] | : . ' , ; ` | : . FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ... done
[08:07:33.503] | : . ' , ; ` | : . Total time: 0
[08:07:33.503] | : . ' , ; ` | : Polling for a free worker ... done
[08:07:33.503] | : . ' , ; ` | : FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ...
[08:07:33.503] | : . ' , ; ` | : . Listing all futures
[08:07:33.504] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:33.504] | : . ' , ; ` | : FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ... done
[08:07:33.504] | : . ' , ; ` | : avail: [n=2] ‘1’, ‘2’
[08:07:33.504] | : . ' , ; ` | : Index of first available worker: 1
[08:07:33.504] | : . ' , ; ` | : Validate that the worker is functional ...
[08:07:33.572] | : . ' , ; ` | : . Worker is functional
[08:07:33.572] | : . ' , ; ` | : . FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ...
[08:07:33.572] | : . ' , ; ` | : . ' Listing all futures
[08:07:33.572] | : . ' , ; ` | : . ' Number of registered futures: 0
[08:07:33.572] | : . ' , ; ` | : . FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ... done
[08:07:33.573] | : . ' , ; ` | : Validate that the worker is functional ... done
[08:07:33.573] | : . ' , ; ` | requestNode() ... done
[08:07:33.573] | : . ' , ; ` | cluster node index: 1
[08:07:33.573] | : . ' , ; ` requestWorker() ... done
[08:07:33.573] | : . ' , ; ` eraseGlobalEnvironment() ...
[08:07:33.574] | : . ' , ; ` eraseGlobalEnvironment() ... done
[08:07:33.574] | : . ' , ; ` launchFuture() ...
[08:07:33.574] | : . ' , ; ` | cluster node index: 1
[08:07:33.574] | : . ' , ; ` | getFutureData() ...
[08:07:33.574] | : . ' , ; ` | : getFutureCore() ...
[08:07:33.574] | : . ' , ; ` | : . Packages needed by the future expression (n = 1): ‘future’
[08:07:33.574] | : . ' , ; ` | : getFutureCore() ... done
[08:07:33.574] | : . ' , ; ` | : getFutureCapture() ...
[08:07:33.575] | : . ' , ; ` | : getFutureCapture() ... done
[08:07:33.575] | : . ' , ; ` | : getFutureContext() ...
[08:07:33.575] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:33.575] | : . ' , ; ` | : . ' Getting stack without first backend: [n=0] 
[08:07:33.575] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:33.575] | : . ' , ; ` | : . Packages needed by future backend (n = 0): <none>
[08:07:33.575] | : . ' , ; ` | : getFutureContext() ... done
[08:07:33.575] | : . ' , ; ` | getFutureData() ... done
[08:07:33.576] | : . ' , ; ` | FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'add', earlySignal = 0) ...
[08:07:33.576] | : . ' , ; ` | : Appended future to position #1
[08:07:33.576] | : . ' , ; ` | : Number of registered futures: 1
[08:07:33.576] | : . ' , ; ` | FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'add', earlySignal = 0) ... done
[08:07:33.577] | : . ' , ; ` launchFuture() ... done
[08:07:33.577] | : . ' , ; ` MultisessionFuture started
[08:07:33.577] | : . ' , ; launchFuture() for ClusterFutureBackend ... done
[08:07:33.577] | : . ' , Launching futures ... done
[08:07:33.577] | : . ' , Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:33.577] | : . ' Using MultisessionFutureBackend ... done
[08:07:33.577] | : . run() for ‘Future’ (<unnamed-9>) ... done
[08:07:33.577] | : run() ... done
[08:07:33.577] | : resolved() ...
[08:07:33.578] | : . resolved() for MultisessionFuture (<unnamed-9>) ...
[08:07:33.578] | : . ' Cluster node socket connection: index=4, id=409
[08:07:33.578] | : . ' assertValidConnection() ...
[08:07:33.579] | : . ' , cluster node index: 1
[08:07:33.579] | : . ' assertValidConnection() ... done
[08:07:33.589] | : . ' socketSelect(list(<connection #4 (id=409)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:33.589] | : . resolved() for MultisessionFuture (<unnamed-9>) ... done
[08:07:33.590] | : . resolved: FALSE
[08:07:33.590] | : resolved() ... done
[08:07:33.590] | resolved() for Future (<unnamed-9>) ... done
[08:07:33.590] | resolved() for Future (<unnamed-10>) ...
[08:07:33.590] | : state: ‘created’
[08:07:33.590] | : run: TRUE
[08:07:33.590] | : run() ...
[08:07:33.590] | : . run() for ‘Future’ (<unnamed-10>) ...
[08:07:33.591] | : . ' state: ‘created’
[08:07:33.591] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:33.591] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:33.591] | : . ' Using MultisessionFutureBackend ...
[08:07:33.591] | : . ' , Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:07:33.591] | : . ' , Launching futures ...
[08:07:33.591] | : . ' , ; launchFuture() for ClusterFutureBackend ...
[08:07:33.591] | : . ' , ; ` Workers: [n=2]
[08:07:33.592] | : . ' , ; ` Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:33.593] | : . ' , ; ` FutureRegistry: ‘workers-31027bd0e5612620187a694a5df8390c’
[08:07:33.593] | : . ' , ; ` requestWorker() ...
[08:07:33.593] | : . ' , ; ` | requestNode() ...
[08:07:33.594] | : . ' , ; ` | : Number of workers: 2
[08:07:33.594] | : . ' , ; ` | : Polling for a free worker ...
[08:07:33.594] | : . ' , ; ` | : . FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ...
[08:07:33.594] | : . ' , ; ` | : . ' Listing all futures
[08:07:33.594] | : . ' , ; ` | : . ' Number of registered futures: 1
[08:07:33.594] | : . ' , ; ` | : . FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ... done
[08:07:33.594] | : . ' , ; ` | : . Total time: 0
[08:07:33.594] | : . ' , ; ` | : Polling for a free worker ... done
[08:07:33.594] | : . ' , ; ` | : FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ...
[08:07:33.594] | : . ' , ; ` | : . Listing all futures
[08:07:33.595] | : . ' , ; ` | : . Number of registered futures: 1
[08:07:33.595] | : . ' , ; ` | : FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ... done
[08:07:33.595] | : . ' , ; ` | : avail: [n=2] ‘2’
[08:07:33.595] | : . ' , ; ` | : Index of first available worker: 2
[08:07:33.595] | : . ' , ; ` | : Validate that the worker is functional ...
[08:07:33.677] | : . ' , ; ` | : . Worker is functional
[08:07:33.678] | : . ' , ; ` | : . FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ...
[08:07:33.678] | : . ' , ; ` | : . ' Listing all futures
[08:07:33.678] | : . ' , ; ` | : . ' Number of registered futures: 1
[08:07:33.678] | : . ' , ; ` | : . FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ... done
[08:07:33.679] | : . ' , ; ` | : Validate that the worker is functional ... done
[08:07:33.679] | : . ' , ; ` | requestNode() ... done
[08:07:33.679] | : . ' , ; ` | cluster node index: 2
[08:07:33.679] | : . ' , ; ` requestWorker() ... done
[08:07:33.679] | : . ' , ; ` eraseGlobalEnvironment() ...
[08:07:33.680] | : . ' , ; ` eraseGlobalEnvironment() ... done
[08:07:33.680] | : . ' , ; ` launchFuture() ...
[08:07:33.680] | : . ' , ; ` | cluster node index: 2
[08:07:33.681] | : . ' , ; ` | getFutureData() ...
[08:07:33.681] | : . ' , ; ` | : getFutureCore() ...
[08:07:33.681] | : . ' , ; ` | : . Packages needed by the future expression (n = 1): ‘future’
[08:07:33.681] | : . ' , ; ` | : getFutureCore() ... done
[08:07:33.681] | : . ' , ; ` | : getFutureCapture() ...
[08:07:33.682] | : . ' , ; ` | : getFutureCapture() ... done
[08:07:33.682] | : . ' , ; ` | : getFutureContext() ...
[08:07:33.682] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:33.682] | : . ' , ; ` | : . ' Getting stack without first backend: [n=0] 
[08:07:33.682] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:33.683] | : . ' , ; ` | : . Packages needed by future backend (n = 0): <none>
[08:07:33.683] | : . ' , ; ` | : getFutureContext() ... done
[08:07:33.683] | : . ' , ; ` | getFutureData() ... done
[08:07:33.684] | : . ' , ; ` | FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'add', earlySignal = 0) ...
[08:07:33.684] | : . ' , ; ` | : Appended future to position #2
[08:07:33.684] | : . ' , ; ` | : Number of registered futures: 2
[08:07:33.685] | : . ' , ; ` | FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'add', earlySignal = 0) ... done
[08:07:33.685] | : . ' , ; ` launchFuture() ... done
[08:07:33.685] | : . ' , ; ` MultisessionFuture started
[08:07:33.685] | : . ' , ; launchFuture() for ClusterFutureBackend ... done
[08:07:33.685] | : . ' , Launching futures ... done
[08:07:33.686] | : . ' , Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:33.686] | : . ' Using MultisessionFutureBackend ... done
[08:07:33.686] | : . run() for ‘Future’ (<unnamed-10>) ... done
[08:07:33.686] | : run() ... done
[08:07:33.686] | : resolved() ...
[08:07:33.687] | : . resolved() for MultisessionFuture (<unnamed-10>) ...
[08:07:33.687] | : . ' Cluster node socket connection: index=5, id=410
[08:07:33.687] | : . ' assertValidConnection() ...
[08:07:33.687] | : . ' , cluster node index: 2
[08:07:33.688] | : . ' assertValidConnection() ... done
[08:07:33.698] | : . ' socketSelect(list(<connection #5 (id=410)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:33.699] | : . resolved() for MultisessionFuture (<unnamed-10>) ... done
[08:07:33.699] | : . resolved: FALSE
[08:07:33.699] | : resolved() ... done
[08:07:33.699] | resolved() for Future (<unnamed-10>) ... done
[08:07:33.699] | resolved() for Future (<unnamed-11>) ...
[08:07:33.699] | : state: ‘created’
[08:07:33.700] | : run: TRUE
[08:07:33.700] | : run() ...
[08:07:33.700] | : . run() for ‘Future’ (<unnamed-11>) ...
[08:07:33.700] | : . ' state: ‘created’
[08:07:33.700] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:33.700] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:33.700] | : . ' Using MultisessionFutureBackend ...
[08:07:33.700] | : . ' , Number of futures since start: 2 (2 created, 2 launched, 0 finished)
[08:07:33.700] | : . ' , Launching futures ...
[08:07:33.701] | : . ' , ; launchFuture() for ClusterFutureBackend ...
[08:07:33.701] | : . ' , ; ` Workers: [n=2]
[08:07:33.701] | : . ' , ; ` Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:33.702] | : . ' , ; ` FutureRegistry: ‘workers-31027bd0e5612620187a694a5df8390c’
[08:07:33.703] | : . ' , ; ` requestWorker() ...
[08:07:33.703] | : . ' , ; ` | requestNode() ...
[08:07:33.703] | : . ' , ; ` | : Number of workers: 2
[08:07:33.703] | : . ' , ; ` | : Polling for a free worker ...
[08:07:33.703] | : . ' , ; ` | : . FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ...
[08:07:33.703] | : . ' , ; ` | : . ' Listing all futures
[08:07:33.703] | : . ' , ; ` | : . ' Number of registered futures: 2
[08:07:33.703] | : . ' , ; ` | : . FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ... done
[08:07:33.703] | : . ' , ; ` | : . Poll #1 (0): usedNodes() = 2, workers = 2
[08:07:33.714] | : . ' , ; ` | : . FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'collect-first', earlySignal = 1) ...
[08:07:33.714] | : . ' , ; ` | : . ' collectValues('workers-31027bd0e5612620187a694a5df8390c', firstOnly = TRUE) ...
[08:07:33.714] | : . ' , ; ` | : . ' , resolved() for MultisessionFuture (<unnamed-9>) ...
[08:07:33.714] | : . ' , ; ` | : . ' , ; Cluster node socket connection: index=4, id=409
[08:07:33.715] | : . ' , ; ` | : . ' , ; assertValidConnection() ...
[08:07:33.715] | : . ' , ; ` | : . ' , ; ` cluster node index: 1
[08:07:33.715] | : . ' , ; ` | : . ' , ; assertValidConnection() ... done
[08:07:33.715] | : . ' , ; ` | : . ' , ; receiveMessageFromWorker() for ClusterFuture ...
[08:07:33.716] | : . ' , ; ` | : . ' , ; ` cluster node index: 1
[08:07:33.716] | : . ' , ; ` | : . ' , ; ` [1] TRUE
[08:07:33.716] | : . ' , ; ` | : . ' , ; ` received data:
[08:07:33.716] | : . ' , ; ` | : . ' , ; ` List of 5
[08:07:33.716] | : . ' , ; ` | : . ' , ; `  $ type   : chr "VALUE"
[08:07:33.716] | : . ' , ; ` | : . ' , ; `  $ value  :List of 16
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   ..$ value              : 'Mandelbrot' int [1:25, 1:25] 1 1 1 1 1 1 1 1 1 1 ...
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. ..- attr(*, "params")=List of 3
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. ..$ Z      : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. .. ..- attr(*, "region")=List of 2
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. .. .. ..$ xrange: num [1:2] -2.25 -0.781
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. .. .. ..$ yrange: num [1:2] -1.5 -0.0306
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. .. ..- attr(*, "tile")= int [1:2] 1 1
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. ..$ maxIter: int 200
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. ..$ tau    : num 2
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   ..$ visible            : logi TRUE
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   ..$ stdout             : chr ""
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   ..$ conditions         :List of 2
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. ..$ :List of 2
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. ..$ condition:List of 2
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. .. ..$ message: chr "Calculating tile #1 of 4 ..."
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. .. ..$ call   : language message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 69 5 69 79 5 79 69 69
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x558b2c1ef530> 
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. ..$ signaled : int 0
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. ..$ :List of 2
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. ..$ condition:List of 2
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. .. ..$ message: chr " done\n"
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. .. ..$ call   : language message(" done")
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 75 5 75 20 5 20 75 75
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x558b2c1ef530> 
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. ..$ signaled : int 0
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   ..$ rng                : logi FALSE
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   ..$ seed               : NULL
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   ..$ misuseGlobalEnv    : NULL
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   ..$ misuseConnections  :List of 3
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. ..$ added   : NULL
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. ..$ removed : NULL
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. ..$ replaced: NULL
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   ..$ misuseDevices      : NULL
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   ..$ misuseDefaultDevice: list()
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:33"
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:33"
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   ..$ uuid               : chr [1:2] "cbaccf8a178df2b17a9dba2ea7aed6c6" "9"
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   ..$ session_uuid       : chr "25c51c0ed227fb5f9e65fb69db80956a"
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. ..- attr(*, "source")=List of 5
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. ..$ host  : Named chr "28bb34de9501"
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. ..$ pid   : int 67425
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:07:33"
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. ..$ random: int 2147483647
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   ..$ r_info             :List of 4
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. .. ..$ : int [1:3] 4 5 1
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. ..$ os           : chr "unix"
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. ..$ os_name      : chr "Linux"
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   .. ..$ captures_utf8: logi TRUE
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   ..$ version            : chr "1.8"
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   ..- attr(*, "class")= chr "FutureResult"
[08:07:33.716] | : . ' , ; ` | : . ' , ; `  $ success: logi TRUE
[08:07:33.716] | : . ' , ; ` | : . ' , ; `  $ time   : 'proc_time' Named num [1:5] 0.072 0.005 0.076 0 0
[08:07:33.716] | : . ' , ; ` | : . ' , ; `   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:33.716] | : . ' , ; ` | : . ' , ; `  $ tag    : NULL
[08:07:33.736] | : . ' , ; ` | : . ' , ; ` Received FutureResult
[08:07:33.736] | : . ' , ; ` | : . ' , ; ` FutureResult:
[08:07:33.736] | : . ' , ; ` | : . ' , ; ` value: ‘Mandelbrot’, ‘matrix’, ‘array’
[08:07:33.736] | : . ' , ; ` | : . ' , ; ` visible: TRUE
[08:07:33.736] | : . ' , ; ` | : . ' , ; ` stdout: character
[08:07:33.736] | : . ' , ; ` | : . ' , ; ` conditions: [n = 2] simpleMessage, simpleMessage
[08:07:33.736] | : . ' , ; ` | : . ' , ; ` RNG used: FALSE
[08:07:33.736] | : . ' , ; ` | : . ' , ; ` duration: 0.07355571 secs (started 2025-06-17 08:07:33.618713)
[08:07:33.736] | : . ' , ; ` | : . ' , ; ` version: 1.8
[08:07:33.736] | : . ' , ; ` | : . ' , ; ` FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'remove', earlySignal = 0) ...
[08:07:33.737] | : . ' , ; ` | : . ' , ; ` | Removed future from position #1
[08:07:33.737] | : . ' , ; ` | : . ' , ; ` | Number of registered futures: 1
[08:07:33.737] | : . ' , ; ` | : . ' , ; ` FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'remove', earlySignal = 0) ... done
[08:07:33.737] | : . ' , ; ` | : . ' , ; ` Erased future from future backend
[08:07:33.737] | : . ' , ; ` | : . ' , ; ` result() for ClusterFuture ...
[08:07:33.737] | : . ' , ; ` | : . ' , ; ` | result already collected: FutureResult
[08:07:33.737] | : . ' , ; ` | : . ' , ; ` result() for ClusterFuture ... done
[08:07:33.738] | : . ' , ; ` | : . ' , ; ` signalConditions() ...
[08:07:33.738] | : . ' , ; ` | : . ' , ; ` | include = ‘immediateCondition’
[08:07:33.738] | : . ' , ; ` | : . ' , ; ` | exclude = 
[08:07:33.738] | : . ' , ; ` | : . ' , ; ` | resignal = FALSE
[08:07:33.738] | : . ' , ; ` | : . ' , ; ` | Number of conditions: 2
[08:07:33.738] | : . ' , ; ` | : . ' , ; ` |  int 2
[08:07:33.739] | : . ' , ; ` | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.739] | : . ' , ; ` | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.739] | : . ' , ; ` | : . ' , ; ` signalConditions() ... done
[08:07:33.739] | : . ' , ; ` | : . ' , ; receiveMessageFromWorker() for ClusterFuture ... done
[08:07:33.739] | : . ' , ; ` | : . ' , ; receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:07:33.739] | : . ' , ; ` | : . ' , resolved() for MultisessionFuture (<unnamed-9>) ... done
[08:07:33.739] | : . ' , ; ` | : . ' , assertFutureResult() ...
[08:07:33.739] | : . ' , ; ` | : . ' , ; Future uuid: cbaccf8a178df2b17a9dba2ea7aed6c6[08:07:33.739] | : . ' , ; ` | : . ' , ; Future uuid: 9
[08:07:33.739] | : . ' , ; ` | : . ' , ; identical; success
[08:07:33.739] | : . ' , ; ` | : . ' , assertFutureResult() ... done
[08:07:33.740] | : . ' , ; ` | : . ' , Future at position #1 is resolved ...
[08:07:33.740] | : . ' , ; ` | : . ' , ; value() for MultisessionFuture (<unnamed-9>) ...
[08:07:33.740] | : . ' , ; ` | : . ' , ; ` result() for ClusterFuture ...
[08:07:33.740] | : . ' , ; ` | : . ' , ; ` | result already collected: FutureResult
[08:07:33.740] | : . ' , ; ` | : . ' , ; ` result() for ClusterFuture ... done
[08:07:33.740] | : . ' , ; ` | : . ' , ; ` result() for ClusterFuture ...
[08:07:33.740] | : . ' , ; ` | : . ' , ; ` | result already collected: FutureResult
[08:07:33.740] | : . ' , ; ` | : . ' , ; ` result() for ClusterFuture ... done
[08:07:33.740] | : . ' , ; ` | : . ' , ; ` signalConditions() ...
[08:07:33.741] | : . ' , ; ` | : . ' , ; ` | include = ‘immediateCondition’
[08:07:33.741] | : . ' , ; ` | : . ' , ; ` | exclude = 
[08:07:33.741] | : . ' , ; ` | : . ' , ; ` | resignal = FALSE
[08:07:33.741] | : . ' , ; ` | : . ' , ; ` | Number of conditions: 2
[08:07:33.741] | : . ' , ; ` | : . ' , ; ` |  int 2
[08:07:33.741] | : . ' , ; ` | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.742] | : . ' , ; ` | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.742] | : . ' , ; ` | : . ' , ; ` signalConditions() ... done
[08:07:33.742] | : . ' , ; ` | : . ' , ; ` check for misuse ...
[08:07:33.742] | : . ' , ; ` | : . ' , ; ` check for misuse ... done
[08:07:33.742] | : . ' , ; ` | : . ' , ; value() for MultisessionFuture (<unnamed-9>) ... done
[08:07:33.742] | : . ' , ; ` | : . ' , Future at position #1 is resolved ... done
[08:07:33.742] | : . ' , ; ` | : . ' collectValues('workers-31027bd0e5612620187a694a5df8390c', firstOnly = TRUE) ... done
[08:07:33.742] | : . ' , ; ` | : . ' Remove collected futures ...
[08:07:33.743] | : . ' , ; ` | : . ' , Indices of futures to drop: [n=1] ‘1’
[08:07:33.743] | : . ' , ; ` | : . ' Remove collected futures ... done
[08:07:33.743] | : . ' , ; ` | : . FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'collect-first', earlySignal = 1) ... done
[08:07:33.743] | : . ' , ; ` | : . Early signaling of 2 future candidates ...
[08:07:33.743] | : . ' , ; ` | : . Number of futures with early signaling requested: 0
[08:07:33.743] | : . ' , ; ` | : . Early signaling of 2 future candidates ... done
[08:07:33.743] | : . ' , ; ` | : . Number of registered futures: 2
[08:07:33.743] | : . ' , ; ` | : Polling for a free worker ... done
[08:07:33.743] | : . ' , ; ` | : FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ...
[08:07:33.744] | : . ' , ; ` | : . Listing all futures
[08:07:33.744] | : . ' , ; ` | : . Number of registered futures: 1
[08:07:33.744] | : . ' , ; ` | : FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ... done
[08:07:33.744] | : . ' , ; ` | : Total time: 0.0403869152069092
[08:07:33.744] | : . ' , ; ` | requestNode() ... done
[08:07:33.744] | : . ' , ; ` | FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ...
[08:07:33.744] | : . ' , ; ` | : Listing all futures
[08:07:33.744] | : . ' , ; ` | : Number of registered futures: 1
[08:07:33.744] | : . ' , ; ` | FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ... done
[08:07:33.744] | : . ' , ; ` | avail: [n=2] ‘1’
[08:07:33.745] | : . ' , ; ` | Index of first available worker: 1
[08:07:33.745] | : . ' , ; ` | Validate that the worker is functional ...
[08:07:33.807] | : . ' , ; ` | : Worker is functional
[08:07:33.807] | : . ' , ; ` | : FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ...
[08:07:33.807] | : . ' , ; ` | : . Listing all futures
[08:07:33.807] | : . ' , ; ` | : . Number of registered futures: 1
[08:07:33.807] | : . ' , ; ` | : FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ... done
[08:07:33.809] | : . ' , ; ` | Validate that the worker is functional ... done
[08:07:33.809] | : . ' , ; ` requestWorker() ... done
[08:07:33.809] | : . ' , ; ` cluster node index: 1
[08:07:33.810] | : . ' , ; launchFuture() for ClusterFutureBackend ... done
[08:07:33.810] | : . ' , ; eraseGlobalEnvironment() ...
[08:07:33.810] | : . ' , ; eraseGlobalEnvironment() ... done
[08:07:33.810] | : . ' , ; launchFuture() ...
[08:07:33.810] | : . ' , ; ` cluster node index: 1
[08:07:33.810] | : . ' , ; ` getFutureData() ...
[08:07:33.811] | : . ' , ; ` | getFutureCore() ...
[08:07:33.811] | : . ' , ; ` | : Packages needed by the future expression (n = 1): ‘future’
[08:07:33.811] | : . ' , ; ` | getFutureCore() ... done
[08:07:33.811] | : . ' , ; ` | getFutureCapture() ...
[08:07:33.811] | : . ' , ; ` | getFutureCapture() ... done
[08:07:33.811] | : . ' , ; ` | getFutureContext() ...
[08:07:33.811] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:33.811] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:07:33.811] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:33.812] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:07:33.812] | : . ' , ; ` | getFutureContext() ... done
[08:07:33.812] | : . ' , ; ` getFutureData() ... done
[08:07:33.812] | : . ' , ; ` FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'add', earlySignal = 0) ...
[08:07:33.812] | : . ' , ; ` | Appended future to position #2
[08:07:33.812] | : . ' , ; ` | Number of registered futures: 2
[08:07:33.813] | : . ' , ; ` FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'add', earlySignal = 0) ... done
[08:07:33.813] | : . ' , ; launchFuture() ... done
[08:07:33.813] | : . ' , ; MultisessionFuture started
[08:07:33.813] | : . ' , Launching futures ... done
[08:07:33.813] | : . ' Using MultisessionFutureBackend ... done
[08:07:33.813] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:33.813] | : . run() for ‘Future’ (<unnamed-11>) ... done
[08:07:33.813] | : run() ... done
[08:07:33.813] | resolved() for Future (<unnamed-11>) ... done
[08:07:33.814] | resolved() ...
[08:07:33.814] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:33.814] | : . Cluster node socket connection: index=4, id=409
[08:07:33.814] | : . assertValidConnection() ...
[08:07:33.814] | : . ' cluster node index: 1
[08:07:33.815] | : . assertValidConnection() ... done
[08:07:33.825] | : . socketSelect(list(<connection #4 (id=409)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:33.825] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:33.825] | : resolved: FALSE
[08:07:33.825] | resolved() ... done
[08:07:33.825] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:33.826] resolved() for Future (<unnamed-12>) ...
[08:07:33.826] | state: ‘created’
[08:07:33.826] | run: TRUE
[08:07:33.826] | run() ...
[08:07:33.826] | : run() for ‘Future’ (<unnamed-12>) ...
[08:07:33.826] | : . state: ‘created’
[08:07:33.826] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:33.826] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:33.826] | : . Using MultisessionFutureBackend ...
[08:07:33.827] | : . ' Number of futures since start: 3 (3 created, 3 launched, 2 finished)
[08:07:33.827] | : . ' Launching futures ...
[08:07:33.827] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:07:33.827] | : . ' , ; Workers: [n=2]
[08:07:33.827] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:33.829] | : . ' , ; FutureRegistry: ‘workers-31027bd0e5612620187a694a5df8390c’
[08:07:33.829] | : . ' , ; requestWorker() ...
[08:07:33.829] | : . ' , ; ` requestNode() ...
[08:07:33.829] | : . ' , ; ` | Number of workers: 2
[08:07:33.829] | : . ' , ; ` | Polling for a free worker ...
[08:07:33.829] | : . ' , ; ` | : FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ...
[08:07:33.829] | : . ' , ; ` | : . Listing all futures
[08:07:33.829] | : . ' , ; ` | : . Number of registered futures: 2
[08:07:33.829] | : . ' , ; ` | : FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ... done
[08:07:33.830] | : . ' , ; ` | : Poll #1 (0): usedNodes() = 2, workers = 2
[08:07:33.840] | : . ' , ; ` | : FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'collect-first', earlySignal = 1) ...
[08:07:33.840] | : . ' , ; ` | : . collectValues('workers-31027bd0e5612620187a694a5df8390c', firstOnly = TRUE) ...
[08:07:33.840] | : . ' , ; ` | : . ' resolved() for MultisessionFuture (<unnamed-10>) ...
[08:07:33.840] | : . ' , ; ` | : . ' , Cluster node socket connection: index=5, id=410
[08:07:33.841] | : . ' , ; ` | : . ' , assertValidConnection() ...
[08:07:33.841] | : . ' , ; ` | : . ' , ; cluster node index: 2
[08:07:33.841] | : . ' , ; ` | : . ' , assertValidConnection() ... done
[08:07:33.841] | : . ' , ; ` | : . ' , receiveMessageFromWorker() for ClusterFuture ...
[08:07:33.841] | : . ' , ; ` | : . ' , ; cluster node index: 2
[08:07:33.842] | : . ' , ; ` | : . ' , ; [1] TRUE
[08:07:33.842] | : . ' , ; ` | : . ' , ; received data:
[08:07:33.842] | : . ' , ; ` | : . ' , ; List of 5
[08:07:33.842] | : . ' , ; ` | : . ' , ;  $ type   : chr "VALUE"
[08:07:33.842] | : . ' , ; ` | : . ' , ;  $ value  :List of 16
[08:07:33.842] | : . ' , ; ` | : . ' , ;   ..$ value              : 'Mandelbrot' int [1:25, 1:25] 1 1 1 1 2 2 2 2 2 3 ...
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. ..- attr(*, "params")=List of 3
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. ..$ Z      : cplx [1:25, 1:25] -0.719-1.5i -0.719-1.44i -0.719-1.38i ...
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. .. ..- attr(*, "region")=List of 2
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. .. .. ..$ xrange: num [1:2] -0.719 0.75
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. .. .. ..$ yrange: num [1:2] -1.5 -0.0306
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. .. ..- attr(*, "tile")= int [1:2] 1 2
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. ..$ maxIter: int 200
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. ..$ tau    : num 2
[08:07:33.842] | : . ' , ; ` | : . ' , ;   ..$ visible            : logi TRUE
[08:07:33.842] | : . ' , ; ` | : . ' , ;   ..$ stdout             : chr ""
[08:07:33.842] | : . ' , ; ` | : . ' , ;   ..$ conditions         :List of 2
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. ..$ :List of 2
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. ..$ condition:List of 2
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. .. ..$ message: chr "Calculating tile #2 of 4 ..."
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. .. ..$ call   : language message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 69 5 69 79 5 79 69 69
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x558b2a32e308> 
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. ..$ signaled : int 0
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. ..$ :List of 2
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. ..$ condition:List of 2
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. .. ..$ message: chr " done\n"
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. .. ..$ call   : language message(" done")
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 75 5 75 20 5 20 75 75
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x558b2a32e308> 
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. ..$ signaled : int 0
[08:07:33.842] | : . ' , ; ` | : . ' , ;   ..$ rng                : logi FALSE
[08:07:33.842] | : . ' , ; ` | : . ' , ;   ..$ seed               : NULL
[08:07:33.842] | : . ' , ; ` | : . ' , ;   ..$ misuseGlobalEnv    : NULL
[08:07:33.842] | : . ' , ; ` | : . ' , ;   ..$ misuseConnections  :List of 3
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. ..$ added   : NULL
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. ..$ removed : NULL
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. ..$ replaced: NULL
[08:07:33.842] | : . ' , ; ` | : . ' , ;   ..$ misuseDevices      : NULL
[08:07:33.842] | : . ' , ; ` | : . ' , ;   ..$ misuseDefaultDevice: list()
[08:07:33.842] | : . ' , ; ` | : . ' , ;   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:33"
[08:07:33.842] | : . ' , ; ` | : . ' , ;   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:33"
[08:07:33.842] | : . ' , ; ` | : . ' , ;   ..$ uuid               : chr [1:2] "cbaccf8a178df2b17a9dba2ea7aed6c6" "10"
[08:07:33.842] | : . ' , ; ` | : . ' , ;   ..$ session_uuid       : chr "7108180b4099956bcc127e0e0d41dc9f"
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. ..- attr(*, "source")=List of 5
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. ..$ host  : Named chr "28bb34de9501"
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. ..$ pid   : int 67426
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:07:33"
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. ..$ random: int 2147483647
[08:07:33.842] | : . ' , ; ` | : . ' , ;   ..$ r_info             :List of 4
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. .. ..$ : int [1:3] 4 5 1
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. ..$ os           : chr "unix"
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. ..$ os_name      : chr "Linux"
[08:07:33.842] | : . ' , ; ` | : . ' , ;   .. ..$ captures_utf8: logi TRUE
[08:07:33.842] | : . ' , ; ` | : . ' , ;   ..$ version            : chr "1.8"
[08:07:33.842] | : . ' , ; ` | : . ' , ;   ..- attr(*, "class")= chr "FutureResult"
[08:07:33.842] | : . ' , ; ` | : . ' , ;  $ success: logi TRUE
[08:07:33.842] | : . ' , ; ` | : . ' , ;  $ time   : 'proc_time' Named num [1:5] 0.048 0.005 0.052 0 0
[08:07:33.842] | : . ' , ; ` | : . ' , ;   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:33.842] | : . ' , ; ` | : . ' , ;  $ tag    : NULL
[08:07:33.861] | : . ' , ; ` | : . ' , ; Received FutureResult
[08:07:33.861] | : . ' , ; ` | : . ' , ; FutureResult:
[08:07:33.861] | : . ' , ; ` | : . ' , ; value: ‘Mandelbrot’, ‘matrix’, ‘array’
[08:07:33.861] | : . ' , ; ` | : . ' , ; visible: TRUE
[08:07:33.861] | : . ' , ; ` | : . ' , ; stdout: character
[08:07:33.861] | : . ' , ; ` | : . ' , ; conditions: [n = 2] simpleMessage, simpleMessage
[08:07:33.861] | : . ' , ; ` | : . ' , ; RNG used: FALSE
[08:07:33.861] | : . ' , ; ` | : . ' , ; duration: 0.0501163 secs (started 2025-06-17 08:07:33.725959)
[08:07:33.861] | : . ' , ; ` | : . ' , ; version: 1.8
[08:07:33.861] | : . ' , ; ` | : . ' , ; FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'remove', earlySignal = 0) ...
[08:07:33.861] | : . ' , ; ` | : . ' , ; ` Removed future from position #1
[08:07:33.862] | : . ' , ; ` | : . ' , ; ` Number of registered futures: 1
[08:07:33.862] | : . ' , ; ` | : . ' , ; FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'remove', earlySignal = 0) ... done
[08:07:33.862] | : . ' , ; ` | : . ' , ; Erased future from future backend
[08:07:33.862] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ...
[08:07:33.862] | : . ' , ; ` | : . ' , ; ` result already collected: FutureResult
[08:07:33.862] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ... done
[08:07:33.862] | : . ' , ; ` | : . ' , ; signalConditions() ...
[08:07:33.862] | : . ' , ; ` | : . ' , ; ` include = ‘immediateCondition’
[08:07:33.862] | : . ' , ; ` | : . ' , ; ` exclude = 
[08:07:33.862] | : . ' , ; ` | : . ' , ; ` resignal = FALSE
[08:07:33.863] | : . ' , ; ` | : . ' , ; ` Number of conditions: 2
[08:07:33.863] | : . ' , ; ` | : . ' , ; `  int 2
[08:07:33.863] | : . ' , ; ` | : . ' , ; ` Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.863] | : . ' , ; ` | : . ' , ; ` Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.863] | : . ' , ; ` | : . ' , ; signalConditions() ... done
[08:07:33.863] | : . ' , ; ` | : . ' , receiveMessageFromWorker() for ClusterFuture ... done
[08:07:33.864] | : . ' , ; ` | : . ' , receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:07:33.864] | : . ' , ; ` | : . ' resolved() for MultisessionFuture (<unnamed-10>) ... done
[08:07:33.864] | : . ' , ; ` | : . ' assertFutureResult() ...
[08:07:33.864] | : . ' , ; ` | : . ' , Future uuid: cbaccf8a178df2b17a9dba2ea7aed6c6[08:07:33.864] | : . ' , ; ` | : . ' , Future uuid: 10
[08:07:33.864] | : . ' , ; ` | : . ' , identical; success
[08:07:33.864] | : . ' , ; ` | : . ' assertFutureResult() ... done
[08:07:33.864] | : . ' , ; ` | : . ' Future at position #1 is resolved ...
[08:07:33.864] | : . ' , ; ` | : . ' , value() for MultisessionFuture (<unnamed-10>) ...
[08:07:33.864] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ...
[08:07:33.865] | : . ' , ; ` | : . ' , ; ` result already collected: FutureResult
[08:07:33.865] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ... done
[08:07:33.865] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ...
[08:07:33.865] | : . ' , ; ` | : . ' , ; ` result already collected: FutureResult
[08:07:33.865] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ... done
[08:07:33.865] | : . ' , ; ` | : . ' , ; signalConditions() ...
[08:07:33.865] | : . ' , ; ` | : . ' , ; ` include = ‘immediateCondition’
[08:07:33.865] | : . ' , ; ` | : . ' , ; ` exclude = 
[08:07:33.865] | : . ' , ; ` | : . ' , ; ` resignal = FALSE
[08:07:33.865] | : . ' , ; ` | : . ' , ; ` Number of conditions: 2
[08:07:33.866] | : . ' , ; ` | : . ' , ; `  int 2
[08:07:33.866] | : . ' , ; ` | : . ' , ; ` Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.866] | : . ' , ; ` | : . ' , ; ` Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.866] | : . ' , ; ` | : . ' , ; signalConditions() ... done
[08:07:33.866] | : . ' , ; ` | : . ' , ; check for misuse ...
[08:07:33.866] | : . ' , ; ` | : . ' , ; check for misuse ... done
[08:07:33.867] | : . ' , ; ` | : . ' , value() for MultisessionFuture (<unnamed-10>) ... done
[08:07:33.867] | : . ' , ; ` | : . ' Future at position #1 is resolved ... done
[08:07:33.867] | : . ' , ; ` | : . collectValues('workers-31027bd0e5612620187a694a5df8390c', firstOnly = TRUE) ... done
[08:07:33.867] | : . ' , ; ` | : . Remove collected futures ...
[08:07:33.867] | : . ' , ; ` | : . ' Indices of futures to drop: [n=1] ‘1’
[08:07:33.867] | : . ' , ; ` | : . Remove collected futures ... done
[08:07:33.867] | : . ' , ; ` | : FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'collect-first', earlySignal = 1) ... done
[08:07:33.867] | : . ' , ; ` | : Early signaling of 2 future candidates ...
[08:07:33.867] | : . ' , ; ` | : Number of futures with early signaling requested: 0
[08:07:33.868] | : . ' , ; ` | : Early signaling of 2 future candidates ... done
[08:07:33.868] | : . ' , ; ` | : Number of registered futures: 2
[08:07:33.868] | : . ' , ; ` | Polling for a free worker ... done
[08:07:33.868] | : . ' , ; ` | FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ...
[08:07:33.868] | : . ' , ; ` | : Listing all futures
[08:07:33.868] | : . ' , ; ` | : Number of registered futures: 1
[08:07:33.868] | : . ' , ; ` | FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ... done
[08:07:33.868] | : . ' , ; ` | Total time: 0.0387248992919922
[08:07:33.868] | : . ' , ; ` requestNode() ... done
[08:07:33.869] | : . ' , ; ` FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ...
[08:07:33.869] | : . ' , ; ` | Listing all futures
[08:07:33.869] | : . ' , ; ` | Number of registered futures: 1
[08:07:33.869] | : . ' , ; ` FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ... done
[08:07:33.869] | : . ' , ; ` avail: [n=2] ‘2’
[08:07:33.869] | : . ' , ; ` Index of first available worker: 2
[08:07:33.869] | : . ' , ; ` Validate that the worker is functional ...
[08:07:33.926] | : . ' , ; ` | Worker is functional
[08:07:33.926] | : . ' , ; ` | FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ...
[08:07:33.926] | : . ' , ; ` | : Listing all futures
[08:07:33.926] | : . ' , ; ` | : Number of registered futures: 1
[08:07:33.927] | : . ' , ; ` | FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'list', earlySignal = 0) ... done
[08:07:33.927] | : . ' , ; ` Validate that the worker is functional ... done
[08:07:33.927] | : . ' , ; requestWorker() ... done
[08:07:33.927] | : . ' , ; cluster node index: 2
[08:07:33.927] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:07:33.927] | : . ' , eraseGlobalEnvironment() ...
[08:07:33.927] | : . ' , eraseGlobalEnvironment() ... done
[08:07:33.928] | : . ' , launchFuture() ...
[08:07:33.928] | : . ' , ; cluster node index: 2
[08:07:33.928] | : . ' , ; getFutureData() ...
[08:07:33.928] | : . ' , ; ` getFutureCore() ...
[08:07:33.928] | : . ' , ; ` | Packages needed by the future expression (n = 1): ‘future’
[08:07:33.928] | : . ' , ; ` getFutureCore() ... done
[08:07:33.928] | : . ' , ; ` getFutureCapture() ...
[08:07:33.928] | : . ' , ; ` getFutureCapture() ... done
[08:07:33.929] | : . ' , ; ` getFutureContext() ...
[08:07:33.929] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:33.929] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:07:33.929] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:33.929] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:07:33.929] | : . ' , ; ` getFutureContext() ... done
[08:07:33.929] | : . ' , ; getFutureData() ... done
[08:07:33.930] | : . ' , ; FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'add', earlySignal = 0) ...
[08:07:33.930] | : . ' , ; ` Appended future to position #2
[08:07:33.930] | : . ' , ; ` Number of registered futures: 2
[08:07:33.930] | : . ' , ; FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'add', earlySignal = 0) ... done
[08:07:33.930] | : . ' , launchFuture() ... done
[08:07:33.930] | : . ' , MultisessionFuture started
[08:07:33.930] | : . ' Launching futures ... done
[08:07:33.930] | : . Using MultisessionFutureBackend ... done
[08:07:33.931] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:33.931] | : run() for ‘Future’ (<unnamed-12>) ... done
[08:07:33.931] | run() ... done
[08:07:33.931] resolved() for Future (<unnamed-12>) ... done
[08:07:33.931] resolved() ...
[08:07:33.931] | resolved() for MultisessionFuture (<unnamed-12>) ...
[08:07:33.931] | : Cluster node socket connection: index=5, id=410
[08:07:33.932] | : assertValidConnection() ...
[08:07:33.932] | : . cluster node index: 2
[08:07:33.932] | : assertValidConnection() ... done
[08:07:33.942] | : socketSelect(list(<connection #5 (id=410)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:33.942] | resolved() for MultisessionFuture (<unnamed-12>) ... done
[08:07:33.943] | resolved: FALSE
[08:07:33.943] resolved() ... done

Plotting tile #1 of 4 ...
[08:07:33.943] value() for MultisessionFuture (<unnamed-9>) ...
[08:07:33.943] | result() for ClusterFuture ...
[08:07:33.943] | : result already collected: FutureResult
[08:07:33.943] | result() for ClusterFuture ... done
[08:07:33.944] | result() for ClusterFuture ...
[08:07:33.944] | : result already collected: FutureResult
[08:07:33.944] | result() for ClusterFuture ... done
[08:07:33.944] | signalConditions() ...
[08:07:33.944] | : include = ‘immediateCondition’
[08:07:33.944] | : exclude = 
[08:07:33.944] | : resignal = FALSE
[08:07:33.944] | : Number of conditions: 2
[08:07:33.944] | :  int 2
[08:07:33.945] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.945] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.945] | signalConditions() ... done
[08:07:33.945] | relay stdout ...
[08:07:33.945] | relay stdout ... done
[08:07:33.945] | check for misuse ...
[08:07:33.945] | check for misuse ... done
[08:07:33.946] | relay conditions ...
[08:07:33.946] | : Future state: ‘finished’
[08:07:33.946] | : result() for ClusterFuture ...
[08:07:33.946] | : . result already collected: FutureResult
[08:07:33.946] | : result() for ClusterFuture ... done
[08:07:33.946] | : signalConditions() ...
[08:07:33.946] | : . include = ‘condition’
[08:07:33.946] | : . exclude = ‘immediateCondition’
[08:07:33.946] | : . resignal = TRUE
[08:07:33.946] | : . Number of conditions: 2
[08:07:33.947] | : .  int 2
[08:07:33.947] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.947] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[08:07:33.947] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.947] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:33.947] | : signalConditions() ... done
[08:07:33.948] | relay conditions ... done
[08:07:33.948] value() for MultisessionFuture (<unnamed-9>) ... done
Plotting tile #2 of 4 ...
[08:07:33.948] value() for MultisessionFuture (<unnamed-10>) ...
[08:07:33.949] | result() for ClusterFuture ...
[08:07:33.949] | : result already collected: FutureResult
[08:07:33.949] | result() for ClusterFuture ... done
[08:07:33.949] | result() for ClusterFuture ...
[08:07:33.949] | : result already collected: FutureResult
[08:07:33.949] | result() for ClusterFuture ... done
[08:07:33.949] | signalConditions() ...
[08:07:33.949] | : include = ‘immediateCondition’
[08:07:33.949] | : exclude = 
[08:07:33.949] | : resignal = FALSE
[08:07:33.950] | : Number of conditions: 2
[08:07:33.950] | :  int 2
[08:07:33.950] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.950] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.950] | signalConditions() ... done
[08:07:33.950] | relay stdout ...
[08:07:33.950] | relay stdout ... done
[08:07:33.951] | check for misuse ...
[08:07:33.951] | check for misuse ... done
[08:07:33.951] | relay conditions ...
[08:07:33.951] | : Future state: ‘finished’
[08:07:33.951] | : result() for ClusterFuture ...
[08:07:33.951] | : . result already collected: FutureResult
[08:07:33.951] | : result() for ClusterFuture ... done
[08:07:33.951] | : signalConditions() ...
[08:07:33.951] | : . include = ‘condition’
[08:07:33.951] | : . exclude = ‘immediateCondition’
[08:07:33.952] | : . resignal = TRUE
[08:07:33.952] | : . Number of conditions: 2
[08:07:33.952] | : .  int 2
[08:07:33.952] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.952] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[08:07:33.952] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.953] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:33.953] | : signalConditions() ... done
[08:07:33.953] | relay conditions ... done
[08:07:33.953] value() for MultisessionFuture (<unnamed-10>) ... done
[08:07:33.953] resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:33.954] | Cluster node socket connection: index=4, id=409
[08:07:33.954] | assertValidConnection() ...
[08:07:33.954] | : cluster node index: 1
[08:07:33.954] | assertValidConnection() ... done
[08:07:33.954] | receiveMessageFromWorker() for ClusterFuture ...
[08:07:33.954] | : cluster node index: 1
[08:07:33.955] | : [1] TRUE
[08:07:33.955] | : received data:
[08:07:33.955] | : List of 5
[08:07:33.955] | :  $ type   : chr "VALUE"
[08:07:33.955] | :  $ value  :List of 16
[08:07:33.955] | :   ..$ value              : 'Mandelbrot' int [1:25, 1:25] 1 1 1 1 1 1 1 1 1 1 ...
[08:07:33.955] | :   .. ..- attr(*, "params")=List of 3
[08:07:33.955] | :   .. .. ..$ Z      : cplx [1:25, 1:25] -2.25+0.0306i -2.25+0.0918i -2.25+0.1531i ...
[08:07:33.955] | :   .. .. .. ..- attr(*, "region")=List of 2
[08:07:33.955] | :   .. .. .. .. ..$ xrange: num [1:2] -2.25 -0.781
[08:07:33.955] | :   .. .. .. .. ..$ yrange: num [1:2] 0.0306 1.5
[08:07:33.955] | :   .. .. .. ..- attr(*, "tile")= int [1:2] 2 1
[08:07:33.955] | :   .. .. ..$ maxIter: int 200
[08:07:33.955] | :   .. .. ..$ tau    : num 2
[08:07:33.955] | :   ..$ visible            : logi TRUE
[08:07:33.955] | :   ..$ stdout             : chr ""
[08:07:33.955] | :   ..$ conditions         :List of 2
[08:07:33.955] | :   .. ..$ :List of 2
[08:07:33.955] | :   .. .. ..$ condition:List of 2
[08:07:33.955] | :   .. .. .. ..$ message: chr "Calculating tile #3 of 4 ..."
[08:07:33.955] | :   .. .. .. ..$ call   : language message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
[08:07:33.955] | :   .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 69 5 69 79 5 79 69 69
[08:07:33.955] | :   .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x558b2ccb6540> 
[08:07:33.955] | :   .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[08:07:33.955] | :   .. .. ..$ signaled : int 0
[08:07:33.955] | :   .. ..$ :List of 2
[08:07:33.955] | :   .. .. ..$ condition:List of 2
[08:07:33.955] | :   .. .. .. ..$ message: chr " done\n"
[08:07:33.955] | :   .. .. .. ..$ call   : language message(" done")
[08:07:33.955] | :   .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 75 5 75 20 5 20 75 75
[08:07:33.955] | :   .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x558b2ccb6540> 
[08:07:33.955] | :   .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[08:07:33.955] | :   .. .. ..$ signaled : int 0
[08:07:33.955] | :   ..$ rng                : logi FALSE
[08:07:33.955] | :   ..$ seed               : NULL
[08:07:33.955] | :   ..$ misuseGlobalEnv    : NULL
[08:07:33.955] | :   ..$ misuseConnections  :List of 3
[08:07:33.955] | :   .. ..$ added   : NULL
[08:07:33.955] | :   .. ..$ removed : NULL
[08:07:33.955] | :   .. ..$ replaced: NULL
[08:07:33.955] | :   ..$ misuseDevices      : NULL
[08:07:33.955] | :   ..$ misuseDefaultDevice: list()
[08:07:33.955] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:33"
[08:07:33.955] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:33"
[08:07:33.955] | :   ..$ uuid               : chr [1:2] "cbaccf8a178df2b17a9dba2ea7aed6c6" "11"
[08:07:33.955] | :   ..$ session_uuid       : chr "25c51c0ed227fb5f9e65fb69db80956a"
[08:07:33.955] | :   .. ..- attr(*, "source")=List of 5
[08:07:33.955] | :   .. .. ..$ host  : Named chr "28bb34de9501"
[08:07:33.955] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:33.955] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:33.955] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:33.955] | :   .. .. ..$ pid   : int 67425
[08:07:33.955] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:07:33"
[08:07:33.955] | :   .. .. ..$ random: int 2147483647
[08:07:33.955] | :   ..$ r_info             :List of 4
[08:07:33.955] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:33.955] | :   .. .. ..$ : int [1:3] 4 5 1
[08:07:33.955] | :   .. ..$ os           : chr "unix"
[08:07:33.955] | :   .. ..$ os_name      : chr "Linux"
[08:07:33.955] | :   .. ..$ captures_utf8: logi TRUE
[08:07:33.955] | :   ..$ version            : chr "1.8"
[08:07:33.955] | :   ..- attr(*, "class")= chr "FutureResult"
[08:07:33.955] | :  $ success: logi TRUE
[08:07:33.955] | :  $ time   : 'proc_time' Named num [1:5] 0.003 0.001 0.004 0 0
[08:07:33.955] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:33.955] | :  $ tag    : NULL
[08:07:33.975] | : Received FutureResult
[08:07:33.975] | : FutureResult:
[08:07:33.975] | : value: ‘Mandelbrot’, ‘matrix’, ‘array’
[08:07:33.975] | : visible: TRUE
[08:07:33.975] | : stdout: character
[08:07:33.975] | : conditions: [n = 2] simpleMessage, simpleMessage
[08:07:33.975] | : RNG used: FALSE
[08:07:33.975] | : duration: 0.00334692 secs (started 2025-06-17 08:07:33.853762)
[08:07:33.975] | : version: 1.8
[08:07:33.976] | : FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'remove', earlySignal = 0) ...
[08:07:33.976] | : . Removed future from position #1
[08:07:33.976] | : . Number of registered futures: 1
[08:07:33.976] | : FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'remove', earlySignal = 0) ... done
[08:07:33.976] | : Erased future from future backend
[08:07:33.976] | : result() for ClusterFuture ...
[08:07:33.977] | : . result already collected: FutureResult
[08:07:33.977] | : result() for ClusterFuture ... done
[08:07:33.977] | : signalConditions() ...
[08:07:33.977] | : . include = ‘immediateCondition’
[08:07:33.977] | : . exclude = 
[08:07:33.977] | : . resignal = FALSE
[08:07:33.977] | : . Number of conditions: 2
[08:07:33.977] | : .  int 2
[08:07:33.978] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.978] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.978] | : signalConditions() ... done
[08:07:33.978] | receiveMessageFromWorker() for ClusterFuture ... done
[08:07:33.978] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:07:33.978] resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:33.978] assertFutureResult() ...
[08:07:33.978] | Future uuid: cbaccf8a178df2b17a9dba2ea7aed6c6[08:07:33.978] | Future uuid: 11
[08:07:33.978] | identical; success
[08:07:33.979] assertFutureResult() ... done
Plotting tile #3 of 4 ...
[08:07:33.979] value() for MultisessionFuture (<unnamed-11>) ...
[08:07:33.979] | result() for ClusterFuture ...
[08:07:33.979] | : result already collected: FutureResult
[08:07:33.979] | result() for ClusterFuture ... done
[08:07:33.979] | result() for ClusterFuture ...
[08:07:33.979] | : result already collected: FutureResult
[08:07:33.979] | result() for ClusterFuture ... done
[08:07:33.979] | signalConditions() ...
[08:07:33.979] | : include = ‘immediateCondition’
[08:07:33.980] | : exclude = 
[08:07:33.980] | : resignal = FALSE
[08:07:33.980] | : Number of conditions: 2
[08:07:33.980] | :  int 2
[08:07:33.980] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.980] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.981] | signalConditions() ... done
[08:07:33.981] | relay stdout ...
[08:07:33.981] | relay stdout ... done
[08:07:33.981] | check for misuse ...
[08:07:33.981] | check for misuse ... done
[08:07:33.981] | relay conditions ...
[08:07:33.981] | : Future state: ‘finished’
[08:07:33.981] | : result() for ClusterFuture ...
[08:07:33.981] | : . result already collected: FutureResult
[08:07:33.981] | : result() for ClusterFuture ... done
[08:07:33.982] | : signalConditions() ...
[08:07:33.982] | : . include = ‘condition’
[08:07:33.982] | : . exclude = ‘immediateCondition’
[08:07:33.982] | : . resignal = TRUE
[08:07:33.982] | : . Number of conditions: 2
[08:07:33.982] | : .  int 2
[08:07:33.982] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.983] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[08:07:33.983] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:33.983] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:33.983] | : signalConditions() ... done
[08:07:33.983] | relay conditions ... done
[08:07:33.983] value() for MultisessionFuture (<unnamed-11>) ... done
[08:07:33.984] resolved() for MultisessionFuture (<unnamed-12>) ...
[08:07:33.984] | Cluster node socket connection: index=5, id=410
[08:07:33.984] | assertValidConnection() ...
[08:07:33.984] | : cluster node index: 2
[08:07:33.985] | assertValidConnection() ... done
[08:07:33.985] | receiveMessageFromWorker() for ClusterFuture ...
[08:07:33.985] | : cluster node index: 2
[08:07:33.985] | : [1] TRUE
[08:07:33.985] | : received data:
[08:07:33.986] | : List of 5
[08:07:33.986] | :  $ type   : chr "VALUE"
[08:07:33.986] | :  $ value  :List of 16
[08:07:33.986] | :   ..$ value              : 'Mandelbrot' int [1:25, 1:25] 200 200 200 109 195 15 9 8 5 5 ...
[08:07:33.986] | :   .. ..- attr(*, "params")=List of 3
[08:07:33.986] | :   .. .. ..$ Z      : cplx [1:25, 1:25] -0.719+0.0306i -0.719+0.0918i -0.719+0.1531i ...
[08:07:33.986] | :   .. .. .. ..- attr(*, "region")=List of 2
[08:07:33.986] | :   .. .. .. .. ..$ xrange: num [1:2] -0.719 0.75
[08:07:33.986] | :   .. .. .. .. ..$ yrange: num [1:2] 0.0306 1.5
[08:07:33.986] | :   .. .. .. ..- attr(*, "tile")= int [1:2] 2 2
[08:07:33.986] | :   .. .. ..$ maxIter: int 200
[08:07:33.986] | :   .. .. ..$ tau    : num 2
[08:07:33.986] | :   ..$ visible            : logi TRUE
[08:07:33.986] | :   ..$ stdout             : chr ""
[08:07:33.986] | :   ..$ conditions         :List of 2
[08:07:33.986] | :   .. ..$ :List of 2
[08:07:33.986] | :   .. .. ..$ condition:List of 2
[08:07:33.986] | :   .. .. .. ..$ message: chr "Calculating tile #4 of 4 ..."
[08:07:33.986] | :   .. .. .. ..$ call   : language message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
[08:07:33.986] | :   .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 69 5 69 79 5 79 69 69
[08:07:33.986] | :   .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x558b29cf5ff8> 
[08:07:33.986] | :   .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[08:07:33.986] | :   .. .. ..$ signaled : int 0
[08:07:33.986] | :   .. ..$ :List of 2
[08:07:33.986] | :   .. .. ..$ condition:List of 2
[08:07:33.986] | :   .. .. .. ..$ message: chr " done\n"
[08:07:33.986] | :   .. .. .. ..$ call   : language message(" done")
[08:07:33.986] | :   .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 75 5 75 20 5 20 75 75
[08:07:33.986] | :   .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x558b29cf5ff8> 
[08:07:33.986] | :   .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[08:07:33.986] | :   .. .. ..$ signaled : int 0
[08:07:33.986] | :   ..$ rng                : logi FALSE
[08:07:33.986] | :   ..$ seed               : NULL
[08:07:33.986] | :   ..$ misuseGlobalEnv    : NULL
[08:07:33.986] | :   ..$ misuseConnections  :List of 3
[08:07:33.986] | :   .. ..$ added   : NULL
[08:07:33.986] | :   .. ..$ removed : NULL
[08:07:33.986] | :   .. ..$ replaced: NULL
[08:07:33.986] | :   ..$ misuseDevices      : NULL
[08:07:33.986] | :   ..$ misuseDefaultDevice: list()
[08:07:33.986] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:33"
[08:07:33.986] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:33"
[08:07:33.986] | :   ..$ uuid               : chr [1:2] "cbaccf8a178df2b17a9dba2ea7aed6c6" "12"
[08:07:33.986] | :   ..$ session_uuid       : chr "7108180b4099956bcc127e0e0d41dc9f"
[08:07:33.986] | :   .. ..- attr(*, "source")=List of 5
[08:07:33.986] | :   .. .. ..$ host  : Named chr "28bb34de9501"
[08:07:33.986] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:33.986] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:33.986] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:33.986] | :   .. .. ..$ pid   : int 67426
[08:07:33.986] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:07:33"
[08:07:33.986] | :   .. .. ..$ random: int 2147483647
[08:07:33.986] | :   ..$ r_info             :List of 4
[08:07:33.986] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:33.986] | :   .. .. ..$ : int [1:3] 4 5 1
[08:07:33.986] | :   .. ..$ os           : chr "unix"
[08:07:33.986] | :   .. ..$ os_name      : chr "Linux"
[08:07:33.986] | :   .. ..$ captures_utf8: logi TRUE
[08:07:33.986] | :   ..$ version            : chr "1.8"
[08:07:33.986] | :   ..- attr(*, "class")= chr "FutureResult"
[08:07:33.986] | :  $ success: logi TRUE
[08:07:33.986] | :  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.005 0 0
[08:07:33.986] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:33.986] | :  $ tag    : NULL
[08:07:34.004] | : Received FutureResult
[08:07:34.004] | : FutureResult:
[08:07:34.004] | : value: ‘Mandelbrot’, ‘matrix’, ‘array’
[08:07:34.004] | : visible: TRUE
[08:07:34.004] | : stdout: character
[08:07:34.004] | : conditions: [n = 2] simpleMessage, simpleMessage
[08:07:34.004] | : RNG used: FALSE
[08:07:34.004] | : duration: 0.004029036 secs (started 2025-06-17 08:07:33.970782)
[08:07:34.004] | : version: 1.8
[08:07:34.004] | : FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'remove', earlySignal = 0) ...
[08:07:34.004] | : . Removed future from position #1
[08:07:34.005] | : . Number of registered futures: 0
[08:07:34.005] | : FutureRegistry('workers-31027bd0e5612620187a694a5df8390c', action = 'remove', earlySignal = 0) ... done
[08:07:34.005] | : Erased future from future backend
[08:07:34.005] | : result() for ClusterFuture ...
[08:07:34.005] | : . result already collected: FutureResult
[08:07:34.005] | : result() for ClusterFuture ... done
[08:07:34.005] | : signalConditions() ...
[08:07:34.005] | : . include = ‘immediateCondition’
[08:07:34.005] | : . exclude = 
[08:07:34.005] | : . resignal = FALSE
[08:07:34.006] | : . Number of conditions: 2
[08:07:34.006] | : .  int 2
[08:07:34.006] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:34.006] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:34.006] | : signalConditions() ... done
[08:07:34.006] | receiveMessageFromWorker() for ClusterFuture ... done
[08:07:34.007] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:07:34.007] resolved() for MultisessionFuture (<unnamed-12>) ... done
[08:07:34.007] assertFutureResult() ...
[08:07:34.007] | Future uuid: cbaccf8a178df2b17a9dba2ea7aed6c6[08:07:34.007] | Future uuid: 12
[08:07:34.007] | identical; success
[08:07:34.007] assertFutureResult() ... done
Plotting tile #4 of 4 ...
[08:07:34.007] value() for MultisessionFuture (<unnamed-12>) ...
[08:07:34.007] | result() for ClusterFuture ...
[08:07:34.007] | : result already collected: FutureResult
[08:07:34.007] | result() for ClusterFuture ... done
[08:07:34.008] | result() for ClusterFuture ...
[08:07:34.008] | : result already collected: FutureResult
[08:07:34.008] | result() for ClusterFuture ... done
[08:07:34.008] | signalConditions() ...
[08:07:34.008] | : include = ‘immediateCondition’
[08:07:34.008] | : exclude = 
[08:07:34.008] | : resignal = FALSE
[08:07:34.008] | : Number of conditions: 2
[08:07:34.008] | :  int 2
[08:07:34.009] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:34.009] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:34.009] | signalConditions() ... done
[08:07:34.009] | relay stdout ...
[08:07:34.009] | relay stdout ... done
[08:07:34.009] | check for misuse ...
[08:07:34.009] | check for misuse ... done
[08:07:34.009] | relay conditions ...
[08:07:34.010] | : Future state: ‘finished’
[08:07:34.010] | : result() for ClusterFuture ...
[08:07:34.010] | : . result already collected: FutureResult
[08:07:34.010] | : result() for ClusterFuture ... done
[08:07:34.010] | : signalConditions() ...
[08:07:34.010] | : . include = ‘condition’
[08:07:34.010] | : . exclude = ‘immediateCondition’
[08:07:34.010] | : . resignal = TRUE
[08:07:34.010] | : . Number of conditions: 2
[08:07:34.010] | : .  int 2
[08:07:34.011] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:34.011] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[08:07:34.011] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:34.011] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:34.011] | : signalConditions() ... done
[08:07:34.012] | relay conditions ... done
[08:07:34.012] value() for MultisessionFuture (<unnamed-12>) ... done

> close.screen()
 [1]  1  2  3  4  5  6  7  8  9 10 11 12

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multisession') ... DONE
Testing with 2 cores ... DONE

> message("*** Mandelbrot demo of the 'future' package ... DONE")
*** Mandelbrot demo of the 'future' package ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=1s, sys.self=0.09s, elapsed=2s, user.child=0.4s, sys.child=0.4s
Test ‘demo-mandelbrot’ ... success
> 
