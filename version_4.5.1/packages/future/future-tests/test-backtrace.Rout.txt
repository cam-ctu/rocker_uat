
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-backtrace.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("backtrace")
Test ‘backtrace’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-backtrace.R’

> library(future)
[08:07:18.983] Option 'future.startup.script': TRUE
[08:07:18.983] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:07:18.983] Future startup scripts found: <none>

> message("*** backtrace( ) - explicit future ...")
*** backtrace( ) - explicit future ...

> f <- future({
+     42
+     stop("Woops")
+ })
[08:07:18.984] future(..., label = NULL) ...
[08:07:18.984] | lazy: FALSE
[08:07:18.984] | stdout: TRUE
[08:07:18.984] | conditions: [n=1] ‘condition’
[08:07:18.985] | gc: FALSE
[08:07:18.985] | earlySignal: FALSE
[08:07:18.985] | getGlobalsAndPackages() ...
[08:07:18.985] | : Searching for globals ...
[08:07:18.998] | : . globals found: [2] ‘{’, ‘stop’
[08:07:18.999] | : Searching for globals ... done
[08:07:18.999] | : Resolving globals: FALSE
[08:07:18.999] | : Search for packages associated with the globals ...
[08:07:18.999] | : . Packages associated with globals: [1] ‘base’
[08:07:19.000] | : . Packages: [1] ‘base’
[08:07:19.000] | : Search for packages associated with the globals ... done
[08:07:19.000] | : Packages after dropping 'base': [0] 
[08:07:19.000] | : globals: [0] 
[08:07:19.000] | : packages: [0] 
[08:07:19.000] | getGlobalsAndPackages() ... done
[08:07:19.001] | run() for ‘Future’ (<unnamed-1>) ...
[08:07:19.001] | : state: ‘created’
[08:07:19.001] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.001] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:19.001] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.001] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.001] | : . '  - attr(*, "init")= logi TRUE
[08:07:19.001] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.001] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.001] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.001] | : . '  - attr(*, "call")= language plan(sequential)
[08:07:19.005] | : . ' init: TRUE
[08:07:19.005] | : . ' makeFutureBackend(<sequential>) ...
[08:07:19.005] | : . ' , Backend function: <‘NULL’>
[08:07:19.005] | : . ' , Evaluator tweak arguments: [n=0]
[08:07:19.006] | : . ' ,  list()
[08:07:19.006] | : . ' , Evaluator formal arguments: [n=2]
[08:07:19.006] | : . ' ,  list()
[08:07:19.006] | : . ' , Backend factory arguments: [n=2]
[08:07:19.006] | : . ' , Dotted pair list of 2
[08:07:19.006] | : . ' ,  $ gc         : logi FALSE
[08:07:19.006] | : . ' ,  $ earlySignal: logi FALSE
[08:07:19.007] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:19.008] | : . ' makeFutureBackend(<sequential>) ... done
[08:07:19.008] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:19.008] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.008] | : Using SequentialFutureBackend ...
[08:07:19.008] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:07:19.008] | : . Launching futures ...
[08:07:19.008] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:19.009] | : . ' , getFutureData() ...
[08:07:19.009] | : . ' , ; getFutureCore() ...
[08:07:19.009] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:19.009] | : . ' , ; getFutureCore() ... done
[08:07:19.009] | : . ' , ; getFutureCapture() ...
[08:07:19.009] | : . ' , ; getFutureCapture() ... done
[08:07:19.009] | : . ' , ; getFutureContext() ...
[08:07:19.009] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.010] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:19.010] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.010] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:19.010] | : . ' , ; getFutureContext() ... done
[08:07:19.010] | : . ' , getFutureData() ... done
[08:07:19.012] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.013] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:19.013] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.013] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.013] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:19.013] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:19.014] | : . ' , ; ` | New stack:
[08:07:19.014] | : . ' , ; ` | List of 1
[08:07:19.014] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.014] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.014] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:19.014] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.014] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.014] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.014] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:19.014] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.016] | : . ' , ; ` | Old stack:
[08:07:19.016] | : . ' , ; ` | List of 1
[08:07:19.016] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.016] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.016] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:19.016] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.016] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.016] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.016] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:19.016] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.016] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.016] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.016] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.019] | : . ' , ; ` | Not identical
[08:07:19.019] | : . ' , ; ` | all.equal() for future ...
[08:07:19.020] | : . ' , ; ` | : List of 2
[08:07:19.020] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.020] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.020] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:19.020] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.020] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.020] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.020] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:19.020] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.020] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.020] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.020] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.020] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.020] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.020] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.020] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.020] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.020] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.026] | : . ' , ; ` | all.equal() for future ... done
[08:07:19.026] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:19.026] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:19.027] | : . ' , ; ` List of future strategies:
[08:07:19.027] | : . ' , ; ` 1. sequential:
[08:07:19.027] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:19.027] | : . ' , ; `    - tweaked: FALSE
[08:07:19.027] | : . ' , ; `    - call: plan(sequential)
[08:07:19.027] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:19.027] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.030] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.030] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.030] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:19.030] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:19.030] | : . ' , ; ` | : New stack:
[08:07:19.030] | : . ' , ; ` | : List of 1
[08:07:19.030] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.030] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.030] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.030] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.030] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.030] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.030] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.030] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.030] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.030] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.030] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.033] | : . ' , ; ` | : Old stack:
[08:07:19.033] | : . ' , ; ` | : List of 1
[08:07:19.033] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.033] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.033] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.033] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.033] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.033] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.033] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.033] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.033] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.033] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.033] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.036] | : . ' , ; ` | : Identical
[08:07:19.037] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:19.037] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:19.037] | : . ' , ; ` | List of future strategies:
[08:07:19.037] | : . ' , ; ` | 1. sequential:
[08:07:19.037] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:19.037] | : . ' , ; ` |    - tweaked: FALSE
[08:07:19.037] | : . ' , ; ` |    - call: plan(sequential)
[08:07:19.037] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:19.037] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.037] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.040] | : . ' , SequentialFuture started (and completed)
[08:07:19.041] | : . ' , signalConditions() ...
[08:07:19.041] | : . ' , ; include = ‘immediateCondition’
[08:07:19.041] | : . ' , ; exclude = 
[08:07:19.041] | : . ' , ; resignal = FALSE
[08:07:19.041] | : . ' , ; Number of conditions: 7
[08:07:19.041] | : . ' , ;  int 7
[08:07:19.042] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.042] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.042] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.042] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.042] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.042] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.042] | : . ' , ; Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:19.042] | : . ' , signalConditions() ... done
[08:07:19.043] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:19.043] | : . Launching futures ... done
[08:07:19.043] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:19.043] | : Using SequentialFutureBackend ... done
[08:07:19.043] | run() for ‘Future’ (<unnamed-1>) ... done
[08:07:19.043] future(..., label = NULL) ... done

> v <- value(f, signal = FALSE)
[08:07:19.044] value() for SequentialFuture (<unnamed-1>) ...
[08:07:19.044] | signalConditions() ...
[08:07:19.045] | : include = ‘immediateCondition’
[08:07:19.045] | : exclude = 
[08:07:19.045] | : resignal = FALSE
[08:07:19.045] | : Number of conditions: 7
[08:07:19.045] | :  int 7
[08:07:19.046] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.046] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.046] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.046] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.046] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.046] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.046] | : Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:19.046] | signalConditions() ... done
[08:07:19.047] | relay stdout ...
[08:07:19.047] | relay stdout ... done
[08:07:19.047] | check for misuse ...
[08:07:19.047] | check for misuse ... done
[08:07:19.047] value() for SequentialFuture (<unnamed-1>) ... done

> print(v)
<simpleError in eval(quote({    {        42L        stop("Woops")    }}), new.env()): Woops>

> calls <- backtrace(f)
[08:07:19.048] resolved() for SequentialFuture (<unnamed-1>) ...
[08:07:19.048] | state: ‘finished’
[08:07:19.048] | run: TRUE
[08:07:19.048] | result: ‘FutureResult’
[08:07:19.048] resolved() for SequentialFuture (<unnamed-1>) ... done

> print(calls)
[[1]]
future:::testme("backtrace")

[[2]]
source(file.path(path, "run.R"))

[[3]]
withVisible(eval(ei, envir))

[[4]]
eval(ei, envir)

[[5]]
eval(ei, envir)

[[6]]
source(testme[["script"]], echo = TRUE)

[[7]]
withVisible(eval(ei, envir))

[[8]]
eval(ei, envir)

[[9]]
eval(ei, envir)

[[10]]
future({
    42L
    stop("Woops")
})

[[11]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, onReference = onReference, ...)

[[12]]
eval(expr, envir = globalenv())

[[13]]
eval(expr, envir = globalenv())

[[14]]
local({
    {
        42L
        stop("Woops")
    }
})

[[15]]
eval.parent(substitute(eval(quote(expr), envir)))

[[16]]
eval(expr, p)

[[17]]
eval(expr, p)

[[18]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[19]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[20]]
stop("Woops")

[[21]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())


> message("*** backtrace( ) - explicit future ... DONE")
*** backtrace( ) - explicit future ... DONE

> message("*** backtrace( ) - implicit future ...")
*** backtrace( ) - implicit future ...

> v %<-% {
+     42
+     stop("Woops")
+ }
[08:07:19.049] future(..., label = NULL) ...
[08:07:19.050] | lazy: FALSE
[08:07:19.050] | stdout: TRUE
[08:07:19.050] | conditions: [n=1] ‘condition’
[08:07:19.050] | gc: FALSE
[08:07:19.050] | earlySignal: FALSE
[08:07:19.050] | getGlobalsAndPackages() ...
[08:07:19.050] | : Searching for globals ...
[08:07:19.055] | : . globals found: [2] ‘{’, ‘stop’
[08:07:19.055] | : Searching for globals ... done
[08:07:19.056] | : Resolving globals: FALSE
[08:07:19.056] | : Search for packages associated with the globals ...
[08:07:19.056] | : . Packages associated with globals: [1] ‘base’
[08:07:19.056] | : . Packages: [1] ‘base’
[08:07:19.056] | : Search for packages associated with the globals ... done
[08:07:19.056] | : Packages after dropping 'base': [0] 
[08:07:19.056] | : globals: [0] 
[08:07:19.056] | : packages: [0] 
[08:07:19.057] | getGlobalsAndPackages() ... done
[08:07:19.057] | run() for ‘Future’ (<unnamed-2>) ...
[08:07:19.057] | : state: ‘created’
[08:07:19.057] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.057] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.057] | : Using SequentialFutureBackend ...
[08:07:19.057] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:07:19.057] | : . Launching futures ...
[08:07:19.058] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:19.058] | : . ' , getFutureData() ...
[08:07:19.058] | : . ' , ; getFutureCore() ...
[08:07:19.058] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:19.058] | : . ' , ; getFutureCore() ... done
[08:07:19.058] | : . ' , ; getFutureCapture() ...
[08:07:19.058] | : . ' , ; getFutureCapture() ... done
[08:07:19.058] | : . ' , ; getFutureContext() ...
[08:07:19.058] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.058] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:19.059] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.059] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:19.059] | : . ' , ; getFutureContext() ... done
[08:07:19.059] | : . ' , getFutureData() ... done
[08:07:19.060] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.060] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:19.060] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.061] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.061] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:19.061] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:19.061] | : . ' , ; ` | New stack:
[08:07:19.061] | : . ' , ; ` | List of 1
[08:07:19.061] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.061] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.061] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:19.061] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.061] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.061] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.061] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:19.061] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.064] | : . ' , ; ` | Old stack:
[08:07:19.064] | : . ' , ; ` | List of 1
[08:07:19.064] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.064] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.064] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:19.064] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.064] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.064] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.064] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:19.064] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.064] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.064] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.064] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.068] | : . ' , ; ` | Not identical
[08:07:19.068] | : . ' , ; ` | all.equal() for future ...
[08:07:19.068] | : . ' , ; ` | : List of 2
[08:07:19.068] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.068] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.068] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:19.068] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.068] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.068] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.068] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:19.068] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.068] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.068] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.068] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.068] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.068] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.068] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.068] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.068] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.068] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.073] | : . ' , ; ` | all.equal() for future ... done
[08:07:19.074] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:19.074] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:19.074] | : . ' , ; ` List of future strategies:
[08:07:19.074] | : . ' , ; ` 1. sequential:
[08:07:19.074] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:19.074] | : . ' , ; `    - tweaked: FALSE
[08:07:19.074] | : . ' , ; `    - call: plan(sequential)
[08:07:19.074] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:19.074] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.076] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.076] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.076] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:19.076] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:19.076] | : . ' , ; ` | : New stack:
[08:07:19.077] | : . ' , ; ` | : List of 1
[08:07:19.077] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.077] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.077] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.077] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.077] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.077] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.077] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.077] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.077] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.077] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.077] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.080] | : . ' , ; ` | : Old stack:
[08:07:19.080] | : . ' , ; ` | : List of 1
[08:07:19.080] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.080] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.080] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.080] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.080] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.080] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.080] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.080] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.080] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.080] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.080] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.083] | : . ' , ; ` | : Identical
[08:07:19.083] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:19.083] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:19.083] | : . ' , ; ` | List of future strategies:
[08:07:19.083] | : . ' , ; ` | 1. sequential:
[08:07:19.083] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:19.083] | : . ' , ; ` |    - tweaked: FALSE
[08:07:19.083] | : . ' , ; ` |    - call: plan(sequential)
[08:07:19.084] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:19.084] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.084] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.084] | : . ' , SequentialFuture started (and completed)
[08:07:19.084] | : . ' , signalConditions() ...
[08:07:19.084] | : . ' , ; include = ‘immediateCondition’
[08:07:19.084] | : . ' , ; exclude = 
[08:07:19.084] | : . ' , ; resignal = FALSE
[08:07:19.085] | : . ' , ; Number of conditions: 7
[08:07:19.085] | : . ' , ;  int 7
[08:07:19.086] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.086] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.086] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.086] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.086] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.086] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.087] | : . ' , ; Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:19.087] | : . ' , signalConditions() ... done
[08:07:19.087] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:19.087] | : . Launching futures ... done
[08:07:19.087] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:19.087] | : Using SequentialFutureBackend ... done
[08:07:19.087] | run() for ‘Future’ (<unnamed-2>) ... done
[08:07:19.087] future(..., label = NULL) ... done

> calls <- backtrace(v)
[08:07:19.088] resolved() for SequentialFuture (<unnamed-2>) ...
[08:07:19.088] | state: ‘finished’
[08:07:19.088] | run: TRUE
[08:07:19.088] | result: ‘FutureResult’
[08:07:19.088] resolved() for SequentialFuture (<unnamed-2>) ... done

> print(calls)
[[1]]
future:::testme("backtrace")

[[2]]
source(file.path(path, "run.R"))

[[3]]
withVisible(eval(ei, envir))

[[4]]
eval(ei, envir)

[[5]]
eval(ei, envir)

[[6]]
source(testme[["script"]], echo = TRUE)

[[7]]
withVisible(eval(ei, envir))

[[8]]
eval(ei, envir)

[[9]]
eval(ei, envir)

[[10]]
v %<-% {
    42L
    stop("Woops")
}

[[11]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[12]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[13]]
do.call(future::future, args = future.args, envir = envir)

[[14]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", label = NULL, gc = FALSE, earlySignal = FALSE, 
    ...) 
{
    debug <- isTRUE(getOption("future.debug"))
    if (debug) {
        mdebugf_push("future(..., label = %s) ...", sQuoteLabel(label))
        mdebugf("lazy: %s", lazy)
        mdebugf("stdout: %s", stdout)
        mdebugf("conditions: [n=%d] %s", length(conditions), 
            commaq(conditions))
        mdebugf("gc: %s", gc)
        mdebugf("earlySignal: %s", earlySignal)
        on.exit(mdebugf_pop())
    }
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    onReference <- getOption("future.globals.onReference")
    if (is.null(onReference)) 
        onReference <- "ignore"
    if (!is.null(globals)) {
        gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
            globals = globals, onReference = onReference, maxSize = +Inf)
        expr <- gp[["expr"]]
        globals <- gp[["globals"]]
        if (length(packages) > 0 || length(gp[["packages"]]) > 
            0) {
            packages <- c(gp[["packages"]], packages)
        }
        gp <- NULL
        attr(globals, "already-done") <- TRUE
    }
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, onReference = onReference, ...)
    future[[".defaultLocal"]] <- !is.element("local", names(list(...)))
    if (isTRUE(getOption("future.journal"))) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future[["lazy"]] <- FALSE
        stop_if_not(inherits(future, "Future"), !future[["lazy"]])
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[15]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, onReference = onReference, ...)

[[16]]
eval(expr, envir = globalenv())

[[17]]
eval(expr, envir = globalenv())

[[18]]
local({
    {
        42L
        stop("Woops")
    }
})

[[19]]
eval.parent(substitute(eval(quote(expr), envir)))

[[20]]
eval(expr, p)

[[21]]
eval(expr, p)

[[22]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[23]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[24]]
stop("Woops")

[[25]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())


> message("*** backtrace( ) - implicit future ... DONE")
*** backtrace( ) - implicit future ... DONE

> message("*** backtrace( ) - subsetting ...")
*** backtrace( ) - subsetting ...

> env <- new.env()

> env[["a"]] %<-% {
+     42
+     stop("Woops")
+ }
[08:07:19.089] future(..., label = NULL) ...
[08:07:19.089] | lazy: FALSE
[08:07:19.089] | stdout: TRUE
[08:07:19.089] | conditions: [n=1] ‘condition’
[08:07:19.090] | gc: FALSE
[08:07:19.090] | earlySignal: FALSE
[08:07:19.090] | getGlobalsAndPackages() ...
[08:07:19.090] | : Searching for globals ...
[08:07:19.095] | : . globals found: [2] ‘{’, ‘stop’
[08:07:19.095] | : Searching for globals ... done
[08:07:19.095] | : Resolving globals: FALSE
[08:07:19.095] | : Search for packages associated with the globals ...
[08:07:19.096] | : . Packages associated with globals: [1] ‘base’
[08:07:19.096] | : . Packages: [1] ‘base’
[08:07:19.096] | : Search for packages associated with the globals ... done
[08:07:19.096] | : Packages after dropping 'base': [0] 
[08:07:19.096] | : globals: [0] 
[08:07:19.096] | : packages: [0] 
[08:07:19.096] | getGlobalsAndPackages() ... done
[08:07:19.097] | run() for ‘Future’ (<unnamed-3>) ...
[08:07:19.097] | : state: ‘created’
[08:07:19.097] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.097] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.097] | : Using SequentialFutureBackend ...
[08:07:19.097] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:07:19.097] | : . Launching futures ...
[08:07:19.097] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:19.097] | : . ' , getFutureData() ...
[08:07:19.098] | : . ' , ; getFutureCore() ...
[08:07:19.098] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:19.098] | : . ' , ; getFutureCore() ... done
[08:07:19.098] | : . ' , ; getFutureCapture() ...
[08:07:19.098] | : . ' , ; getFutureCapture() ... done
[08:07:19.098] | : . ' , ; getFutureContext() ...
[08:07:19.098] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.098] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:19.098] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.098] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:19.099] | : . ' , ; getFutureContext() ... done
[08:07:19.099] | : . ' , getFutureData() ... done
[08:07:19.100] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.100] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:19.100] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.100] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.101] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:19.101] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:19.101] | : . ' , ; ` | New stack:
[08:07:19.101] | : . ' , ; ` | List of 1
[08:07:19.101] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.101] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.101] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:19.101] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.101] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.101] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.101] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:19.101] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.103] | : . ' , ; ` | Old stack:
[08:07:19.103] | : . ' , ; ` | List of 1
[08:07:19.103] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.103] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.103] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:19.103] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.103] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.103] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.103] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:19.103] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.103] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.103] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.103] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.107] | : . ' , ; ` | Not identical
[08:07:19.108] | : . ' , ; ` | all.equal() for future ...
[08:07:19.108] | : . ' , ; ` | : List of 2
[08:07:19.108] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.108] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.108] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:19.108] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.108] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.108] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.108] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:19.108] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.108] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.108] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.108] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.108] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.108] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.108] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.108] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.108] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.108] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.113] | : . ' , ; ` | all.equal() for future ... done
[08:07:19.113] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:19.113] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:19.113] | : . ' , ; ` List of future strategies:
[08:07:19.113] | : . ' , ; ` 1. sequential:
[08:07:19.113] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:19.113] | : . ' , ; `    - tweaked: FALSE
[08:07:19.113] | : . ' , ; `    - call: plan(sequential)
[08:07:19.113] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:19.114] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.115] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.115] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.115] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:19.116] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:19.116] | : . ' , ; ` | : New stack:
[08:07:19.116] | : . ' , ; ` | : List of 1
[08:07:19.116] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.116] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.116] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.116] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.116] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.116] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.116] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.116] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.116] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.116] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.116] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.119] | : . ' , ; ` | : Old stack:
[08:07:19.119] | : . ' , ; ` | : List of 1
[08:07:19.119] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.119] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.119] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.119] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.119] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.119] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.119] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.119] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.119] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.119] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.119] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.122] | : . ' , ; ` | : Identical
[08:07:19.122] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:19.122] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:19.122] | : . ' , ; ` | List of future strategies:
[08:07:19.122] | : . ' , ; ` | 1. sequential:
[08:07:19.122] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:19.122] | : . ' , ; ` |    - tweaked: FALSE
[08:07:19.122] | : . ' , ; ` |    - call: plan(sequential)
[08:07:19.123] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:19.123] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.123] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.123] | : . ' , SequentialFuture started (and completed)
[08:07:19.123] | : . ' , signalConditions() ...
[08:07:19.124] | : . ' , ; include = ‘immediateCondition’
[08:07:19.124] | : . ' , ; exclude = 
[08:07:19.124] | : . ' , ; resignal = FALSE
[08:07:19.124] | : . ' , ; Number of conditions: 7
[08:07:19.125] | : . ' , ;  int 7
[08:07:19.125] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.125] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.125] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.125] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.126] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.126] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.126] | : . ' , ; Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:19.126] | : . ' , signalConditions() ... done
[08:07:19.126] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:19.126] | : . Launching futures ... done
[08:07:19.126] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:19.126] | : Using SequentialFutureBackend ... done
[08:07:19.126] | run() for ‘Future’ (<unnamed-3>) ... done
[08:07:19.126] future(..., label = NULL) ... done

> env[["b"]] %<-% {
+     42
+     stop("Woops")
+ }
[08:07:19.127] future(..., label = NULL) ...
[08:07:19.127] | lazy: FALSE
[08:07:19.127] | stdout: TRUE
[08:07:19.127] | conditions: [n=1] ‘condition’
[08:07:19.127] | gc: FALSE
[08:07:19.127] | earlySignal: FALSE
[08:07:19.127] | getGlobalsAndPackages() ...
[08:07:19.128] | : Searching for globals ...
[08:07:19.132] | : . globals found: [2] ‘{’, ‘stop’
[08:07:19.133] | : Searching for globals ... done
[08:07:19.133] | : Resolving globals: FALSE
[08:07:19.133] | : Search for packages associated with the globals ...
[08:07:19.133] | : . Packages associated with globals: [1] ‘base’
[08:07:19.133] | : . Packages: [1] ‘base’
[08:07:19.133] | : Search for packages associated with the globals ... done
[08:07:19.133] | : Packages after dropping 'base': [0] 
[08:07:19.134] | : globals: [0] 
[08:07:19.134] | : packages: [0] 
[08:07:19.134] | getGlobalsAndPackages() ... done
[08:07:19.134] | run() for ‘Future’ (<unnamed-4>) ...
[08:07:19.134] | : state: ‘created’
[08:07:19.134] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.134] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.134] | : Using SequentialFutureBackend ...
[08:07:19.135] | : . Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:07:19.135] | : . Launching futures ...
[08:07:19.135] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:19.135] | : . ' , getFutureData() ...
[08:07:19.135] | : . ' , ; getFutureCore() ...
[08:07:19.135] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:19.135] | : . ' , ; getFutureCore() ... done
[08:07:19.135] | : . ' , ; getFutureCapture() ...
[08:07:19.135] | : . ' , ; getFutureCapture() ... done
[08:07:19.135] | : . ' , ; getFutureContext() ...
[08:07:19.136] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.136] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:19.136] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.136] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:19.136] | : . ' , ; getFutureContext() ... done
[08:07:19.136] | : . ' , getFutureData() ... done
[08:07:19.137] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.137] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:19.138] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.138] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.138] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:19.138] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:19.138] | : . ' , ; ` | New stack:
[08:07:19.138] | : . ' , ; ` | List of 1
[08:07:19.138] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.138] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.138] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:19.138] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.138] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.138] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.138] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:19.138] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.141] | : . ' , ; ` | Old stack:
[08:07:19.141] | : . ' , ; ` | List of 1
[08:07:19.141] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.141] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.141] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:19.141] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.141] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.141] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.141] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:19.141] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.141] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.141] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.141] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.145] | : . ' , ; ` | Not identical
[08:07:19.145] | : . ' , ; ` | all.equal() for future ...
[08:07:19.145] | : . ' , ; ` | : List of 2
[08:07:19.145] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.145] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.145] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:19.145] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.145] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.145] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.145] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:19.145] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.145] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.145] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.145] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.145] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.145] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.145] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.145] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.145] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.145] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.150] | : . ' , ; ` | all.equal() for future ... done
[08:07:19.150] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:19.150] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:19.150] | : . ' , ; ` List of future strategies:
[08:07:19.150] | : . ' , ; ` 1. sequential:
[08:07:19.150] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:19.150] | : . ' , ; `    - tweaked: FALSE
[08:07:19.150] | : . ' , ; `    - call: plan(sequential)
[08:07:19.151] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:19.151] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.152] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.152] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.153] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:19.153] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:19.153] | : . ' , ; ` | : New stack:
[08:07:19.153] | : . ' , ; ` | : List of 1
[08:07:19.153] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.153] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.153] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.153] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.153] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.153] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.153] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.153] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.153] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.153] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.153] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.156] | : . ' , ; ` | : Old stack:
[08:07:19.156] | : . ' , ; ` | : List of 1
[08:07:19.156] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.156] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.156] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.156] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.156] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.156] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.156] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.156] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.156] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.156] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.156] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.159] | : . ' , ; ` | : Identical
[08:07:19.159] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:19.159] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:19.159] | : . ' , ; ` | List of future strategies:
[08:07:19.159] | : . ' , ; ` | 1. sequential:
[08:07:19.159] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:19.159] | : . ' , ; ` |    - tweaked: FALSE
[08:07:19.159] | : . ' , ; ` |    - call: plan(sequential)
[08:07:19.160] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:19.160] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.160] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.160] | : . ' , SequentialFuture started (and completed)
[08:07:19.160] | : . ' , signalConditions() ...
[08:07:19.160] | : . ' , ; include = ‘immediateCondition’
[08:07:19.161] | : . ' , ; exclude = 
[08:07:19.161] | : . ' , ; resignal = FALSE
[08:07:19.161] | : . ' , ; Number of conditions: 7
[08:07:19.161] | : . ' , ;  int 7
[08:07:19.162] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.162] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.162] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.162] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.162] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.163] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.163] | : . ' , ; Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:19.163] | : . ' , signalConditions() ... done
[08:07:19.163] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:19.163] | : . Launching futures ... done
[08:07:19.163] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:19.163] | : Using SequentialFutureBackend ... done
[08:07:19.163] | run() for ‘Future’ (<unnamed-4>) ... done
[08:07:19.163] future(..., label = NULL) ... done

> calls <- backtrace(env[["b"]])
[08:07:19.164] resolved() for SequentialFuture (<unnamed-4>) ...
[08:07:19.164] | state: ‘finished’
[08:07:19.164] | run: TRUE
[08:07:19.164] | result: ‘FutureResult’
[08:07:19.164] resolved() for SequentialFuture (<unnamed-4>) ... done

> print(calls)
[[1]]
future:::testme("backtrace")

[[2]]
source(file.path(path, "run.R"))

[[3]]
withVisible(eval(ei, envir))

[[4]]
eval(ei, envir)

[[5]]
eval(ei, envir)

[[6]]
source(testme[["script"]], echo = TRUE)

[[7]]
withVisible(eval(ei, envir))

[[8]]
eval(ei, envir)

[[9]]
eval(ei, envir)

[[10]]
env[["b"]] %<-% {
    42L
    stop("Woops")
}

[[11]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[12]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[13]]
do.call(future::future, args = future.args, envir = envir)

[[14]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", label = NULL, gc = FALSE, earlySignal = FALSE, 
    ...) 
{
    debug <- isTRUE(getOption("future.debug"))
    if (debug) {
        mdebugf_push("future(..., label = %s) ...", sQuoteLabel(label))
        mdebugf("lazy: %s", lazy)
        mdebugf("stdout: %s", stdout)
        mdebugf("conditions: [n=%d] %s", length(conditions), 
            commaq(conditions))
        mdebugf("gc: %s", gc)
        mdebugf("earlySignal: %s", earlySignal)
        on.exit(mdebugf_pop())
    }
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    onReference <- getOption("future.globals.onReference")
    if (is.null(onReference)) 
        onReference <- "ignore"
    if (!is.null(globals)) {
        gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
            globals = globals, onReference = onReference, maxSize = +Inf)
        expr <- gp[["expr"]]
        globals <- gp[["globals"]]
        if (length(packages) > 0 || length(gp[["packages"]]) > 
            0) {
            packages <- c(gp[["packages"]], packages)
        }
        gp <- NULL
        attr(globals, "already-done") <- TRUE
    }
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, onReference = onReference, ...)
    future[[".defaultLocal"]] <- !is.element("local", names(list(...)))
    if (isTRUE(getOption("future.journal"))) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future[["lazy"]] <- FALSE
        stop_if_not(inherits(future, "Future"), !future[["lazy"]])
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[15]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, onReference = onReference, ...)

[[16]]
eval(expr, envir = globalenv())

[[17]]
eval(expr, envir = globalenv())

[[18]]
local({
    {
        42L
        stop("Woops")
    }
})

[[19]]
eval.parent(substitute(eval(quote(expr), envir)))

[[20]]
eval(expr, p)

[[21]]
eval(expr, p)

[[22]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[23]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[24]]
stop("Woops")

[[25]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())


> stopifnot(is.list(calls))

> lenv <- listenv::listenv()

> lenv[[1]] %<-% {
+     42
+     stop("Woops")
+ }
[08:07:19.165] future(..., label = NULL) ...
[08:07:19.166] | lazy: FALSE
[08:07:19.166] | stdout: TRUE
[08:07:19.166] | conditions: [n=1] ‘condition’
[08:07:19.166] | gc: FALSE
[08:07:19.166] | earlySignal: FALSE
[08:07:19.166] | getGlobalsAndPackages() ...
[08:07:19.166] | : Searching for globals ...
[08:07:19.171] | : . globals found: [2] ‘{’, ‘stop’
[08:07:19.171] | : Searching for globals ... done
[08:07:19.171] | : Resolving globals: FALSE
[08:07:19.171] | : Search for packages associated with the globals ...
[08:07:19.172] | : . Packages associated with globals: [1] ‘base’
[08:07:19.172] | : . Packages: [1] ‘base’
[08:07:19.172] | : Search for packages associated with the globals ... done
[08:07:19.172] | : Packages after dropping 'base': [0] 
[08:07:19.172] | : globals: [0] 
[08:07:19.172] | : packages: [0] 
[08:07:19.172] | getGlobalsAndPackages() ... done
[08:07:19.173] | run() for ‘Future’ (<unnamed-5>) ...
[08:07:19.173] | : state: ‘created’
[08:07:19.173] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.173] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.173] | : Using SequentialFutureBackend ...
[08:07:19.173] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:07:19.173] | : . Launching futures ...
[08:07:19.173] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:19.173] | : . ' , getFutureData() ...
[08:07:19.174] | : . ' , ; getFutureCore() ...
[08:07:19.174] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:19.174] | : . ' , ; getFutureCore() ... done
[08:07:19.174] | : . ' , ; getFutureCapture() ...
[08:07:19.174] | : . ' , ; getFutureCapture() ... done
[08:07:19.174] | : . ' , ; getFutureContext() ...
[08:07:19.174] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.174] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:19.174] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.174] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:19.175] | : . ' , ; getFutureContext() ... done
[08:07:19.175] | : . ' , getFutureData() ... done
[08:07:19.176] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.176] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:19.176] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.176] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.176] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:19.177] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:19.177] | : . ' , ; ` | New stack:
[08:07:19.177] | : . ' , ; ` | List of 1
[08:07:19.177] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.177] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.177] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:19.177] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.177] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.177] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.177] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:19.177] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.179] | : . ' , ; ` | Old stack:
[08:07:19.179] | : . ' , ; ` | List of 1
[08:07:19.179] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.179] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.179] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:19.179] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.179] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.179] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.179] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:19.179] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.179] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.179] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.179] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.183] | : . ' , ; ` | Not identical
[08:07:19.183] | : . ' , ; ` | all.equal() for future ...
[08:07:19.183] | : . ' , ; ` | : List of 2
[08:07:19.183] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.183] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.183] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:19.183] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.183] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.183] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.183] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:19.183] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.183] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.183] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.183] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.183] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.183] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.183] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.183] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.183] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.183] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.188] | : . ' , ; ` | all.equal() for future ... done
[08:07:19.188] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:19.189] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:19.189] | : . ' , ; ` List of future strategies:
[08:07:19.189] | : . ' , ; ` 1. sequential:
[08:07:19.189] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:19.189] | : . ' , ; `    - tweaked: FALSE
[08:07:19.189] | : . ' , ; `    - call: plan(sequential)
[08:07:19.189] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:19.189] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.191] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.191] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.191] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:19.191] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:19.191] | : . ' , ; ` | : New stack:
[08:07:19.191] | : . ' , ; ` | : List of 1
[08:07:19.191] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.191] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.191] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.191] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.191] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.191] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.191] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.191] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.191] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.191] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.191] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.194] | : . ' , ; ` | : Old stack:
[08:07:19.195] | : . ' , ; ` | : List of 1
[08:07:19.195] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.195] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.195] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.195] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.195] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.195] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.195] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.195] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.195] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.195] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.195] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.198] | : . ' , ; ` | : Identical
[08:07:19.198] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:19.198] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:19.198] | : . ' , ; ` | List of future strategies:
[08:07:19.198] | : . ' , ; ` | 1. sequential:
[08:07:19.198] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:19.198] | : . ' , ; ` |    - tweaked: FALSE
[08:07:19.198] | : . ' , ; ` |    - call: plan(sequential)
[08:07:19.199] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:19.199] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.199] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.200] | : . ' , SequentialFuture started (and completed)
[08:07:19.200] | : . ' , signalConditions() ...
[08:07:19.200] | : . ' , ; include = ‘immediateCondition’
[08:07:19.200] | : . ' , ; exclude = 
[08:07:19.200] | : . ' , ; resignal = FALSE
[08:07:19.200] | : . ' , ; Number of conditions: 7
[08:07:19.200] | : . ' , ;  int 7
[08:07:19.201] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.201] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.201] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.201] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.201] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.201] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.201] | : . ' , ; Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:19.201] | : . ' , signalConditions() ... done
[08:07:19.201] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:19.202] | : . Launching futures ... done
[08:07:19.202] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:19.202] | : Using SequentialFutureBackend ... done
[08:07:19.202] | run() for ‘Future’ (<unnamed-5>) ... done
[08:07:19.202] future(..., label = NULL) ... done

> lenv[[2]] %<-% {
+     42
+     stop("Woops")
+ }
[08:07:19.202] future(..., label = NULL) ...
[08:07:19.202] | lazy: FALSE
[08:07:19.203] | stdout: TRUE
[08:07:19.203] | conditions: [n=1] ‘condition’
[08:07:19.203] | gc: FALSE
[08:07:19.203] | earlySignal: FALSE
[08:07:19.203] | getGlobalsAndPackages() ...
[08:07:19.203] | : Searching for globals ...
[08:07:19.208] | : . globals found: [2] ‘{’, ‘stop’
[08:07:19.208] | : Searching for globals ... done
[08:07:19.208] | : Resolving globals: FALSE
[08:07:19.208] | : Search for packages associated with the globals ...
[08:07:19.208] | : . Packages associated with globals: [1] ‘base’
[08:07:19.209] | : . Packages: [1] ‘base’
[08:07:19.209] | : Search for packages associated with the globals ... done
[08:07:19.209] | : Packages after dropping 'base': [0] 
[08:07:19.209] | : globals: [0] 
[08:07:19.209] | : packages: [0] 
[08:07:19.209] | getGlobalsAndPackages() ... done
[08:07:19.209] | run() for ‘Future’ (<unnamed-6>) ...
[08:07:19.210] | : state: ‘created’
[08:07:19.210] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.210] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.210] | : Using SequentialFutureBackend ...
[08:07:19.210] | : . Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:07:19.210] | : . Launching futures ...
[08:07:19.210] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:19.210] | : . ' , getFutureData() ...
[08:07:19.210] | : . ' , ; getFutureCore() ...
[08:07:19.211] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:19.211] | : . ' , ; getFutureCore() ... done
[08:07:19.211] | : . ' , ; getFutureCapture() ...
[08:07:19.211] | : . ' , ; getFutureCapture() ... done
[08:07:19.211] | : . ' , ; getFutureContext() ...
[08:07:19.211] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.211] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:19.211] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.211] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:19.211] | : . ' , ; getFutureContext() ... done
[08:07:19.212] | : . ' , getFutureData() ... done
[08:07:19.213] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.213] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:19.213] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.213] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.213] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:19.213] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:19.214] | : . ' , ; ` | New stack:
[08:07:19.214] | : . ' , ; ` | List of 1
[08:07:19.214] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.214] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.214] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:19.214] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.214] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.214] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.214] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:19.214] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.216] | : . ' , ; ` | Old stack:
[08:07:19.216] | : . ' , ; ` | List of 1
[08:07:19.216] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.216] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.216] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:19.216] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.216] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.216] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.216] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:19.216] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.216] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.216] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.216] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.220] | : . ' , ; ` | Not identical
[08:07:19.220] | : . ' , ; ` | all.equal() for future ...
[08:07:19.220] | : . ' , ; ` | : List of 2
[08:07:19.220] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.220] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.220] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:19.220] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.220] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.220] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.220] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:19.220] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.220] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.220] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.220] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.220] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.220] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.220] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.220] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.220] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.220] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.225] | : . ' , ; ` | all.equal() for future ... done
[08:07:19.225] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:19.225] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:19.225] | : . ' , ; ` List of future strategies:
[08:07:19.225] | : . ' , ; ` 1. sequential:
[08:07:19.225] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:19.225] | : . ' , ; `    - tweaked: FALSE
[08:07:19.225] | : . ' , ; `    - call: plan(sequential)
[08:07:19.226] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:19.226] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.227] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.228] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.228] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:19.228] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:19.228] | : . ' , ; ` | : New stack:
[08:07:19.228] | : . ' , ; ` | : List of 1
[08:07:19.228] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.228] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.228] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.228] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.228] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.228] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.228] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.228] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.228] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.228] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.228] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.231] | : . ' , ; ` | : Old stack:
[08:07:19.231] | : . ' , ; ` | : List of 1
[08:07:19.231] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.231] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.231] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.231] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.231] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.231] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.231] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.231] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.231] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.231] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.231] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.235] | : . ' , ; ` | : Identical
[08:07:19.235] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:19.235] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:19.235] | : . ' , ; ` | List of future strategies:
[08:07:19.235] | : . ' , ; ` | 1. sequential:
[08:07:19.235] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:19.235] | : . ' , ; ` |    - tweaked: FALSE
[08:07:19.235] | : . ' , ; ` |    - call: plan(sequential)
[08:07:19.236] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:19.236] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.236] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.236] | : . ' , SequentialFuture started (and completed)
[08:07:19.236] | : . ' , signalConditions() ...
[08:07:19.237] | : . ' , ; include = ‘immediateCondition’
[08:07:19.237] | : . ' , ; exclude = 
[08:07:19.237] | : . ' , ; resignal = FALSE
[08:07:19.237] | : . ' , ; Number of conditions: 7
[08:07:19.237] | : . ' , ;  int 7
[08:07:19.237] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.237] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.238] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.238] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.238] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.238] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.238] | : . ' , ; Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:19.238] | : . ' , signalConditions() ... done
[08:07:19.238] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:19.238] | : . Launching futures ... done
[08:07:19.238] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:19.238] | : Using SequentialFutureBackend ... done
[08:07:19.239] | run() for ‘Future’ (<unnamed-6>) ... done
[08:07:19.239] future(..., label = NULL) ... done

> calls <- backtrace(lenv[[2]])
[08:07:19.239] resolved() for SequentialFuture (<unnamed-6>) ...
[08:07:19.239] | state: ‘finished’
[08:07:19.239] | run: TRUE
[08:07:19.239] | result: ‘FutureResult’
[08:07:19.240] resolved() for SequentialFuture (<unnamed-6>) ... done

> print(calls)
[[1]]
future:::testme("backtrace")

[[2]]
source(file.path(path, "run.R"))

[[3]]
withVisible(eval(ei, envir))

[[4]]
eval(ei, envir)

[[5]]
eval(ei, envir)

[[6]]
source(testme[["script"]], echo = TRUE)

[[7]]
withVisible(eval(ei, envir))

[[8]]
eval(ei, envir)

[[9]]
eval(ei, envir)

[[10]]
lenv[[2]] %<-% {
    42L
    stop("Woops")
}

[[11]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[12]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[13]]
do.call(future::future, args = future.args, envir = envir)

[[14]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", label = NULL, gc = FALSE, earlySignal = FALSE, 
    ...) 
{
    debug <- isTRUE(getOption("future.debug"))
    if (debug) {
        mdebugf_push("future(..., label = %s) ...", sQuoteLabel(label))
        mdebugf("lazy: %s", lazy)
        mdebugf("stdout: %s", stdout)
        mdebugf("conditions: [n=%d] %s", length(conditions), 
            commaq(conditions))
        mdebugf("gc: %s", gc)
        mdebugf("earlySignal: %s", earlySignal)
        on.exit(mdebugf_pop())
    }
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    onReference <- getOption("future.globals.onReference")
    if (is.null(onReference)) 
        onReference <- "ignore"
    if (!is.null(globals)) {
        gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
            globals = globals, onReference = onReference, maxSize = +Inf)
        expr <- gp[["expr"]]
        globals <- gp[["globals"]]
        if (length(packages) > 0 || length(gp[["packages"]]) > 
            0) {
            packages <- c(gp[["packages"]], packages)
        }
        gp <- NULL
        attr(globals, "already-done") <- TRUE
    }
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, onReference = onReference, ...)
    future[[".defaultLocal"]] <- !is.element("local", names(list(...)))
    if (isTRUE(getOption("future.journal"))) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future[["lazy"]] <- FALSE
        stop_if_not(inherits(future, "Future"), !future[["lazy"]])
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[15]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, onReference = onReference, ...)

[[16]]
eval(expr, envir = globalenv())

[[17]]
eval(expr, envir = globalenv())

[[18]]
local({
    {
        42L
        stop("Woops")
    }
})

[[19]]
eval.parent(substitute(eval(quote(expr), envir)))

[[20]]
eval(expr, p)

[[21]]
eval(expr, p)

[[22]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[23]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[24]]
stop("Woops")

[[25]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())


> stopifnot(is.list(calls))

> ll <- list()

> ll[[1]] <- future({
+     42
+     stop("Woops")
+ })
[08:07:19.240] future(..., label = NULL) ...
[08:07:19.240] | lazy: FALSE
[08:07:19.241] | stdout: TRUE
[08:07:19.241] | conditions: [n=1] ‘condition’
[08:07:19.241] | gc: FALSE
[08:07:19.241] | earlySignal: FALSE
[08:07:19.241] | getGlobalsAndPackages() ...
[08:07:19.241] | : Searching for globals ...
[08:07:19.246] | : . globals found: [2] ‘{’, ‘stop’
[08:07:19.246] | : Searching for globals ... done
[08:07:19.246] | : Resolving globals: FALSE
[08:07:19.246] | : Search for packages associated with the globals ...
[08:07:19.247] | : . Packages associated with globals: [1] ‘base’
[08:07:19.247] | : . Packages: [1] ‘base’
[08:07:19.247] | : Search for packages associated with the globals ... done
[08:07:19.247] | : Packages after dropping 'base': [0] 
[08:07:19.247] | : globals: [0] 
[08:07:19.247] | : packages: [0] 
[08:07:19.247] | getGlobalsAndPackages() ... done
[08:07:19.248] | run() for ‘Future’ (<unnamed-7>) ...
[08:07:19.248] | : state: ‘created’
[08:07:19.248] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.248] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.248] | : Using SequentialFutureBackend ...
[08:07:19.248] | : . Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:07:19.248] | : . Launching futures ...
[08:07:19.248] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:19.248] | : . ' , getFutureData() ...
[08:07:19.249] | : . ' , ; getFutureCore() ...
[08:07:19.249] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:19.249] | : . ' , ; getFutureCore() ... done
[08:07:19.249] | : . ' , ; getFutureCapture() ...
[08:07:19.249] | : . ' , ; getFutureCapture() ... done
[08:07:19.249] | : . ' , ; getFutureContext() ...
[08:07:19.249] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.249] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:19.249] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.249] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:19.250] | : . ' , ; getFutureContext() ... done
[08:07:19.250] | : . ' , getFutureData() ... done
[08:07:19.251] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.251] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:19.251] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.251] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.251] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:19.252] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:19.252] | : . ' , ; ` | New stack:
[08:07:19.252] | : . ' , ; ` | List of 1
[08:07:19.252] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.252] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.252] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:19.252] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.252] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.252] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.252] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:19.252] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.255] | : . ' , ; ` | Old stack:
[08:07:19.255] | : . ' , ; ` | List of 1
[08:07:19.255] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.255] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.255] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:19.255] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.255] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.255] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.255] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:19.255] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.255] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.255] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.255] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.258] | : . ' , ; ` | Not identical
[08:07:19.258] | : . ' , ; ` | all.equal() for future ...
[08:07:19.258] | : . ' , ; ` | : List of 2
[08:07:19.258] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.258] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.258] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:19.258] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.258] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.258] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.258] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:19.258] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.258] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.258] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.258] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.258] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.258] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.258] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.258] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.258] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.258] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.263] | : . ' , ; ` | all.equal() for future ... done
[08:07:19.263] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:19.263] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:19.264] | : . ' , ; ` List of future strategies:
[08:07:19.264] | : . ' , ; ` 1. sequential:
[08:07:19.264] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:19.264] | : . ' , ; `    - tweaked: FALSE
[08:07:19.264] | : . ' , ; `    - call: plan(sequential)
[08:07:19.264] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:19.264] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.266] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.266] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.266] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:19.266] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:19.266] | : . ' , ; ` | : New stack:
[08:07:19.266] | : . ' , ; ` | : List of 1
[08:07:19.266] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.266] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.266] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.266] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.266] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.266] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.266] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.266] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.266] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.266] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.266] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.269] | : . ' , ; ` | : Old stack:
[08:07:19.269] | : . ' , ; ` | : List of 1
[08:07:19.269] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.269] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.269] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.269] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.269] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.269] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.269] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.269] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.269] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.269] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.269] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.273] | : . ' , ; ` | : Identical
[08:07:19.273] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:19.273] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:19.274] | : . ' , ; ` | List of future strategies:
[08:07:19.274] | : . ' , ; ` | 1. sequential:
[08:07:19.274] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:19.274] | : . ' , ; ` |    - tweaked: FALSE
[08:07:19.274] | : . ' , ; ` |    - call: plan(sequential)
[08:07:19.274] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:19.274] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.274] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.274] | : . ' , SequentialFuture started (and completed)
[08:07:19.275] | : . ' , signalConditions() ...
[08:07:19.275] | : . ' , ; include = ‘immediateCondition’
[08:07:19.275] | : . ' , ; exclude = 
[08:07:19.275] | : . ' , ; resignal = FALSE
[08:07:19.275] | : . ' , ; Number of conditions: 7
[08:07:19.275] | : . ' , ;  int 7
[08:07:19.275] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.275] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.276] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.276] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.276] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.276] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.276] | : . ' , ; Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:19.276] | : . ' , signalConditions() ... done
[08:07:19.276] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:19.276] | : . Launching futures ... done
[08:07:19.276] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:19.277] | : Using SequentialFutureBackend ... done
[08:07:19.277] | run() for ‘Future’ (<unnamed-7>) ... done
[08:07:19.277] future(..., label = NULL) ... done

> ll[[2]] <- future({
+     42
+     stop("Woops")
+ })
[08:07:19.277] future(..., label = NULL) ...
[08:07:19.277] | lazy: FALSE
[08:07:19.277] | stdout: TRUE
[08:07:19.277] | conditions: [n=1] ‘condition’
[08:07:19.277] | gc: FALSE
[08:07:19.277] | earlySignal: FALSE
[08:07:19.277] | getGlobalsAndPackages() ...
[08:07:19.278] | : Searching for globals ...
[08:07:19.282] | : . globals found: [2] ‘{’, ‘stop’
[08:07:19.283] | : Searching for globals ... done
[08:07:19.283] | : Resolving globals: FALSE
[08:07:19.283] | : Search for packages associated with the globals ...
[08:07:19.283] | : . Packages associated with globals: [1] ‘base’
[08:07:19.283] | : . Packages: [1] ‘base’
[08:07:19.283] | : Search for packages associated with the globals ... done
[08:07:19.283] | : Packages after dropping 'base': [0] 
[08:07:19.284] | : globals: [0] 
[08:07:19.284] | : packages: [0] 
[08:07:19.284] | getGlobalsAndPackages() ... done
[08:07:19.284] | run() for ‘Future’ (<unnamed-8>) ...
[08:07:19.284] | : state: ‘created’
[08:07:19.284] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.284] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.284] | : Using SequentialFutureBackend ...
[08:07:19.285] | : . Number of futures since start: 7 (7 created, 7 launched, 7 finished)
[08:07:19.285] | : . Launching futures ...
[08:07:19.285] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:19.285] | : . ' , getFutureData() ...
[08:07:19.285] | : . ' , ; getFutureCore() ...
[08:07:19.285] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:19.285] | : . ' , ; getFutureCore() ... done
[08:07:19.285] | : . ' , ; getFutureCapture() ...
[08:07:19.285] | : . ' , ; getFutureCapture() ... done
[08:07:19.286] | : . ' , ; getFutureContext() ...
[08:07:19.286] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.286] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:19.286] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.286] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:19.286] | : . ' , ; getFutureContext() ... done
[08:07:19.286] | : . ' , getFutureData() ... done
[08:07:19.287] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.287] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:19.288] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.288] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.289] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:19.289] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:19.289] | : . ' , ; ` | New stack:
[08:07:19.289] | : . ' , ; ` | List of 1
[08:07:19.289] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.289] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.289] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:19.289] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.289] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.289] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.289] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:19.289] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.292] | : . ' , ; ` | Old stack:
[08:07:19.292] | : . ' , ; ` | List of 1
[08:07:19.292] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.292] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.292] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:19.292] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.292] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.292] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.292] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:19.292] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.292] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.292] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.292] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.295] | : . ' , ; ` | Not identical
[08:07:19.295] | : . ' , ; ` | all.equal() for future ...
[08:07:19.295] | : . ' , ; ` | : List of 2
[08:07:19.295] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.295] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.295] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:19.295] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.295] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.295] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.295] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:19.295] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.295] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.295] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.295] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.295] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.295] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.295] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.295] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.295] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.295] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.300] | : . ' , ; ` | all.equal() for future ... done
[08:07:19.300] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:19.300] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:19.300] | : . ' , ; ` List of future strategies:
[08:07:19.300] | : . ' , ; ` 1. sequential:
[08:07:19.300] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:19.300] | : . ' , ; `    - tweaked: FALSE
[08:07:19.300] | : . ' , ; `    - call: plan(sequential)
[08:07:19.301] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:19.301] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.302] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.302] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.302] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:19.303] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:19.303] | : . ' , ; ` | : New stack:
[08:07:19.303] | : . ' , ; ` | : List of 1
[08:07:19.303] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.303] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.303] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.303] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.303] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.303] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.303] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.303] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.303] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.303] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.303] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.307] | : . ' , ; ` | : Old stack:
[08:07:19.307] | : . ' , ; ` | : List of 1
[08:07:19.307] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.307] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.307] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.307] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.307] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.307] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.307] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.307] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.307] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.307] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.307] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.310] | : . ' , ; ` | : Identical
[08:07:19.310] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:19.310] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:19.310] | : . ' , ; ` | List of future strategies:
[08:07:19.310] | : . ' , ; ` | 1. sequential:
[08:07:19.310] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:19.310] | : . ' , ; ` |    - tweaked: FALSE
[08:07:19.310] | : . ' , ; ` |    - call: plan(sequential)
[08:07:19.311] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:19.311] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.311] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.311] | : . ' , SequentialFuture started (and completed)
[08:07:19.311] | : . ' , signalConditions() ...
[08:07:19.311] | : . ' , ; include = ‘immediateCondition’
[08:07:19.311] | : . ' , ; exclude = 
[08:07:19.312] | : . ' , ; resignal = FALSE
[08:07:19.312] | : . ' , ; Number of conditions: 7
[08:07:19.312] | : . ' , ;  int 7
[08:07:19.312] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.312] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.312] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.312] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.313] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.313] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.313] | : . ' , ; Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:19.313] | : . ' , signalConditions() ... done
[08:07:19.313] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:19.313] | : . Launching futures ... done
[08:07:19.313] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:19.313] | : Using SequentialFutureBackend ... done
[08:07:19.313] | run() for ‘Future’ (<unnamed-8>) ... done
[08:07:19.313] future(..., label = NULL) ... done

> vs <- value(ll, signal = FALSE)
[08:07:19.314] value() for list ...
[08:07:19.314] | recursive: 0
[08:07:19.314] | reduce: FALSE
[08:07:19.315] | length: 2

[08:07:19.315] | Number of remaining objects: 2
[08:07:19.315] | checking value #1:
[08:07:19.315] | 'obj' is SequentialFuture
[08:07:19.315] | resolved() for SequentialFuture (<unnamed-7>) ...
[08:07:19.315] | : state: ‘finished’
[08:07:19.315] | : run: TRUE
[08:07:19.315] | : result: ‘FutureResult’
[08:07:19.316] | resolved() for SequentialFuture (<unnamed-7>) ... done
[08:07:19.316] | SequentialFuture #1
[08:07:19.316] | signalConditionsASAP(SequentialFuture, pos=1) ...
[08:07:19.316] | : nx: 2
[08:07:19.316] | : relay: TRUE
[08:07:19.316] | : stdout: TRUE
[08:07:19.316] | : signal: FALSE
[08:07:19.316] | : resignal: FALSE
[08:07:19.316] | : force: TRUE
[08:07:19.316] | : relayed: [n=2] FALSE, FALSE
[08:07:19.316] | : queued futures: [n=2] FALSE, FALSE
[08:07:19.316] | : until=1
[08:07:19.317] | : relaying element #1
[08:07:19.317] | : value() for SequentialFuture (<unnamed-7>) ...
[08:07:19.317] | : . signalConditions() ...
[08:07:19.317] | : . ' include = ‘immediateCondition’
[08:07:19.317] | : . ' exclude = 
[08:07:19.317] | : . ' resignal = FALSE
[08:07:19.317] | : . ' Number of conditions: 7
[08:07:19.317] | : . '  int 7
[08:07:19.318] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.318] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.318] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.318] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.318] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.318] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.318] | : . ' Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:19.318] | : . signalConditions() ... done
[08:07:19.318] | : . relay stdout ...
[08:07:19.319] | : . relay stdout ... done
[08:07:19.319] | : . check for misuse ...
[08:07:19.319] | : . check for misuse ... done
[08:07:19.319] | : value() for SequentialFuture (<unnamed-7>) ... done
[08:07:19.319] | : relayed: [n=2] TRUE, FALSE
[08:07:19.319] | : queued futures: [n=2] TRUE, FALSE
[08:07:19.319] | signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:07:19.319] | value(<SequentialFuture>, ...) ...
[08:07:19.319] | value(<SequentialFuture>, ...) ... done
[08:07:19.319] | value() for SequentialFuture (<unnamed-7>) ...
[08:07:19.320] | : signalConditions() ...
[08:07:19.320] | : . include = ‘immediateCondition’
[08:07:19.320] | : . exclude = 
[08:07:19.320] | : . resignal = FALSE
[08:07:19.320] | : . Number of conditions: 7
[08:07:19.320] | : .  int 7
[08:07:19.320] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.320] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.321] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.321] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.321] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.321] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.321] | : . Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:19.321] | : signalConditions() ... done
[08:07:19.321] | : check for misuse ...
[08:07:19.321] | : check for misuse ... done
[08:07:19.321] | value() for SequentialFuture (<unnamed-7>) ... done
[08:07:19.321] | value: <simpleError>
[08:07:19.322] | signalConditionsASAP(SequentialFuture, pos=1) ...
[08:07:19.322] | : nx: 2
[08:07:19.322] | : relay: TRUE
[08:07:19.322] | : stdout: TRUE
[08:07:19.322] | : signal: FALSE
[08:07:19.322] | : resignal: FALSE
[08:07:19.322] | : force: TRUE
[08:07:19.322] | : relayed: [n=2] TRUE, FALSE
[08:07:19.322] | : queued futures: [n=2] TRUE, FALSE
[08:07:19.322] | : until=2
[08:07:19.322] | : relaying element #2
[08:07:19.322] | : relayed: [n=2] TRUE, FALSE
[08:07:19.323] | : queued futures: [n=2] TRUE, FALSE
[08:07:19.323] | signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:07:19.323] | resolve() for SequentialFuture ...
[08:07:19.323] | resolve() for SequentialFuture ... done
[08:07:19.323] | length: 1 (resolved future 1)
[08:07:19.323] value() for list ... done
[08:07:19.323] checking value #2:
[08:07:19.323] 'obj' is SequentialFuture
[08:07:19.324] resolved() for SequentialFuture (<unnamed-8>) ...
[08:07:19.324] | state: ‘finished’
[08:07:19.325] | run: TRUE
[08:07:19.325] | result: ‘FutureResult’
[08:07:19.325] resolved() for SequentialFuture (<unnamed-8>) ... done
[08:07:19.325] SequentialFuture #2
[08:07:19.325] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:07:19.325] | nx: 2
[08:07:19.325] | relay: TRUE
[08:07:19.325] | stdout: TRUE
[08:07:19.325] | signal: FALSE
[08:07:19.325] | resignal: FALSE
[08:07:19.325] | force: TRUE
[08:07:19.325] | relayed: [n=2] TRUE, FALSE
[08:07:19.326] | queued futures: [n=2] TRUE, FALSE
[08:07:19.326] | until=2
[08:07:19.326] | relaying element #2
[08:07:19.326] | value() for SequentialFuture (<unnamed-8>) ...
[08:07:19.326] | : signalConditions() ...
[08:07:19.326] | : . include = ‘immediateCondition’
[08:07:19.326] | : . exclude = 
[08:07:19.326] | : . resignal = FALSE
[08:07:19.326] | : . Number of conditions: 7
[08:07:19.326] | : .  int 7
[08:07:19.327] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.327] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.327] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.327] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.327] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.327] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.327] | : . Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:19.328] | : signalConditions() ... done
[08:07:19.328] | : relay stdout ...
[08:07:19.328] | : relay stdout ... done
[08:07:19.328] | : check for misuse ...
[08:07:19.328] | : check for misuse ... done
[08:07:19.328] | value() for SequentialFuture (<unnamed-8>) ... done
[08:07:19.328] | relayed: [n=2] TRUE, TRUE
[08:07:19.328] | queued futures: [n=2] TRUE, TRUE
[08:07:19.328] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:07:19.328] value(<SequentialFuture>, ...) ...
[08:07:19.329] value(<SequentialFuture>, ...) ... done
[08:07:19.329] value() for SequentialFuture (<unnamed-8>) ...
[08:07:19.329] | signalConditions() ...
[08:07:19.329] | : include = ‘immediateCondition’
[08:07:19.329] | : exclude = 
[08:07:19.329] | : resignal = FALSE
[08:07:19.329] | : Number of conditions: 7
[08:07:19.329] | :  int 7
[08:07:19.330] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.330] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.330] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.330] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.330] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.330] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.330] | : Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:19.330] | signalConditions() ... done
[08:07:19.330] | check for misuse ...
[08:07:19.331] | check for misuse ... done
[08:07:19.331] value() for SequentialFuture (<unnamed-8>) ... done
[08:07:19.331] value: <simpleError>
[08:07:19.331] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:07:19.331] | nx: 2
[08:07:19.331] | relay: TRUE
[08:07:19.331] | stdout: TRUE
[08:07:19.331] | signal: FALSE
[08:07:19.331] | resignal: FALSE
[08:07:19.331] | force: TRUE
[08:07:19.331] | relayed: [n=2] TRUE, TRUE
[08:07:19.331] | queued futures: [n=2] TRUE, TRUE
[08:07:19.332] | until=2
[08:07:19.332] | relayed: [n=2] TRUE, TRUE
[08:07:19.332] | queued futures: [n=2] TRUE, TRUE
[08:07:19.332] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:07:19.332] resolve() for SequentialFuture ...
[08:07:19.332] resolve() for SequentialFuture ... done
[08:07:19.332] length: 0 (resolved future 2)

[08:07:19.332] Relaying remaining futures ...
[08:07:19.332] | signalConditionsASAP(NULL, pos=0) ...
[08:07:19.332] | : nx: 2
[08:07:19.333] | : relay: TRUE
[08:07:19.333] | : stdout: TRUE
[08:07:19.333] | : signal: FALSE
[08:07:19.333] | : resignal: FALSE
[08:07:19.333] | : force: TRUE
[08:07:19.333] | : relayed: [n=2] TRUE, TRUE
[08:07:19.333] | : queued futures: [n=2] TRUE, TRUE
 - flush all
[08:07:19.333] | : relayed: [n=2] TRUE, TRUE
[08:07:19.333] | : queued futures: [n=2] TRUE, TRUE
[08:07:19.333] | signalConditionsASAP(NULL, pos=0) ... done
[08:07:19.334] Relaying remaining futures ... done


> calls <- backtrace(ll[[2]])
[08:07:19.334] resolved() for SequentialFuture (<unnamed-8>) ...
[08:07:19.334] | state: ‘finished’
[08:07:19.334] | run: TRUE
[08:07:19.334] | result: ‘FutureResult’
[08:07:19.334] resolved() for SequentialFuture (<unnamed-8>) ... done

> print(calls)
[[1]]
future:::testme("backtrace")

[[2]]
source(file.path(path, "run.R"))

[[3]]
withVisible(eval(ei, envir))

[[4]]
eval(ei, envir)

[[5]]
eval(ei, envir)

[[6]]
source(testme[["script"]], echo = TRUE)

[[7]]
withVisible(eval(ei, envir))

[[8]]
eval(ei, envir)

[[9]]
eval(ei, envir)

[[10]]
future({
    42L
    stop("Woops")
})

[[11]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, onReference = onReference, ...)

[[12]]
eval(expr, envir = globalenv())

[[13]]
eval(expr, envir = globalenv())

[[14]]
local({
    {
        42L
        stop("Woops")
    }
})

[[15]]
eval.parent(substitute(eval(quote(expr), envir)))

[[16]]
eval(expr, p)

[[17]]
eval(expr, p)

[[18]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[19]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[20]]
stop("Woops")

[[21]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())


> stopifnot(is.list(calls))

> message("*** backtrace( ) - subsetting ... DONE")
*** backtrace( ) - subsetting ... DONE

> message("*** backtrace( ) - exceptions ...")
*** backtrace( ) - exceptions ...

> message("- No condition ...")
- No condition ...

> f <- future(42)
[08:07:19.335] future(..., label = NULL) ...
[08:07:19.335] | lazy: FALSE
[08:07:19.335] | stdout: TRUE
[08:07:19.335] | conditions: [n=1] ‘condition’
[08:07:19.336] | gc: FALSE
[08:07:19.336] | earlySignal: FALSE
[08:07:19.336] | getGlobalsAndPackages() ...
[08:07:19.336] | : Searching for globals ...
[08:07:19.337] | : . globals found: [0] 
[08:07:19.337] | : Searching for globals ... done
[08:07:19.337] | : globals: [0] <none>
[08:07:19.337] | : packages: [0] <none>
[08:07:19.337] | getGlobalsAndPackages() ... done
[08:07:19.338] | run() for ‘Future’ (<unnamed-9>) ...
[08:07:19.338] | : state: ‘created’
[08:07:19.338] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.338] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.338] | : Using SequentialFutureBackend ...
[08:07:19.338] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:07:19.338] | : . Launching futures ...
[08:07:19.338] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:19.338] | : . ' , getFutureData() ...
[08:07:19.338] | : . ' , ; getFutureCore() ...
[08:07:19.339] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:19.339] | : . ' , ; getFutureCore() ... done
[08:07:19.339] | : . ' , ; getFutureCapture() ...
[08:07:19.339] | : . ' , ; getFutureCapture() ... done
[08:07:19.339] | : . ' , ; getFutureContext() ...
[08:07:19.339] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.339] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:19.339] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.339] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:19.339] | : . ' , ; getFutureContext() ... done
[08:07:19.340] | : . ' , getFutureData() ... done
[08:07:19.341] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.341] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:19.341] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.367] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.367] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:19.367] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:19.367] | : . ' , ; ` | New stack:
[08:07:19.367] | : . ' , ; ` | List of 1
[08:07:19.367] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.367] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.367] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:19.367] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.367] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.367] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.367] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:19.367] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.370] | : . ' , ; ` | Old stack:
[08:07:19.371] | : . ' , ; ` | List of 1
[08:07:19.371] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.371] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.371] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:19.371] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.371] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.371] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.371] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:19.371] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.371] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.371] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.371] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.374] | : . ' , ; ` | Not identical
[08:07:19.374] | : . ' , ; ` | all.equal() for future ...
[08:07:19.374] | : . ' , ; ` | : List of 2
[08:07:19.374] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.374] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.374] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:19.374] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.374] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.374] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.374] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:19.374] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.374] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.374] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.374] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.374] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.374] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.374] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.374] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.374] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.374] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.379] | : . ' , ; ` | all.equal() for future ... done
[08:07:19.379] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:19.379] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:19.379] | : . ' , ; ` List of future strategies:
[08:07:19.379] | : . ' , ; ` 1. sequential:
[08:07:19.379] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:19.379] | : . ' , ; `    - tweaked: FALSE
[08:07:19.379] | : . ' , ; `    - call: plan(sequential)
[08:07:19.380] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:19.380] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.382] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.382] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.382] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:19.382] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:19.382] | : . ' , ; ` | : New stack:
[08:07:19.382] | : . ' , ; ` | : List of 1
[08:07:19.382] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.382] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.382] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.382] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.382] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.382] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.382] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.382] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.382] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.382] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.382] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.385] | : . ' , ; ` | : Old stack:
[08:07:19.385] | : . ' , ; ` | : List of 1
[08:07:19.385] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.385] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.385] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.385] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.385] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.385] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.385] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.385] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.385] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.385] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.385] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.389] | : . ' , ; ` | : Identical
[08:07:19.390] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:19.390] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:19.390] | : . ' , ; ` | List of future strategies:
[08:07:19.390] | : . ' , ; ` | 1. sequential:
[08:07:19.390] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:19.390] | : . ' , ; ` |    - tweaked: FALSE
[08:07:19.390] | : . ' , ; ` |    - call: plan(sequential)
[08:07:19.390] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:19.390] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.390] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.391] | : . ' , SequentialFuture started (and completed)
[08:07:19.391] | : . ' , signalConditions() ...
[08:07:19.391] | : . ' , ; include = ‘immediateCondition’
[08:07:19.391] | : . ' , ; exclude = 
[08:07:19.391] | : . ' , ; resignal = FALSE
[08:07:19.391] | : . ' , ; Number of conditions: 6
[08:07:19.391] | : . ' , ;  int 6
[08:07:19.392] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.392] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.392] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.392] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.392] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.392] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.392] | : . ' , signalConditions() ... done
[08:07:19.392] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:19.393] | : . Launching futures ... done
[08:07:19.393] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:19.393] | : Using SequentialFutureBackend ... done
[08:07:19.393] | run() for ‘Future’ (<unnamed-9>) ... done
[08:07:19.393] future(..., label = NULL) ... done

> res <- tryCatch(backtrace(f), error = identity)
[08:07:19.393] resolved() for SequentialFuture (<unnamed-9>) ...
[08:07:19.393] | state: ‘finished’
[08:07:19.393] | run: TRUE
[08:07:19.394] | result: ‘FutureResult’
[08:07:19.394] resolved() for SequentialFuture (<unnamed-9>) ... done

> print(res)
<simpleError: No error was caught for this future: ‘f’>

> stopifnot(inherits(res, "error"))

> message("- No call stack ...")
- No call stack ...

> f <- future({
+     42
+     stop("Woops")
+ })
[08:07:19.394] future(..., label = NULL) ...
[08:07:19.394] | lazy: FALSE
[08:07:19.395] | stdout: TRUE
[08:07:19.395] | conditions: [n=1] ‘condition’
[08:07:19.395] | gc: FALSE
[08:07:19.395] | earlySignal: FALSE
[08:07:19.395] | getGlobalsAndPackages() ...
[08:07:19.395] | : Searching for globals ...
[08:07:19.400] | : . globals found: [2] ‘{’, ‘stop’
[08:07:19.400] | : Searching for globals ... done
[08:07:19.400] | : Resolving globals: FALSE
[08:07:19.400] | : Search for packages associated with the globals ...
[08:07:19.401] | : . Packages associated with globals: [1] ‘base’
[08:07:19.401] | : . Packages: [1] ‘base’
[08:07:19.401] | : Search for packages associated with the globals ... done
[08:07:19.401] | : Packages after dropping 'base': [0] 
[08:07:19.401] | : globals: [0] 
[08:07:19.401] | : packages: [0] 
[08:07:19.401] | getGlobalsAndPackages() ... done
[08:07:19.402] | run() for ‘Future’ (<unnamed-10>) ...
[08:07:19.402] | : state: ‘created’
[08:07:19.402] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.402] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.402] | : Using SequentialFutureBackend ...
[08:07:19.402] | : . Number of futures since start: 9 (9 created, 9 launched, 9 finished)
[08:07:19.402] | : . Launching futures ...
[08:07:19.402] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:19.402] | : . ' , getFutureData() ...
[08:07:19.403] | : . ' , ; getFutureCore() ...
[08:07:19.403] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:19.403] | : . ' , ; getFutureCore() ... done
[08:07:19.403] | : . ' , ; getFutureCapture() ...
[08:07:19.403] | : . ' , ; getFutureCapture() ... done
[08:07:19.403] | : . ' , ; getFutureContext() ...
[08:07:19.403] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.403] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:19.403] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.403] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:19.404] | : . ' , ; getFutureContext() ... done
[08:07:19.404] | : . ' , getFutureData() ... done
[08:07:19.405] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.405] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:19.405] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.405] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.406] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:19.406] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:19.406] | : . ' , ; ` | New stack:
[08:07:19.407] | : . ' , ; ` | List of 1
[08:07:19.407] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.407] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.407] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:19.407] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.407] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.407] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.407] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:19.407] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.409] | : . ' , ; ` | Old stack:
[08:07:19.409] | : . ' , ; ` | List of 1
[08:07:19.409] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.409] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.409] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:19.409] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.409] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.409] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.409] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:19.409] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.409] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.409] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.409] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.412] | : . ' , ; ` | Not identical
[08:07:19.412] | : . ' , ; ` | all.equal() for future ...
[08:07:19.412] | : . ' , ; ` | : List of 2
[08:07:19.412] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.412] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.412] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:19.412] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.412] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.412] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.412] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:19.412] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.412] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.412] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.412] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.412] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.412] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.412] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.412] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.412] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.412] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.417] | : . ' , ; ` | all.equal() for future ... done
[08:07:19.417] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:19.418] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:19.418] | : . ' , ; ` List of future strategies:
[08:07:19.418] | : . ' , ; ` 1. sequential:
[08:07:19.418] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:19.418] | : . ' , ; `    - tweaked: FALSE
[08:07:19.418] | : . ' , ; `    - call: plan(sequential)
[08:07:19.418] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:19.418] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.420] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.420] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:19.420] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:19.420] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:19.420] | : . ' , ; ` | : New stack:
[08:07:19.420] | : . ' , ; ` | : List of 1
[08:07:19.420] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.420] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.420] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.420] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.420] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.420] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.420] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.420] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.420] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.420] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.420] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.423] | : . ' , ; ` | : Old stack:
[08:07:19.424] | : . ' , ; ` | : List of 1
[08:07:19.424] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.424] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.424] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:19.424] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.424] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.424] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.424] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:19.424] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.424] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.424] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.424] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.427] | : . ' , ; ` | : Identical
[08:07:19.428] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:19.428] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:19.428] | : . ' , ; ` | List of future strategies:
[08:07:19.428] | : . ' , ; ` | 1. sequential:
[08:07:19.428] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:19.428] | : . ' , ; ` |    - tweaked: FALSE
[08:07:19.428] | : . ' , ; ` |    - call: plan(sequential)
[08:07:19.428] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:19.428] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.428] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:19.429] | : . ' , SequentialFuture started (and completed)
[08:07:19.429] | : . ' , signalConditions() ...
[08:07:19.429] | : . ' , ; include = ‘immediateCondition’
[08:07:19.429] | : . ' , ; exclude = 
[08:07:19.429] | : . ' , ; resignal = FALSE
[08:07:19.429] | : . ' , ; Number of conditions: 7
[08:07:19.429] | : . ' , ;  int 7
[08:07:19.430] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.430] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.430] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.430] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.430] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.430] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.430] | : . ' , ; Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:19.430] | : . ' , signalConditions() ... done
[08:07:19.431] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:19.431] | : . Launching futures ... done
[08:07:19.431] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:19.431] | : Using SequentialFutureBackend ... done
[08:07:19.431] | run() for ‘Future’ (<unnamed-10>) ... done
[08:07:19.431] future(..., label = NULL) ... done

> v <- value(f, signal = FALSE)
[08:07:19.431] value() for SequentialFuture (<unnamed-10>) ...
[08:07:19.431] | signalConditions() ...
[08:07:19.431] | : include = ‘immediateCondition’
[08:07:19.432] | : exclude = 
[08:07:19.432] | : resignal = FALSE
[08:07:19.432] | : Number of conditions: 7
[08:07:19.432] | :  int 7
[08:07:19.432] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.432] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.432] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.432] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.433] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.433] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:19.433] | : Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:19.433] | signalConditions() ... done
[08:07:19.433] | relay stdout ...
[08:07:19.433] | relay stdout ... done
[08:07:19.433] | check for misuse ...
[08:07:19.433] | check for misuse ... done
[08:07:19.433] value() for SequentialFuture (<unnamed-10>) ... done

> if (availableCores() >= 2) {
+     message("- Non-resolved future ...")
+     plan(multisession, workers = 2)
+     message("- plan set")
+     f <- .... [TRUNCATED] 
- Non-resolved future ...
[08:07:19.435] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.436] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:07:19.436] | : all.equal() for FutureStrategyList ...
[08:07:19.436] | : . New stack:
[08:07:19.436] | : . List of 1
[08:07:19.436] | : .  $ :function (..., workers = 2L, envir = parent.frame())  
[08:07:19.436] | : .   ..- attr(*, "class")= chr [1:6] "tweaked" "multisession" "cluster" "multiprocess" ...
[08:07:19.436] | : .   ..- attr(*, "init")= logi TRUE
[08:07:19.436] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:19.436] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:19.436] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:19.436] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:19.436] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:07:19.436] | : .   ..- attr(*, "tweaks")=List of 1
[08:07:19.436] | : .   .. ..$ workers: int 2
[08:07:19.436] | : .   ..- attr(*, "call")= language plan(multisession, workers = 2L)
[08:07:19.436] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.439] | : . Old stack:
[08:07:19.439] | : . List of 1
[08:07:19.439] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.439] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.439] | : .   ..- attr(*, "init")= chr "done"
[08:07:19.439] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.439] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.439] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.439] | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:19.439] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.439] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.439] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.439] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.442] | : . Not identical
[08:07:19.443] | : . all.equal() for future ...
[08:07:19.443] | : . ' List of 2
[08:07:19.443] | : . '  $ target :function (..., workers = 2L, envir = parent.frame())  
[08:07:19.443] | : . '   ..- attr(*, "class")= chr [1:6] "tweaked" "multisession" "cluster" "multiprocess" ...
[08:07:19.443] | : . '   ..- attr(*, "init")= logi TRUE
[08:07:19.443] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:19.443] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:19.443] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:19.443] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:19.443] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:07:19.443] | : . '   ..- attr(*, "tweaks")=List of 1
[08:07:19.443] | : . '   .. ..$ workers: int 2
[08:07:19.443] | : . '   ..- attr(*, "call")= language plan(multisession, workers = 2L)
[08:07:19.443] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:19.443] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:19.443] | : . '   ..- attr(*, "init")= chr "done"
[08:07:19.443] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.443] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.443] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.443] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:07:19.443] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55621885ba60> 
[08:07:19.443] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:19.443] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:19.449] | : . ' Formals differ
[08:07:19.449] | : . all.equal() for future ... done
[08:07:19.450] | : . Future strategies differ at level 1
[08:07:19.450] | : all.equal() for FutureStrategyList ... done
[08:07:19.450] | : plan(): Setting new future backend stack:
[08:07:19.450] | : List of future strategies:
[08:07:19.450] | : 1. multisession:
[08:07:19.450] | :    - args: function (..., workers = 2L, envir = parent.frame())
[08:07:19.450] | :    - tweaked: TRUE
[08:07:19.450] | :    - call: plan(multisession, workers = 2L)
[08:07:19.450] | : List of 1
[08:07:19.450] | :  $ :function (..., workers = 2L, envir = parent.frame())  
[08:07:19.450] | :   ..- attr(*, "class")= chr [1:6] "tweaked" "multisession" "cluster" "multiprocess" ...
[08:07:19.450] | :   ..- attr(*, "init")= logi TRUE
[08:07:19.450] | :   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:19.450] | :     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:19.450] | :   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:19.450] | :   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:19.450] | :   ..- attr(*, "untweakable")= chr "persistent"
[08:07:19.450] | :   ..- attr(*, "tweaks")=List of 1
[08:07:19.450] | :   .. ..$ workers: int 2
[08:07:19.450] | :   ..- attr(*, "call")= language plan(multisession, workers = 2L)
[08:07:19.450] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:19.454] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:07:19.454] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.454] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:19.454] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.454] | : . Legacy shutdown of cluster workers ...
[08:07:19.454] | : . ' Stopping existing cluster ...
[08:07:19.454] | : . ' , No pre-existing cluster. Skipping
[08:07:19.455] | : . ' Stopping existing cluster ... done
[08:07:19.455] | : . Legacy shutdown of cluster workers ... done
[08:07:19.455] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:07:19.455] | : plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:07:19.455] | : . function (..., workers = 2L, envir = parent.frame())  
[08:07:19.455] | : .  - attr(*, "class")= chr [1:6] "tweaked" "multisession" "cluster" "multiprocess" ...
[08:07:19.455] | : .  - attr(*, "init")= logi TRUE
[08:07:19.455] | : .  - attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:19.455] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:19.455] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:19.455] | : .  - attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:19.455] | : .  - attr(*, "untweakable")= chr "persistent"
[08:07:19.455] | : .  - attr(*, "tweaks")=List of 1
[08:07:19.455] | : .   ..$ workers: int 2
[08:07:19.455] | : .  - attr(*, "call")= language plan(multisession, workers = 2L)
[08:07:19.458] | : . init: TRUE
[08:07:19.458] | : . makeFutureBackend(<tweaked>) ...
[08:07:19.458] | : . ' Backend function: <‘NULL’>
[08:07:19.458] | : . ' Evaluator tweak arguments: [n=1]
[08:07:19.458] | : . ' List of 1
[08:07:19.458] | : . '  $ workers: int 2
[08:07:19.459] | : . ' Evaluator formal arguments: [n=1]
[08:07:19.459] | : . ' List of 1
[08:07:19.459] | : . '  $ workers: int 2
[08:07:19.459] | : . ' Backend factory arguments: [n=1]
[08:07:19.460] | : . ' Dotted pair list of 1
[08:07:19.460] | : . '  $ workers: int 2
[08:07:19.460] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ...
[08:07:19.460] | : . ' , Arguments:
[08:07:19.460] | : . ' , List of 5
[08:07:19.460] | : . ' ,  $ workers     : int 2
[08:07:19.460] | : . ' ,  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:07:19.460] | : . ' ,  $ interrupts  : logi TRUE
[08:07:19.460] | : . ' ,  $ gc          : logi FALSE
[08:07:19.460] | : . ' ,  $ earlySignal : logi FALSE
[08:07:19.462] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[08:07:19.463] | : . ' , ; workers: 2
[08:07:19.463] | : . ' , ; getCluster() ...
[08:07:19.463] | : . ' , ; getCluster() ... done
[08:07:19.463] | : . ' , ; Stopping existing cluster ...
[08:07:19.463] | : . ' , ; ` No pre-existing cluster. Skipping
[08:07:19.463] | : . ' , ; Stopping existing cluster ... done
[08:07:19.463] | : . ' , ; Starting new cluster ...
[08:07:19.463] | : . ' , ; ` makeCluster(workers, ...) ...
[08:07:19.463] | : . ' , ; ` | Arguments:
[08:07:19.463] | : . ' , ; ` | List of 2
[08:07:19.463] | : . ' , ; ` |  $             : int 2
[08:07:19.463] | : . ' , ; ` |  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:07:19.465] | : . ' , ; ` | .makeCluster() ...
[08:07:19.465] | : . ' , ; ` | : workers: ‘2’
[08:07:19.465] | : . ' , ; ` | : R_FUTURE_PLAN: NA
[08:07:19.466] | : . ' , ; ` | : parallelly::makeClusterPSOCK() arguments:
[08:07:19.466] | : . ' , ; ` | : List of 2
[08:07:19.466] | : . ' , ; ` | :  $             : int 2
[08:07:19.466] | : . ' , ; ` | :  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:07:19.954] | : . ' , ; ` | : Generated cluster UUID
[08:07:19.954] | : . ' , ; ` | : Cluster UUID: ‘7178f8416b4e717b72be9e80ba76ed3d’
[08:07:19.954] | : . ' , ; ` | : Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:19.957] | : . ' , ; ` | .makeCluster() ... done
[08:07:19.957] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:19.959] | : . ' , ; ` makeCluster(workers, ...) ... done
[08:07:19.959] | : . ' , ; ` Number of workers: 2
[08:07:19.959] | : . ' , ; ` Workers UUID: ‘7178f8416b4e717b72be9e80ba76ed3d’
[08:07:19.959] | : . ' , ; Starting new cluster ... done
[08:07:19.959] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[08:07:19.959] | : . ' , Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:19.959] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ... done
[08:07:19.960] | : . makeFutureBackend(<tweaked>) ... done
[08:07:19.960] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.960] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.960] | : . plan(): nbrOfWorkers() = 2
[08:07:19.960] | : plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:07:19.960] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
- plan set
[08:07:19.960] | future(..., label = NULL) ...
[08:07:19.960] | : lazy: FALSE
[08:07:19.961] | : stdout: TRUE
[08:07:19.961] | : conditions: [n=1] ‘condition’
[08:07:19.961] | : gc: FALSE
[08:07:19.961] | : earlySignal: FALSE
[08:07:19.961] | : getGlobalsAndPackages() ...
[08:07:19.961] | : . Searching for globals ...
[08:07:19.969] | : . ' globals found: [3] ‘{’, ‘Sys.sleep’, ‘stop’
[08:07:19.969] | : . Searching for globals ... done
[08:07:19.969] | : . Resolving globals: FALSE
[08:07:19.969] | : . Search for packages associated with the globals ...
[08:07:19.969] | : . ' Packages associated with globals: [1] ‘base’
[08:07:19.970] | : . ' Packages: [1] ‘base’
[08:07:19.970] | : . Search for packages associated with the globals ... done
[08:07:19.970] | : . Packages after dropping 'base': [0] 
[08:07:19.970] | : . globals: [0] 
[08:07:19.970] | : . packages: [0] 
[08:07:19.970] | : getGlobalsAndPackages() ... done
[08:07:19.970] | : run() for ‘Future’ (<unnamed-11>) ...
[08:07:19.971] | : . state: ‘created’
[08:07:19.971] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:19.971] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:19.971] | : . Using MultisessionFutureBackend ...
[08:07:19.971] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:07:19.971] | : . ' Launching futures ...
[08:07:19.972] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:07:19.972] | : . ' , ; Workers: [n=2]
[08:07:19.972] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:19.974] | : . ' , ; FutureRegistry: ‘workers-7178f8416b4e717b72be9e80ba76ed3d’
[08:07:19.974] | : . ' , ; requestWorker() ...
[08:07:19.974] | : . ' , ; ` requestNode() ...
[08:07:19.974] | : . ' , ; ` | Number of workers: 2
[08:07:19.974] | : . ' , ; ` | Polling for a free worker ...
[08:07:19.974] | : . ' , ; ` | : FutureRegistry('workers-7178f8416b4e717b72be9e80ba76ed3d', action = 'list', earlySignal = 0) ...
[08:07:19.974] | : . ' , ; ` | : . Created empty registry ‘workers-7178f8416b4e717b72be9e80ba76ed3d’
[08:07:19.975] | : . ' , ; ` | : . Listing all futures
[08:07:19.975] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:19.975] | : . ' , ; ` | : FutureRegistry('workers-7178f8416b4e717b72be9e80ba76ed3d', action = 'list', earlySignal = 0) ... done
[08:07:19.975] | : . ' , ; ` | : Total time: 0
[08:07:19.975] | : . ' , ; ` | Polling for a free worker ... done
[08:07:19.975] | : . ' , ; ` | FutureRegistry('workers-7178f8416b4e717b72be9e80ba76ed3d', action = 'list', earlySignal = 0) ...
[08:07:19.975] | : . ' , ; ` | : Listing all futures
[08:07:19.975] | : . ' , ; ` | : Number of registered futures: 0
[08:07:19.976] | : . ' , ; ` | FutureRegistry('workers-7178f8416b4e717b72be9e80ba76ed3d', action = 'list', earlySignal = 0) ... done
[08:07:19.976] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:07:19.976] | : . ' , ; ` | Index of first available worker: 1
[08:07:19.976] | : . ' , ; ` | Validate that the worker is functional ...
[08:07:20.043] | : . ' , ; ` | : Worker is functional
[08:07:20.043] | : . ' , ; ` | : FutureRegistry('workers-7178f8416b4e717b72be9e80ba76ed3d', action = 'list', earlySignal = 0) ...
[08:07:20.043] | : . ' , ; ` | : . Listing all futures
[08:07:20.043] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:20.043] | : . ' , ; ` | : FutureRegistry('workers-7178f8416b4e717b72be9e80ba76ed3d', action = 'list', earlySignal = 0) ... done
[08:07:20.043] | : . ' , ; ` | Validate that the worker is functional ... done
[08:07:20.044] | : . ' , ; ` requestNode() ... done
[08:07:20.044] | : . ' , ; ` cluster node index: 1
[08:07:20.044] | : . ' , ; requestWorker() ... done
[08:07:20.044] | : . ' , ; eraseGlobalEnvironment() ...
[08:07:20.046] | : . ' , ; eraseGlobalEnvironment() ... done
[08:07:20.046] | : . ' , ; launchFuture() ...
[08:07:20.046] | : . ' , ; ` cluster node index: 1
[08:07:20.046] | : . ' , ; ` getFutureData() ...
[08:07:20.046] | : . ' , ; ` | getFutureCore() ...
[08:07:20.046] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:07:20.046] | : . ' , ; ` | getFutureCore() ... done
[08:07:20.047] | : . ' , ; ` | getFutureCapture() ...
[08:07:20.047] | : . ' , ; ` | getFutureCapture() ... done
[08:07:20.047] | : . ' , ; ` | getFutureContext() ...
[08:07:20.047] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:20.047] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:07:20.047] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:20.047] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:07:20.048] | : . ' , ; ` | getFutureContext() ... done
[08:07:20.048] | : . ' , ; ` getFutureData() ... done
[08:07:20.048] | : . ' , ; ` FutureRegistry('workers-7178f8416b4e717b72be9e80ba76ed3d', action = 'add', earlySignal = 0) ...
[08:07:20.048] | : . ' , ; ` | Appended future to position #1
[08:07:20.049] | : . ' , ; ` | Number of registered futures: 1
[08:07:20.049] | : . ' , ; ` FutureRegistry('workers-7178f8416b4e717b72be9e80ba76ed3d', action = 'add', earlySignal = 0) ... done
[08:07:20.049] | : . ' , ; launchFuture() ... done
[08:07:20.049] | : . ' , ; MultisessionFuture started
[08:07:20.049] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:07:20.049] | : . ' Launching futures ... done
[08:07:20.049] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:20.050] | : . Using MultisessionFutureBackend ... done
[08:07:20.050] | : run() for ‘Future’ (<unnamed-11>) ... done
[08:07:20.050] | future(..., label = NULL) ... done
[08:07:20.051] | resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:20.051] | : Cluster node socket connection: index=4, id=402
[08:07:20.051] | : assertValidConnection() ...
[08:07:20.052] | : . cluster node index: 1
[08:07:20.052] | : assertValidConnection() ... done
[08:07:20.062] | : socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:20.063] | resolved() for MultisessionFuture (<unnamed-11>) ... done
<simpleError: No error has been caught because the future is unresolved: ‘f’>
[08:07:20.063] | resolve() for MultisessionFuture ...
[08:07:20.063] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:20.063] | : . Cluster node socket connection: index=4, id=402
[08:07:20.064] | : . assertValidConnection() ...
[08:07:20.064] | : . ' cluster node index: 1
[08:07:20.064] | : . assertValidConnection() ... done
[08:07:20.074] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:20.075] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:20.085] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:20.085] | : . Cluster node socket connection: index=4, id=402
[08:07:20.086] | : . assertValidConnection() ...
[08:07:20.086] | : . ' cluster node index: 1
[08:07:20.086] | : . assertValidConnection() ... done
[08:07:20.096] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:20.097] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:20.107] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:20.107] | : . Cluster node socket connection: index=4, id=402
[08:07:20.108] | : . assertValidConnection() ...
[08:07:20.108] | : . ' cluster node index: 1
[08:07:20.108] | : . assertValidConnection() ... done
[08:07:20.119] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:20.119] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:20.129] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:20.130] | : . Cluster node socket connection: index=4, id=402
[08:07:20.130] | : . assertValidConnection() ...
[08:07:20.130] | : . ' cluster node index: 1
[08:07:20.130] | : . assertValidConnection() ... done
[08:07:20.141] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:20.141] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:20.151] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:20.151] | : . Cluster node socket connection: index=4, id=402
[08:07:20.152] | : . assertValidConnection() ...
[08:07:20.152] | : . ' cluster node index: 1
[08:07:20.152] | : . assertValidConnection() ... done
[08:07:20.163] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:20.163] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:20.173] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:20.173] | : . Cluster node socket connection: index=4, id=402
[08:07:20.174] | : . assertValidConnection() ...
[08:07:20.174] | : . ' cluster node index: 1
[08:07:20.174] | : . assertValidConnection() ... done
[08:07:20.185] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:20.185] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:20.195] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:20.195] | : . Cluster node socket connection: index=4, id=402
[08:07:20.196] | : . assertValidConnection() ...
[08:07:20.196] | : . ' cluster node index: 1
[08:07:20.196] | : . assertValidConnection() ... done
[08:07:20.207] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:20.207] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:20.217] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:20.218] | : . Cluster node socket connection: index=4, id=402
[08:07:20.218] | : . assertValidConnection() ...
[08:07:20.218] | : . ' cluster node index: 1
[08:07:20.218] | : . assertValidConnection() ... done
[08:07:20.229] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:20.229] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:20.239] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:20.239] | : . Cluster node socket connection: index=4, id=402
[08:07:20.240] | : . assertValidConnection() ...
[08:07:20.240] | : . ' cluster node index: 1
[08:07:20.240] | : . assertValidConnection() ... done
[08:07:20.251] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:20.251] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:20.261] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:20.261] | : . Cluster node socket connection: index=4, id=402
[08:07:20.262] | : . assertValidConnection() ...
[08:07:20.262] | : . ' cluster node index: 1
[08:07:20.262] | : . assertValidConnection() ... done
[08:07:20.273] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:20.273] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:20.283] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:20.283] | : . Cluster node socket connection: index=4, id=402
[08:07:20.284] | : . assertValidConnection() ...
[08:07:20.284] | : . ' cluster node index: 1
[08:07:20.284] | : . assertValidConnection() ... done
[08:07:20.294] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:20.295] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:20.305] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:20.305] | : . Cluster node socket connection: index=4, id=402
[08:07:20.305] | : . assertValidConnection() ...
[08:07:20.306] | : . ' cluster node index: 1
[08:07:20.306] | : . assertValidConnection() ... done
[08:07:20.316] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:20.316] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:20.327] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:20.327] | : . Cluster node socket connection: index=4, id=402
[08:07:20.327] | : . assertValidConnection() ...
[08:07:20.328] | : . ' cluster node index: 1
[08:07:20.328] | : . assertValidConnection() ... done
[08:07:20.338] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:20.338] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:20.349] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:20.349] | : . Cluster node socket connection: index=4, id=402
[08:07:20.349] | : . assertValidConnection() ...
[08:07:20.349] | : . ' cluster node index: 1
[08:07:20.350] | : . assertValidConnection() ... done
[08:07:20.360] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:20.360] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:20.370] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:20.371] | : . Cluster node socket connection: index=4, id=402
[08:07:20.371] | : . assertValidConnection() ...
[08:07:20.371] | : . ' cluster node index: 1
[08:07:20.372] | : . assertValidConnection() ... done
[08:07:20.382] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:20.382] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:20.393] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:20.393] | : . Cluster node socket connection: index=4, id=402
[08:07:20.393] | : . assertValidConnection() ...
[08:07:20.393] | : . ' cluster node index: 1
[08:07:20.394] | : . assertValidConnection() ... done
[08:07:20.404] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:20.404] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:20.415] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:20.415] | : . Cluster node socket connection: index=4, id=402
[08:07:20.415] | : . assertValidConnection() ...
[08:07:20.415] | : . ' cluster node index: 1
[08:07:20.416] | : . assertValidConnection() ... done
[08:07:20.426] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:20.426] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:20.437] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:20.437] | : . Cluster node socket connection: index=4, id=402
[08:07:20.437] | : . assertValidConnection() ...
[08:07:20.437] | : . ' cluster node index: 1
[08:07:20.438] | : . assertValidConnection() ... done
[08:07:20.440] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:07:20.440] | : . ' cluster node index: 1
[08:07:20.440] | : . ' [1] TRUE
[08:07:20.440] | : . ' received data:
[08:07:20.441] | : . ' List of 5
[08:07:20.441] | : . '  $ type   : chr "VALUE"
[08:07:20.441] | : . '  $ value  :List of 16
[08:07:20.441] | : . '   ..$ value              : NULL
[08:07:20.441] | : . '   ..$ visible            : logi TRUE
[08:07:20.441] | : . '   ..$ stdout             : chr ""
[08:07:20.441] | : . '   ..$ conditions         :List of 1
[08:07:20.441] | : . '   .. ..$ :List of 5
[08:07:20.441] | : . '   .. .. ..$ condition:List of 2
[08:07:20.441] | : . '   .. .. .. ..$ message: chr "Woops"
[08:07:20.441] | : . '   .. .. .. ..$ call   : language eval(quote({     { ...
[08:07:20.441] | : . '   .. .. .. ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
[08:07:20.441] | : . '   .. .. ..$ calls    :List of 10
[08:07:20.441] | : . '   .. .. .. ..$ : language eval(expr, envir = globalenv())
[08:07:20.441] | : . '   .. .. .. ..$ : language eval(expr, envir = globalenv())
[08:07:20.441] | : . '   .. .. .. ..$ : language local({     { ...
[08:07:20.441] | : . '   .. .. .. ..$ : language eval.parent(substitute(eval(quote(expr), envir)))
[08:07:20.441] | : . '   .. .. .. ..$ : language eval(expr, p)
[08:07:20.441] | : . '   .. .. .. ..$ : language eval(expr, p)
[08:07:20.441] | : . '   .. .. .. ..$ : language eval(quote({     { ...
[08:07:20.441] | : . '   .. .. .. ..$ : language eval(quote({     { ...
[08:07:20.441] | : . '   .. .. .. ..$ : language stop("Woops")
[08:07:20.441] | : . '   .. .. .. ..$ : language eval(quote({     { ...
[08:07:20.441] | : . '   .. .. ..$ session  :List of 6
[08:07:20.441] | : . '   .. .. .. ..$ r         :List of 14
[08:07:20.441] | : . '   .. .. .. .. ..$ platform      : chr "x86_64-pc-linux-gnu"
[08:07:20.441] | : . '   .. .. .. .. ..$ arch          : chr "x86_64"
[08:07:20.441] | : . '   .. .. .. .. ..$ os            : chr "linux-gnu"
[08:07:20.441] | : . '   .. .. .. .. ..$ system        : chr "x86_64, linux-gnu"
[08:07:20.441] | : . '   .. .. .. .. ..$ status        : chr ""
[08:07:20.441] | : . '   .. .. .. .. ..$ major         : chr "4"
[08:07:20.441] | : . '   .. .. .. .. ..$ minor         : chr "5.1"
[08:07:20.441] | : . '   .. .. .. .. ..$ year          : chr "2025"
[08:07:20.441] | : . '   .. .. .. .. ..$ month         : chr "06"
[08:07:20.441] | : . '   .. .. .. .. ..$ day           : chr "13"
[08:07:20.441] | : . '   .. .. .. .. ..$ svn rev       : chr "88306"
[08:07:20.441] | : . '   .. .. .. .. ..$ language      : chr "R"
[08:07:20.441] | : . '   .. .. .. .. ..$ version.string: chr "R version 4.5.1 (2025-06-13)"
[08:07:20.441] | : . '   .. .. .. .. ..$ nickname      : chr "Great Square Root"
[08:07:20.441] | : . '   .. .. .. ..$ locale    : chr "LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=en_US.UTF-8;LC_COLLATE=en_US.UTF-8;LC_MONETARY=en_US.UTF-8;LC_MESSAGE"| __truncated__
[08:07:20.441] | : . '   .. .. .. ..$ rngkind   : chr [1:3] "Mersenne-Twister" "Inversion" "Rejection"
[08:07:20.441] | : . '   .. .. .. ..$ namespaces: chr [1:16] "compiler" "parallelly" "graphics" "tools" ...
[08:07:20.441] | : . '   .. .. .. ..$ search    : chr [1:10] ".GlobalEnv" "package:future" "package:stats" "package:graphics" ...
[08:07:20.441] | : . '   .. .. .. ..$ system    : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:20.441] | : . '   .. .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:20.441] | : . '   .. .. ..$ timestamp: POSIXct[1:1], format: "2025-06-17 08:07:20"
[08:07:20.441] | : . '   .. .. ..$ signaled : int 0
[08:07:20.441] | : . '   ..$ rng                : logi FALSE
[08:07:20.441] | : . '   ..$ seed               : NULL
[08:07:20.441] | : . '   ..$ misuseGlobalEnv    : NULL
[08:07:20.441] | : . '   ..$ misuseConnections  :List of 3
[08:07:20.441] | : . '   .. ..$ added   : NULL
[08:07:20.441] | : . '   .. ..$ removed : NULL
[08:07:20.441] | : . '   .. ..$ replaced: NULL
[08:07:20.441] | : . '   ..$ misuseDevices      : NULL
[08:07:20.441] | : . '   ..$ misuseDefaultDevice: list()
[08:07:20.441] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:20"
[08:07:20.441] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:20"
[08:07:20.441] | : . '   ..$ uuid               : chr [1:2] "8d8ca066de2822322cb1abc249b3178c" "11"
[08:07:20.441] | : . '   ..$ session_uuid       : chr "be9bca807ed6a639608efd5eea4b4bf7"
[08:07:20.441] | : . '   .. ..- attr(*, "source")=List of 5
[08:07:20.441] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:07:20.441] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:20.441] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:20.441] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:20.441] | : . '   .. .. ..$ pid   : int 66652
[08:07:20.441] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:07:20"
[08:07:20.441] | : . '   .. .. ..$ random: int 2147483647
[08:07:20.441] | : . '   ..$ r_info             :List of 4
[08:07:20.441] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:20.441] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:07:20.441] | : . '   .. ..$ os           : chr "unix"
[08:07:20.441] | : . '   .. ..$ os_name      : chr "Linux"
[08:07:20.441] | : . '   .. ..$ captures_utf8: logi TRUE
[08:07:20.441] | : . '   ..$ version            : chr "1.8"
[08:07:20.441] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:07:20.441] | : . '  $ success: logi TRUE
[08:07:20.441] | : . '  $ time   : 'proc_time' Named num [1:5] 0.047 0.002 0.349 0 0
[08:07:20.441] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:20.441] | : . '  $ tag    : NULL
[08:07:20.467] | : . ' Received FutureResult
[08:07:20.468] | : . ' FutureResult:
[08:07:20.468] | : . ' value: ‘NULL’
[08:07:20.468] | : . ' visible: TRUE
[08:07:20.468] | : . ' stdout: character
[08:07:20.468] | : . ' conditions: [n = 1] simpleError
[08:07:20.468] | : . ' RNG used: FALSE
[08:07:20.468] | : . ' duration: 0.3479784 secs (started 2025-06-17 08:07:20.091001)
[08:07:20.468] | : . ' version: 1.8
[08:07:20.468] | : . ' FutureRegistry('workers-7178f8416b4e717b72be9e80ba76ed3d', action = 'remove', earlySignal = 0) ...
[08:07:20.468] | : . ' , Removed future from position #1
[08:07:20.469] | : . ' , Number of registered futures: 0
[08:07:20.469] | : . ' FutureRegistry('workers-7178f8416b4e717b72be9e80ba76ed3d', action = 'remove', earlySignal = 0) ... done
[08:07:20.469] | : . ' Erased future from future backend
[08:07:20.469] | : . ' result() for ClusterFuture ...
[08:07:20.469] | : . ' , result already collected: FutureResult
[08:07:20.469] | : . ' result() for ClusterFuture ... done
[08:07:20.469] | : . ' signalConditions() ...
[08:07:20.469] | : . ' , include = ‘immediateCondition’
[08:07:20.469] | : . ' , exclude = 
[08:07:20.470] | : . ' , resignal = FALSE
[08:07:20.470] | : . ' , Number of conditions: 1
[08:07:20.470] | : . ' ,  int 1
[08:07:20.470] | : . ' , Condition #1 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:20.470] | : . ' signalConditions() ... done
[08:07:20.470] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:07:20.470] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:07:20.471] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:20.471] | : assertFutureResult() ...
[08:07:20.471] | : . Future uuid: 8d8ca066de2822322cb1abc249b3178c[08:07:20.471] | : . Future uuid: 11
[08:07:20.471] | : . identical; success
[08:07:20.471] | : assertFutureResult() ... done
[08:07:20.471] | : A MultisessionFuture was resolved (result was not collected)
[08:07:20.471] | resolve() for MultisessionFuture ... done
MultisessionFuture:
Label: <unnamed-11>
Expression:
{
    Sys.sleep(0.3)
    42L
    stop("Woops")
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: 8d8ca066de2822322cb1abc249b3178c-11
Owner process: 8d8ca066de2822322cb1abc249b3178c
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
Value: 27 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Duration: 0.3479784 secs (started 2025-06-17 08:07:20.091001)
Worker process: be9bca807ed6a639608efd5eea4b4bf7

> message("*** backtrace( ) - exceptions ... DONE")
*** backtrace( ) - exceptions ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.8s, sys.self=0.02s, elapsed=2s, user.child=0.2s, sys.child=0.3s
Test ‘backtrace’ ... success
> 
