
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-sequential.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("sequential")
Test ‘sequential’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-sequential.R’

> library(future)
[08:10:07.139] Option 'future.startup.script': TRUE
[08:10:07.139] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:10:07.139] Future startup scripts found: <none>

> message("*** sequential() ...")
*** sequential() ...

> message("- sequential() w/ required packages ...")
- sequential() w/ required packages ...

> f <- future(median(1:3), lazy = TRUE)
[08:10:07.140] future(..., label = NULL) ...
[08:10:07.140] | lazy: TRUE
[08:10:07.141] | stdout: TRUE
[08:10:07.141] | conditions: [n=1] ‘condition’
[08:10:07.141] | gc: FALSE
[08:10:07.141] | earlySignal: FALSE
[08:10:07.141] | getGlobalsAndPackages() ...
[08:10:07.142] | : Searching for globals ...
[08:10:07.154] | : . globals found: [2] ‘median’, ‘:’
[08:10:07.155] | : Searching for globals ... done
[08:10:07.155] | : Resolving globals: FALSE
[08:10:07.155] | : Search for packages associated with the globals ...
[08:10:07.155] | : . Packages associated with globals: [2] ‘stats’, ‘base’
[08:10:07.156] | : . Packages: [2] ‘stats’, ‘base’
[08:10:07.156] | : Search for packages associated with the globals ... done
[08:10:07.156] | : Packages after dropping 'base': [1] ‘stats’
[08:10:07.156] | : Packages after dropping non-attached packages: [1] ‘stats’
[08:10:07.156] | : globals: [0] 
[08:10:07.156] | : packages: [1] ‘stats’
[08:10:07.156] | getGlobalsAndPackages() ... done
[08:10:07.157] future(..., label = NULL) ... done

> print(f)
Future:
Label: <unnamed-1>
Expression:
median(1:3)
Globals: <none>
Packages: 1 packages (‘stats’)
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: TRUE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘created’
Resolved: FALSE
Unique identifier: cb2667918719d568deacc20017923748-1
Owner process: cb2667918719d568deacc20017923748
Class: ‘Future’, ‘environment’
Value: <not collected>
Conditions captured: <none>

> try(unloadNamespace("stats"))

> v <- value(f)
[08:10:07.159] value() for Future (<unnamed-1>) ...
[08:10:07.159] | run() for ‘Future’ (<unnamed-1>) ...
[08:10:07.160] | : state: ‘created’
[08:10:07.160] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:07.160] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:10:07.160] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:07.160] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:07.160] | : . '  - attr(*, "init")= logi TRUE
[08:10:07.160] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:07.160] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:07.160] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:07.160] | : . '  - attr(*, "call")= language plan(sequential)
[08:10:07.204] | : . ' init: TRUE
[08:10:07.204] | : . ' makeFutureBackend(<sequential>) ...
[08:10:07.204] | : . ' , Backend function: <‘NULL’>
[08:10:07.204] | : . ' , Evaluator tweak arguments: [n=0]
[08:10:07.204] | : . ' ,  list()
[08:10:07.205] | : . ' , Evaluator formal arguments: [n=2]
[08:10:07.205] | : . ' ,  list()
[08:10:07.205] | : . ' , Backend factory arguments: [n=2]
[08:10:07.205] | : . ' , Dotted pair list of 2
[08:10:07.205] | : . ' ,  $ gc         : logi FALSE
[08:10:07.205] | : . ' ,  $ earlySignal: logi FALSE
[08:10:07.206] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:10:07.206] | : . ' makeFutureBackend(<sequential>) ... done
[08:10:07.206] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:10:07.206] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:07.207] | : Using SequentialFutureBackend ...
[08:10:07.207] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:10:07.207] | : . Launching futures ...
[08:10:07.207] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:10:07.207] | : . ' , getFutureData() ...
[08:10:07.207] | : . ' , ; getFutureCore() ...
[08:10:07.208] | : . ' , ; ` Packages needed by the future expression (n = 1): ‘stats’
[08:10:07.208] | : . ' , ; getFutureCore() ... done
[08:10:07.208] | : . ' , ; getFutureCapture() ...
[08:10:07.208] | : . ' , ; getFutureCapture() ... done
[08:10:07.208] | : . ' , ; getFutureContext() ...
[08:10:07.208] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:07.208] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:10:07.208] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:07.209] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:10:07.209] | : . ' , ; getFutureContext() ... done
[08:10:07.209] | : . ' , getFutureData() ... done
[08:10:07.213] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:07.240] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:10:07.240] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:07.241] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:07.241] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:07.241] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:10:07.241] | : . ' , ; ` | New stack:
[08:10:07.241] | : . ' , ; ` | List of 1
[08:10:07.241] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:07.241] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:07.241] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:10:07.241] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:07.241] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:07.241] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:07.241] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:07.241] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:07.244] | : . ' , ; ` | Old stack:
[08:10:07.244] | : . ' , ; ` | List of 1
[08:10:07.244] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:07.244] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:07.244] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:07.244] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:07.244] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:07.244] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:07.244] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:10:07.244] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55946b540930> 
[08:10:07.244] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:07.244] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:07.244] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:07.248] | : . ' , ; ` | Not identical
[08:10:07.248] | : . ' , ; ` | all.equal() for future ...
[08:10:07.248] | : . ' , ; ` | : List of 2
[08:10:07.248] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:07.248] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:07.248] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:10:07.248] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:07.248] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:07.248] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:07.248] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:07.248] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:07.248] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:07.248] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:07.248] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:07.248] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:07.248] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:07.248] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:07.248] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55946b540930> 
[08:10:07.248] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:07.248] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:07.253] | : . ' , ; ` | all.equal() for future ... done
[08:10:07.253] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:10:07.253] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:10:07.254] | : . ' , ; ` List of future strategies:
[08:10:07.254] | : . ' , ; ` 1. sequential:
[08:10:07.254] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:07.254] | : . ' , ; `    - tweaked: FALSE
[08:10:07.254] | : . ' , ; `    - call: plan(sequential)
[08:10:07.254] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:07.254] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:07.257] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:07.257] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:07.257] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:07.258] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:10:07.258] | : . ' , ; ` | : New stack:
[08:10:07.258] | : . ' , ; ` | : List of 1
[08:10:07.258] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:07.258] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:07.258] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:07.258] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:07.258] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:07.258] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:07.258] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:07.258] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55946b540930> 
[08:10:07.258] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:07.258] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:07.258] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:07.261] | : . ' , ; ` | : Old stack:
[08:10:07.261] | : . ' , ; ` | : List of 1
[08:10:07.261] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:07.261] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:07.261] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:07.261] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:07.261] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:07.261] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:07.261] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:07.261] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55946b540930> 
[08:10:07.261] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:07.261] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:07.261] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:07.264] | : . ' , ; ` | : Identical
[08:10:07.265] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:10:07.265] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:10:07.265] | : . ' , ; ` | List of future strategies:
[08:10:07.265] | : . ' , ; ` | 1. sequential:
[08:10:07.265] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:07.265] | : . ' , ; ` |    - tweaked: FALSE
[08:10:07.265] | : . ' , ; ` |    - call: plan(sequential)
[08:10:07.265] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:07.265] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:07.265] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:07.268] | : . ' , SequentialFuture started (and completed)
[08:10:07.269] | : . ' , signalConditions() ...
[08:10:07.269] | : . ' , ; include = ‘immediateCondition’
[08:10:07.269] | : . ' , ; exclude = 
[08:10:07.269] | : . ' , ; resignal = FALSE
[08:10:07.269] | : . ' , ; Number of conditions: 6
[08:10:07.269] | : . ' , ;  int 6
[08:10:07.270] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:07.270] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:07.270] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:07.270] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:07.270] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:07.270] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:07.270] | : . ' , signalConditions() ... done
[08:10:07.270] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:10:07.271] | : . Launching futures ... done
[08:10:07.271] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:10:07.271] | : Using SequentialFutureBackend ... done
[08:10:07.271] | run() for ‘Future’ (<unnamed-1>) ... done
[08:10:07.271] | signalConditions() ...
[08:10:07.271] | : include = ‘immediateCondition’
[08:10:07.271] | : exclude = 
[08:10:07.271] | : resignal = FALSE
[08:10:07.271] | : Number of conditions: 6
[08:10:07.271] | :  int 6
[08:10:07.272] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:07.272] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:07.272] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:07.272] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:07.272] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:07.272] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:07.273] | signalConditions() ... done
[08:10:07.273] | relay stdout ...
[08:10:07.273] | relay stdout ... done
[08:10:07.273] | check for misuse ...
[08:10:07.273] | check for misuse ... done
[08:10:07.274] | relay conditions ...
[08:10:07.274] | : Future state: ‘finished’
[08:10:07.274] | : signalConditions() ...
[08:10:07.274] | : . include = ‘condition’
[08:10:07.274] | : . exclude = ‘immediateCondition’
[08:10:07.274] | : . resignal = TRUE
[08:10:07.274] | : . Number of conditions: 6
[08:10:07.275] | : .  int 6
[08:10:07.275] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:07.275] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:07.210] | : . ' , attachPackages() ...
[08:10:07.275] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:07.275] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:07.210] | : . ' , ; packages: [n=1] ‘future’
[08:10:07.275] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:07.276] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:07.210] | : . ' , attachPackages() ... done
[08:10:07.276] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:07.276] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:07.211] | : . ' , attachPackages() ...
[08:10:07.276] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:07.276] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:07.211] | : . ' , ; packages: [n=1] ‘stats’
[08:10:07.276] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:07.276] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:07.213] | : . ' , attachPackages() ... done
[08:10:07.276] | : signalConditions() ... done
[08:10:07.277] | relay conditions ... done
[08:10:07.277] value() for Future (<unnamed-1>) ... done

> print(v)
[1] 2

> stopifnot(identical(v, 2))

> stopifnot("stats" %in% loadedNamespaces())

> message("- SequentialFuture() - 'local = FALSE' is defunct ...")
- SequentialFuture() - 'local = FALSE' is defunct ...

> res <- tryCatch({
+     f <- SequentialFuture(42, local = FALSE)
+ }, error = identity)

> stopifnot(inherits(res, "error"))

> message("*** sequential() ... DONE")
*** sequential() ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.2s, sys.self=0.003s, elapsed=0.2s, user.child=0.002s, sys.child=0.003s
Test ‘sequential’ ... success
> 
