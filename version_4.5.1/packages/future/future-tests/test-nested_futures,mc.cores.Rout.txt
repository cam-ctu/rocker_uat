
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-nested_futures,mc.cores.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("nested_futures,mc.cores")
Test ‘nested_futures,mc.cores’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-nested_futures,mc.cores.R’

> library(future)
[08:09:03.580] Option 'future.startup.script': TRUE
[08:09:03.581] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:09:03.581] Future startup scripts found: <none>

> library(listenv)

> options(future.debug = FALSE)

> winWorkaround <- (.Platform$OS.type == "windows" && 
+     getRversion() >= "4.0.0")

> message("*** Nested futures - mc.cores ...")
*** Nested futures - mc.cores ...

> strategies <- NULL

> if (!covr_testing) strategies <- c(strategies, "multisession")

> if (supportsMulticore()) strategies <- c(strategies, 
+     "multicore")

> pid <- Sys.getpid()

> cat(sprintf("Main PID: %d\n", pid))
Main PID: 72320

> cat("Available cores on this machine:\n")
Available cores on this machine:

> cores <- availableCores()

> print(cores)
mc.cores 
       2 

> for (mc in 1:2) {
+     message(sprintf("- mc.cores = %d ...", mc))
+     options(mc.cores = mc)
+     mc2 <- min(mc, cores)
+     for (strategy in  .... [TRUNCATED] 
- mc.cores = 1 ...
plan(list('sequential', 'multisession')):
Number of workers: 1
List of 9
 $ pid         : int 72320
 $ mc          : int 1
 $ mc2         : int 1
 $ mc.cores    : int 1
 $ cores       : Named int 1
  ..- attr(*, "names")= chr "mc.cores"
 $ plan        :List of 1
  ..$ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "init")= chr "done"
  .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
    gc = FALSE, earlySignal = FALSE, ...)  
  .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
  .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list("sequential", strategy))
  .. ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566309e4888> 
  .. .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
    gc = FALSE, earlySignal = FALSE, ...)  
  .. .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 $ nbrOfWorkers: int 1
 $ pid1        : int 72320
 $ pid2        : int 72320
plan(list('sequential', 'multisession':2)):
Number of workers: 1
List of 9
 $ pid         : int 72320
 $ mc          : int 1
 $ mc2         : int 1
 $ mc.cores    : int 1
 $ cores       : Named int 1
  ..- attr(*, "names")= chr "mc.cores"
 $ plan        :List of 1
  ..$ :function (..., workers = 2, envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:6] "tweaked" "multisession" "cluster" "multiprocess" ...
  .. ..- attr(*, "init")= chr "done"
  .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
    gc = FALSE, earlySignal = FALSE, ...)  
  .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
  .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "tweaks")=List of 1
  .. .. ..$ workers: 'AsIs' num 2
  .. ..- attr(*, "call")= language plan(list("sequential", tweak(strategy, workers = I(2))))
  .. ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566318bad40> 
  .. .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
    gc = FALSE, earlySignal = FALSE, ...)  
  .. .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 $ nbrOfWorkers: int 2
 $ pid1        : int 72374
 $ pid2        : int 72373
plan(list('multisession', 'sequential')):
Number of workers: 1
List of 9
 $ pid         : int 72320
 $ mc          : int 1
 $ mc2         : int 1
 $ mc.cores    : int 1
 $ cores       : Named int 1
  ..- attr(*, "names")= chr "mc.cores"
 $ plan        :List of 1
  ..$ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "init")= chr "done"
  .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
  .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
  .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
  .. ..- attr(*, "call")= language plan(list(strategy, "sequential"))
  .. ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55663295fa78> 
  .. .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
  .. .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 $ nbrOfWorkers: int 1
 $ pid1        : int 72320
 $ pid2        : int 72320
plan(list('multisession', 'multisession')):
Number of workers: 1
List of 9
 $ pid         : int 72320
 $ mc          : int 1
 $ mc2         : int 1
 $ mc.cores    : int 1
 $ cores       : Named int 1
  ..- attr(*, "names")= chr "mc.cores"
 $ plan        :List of 1
  ..$ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "init")= chr "done"
  .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
    gc = FALSE, earlySignal = FALSE, ...)  
  .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
  .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(strategy, strategy))
  .. ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556632be12e0> 
  .. .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
    gc = FALSE, earlySignal = FALSE, ...)  
  .. .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 $ nbrOfWorkers: int 1
 $ pid1        : int 72320
 $ pid2        : int 72320
plan(list('multisession':2, 'multisession':2)):
Number of workers: 2
List of 9
 $ pid         : int 72460
 $ mc          : int 1
 $ mc2         : int 1
 $ mc.cores    : int 1
 $ cores       : Named int 1
  ..- attr(*, "names")= chr "mc.cores"
 $ plan        :List of 1
  ..$ :function (..., workers = 2, envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:6] "tweaked" "multisession" "cluster" "multiprocess" ...
  .. ..- attr(*, "init")= chr "done"
  .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
    gc = FALSE, earlySignal = FALSE, ...)  
  .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
  .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "tweaks")=List of 1
  .. .. ..$ workers: 'AsIs' num 2
  .. ..- attr(*, "call")= language plan(list(tweak(strategy, workers = I(2)), tweak(strategy, workers = I(2))))
  .. ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566324d4108> 
  .. .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
    gc = FALSE, earlySignal = FALSE, ...)  
  .. .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 $ nbrOfWorkers: int 2
 $ pid1        : int 72574
 $ pid2        : int 72573
plan(list('sequential', 'multicore')):
Number of workers: 1
List of 9
 $ pid         : int 72320
 $ mc          : int 1
 $ mc2         : int 1
 $ mc.cores    : int 1
 $ cores       : Named int 1
  ..- attr(*, "names")= chr "mc.cores"
 $ plan        :List of 1
  ..$ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
    earlySignal = FALSE, envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "init")= chr "done"
  .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
    ...)  
  .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
  .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
  .. ..- attr(*, "call")= language plan(list("sequential", strategy))
  .. ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55663245cc70> 
  .. .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
    ...)  
  .. .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 $ nbrOfWorkers: int 1
 $ pid1        : int 72320
 $ pid2        : int 72320
plan(list('sequential', 'multicore':2)):
Number of workers: 1
List of 9
 $ pid         : int 72320
 $ mc          : int 1
 $ mc2         : int 1
 $ mc.cores    : int 1
 $ cores       : Named int 1
  ..- attr(*, "names")= chr "mc.cores"
 $ plan        :List of 1
  ..$ :function (..., workers = 2, envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
  .. ..- attr(*, "init")= chr "done"
  .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
    ...)  
  .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
  .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
  .. ..- attr(*, "tweaks")=List of 1
  .. .. ..$ workers: 'AsIs' num 2
  .. ..- attr(*, "call")= language plan(list("sequential", tweak(strategy, workers = I(2))))
  .. ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566328ad540> 
  .. .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
    ...)  
  .. .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 $ nbrOfWorkers: 'AsIs' int 2
 $ pid1        : int 72819
 $ pid2        : int 72820
plan(list('multicore', 'sequential')):
Number of workers: 1
List of 9
 $ pid         : int 72320
 $ mc          : int 1
 $ mc2         : int 1
 $ mc.cores    : int 1
 $ cores       : Named int 1
  ..- attr(*, "names")= chr "mc.cores"
 $ plan        :List of 1
  ..$ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "init")= chr "done"
  .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
  .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
  .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
  .. ..- attr(*, "call")= language plan(list(strategy, "sequential"))
  .. ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556632fa66c8> 
  .. .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
  .. .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 $ nbrOfWorkers: int 1
 $ pid1        : int 72320
 $ pid2        : int 72320
plan(list('multicore', 'multicore')):
Number of workers: 1
List of 9
 $ pid         : int 72320
 $ mc          : int 1
 $ mc2         : int 1
 $ mc.cores    : int 1
 $ cores       : Named int 1
  ..- attr(*, "names")= chr "mc.cores"
 $ plan        :List of 1
  ..$ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
    earlySignal = FALSE, envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "init")= chr "done"
  .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
    ...)  
  .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
  .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
  .. ..- attr(*, "call")= language plan(list(strategy, strategy))
  .. ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566330912c8> 
  .. .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
    ...)  
  .. .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 $ nbrOfWorkers: int 1
 $ pid1        : int 72320
 $ pid2        : int 72320
plan(list('multicore':2, 'multicore':2)):
Number of workers: 2
List of 9
 $ pid         : int 72821
 $ mc          : int 1
 $ mc2         : int 1
 $ mc.cores    : int 1
 $ cores       : Named int 1
  ..- attr(*, "names")= chr "mc.cores"
 $ plan        :List of 1
  ..$ :function (..., workers = 2, envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
  .. ..- attr(*, "init")= chr "done"
  .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
    ...)  
  .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
  .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
  .. ..- attr(*, "tweaks")=List of 1
  .. .. ..$ workers: 'AsIs' num 2
  .. ..- attr(*, "call")= language plan(list(tweak(strategy, workers = I(2)), tweak(strategy, workers = I(2))))
  .. ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556633362b40> 
  .. .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
    ...)  
  .. .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 $ nbrOfWorkers: 'AsIs' int 2
 $ pid1        : int 72822
 $ pid2        : int 72823
 - mc.cores = 1 ... DONE
- mc.cores = 2 ...
plan(list('sequential', 'multisession')):
Number of workers: 1
List of 9
 $ pid         : int 72320
 $ mc          : int 2
 $ mc2         : int 2
 $ mc.cores    : int 2
 $ cores       : Named int 2
  ..- attr(*, "names")= chr "mc.cores"
 $ plan        :List of 1
  ..$ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "init")= chr "done"
  .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
    gc = FALSE, earlySignal = FALSE, ...)  
  .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
  .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list("sequential", strategy))
  .. ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556633590360> 
  .. .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
    gc = FALSE, earlySignal = FALSE, ...)  
  .. .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 $ nbrOfWorkers: int 2
 $ pid1        : int 72829
 $ pid2        : int 72830
plan(list('multisession', 'sequential')):
Number of workers: 2
List of 9
 $ pid         : int 72916
 $ mc          : int 2
 $ mc2         : int 2
 $ mc.cores    : int 1
 $ cores       : Named int 1
  ..- attr(*, "names")= chr "mc.cores"
 $ plan        :List of 1
  ..$ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "init")= chr "done"
  .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
  .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
  .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
  .. ..- attr(*, "call")= language plan(sequential)
  .. ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55663305bb28> 
  .. .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
  .. .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 $ nbrOfWorkers: int 1
 $ pid1        : int 72916
 $ pid2        : int 72916
plan(list('multisession', 'multisession')):
Number of workers: 2
List of 9
 $ pid         : int 73011
 $ mc          : int 2
 $ mc2         : int 2
 $ mc.cores    : int 1
 $ cores       : Named int 1
  ..- attr(*, "names")= chr "mc.cores"
 $ plan        :List of 1
  ..$ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "init")= chr "done"
  .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
    gc = FALSE, earlySignal = FALSE, ...)  
  .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
  .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(strategy, strategy))
  .. ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55662f69dcd8> 
  .. .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
    gc = FALSE, earlySignal = FALSE, ...)  
  .. .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 $ nbrOfWorkers: int 1
 $ pid1        : int 73011
 $ pid2        : int 73011
plan(list('sequential', 'multicore')):
Number of workers: 1
List of 9
 $ pid         : int 72320
 $ mc          : int 2
 $ mc2         : int 2
 $ mc.cores    : int 2
 $ cores       : Named int 2
  ..- attr(*, "names")= chr "mc.cores"
 $ plan        :List of 1
  ..$ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
    earlySignal = FALSE, envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "init")= chr "done"
  .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
    ...)  
  .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
  .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
  .. ..- attr(*, "call")= language plan(list("sequential", strategy))
  .. ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55663357b678> 
  .. .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
    ...)  
  .. .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 $ nbrOfWorkers: int 2
 $ pid1        : int 73110
 $ pid2        : int 73111
plan(list('multicore', 'sequential')):
Number of workers: 2
List of 9
 $ pid         : int 73112
 $ mc          : int 2
 $ mc2         : int 2
 $ mc.cores    : int 1
 $ cores       : Named int 1
  ..- attr(*, "names")= chr "mc.cores"
 $ plan        :List of 1
  ..$ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "init")= chr "done"
  .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
  .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
  .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
  .. ..- attr(*, "call")= language plan(list(strategy, "sequential"))
  .. ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556630c41738> 
  .. .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
  .. .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 $ nbrOfWorkers: int 1
 $ pid1        : int 73112
 $ pid2        : int 73112
plan(list('multicore', 'multicore')):
Number of workers: 2
List of 9
 $ pid         : int 73113
 $ mc          : int 2
 $ mc2         : int 2
 $ mc.cores    : int 1
 $ cores       : Named int 1
  ..- attr(*, "names")= chr "mc.cores"
 $ plan        :List of 1
  ..$ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
    earlySignal = FALSE, envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "init")= chr "done"
  .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
    ...)  
  .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
  .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
  .. ..- attr(*, "call")= language plan(list(strategy, strategy))
  .. ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556633031d80> 
  .. .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
    ...)  
  .. .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 $ nbrOfWorkers: int 1
 $ pid1        : int 73113
 $ pid2        : int 73113
 - mc.cores = 2 ... DONE

> message("*** Nested futures - mc.cores ... DONE")
*** Nested futures - mc.cores ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=2s, sys.self=0.2s, elapsed=7s, user.child=0.3s, sys.child=0.5s
Test ‘nested_futures,mc.cores’ ... success
> 
