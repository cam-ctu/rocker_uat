
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-futureAssign.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("futureAssign")
Test ‘futureAssign’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-futureAssign.R’

> library(future)
[08:07:49.267] Option 'future.startup.script': TRUE
[08:07:49.267] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:07:49.267] Future startup scripts found: <none>

> message("*** futureAssign() ...")
*** futureAssign() ...

> message("*** futureAssign() - sequential w/ lazy evaluation ...")
*** futureAssign() - sequential w/ lazy evaluation ...

> delayedAssign("a", {
+     cat("Delayed assignment evaluated\n")
+     1
+ })

> futureAssign("b", {
+     cat("Future assignment evaluated\n")
+     2
+ }, lazy = TRUE)
[08:07:49.269] future(..., label = NULL) ...
[08:07:49.269] | lazy: TRUE
[08:07:49.269] | stdout: TRUE
[08:07:49.269] | conditions: [n=1] ‘condition’
[08:07:49.269] | gc: FALSE
[08:07:49.269] | earlySignal: FALSE
[08:07:49.270] | getGlobalsAndPackages() ...
[08:07:49.270] | : Searching for globals ...
[08:07:49.283] | : . globals found: [2] ‘{’, ‘cat’
[08:07:49.283] | : Searching for globals ... done
[08:07:49.284] | : Resolving globals: FALSE
[08:07:49.284] | : Search for packages associated with the globals ...
[08:07:49.284] | : . Packages associated with globals: [1] ‘base’
[08:07:49.284] | : . Packages: [1] ‘base’
[08:07:49.284] | : Search for packages associated with the globals ... done
[08:07:49.285] | : Packages after dropping 'base': [0] 
[08:07:49.285] | : globals: [0] 
[08:07:49.285] | : packages: [0] 
[08:07:49.285] | getGlobalsAndPackages() ... done
[08:07:49.285] future(..., label = NULL) ... done

> cat(sprintf("b = %s\n", b))
[08:07:49.286] value() for Future (<unnamed-1>) ...
[08:07:49.286] | run() for ‘Future’ (<unnamed-1>) ...
[08:07:49.286] | : state: ‘created’
[08:07:49.286] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.287] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:49.287] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.287] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.287] | : . '  - attr(*, "init")= logi TRUE
[08:07:49.287] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.287] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.287] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.287] | : . '  - attr(*, "call")= language plan(sequential)
[08:07:49.290] | : . ' init: TRUE
[08:07:49.291] | : . ' makeFutureBackend(<sequential>) ...
[08:07:49.291] | : . ' , Backend function: <‘NULL’>
[08:07:49.291] | : . ' , Evaluator tweak arguments: [n=0]
[08:07:49.291] | : . ' ,  list()
[08:07:49.291] | : . ' , Evaluator formal arguments: [n=2]
[08:07:49.291] | : . ' ,  list()
[08:07:49.292] | : . ' , Backend factory arguments: [n=2]
[08:07:49.292] | : . ' , Dotted pair list of 2
[08:07:49.292] | : . ' ,  $ gc         : logi FALSE
[08:07:49.292] | : . ' ,  $ earlySignal: logi FALSE
[08:07:49.293] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:49.293] | : . ' makeFutureBackend(<sequential>) ... done
[08:07:49.293] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:49.293] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.293] | : Using SequentialFutureBackend ...
[08:07:49.293] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:07:49.294] | : . Launching futures ...
[08:07:49.294] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:49.294] | : . ' , getFutureData() ...
[08:07:49.294] | : . ' , ; getFutureCore() ...
[08:07:49.294] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:49.294] | : . ' , ; getFutureCore() ... done
[08:07:49.294] | : . ' , ; getFutureCapture() ...
[08:07:49.295] | : . ' , ; getFutureCapture() ... done
[08:07:49.295] | : . ' , ; getFutureContext() ...
[08:07:49.295] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.295] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:49.295] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.295] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:49.296] | : . ' , ; getFutureContext() ... done
[08:07:49.296] | : . ' , getFutureData() ... done
[08:07:49.298] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.298] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:49.298] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.299] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.299] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.299] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:49.299] | : . ' , ; ` | New stack:
[08:07:49.299] | : . ' , ; ` | List of 1
[08:07:49.299] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.299] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.299] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:49.299] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.299] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.299] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.299] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.299] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.302] | : . ' , ; ` | Old stack:
[08:07:49.302] | : . ' , ; ` | List of 1
[08:07:49.302] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.302] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.302] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:49.302] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.302] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.302] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.302] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:49.302] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.302] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.302] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.302] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.305] | : . ' , ; ` | Not identical
[08:07:49.305] | : . ' , ; ` | all.equal() for future ...
[08:07:49.305] | : . ' , ; ` | : List of 2
[08:07:49.305] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.305] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.305] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:49.305] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.305] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.305] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.305] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.305] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.305] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.305] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.305] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.305] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.305] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.305] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.305] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.305] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.305] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.312] | : . ' , ; ` | all.equal() for future ... done
[08:07:49.312] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:49.312] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:49.312] | : . ' , ; ` List of future strategies:
[08:07:49.312] | : . ' , ; ` 1. sequential:
[08:07:49.312] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:49.312] | : . ' , ; `    - tweaked: FALSE
[08:07:49.312] | : . ' , ; `    - call: plan(sequential)
[08:07:49.313] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.313] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.315] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.315] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.316] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.316] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:49.316] | : . ' , ; ` | : New stack:
[08:07:49.316] | : . ' , ; ` | : List of 1
[08:07:49.316] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.316] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.316] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.316] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.316] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.316] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.316] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.316] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.316] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.316] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.316] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.319] | : . ' , ; ` | : Old stack:
[08:07:49.319] | : . ' , ; ` | : List of 1
[08:07:49.319] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.319] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.319] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.319] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.319] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.319] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.319] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.319] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.319] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.319] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.319] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.322] | : . ' , ; ` | : Identical
[08:07:49.322] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:49.322] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:49.322] | : . ' , ; ` | List of future strategies:
[08:07:49.322] | : . ' , ; ` | 1. sequential:
[08:07:49.322] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:49.322] | : . ' , ; ` |    - tweaked: FALSE
[08:07:49.322] | : . ' , ; ` |    - call: plan(sequential)
[08:07:49.323] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.323] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.323] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.326] | : . ' , SequentialFuture started (and completed)
[08:07:49.326] | : . ' , signalConditions() ...
[08:07:49.326] | : . ' , ; include = ‘immediateCondition’
[08:07:49.327] | : . ' , ; exclude = 
[08:07:49.327] | : . ' , ; resignal = FALSE
[08:07:49.327] | : . ' , ; Number of conditions: 6
[08:07:49.327] | : . ' , ;  int 6
[08:07:49.327] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.327] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.328] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.328] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.328] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.328] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.328] | : . ' , signalConditions() ... done
[08:07:49.328] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:49.328] | : . Launching futures ... done
[08:07:49.329] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:49.330] | : Using SequentialFutureBackend ... done
[08:07:49.330] | run() for ‘Future’ (<unnamed-1>) ... done
[08:07:49.330] | signalConditions() ...
[08:07:49.330] | : include = ‘immediateCondition’
[08:07:49.330] | : exclude = 
[08:07:49.330] | : resignal = FALSE
[08:07:49.330] | : Number of conditions: 6
[08:07:49.330] | :  int 6
[08:07:49.331] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.331] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.331] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.331] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.331] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.331] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.331] | signalConditions() ... done
[08:07:49.331] | relay stdout ...
Future assignment evaluated
[08:07:49.331] | relay stdout ... done
[08:07:49.332] | check for misuse ...
[08:07:49.332] | check for misuse ... done
[08:07:49.332] | relay conditions ...
[08:07:49.332] | : Future state: ‘finished’
[08:07:49.332] | : signalConditions() ...
[08:07:49.332] | : . include = ‘condition’
[08:07:49.332] | : . exclude = ‘immediateCondition’
[08:07:49.332] | : . resignal = TRUE
[08:07:49.332] | : . Number of conditions: 6
[08:07:49.332] | : .  int 6
[08:07:49.333] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.333] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.297] | : . ' , attachPackages() ...
[08:07:49.333] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.333] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.297] | : . ' , ; packages: [n=1] ‘future’
[08:07:49.333] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.333] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.297] | : . ' , attachPackages() ... done
[08:07:49.334] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.334] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.297] | : . ' , attachPackages() ...
[08:07:49.334] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.334] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.298] | : . ' , ; packages: [n=0] 
[08:07:49.334] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.334] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.298] | : . ' , attachPackages() ... done
[08:07:49.334] | : signalConditions() ... done
[08:07:49.334] | relay conditions ... done
[08:07:49.334] value() for Future (<unnamed-1>) ... done
b = 2

> cat(sprintf("a = %s\n", a))
Delayed assignment evaluated
a = 1

> stopifnot(identical(a, 1))

> stopifnot(identical(b, 2))

> message("*** futureAssign() - sequential w/ lazy evaluation ... DONE")
*** futureAssign() - sequential w/ lazy evaluation ... DONE

> message("*** futureAssign() - lazy = TRUE / FALSE ...")
*** futureAssign() - lazy = TRUE / FALSE ...

> for (cores in 1:availCores) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+     for (strategy in supp .... [TRUNCATED] 
Testing with 1 cores ...
*** futureAssign() with ‘sequential’ futures ...
[08:07:49.356] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.357] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:07:49.357] | : all.equal() for FutureStrategyList ...
[08:07:49.357] | : . New stack:
[08:07:49.357] | : . List of 1
[08:07:49.357] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.357] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.357] | : .   ..- attr(*, "init")= logi TRUE
[08:07:49.357] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.357] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.357] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.357] | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:49.357] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.359] | : . Old stack:
[08:07:49.359] | : . List of 1
[08:07:49.359] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.359] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.359] | : .   ..- attr(*, "init")= chr "done"
[08:07:49.359] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.359] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.359] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.359] | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:49.359] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.359] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.359] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.359] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.362] | : . Not identical
[08:07:49.362] | : . all.equal() for future ...
[08:07:49.363] | : . ' List of 2
[08:07:49.363] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.363] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.363] | : . '   ..- attr(*, "init")= logi TRUE
[08:07:49.363] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.363] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.363] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.363] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:49.363] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.363] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.363] | : . '   ..- attr(*, "init")= chr "done"
[08:07:49.363] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.363] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.363] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.363] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:07:49.363] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.363] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.363] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.368] | : . all.equal() for future ... done
[08:07:49.368] | : all.equal() for FutureStrategyList ... done
[08:07:49.369] | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:49.369] | : List of future strategies:
[08:07:49.369] | : 1. sequential:
[08:07:49.369] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:49.369] | :    - tweaked: FALSE
[08:07:49.369] | :    - call: plan(sequential)
[08:07:49.369] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:07:49.369] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.369] future(..., label = NULL) ...
[08:07:49.369] | lazy: FALSE
[08:07:49.369] | stdout: TRUE
[08:07:49.370] | conditions: [n=1] ‘condition’
[08:07:49.370] | gc: FALSE
[08:07:49.370] | earlySignal: FALSE
[08:07:49.370] | getGlobalsAndPackages() ...
[08:07:49.370] | : Searching for globals ...
[08:07:49.373] | : . globals found: [1] ‘{’
[08:07:49.373] | : Searching for globals ... done
[08:07:49.373] | : Resolving globals: FALSE
[08:07:49.373] | : Search for packages associated with the globals ...
[08:07:49.373] | : . Packages associated with globals: [1] ‘base’
[08:07:49.373] | : . Packages: [1] ‘base’
[08:07:49.374] | : Search for packages associated with the globals ... done
[08:07:49.374] | : Packages after dropping 'base': [0] 
[08:07:49.374] | : globals: [0] 
[08:07:49.374] | : packages: [0] 
[08:07:49.374] | getGlobalsAndPackages() ... done
[08:07:49.374] | run() for ‘Future’ (<unnamed-2>) ...
[08:07:49.374] | : state: ‘created’
[08:07:49.374] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.374] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.375] | : Using SequentialFutureBackend ...
[08:07:49.375] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:07:49.375] | : . Launching futures ...
[08:07:49.375] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:49.375] | : . ' , getFutureData() ...
[08:07:49.375] | : . ' , ; getFutureCore() ...
[08:07:49.375] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:49.375] | : . ' , ; getFutureCore() ... done
[08:07:49.375] | : . ' , ; getFutureCapture() ...
[08:07:49.376] | : . ' , ; getFutureCapture() ... done
[08:07:49.376] | : . ' , ; getFutureContext() ...
[08:07:49.376] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.376] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:49.376] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.376] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:49.376] | : . ' , ; getFutureContext() ... done
[08:07:49.376] | : . ' , getFutureData() ... done
[08:07:49.378] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.378] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:49.378] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.378] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.378] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.378] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:49.378] | : . ' , ; ` | New stack:
[08:07:49.378] | : . ' , ; ` | List of 1
[08:07:49.378] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.378] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.378] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:49.378] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.378] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.378] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.378] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.378] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.381] | : . ' , ; ` | Old stack:
[08:07:49.381] | : . ' , ; ` | List of 1
[08:07:49.381] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.381] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.381] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:49.381] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.381] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.381] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.381] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:49.381] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.381] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.381] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.381] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.385] | : . ' , ; ` | Not identical
[08:07:49.385] | : . ' , ; ` | all.equal() for future ...
[08:07:49.385] | : . ' , ; ` | : List of 2
[08:07:49.385] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.385] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.385] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:49.385] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.385] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.385] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.385] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.385] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.385] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.385] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.385] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.385] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.385] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.385] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.385] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.385] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.385] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.390] | : . ' , ; ` | all.equal() for future ... done
[08:07:49.390] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:49.390] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:49.390] | : . ' , ; ` List of future strategies:
[08:07:49.390] | : . ' , ; ` 1. sequential:
[08:07:49.390] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:49.390] | : . ' , ; `    - tweaked: FALSE
[08:07:49.390] | : . ' , ; `    - call: plan(sequential)
[08:07:49.391] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.391] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.392] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.392] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.393] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.393] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:49.393] | : . ' , ; ` | : New stack:
[08:07:49.393] | : . ' , ; ` | : List of 1
[08:07:49.393] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.393] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.393] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.393] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.393] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.393] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.393] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.393] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.393] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.393] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.393] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.396] | : . ' , ; ` | : Old stack:
[08:07:49.396] | : . ' , ; ` | : List of 1
[08:07:49.396] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.396] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.396] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.396] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.396] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.396] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.396] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.396] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.396] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.396] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.396] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.399] | : . ' , ; ` | : Identical
[08:07:49.399] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:49.399] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:49.399] | : . ' , ; ` | List of future strategies:
[08:07:49.399] | : . ' , ; ` | 1. sequential:
[08:07:49.399] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:49.399] | : . ' , ; ` |    - tweaked: FALSE
[08:07:49.399] | : . ' , ; ` |    - call: plan(sequential)
[08:07:49.400] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.400] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.400] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.400] | : . ' , SequentialFuture started (and completed)
[08:07:49.400] | : . ' , signalConditions() ...
[08:07:49.400] | : . ' , ; include = ‘immediateCondition’
[08:07:49.401] | : . ' , ; exclude = 
[08:07:49.401] | : . ' , ; resignal = FALSE
[08:07:49.401] | : . ' , ; Number of conditions: 6
[08:07:49.401] | : . ' , ;  int 6
[08:07:49.401] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.401] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.401] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.402] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.402] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.402] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.402] | : . ' , signalConditions() ... done
[08:07:49.403] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:49.403] | : . Launching futures ... done
[08:07:49.403] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:49.403] | : Using SequentialFutureBackend ... done
[08:07:49.403] | run() for ‘Future’ (<unnamed-2>) ... done
[08:07:49.403] future(..., label = NULL) ... done
[08:07:49.403] future(..., label = NULL) ...
[08:07:49.404] | lazy: FALSE
[08:07:49.404] | stdout: TRUE
[08:07:49.404] | conditions: [n=1] ‘condition’
[08:07:49.404] | gc: FALSE
[08:07:49.404] | earlySignal: FALSE
[08:07:49.404] | getGlobalsAndPackages() ...
[08:07:49.404] | : Searching for globals ...
[08:07:49.407] | : . globals found: [1] ‘{’
[08:07:49.407] | : Searching for globals ... done
[08:07:49.407] | : Resolving globals: FALSE
[08:07:49.407] | : Search for packages associated with the globals ...
[08:07:49.407] | : . Packages associated with globals: [1] ‘base’
[08:07:49.408] | : . Packages: [1] ‘base’
[08:07:49.408] | : Search for packages associated with the globals ... done
[08:07:49.408] | : Packages after dropping 'base': [0] 
[08:07:49.408] | : globals: [0] 
[08:07:49.408] | : packages: [0] 
[08:07:49.408] | getGlobalsAndPackages() ... done
[08:07:49.408] | run() for ‘Future’ (<unnamed-3>) ...
[08:07:49.408] | : state: ‘created’
[08:07:49.409] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.409] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.409] | : Using SequentialFutureBackend ...
[08:07:49.409] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:07:49.409] | : . Launching futures ...
[08:07:49.409] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:49.409] | : . ' , getFutureData() ...
[08:07:49.409] | : . ' , ; getFutureCore() ...
[08:07:49.409] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:49.409] | : . ' , ; getFutureCore() ... done
[08:07:49.410] | : . ' , ; getFutureCapture() ...
[08:07:49.410] | : . ' , ; getFutureCapture() ... done
[08:07:49.410] | : . ' , ; getFutureContext() ...
[08:07:49.410] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.410] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:49.410] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.410] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:49.410] | : . ' , ; getFutureContext() ... done
[08:07:49.410] | : . ' , getFutureData() ... done
[08:07:49.412] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.412] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:49.412] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.412] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.412] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.412] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:49.412] | : . ' , ; ` | New stack:
[08:07:49.413] | : . ' , ; ` | List of 1
[08:07:49.413] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.413] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.413] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:49.413] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.413] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.413] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.413] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.413] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.415] | : . ' , ; ` | Old stack:
[08:07:49.415] | : . ' , ; ` | List of 1
[08:07:49.415] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.415] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.415] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:49.415] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.415] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.415] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.415] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:49.415] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.415] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.415] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.415] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.418] | : . ' , ; ` | Not identical
[08:07:49.418] | : . ' , ; ` | all.equal() for future ...
[08:07:49.418] | : . ' , ; ` | : List of 2
[08:07:49.418] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.418] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.418] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:49.418] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.418] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.418] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.418] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.418] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.418] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.418] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.418] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.418] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.418] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.418] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.418] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.418] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.418] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.424] | : . ' , ; ` | all.equal() for future ... done
[08:07:49.424] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:49.424] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:49.424] | : . ' , ; ` List of future strategies:
[08:07:49.424] | : . ' , ; ` 1. sequential:
[08:07:49.424] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:49.424] | : . ' , ; `    - tweaked: FALSE
[08:07:49.424] | : . ' , ; `    - call: plan(sequential)
[08:07:49.425] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.425] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.426] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.427] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.427] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.427] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:49.427] | : . ' , ; ` | : New stack:
[08:07:49.427] | : . ' , ; ` | : List of 1
[08:07:49.427] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.427] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.427] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.427] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.427] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.427] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.427] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.427] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.427] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.427] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.427] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.430] | : . ' , ; ` | : Old stack:
[08:07:49.430] | : . ' , ; ` | : List of 1
[08:07:49.430] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.430] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.430] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.430] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.430] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.430] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.430] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.430] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.430] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.430] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.430] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.433] | : . ' , ; ` | : Identical
[08:07:49.433] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:49.434] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:49.434] | : . ' , ; ` | List of future strategies:
[08:07:49.434] | : . ' , ; ` | 1. sequential:
[08:07:49.434] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:49.434] | : . ' , ; ` |    - tweaked: FALSE
[08:07:49.434] | : . ' , ; ` |    - call: plan(sequential)
[08:07:49.434] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.434] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.434] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.434] | : . ' , SequentialFuture started (and completed)
[08:07:49.435] | : . ' , signalConditions() ...
[08:07:49.435] | : . ' , ; include = ‘immediateCondition’
[08:07:49.435] | : . ' , ; exclude = 
[08:07:49.435] | : . ' , ; resignal = FALSE
[08:07:49.435] | : . ' , ; Number of conditions: 6
[08:07:49.435] | : . ' , ;  int 6
[08:07:49.435] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.436] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.436] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.436] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.436] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.436] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.436] | : . ' , signalConditions() ... done
[08:07:49.436] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:49.436] | : . Launching futures ... done
[08:07:49.436] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:49.437] | : Using SequentialFutureBackend ... done
[08:07:49.437] | run() for ‘Future’ (<unnamed-3>) ... done
[08:07:49.437] future(..., label = NULL) ... done
[08:07:49.437] value() for SequentialFuture (<unnamed-2>) ...
[08:07:49.437] | signalConditions() ...
[08:07:49.437] | : include = ‘immediateCondition’
[08:07:49.437] | : exclude = 
[08:07:49.437] | : resignal = FALSE
[08:07:49.437] | : Number of conditions: 6
[08:07:49.437] | :  int 6
[08:07:49.438] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.438] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.438] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.438] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.438] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.438] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.438] | signalConditions() ... done
[08:07:49.439] | relay stdout ...
[08:07:49.439] | relay stdout ... done
[08:07:49.439] | check for misuse ...
[08:07:49.439] | check for misuse ... done
[08:07:49.439] | relay conditions ...
[08:07:49.439] | : Future state: ‘finished’
[08:07:49.439] | : signalConditions() ...
[08:07:49.439] | : . include = ‘condition’
[08:07:49.439] | : . exclude = ‘immediateCondition’
[08:07:49.439] | : . resignal = TRUE
[08:07:49.440] | : . Number of conditions: 6
[08:07:49.440] | : .  int 6
[08:07:49.440] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.440] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.377] | : . ' , attachPackages() ...
[08:07:49.440] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.440] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.377] | : . ' , ; packages: [n=1] ‘future’
[08:07:49.441] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.441] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.377] | : . ' , attachPackages() ... done
[08:07:49.442] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.442] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.377] | : . ' , attachPackages() ...
[08:07:49.442] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.442] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.377] | : . ' , ; packages: [n=0] 
[08:07:49.442] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.442] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.377] | : . ' , attachPackages() ... done
[08:07:49.442] | : signalConditions() ... done
[08:07:49.442] | relay conditions ... done
[08:07:49.443] value() for SequentialFuture (<unnamed-2>) ... done
u$a = 2
[08:07:49.443] value() for SequentialFuture (<unnamed-3>) ...
[08:07:49.443] | signalConditions() ...
[08:07:49.443] | : include = ‘immediateCondition’
[08:07:49.443] | : exclude = 
[08:07:49.443] | : resignal = FALSE
[08:07:49.443] | : Number of conditions: 6
[08:07:49.443] | :  int 6
[08:07:49.444] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.444] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.444] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.444] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.444] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.444] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.444] | signalConditions() ... done
[08:07:49.444] | relay stdout ...
[08:07:49.444] | relay stdout ... done
[08:07:49.445] | check for misuse ...
[08:07:49.445] | check for misuse ... done
[08:07:49.445] | relay conditions ...
[08:07:49.445] | : Future state: ‘finished’
[08:07:49.445] | : signalConditions() ...
[08:07:49.445] | : . include = ‘condition’
[08:07:49.445] | : . exclude = ‘immediateCondition’
[08:07:49.445] | : . resignal = TRUE
[08:07:49.445] | : . Number of conditions: 6
[08:07:49.445] | : .  int 6
[08:07:49.446] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.446] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.411] | : . ' , attachPackages() ...
[08:07:49.446] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.446] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.411] | : . ' , ; packages: [n=1] ‘future’
[08:07:49.446] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.446] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.411] | : . ' , attachPackages() ... done
[08:07:49.447] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.447] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.411] | : . ' , attachPackages() ...
[08:07:49.447] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.447] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.411] | : . ' , ; packages: [n=0] 
[08:07:49.447] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.447] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.411] | : . ' , attachPackages() ... done
[08:07:49.447] | : signalConditions() ... done
[08:07:49.447] | relay conditions ... done
[08:07:49.447] value() for SequentialFuture (<unnamed-3>) ... done
v$a = 4
[08:07:49.448] future(..., label = NULL) ...
[08:07:49.448] | lazy: FALSE
[08:07:49.448] | stdout: TRUE
[08:07:49.448] | conditions: [n=1] ‘condition’
[08:07:49.448] | gc: FALSE
[08:07:49.448] | earlySignal: FALSE
[08:07:49.448] | getGlobalsAndPackages() ...
[08:07:49.448] | : Searching for globals ...
[08:07:49.453] | : . globals found: [3] ‘{’, ‘*’, ‘a’
[08:07:49.453] | : Searching for globals ... done
[08:07:49.453] | : Resolving globals: FALSE
[08:07:49.454] | : Search for packages associated with the globals ...
[08:07:49.454] | : . Packages associated with globals: [1] ‘base’
[08:07:49.454] | : . Packages: [1] ‘base’
[08:07:49.454] | : Search for packages associated with the globals ... done
[08:07:49.454] | : Packages after dropping 'base': [0] 
[08:07:49.454] | : globals: [1] ‘a’
[08:07:49.454] | : packages: [0] 
[08:07:49.455] | getGlobalsAndPackages() ... done
[08:07:49.455] | run() for ‘Future’ (<unnamed-4>) ...
[08:07:49.455] | : state: ‘created’
[08:07:49.455] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.455] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.455] | : Using SequentialFutureBackend ...
[08:07:49.455] | : . Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:07:49.455] | : . Launching futures ...
[08:07:49.455] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:49.456] | : . ' , getFutureData() ...
[08:07:49.456] | : . ' , ; getFutureCore() ...
[08:07:49.456] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:49.456] | : . ' , ; getFutureCore() ... done
[08:07:49.456] | : . ' , ; getFutureCapture() ...
[08:07:49.456] | : . ' , ; getFutureCapture() ... done
[08:07:49.456] | : . ' , ; getFutureContext() ...
[08:07:49.456] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.456] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:49.457] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.457] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:49.457] | : . ' , ; getFutureContext() ... done
[08:07:49.457] | : . ' , getFutureData() ... done
[08:07:49.458] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.458] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:49.458] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.458] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.459] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.459] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:49.459] | : . ' , ; ` | New stack:
[08:07:49.459] | : . ' , ; ` | List of 1
[08:07:49.459] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.459] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.459] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:49.459] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.459] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.459] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.459] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.459] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.462] | : . ' , ; ` | Old stack:
[08:07:49.462] | : . ' , ; ` | List of 1
[08:07:49.462] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.462] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.462] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:49.462] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.462] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.462] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.462] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:49.462] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.462] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.462] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.462] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.465] | : . ' , ; ` | Not identical
[08:07:49.465] | : . ' , ; ` | all.equal() for future ...
[08:07:49.466] | : . ' , ; ` | : List of 2
[08:07:49.466] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.466] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.466] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:49.466] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.466] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.466] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.466] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.466] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.466] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.466] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.466] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.466] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.466] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.466] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.466] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.466] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.466] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.470] | : . ' , ; ` | all.equal() for future ... done
[08:07:49.471] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:49.471] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:49.471] | : . ' , ; ` List of future strategies:
[08:07:49.471] | : . ' , ; ` 1. sequential:
[08:07:49.471] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:49.471] | : . ' , ; `    - tweaked: FALSE
[08:07:49.471] | : . ' , ; `    - call: plan(sequential)
[08:07:49.471] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.471] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.472] | : . ' , assign_globals() ...
[08:07:49.472] | : . ' , List of 1
[08:07:49.472] | : . ' ,  $ a: num 1
[08:07:49.472] | : . ' ,  - attr(*, "where")=List of 1
[08:07:49.472] | : . ' ,   ..$ a:<environment: R_GlobalEnv> 
[08:07:49.472] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:49.472] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:07:49.472] | : . ' ,  - attr(*, "total_size")= num NA
[08:07:49.472] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:07:49.474] | : . ' , - copied ‘a’ to environment
[08:07:49.474] | : . ' , assign_globals() ... done
[08:07:49.476] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.476] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.476] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.476] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:49.476] | : . ' , ; ` | : New stack:
[08:07:49.476] | : . ' , ; ` | : List of 1
[08:07:49.476] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.476] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.476] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.476] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.476] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.476] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.476] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.476] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.476] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.476] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.476] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.480] | : . ' , ; ` | : Old stack:
[08:07:49.480] | : . ' , ; ` | : List of 1
[08:07:49.480] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.480] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.480] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.480] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.480] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.480] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.480] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.480] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.480] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.480] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.480] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.483] | : . ' , ; ` | : Identical
[08:07:49.483] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:49.484] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:49.484] | : . ' , ; ` | List of future strategies:
[08:07:49.484] | : . ' , ; ` | 1. sequential:
[08:07:49.484] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:49.484] | : . ' , ; ` |    - tweaked: FALSE
[08:07:49.484] | : . ' , ; ` |    - call: plan(sequential)
[08:07:49.484] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.484] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.484] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.485] | : . ' , SequentialFuture started (and completed)
[08:07:49.485] | : . ' , signalConditions() ...
[08:07:49.485] | : . ' , ; include = ‘immediateCondition’
[08:07:49.485] | : . ' , ; exclude = 
[08:07:49.485] | : . ' , ; resignal = FALSE
[08:07:49.485] | : . ' , ; Number of conditions: 6
[08:07:49.485] | : . ' , ;  int 6
[08:07:49.486] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.486] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.486] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.486] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.486] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.486] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.486] | : . ' , signalConditions() ... done
[08:07:49.486] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:49.486] | : . Launching futures ... done
[08:07:49.486] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:49.487] | : Using SequentialFutureBackend ... done
[08:07:49.487] | run() for ‘Future’ (<unnamed-4>) ... done
[08:07:49.487] future(..., label = NULL) ... done
[08:07:49.487] value() for SequentialFuture (<unnamed-4>) ...
[08:07:49.487] | signalConditions() ...
[08:07:49.487] | : include = ‘immediateCondition’
[08:07:49.487] | : exclude = 
[08:07:49.487] | : resignal = FALSE
[08:07:49.487] | : Number of conditions: 6
[08:07:49.488] | :  int 6
[08:07:49.488] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.488] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.488] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.488] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.488] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.488] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.489] | signalConditions() ... done
[08:07:49.489] | relay stdout ...
[08:07:49.489] | relay stdout ... done
[08:07:49.489] | check for misuse ...
[08:07:49.489] | check for misuse ... done
[08:07:49.489] | relay conditions ...
[08:07:49.489] | : Future state: ‘finished’
[08:07:49.489] | : signalConditions() ...
[08:07:49.489] | : . include = ‘condition’
[08:07:49.489] | : . exclude = ‘immediateCondition’
[08:07:49.490] | : . resignal = TRUE
[08:07:49.490] | : . Number of conditions: 6
[08:07:49.490] | : .  int 6
[08:07:49.490] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.490] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.457] | : . ' , attachPackages() ...
[08:07:49.490] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.490] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.457] | : . ' , ; packages: [n=1] ‘future’
[08:07:49.491] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.491] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.457] | : . ' , attachPackages() ... done
[08:07:49.491] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.491] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.457] | : . ' , attachPackages() ...
[08:07:49.491] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.491] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.458] | : . ' , ; packages: [n=0] 
[08:07:49.491] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.491] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.458] | : . ' , attachPackages() ... done
[08:07:49.492] | : signalConditions() ... done
[08:07:49.492] | relay conditions ... done
[08:07:49.492] value() for SequentialFuture (<unnamed-4>) ... done
[08:07:49.492] future(..., label = NULL) ...
[08:07:49.492] | lazy: FALSE
[08:07:49.492] | stdout: TRUE
[08:07:49.492] | conditions: [n=1] ‘condition’
[08:07:49.492] | gc: FALSE
[08:07:49.492] | earlySignal: FALSE
[08:07:49.492] | getGlobalsAndPackages() ...
[08:07:49.493] | : Searching for globals ...
[08:07:49.498] | : . globals found: [3] ‘{’, ‘*’, ‘a’
[08:07:49.498] | : Searching for globals ... done
[08:07:49.499] | : Resolving globals: FALSE
[08:07:49.499] | : Search for packages associated with the globals ...
[08:07:49.499] | : . Packages associated with globals: [1] ‘base’
[08:07:49.499] | : . Packages: [1] ‘base’
[08:07:49.499] | : Search for packages associated with the globals ... done
[08:07:49.499] | : Packages after dropping 'base': [0] 
[08:07:49.499] | : globals: [1] ‘a’
[08:07:49.500] | : packages: [0] 
[08:07:49.500] | getGlobalsAndPackages() ... done
[08:07:49.500] | run() for ‘Future’ (<unnamed-5>) ...
[08:07:49.500] | : state: ‘created’
[08:07:49.500] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.500] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.500] | : Using SequentialFutureBackend ...
[08:07:49.500] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:07:49.500] | : . Launching futures ...
[08:07:49.501] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:49.501] | : . ' , getFutureData() ...
[08:07:49.501] | : . ' , ; getFutureCore() ...
[08:07:49.501] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:49.501] | : . ' , ; getFutureCore() ... done
[08:07:49.501] | : . ' , ; getFutureCapture() ...
[08:07:49.501] | : . ' , ; getFutureCapture() ... done
[08:07:49.501] | : . ' , ; getFutureContext() ...
[08:07:49.501] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.502] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:49.502] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.502] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:49.502] | : . ' , ; getFutureContext() ... done
[08:07:49.502] | : . ' , getFutureData() ... done
[08:07:49.503] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.503] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:49.503] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.504] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.504] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.504] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:49.504] | : . ' , ; ` | New stack:
[08:07:49.504] | : . ' , ; ` | List of 1
[08:07:49.504] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.504] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.504] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:49.504] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.504] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.504] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.504] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.504] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.506] | : . ' , ; ` | Old stack:
[08:07:49.507] | : . ' , ; ` | List of 1
[08:07:49.507] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.507] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.507] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:49.507] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.507] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.507] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.507] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:49.507] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.507] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.507] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.507] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.510] | : . ' , ; ` | Not identical
[08:07:49.510] | : . ' , ; ` | all.equal() for future ...
[08:07:49.510] | : . ' , ; ` | : List of 2
[08:07:49.510] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.510] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.510] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:49.510] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.510] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.510] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.510] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.510] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.510] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.510] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.510] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.510] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.510] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.510] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.510] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.510] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.510] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.515] | : . ' , ; ` | all.equal() for future ... done
[08:07:49.516] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:49.516] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:49.516] | : . ' , ; ` List of future strategies:
[08:07:49.516] | : . ' , ; ` 1. sequential:
[08:07:49.516] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:49.516] | : . ' , ; `    - tweaked: FALSE
[08:07:49.516] | : . ' , ; `    - call: plan(sequential)
[08:07:49.516] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.516] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.517] | : . ' , assign_globals() ...
[08:07:49.517] | : . ' , List of 1
[08:07:49.517] | : . ' ,  $ a: num 1
[08:07:49.517] | : . ' ,  - attr(*, "where")=List of 1
[08:07:49.517] | : . ' ,   ..$ a:<environment: R_GlobalEnv> 
[08:07:49.517] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:49.517] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:07:49.517] | : . ' ,  - attr(*, "total_size")= num NA
[08:07:49.517] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:07:49.519] | : . ' , - copied ‘a’ to environment
[08:07:49.519] | : . ' , assign_globals() ... done
[08:07:49.521] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.521] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.521] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.521] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:49.521] | : . ' , ; ` | : New stack:
[08:07:49.521] | : . ' , ; ` | : List of 1
[08:07:49.521] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.521] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.521] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.521] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.521] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.521] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.521] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.521] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.521] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.521] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.521] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.524] | : . ' , ; ` | : Old stack:
[08:07:49.524] | : . ' , ; ` | : List of 1
[08:07:49.524] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.524] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.524] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.524] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.524] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.524] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.524] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.524] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.524] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.524] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.524] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.527] | : . ' , ; ` | : Identical
[08:07:49.527] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:49.527] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:49.528] | : . ' , ; ` | List of future strategies:
[08:07:49.528] | : . ' , ; ` | 1. sequential:
[08:07:49.528] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:49.528] | : . ' , ; ` |    - tweaked: FALSE
[08:07:49.528] | : . ' , ; ` |    - call: plan(sequential)
[08:07:49.528] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.528] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.528] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.528] | : . ' , SequentialFuture started (and completed)
[08:07:49.529] | : . ' , signalConditions() ...
[08:07:49.529] | : . ' , ; include = ‘immediateCondition’
[08:07:49.529] | : . ' , ; exclude = 
[08:07:49.529] | : . ' , ; resignal = FALSE
[08:07:49.529] | : . ' , ; Number of conditions: 6
[08:07:49.529] | : . ' , ;  int 6
[08:07:49.529] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.530] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.530] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.530] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.530] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.530] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.530] | : . ' , signalConditions() ... done
[08:07:49.530] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:49.530] | : . Launching futures ... done
[08:07:49.530] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:49.530] | : Using SequentialFutureBackend ... done
[08:07:49.531] | run() for ‘Future’ (<unnamed-5>) ... done
[08:07:49.531] future(..., label = NULL) ... done
[08:07:49.531] value() for SequentialFuture (<unnamed-5>) ...
[08:07:49.531] | signalConditions() ...
[08:07:49.531] | : include = ‘immediateCondition’
[08:07:49.531] | : exclude = 
[08:07:49.531] | : resignal = FALSE
[08:07:49.531] | : Number of conditions: 6
[08:07:49.531] | :  int 6
[08:07:49.532] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.532] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.532] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.532] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.532] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.532] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.532] | signalConditions() ... done
[08:07:49.532] | relay stdout ...
[08:07:49.533] | relay stdout ... done
[08:07:49.533] | check for misuse ...
[08:07:49.533] | check for misuse ... done
[08:07:49.533] | relay conditions ...
[08:07:49.533] | : Future state: ‘finished’
[08:07:49.533] | : signalConditions() ...
[08:07:49.533] | : . include = ‘condition’
[08:07:49.533] | : . exclude = ‘immediateCondition’
[08:07:49.533] | : . resignal = TRUE
[08:07:49.533] | : . Number of conditions: 6
[08:07:49.534] | : .  int 6
[08:07:49.535] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.535] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.502] | : . ' , attachPackages() ...
[08:07:49.535] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.535] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.502] | : . ' , ; packages: [n=1] ‘future’
[08:07:49.535] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.535] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.503] | : . ' , attachPackages() ... done
[08:07:49.536] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.536] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.503] | : . ' , attachPackages() ...
[08:07:49.536] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.536] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.503] | : . ' , ; packages: [n=0] 
[08:07:49.536] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.536] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.503] | : . ' , attachPackages() ... done
[08:07:49.536] | : signalConditions() ... done
[08:07:49.536] | relay conditions ... done
[08:07:49.536] value() for SequentialFuture (<unnamed-5>) ... done
[08:07:49.537] future(..., label = NULL) ...
[08:07:49.537] | lazy: FALSE
[08:07:49.537] | stdout: TRUE
[08:07:49.537] | conditions: [n=1] ‘condition’
[08:07:49.537] | gc: FALSE
[08:07:49.537] | earlySignal: FALSE
[08:07:49.537] | getGlobalsAndPackages() ...
[08:07:49.537] | : Searching for globals ...
[08:07:49.542] | : . globals found: [3] ‘{’, ‘*’, ‘a’
[08:07:49.542] | : Searching for globals ... done
[08:07:49.542] | : Resolving globals: FALSE
[08:07:49.542] | : Search for packages associated with the globals ...
[08:07:49.543] | : . Packages associated with globals: [1] ‘base’
[08:07:49.543] | : . Packages: [1] ‘base’
[08:07:49.543] | : Search for packages associated with the globals ... done
[08:07:49.543] | : Packages after dropping 'base': [0] 
[08:07:49.543] | : globals: [1] ‘a’
[08:07:49.543] | : packages: [0] 
[08:07:49.543] | getGlobalsAndPackages() ... done
[08:07:49.544] | run() for ‘Future’ (<unnamed-6>) ...
[08:07:49.544] | : state: ‘created’
[08:07:49.544] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.544] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.544] | : Using SequentialFutureBackend ...
[08:07:49.544] | : . Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:07:49.544] | : . Launching futures ...
[08:07:49.544] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:49.544] | : . ' , getFutureData() ...
[08:07:49.545] | : . ' , ; getFutureCore() ...
[08:07:49.545] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:49.545] | : . ' , ; getFutureCore() ... done
[08:07:49.545] | : . ' , ; getFutureCapture() ...
[08:07:49.545] | : . ' , ; getFutureCapture() ... done
[08:07:49.545] | : . ' , ; getFutureContext() ...
[08:07:49.545] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.545] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:49.545] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.545] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:49.546] | : . ' , ; getFutureContext() ... done
[08:07:49.546] | : . ' , getFutureData() ... done
[08:07:49.547] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.547] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:49.547] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.547] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.547] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.548] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:49.548] | : . ' , ; ` | New stack:
[08:07:49.548] | : . ' , ; ` | List of 1
[08:07:49.548] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.548] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.548] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:49.548] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.548] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.548] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.548] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.548] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.550] | : . ' , ; ` | Old stack:
[08:07:49.550] | : . ' , ; ` | List of 1
[08:07:49.550] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.550] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.550] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:49.550] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.550] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.550] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.550] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:49.550] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.550] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.550] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.550] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.554] | : . ' , ; ` | Not identical
[08:07:49.554] | : . ' , ; ` | all.equal() for future ...
[08:07:49.555] | : . ' , ; ` | : List of 2
[08:07:49.555] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.555] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.555] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:49.555] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.555] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.555] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.555] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.555] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.555] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.555] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.555] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.555] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.555] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.555] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.555] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.555] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.555] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.559] | : . ' , ; ` | all.equal() for future ... done
[08:07:49.560] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:49.560] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:49.560] | : . ' , ; ` List of future strategies:
[08:07:49.560] | : . ' , ; ` 1. sequential:
[08:07:49.560] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:49.560] | : . ' , ; `    - tweaked: FALSE
[08:07:49.560] | : . ' , ; `    - call: plan(sequential)
[08:07:49.560] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.560] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.560] | : . ' , assign_globals() ...
[08:07:49.561] | : . ' , List of 1
[08:07:49.561] | : . ' ,  $ a: num 1
[08:07:49.561] | : . ' ,  - attr(*, "where")=List of 1
[08:07:49.561] | : . ' ,   ..$ a:<environment: R_GlobalEnv> 
[08:07:49.561] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:49.561] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:07:49.561] | : . ' ,  - attr(*, "total_size")= num NA
[08:07:49.561] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:07:49.563] | : . ' , - copied ‘a’ to environment
[08:07:49.563] | : . ' , assign_globals() ... done
[08:07:49.564] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.565] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.565] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.565] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:49.565] | : . ' , ; ` | : New stack:
[08:07:49.565] | : . ' , ; ` | : List of 1
[08:07:49.565] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.565] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.565] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.565] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.565] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.565] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.565] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.565] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.565] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.565] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.565] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.568] | : . ' , ; ` | : Old stack:
[08:07:49.568] | : . ' , ; ` | : List of 1
[08:07:49.568] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.568] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.568] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.568] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.568] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.568] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.568] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.568] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.568] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.568] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.568] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.572] | : . ' , ; ` | : Identical
[08:07:49.572] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:49.572] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:49.572] | : . ' , ; ` | List of future strategies:
[08:07:49.572] | : . ' , ; ` | 1. sequential:
[08:07:49.572] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:49.572] | : . ' , ; ` |    - tweaked: FALSE
[08:07:49.572] | : . ' , ; ` |    - call: plan(sequential)
[08:07:49.573] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.573] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.573] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.573] | : . ' , SequentialFuture started (and completed)
[08:07:49.574] | : . ' , signalConditions() ...
[08:07:49.574] | : . ' , ; include = ‘immediateCondition’
[08:07:49.574] | : . ' , ; exclude = 
[08:07:49.574] | : . ' , ; resignal = FALSE
[08:07:49.574] | : . ' , ; Number of conditions: 6
[08:07:49.574] | : . ' , ;  int 6
[08:07:49.574] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.575] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.575] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.575] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.575] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.575] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.575] | : . ' , signalConditions() ... done
[08:07:49.575] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:49.575] | : . Launching futures ... done
[08:07:49.575] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:49.575] | : Using SequentialFutureBackend ... done
[08:07:49.576] | run() for ‘Future’ (<unnamed-6>) ... done
[08:07:49.576] future(..., label = NULL) ... done
[08:07:49.576] value() for SequentialFuture (<unnamed-6>) ...
[08:07:49.576] | signalConditions() ...
[08:07:49.576] | : include = ‘immediateCondition’
[08:07:49.576] | : exclude = 
[08:07:49.576] | : resignal = FALSE
[08:07:49.576] | : Number of conditions: 6
[08:07:49.576] | :  int 6
[08:07:49.577] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.577] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.577] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.577] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.577] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.577] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.577] | signalConditions() ... done
[08:07:49.577] | relay stdout ...
[08:07:49.578] | relay stdout ... done
[08:07:49.578] | check for misuse ...
[08:07:49.578] | check for misuse ... done
[08:07:49.578] | relay conditions ...
[08:07:49.578] | : Future state: ‘finished’
[08:07:49.578] | : signalConditions() ...
[08:07:49.578] | : . include = ‘condition’
[08:07:49.578] | : . exclude = ‘immediateCondition’
[08:07:49.578] | : . resignal = TRUE
[08:07:49.578] | : . Number of conditions: 6
[08:07:49.579] | : .  int 6
[08:07:49.579] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.579] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.546] | : . ' , attachPackages() ...
[08:07:49.579] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.579] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.546] | : . ' , ; packages: [n=1] ‘future’
[08:07:49.579] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.579] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.546] | : . ' , attachPackages() ... done
[08:07:49.580] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.580] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.546] | : . ' , attachPackages() ...
[08:07:49.580] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.580] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.546] | : . ' , ; packages: [n=0] 
[08:07:49.580] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.580] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.547] | : . ' , attachPackages() ... done
[08:07:49.580] | : signalConditions() ... done
[08:07:49.580] | relay conditions ... done
[08:07:49.581] value() for SequentialFuture (<unnamed-6>) ... done
[08:07:49.581] future(..., label = NULL) ...
[08:07:49.581] | lazy: TRUE
[08:07:49.581] | stdout: TRUE
[08:07:49.581] | conditions: [n=1] ‘condition’
[08:07:49.581] | gc: FALSE
[08:07:49.581] | earlySignal: FALSE
[08:07:49.581] | getGlobalsAndPackages() ...
[08:07:49.581] | : Searching for globals ...
[08:07:49.586] | : . globals found: [3] ‘{’, ‘*’, ‘a’
[08:07:49.586] | : Searching for globals ... done
[08:07:49.586] | : Resolving globals: FALSE
[08:07:49.587] | : Search for packages associated with the globals ...
[08:07:49.587] | : . Packages associated with globals: [1] ‘base’
[08:07:49.587] | : . Packages: [1] ‘base’
[08:07:49.587] | : Search for packages associated with the globals ... done
[08:07:49.588] | : Packages after dropping 'base': [0] 
[08:07:49.588] | : globals: [1] ‘a’
[08:07:49.588] | : packages: [0] 
[08:07:49.588] | getGlobalsAndPackages() ... done
[08:07:49.589] future(..., label = NULL) ... done
[08:07:49.589] value() for Future (<unnamed-7>) ...
[08:07:49.589] | run() for ‘Future’ (<unnamed-7>) ...
[08:07:49.589] | : state: ‘created’
[08:07:49.589] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.589] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.589] | : Using SequentialFutureBackend ...
[08:07:49.589] | : . Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:07:49.589] | : . Launching futures ...
[08:07:49.590] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:49.590] | : . ' , getFutureData() ...
[08:07:49.590] | : . ' , ; getFutureCore() ...
[08:07:49.590] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:49.590] | : . ' , ; getFutureCore() ... done
[08:07:49.590] | : . ' , ; getFutureCapture() ...
[08:07:49.590] | : . ' , ; getFutureCapture() ... done
[08:07:49.590] | : . ' , ; getFutureContext() ...
[08:07:49.590] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.591] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:49.591] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.591] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:49.591] | : . ' , ; getFutureContext() ... done
[08:07:49.591] | : . ' , getFutureData() ... done
[08:07:49.592] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.592] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:49.592] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.593] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.593] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.593] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:49.593] | : . ' , ; ` | New stack:
[08:07:49.593] | : . ' , ; ` | List of 1
[08:07:49.593] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.593] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.593] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:49.593] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.593] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.593] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.593] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.593] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.595] | : . ' , ; ` | Old stack:
[08:07:49.596] | : . ' , ; ` | List of 1
[08:07:49.596] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.596] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.596] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:49.596] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.596] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.596] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.596] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:49.596] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.596] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.596] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.596] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.599] | : . ' , ; ` | Not identical
[08:07:49.599] | : . ' , ; ` | all.equal() for future ...
[08:07:49.599] | : . ' , ; ` | : List of 2
[08:07:49.599] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.599] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.599] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:49.599] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.599] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.599] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.599] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.599] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.599] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.599] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.599] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.599] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.599] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.599] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.599] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.599] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.599] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.604] | : . ' , ; ` | all.equal() for future ... done
[08:07:49.604] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:49.604] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:49.604] | : . ' , ; ` List of future strategies:
[08:07:49.604] | : . ' , ; ` 1. sequential:
[08:07:49.604] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:49.604] | : . ' , ; `    - tweaked: FALSE
[08:07:49.604] | : . ' , ; `    - call: plan(sequential)
[08:07:49.605] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.605] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.605] | : . ' , assign_globals() ...
[08:07:49.605] | : . ' , List of 1
[08:07:49.605] | : . ' ,  $ a: num 1
[08:07:49.605] | : . ' ,  - attr(*, "where")=List of 1
[08:07:49.605] | : . ' ,   ..$ a:<environment: R_GlobalEnv> 
[08:07:49.605] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:49.605] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:07:49.605] | : . ' ,  - attr(*, "total_size")= num NA
[08:07:49.605] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:07:49.609] | : . ' , - copied ‘a’ to environment
[08:07:49.609] | : . ' , assign_globals() ... done
[08:07:49.610] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.610] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.610] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.610] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:49.611] | : . ' , ; ` | : New stack:
[08:07:49.611] | : . ' , ; ` | : List of 1
[08:07:49.611] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.611] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.611] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.611] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.611] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.611] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.611] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.611] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.611] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.611] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.611] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.614] | : . ' , ; ` | : Old stack:
[08:07:49.614] | : . ' , ; ` | : List of 1
[08:07:49.614] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.614] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.614] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.614] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.614] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.614] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.614] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.614] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.614] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.614] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.614] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.617] | : . ' , ; ` | : Identical
[08:07:49.617] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:49.617] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:49.617] | : . ' , ; ` | List of future strategies:
[08:07:49.617] | : . ' , ; ` | 1. sequential:
[08:07:49.617] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:49.617] | : . ' , ; ` |    - tweaked: FALSE
[08:07:49.617] | : . ' , ; ` |    - call: plan(sequential)
[08:07:49.618] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.618] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.618] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.618] | : . ' , SequentialFuture started (and completed)
[08:07:49.618] | : . ' , signalConditions() ...
[08:07:49.618] | : . ' , ; include = ‘immediateCondition’
[08:07:49.618] | : . ' , ; exclude = 
[08:07:49.619] | : . ' , ; resignal = FALSE
[08:07:49.619] | : . ' , ; Number of conditions: 6
[08:07:49.619] | : . ' , ;  int 6
[08:07:49.619] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.619] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.619] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.619] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.619] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.620] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.620] | : . ' , signalConditions() ... done
[08:07:49.620] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:49.620] | : . Launching futures ... done
[08:07:49.620] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:49.620] | : Using SequentialFutureBackend ... done
[08:07:49.620] | run() for ‘Future’ (<unnamed-7>) ... done
[08:07:49.620] | signalConditions() ...
[08:07:49.620] | : include = ‘immediateCondition’
[08:07:49.621] | : exclude = 
[08:07:49.621] | : resignal = FALSE
[08:07:49.621] | : Number of conditions: 6
[08:07:49.621] | :  int 6
[08:07:49.621] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.621] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.621] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.622] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.622] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.622] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.622] | signalConditions() ... done
[08:07:49.622] | relay stdout ...
[08:07:49.622] | relay stdout ... done
[08:07:49.622] | check for misuse ...
[08:07:49.622] | check for misuse ... done
[08:07:49.622] | relay conditions ...
[08:07:49.622] | : Future state: ‘finished’
[08:07:49.623] | : signalConditions() ...
[08:07:49.623] | : . include = ‘condition’
[08:07:49.623] | : . exclude = ‘immediateCondition’
[08:07:49.623] | : . resignal = TRUE
[08:07:49.623] | : . Number of conditions: 6
[08:07:49.623] | : .  int 6
[08:07:49.623] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.624] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.591] | : . ' , attachPackages() ...
[08:07:49.624] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.624] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.591] | : . ' , ; packages: [n=1] ‘future’
[08:07:49.624] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.650] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.591] | : . ' , attachPackages() ... done
[08:07:49.651] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.651] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.592] | : . ' , attachPackages() ...
[08:07:49.651] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.651] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.592] | : . ' , ; packages: [n=0] 
[08:07:49.651] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.651] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.592] | : . ' , attachPackages() ... done
[08:07:49.651] | : signalConditions() ... done
[08:07:49.652] | relay conditions ... done
[08:07:49.652] value() for Future (<unnamed-7>) ... done
[08:07:49.652] future(..., label = NULL) ...
[08:07:49.652] | lazy: TRUE
[08:07:49.652] | stdout: TRUE
[08:07:49.652] | conditions: [n=1] ‘condition’
[08:07:49.652] | gc: FALSE
[08:07:49.652] | earlySignal: FALSE
[08:07:49.652] | getGlobalsAndPackages() ...
[08:07:49.653] | : Searching for globals ...
[08:07:49.658] | : . globals found: [3] ‘{’, ‘*’, ‘a’
[08:07:49.658] | : Searching for globals ... done
[08:07:49.658] | : Resolving globals: FALSE
[08:07:49.658] | : Search for packages associated with the globals ...
[08:07:49.658] | : . Packages associated with globals: [1] ‘base’
[08:07:49.659] | : . Packages: [1] ‘base’
[08:07:49.659] | : Search for packages associated with the globals ... done
[08:07:49.659] | : Packages after dropping 'base': [0] 
[08:07:49.659] | : globals: [1] ‘a’
[08:07:49.659] | : packages: [0] 
[08:07:49.659] | getGlobalsAndPackages() ... done
[08:07:49.659] future(..., label = NULL) ... done
[08:07:49.659] value() for Future (<unnamed-8>) ...
[08:07:49.660] | run() for ‘Future’ (<unnamed-8>) ...
[08:07:49.660] | : state: ‘created’
[08:07:49.660] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.660] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.660] | : Using SequentialFutureBackend ...
[08:07:49.660] | : . Number of futures since start: 7 (7 created, 7 launched, 7 finished)
[08:07:49.660] | : . Launching futures ...
[08:07:49.660] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:49.660] | : . ' , getFutureData() ...
[08:07:49.661] | : . ' , ; getFutureCore() ...
[08:07:49.661] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:49.661] | : . ' , ; getFutureCore() ... done
[08:07:49.661] | : . ' , ; getFutureCapture() ...
[08:07:49.661] | : . ' , ; getFutureCapture() ... done
[08:07:49.661] | : . ' , ; getFutureContext() ...
[08:07:49.661] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.661] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:49.661] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.661] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:49.662] | : . ' , ; getFutureContext() ... done
[08:07:49.662] | : . ' , getFutureData() ... done
[08:07:49.663] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.663] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:49.663] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.663] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.664] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.664] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:49.664] | : . ' , ; ` | New stack:
[08:07:49.664] | : . ' , ; ` | List of 1
[08:07:49.664] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.664] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.664] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:49.664] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.664] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.664] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.664] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.664] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.666] | : . ' , ; ` | Old stack:
[08:07:49.667] | : . ' , ; ` | List of 1
[08:07:49.667] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.667] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.667] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:49.667] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.667] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.667] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.667] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:49.667] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.667] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.667] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.667] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.670] | : . ' , ; ` | Not identical
[08:07:49.670] | : . ' , ; ` | all.equal() for future ...
[08:07:49.670] | : . ' , ; ` | : List of 2
[08:07:49.670] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.670] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.670] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:49.670] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.670] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.670] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.670] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.670] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.670] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.670] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.670] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.670] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.670] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.670] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.670] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.670] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.670] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.676] | : . ' , ; ` | all.equal() for future ... done
[08:07:49.676] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:49.676] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:49.676] | : . ' , ; ` List of future strategies:
[08:07:49.676] | : . ' , ; ` 1. sequential:
[08:07:49.676] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:49.676] | : . ' , ; `    - tweaked: FALSE
[08:07:49.676] | : . ' , ; `    - call: plan(sequential)
[08:07:49.677] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.677] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.677] | : . ' , assign_globals() ...
[08:07:49.677] | : . ' , List of 1
[08:07:49.677] | : . ' ,  $ a: num 1
[08:07:49.677] | : . ' ,  - attr(*, "where")=List of 1
[08:07:49.677] | : . ' ,   ..$ a:<environment: R_GlobalEnv> 
[08:07:49.677] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:49.677] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:07:49.677] | : . ' ,  - attr(*, "total_size")= num NA
[08:07:49.677] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:07:49.680] | : . ' , - copied ‘a’ to environment
[08:07:49.680] | : . ' , assign_globals() ... done
[08:07:49.681] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.681] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.681] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.682] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:49.682] | : . ' , ; ` | : New stack:
[08:07:49.682] | : . ' , ; ` | : List of 1
[08:07:49.682] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.682] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.682] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.682] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.682] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.682] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.682] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.682] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.682] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.682] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.682] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.685] | : . ' , ; ` | : Old stack:
[08:07:49.685] | : . ' , ; ` | : List of 1
[08:07:49.685] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.685] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.685] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.685] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.685] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.685] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.685] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:49.685] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.685] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.685] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.685] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.688] | : . ' , ; ` | : Identical
[08:07:49.688] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:49.688] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:49.688] | : . ' , ; ` | List of future strategies:
[08:07:49.688] | : . ' , ; ` | 1. sequential:
[08:07:49.688] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:49.688] | : . ' , ; ` |    - tweaked: FALSE
[08:07:49.688] | : . ' , ; ` |    - call: plan(sequential)
[08:07:49.689] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.689] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.689] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.689] | : . ' , SequentialFuture started (and completed)
[08:07:49.689] | : . ' , signalConditions() ...
[08:07:49.690] | : . ' , ; include = ‘immediateCondition’
[08:07:49.690] | : . ' , ; exclude = 
[08:07:49.690] | : . ' , ; resignal = FALSE
[08:07:49.690] | : . ' , ; Number of conditions: 6
[08:07:49.690] | : . ' , ;  int 6
[08:07:49.690] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.690] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.691] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.691] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.691] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.691] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.691] | : . ' , signalConditions() ... done
[08:07:49.691] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:49.691] | : . Launching futures ... done
[08:07:49.691] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:49.692] | : Using SequentialFutureBackend ... done
[08:07:49.692] | run() for ‘Future’ (<unnamed-8>) ... done
[08:07:49.693] | signalConditions() ...
[08:07:49.693] | : include = ‘immediateCondition’
[08:07:49.693] | : exclude = 
[08:07:49.693] | : resignal = FALSE
[08:07:49.693] | : Number of conditions: 6
[08:07:49.693] | :  int 6
[08:07:49.694] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.694] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.694] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.694] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.694] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.694] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.694] | signalConditions() ... done
[08:07:49.694] | relay stdout ...
[08:07:49.694] | relay stdout ... done
[08:07:49.695] | check for misuse ...
[08:07:49.695] | check for misuse ... done
[08:07:49.695] | relay conditions ...
[08:07:49.695] | : Future state: ‘finished’
[08:07:49.695] | : signalConditions() ...
[08:07:49.695] | : . include = ‘condition’
[08:07:49.695] | : . exclude = ‘immediateCondition’
[08:07:49.695] | : . resignal = TRUE
[08:07:49.695] | : . Number of conditions: 6
[08:07:49.695] | : .  int 6
[08:07:49.696] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.696] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.662] | : . ' , attachPackages() ...
[08:07:49.696] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.696] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.662] | : . ' , ; packages: [n=1] ‘future’
[08:07:49.696] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.696] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.662] | : . ' , attachPackages() ... done
[08:07:49.697] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.697] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.662] | : . ' , attachPackages() ...
[08:07:49.697] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.697] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.662] | : . ' , ; packages: [n=0] 
[08:07:49.697] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.697] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.663] | : . ' , attachPackages() ... done
[08:07:49.697] | : signalConditions() ... done
[08:07:49.697] | relay conditions ... done
[08:07:49.697] value() for Future (<unnamed-8>) ... done
*** futureAssign() with ‘sequential’ futures ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** futureAssign() with ‘multicore’ futures ...
[08:07:49.698] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.698] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:07:49.698] | : all.equal() for FutureStrategyList ...
[08:07:49.698] | : . New stack:
[08:07:49.699] | : . List of 1
[08:07:49.699] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:49.699] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:49.699] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:49.699] | : .   ..- attr(*, "init")= logi TRUE
[08:07:49.699] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.699] | : .     ...)  
[08:07:49.699] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.699] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.699] | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:49.699] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.701] | : . Old stack:
[08:07:49.701] | : . List of 1
[08:07:49.701] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.701] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.701] | : .   ..- attr(*, "init")= chr "done"
[08:07:49.701] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.701] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.701] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.701] | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:49.701] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.701] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.701] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.701] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.704] | : . Not identical
[08:07:49.704] | : . all.equal() for future ...
[08:07:49.704] | : . ' List of 2
[08:07:49.704] | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:49.704] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:07:49.704] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:49.704] | : . '   ..- attr(*, "init")= logi TRUE
[08:07:49.704] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.704] | : . '     ...)  
[08:07:49.704] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.704] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.704] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:49.704] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.704] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.704] | : . '   ..- attr(*, "init")= chr "done"
[08:07:49.704] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.704] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.704] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.704] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:07:49.704] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971555eb8> 
[08:07:49.704] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.704] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.709] | : . ' Formals differ
[08:07:49.709] | : . all.equal() for future ... done
[08:07:49.709] | : . Future strategies differ at level 1
[08:07:49.709] | : all.equal() for FutureStrategyList ... done
[08:07:49.710] | : plan(): Setting new future backend stack:
[08:07:49.710] | : List of future strategies:
[08:07:49.710] | : 1. multicore:
[08:07:49.710] | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:49.710] | :    - tweaked: FALSE
[08:07:49.710] | :    - call: plan(strategy)
[08:07:49.710] | : List of 1
[08:07:49.710] | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:49.710] | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:49.710] | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:49.710] | :   ..- attr(*, "init")= logi TRUE
[08:07:49.710] | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.710] | :     ...)  
[08:07:49.710] | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.710] | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.710] | :   ..- attr(*, "call")= language plan(strategy)
[08:07:49.710] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.714] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:07:49.714] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.714] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:49.714] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.714] | : . Legacy shutdown of cluster workers ...
[08:07:49.714] | : . ' Stopping existing cluster ...
[08:07:49.714] | : . ' , No pre-existing cluster. Skipping
[08:07:49.715] | : . ' Stopping existing cluster ... done
[08:07:49.715] | : . Legacy shutdown of cluster workers ... done
[08:07:49.715] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:07:49.715] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:07:49.715] | : . function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:49.715] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:49.715] | : .  - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:49.715] | : .  - attr(*, "init")= logi TRUE
[08:07:49.715] | : .  - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.715] | : .     ...)  
[08:07:49.715] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.715] | : .  - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.715] | : .  - attr(*, "call")= language plan(strategy)
[08:07:49.717] | : . init: TRUE
[08:07:49.717] | : . makeFutureBackend(<multicore>) ...
[08:07:49.717] | : . ' Backend function: <‘NULL’>
[08:07:49.717] | : . ' Evaluator tweak arguments: [n=0]
[08:07:49.717] | : . '  list()
[08:07:49.718] | : . ' Evaluator formal arguments: [n=3]
[08:07:49.718] | : . '  list()
[08:07:49.718] | : . ' Backend factory arguments: [n=3]
[08:07:49.718] | : . ' Dotted pair list of 3
[08:07:49.718] | : . '  $ workers    : language availableCores(constraints = "multicore")
[08:07:49.718] | : . '  $ gc         : logi FALSE
[08:07:49.718] | : . '  $ earlySignal: logi FALSE
[08:07:49.721] | : . ' Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:49.721] | : . makeFutureBackend(<multicore>) ... done
[08:07:49.721] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:07:49.721] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.722] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.722] | : plan(): nbrOfWorkers() = 2
[08:07:49.722] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:07:49.722] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.722] future(..., label = NULL) ...
[08:07:49.722] | lazy: FALSE
[08:07:49.722] | stdout: TRUE
[08:07:49.722] | conditions: [n=1] ‘condition’
[08:07:49.722] | gc: FALSE
[08:07:49.722] | earlySignal: FALSE
[08:07:49.723] | getGlobalsAndPackages() ...
[08:07:49.723] | : Searching for globals ...
[08:07:49.725] | : . globals found: [1] ‘{’
[08:07:49.726] | : Searching for globals ... done
[08:07:49.726] | : Resolving globals: FALSE
[08:07:49.726] | : Search for packages associated with the globals ...
[08:07:49.726] | : . Packages associated with globals: [1] ‘base’
[08:07:49.726] | : . Packages: [1] ‘base’
[08:07:49.726] | : Search for packages associated with the globals ... done
[08:07:49.726] | : Packages after dropping 'base': [0] 
[08:07:49.727] | : globals: [0] 
[08:07:49.727] | : packages: [0] 
[08:07:49.727] | getGlobalsAndPackages() ... done
[08:07:49.727] | run() for ‘Future’ (<unnamed-9>) ...
[08:07:49.727] | : state: ‘created’
[08:07:49.727] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.727] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.727] | : Using MulticoreFutureBackend ...
[08:07:49.728] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:07:49.728] | : . Launching futures ...
[08:07:49.728] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:07:49.728] | : . ' , getFutureData() ...
[08:07:49.728] | : . ' , ; getFutureCore() ...
[08:07:49.728] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:49.728] | : . ' , ; getFutureCore() ... done
[08:07:49.728] | : . ' , ; getFutureCapture() ...
[08:07:49.729] | : . ' , ; getFutureCapture() ... done
[08:07:49.729] | : . ' , ; getFutureContext() ...
[08:07:49.729] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.729] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:49.729] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.729] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:49.729] | : . ' , ; getFutureContext() ... done
[08:07:49.730] | : . ' , getFutureData() ... done
[08:07:49.730] | : . ' , requestCore(..., workers = 2) ...
[08:07:49.730] | : . ' , requestCore(..., workers = 2) ... done
[08:07:49.733] | : . ' , MulticoreFuture started
[08:07:49.734] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:07:49.734] | : . Launching futures ... done
[08:07:49.734] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:49.734] | : Using MulticoreFutureBackend ... done
[08:07:49.735] | run() for ‘Future’ (<unnamed-9>) ... done
[08:07:49.735] future(..., label = NULL) ... done
[08:07:49.735] future(..., label = NULL) ...
[08:07:49.736] | lazy: FALSE
[08:07:49.736] | stdout: TRUE
[08:07:49.736] | conditions: [n=1] ‘condition’
[08:07:49.736] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.736] | gc: FALSE
[08:07:49.736] | earlySignal: FALSE
[08:07:49.736] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:49.737] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.737] | getGlobalsAndPackages() ...
[08:07:49.737] | : Searching for globals ...
[08:07:49.737] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.737] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.737] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:49.738] | : . ' , ; ` | New stack:
[08:07:49.738] | : . ' , ; ` | List of 1
[08:07:49.738] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.738] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.738] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:49.738] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.738] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.738] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.738] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.738] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.746] | : . ' , ; ` | Old stack:
[08:07:49.747] | : . globals found: [1] ‘{’
[08:07:49.747] | : Searching for globals ... done
[08:07:49.748] | : Resolving globals: FALSE
[08:07:49.748] | : Search for packages associated with the globals ...
[08:07:49.749] | : . Packages associated with globals: [1] ‘base’
[08:07:49.749] | : . Packages: [1] ‘base’
[08:07:49.749] | : Search for packages associated with the globals ... done
[08:07:49.750] | : Packages after dropping 'base': [0] 
[08:07:49.750] | : globals: [0] 
[08:07:49.750] | : packages: [0] 
[08:07:49.750] | getGlobalsAndPackages() ... done
[08:07:49.751] | run() for ‘Future’ (<unnamed-10>) ...
[08:07:49.751] | : state: ‘created’
[08:07:49.751] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.751] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.751] | : Using MulticoreFutureBackend ...
[08:07:49.752] | : . Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:07:49.752] | : . Launching futures ...
[08:07:49.752] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:07:49.752] | : . ' , getFutureData() ...
[08:07:49.752] | : . ' , ; getFutureCore() ...
[08:07:49.746] | : . ' , ; ` | List of 1
[08:07:49.746] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:49.746] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:49.746] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:49.746] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:49.746] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.746] | : . ' , ; ` |     ...)  
[08:07:49.746] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.746] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.746] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:49.746] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:49.746] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.746] | : . ' , ; ` |     ...)  
[08:07:49.746] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.746] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.753] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:49.753] | : . ' , ; ` | Not identical
[08:07:49.753] | : . ' , ; getFutureCore() ... done
[08:07:49.753] | : . ' , ; ` | all.equal() for future ...
[08:07:49.753] | : . ' , ; getFutureCapture() ...
[08:07:49.753] | : . ' , ; getFutureCapture() ... done
[08:07:49.753] | : . ' , ; getFutureContext() ...
[08:07:49.753] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.754] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:49.754] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.754] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:49.754] | : . ' , ; getFutureContext() ... done
[08:07:49.754] | : . ' , getFutureData() ... done
[08:07:49.754] | : . ' , requestCore(..., workers = 2) ...
[08:07:49.755] | : . ' , requestCore(..., workers = 2) ... done
[08:07:49.758] | : . ' , MulticoreFuture started
[08:07:49.759] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:07:49.759] | : . Launching futures ... done
[08:07:49.753] | : . ' , ; ` | : List of 2
[08:07:49.753] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.753] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.753] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:49.753] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.753] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.753] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.753] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.753] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:49.753] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:49.753] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:49.753] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.753] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.753] | : . ' , ; ` | :     ...)  
[08:07:49.753] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.753] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.753] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:49.753] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:49.753] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.753] | : . ' , ; ` | :     ...)  
[08:07:49.753] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.759] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:49.760] | : . ' , ; ` | : Formals differ
[08:07:49.760] | : Using MulticoreFutureBackend ... done
[08:07:49.761] | : . ' , ; ` | all.equal() for future ... done
[08:07:49.761] | : . ' , ; ` | Future strategies differ at level 1
[08:07:49.761] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:49.761] | run() for ‘Future’ (<unnamed-10>) ... done
[08:07:49.761] | : . ' , ; ` plan(): Setting new future backend stack:
[08:07:49.761] future(..., label = NULL) ... done
[08:07:49.761] | : . ' , ; ` List of future strategies:
[08:07:49.761] | : . ' , ; ` 1. sequential:
[08:07:49.761] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:49.761] | : . ' , ; `    - tweaked: FALSE
[08:07:49.761] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.762] value() for MulticoreFuture (<unnamed-9>) ...
[08:07:49.763] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.764] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:49.764] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.765] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.762] | : . ' , ; ` List of 1
[08:07:49.762] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.762] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.762] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:07:49.762] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.762] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.762] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.762] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.762] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.765] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.765] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:49.765] | result() for MulticoreFuture ...
[08:07:49.765] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:49.765] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:49.766] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.766] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:49.766] | : . ' , ; ` | New stack:
[08:07:49.766] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.766] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.766] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:07:49.766] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.766] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.766] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.766] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.768] | : . ' , ; ` | : init: TRUE
[08:07:49.769] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:07:49.769] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:07:49.769] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:07:49.769] | : . ' , ; ` | : .  list()
[08:07:49.769] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:07:49.769] | : . ' , ; ` | : .  list()
[08:07:49.770] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:07:49.770] | : . ' , ; ` | : . Dotted pair list of 2
[08:07:49.770] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:07:49.770] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:07:49.771] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:49.771] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:07:49.771] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:49.766] | : . ' , ; ` | List of 1
[08:07:49.766] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.766] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.766] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:49.766] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.766] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.766] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.766] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.766] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.771] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.771] | : . ' , ; ` | Old stack:
[08:07:49.771] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:07:49.771] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.772] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.774] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.775] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.775] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.776] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:49.776] | : . ' , ; ` | : New stack:
[08:07:49.771] | : . ' , ; ` | List of 1
[08:07:49.771] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:49.771] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:49.771] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:49.771] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:49.771] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.771] | : . ' , ; ` |     ...)  
[08:07:49.771] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.771] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.771] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:49.771] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:49.771] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.771] | : . ' , ; ` |     ...)  
[08:07:49.771] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.771] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.777] | : . ' , ; ` | Not identical
[08:07:49.777] | : . ' , ; ` | all.equal() for future ...
[08:07:49.776] | : . ' , ; ` | : List of 1
[08:07:49.776] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:49.776] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:49.776] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:49.776] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.776] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.776] | : . ' , ; ` | :     ...)  
[08:07:49.776] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.776] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.776] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:49.776] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:49.776] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.776] | : . ' , ; ` | :     ...)  
[08:07:49.776] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.776] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.779] | : . ' , ; ` | : Old stack:
[08:07:49.780] | : . ' , ; ` | : List of 1
[08:07:49.780] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.780] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.780] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.780] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.780] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.780] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.780] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.780] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971f762d0> 
[08:07:49.780] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.780] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.780] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.783] | : . ' , ; ` | : Not identical
[08:07:49.783] | : . ' , ; ` | : all.equal() for future ...
[08:07:49.777] | : . ' , ; ` | : List of 2
[08:07:49.777] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.777] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.777] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:49.777] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.777] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.777] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.777] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.777] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:49.777] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:49.777] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:49.777] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.777] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.777] | : . ' , ; ` | :     ...)  
[08:07:49.777] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.777] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.777] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:49.777] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:49.777] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.777] | : . ' , ; ` | :     ...)  
[08:07:49.777] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.785] | : . ' , ; ` | : Formals differ
[08:07:49.786] | : . ' , ; ` | all.equal() for future ... done
[08:07:49.786] | : . ' , ; ` | Future strategies differ at level 1
[08:07:49.786] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:49.786] | : . ' , ; ` plan(): Setting new future backend stack:
[08:07:49.786] | : . ' , ; ` List of future strategies:
[08:07:49.786] | : . ' , ; ` 1. sequential:
[08:07:49.786] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:49.786] | : . ' , ; `    - tweaked: FALSE
[08:07:49.786] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.783] | : . ' , ; ` | : . List of 2
[08:07:49.783] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:49.783] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:49.783] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:49.783] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:49.783] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.783] | : . ' , ; ` | : .     ...)  
[08:07:49.783] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.783] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.783] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:49.783] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:49.783] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.783] | : . ' , ; ` | : .     ...)  
[08:07:49.783] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.783] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.783] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.783] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:49.783] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.783] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.783] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.783] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.783] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971f762d0> 
[08:07:49.783] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.783] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.789] | : . ' , ; ` | : . Formals differ
[08:07:49.789] | : . ' , ; ` | : all.equal() for future ... done
[08:07:49.789] | : . ' , ; ` | : Future strategies differ at level 1
[08:07:49.789] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:49.789] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:07:49.789] | : . ' , ; ` | List of future strategies:
[08:07:49.789] | : . ' , ; ` | 1. multicore:
[08:07:49.789] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:49.789] | : . ' , ; ` |    - tweaked: FALSE
[08:07:49.789] | : . ' , ; ` |    - call: plan(strategy)
[08:07:49.790] | : . ' , ; ` | List of 1
[08:07:49.790] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:49.790] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:49.790] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:49.790] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:49.790] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.790] | : . ' , ; ` |     ...)  
[08:07:49.790] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.790] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.790] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:49.790] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:49.790] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.790] | : . ' , ; ` |     ...)  
[08:07:49.790] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.790] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.793] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:49.793] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:49.793] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.794] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.794] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:07:49.787] | : . ' , ; ` List of 1
[08:07:49.787] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.787] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.787] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:07:49.787] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.787] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.787] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.787] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.787] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.794] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.794] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.794] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:49.794] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.794] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:49.794] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.795] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:49.796] | : readImmediateCondition() ...
[08:07:49.796] | : . Path: ‘/tmp/Rtmp8LmjZ5/.future/immediateConditions’
[08:07:49.796] | : . Number of RDS files: 0
[08:07:49.796] | : . Returned conditions set:
[08:07:49.797] | : .  list()
[08:07:49.797] | : readImmediateCondition() ... done
[08:07:49.798] | : result() for MulticoreFuture ...
[08:07:49.798] | : result() for MulticoreFuture ... done
[08:07:49.799] | : signalConditions() ...
[08:07:49.799] | : . include = ‘immediateCondition’
[08:07:49.799] | : . exclude = 
[08:07:49.795] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.795] | : . [08:07:49.799] | : . resignal = FALSE
' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.795] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:07:49.795] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.795] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.795] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.795] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.799] | : . Number of conditions: 6
[08:07:49.799] | : . ' , ; ` | : init: TRUE
[08:07:49.800] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:07:49.800] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:07:49.800] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:07:49.800] | : .  int 6
[08:07:49.801] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.800] | : . ' , ; ` | : .  list()
[08:07:49.801] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:07:49.801] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.801] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.801] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.801] | : . ' , ; ` | : .  list()
[08:07:49.801] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:07:49.801] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.802] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.802] | : signalConditions() ... done
[08:07:49.802] | result() for MulticoreFuture ... done
[08:07:49.802] | result() for MulticoreFuture ...
[08:07:49.803] | result() for MulticoreFuture ... done
[08:07:49.803] | signalConditions() ...
[08:07:49.803] | : include = ‘immediateCondition’
[08:07:49.802] | : . ' , ; ` | : . Dotted pair list of 2
[08:07:49.802] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:07:49.802] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:07:49.803] | : exclude = 
[08:07:49.803] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:49.803] | : resignal = FALSE
[08:07:49.804] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:07:49.804] | : Number of conditions: 6
[08:07:49.804] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:49.804] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.804] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:07:49.804] | :  int 6
[08:07:49.804] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.805] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.805] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.805] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.805] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.805] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.805] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.806] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.806] | signalConditions() ... done
[08:07:49.806] | relay stdout ...
[08:07:49.806] | relay stdout ... done
[08:07:49.807] | check for misuse ...
[08:07:49.807] | check for misuse ... done
[08:07:49.807] | relay conditions ...
[08:07:49.807] | : Future state: ‘finished’
[08:07:49.808] | : result() for MulticoreFuture ...
[08:07:49.808] | : result() for MulticoreFuture ... done
[08:07:49.808] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.808] | : signalConditions() ...
[08:07:49.808] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.808] | : . include = ‘condition’
[08:07:49.808] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.808] | : . exclude = ‘immediateCondition’
[08:07:49.809] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:49.809] | : . resignal = TRUE
[08:07:49.809] | : . ' , ; ` | : New stack:
[08:07:49.809] | : . Number of conditions: 6
[08:07:49.809] | : .  int 6
[08:07:49.810] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.810] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.734] | : . ' , attachPackages() ...
[08:07:49.810] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.810] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.734] | : . ' , ; packages: [n=1] ‘future’
[08:07:49.811] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.811] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.735] | : . ' , attachPackages() ... done
[08:07:49.811] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.811] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.735] | : . ' , attachPackages() ...
[08:07:49.812] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.812] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.735] | : . ' , ; packages: [n=0] 
[08:07:49.812] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.812] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.735] | : . ' , attachPackages() ... done
[08:07:49.813] | : signalConditions() ... done
[08:07:49.813] | relay conditions ... done
[08:07:49.813] value() for MulticoreFuture (<unnamed-9>) ... done
u$a = 2
[08:07:49.813] value() for MulticoreFuture (<unnamed-10>) ...
[08:07:49.814] | result() for MulticoreFuture ...
[08:07:49.809] | : . ' , ; ` | : List of 1
[08:07:49.809] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:49.809] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:49.809] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:49.809] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.809] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.809] | : . ' , ; ` | :     ...)  
[08:07:49.809] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.809] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.809] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:49.809] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:49.809] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.809] | : . ' , ; ` | :     ...)  
[08:07:49.809] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.809] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.815] | : . ' , ; ` | : Old stack:
[08:07:49.815] | : . ' , ; ` | : List of 1
[08:07:49.815] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.815] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.815] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.815] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.815] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.815] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.815] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.815] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f79b9b0> 
[08:07:49.815] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.815] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.815] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.818] | : . ' , ; ` | : Not identical
[08:07:49.818] | : . ' , ; ` | : all.equal() for future ...
[08:07:49.818] | : . ' , ; ` | : . List of 2
[08:07:49.818] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:49.818] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:49.818] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:49.818] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:49.818] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.818] | : . ' , ; ` | : .     ...)  
[08:07:49.818] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.818] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.818] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:49.818] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:49.818] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.818] | : . ' , ; ` | : .     ...)  
[08:07:49.818] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.818] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.818] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.818] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:49.818] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.818] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.818] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.818] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.818] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f79b9b0> 
[08:07:49.818] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.818] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.826] | : . ' , ; ` | : . Formals differ
[08:07:49.826] | : . ' , ; ` | : all.equal() for future ... done
[08:07:49.826] | : . ' , ; ` | : Future strategies differ at level 1
[08:07:49.826] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:49.826] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:07:49.826] | : . ' , ; ` | List of future strategies:
[08:07:49.826] | : . ' , ; ` | 1. multicore:
[08:07:49.826] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:49.826] | : . ' , ; ` |    - tweaked: FALSE
[08:07:49.826] | : . ' , ; ` |    - call: plan(strategy)
[08:07:49.827] | : . ' , ; ` | List of 1
[08:07:49.827] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:49.827] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:49.827] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:49.827] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:49.827] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.827] | : . ' , ; ` |     ...)  
[08:07:49.827] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.827] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.827] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:49.827] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:49.827] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.827] | : . ' , ; ` |     ...)  
[08:07:49.827] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.827] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.830] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:49.830] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:49.830] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.830] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.830] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:07:49.831] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.831] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.831] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.831] | : readImmediateCondition() ...
[08:07:49.831] | : . Path: ‘/tmp/Rtmp8LmjZ5/.future/immediateConditions’
[08:07:49.832] | : . Number of RDS files: 0
[08:07:49.832] | : . Returned conditions set:
[08:07:49.832] | : .  list()
[08:07:49.833] | : readImmediateCondition() ... done
[08:07:49.833] | : result() for MulticoreFuture ...
[08:07:49.833] | : result() for MulticoreFuture ... done
[08:07:49.833] | : signalConditions() ...
[08:07:49.833] | : . include = ‘immediateCondition’
[08:07:49.834] | : . exclude = 
[08:07:49.834] | : . resignal = FALSE
[08:07:49.834] | : . Number of conditions: 6
[08:07:49.834] | : .  int 6
[08:07:49.835] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.835] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.835] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.835] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.836] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.836] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.836] | : signalConditions() ... done
[08:07:49.836] | result() for MulticoreFuture ... done
[08:07:49.836] | result() for MulticoreFuture ...
[08:07:49.836] | result() for MulticoreFuture ... done
[08:07:49.837] | signalConditions() ...
[08:07:49.837] | : include = ‘immediateCondition’
[08:07:49.837] | : exclude = 
[08:07:49.837] | : resignal = FALSE
[08:07:49.837] | : Number of conditions: 6
[08:07:49.837] | :  int 6
[08:07:49.838] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.838] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.838] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.838] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.838] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.838] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.839] | signalConditions() ... done
[08:07:49.839] | relay stdout ...
[08:07:49.839] | relay stdout ... done
[08:07:49.839] | check for misuse ...
[08:07:49.839] | check for misuse ... done
[08:07:49.839] | relay conditions ...
[08:07:49.841] | : Future state: ‘finished’
[08:07:49.841] | : result() for MulticoreFuture ...
[08:07:49.842] | : result() for MulticoreFuture ... done
[08:07:49.842] | : signalConditions() ...
[08:07:49.842] | : . include = ‘condition’
[08:07:49.842] | : . exclude = ‘immediateCondition’
[08:07:49.842] | : . resignal = TRUE
[08:07:49.842] | : . Number of conditions: 6
[08:07:49.843] | : .  int 6
[08:07:49.843] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.843] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.759] | : . ' , attachPackages() ...
[08:07:49.843] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.844] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.760] | : . ' , ; packages: [n=1] ‘future’
[08:07:49.844] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.844] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.760] | : . ' , attachPackages() ... done
[08:07:49.844] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.844] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.761] | : . ' , attachPackages() ...
[08:07:49.844] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.845] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.761] | : . ' , ; packages: [n=0] 
[08:07:49.845] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.845] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.762] | : . ' , attachPackages() ... done
[08:07:49.845] | : signalConditions() ... done
[08:07:49.845] | relay conditions ... done
[08:07:49.845] value() for MulticoreFuture (<unnamed-10>) ... done
v$a = 4
[08:07:49.846] future(..., label = NULL) ...
[08:07:49.846] | lazy: FALSE
[08:07:49.846] | stdout: TRUE
[08:07:49.846] | conditions: [n=1] ‘condition’
[08:07:49.846] | gc: FALSE
[08:07:49.846] | earlySignal: FALSE
[08:07:49.846] | getGlobalsAndPackages() ...
[08:07:49.846] | : Searching for globals ...
[08:07:49.852] | : . globals found: [3] ‘{’, ‘*’, ‘a’
[08:07:49.852] | : Searching for globals ... done
[08:07:49.853] | : Resolving globals: FALSE
[08:07:49.853] | : Search for packages associated with the globals ...
[08:07:49.853] | : . Packages associated with globals: [1] ‘base’
[08:07:49.853] | : . Packages: [1] ‘base’
[08:07:49.853] | : Search for packages associated with the globals ... done
[08:07:49.853] | : Packages after dropping 'base': [0] 
[08:07:49.854] | : globals: [1] ‘a’
[08:07:49.854] | : packages: [0] 
[08:07:49.854] | getGlobalsAndPackages() ... done
[08:07:49.854] | run() for ‘Future’ (<unnamed-11>) ...
[08:07:49.854] | : state: ‘created’
[08:07:49.854] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.854] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.855] | : Using MulticoreFutureBackend ...
[08:07:49.855] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:07:49.855] | : . Launching futures ...
[08:07:49.855] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:07:49.855] | : . ' , getFutureData() ...
[08:07:49.855] | : . ' , ; getFutureCore() ...
[08:07:49.855] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:49.855] | : . ' , ; getFutureCore() ... done
[08:07:49.855] | : . ' , ; getFutureCapture() ...
[08:07:49.856] | : . ' , ; getFutureCapture() ... done
[08:07:49.856] | : . ' , ; getFutureContext() ...
[08:07:49.856] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.856] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:49.856] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.856] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:49.856] | : . ' , ; getFutureContext() ... done
[08:07:49.856] | : . ' , getFutureData() ... done
[08:07:49.857] | : . ' , requestCore(..., workers = 2) ...
[08:07:49.857] | : . ' , requestCore(..., workers = 2) ... done
[08:07:49.859] | : . ' , MulticoreFuture started
[08:07:49.859] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:07:49.859] | : . Launching futures ... done
[08:07:49.860] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:49.860] | : Using MulticoreFutureBackend ... done
[08:07:49.860] | run() for ‘Future’ (<unnamed-11>) ... done
[08:07:49.860] future(..., label = NULL) ... done
[08:07:49.861] value() for MulticoreFuture (<unnamed-11>) ...
[08:07:49.861] | result() for MulticoreFuture ...
[08:07:49.862] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.862] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:49.863] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.863] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.863] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.864] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:49.864] | : . ' , ; ` | New stack:
[08:07:49.864] | : . ' , ; ` | List of 1
[08:07:49.864] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.864] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.864] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:49.864] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.864] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.864] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.864] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.864] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.869] | : . ' , ; ` | Old stack:
[08:07:49.869] | : . ' , ; ` | List of 1
[08:07:49.869] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:49.869] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:49.869] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:49.869] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:49.869] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.869] | : . ' , ; ` |     ...)  
[08:07:49.869] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.869] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.869] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:49.869] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:49.869] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.869] | : . ' , ; ` |     ...)  
[08:07:49.869] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.869] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.879] | : . ' , ; ` | Not identical
[08:07:49.879] | : . ' , ; ` | all.equal() for future ...
[08:07:49.879] | : . ' , ; ` | : List of 2
[08:07:49.879] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.879] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.879] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:49.879] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.879] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.879] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.879] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.879] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:49.879] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:49.879] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:49.879] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.879] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.879] | : . ' , ; ` | :     ...)  
[08:07:49.879] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.879] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.879] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:49.879] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:49.879] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.879] | : . ' , ; ` | :     ...)  
[08:07:49.879] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.887] | : . ' , ; ` | : Formals differ
[08:07:49.888] | : . ' , ; ` | all.equal() for future ... done
[08:07:49.888] | : . ' , ; ` | Future strategies differ at level 1
[08:07:49.888] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:49.888] | : . ' , ; ` plan(): Setting new future backend stack:
[08:07:49.888] | : . ' , ; ` List of future strategies:
[08:07:49.888] | : . ' , ; ` 1. sequential:
[08:07:49.888] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:49.888] | : . ' , ; `    - tweaked: FALSE
[08:07:49.888] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.889] | : . ' , ; ` List of 1
[08:07:49.889] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.889] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.889] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:07:49.889] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.889] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.889] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.889] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.889] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.892] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:49.892] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:49.893] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.893] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:49.893] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.893] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.893] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:07:49.893] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.893] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.893] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.893] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.895] | : . ' , ; ` | : init: TRUE
[08:07:49.896] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:07:49.896] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:07:49.896] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:07:49.896] | : . ' , ; ` | : .  list()
[08:07:49.896] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:07:49.896] | : . ' , ; ` | : .  list()
[08:07:49.897] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:07:49.897] | : . ' , ; ` | : . Dotted pair list of 2
[08:07:49.897] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:07:49.897] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:07:49.898] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:49.898] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:07:49.898] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:49.898] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.898] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:07:49.899] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.899] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.899] | : . ' , assign_globals() ...
[08:07:49.899] | : . ' , List of 1
[08:07:49.899] | : . ' ,  $ a: num 1
[08:07:49.899] | : . ' ,  - attr(*, "where")=List of 1
[08:07:49.899] | : . ' ,   ..$ a:<environment: R_GlobalEnv> 
[08:07:49.899] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:49.899] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:07:49.899] | : . ' ,  - attr(*, "total_size")= num NA
[08:07:49.899] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:07:49.903] | : . ' , - copied ‘a’ to environment
[08:07:49.903] | : . ' , assign_globals() ... done
[08:07:49.905] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.906] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.906] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.906] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:49.906] | : . ' , ; ` | : New stack:
[08:07:49.906] | : . ' , ; ` | : List of 1
[08:07:49.906] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:49.906] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:49.906] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:49.906] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.906] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.906] | : . ' , ; ` | :     ...)  
[08:07:49.906] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.906] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.906] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:49.906] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:49.906] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.906] | : . ' , ; ` | :     ...)  
[08:07:49.906] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.906] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.909] | : . ' , ; ` | : Old stack:
[08:07:49.910] | : . ' , ; ` | : List of 1
[08:07:49.910] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.910] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.910] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.910] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.910] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.910] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.910] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.910] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971f11798> 
[08:07:49.910] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.910] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.910] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.913] | : . ' , ; ` | : Not identical
[08:07:49.913] | : . ' , ; ` | : all.equal() for future ...
[08:07:49.913] | : . ' , ; ` | : . List of 2
[08:07:49.913] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:49.913] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:49.913] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:49.913] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:49.913] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.913] | : . ' , ; ` | : .     ...)  
[08:07:49.913] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.913] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.913] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:49.913] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:49.913] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.913] | : . ' , ; ` | : .     ...)  
[08:07:49.913] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.913] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.913] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.913] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:49.913] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.913] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.913] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.913] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.913] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971f11798> 
[08:07:49.913] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.913] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.918] | : . ' , ; ` | : . Formals differ
[08:07:49.919] | : . ' , ; ` | : all.equal() for future ... done
[08:07:49.919] | : . ' , ; ` | : Future strategies differ at level 1
[08:07:49.919] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:49.919] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:07:49.919] | : . ' , ; ` | List of future strategies:
[08:07:49.919] | : . ' , ; ` | 1. multicore:
[08:07:49.919] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:49.919] | : . ' , ; ` |    - tweaked: FALSE
[08:07:49.919] | : . ' , ; ` |    - call: plan(strategy)
[08:07:49.919] | : . ' , ; ` | List of 1
[08:07:49.919] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:49.919] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:49.919] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:49.919] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:49.919] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.919] | : . ' , ; ` |     ...)  
[08:07:49.919] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.919] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.919] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:49.919] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:49.919] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.919] | : . ' , ; ` |     ...)  
[08:07:49.919] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.919] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.924] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:49.924] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:49.924] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.924] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.924] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:07:49.924] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.924] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.924] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.925] | : readImmediateCondition() ...
[08:07:49.925] | : . Path: ‘/tmp/Rtmp8LmjZ5/.future/immediateConditions’
[08:07:49.925] | : . Number of RDS files: 0
[08:07:49.926] | : . Returned conditions set:
[08:07:49.926] | : .  list()
[08:07:49.926] | : readImmediateCondition() ... done
[08:07:49.927] | : result() for MulticoreFuture ...
[08:07:49.927] | : result() for MulticoreFuture ... done
[08:07:49.927] | : signalConditions() ...
[08:07:49.927] | : . include = ‘immediateCondition’
[08:07:49.927] | : . exclude = 
[08:07:49.927] | : . resignal = FALSE
[08:07:49.928] | : . Number of conditions: 6
[08:07:49.928] | : .  int 6
[08:07:49.928] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.928] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.929] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.929] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.929] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.929] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.929] | : signalConditions() ... done
[08:07:49.929] | result() for MulticoreFuture ... done
[08:07:49.929] | result() for MulticoreFuture ...
[08:07:49.930] | result() for MulticoreFuture ... done
[08:07:49.930] | signalConditions() ...
[08:07:49.930] | : include = ‘immediateCondition’
[08:07:49.930] | : exclude = 
[08:07:49.930] | : resignal = FALSE
[08:07:49.930] | : Number of conditions: 6
[08:07:49.930] | :  int 6
[08:07:49.931] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.931] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.931] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.933] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.933] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.934] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.934] | signalConditions() ... done
[08:07:49.934] | relay stdout ...
[08:07:49.934] | relay stdout ... done
[08:07:49.935] | check for misuse ...
[08:07:49.935] | check for misuse ... done
[08:07:49.935] | relay conditions ...
[08:07:49.935] | : Future state: ‘finished’
[08:07:49.936] | : result() for MulticoreFuture ...
[08:07:49.936] | : result() for MulticoreFuture ... done
[08:07:49.936] | : signalConditions() ...
[08:07:49.936] | : . include = ‘condition’
[08:07:49.936] | : . exclude = ‘immediateCondition’
[08:07:49.936] | : . resignal = TRUE
[08:07:49.937] | : . Number of conditions: 6
[08:07:49.937] | : .  int 6
[08:07:49.937] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.938] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.860] | : . ' , attachPackages() ...
[08:07:49.938] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.938] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.860] | : . ' , ; packages: [n=1] ‘future’
[08:07:49.938] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.938] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.861] | : . ' , attachPackages() ... done
[08:07:49.938] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.938] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.861] | : . ' , attachPackages() ...
[08:07:49.939] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.939] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.861] | : . ' , ; packages: [n=0] 
[08:07:49.939] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:49.939] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.861] | : . ' , attachPackages() ... done
[08:07:49.939] | : signalConditions() ... done
[08:07:49.939] | relay conditions ... done
[08:07:49.940] value() for MulticoreFuture (<unnamed-11>) ... done
[08:07:49.940] future(..., label = NULL) ...
[08:07:49.940] | lazy: FALSE
[08:07:49.940] | stdout: TRUE
[08:07:49.940] | conditions: [n=1] ‘condition’
[08:07:49.940] | gc: FALSE
[08:07:49.940] | earlySignal: FALSE
[08:07:49.941] | getGlobalsAndPackages() ...
[08:07:49.941] | : Searching for globals ...
[08:07:49.947] | : . globals found: [3] ‘{’, ‘*’, ‘a’
[08:07:49.948] | : Searching for globals ... done
[08:07:49.948] | : Resolving globals: FALSE
[08:07:49.948] | : Search for packages associated with the globals ...
[08:07:49.948] | : . Packages associated with globals: [1] ‘base’
[08:07:49.949] | : . Packages: [1] ‘base’
[08:07:49.949] | : Search for packages associated with the globals ... done
[08:07:49.949] | : Packages after dropping 'base': [0] 
[08:07:49.949] | : globals: [1] ‘a’
[08:07:49.949] | : packages: [0] 
[08:07:49.949] | getGlobalsAndPackages() ... done
[08:07:49.949] | run() for ‘Future’ (<unnamed-12>) ...
[08:07:49.950] | : state: ‘created’
[08:07:49.950] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.950] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.950] | : Using MulticoreFutureBackend ...
[08:07:49.950] | : . Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:07:49.950] | : . Launching futures ...
[08:07:49.950] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:07:49.951] | : . ' , getFutureData() ...
[08:07:49.951] | : . ' , ; getFutureCore() ...
[08:07:49.951] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:49.951] | : . ' , ; getFutureCore() ... done
[08:07:49.951] | : . ' , ; getFutureCapture() ...
[08:07:49.951] | : . ' , ; getFutureCapture() ... done
[08:07:49.951] | : . ' , ; getFutureContext() ...
[08:07:49.951] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.952] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:49.952] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.952] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:49.952] | : . ' , ; getFutureContext() ... done
[08:07:49.952] | : . ' , getFutureData() ... done
[08:07:49.952] | : . ' , requestCore(..., workers = 2) ...
[08:07:49.953] | : . ' , requestCore(..., workers = 2) ... done
[08:07:49.954] | : . ' , MulticoreFuture started
[08:07:49.955] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:07:49.955] | : . Launching futures ... done
[08:07:49.955] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:49.955] | : Using MulticoreFutureBackend ... done
[08:07:49.956] | run() for ‘Future’ (<unnamed-12>) ... done
[08:07:49.956] future(..., label = NULL) ... done
[08:07:49.956] value() for MulticoreFuture (<unnamed-12>) ...
[08:07:49.956] | result() for MulticoreFuture ...
[08:07:49.958] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.958] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:49.958] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.959] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:49.959] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:49.959] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:49.959] | : . ' , ; ` | New stack:
[08:07:49.960] | : . ' , ; ` | List of 1
[08:07:49.960] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.960] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.960] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:49.960] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.960] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.960] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.960] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.960] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.967] | : . ' , ; ` | Old stack:
[08:07:49.967] | : . ' , ; ` | List of 1
[08:07:49.967] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:49.967] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:49.967] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:49.967] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:49.967] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.967] | : . ' , ; ` |     ...)  
[08:07:49.967] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.967] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.967] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:49.967] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:49.967] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.967] | : . ' , ; ` |     ...)  
[08:07:49.967] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.967] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.975] | : . ' , ; ` | Not identical
[08:07:49.975] | : . ' , ; ` | all.equal() for future ...
[08:07:49.975] | : . ' , ; ` | : List of 2
[08:07:49.975] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.975] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.975] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:49.975] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.975] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.975] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.975] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.975] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:49.975] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:49.975] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:49.975] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:49.975] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.975] | : . ' , ; ` | :     ...)  
[08:07:49.975] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.975] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.975] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:49.975] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:49.975] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:49.975] | : . ' , ; ` | :     ...)  
[08:07:49.975] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:49.983] | : . ' , ; ` | : Formals differ
[08:07:49.983] | : . ' , ; ` | all.equal() for future ... done
[08:07:49.983] | : . ' , ; ` | Future strategies differ at level 1
[08:07:49.983] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:49.984] | : . ' , ; ` plan(): Setting new future backend stack:
[08:07:49.984] | : . ' , ; ` List of future strategies:
[08:07:49.984] | : . ' , ; ` 1. sequential:
[08:07:49.984] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:49.984] | : . ' , ; `    - tweaked: FALSE
[08:07:49.984] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.984] | : . ' , ; ` List of 1
[08:07:49.984] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.984] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.984] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:07:49.984] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.984] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.984] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.984] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.984] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:49.988] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:49.988] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:49.988] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:49.988] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:49.988] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:49.988] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:49.988] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:07:49.988] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:49.988] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.988] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:49.988] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:49.991] | : . ' , ; ` | : init: TRUE
[08:07:49.991] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:07:49.991] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:07:49.991] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:07:49.991] | : . ' , ; ` | : .  list()
[08:07:49.992] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:07:49.992] | : . ' , ; ` | : .  list()
[08:07:49.992] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:07:49.992] | : . ' , ; ` | : . Dotted pair list of 2
[08:07:49.992] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:07:49.992] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:07:49.993] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:49.993] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:07:49.993] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:49.994] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:49.994] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:07:49.994] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:49.994] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:49.994] | : . ' , assign_globals() ...
[08:07:49.994] | : . ' , List of 1
[08:07:49.994] | : . ' ,  $ a: num 1
[08:07:49.994] | : . ' ,  - attr(*, "where")=List of 1
[08:07:49.994] | : . ' ,   ..$ a:<environment: R_GlobalEnv> 
[08:07:49.994] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:49.994] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:07:49.994] | : . ' ,  - attr(*, "total_size")= num NA
[08:07:49.994] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:07:49.998] | : . ' , - copied ‘a’ to environment
[08:07:49.999] | : . ' , assign_globals() ... done
[08:07:50.001] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:50.001] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:50.001] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:50.001] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:50.001] | : . ' , ; ` | : New stack:
[08:07:50.001] | : . ' , ; ` | : List of 1
[08:07:50.001] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:50.001] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:50.001] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:50.001] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:50.001] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.001] | : . ' , ; ` | :     ...)  
[08:07:50.001] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.001] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.001] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:50.001] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:50.001] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.001] | : . ' , ; ` | :     ...)  
[08:07:50.001] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.001] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.005] | : . ' , ; ` | : Old stack:
[08:07:50.005] | : . ' , ; ` | : List of 1
[08:07:50.005] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.005] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:50.005] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:50.005] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.005] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.005] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.005] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.005] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971fbe6d0> 
[08:07:50.005] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.005] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.005] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.008] | : . ' , ; ` | : Not identical
[08:07:50.008] | : . ' , ; ` | : all.equal() for future ...
[08:07:50.008] | : . ' , ; ` | : . List of 2
[08:07:50.008] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:50.008] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:50.008] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:50.008] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:50.008] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.008] | : . ' , ; ` | : .     ...)  
[08:07:50.008] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.008] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.008] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:50.008] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:50.008] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.008] | : . ' , ; ` | : .     ...)  
[08:07:50.008] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.008] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.008] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:50.008] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:50.008] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.008] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.008] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.008] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.008] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x558971fbe6d0> 
[08:07:50.008] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.008] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.014] | : . ' , ; ` | : . Formals differ
[08:07:50.014] | : . ' , ; ` | : all.equal() for future ... done
[08:07:50.014] | : . ' , ; ` | : Future strategies differ at level 1
[08:07:50.014] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:50.014] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:07:50.014] | : . ' , ; ` | List of future strategies:
[08:07:50.014] | : . ' , ; ` | 1. multicore:
[08:07:50.014] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:50.014] | : . ' , ; ` |    - tweaked: FALSE
[08:07:50.014] | : . ' , ; ` |    - call: plan(strategy)
[08:07:50.015] | : . ' , ; ` | List of 1
[08:07:50.015] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:50.015] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:50.015] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:50.015] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:50.015] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.015] | : . ' , ; ` |     ...)  
[08:07:50.015] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.015] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.015] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:50.015] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:50.015] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.015] | : . ' , ; ` |     ...)  
[08:07:50.015] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.015] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.019] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:50.019] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:50.019] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.019] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:50.019] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:07:50.020] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:50.020] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:50.020] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:50.020] | : readImmediateCondition() ...
[08:07:50.021] | : . Path: ‘/tmp/Rtmp8LmjZ5/.future/immediateConditions’
[08:07:50.021] | : . Number of RDS files: 0
[08:07:50.021] | : . Returned conditions set:
[08:07:50.021] | : .  list()
[08:07:50.022] | : readImmediateCondition() ... done
[08:07:50.022] | : result() for MulticoreFuture ...
[08:07:50.022] | : result() for MulticoreFuture ... done
[08:07:50.023] | : signalConditions() ...
[08:07:50.023] | : . include = ‘immediateCondition’
[08:07:50.023] | : . exclude = 
[08:07:50.023] | : . resignal = FALSE
[08:07:50.023] | : . Number of conditions: 6
[08:07:50.023] | : .  int 6
[08:07:50.024] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.024] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.024] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.024] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.024] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.025] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.025] | : signalConditions() ... done
[08:07:50.025] | result() for MulticoreFuture ... done
[08:07:50.025] | result() for MulticoreFuture ...
[08:07:50.025] | result() for MulticoreFuture ... done
[08:07:50.025] | signalConditions() ...
[08:07:50.025] | : include = ‘immediateCondition’
[08:07:50.027] | : exclude = 
[08:07:50.028] | : resignal = FALSE
[08:07:50.028] | : Number of conditions: 6
[08:07:50.028] | :  int 6
[08:07:50.029] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.029] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.029] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.030] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.030] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.030] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.030] | signalConditions() ... done
[08:07:50.031] | relay stdout ...
[08:07:50.031] | relay stdout ... done
[08:07:50.031] | check for misuse ...
[08:07:50.031] | check for misuse ... done
[08:07:50.031] | relay conditions ...
[08:07:50.032] | : Future state: ‘finished’
[08:07:50.032] | : result() for MulticoreFuture ...
[08:07:50.032] | : result() for MulticoreFuture ... done
[08:07:50.032] | : signalConditions() ...
[08:07:50.032] | : . include = ‘condition’
[08:07:50.032] | : . exclude = ‘immediateCondition’
[08:07:50.032] | : . resignal = TRUE
[08:07:50.032] | : . Number of conditions: 6
[08:07:50.033] | : .  int 6
[08:07:50.033] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.033] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.955] | : . ' , attachPackages() ...
[08:07:50.033] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.034] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.956] | : . ' , ; packages: [n=1] ‘future’
[08:07:50.034] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.034] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.956] | : . ' , attachPackages() ... done
[08:07:50.034] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.034] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.956] | : . ' , attachPackages() ...
[08:07:50.034] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.035] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.957] | : . ' , ; packages: [n=0] 
[08:07:50.035] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.035] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:49.957] | : . ' , attachPackages() ... done
[08:07:50.035] | : signalConditions() ... done
[08:07:50.035] | relay conditions ... done
[08:07:50.035] value() for MulticoreFuture (<unnamed-12>) ... done
[08:07:50.035] future(..., label = NULL) ...
[08:07:50.036] | lazy: FALSE
[08:07:50.036] | stdout: TRUE
[08:07:50.036] | conditions: [n=1] ‘condition’
[08:07:50.036] | gc: FALSE
[08:07:50.036] | earlySignal: FALSE
[08:07:50.036] | getGlobalsAndPackages() ...
[08:07:50.036] | : Searching for globals ...
[08:07:50.043] | : . globals found: [3] ‘{’, ‘*’, ‘a’
[08:07:50.043] | : Searching for globals ... done
[08:07:50.043] | : Resolving globals: FALSE
[08:07:50.044] | : Search for packages associated with the globals ...
[08:07:50.044] | : . Packages associated with globals: [1] ‘base’
[08:07:50.044] | : . Packages: [1] ‘base’
[08:07:50.044] | : Search for packages associated with the globals ... done
[08:07:50.044] | : Packages after dropping 'base': [0] 
[08:07:50.045] | : globals: [1] ‘a’
[08:07:50.045] | : packages: [0] 
[08:07:50.045] | getGlobalsAndPackages() ... done
[08:07:50.045] | run() for ‘Future’ (<unnamed-13>) ...
[08:07:50.045] | : state: ‘created’
[08:07:50.045] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.045] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:50.046] | : Using MulticoreFutureBackend ...
[08:07:50.046] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:07:50.046] | : . Launching futures ...
[08:07:50.046] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:07:50.046] | : . ' , getFutureData() ...
[08:07:50.046] | : . ' , ; getFutureCore() ...
[08:07:50.046] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:50.046] | : . ' , ; getFutureCore() ... done
[08:07:50.047] | : . ' , ; getFutureCapture() ...
[08:07:50.047] | : . ' , ; getFutureCapture() ... done
[08:07:50.047] | : . ' , ; getFutureContext() ...
[08:07:50.047] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.047] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:50.047] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:50.047] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:50.047] | : . ' , ; getFutureContext() ... done
[08:07:50.048] | : . ' , getFutureData() ... done
[08:07:50.048] | : . ' , requestCore(..., workers = 2) ...
[08:07:50.048] | : . ' , requestCore(..., workers = 2) ... done
[08:07:50.050] | : . ' , MulticoreFuture started
[08:07:50.050] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:07:50.051] | : . Launching futures ... done
[08:07:50.051] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:50.051] | : Using MulticoreFutureBackend ... done
[08:07:50.051] | run() for ‘Future’ (<unnamed-13>) ... done
[08:07:50.051] future(..., label = NULL) ... done
[08:07:50.052] value() for MulticoreFuture (<unnamed-13>) ...
[08:07:50.052] | result() for MulticoreFuture ...
[08:07:50.054] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.054] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:50.055] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:50.055] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:50.056] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:50.056] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:50.056] | : . ' , ; ` | New stack:
[08:07:50.056] | : . ' , ; ` | List of 1
[08:07:50.056] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.056] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:50.056] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:50.056] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.056] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.056] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.056] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.056] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.070] | : . ' , ; ` | Old stack:
[08:07:50.070] | : . ' , ; ` | List of 1
[08:07:50.070] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:50.070] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:50.070] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:50.070] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:50.070] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.070] | : . ' , ; ` |     ...)  
[08:07:50.070] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.070] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.070] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:50.070] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:50.070] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.070] | : . ' , ; ` |     ...)  
[08:07:50.070] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.070] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.078] | : . ' , ; ` | Not identical
[08:07:50.078] | : . ' , ; ` | all.equal() for future ...
[08:07:50.078] | : . ' , ; ` | : List of 2
[08:07:50.078] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.078] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:50.078] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:50.078] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.078] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.078] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.078] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.078] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:50.078] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:50.078] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:50.078] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:50.078] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.078] | : . ' , ; ` | :     ...)  
[08:07:50.078] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.078] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.078] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:50.078] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:50.078] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.078] | : . ' , ; ` | :     ...)  
[08:07:50.078] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.087] | : . ' , ; ` | : Formals differ
[08:07:50.088] | : . ' , ; ` | all.equal() for future ... done
[08:07:50.088] | : . ' , ; ` | Future strategies differ at level 1
[08:07:50.088] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:50.088] | : . ' , ; ` plan(): Setting new future backend stack:
[08:07:50.088] | : . ' , ; ` List of future strategies:
[08:07:50.088] | : . ' , ; ` 1. sequential:
[08:07:50.088] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:50.088] | : . ' , ; `    - tweaked: FALSE
[08:07:50.088] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.089] | : . ' , ; ` List of 1
[08:07:50.089] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.089] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:50.089] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:07:50.089] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.089] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.089] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.089] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.089] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.093] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:50.093] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:50.093] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.093] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:50.094] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.094] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:50.094] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:07:50.094] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.094] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.094] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.094] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.096] | : . ' , ; ` | : init: TRUE
[08:07:50.096] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:07:50.096] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:07:50.096] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:07:50.097] | : . ' , ; ` | : .  list()
[08:07:50.097] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:07:50.097] | : . ' , ; ` | : .  list()
[08:07:50.097] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:07:50.097] | : . ' , ; ` | : . Dotted pair list of 2
[08:07:50.097] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:07:50.097] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:07:50.099] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:50.099] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:07:50.099] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:50.100] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:50.101] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:07:50.101] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:50.101] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:50.101] | : . ' , assign_globals() ...
[08:07:50.101] | : . ' , List of 1
[08:07:50.101] | : . ' ,  $ a: num 1
[08:07:50.101] | : . ' ,  - attr(*, "where")=List of 1
[08:07:50.101] | : . ' ,   ..$ a:<environment: R_GlobalEnv> 
[08:07:50.101] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:50.101] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:07:50.101] | : . ' ,  - attr(*, "total_size")= num NA
[08:07:50.101] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:07:50.104] | : . ' , - copied ‘a’ to environment
[08:07:50.104] | : . ' , assign_globals() ... done
[08:07:50.106] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:50.106] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:50.107] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:50.107] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:50.107] | : . ' , ; ` | : New stack:
[08:07:50.107] | : . ' , ; ` | : List of 1
[08:07:50.107] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:50.107] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:50.107] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:50.107] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:50.107] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.107] | : . ' , ; ` | :     ...)  
[08:07:50.107] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.107] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.107] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:50.107] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:50.107] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.107] | : . ' , ; ` | :     ...)  
[08:07:50.107] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.107] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.110] | : . ' , ; ` | : Old stack:
[08:07:50.110] | : . ' , ; ` | : List of 1
[08:07:50.110] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.110] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:50.110] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:50.110] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.110] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.110] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.110] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.110] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5589723ec0d0> 
[08:07:50.110] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.110] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.110] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.113] | : . ' , ; ` | : Not identical
[08:07:50.113] | : . ' , ; ` | : all.equal() for future ...
[08:07:50.114] | : . ' , ; ` | : . List of 2
[08:07:50.114] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:50.114] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:50.114] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:50.114] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:50.114] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.114] | : . ' , ; ` | : .     ...)  
[08:07:50.114] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.114] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.114] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:50.114] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:50.114] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.114] | : . ' , ; ` | : .     ...)  
[08:07:50.114] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.114] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.114] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:50.114] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:50.114] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.114] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.114] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.114] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.114] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5589723ec0d0> 
[08:07:50.114] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.114] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.119] | : . ' , ; ` | : . Formals differ
[08:07:50.119] | : . ' , ; ` | : all.equal() for future ... done
[08:07:50.119] | : . ' , ; ` | : Future strategies differ at level 1
[08:07:50.121] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:50.121] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:07:50.121] | : . ' , ; ` | List of future strategies:
[08:07:50.121] | : . ' , ; ` | 1. multicore:
[08:07:50.121] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:50.121] | : . ' , ; ` |    - tweaked: FALSE
[08:07:50.121] | : . ' , ; ` |    - call: plan(strategy)
[08:07:50.121] | : . ' , ; ` | List of 1
[08:07:50.121] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:50.121] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:50.121] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:50.121] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:50.121] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.121] | : . ' , ; ` |     ...)  
[08:07:50.121] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.121] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.121] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:50.121] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:50.121] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.121] | : . ' , ; ` |     ...)  
[08:07:50.121] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.121] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.124] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:50.125] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:50.125] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.125] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:50.125] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:07:50.125] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:50.125] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:50.125] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:50.126] | : readImmediateCondition() ...
[08:07:50.126] | : . Path: ‘/tmp/Rtmp8LmjZ5/.future/immediateConditions’
[08:07:50.126] | : . Number of RDS files: 0
[08:07:50.127] | : . Returned conditions set:
[08:07:50.127] | : .  list()
[08:07:50.127] | : readImmediateCondition() ... done
[08:07:50.128] | : result() for MulticoreFuture ...
[08:07:50.128] | : result() for MulticoreFuture ... done
[08:07:50.128] | : signalConditions() ...
[08:07:50.128] | : . include = ‘immediateCondition’
[08:07:50.128] | : . exclude = 
[08:07:50.128] | : . resignal = FALSE
[08:07:50.129] | : . Number of conditions: 6
[08:07:50.129] | : .  int 6
[08:07:50.129] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.131] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.131] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.132] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.132] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.132] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.133] | : signalConditions() ... done
[08:07:50.133] | result() for MulticoreFuture ... done
[08:07:50.133] | result() for MulticoreFuture ...
[08:07:50.133] | result() for MulticoreFuture ... done
[08:07:50.133] | signalConditions() ...
[08:07:50.134] | : include = ‘immediateCondition’
[08:07:50.134] | : exclude = 
[08:07:50.134] | : resignal = FALSE
[08:07:50.134] | : Number of conditions: 6
[08:07:50.134] | :  int 6
[08:07:50.135] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.135] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.136] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.136] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.136] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.136] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.136] | signalConditions() ... done
[08:07:50.136] | relay stdout ...
[08:07:50.136] | relay stdout ... done
[08:07:50.137] | check for misuse ...
[08:07:50.137] | check for misuse ... done
[08:07:50.137] | relay conditions ...
[08:07:50.137] | : Future state: ‘finished’
[08:07:50.137] | : result() for MulticoreFuture ...
[08:07:50.137] | : result() for MulticoreFuture ... done
[08:07:50.137] | : signalConditions() ...
[08:07:50.137] | : . include = ‘condition’
[08:07:50.138] | : . exclude = ‘immediateCondition’
[08:07:50.138] | : . resignal = TRUE
[08:07:50.138] | : . Number of conditions: 6
[08:07:50.138] | : .  int 6
[08:07:50.138] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.139] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:50.051] | : . ' , attachPackages() ...
[08:07:50.139] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.139] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:50.052] | : . ' , ; packages: [n=1] ‘future’
[08:07:50.139] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.139] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:50.052] | : . ' , attachPackages() ... done
[08:07:50.140] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.140] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:50.053] | : . ' , attachPackages() ...
[08:07:50.140] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.140] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:50.053] | : . ' , ; packages: [n=0] 
[08:07:50.140] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.140] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:50.053] | : . ' , attachPackages() ... done
[08:07:50.141] | : signalConditions() ... done
[08:07:50.141] | relay conditions ... done
[08:07:50.141] value() for MulticoreFuture (<unnamed-13>) ... done
[08:07:50.141] future(..., label = NULL) ...
[08:07:50.141] | lazy: TRUE
[08:07:50.141] | stdout: TRUE
[08:07:50.141] | conditions: [n=1] ‘condition’
[08:07:50.141] | gc: FALSE
[08:07:50.142] | earlySignal: FALSE
[08:07:50.142] | getGlobalsAndPackages() ...
[08:07:50.142] | : Searching for globals ...
[08:07:50.149] | : . globals found: [3] ‘{’, ‘*’, ‘a’
[08:07:50.149] | : Searching for globals ... done
[08:07:50.149] | : Resolving globals: FALSE
[08:07:50.149] | : Search for packages associated with the globals ...
[08:07:50.149] | : . Packages associated with globals: [1] ‘base’
[08:07:50.150] | : . Packages: [1] ‘base’
[08:07:50.150] | : Search for packages associated with the globals ... done
[08:07:50.150] | : Packages after dropping 'base': [0] 
[08:07:50.150] | : globals: [1] ‘a’
[08:07:50.150] | : packages: [0] 
[08:07:50.150] | getGlobalsAndPackages() ... done
[08:07:50.150] future(..., label = NULL) ... done
[08:07:50.151] value() for Future (<unnamed-14>) ...
[08:07:50.151] | run() for ‘Future’ (<unnamed-14>) ...
[08:07:50.151] | : state: ‘created’
[08:07:50.151] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.151] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:50.151] | : Using MulticoreFutureBackend ...
[08:07:50.151] | : . Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:07:50.151] | : . Launching futures ...
[08:07:50.152] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:07:50.152] | : . ' , getFutureData() ...
[08:07:50.152] | : . ' , ; getFutureCore() ...
[08:07:50.152] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:50.152] | : . ' , ; getFutureCore() ... done
[08:07:50.152] | : . ' , ; getFutureCapture() ...
[08:07:50.152] | : . ' , ; getFutureCapture() ... done
[08:07:50.153] | : . ' , ; getFutureContext() ...
[08:07:50.153] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.153] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:50.153] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:50.153] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:50.153] | : . ' , ; getFutureContext() ... done
[08:07:50.153] | : . ' , getFutureData() ... done
[08:07:50.153] | : . ' , requestCore(..., workers = 2) ...
[08:07:50.154] | : . ' , requestCore(..., workers = 2) ... done
[08:07:50.155] | : . ' , MulticoreFuture started
[08:07:50.156] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:07:50.156] | : . Launching futures ... done
[08:07:50.156] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:50.157] | : Using MulticoreFutureBackend ... done
[08:07:50.157] | run() for ‘Future’ (<unnamed-14>) ... done
[08:07:50.157] | result() for MulticoreFuture ...
[08:07:50.159] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.159] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:50.160] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:50.160] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:50.160] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:50.163] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:50.164] | : . ' , ; ` | New stack:
[08:07:50.164] | : . ' , ; ` | List of 1
[08:07:50.164] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.164] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:50.164] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:50.164] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.164] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.164] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.164] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.164] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.171] | : . ' , ; ` | Old stack:
[08:07:50.171] | : . ' , ; ` | List of 1
[08:07:50.171] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:50.171] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:50.171] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:50.171] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:50.171] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.171] | : . ' , ; ` |     ...)  
[08:07:50.171] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.171] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.171] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:50.171] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:50.171] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.171] | : . ' , ; ` |     ...)  
[08:07:50.171] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.171] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.177] | : . ' , ; ` | Not identical
[08:07:50.177] | : . ' , ; ` | all.equal() for future ...
[08:07:50.177] | : . ' , ; ` | : List of 2
[08:07:50.177] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.177] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:50.177] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:50.177] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.177] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.177] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.177] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.177] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:50.177] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:50.177] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:50.177] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:50.177] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.177] | : . ' , ; ` | :     ...)  
[08:07:50.177] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.177] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.177] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:50.177] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:50.177] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.177] | : . ' , ; ` | :     ...)  
[08:07:50.177] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.185] | : . ' , ; ` | : Formals differ
[08:07:50.185] | : . ' , ; ` | all.equal() for future ... done
[08:07:50.185] | : . ' , ; ` | Future strategies differ at level 1
[08:07:50.185] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:50.185] | : . ' , ; ` plan(): Setting new future backend stack:
[08:07:50.185] | : . ' , ; ` List of future strategies:
[08:07:50.185] | : . ' , ; ` 1. sequential:
[08:07:50.185] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:50.185] | : . ' , ; `    - tweaked: FALSE
[08:07:50.185] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.186] | : . ' , ; ` List of 1
[08:07:50.186] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.186] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:50.186] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:07:50.186] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.186] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.186] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.186] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.186] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.189] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:50.189] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:50.189] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.190] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:50.190] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.190] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:50.190] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:07:50.190] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.190] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.190] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.190] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.192] | : . ' , ; ` | : init: TRUE
[08:07:50.192] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:07:50.192] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:07:50.192] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:07:50.193] | : . ' , ; ` | : .  list()
[08:07:50.193] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:07:50.193] | : . ' , ; ` | : .  list()
[08:07:50.195] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:07:50.195] | : . ' , ; ` | : . Dotted pair list of 2
[08:07:50.195] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:07:50.195] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:07:50.196] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:50.196] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:07:50.196] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:50.196] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:50.196] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:07:50.197] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:50.197] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:50.197] | : . ' , assign_globals() ...
[08:07:50.197] | : . ' , List of 1
[08:07:50.197] | : . ' ,  $ a: num 1
[08:07:50.197] | : . ' ,  - attr(*, "where")=List of 1
[08:07:50.197] | : . ' ,   ..$ a:<environment: R_GlobalEnv> 
[08:07:50.197] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:50.197] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:07:50.197] | : . ' ,  - attr(*, "total_size")= num NA
[08:07:50.197] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:07:50.200] | : . ' , - copied ‘a’ to environment
[08:07:50.200] | : . ' , assign_globals() ... done
[08:07:50.202] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:50.202] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:50.202] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:50.202] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:50.202] | : . ' , ; ` | : New stack:
[08:07:50.203] | : . ' , ; ` | : List of 1
[08:07:50.203] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:50.203] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:50.203] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:50.203] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:50.203] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.203] | : . ' , ; ` | :     ...)  
[08:07:50.203] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.203] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.203] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:50.203] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:50.203] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.203] | : . ' , ; ` | :     ...)  
[08:07:50.203] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.203] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.206] | : . ' , ; ` | : Old stack:
[08:07:50.206] | : . ' , ; ` | : List of 1
[08:07:50.206] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.206] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:50.206] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:50.206] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.206] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.206] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.206] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.206] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5589723c3918> 
[08:07:50.206] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.206] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.206] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.209] | : . ' , ; ` | : Not identical
[08:07:50.209] | : . ' , ; ` | : all.equal() for future ...
[08:07:50.209] | : . ' , ; ` | : . List of 2
[08:07:50.209] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:50.209] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:50.209] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:50.209] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:50.209] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.209] | : . ' , ; ` | : .     ...)  
[08:07:50.209] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.209] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.209] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:50.209] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:50.209] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.209] | : . ' , ; ` | : .     ...)  
[08:07:50.209] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.209] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.209] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:50.209] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:50.209] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.209] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.209] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.209] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.209] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5589723c3918> 
[08:07:50.209] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.209] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.216] | : . ' , ; ` | : . Formals differ
[08:07:50.216] | : . ' , ; ` | : all.equal() for future ... done
[08:07:50.216] | : . ' , ; ` | : Future strategies differ at level 1
[08:07:50.217] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:50.217] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:07:50.217] | : . ' , ; ` | List of future strategies:
[08:07:50.217] | : . ' , ; ` | 1. multicore:
[08:07:50.217] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:50.217] | : . ' , ; ` |    - tweaked: FALSE
[08:07:50.217] | : . ' , ; ` |    - call: plan(strategy)
[08:07:50.217] | : . ' , ; ` | List of 1
[08:07:50.217] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:50.217] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:50.217] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:50.217] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:50.217] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.217] | : . ' , ; ` |     ...)  
[08:07:50.217] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.217] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.217] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:50.217] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:50.217] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.217] | : . ' , ; ` |     ...)  
[08:07:50.217] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.217] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.220] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:50.220] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:50.221] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.221] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:50.221] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:07:50.221] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:50.221] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:50.221] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:50.222] | : readImmediateCondition() ...
[08:07:50.222] | : . Path: ‘/tmp/Rtmp8LmjZ5/.future/immediateConditions’
[08:07:50.222] | : . Number of RDS files: 0
[08:07:50.222] | : . Returned conditions set:
[08:07:50.223] | : .  list()
[08:07:50.223] | : readImmediateCondition() ... done
[08:07:50.225] | : result() for MulticoreFuture ...
[08:07:50.226] | : result() for MulticoreFuture ... done
[08:07:50.226] | : signalConditions() ...
[08:07:50.226] | : . include = ‘immediateCondition’
[08:07:50.227] | : . exclude = 
[08:07:50.227] | : . resignal = FALSE
[08:07:50.227] | : . Number of conditions: 6
[08:07:50.227] | : .  int 6
[08:07:50.228] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.228] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.229] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.229] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.229] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.229] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.230] | : signalConditions() ... done
[08:07:50.230] | result() for MulticoreFuture ... done
[08:07:50.230] | result() for MulticoreFuture ...
[08:07:50.230] | result() for MulticoreFuture ... done
[08:07:50.230] | signalConditions() ...
[08:07:50.230] | : include = ‘immediateCondition’
[08:07:50.230] | : exclude = 
[08:07:50.231] | : resignal = FALSE
[08:07:50.231] | : Number of conditions: 6
[08:07:50.231] | :  int 6
[08:07:50.231] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.232] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.232] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.232] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.232] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.232] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.232] | signalConditions() ... done
[08:07:50.232] | relay stdout ...
[08:07:50.233] | relay stdout ... done
[08:07:50.233] | check for misuse ...
[08:07:50.233] | check for misuse ... done
[08:07:50.233] | relay conditions ...
[08:07:50.233] | : Future state: ‘finished’
[08:07:50.233] | : result() for MulticoreFuture ...
[08:07:50.233] | : result() for MulticoreFuture ... done
[08:07:50.233] | : signalConditions() ...
[08:07:50.234] | : . include = ‘condition’
[08:07:50.234] | : . exclude = ‘immediateCondition’
[08:07:50.234] | : . resignal = TRUE
[08:07:50.234] | : . Number of conditions: 6
[08:07:50.234] | : .  int 6
[08:07:50.235] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.235] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:50.157] | : . ' , attachPackages() ...
[08:07:50.235] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.235] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:50.157] | : . ' , ; packages: [n=1] ‘future’
[08:07:50.235] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.235] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:50.158] | : . ' , attachPackages() ... done
[08:07:50.236] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.236] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:50.158] | : . ' , attachPackages() ...
[08:07:50.236] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.236] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:50.158] | : . ' , ; packages: [n=0] 
[08:07:50.236] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.236] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:50.158] | : . ' , attachPackages() ... done
[08:07:50.237] | : signalConditions() ... done
[08:07:50.237] | relay conditions ... done
[08:07:50.237] value() for Future (<unnamed-14>) ... done
[08:07:50.237] future(..., label = NULL) ...
[08:07:50.237] | lazy: TRUE
[08:07:50.237] | stdout: TRUE
[08:07:50.237] | conditions: [n=1] ‘condition’
[08:07:50.237] | gc: FALSE
[08:07:50.238] | earlySignal: FALSE
[08:07:50.238] | getGlobalsAndPackages() ...
[08:07:50.238] | : Searching for globals ...
[08:07:50.244] | : . globals found: [3] ‘{’, ‘*’, ‘a’
[08:07:50.245] | : Searching for globals ... done
[08:07:50.245] | : Resolving globals: FALSE
[08:07:50.245] | : Search for packages associated with the globals ...
[08:07:50.245] | : . Packages associated with globals: [1] ‘base’
[08:07:50.245] | : . Packages: [1] ‘base’
[08:07:50.246] | : Search for packages associated with the globals ... done
[08:07:50.246] | : Packages after dropping 'base': [0] 
[08:07:50.246] | : globals: [1] ‘a’
[08:07:50.246] | : packages: [0] 
[08:07:50.246] | getGlobalsAndPackages() ... done
[08:07:50.246] future(..., label = NULL) ... done
[08:07:50.247] value() for Future (<unnamed-15>) ...
[08:07:50.247] | run() for ‘Future’ (<unnamed-15>) ...
[08:07:50.247] | : state: ‘created’
[08:07:50.247] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.247] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:50.247] | : Using MulticoreFutureBackend ...
[08:07:50.247] | : . Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:07:50.248] | : . Launching futures ...
[08:07:50.248] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:07:50.248] | : . ' , getFutureData() ...
[08:07:50.248] | : . ' , ; getFutureCore() ...
[08:07:50.248] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:50.248] | : . ' , ; getFutureCore() ... done
[08:07:50.248] | : . ' , ; getFutureCapture() ...
[08:07:50.248] | : . ' , ; getFutureCapture() ... done
[08:07:50.249] | : . ' , ; getFutureContext() ...
[08:07:50.249] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.249] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:50.249] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:50.249] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:50.249] | : . ' , ; getFutureContext() ... done
[08:07:50.249] | : . ' , getFutureData() ... done
[08:07:50.249] | : . ' , requestCore(..., workers = 2) ...
[08:07:50.250] | : . ' , requestCore(..., workers = 2) ... done
[08:07:50.251] | : . ' , MulticoreFuture started
[08:07:50.252] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:07:50.252] | : . Launching futures ... done
[08:07:50.255] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:50.255] | : Using MulticoreFutureBackend ... done
[08:07:50.256] | run() for ‘Future’ (<unnamed-15>) ... done
[08:07:50.256] | result() for MulticoreFuture ...
[08:07:50.258] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.259] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:50.259] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:50.260] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:50.260] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:50.261] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:50.261] | : . ' , ; ` | New stack:
[08:07:50.261] | : . ' , ; ` | List of 1
[08:07:50.261] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.261] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:50.261] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:50.261] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.261] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.261] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.261] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.261] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.266] | : . ' , ; ` | Old stack:
[08:07:50.267] | : . ' , ; ` | List of 1
[08:07:50.267] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:50.267] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:50.267] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:50.267] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:50.267] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.267] | : . ' , ; ` |     ...)  
[08:07:50.267] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.267] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.267] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:50.267] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:50.267] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.267] | : . ' , ; ` |     ...)  
[08:07:50.267] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.267] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.272] | : . ' , ; ` | Not identical
[08:07:50.272] | : . ' , ; ` | all.equal() for future ...
[08:07:50.272] | : . ' , ; ` | : List of 2
[08:07:50.272] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.272] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:50.272] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:50.272] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.272] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.272] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.272] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.272] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:50.272] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:50.272] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:50.272] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:50.272] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.272] | : . ' , ; ` | :     ...)  
[08:07:50.272] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.272] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.272] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:50.272] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:50.272] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.272] | : . ' , ; ` | :     ...)  
[08:07:50.272] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.279] | : . ' , ; ` | : Formals differ
[08:07:50.279] | : . ' , ; ` | all.equal() for future ... done
[08:07:50.279] | : . ' , ; ` | Future strategies differ at level 1
[08:07:50.279] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:50.280] | : . ' , ; ` plan(): Setting new future backend stack:
[08:07:50.280] | : . ' , ; ` List of future strategies:
[08:07:50.280] | : . ' , ; ` 1. sequential:
[08:07:50.280] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:50.280] | : . ' , ; `    - tweaked: FALSE
[08:07:50.280] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.280] | : . ' , ; ` List of 1
[08:07:50.280] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.280] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:50.280] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:07:50.280] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.280] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.280] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.280] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.280] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.283] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:50.284] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:50.284] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.284] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:50.284] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.284] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:50.284] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:07:50.284] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.284] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.284] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.284] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.287] | : . ' , ; ` | : init: TRUE
[08:07:50.288] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:07:50.288] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:07:50.288] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:07:50.288] | : . ' , ; ` | : .  list()
[08:07:50.288] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:07:50.288] | : . ' , ; ` | : .  list()
[08:07:50.289] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:07:50.289] | : . ' , ; ` | : . Dotted pair list of 2
[08:07:50.289] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:07:50.289] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:07:50.290] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:50.290] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:07:50.290] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:50.290] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:50.290] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:07:50.291] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:50.291] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:50.291] | : . ' , assign_globals() ...
[08:07:50.291] | : . ' , List of 1
[08:07:50.291] | : . ' ,  $ a: num 1
[08:07:50.291] | : . ' ,  - attr(*, "where")=List of 1
[08:07:50.291] | : . ' ,   ..$ a:<environment: R_GlobalEnv> 
[08:07:50.291] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:50.291] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:07:50.291] | : . ' ,  - attr(*, "total_size")= num NA
[08:07:50.291] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:07:50.293] | : . ' , - copied ‘a’ to environment
[08:07:50.294] | : . ' , assign_globals() ... done
[08:07:50.296] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:50.296] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:50.296] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:50.296] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:50.296] | : . ' , ; ` | : New stack:
[08:07:50.296] | : . ' , ; ` | : List of 1
[08:07:50.296] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:50.296] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:50.296] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:50.296] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:50.296] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.296] | : . ' , ; ` | :     ...)  
[08:07:50.296] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.296] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.296] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:50.296] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:50.296] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.296] | : . ' , ; ` | :     ...)  
[08:07:50.296] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.296] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.300] | : . ' , ; ` | : Old stack:
[08:07:50.300] | : . ' , ; ` | : List of 1
[08:07:50.300] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.300] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:50.300] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:50.300] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.300] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.300] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.300] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.300] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55897063e2d8> 
[08:07:50.300] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.300] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.300] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.303] | : . ' , ; ` | : Not identical
[08:07:50.303] | : . ' , ; ` | : all.equal() for future ...
[08:07:50.303] | : . ' , ; ` | : . List of 2
[08:07:50.303] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:50.303] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:50.303] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:50.303] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:50.303] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.303] | : . ' , ; ` | : .     ...)  
[08:07:50.303] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.303] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.303] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:50.303] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:50.303] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.303] | : . ' , ; ` | : .     ...)  
[08:07:50.303] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.303] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.303] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:50.303] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:50.303] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.303] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.303] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.303] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:50.303] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55897063e2d8> 
[08:07:50.303] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:50.303] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:50.310] | : . ' , ; ` | : . Formals differ
[08:07:50.310] | : . ' , ; ` | : all.equal() for future ... done
[08:07:50.310] | : . ' , ; ` | : Future strategies differ at level 1
[08:07:50.310] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:50.310] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:07:50.310] | : . ' , ; ` | List of future strategies:
[08:07:50.310] | : . ' , ; ` | 1. multicore:
[08:07:50.310] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:50.310] | : . ' , ; ` |    - tweaked: FALSE
[08:07:50.310] | : . ' , ; ` |    - call: plan(strategy)
[08:07:50.311] | : . ' , ; ` | List of 1
[08:07:50.311] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:50.311] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:50.311] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:50.311] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:50.311] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.311] | : . ' , ; ` |     ...)  
[08:07:50.311] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.311] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.311] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:50.311] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:50.311] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.311] | : . ' , ; ` |     ...)  
[08:07:50.311] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.311] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.314] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:50.314] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:50.314] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.314] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:50.314] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:07:50.314] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:50.315] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:50.315] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:50.315] | : readImmediateCondition() ...
[08:07:50.316] | : . Path: ‘/tmp/Rtmp8LmjZ5/.future/immediateConditions’
[08:07:50.316] | : . Number of RDS files: 0
[08:07:50.316] | : . Returned conditions set:
[08:07:50.317] | : .  list()
[08:07:50.317] | : readImmediateCondition() ... done
[08:07:50.318] | : result() for MulticoreFuture ...
[08:07:50.318] | : result() for MulticoreFuture ... done
[08:07:50.318] | : signalConditions() ...
[08:07:50.319] | : . include = ‘immediateCondition’
[08:07:50.319] | : . exclude = 
[08:07:50.319] | : . resignal = FALSE
[08:07:50.319] | : . Number of conditions: 6
[08:07:50.319] | : .  int 6
[08:07:50.320] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.320] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.320] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.320] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.320] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.321] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.321] | : signalConditions() ... done
[08:07:50.321] | result() for MulticoreFuture ... done
[08:07:50.321] | result() for MulticoreFuture ...
[08:07:50.321] | result() for MulticoreFuture ... done
[08:07:50.321] | signalConditions() ...
[08:07:50.322] | : include = ‘immediateCondition’
[08:07:50.322] | : exclude = 
[08:07:50.322] | : resignal = FALSE
[08:07:50.322] | : Number of conditions: 6
[08:07:50.322] | :  int 6
[08:07:50.323] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.323] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.323] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.323] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.323] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.323] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.323] | signalConditions() ... done
[08:07:50.324] | relay stdout ...
[08:07:50.324] | relay stdout ... done
[08:07:50.324] | check for misuse ...
[08:07:50.324] | check for misuse ... done
[08:07:50.324] | relay conditions ...
[08:07:50.324] | : Future state: ‘finished’
[08:07:50.324] | : result() for MulticoreFuture ...
[08:07:50.325] | : result() for MulticoreFuture ... done
[08:07:50.325] | : signalConditions() ...
[08:07:50.325] | : . include = ‘condition’
[08:07:50.325] | : . exclude = ‘immediateCondition’
[08:07:50.325] | : . resignal = TRUE
[08:07:50.325] | : . Number of conditions: 6
[08:07:50.325] | : .  int 6
[08:07:50.326] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.326] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:50.253] | : . ' , attachPackages() ...
[08:07:50.326] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.326] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:50.255] | : . ' , ; packages: [n=1] ‘future’
[08:07:50.326] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.326] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:50.255] | : . ' , attachPackages() ... done
[08:07:50.327] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.327] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:50.256] | : . ' , attachPackages() ...
[08:07:50.327] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.327] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:50.256] | : . ' , ; packages: [n=0] 
[08:07:50.327] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:50.327] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:50.257] | : . ' , attachPackages() ... done
[08:07:50.328] | : signalConditions() ... done
[08:07:50.328] | relay conditions ... done
[08:07:50.328] value() for Future (<unnamed-15>) ... done
*** futureAssign() with ‘multicore’ futures ... DONE
*** futureAssign() with ‘multisession’ futures ...
[08:07:50.328] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.329] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:07:50.329] | : all.equal() for FutureStrategyList ...
[08:07:50.329] | : . New stack:
[08:07:50.329] | : . List of 1
[08:07:50.329] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:07:50.329] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.329] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:07:50.329] | : .   ..- attr(*, "init")= logi TRUE
[08:07:50.329] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:50.329] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:50.329] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:50.329] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:50.329] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:07:50.329] | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:50.329] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.332] | : . Old stack:
[08:07:50.333] | : . List of 1
[08:07:50.333] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:50.333] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:50.333] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:50.333] | : .   ..- attr(*, "init")= chr "done"
[08:07:50.333] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.333] | : .     ...)  
[08:07:50.333] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.333] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.333] | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:50.333] | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:50.333] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.333] | : .     ...)  
[08:07:50.333] | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.333] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.336] | : . Not identical
[08:07:50.337] | : . all.equal() for future ...
[08:07:50.337] | : . ' List of 2
[08:07:50.337] | : . '  $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:07:50.337] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.337] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:07:50.337] | : . '   ..- attr(*, "init")= logi TRUE
[08:07:50.337] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:50.337] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:50.337] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:50.337] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:50.337] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:07:50.337] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:50.337] | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:50.337] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:07:50.337] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:50.337] | : . '   ..- attr(*, "init")= chr "done"
[08:07:50.337] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.337] | : . '     ...)  
[08:07:50.337] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.337] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.337] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:50.337] | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55896f723690> 
[08:07:50.337] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:50.337] | : . '     ...)  
[08:07:50.337] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:50.345] | : . ' Formals differ
[08:07:50.345] | : . all.equal() for future ... done
[08:07:50.345] | : . Future strategies differ at level 1
[08:07:50.345] | : all.equal() for FutureStrategyList ... done
[08:07:50.345] | : plan(): Setting new future backend stack:
[08:07:50.345] | : List of future strategies:
[08:07:50.345] | : 1. multisession:
[08:07:50.345] | :    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:50.345] | :    - tweaked: FALSE
[08:07:50.345] | :    - call: plan(strategy)
[08:07:50.345] | : List of 1
[08:07:50.345] | :  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:07:50.345] | :     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.345] | :   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:07:50.345] | :   ..- attr(*, "init")= logi TRUE
[08:07:50.345] | :   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:50.345] | :     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:50.345] | :   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:50.345] | :   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:50.345] | :   ..- attr(*, "untweakable")= chr "persistent"
[08:07:50.345] | :   ..- attr(*, "call")= language plan(strategy)
[08:07:50.345] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:50.348] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:07:50.348] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.349] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:50.349] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:50.350] | : . Legacy shutdown of cluster workers ...
[08:07:50.350] | : . ' Stopping existing cluster ...
[08:07:50.350] | : . ' , No pre-existing cluster. Skipping
[08:07:50.350] | : . ' Stopping existing cluster ... done
[08:07:50.350] | : . Legacy shutdown of cluster workers ... done
[08:07:50.350] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:07:50.350] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:07:50.350] | : . function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:07:50.350] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:50.350] | : .  - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:07:50.350] | : .  - attr(*, "init")= logi TRUE
[08:07:50.350] | : .  - attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:50.350] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:50.350] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:50.350] | : .  - attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:50.350] | : .  - attr(*, "untweakable")= chr "persistent"
[08:07:50.350] | : .  - attr(*, "call")= language plan(strategy)
[08:07:50.353] | : . init: TRUE
[08:07:50.353] | : . makeFutureBackend(<multisession>) ...
[08:07:50.353] | : . ' Backend function: <‘NULL’>
[08:07:50.353] | : . ' Evaluator tweak arguments: [n=0]
[08:07:50.353] | : . '  list()
[08:07:50.353] | : . ' Evaluator formal arguments: [n=4]
[08:07:50.353] | : . '  list()
[08:07:50.354] | : . ' Backend factory arguments: [n=4]
[08:07:50.354] | : . ' Dotted pair list of 4
[08:07:50.354] | : . '  $ workers     : language availableCores()
[08:07:50.354] | : . '  $ rscript_libs: language .libPaths()
[08:07:50.354] | : . '  $ gc          : logi FALSE
[08:07:50.354] | : . '  $ earlySignal : logi FALSE
[08:07:50.355] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ...
[08:07:50.355] | : . ' , Arguments:
[08:07:50.355] | : . ' , List of 5
[08:07:50.355] | : . ' ,  $ workers     : Named int 2
[08:07:50.355] | : . ' ,   ..- attr(*, "names")= chr "mc.cores"
[08:07:50.355] | : . ' ,  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:07:50.355] | : . ' ,  $ interrupts  : logi TRUE
[08:07:50.355] | : . ' ,  $ gc          : logi FALSE
[08:07:50.355] | : . ' ,  $ earlySignal : logi FALSE
[08:07:50.360] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[08:07:50.360] | : . ' , ; workers: 2
[08:07:50.360] | : . ' , ; getCluster() ...
[08:07:50.360] | : . ' , ; getCluster() ... done
[08:07:50.360] | : . ' , ; Stopping existing cluster ...
[08:07:50.360] | : . ' , ; ` No pre-existing cluster. Skipping
[08:07:50.360] | : . ' , ; Stopping existing cluster ... done
[08:07:50.360] | : . ' , ; Starting new cluster ...
[08:07:50.360] | : . ' , ; ` makeCluster(workers, ...) ...
[08:07:50.360] | : . ' , ; ` | Arguments:
[08:07:50.361] | : . ' , ; ` | List of 2
[08:07:50.361] | : . ' , ; ` |  $             : int 2
[08:07:50.361] | : . ' , ; ` |  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:07:50.362] | : . ' , ; ` | .makeCluster() ...
[08:07:50.362] | : . ' , ; ` | : workers: ‘2’
[08:07:50.363] | : . ' , ; ` | : R_FUTURE_PLAN: NA
[08:07:50.363] | : . ' , ; ` | : parallelly::makeClusterPSOCK() arguments:
[08:07:50.363] | : . ' , ; ` | : List of 2
[08:07:50.363] | : . ' , ; ` | :  $             : int 2
[08:07:50.363] | : . ' , ; ` | :  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:07:50.868] | : . ' , ; ` | : Generated cluster UUID
[08:07:50.868] | : . ' , ; ` | : Cluster UUID: ‘e37a289dcbe3654181a8f93123793267’
[08:07:50.868] | : . ' , ; ` | : Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:50.871] | : . ' , ; ` | .makeCluster() ... done
[08:07:50.871] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:50.872] | : . ' , ; ` makeCluster(workers, ...) ... done
[08:07:50.872] | : . ' , ; ` Number of workers: 2
[08:07:50.872] | : . ' , ; ` Workers UUID: ‘e37a289dcbe3654181a8f93123793267’
[08:07:50.873] | : . ' , ; Starting new cluster ... done
[08:07:50.873] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[08:07:50.873] | : . ' , Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:50.873] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ... done
[08:07:50.873] | : . makeFutureBackend(<multisession>) ... done
[08:07:50.873] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.873] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:50.874] | : . plan(): nbrOfWorkers() = 2
[08:07:50.874] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:07:50.874] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:07:50.874] | future(..., label = NULL) ...
[08:07:50.874] | : lazy: FALSE
[08:07:50.874] | : stdout: TRUE
[08:07:50.874] | : conditions: [n=1] ‘condition’
[08:07:50.874] | : gc: FALSE
[08:07:50.874] | : earlySignal: FALSE
[08:07:50.874] | : getGlobalsAndPackages() ...
[08:07:50.875] | : . Searching for globals ...
[08:07:50.878] | : . ' globals found: [1] ‘{’
[08:07:50.878] | : . Searching for globals ... done
[08:07:50.878] | : . Resolving globals: FALSE
[08:07:50.878] | : . Search for packages associated with the globals ...
[08:07:50.878] | : . ' Packages associated with globals: [1] ‘base’
[08:07:50.878] | : . ' Packages: [1] ‘base’
[08:07:50.878] | : . Search for packages associated with the globals ... done
[08:07:50.879] | : . Packages after dropping 'base': [0] 
[08:07:50.879] | : . globals: [0] 
[08:07:50.879] | : . packages: [0] 
[08:07:50.879] | : getGlobalsAndPackages() ... done
[08:07:50.879] | : run() for ‘Future’ (<unnamed-16>) ...
[08:07:50.879] | : . state: ‘created’
[08:07:50.879] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.879] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:50.880] | : . Using MultisessionFutureBackend ...
[08:07:50.880] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:07:50.880] | : . ' Launching futures ...
[08:07:50.880] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:07:50.880] | : . ' , ; Workers: [n=2]
[08:07:50.880] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:50.882] | : . ' , ; FutureRegistry: ‘workers-e37a289dcbe3654181a8f93123793267’
[08:07:50.882] | : . ' , ; requestWorker() ...
[08:07:50.882] | : . ' , ; ` requestNode() ...
[08:07:50.882] | : . ' , ; ` | Number of workers: 2
[08:07:50.882] | : . ' , ; ` | Polling for a free worker ...
[08:07:50.882] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ...
[08:07:50.883] | : . ' , ; ` | : . Created empty registry ‘workers-e37a289dcbe3654181a8f93123793267’
[08:07:50.883] | : . ' , ; ` | : . Listing all futures
[08:07:50.883] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:50.883] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ... done
[08:07:50.883] | : . ' , ; ` | : Total time: 0
[08:07:50.883] | : . ' , ; ` | Polling for a free worker ... done
[08:07:50.883] | : . ' , ; ` | FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ...
[08:07:50.883] | : . ' , ; ` | : Listing all futures
[08:07:50.883] | : . ' , ; ` | : Number of registered futures: 0
[08:07:50.884] | : . ' , ; ` | FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ... done
[08:07:50.884] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:07:50.884] | : . ' , ; ` | Index of first available worker: 1
[08:07:50.884] | : . ' , ; ` | Validate that the worker is functional ...
[08:07:50.949] | : . ' , ; ` | : Worker is functional
[08:07:50.950] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ...
[08:07:50.950] | : . ' , ; ` | : . Listing all futures
[08:07:50.950] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:50.950] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ... done
[08:07:50.950] | : . ' , ; ` | Validate that the worker is functional ... done
[08:07:50.950] | : . ' , ; ` requestNode() ... done
[08:07:50.951] | : . ' , ; ` cluster node index: 1
[08:07:50.951] | : . ' , ; requestWorker() ... done
[08:07:50.951] | : . ' , ; eraseGlobalEnvironment() ...
[08:07:50.952] | : . ' , ; eraseGlobalEnvironment() ... done
[08:07:50.952] | : . ' , ; launchFuture() ...
[08:07:50.952] | : . ' , ; ` cluster node index: 1
[08:07:50.952] | : . ' , ; ` getFutureData() ...
[08:07:50.952] | : . ' , ; ` | getFutureCore() ...
[08:07:50.952] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:07:50.952] | : . ' , ; ` | getFutureCore() ... done
[08:07:50.952] | : . ' , ; ` | getFutureCapture() ...
[08:07:50.953] | : . ' , ; ` | getFutureCapture() ... done
[08:07:50.953] | : . ' , ; ` | getFutureContext() ...
[08:07:50.953] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.953] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:07:50.953] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:50.953] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:07:50.954] | : . ' , ; ` | getFutureContext() ... done
[08:07:50.954] | : . ' , ; ` getFutureData() ... done
[08:07:50.954] | : . ' , ; ` FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'add', earlySignal = 0) ...
[08:07:50.954] | : . ' , ; ` | Appended future to position #1
[08:07:50.955] | : . ' , ; ` | Number of registered futures: 1
[08:07:50.955] | : . ' , ; ` FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'add', earlySignal = 0) ... done
[08:07:50.955] | : . ' , ; launchFuture() ... done
[08:07:50.955] | : . ' , ; MultisessionFuture started
[08:07:50.955] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:07:50.955] | : . ' Launching futures ... done
[08:07:50.955] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:50.956] | : . Using MultisessionFutureBackend ... done
[08:07:50.956] | : run() for ‘Future’ (<unnamed-16>) ... done
[08:07:50.956] | future(..., label = NULL) ... done
[08:07:50.956] | future(..., label = NULL) ...
[08:07:50.956] | : lazy: FALSE
[08:07:50.956] | : stdout: TRUE
[08:07:50.956] | : conditions: [n=1] ‘condition’
[08:07:50.957] | : gc: FALSE
[08:07:50.957] | : earlySignal: FALSE
[08:07:50.957] | : getGlobalsAndPackages() ...
[08:07:50.957] | : . Searching for globals ...
[08:07:50.961] | : . ' globals found: [1] ‘{’
[08:07:50.961] | : . Searching for globals ... done
[08:07:50.961] | : . Resolving globals: FALSE
[08:07:50.961] | : . Search for packages associated with the globals ...
[08:07:50.962] | : . ' Packages associated with globals: [1] ‘base’
[08:07:50.962] | : . ' Packages: [1] ‘base’
[08:07:50.962] | : . Search for packages associated with the globals ... done
[08:07:50.962] | : . Packages after dropping 'base': [0] 
[08:07:50.962] | : . globals: [0] 
[08:07:50.962] | : . packages: [0] 
[08:07:50.962] | : getGlobalsAndPackages() ... done
[08:07:50.963] | : run() for ‘Future’ (<unnamed-17>) ...
[08:07:50.963] | : . state: ‘created’
[08:07:50.963] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:50.963] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:50.963] | : . Using MultisessionFutureBackend ...
[08:07:50.963] | : . ' Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:07:50.964] | : . ' Launching futures ...
[08:07:50.964] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:07:50.964] | : . ' , ; Workers: [n=2]
[08:07:50.964] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:50.966] | : . ' , ; FutureRegistry: ‘workers-e37a289dcbe3654181a8f93123793267’
[08:07:50.966] | : . ' , ; requestWorker() ...
[08:07:50.966] | : . ' , ; ` requestNode() ...
[08:07:50.966] | : . ' , ; ` | Number of workers: 2
[08:07:50.967] | : . ' , ; ` | Polling for a free worker ...
[08:07:50.967] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ...
[08:07:50.967] | : . ' , ; ` | : . Listing all futures
[08:07:50.967] | : . ' , ; ` | : . Number of registered futures: 1
[08:07:50.967] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ... done
[08:07:50.967] | : . ' , ; ` | : Total time: 0
[08:07:50.967] | : . ' , ; ` | Polling for a free worker ... done
[08:07:50.968] | : . ' , ; ` | FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ...
[08:07:50.968] | : . ' , ; ` | : Listing all futures
[08:07:50.968] | : . ' , ; ` | : Number of registered futures: 1
[08:07:50.968] | : . ' , ; ` | FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ... done
[08:07:50.968] | : . ' , ; ` | avail: [n=2] ‘2’
[08:07:50.968] | : . ' , ; ` | Index of first available worker: 2
[08:07:50.968] | : . ' , ; ` | Validate that the worker is functional ...
[08:07:51.036] | : . ' , ; ` | : Worker is functional
[08:07:51.036] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ...
[08:07:51.037] | : . ' , ; ` | : . Listing all futures
[08:07:51.037] | : . ' , ; ` | : . Number of registered futures: 1
[08:07:51.037] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ... done
[08:07:51.037] | : . ' , ; ` | Validate that the worker is functional ... done
[08:07:51.037] | : . ' , ; ` requestNode() ... done
[08:07:51.038] | : . ' , ; ` cluster node index: 2
[08:07:51.038] | : . ' , ; requestWorker() ... done
[08:07:51.038] | : . ' , ; eraseGlobalEnvironment() ...
[08:07:51.039] | : . ' , ; eraseGlobalEnvironment() ... done
[08:07:51.039] | : . ' , ; launchFuture() ...
[08:07:51.039] | : . ' , ; ` cluster node index: 2
[08:07:51.039] | : . ' , ; ` getFutureData() ...
[08:07:51.039] | : . ' , ; ` | getFutureCore() ...
[08:07:51.040] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:07:51.040] | : . ' , ; ` | getFutureCore() ... done
[08:07:51.040] | : . ' , ; ` | getFutureCapture() ...
[08:07:51.040] | : . ' , ; ` | getFutureCapture() ... done
[08:07:51.040] | : . ' , ; ` | getFutureContext() ...
[08:07:51.041] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:51.041] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:07:51.041] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:51.042] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:07:51.042] | : . ' , ; ` | getFutureContext() ... done
[08:07:51.042] | : . ' , ; ` getFutureData() ... done
[08:07:51.043] | : . ' , ; ` FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'add', earlySignal = 0) ...
[08:07:51.043] | : . ' , ; ` | Appended future to position #2
[08:07:51.043] | : . ' , ; ` | Number of registered futures: 2
[08:07:51.043] | : . ' , ; ` FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'add', earlySignal = 0) ... done
[08:07:51.044] | : . ' , ; launchFuture() ... done
[08:07:51.044] | : . ' , ; MultisessionFuture started
[08:07:51.044] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:07:51.044] | : . ' Launching futures ... done
[08:07:51.045] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:51.045] | : . Using MultisessionFutureBackend ... done
[08:07:51.045] | : run() for ‘Future’ (<unnamed-17>) ... done
[08:07:51.045] | future(..., label = NULL) ... done
[08:07:51.046] | value() for MultisessionFuture (<unnamed-16>) ...
[08:07:51.046] | : result() for ClusterFuture ...
[08:07:51.047] | : . assertValidConnection() ...
[08:07:51.047] | : . ' cluster node index: 1
[08:07:51.048] | : . assertValidConnection() ... done
[08:07:51.048] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:07:51.049] | : . ' cluster node index: 1
[08:07:51.064] | : . ' [1] TRUE
[08:07:51.065] | : . ' received data:
[08:07:51.065] | : . ' List of 5
[08:07:51.065] | : . '  $ type   : chr "VALUE"
[08:07:51.065] | : . '  $ value  :List of 16
[08:07:51.065] | : . '   ..$ value              : num 2
[08:07:51.065] | : . '   ..$ visible            : logi TRUE
[08:07:51.065] | : . '   ..$ stdout             : chr ""
[08:07:51.065] | : . '   ..$ conditions         : list()
[08:07:51.065] | : . '   ..$ rng                : logi FALSE
[08:07:51.065] | : . '   ..$ seed               : NULL
[08:07:51.065] | : . '   ..$ misuseGlobalEnv    : NULL
[08:07:51.065] | : . '   ..$ misuseConnections  :List of 3
[08:07:51.065] | : . '   .. ..$ added   : NULL
[08:07:51.065] | : . '   .. ..$ removed : NULL
[08:07:51.065] | : . '   .. ..$ replaced: NULL
[08:07:51.065] | : . '   ..$ misuseDevices      : NULL
[08:07:51.065] | : . '   ..$ misuseDefaultDevice: list()
[08:07:51.065] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:50"
[08:07:51.065] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:51"
[08:07:51.065] | : . '   ..$ uuid               : chr [1:2] "87aff4716e6c17114cd1a8a4c28de6fe" "16"
[08:07:51.065] | : . '   ..$ session_uuid       : chr "b85c0cc4937e11f1e9817244cb71c5df"
[08:07:51.065] | : . '   .. ..- attr(*, "source")=List of 5
[08:07:51.065] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:07:51.065] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:51.065] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:51.065] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:51.065] | : . '   .. .. ..$ pid   : int 68440
[08:07:51.065] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:07:50"
[08:07:51.065] | : . '   .. .. ..$ random: int 2147483647
[08:07:51.065] | : . '   ..$ r_info             :List of 4
[08:07:51.065] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:51.065] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:07:51.065] | : . '   .. ..$ os           : chr "unix"
[08:07:51.065] | : . '   .. ..$ os_name      : chr "Linux"
[08:07:51.065] | : . '   .. ..$ captures_utf8: logi TRUE
[08:07:51.065] | : . '   ..$ version            : chr "1.8"
[08:07:51.065] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:07:51.065] | : . '  $ success: logi TRUE
[08:07:51.065] | : . '  $ time   : 'proc_time' Named num [1:5] 0.064 0.006 0.069 0 0
[08:07:51.065] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:51.065] | : . '  $ tag    : NULL
[08:07:51.079] | : . ' Received FutureResult
[08:07:51.079] | : . ' FutureResult:
[08:07:51.079] | : . ' value: ‘numeric’
[08:07:51.079] | : . ' visible: TRUE
[08:07:51.079] | : . ' stdout: character
[08:07:51.079] | : . ' conditions: [n = 0] 
[08:07:51.079] | : . ' RNG used: FALSE
[08:07:51.079] | : . ' duration: 0.06666589 secs (started 2025-06-17 08:07:50.997484)
[08:07:51.079] | : . ' version: 1.8
[08:07:51.080] | : . ' FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'remove', earlySignal = 0) ...
[08:07:51.080] | : . ' , Removed future from position #1
[08:07:51.080] | : . ' , Number of registered futures: 1
[08:07:51.081] | : . ' FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'remove', earlySignal = 0) ... done
[08:07:51.081] | : . ' Erased future from future backend
[08:07:51.081] | : . ' result() for ClusterFuture ...
[08:07:51.081] | : . ' , result already collected: FutureResult
[08:07:51.081] | : . ' result() for ClusterFuture ... done
[08:07:51.081] | : . ' signalConditions() ...
[08:07:51.081] | : . ' , include = ‘immediateCondition’
[08:07:51.081] | : . ' , exclude = 
[08:07:51.082] | : . ' , resignal = FALSE
[08:07:51.082] | : . ' , Number of conditions: 0
[08:07:51.082] | : . ' ,  int 0
[08:07:51.082] | : . ' signalConditions() ... done
[08:07:51.082] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:07:51.083] | : result() for ClusterFuture ... done
[08:07:51.083] | : result() for ClusterFuture ...
[08:07:51.083] | : . result already collected: FutureResult
[08:07:51.083] | : result() for ClusterFuture ... done
[08:07:51.083] | : signalConditions() ...
[08:07:51.084] | : . include = ‘immediateCondition’
[08:07:51.084] | : . exclude = 
[08:07:51.084] | : . resignal = FALSE
[08:07:51.084] | : . Number of conditions: 0
[08:07:51.084] | : .  int 0
[08:07:51.085] | : signalConditions() ... done
[08:07:51.085] | : relay stdout ...
[08:07:51.085] | : relay stdout ... done
[08:07:51.086] | : check for misuse ...
[08:07:51.086] | : check for misuse ... done
[08:07:51.086] | value() for MultisessionFuture (<unnamed-16>) ... done
u$a = 2
[08:07:51.086] | value() for MultisessionFuture (<unnamed-17>) ...
[08:07:51.087] | : result() for ClusterFuture ...
[08:07:51.087] | : . assertValidConnection() ...
[08:07:51.087] | : . ' cluster node index: 2
[08:07:51.088] | : . assertValidConnection() ... done
[08:07:51.088] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:07:51.088] | : . ' cluster node index: 2
[08:07:51.135] | : . ' [1] TRUE
[08:07:51.135] | : . ' received data:
[08:07:51.137] | : . ' List of 5
[08:07:51.137] | : . '  $ type   : chr "VALUE"
[08:07:51.137] | : . '  $ value  :List of 16
[08:07:51.137] | : . '   ..$ value              : num 4
[08:07:51.137] | : . '   ..$ visible            : logi TRUE
[08:07:51.137] | : . '   ..$ stdout             : chr ""
[08:07:51.137] | : . '   ..$ conditions         : list()
[08:07:51.137] | : . '   ..$ rng                : logi FALSE
[08:07:51.137] | : . '   ..$ seed               : NULL
[08:07:51.137] | : . '   ..$ misuseGlobalEnv    : NULL
[08:07:51.137] | : . '   ..$ misuseConnections  :List of 3
[08:07:51.137] | : . '   .. ..$ added   : NULL
[08:07:51.137] | : . '   .. ..$ removed : NULL
[08:07:51.137] | : . '   .. ..$ replaced: NULL
[08:07:51.137] | : . '   ..$ misuseDevices      : NULL
[08:07:51.137] | : . '   ..$ misuseDefaultDevice: list()
[08:07:51.137] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:51"
[08:07:51.137] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:51"
[08:07:51.137] | : . '   ..$ uuid               : chr [1:2] "87aff4716e6c17114cd1a8a4c28de6fe" "17"
[08:07:51.137] | : . '   ..$ session_uuid       : chr "21deb4dea9158d4f26b2858585a51dee"
[08:07:51.137] | : . '   .. ..- attr(*, "source")=List of 5
[08:07:51.137] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:07:51.137] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:51.137] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:51.137] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:51.137] | : . '   .. .. ..$ pid   : int 68441
[08:07:51.137] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:07:51"
[08:07:51.137] | : . '   .. .. ..$ random: int 2147483647
[08:07:51.137] | : . '   ..$ r_info             :List of 4
[08:07:51.137] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:51.137] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:07:51.137] | : . '   .. ..$ os           : chr "unix"
[08:07:51.137] | : . '   .. ..$ os_name      : chr "Linux"
[08:07:51.137] | : . '   .. ..$ captures_utf8: logi TRUE
[08:07:51.137] | : . '   ..$ version            : chr "1.8"
[08:07:51.137] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:07:51.137] | : . '  $ success: logi TRUE
[08:07:51.137] | : . '  $ time   : 'proc_time' Named num [1:5] 0.051 0.001 0.051 0 0
[08:07:51.137] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:51.137] | : . '  $ tag    : NULL
[08:07:51.148] | : . ' Received FutureResult
[08:07:51.148] | : . ' FutureResult:
[08:07:51.148] | : . ' value: ‘numeric’
[08:07:51.148] | : . ' visible: TRUE
[08:07:51.148] | : . ' stdout: character
[08:07:51.148] | : . ' conditions: [n = 0] 
[08:07:51.148] | : . ' RNG used: FALSE
[08:07:51.148] | : . ' duration: 0.04870558 secs (started 2025-06-17 08:07:51.085826)
[08:07:51.148] | : . ' version: 1.8
[08:07:51.149] | : . ' FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'remove', earlySignal = 0) ...
[08:07:51.149] | : . ' , Removed future from position #1
[08:07:51.149] | : . ' , Number of registered futures: 0
[08:07:51.149] | : . ' FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'remove', earlySignal = 0) ... done
[08:07:51.149] | : . ' Erased future from future backend
[08:07:51.149] | : . ' result() for ClusterFuture ...
[08:07:51.149] | : . ' , result already collected: FutureResult
[08:07:51.149] | : . ' result() for ClusterFuture ... done
[08:07:51.150] | : . ' signalConditions() ...
[08:07:51.150] | : . ' , include = ‘immediateCondition’
[08:07:51.150] | : . ' , exclude = 
[08:07:51.150] | : . ' , resignal = FALSE
[08:07:51.150] | : . ' , Number of conditions: 0
[08:07:51.150] | : . ' ,  int 0
[08:07:51.150] | : . ' signalConditions() ... done
[08:07:51.151] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:07:51.151] | : result() for ClusterFuture ... done
[08:07:51.151] | : result() for ClusterFuture ...
[08:07:51.151] | : . result already collected: FutureResult
[08:07:51.151] | : result() for ClusterFuture ... done
[08:07:51.151] | : signalConditions() ...
[08:07:51.151] | : . include = ‘immediateCondition’
[08:07:51.151] | : . exclude = 
[08:07:51.151] | : . resignal = FALSE
[08:07:51.151] | : . Number of conditions: 0
[08:07:51.152] | : .  int 0
[08:07:51.152] | : signalConditions() ... done
[08:07:51.152] | : relay stdout ...
[08:07:51.152] | : relay stdout ... done
[08:07:51.152] | : check for misuse ...
[08:07:51.152] | : check for misuse ... done
[08:07:51.152] | value() for MultisessionFuture (<unnamed-17>) ... done
v$a = 4
[08:07:51.153] | future(..., label = NULL) ...
[08:07:51.153] | : lazy: FALSE
[08:07:51.153] | : stdout: TRUE
[08:07:51.153] | : conditions: [n=1] ‘condition’
[08:07:51.153] | : gc: FALSE
[08:07:51.153] | : earlySignal: FALSE
[08:07:51.153] | : getGlobalsAndPackages() ...
[08:07:51.153] | : . Searching for globals ...
[08:07:51.159] | : . ' globals found: [3] ‘{’, ‘*’, ‘a’
[08:07:51.159] | : . Searching for globals ... done
[08:07:51.159] | : . Resolving globals: FALSE
[08:07:51.159] | : . Search for packages associated with the globals ...
[08:07:51.159] | : . ' Packages associated with globals: [1] ‘base’
[08:07:51.160] | : . ' Packages: [1] ‘base’
[08:07:51.160] | : . Search for packages associated with the globals ... done
[08:07:51.160] | : . Packages after dropping 'base': [0] 
[08:07:51.160] | : . globals: [1] ‘a’
[08:07:51.160] | : . packages: [0] 
[08:07:51.160] | : getGlobalsAndPackages() ... done
[08:07:51.160] | : run() for ‘Future’ (<unnamed-18>) ...
[08:07:51.161] | : . state: ‘created’
[08:07:51.161] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:51.161] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:51.161] | : . Using MultisessionFutureBackend ...
[08:07:51.161] | : . ' Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:07:51.161] | : . ' Launching futures ...
[08:07:51.161] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:07:51.161] | : . ' , ; Workers: [n=2]
[08:07:51.161] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:51.163] | : . ' , ; FutureRegistry: ‘workers-e37a289dcbe3654181a8f93123793267’
[08:07:51.163] | : . ' , ; requestWorker() ...
[08:07:51.163] | : . ' , ; ` requestNode() ...
[08:07:51.163] | : . ' , ; ` | Number of workers: 2
[08:07:51.163] | : . ' , ; ` | Polling for a free worker ...
[08:07:51.164] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ...
[08:07:51.164] | : . ' , ; ` | : . Listing all futures
[08:07:51.164] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:51.164] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ... done
[08:07:51.164] | : . ' , ; ` | : Total time: 0
[08:07:51.164] | : . ' , ; ` | Polling for a free worker ... done
[08:07:51.164] | : . ' , ; ` | FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ...
[08:07:51.164] | : . ' , ; ` | : Listing all futures
[08:07:51.164] | : . ' , ; ` | : Number of registered futures: 0
[08:07:51.164] | : . ' , ; ` | FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ... done
[08:07:51.165] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:07:51.165] | : . ' , ; ` | Index of first available worker: 1
[08:07:51.165] | : . ' , ; ` | Validate that the worker is functional ...
[08:07:51.262] | : . ' , ; ` | : Worker is functional
[08:07:51.262] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ...
[08:07:51.262] | : . ' , ; ` | : . Listing all futures
[08:07:51.262] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:51.262] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ... done
[08:07:51.262] | : . ' , ; ` | Validate that the worker is functional ... done
[08:07:51.262] | : . ' , ; ` requestNode() ... done
[08:07:51.262] | : . ' , ; ` cluster node index: 1
[08:07:51.263] | : . ' , ; requestWorker() ... done
[08:07:51.263] | : . ' , ; eraseGlobalEnvironment() ...
[08:07:51.263] | : . ' , ; eraseGlobalEnvironment() ... done
[08:07:51.263] | : . ' , ; launchFuture() ...
[08:07:51.263] | : . ' , ; ` cluster node index: 1
[08:07:51.263] | : . ' , ; ` getFutureData() ...
[08:07:51.263] | : . ' , ; ` | getFutureCore() ...
[08:07:51.264] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:07:51.264] | : . ' , ; ` | getFutureCore() ... done
[08:07:51.264] | : . ' , ; ` | getFutureCapture() ...
[08:07:51.264] | : . ' , ; ` | getFutureCapture() ... done
[08:07:51.264] | : . ' , ; ` | getFutureContext() ...
[08:07:51.264] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:51.264] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:07:51.264] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:51.264] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:07:51.265] | : . ' , ; ` | getFutureContext() ... done
[08:07:51.265] | : . ' , ; ` getFutureData() ... done
[08:07:51.265] | : . ' , ; ` FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'add', earlySignal = 0) ...
[08:07:51.265] | : . ' , ; ` | Appended future to position #1
[08:07:51.265] | : . ' , ; ` | Number of registered futures: 1
[08:07:51.265] | : . ' , ; ` FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'add', earlySignal = 0) ... done
[08:07:51.265] | : . ' , ; launchFuture() ... done
[08:07:51.266] | : . ' , ; MultisessionFuture started
[08:07:51.266] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:07:51.266] | : . ' Launching futures ... done
[08:07:51.266] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:51.266] | : . Using MultisessionFutureBackend ... done
[08:07:51.266] | : run() for ‘Future’ (<unnamed-18>) ... done
[08:07:51.266] | future(..., label = NULL) ... done
[08:07:51.266] | value() for MultisessionFuture (<unnamed-18>) ...
[08:07:51.267] | : result() for ClusterFuture ...
[08:07:51.267] | : . assertValidConnection() ...
[08:07:51.267] | : . ' cluster node index: 1
[08:07:51.267] | : . assertValidConnection() ... done
[08:07:51.267] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:07:51.267] | : . ' cluster node index: 1
[08:07:51.309] | : . ' [1] TRUE
[08:07:51.309] | : . ' received data:
[08:07:51.309] | : . ' List of 5
[08:07:51.309] | : . '  $ type   : chr "VALUE"
[08:07:51.309] | : . '  $ value  :List of 16
[08:07:51.309] | : . '   ..$ value              : num 2
[08:07:51.309] | : . '   ..$ visible            : logi TRUE
[08:07:51.309] | : . '   ..$ stdout             : chr ""
[08:07:51.309] | : . '   ..$ conditions         : list()
[08:07:51.309] | : . '   ..$ rng                : logi FALSE
[08:07:51.309] | : . '   ..$ seed               : NULL
[08:07:51.309] | : . '   ..$ misuseGlobalEnv    : NULL
[08:07:51.309] | : . '   ..$ misuseConnections  :List of 3
[08:07:51.309] | : . '   .. ..$ added   : NULL
[08:07:51.309] | : . '   .. ..$ removed : NULL
[08:07:51.309] | : . '   .. ..$ replaced: NULL
[08:07:51.309] | : . '   ..$ misuseDevices      : NULL
[08:07:51.309] | : . '   ..$ misuseDefaultDevice: list()
[08:07:51.309] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:51"
[08:07:51.309] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:51"
[08:07:51.309] | : . '   ..$ uuid               : chr [1:2] "87aff4716e6c17114cd1a8a4c28de6fe" "18"
[08:07:51.309] | : . '   ..$ session_uuid       : chr "b85c0cc4937e11f1e9817244cb71c5df"
[08:07:51.309] | : . '   .. ..- attr(*, "source")=List of 5
[08:07:51.309] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:07:51.309] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:51.309] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:51.309] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:51.309] | : . '   .. .. ..$ pid   : int 68440
[08:07:51.309] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:07:50"
[08:07:51.309] | : . '   .. .. ..$ random: int 2147483647
[08:07:51.309] | : . '   ..$ r_info             :List of 4
[08:07:51.309] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:51.309] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:07:51.309] | : . '   .. ..$ os           : chr "unix"
[08:07:51.309] | : . '   .. ..$ os_name      : chr "Linux"
[08:07:51.309] | : . '   .. ..$ captures_utf8: logi TRUE
[08:07:51.309] | : . '   ..$ version            : chr "1.8"
[08:07:51.309] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:07:51.309] | : . '  $ success: logi TRUE
[08:07:51.309] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:07:51.309] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:51.309] | : . '  $ tag    : NULL
[08:07:51.320] | : . ' Received FutureResult
[08:07:51.320] | : . ' FutureResult:
[08:07:51.320] | : . ' value: ‘numeric’
[08:07:51.320] | : . ' visible: TRUE
[08:07:51.320] | : . ' stdout: character
[08:07:51.320] | : . ' conditions: [n = 0] 
[08:07:51.320] | : . ' RNG used: FALSE
[08:07:51.320] | : . ' duration: 0.00271821 secs (started 2025-06-17 08:07:51.30584)
[08:07:51.320] | : . ' version: 1.8
[08:07:51.321] | : . ' FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'remove', earlySignal = 0) ...
[08:07:51.321] | : . ' , Removed future from position #1
[08:07:51.321] | : . ' , Number of registered futures: 0
[08:07:51.321] | : . ' FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'remove', earlySignal = 0) ... done
[08:07:51.321] | : . ' Erased future from future backend
[08:07:51.321] | : . ' result() for ClusterFuture ...
[08:07:51.321] | : . ' , result already collected: FutureResult
[08:07:51.321] | : . ' result() for ClusterFuture ... done
[08:07:51.321] | : . ' signalConditions() ...
[08:07:51.322] | : . ' , include = ‘immediateCondition’
[08:07:51.322] | : . ' , exclude = 
[08:07:51.322] | : . ' , resignal = FALSE
[08:07:51.322] | : . ' , Number of conditions: 0
[08:07:51.322] | : . ' ,  int 0
[08:07:51.322] | : . ' signalConditions() ... done
[08:07:51.322] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:07:51.323] | : result() for ClusterFuture ... done
[08:07:51.323] | : result() for ClusterFuture ...
[08:07:51.323] | : . result already collected: FutureResult
[08:07:51.323] | : result() for ClusterFuture ... done
[08:07:51.323] | : signalConditions() ...
[08:07:51.323] | : . include = ‘immediateCondition’
[08:07:51.323] | : . exclude = 
[08:07:51.323] | : . resignal = FALSE
[08:07:51.323] | : . Number of conditions: 0
[08:07:51.323] | : .  int 0
[08:07:51.324] | : signalConditions() ... done
[08:07:51.324] | : relay stdout ...
[08:07:51.324] | : relay stdout ... done
[08:07:51.324] | : check for misuse ...
[08:07:51.324] | : check for misuse ... done
[08:07:51.324] | value() for MultisessionFuture (<unnamed-18>) ... done
[08:07:51.325] | future(..., label = NULL) ...
[08:07:51.325] | : lazy: FALSE
[08:07:51.325] | : stdout: TRUE
[08:07:51.325] | : conditions: [n=1] ‘condition’
[08:07:51.325] | : gc: FALSE
[08:07:51.325] | : earlySignal: FALSE
[08:07:51.325] | : getGlobalsAndPackages() ...
[08:07:51.325] | : . Searching for globals ...
[08:07:51.330] | : . ' globals found: [3] ‘{’, ‘*’, ‘a’
[08:07:51.331] | : . Searching for globals ... done
[08:07:51.331] | : . Resolving globals: FALSE
[08:07:51.331] | : . Search for packages associated with the globals ...
[08:07:51.331] | : . ' Packages associated with globals: [1] ‘base’
[08:07:51.331] | : . ' Packages: [1] ‘base’
[08:07:51.332] | : . Search for packages associated with the globals ... done
[08:07:51.332] | : . Packages after dropping 'base': [0] 
[08:07:51.332] | : . globals: [1] ‘a’
[08:07:51.332] | : . packages: [0] 
[08:07:51.332] | : getGlobalsAndPackages() ... done
[08:07:51.332] | : run() for ‘Future’ (<unnamed-19>) ...
[08:07:51.332] | : . state: ‘created’
[08:07:51.332] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:51.333] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:51.333] | : . Using MultisessionFutureBackend ...
[08:07:51.333] | : . ' Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:07:51.333] | : . ' Launching futures ...
[08:07:51.333] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:07:51.333] | : . ' , ; Workers: [n=2]
[08:07:51.333] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:51.335] | : . ' , ; FutureRegistry: ‘workers-e37a289dcbe3654181a8f93123793267’
[08:07:51.335] | : . ' , ; requestWorker() ...
[08:07:51.335] | : . ' , ; ` requestNode() ...
[08:07:51.335] | : . ' , ; ` | Number of workers: 2
[08:07:51.335] | : . ' , ; ` | Polling for a free worker ...
[08:07:51.335] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ...
[08:07:51.335] | : . ' , ; ` | : . Listing all futures
[08:07:51.336] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:51.336] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ... done
[08:07:51.336] | : . ' , ; ` | : Total time: 0
[08:07:51.336] | : . ' , ; ` | Polling for a free worker ... done
[08:07:51.336] | : . ' , ; ` | FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ...
[08:07:51.336] | : . ' , ; ` | : Listing all futures
[08:07:51.336] | : . ' , ; ` | : Number of registered futures: 0
[08:07:51.336] | : . ' , ; ` | FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ... done
[08:07:51.336] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:07:51.336] | : . ' , ; ` | Index of first available worker: 1
[08:07:51.337] | : . ' , ; ` | Validate that the worker is functional ...
[08:07:51.435] | : . ' , ; ` | : Worker is functional
[08:07:51.436] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ...
[08:07:51.436] | : . ' , ; ` | : . Listing all futures
[08:07:51.436] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:51.436] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ... done
[08:07:51.436] | : . ' , ; ` | Validate that the worker is functional ... done
[08:07:51.436] | : . ' , ; ` requestNode() ... done
[08:07:51.436] | : . ' , ; ` cluster node index: 1
[08:07:51.436] | : . ' , ; requestWorker() ... done
[08:07:51.437] | : . ' , ; eraseGlobalEnvironment() ...
[08:07:51.437] | : . ' , ; eraseGlobalEnvironment() ... done
[08:07:51.437] | : . ' , ; launchFuture() ...
[08:07:51.437] | : . ' , ; ` cluster node index: 1
[08:07:51.437] | : . ' , ; ` getFutureData() ...
[08:07:51.437] | : . ' , ; ` | getFutureCore() ...
[08:07:51.438] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:07:51.438] | : . ' , ; ` | getFutureCore() ... done
[08:07:51.438] | : . ' , ; ` | getFutureCapture() ...
[08:07:51.438] | : . ' , ; ` | getFutureCapture() ... done
[08:07:51.438] | : . ' , ; ` | getFutureContext() ...
[08:07:51.438] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:51.438] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:07:51.438] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:51.438] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:07:51.438] | : . ' , ; ` | getFutureContext() ... done
[08:07:51.439] | : . ' , ; ` getFutureData() ... done
[08:07:51.439] | : . ' , ; ` FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'add', earlySignal = 0) ...
[08:07:51.439] | : . ' , ; ` | Appended future to position #1
[08:07:51.439] | : . ' , ; ` | Number of registered futures: 1
[08:07:51.439] | : . ' , ; ` FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'add', earlySignal = 0) ... done
[08:07:51.439] | : . ' , ; launchFuture() ... done
[08:07:51.439] | : . ' , ; MultisessionFuture started
[08:07:51.440] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:07:51.440] | : . ' Launching futures ... done
[08:07:51.440] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:51.440] | : . Using MultisessionFutureBackend ... done
[08:07:51.440] | : run() for ‘Future’ (<unnamed-19>) ... done
[08:07:51.440] | future(..., label = NULL) ... done
[08:07:51.440] | value() for MultisessionFuture (<unnamed-19>) ...
[08:07:51.440] | : result() for ClusterFuture ...
[08:07:51.441] | : . assertValidConnection() ...
[08:07:51.441] | : . ' cluster node index: 1
[08:07:51.441] | : . assertValidConnection() ... done
[08:07:51.441] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:07:51.441] | : . ' cluster node index: 1
[08:07:51.482] | : . ' [1] TRUE
[08:07:51.483] | : . ' received data:
[08:07:51.483] | : . ' List of 5
[08:07:51.483] | : . '  $ type   : chr "VALUE"
[08:07:51.483] | : . '  $ value  :List of 16
[08:07:51.483] | : . '   ..$ value              : num 2
[08:07:51.483] | : . '   ..$ visible            : logi TRUE
[08:07:51.483] | : . '   ..$ stdout             : chr ""
[08:07:51.483] | : . '   ..$ conditions         : list()
[08:07:51.483] | : . '   ..$ rng                : logi FALSE
[08:07:51.483] | : . '   ..$ seed               : NULL
[08:07:51.483] | : . '   ..$ misuseGlobalEnv    : NULL
[08:07:51.483] | : . '   ..$ misuseConnections  :List of 3
[08:07:51.483] | : . '   .. ..$ added   : NULL
[08:07:51.483] | : . '   .. ..$ removed : NULL
[08:07:51.483] | : . '   .. ..$ replaced: NULL
[08:07:51.483] | : . '   ..$ misuseDevices      : NULL
[08:07:51.483] | : . '   ..$ misuseDefaultDevice: list()
[08:07:51.483] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:51"
[08:07:51.483] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:51"
[08:07:51.483] | : . '   ..$ uuid               : chr [1:2] "87aff4716e6c17114cd1a8a4c28de6fe" "19"
[08:07:51.483] | : . '   ..$ session_uuid       : chr "b85c0cc4937e11f1e9817244cb71c5df"
[08:07:51.483] | : . '   .. ..- attr(*, "source")=List of 5
[08:07:51.483] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:07:51.483] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:51.483] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:51.483] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:51.483] | : . '   .. .. ..$ pid   : int 68440
[08:07:51.483] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:07:50"
[08:07:51.483] | : . '   .. .. ..$ random: int 2147483647
[08:07:51.483] | : . '   ..$ r_info             :List of 4
[08:07:51.483] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:51.483] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:07:51.483] | : . '   .. ..$ os           : chr "unix"
[08:07:51.483] | : . '   .. ..$ os_name      : chr "Linux"
[08:07:51.483] | : . '   .. ..$ captures_utf8: logi TRUE
[08:07:51.483] | : . '   ..$ version            : chr "1.8"
[08:07:51.483] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:07:51.483] | : . '  $ success: logi TRUE
[08:07:51.483] | : . '  $ time   : 'proc_time' Named num [1:5] 0.002 0 0.003 0 0
[08:07:51.483] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:51.483] | : . '  $ tag    : NULL
[08:07:51.494] | : . ' Received FutureResult
[08:07:51.494] | : . ' FutureResult:
[08:07:51.494] | : . ' value: ‘numeric’
[08:07:51.494] | : . ' visible: TRUE
[08:07:51.494] | : . ' stdout: character
[08:07:51.494] | : . ' conditions: [n = 0] 
[08:07:51.494] | : . ' RNG used: FALSE
[08:07:51.494] | : . ' duration: 0.00247407 secs (started 2025-06-17 08:07:51.479817)
[08:07:51.494] | : . ' version: 1.8
[08:07:51.494] | : . ' FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'remove', earlySignal = 0) ...
[08:07:51.494] | : . ' , Removed future from position #1
[08:07:51.495] | : . ' , Number of registered futures: 0
[08:07:51.495] | : . ' FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'remove', earlySignal = 0) ... done
[08:07:51.495] | : . ' Erased future from future backend
[08:07:51.495] | : . ' result() for ClusterFuture ...
[08:07:51.495] | : . ' , result already collected: FutureResult
[08:07:51.495] | : . ' result() for ClusterFuture ... done
[08:07:51.495] | : . ' signalConditions() ...
[08:07:51.495] | : . ' , include = ‘immediateCondition’
[08:07:51.495] | : . ' , exclude = 
[08:07:51.495] | : . ' , resignal = FALSE
[08:07:51.496] | : . ' , Number of conditions: 0
[08:07:51.496] | : . ' ,  int 0
[08:07:51.496] | : . ' signalConditions() ... done
[08:07:51.496] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:07:51.496] | : result() for ClusterFuture ... done
[08:07:51.496] | : result() for ClusterFuture ...
[08:07:51.497] | : . result already collected: FutureResult
[08:07:51.497] | : result() for ClusterFuture ... done
[08:07:51.497] | : signalConditions() ...
[08:07:51.497] | : . include = ‘immediateCondition’
[08:07:51.497] | : . exclude = 
[08:07:51.497] | : . resignal = FALSE
[08:07:51.497] | : . Number of conditions: 0
[08:07:51.497] | : .  int 0
[08:07:51.498] | : signalConditions() ... done
[08:07:51.498] | : relay stdout ...
[08:07:51.498] | : relay stdout ... done
[08:07:51.498] | : check for misuse ...
[08:07:51.498] | : check for misuse ... done
[08:07:51.498] | value() for MultisessionFuture (<unnamed-19>) ... done
[08:07:51.498] | future(..., label = NULL) ...
[08:07:51.498] | : lazy: FALSE
[08:07:51.499] | : stdout: TRUE
[08:07:51.499] | : conditions: [n=1] ‘condition’
[08:07:51.499] | : gc: FALSE
[08:07:51.499] | : earlySignal: FALSE
[08:07:51.499] | : getGlobalsAndPackages() ...
[08:07:51.499] | : . Searching for globals ...
[08:07:51.504] | : . ' globals found: [3] ‘{’, ‘*’, ‘a’
[08:07:51.504] | : . Searching for globals ... done
[08:07:51.504] | : . Resolving globals: FALSE
[08:07:51.505] | : . Search for packages associated with the globals ...
[08:07:51.505] | : . ' Packages associated with globals: [1] ‘base’
[08:07:51.505] | : . ' Packages: [1] ‘base’
[08:07:51.505] | : . Search for packages associated with the globals ... done
[08:07:51.505] | : . Packages after dropping 'base': [0] 
[08:07:51.505] | : . globals: [1] ‘a’
[08:07:51.506] | : . packages: [0] 
[08:07:51.506] | : getGlobalsAndPackages() ... done
[08:07:51.506] | : run() for ‘Future’ (<unnamed-20>) ...
[08:07:51.506] | : . state: ‘created’
[08:07:51.506] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:51.506] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:51.506] | : . Using MultisessionFutureBackend ...
[08:07:51.506] | : . ' Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:07:51.507] | : . ' Launching futures ...
[08:07:51.507] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:07:51.507] | : . ' , ; Workers: [n=2]
[08:07:51.507] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:51.508] | : . ' , ; FutureRegistry: ‘workers-e37a289dcbe3654181a8f93123793267’
[08:07:51.509] | : . ' , ; requestWorker() ...
[08:07:51.509] | : . ' , ; ` requestNode() ...
[08:07:51.509] | : . ' , ; ` | Number of workers: 2
[08:07:51.509] | : . ' , ; ` | Polling for a free worker ...
[08:07:51.509] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ...
[08:07:51.509] | : . ' , ; ` | : . Listing all futures
[08:07:51.509] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:51.509] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ... done
[08:07:51.509] | : . ' , ; ` | : Total time: 0
[08:07:51.510] | : . ' , ; ` | Polling for a free worker ... done
[08:07:51.510] | : . ' , ; ` | FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ...
[08:07:51.510] | : . ' , ; ` | : Listing all futures
[08:07:51.510] | : . ' , ; ` | : Number of registered futures: 0
[08:07:51.510] | : . ' , ; ` | FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ... done
[08:07:51.510] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:07:51.510] | : . ' , ; ` | Index of first available worker: 1
[08:07:51.510] | : . ' , ; ` | Validate that the worker is functional ...
[08:07:51.606] | : . ' , ; ` | : Worker is functional
[08:07:51.607] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ...
[08:07:51.607] | : . ' , ; ` | : . Listing all futures
[08:07:51.607] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:51.607] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ... done
[08:07:51.607] | : . ' , ; ` | Validate that the worker is functional ... done
[08:07:51.607] | : . ' , ; ` requestNode() ... done
[08:07:51.608] | : . ' , ; ` cluster node index: 1
[08:07:51.608] | : . ' , ; requestWorker() ... done
[08:07:51.608] | : . ' , ; eraseGlobalEnvironment() ...
[08:07:51.608] | : . ' , ; eraseGlobalEnvironment() ... done
[08:07:51.608] | : . ' , ; launchFuture() ...
[08:07:51.608] | : . ' , ; ` cluster node index: 1
[08:07:51.609] | : . ' , ; ` getFutureData() ...
[08:07:51.609] | : . ' , ; ` | getFutureCore() ...
[08:07:51.609] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:07:51.609] | : . ' , ; ` | getFutureCore() ... done
[08:07:51.609] | : . ' , ; ` | getFutureCapture() ...
[08:07:51.609] | : . ' , ; ` | getFutureCapture() ... done
[08:07:51.609] | : . ' , ; ` | getFutureContext() ...
[08:07:51.609] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:51.609] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:07:51.609] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:51.610] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:07:51.610] | : . ' , ; ` | getFutureContext() ... done
[08:07:51.610] | : . ' , ; ` getFutureData() ... done
[08:07:51.610] | : . ' , ; ` FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'add', earlySignal = 0) ...
[08:07:51.610] | : . ' , ; ` | Appended future to position #1
[08:07:51.610] | : . ' , ; ` | Number of registered futures: 1
[08:07:51.610] | : . ' , ; ` FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'add', earlySignal = 0) ... done
[08:07:51.611] | : . ' , ; launchFuture() ... done
[08:07:51.611] | : . ' , ; MultisessionFuture started
[08:07:51.611] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:07:51.611] | : . ' Launching futures ... done
[08:07:51.611] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:51.611] | : . Using MultisessionFutureBackend ... done
[08:07:51.611] | : run() for ‘Future’ (<unnamed-20>) ... done
[08:07:51.611] | future(..., label = NULL) ... done
[08:07:51.611] | value() for MultisessionFuture (<unnamed-20>) ...
[08:07:51.612] | : result() for ClusterFuture ...
[08:07:51.612] | : . assertValidConnection() ...
[08:07:51.612] | : . ' cluster node index: 1
[08:07:51.612] | : . assertValidConnection() ... done
[08:07:51.612] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:07:51.612] | : . ' cluster node index: 1
[08:07:51.654] | : . ' [1] TRUE
[08:07:51.655] | : . ' received data:
[08:07:51.655] | : . ' List of 5
[08:07:51.655] | : . '  $ type   : chr "VALUE"
[08:07:51.655] | : . '  $ value  :List of 16
[08:07:51.655] | : . '   ..$ value              : num 2
[08:07:51.655] | : . '   ..$ visible            : logi TRUE
[08:07:51.655] | : . '   ..$ stdout             : chr ""
[08:07:51.655] | : . '   ..$ conditions         : list()
[08:07:51.655] | : . '   ..$ rng                : logi FALSE
[08:07:51.655] | : . '   ..$ seed               : NULL
[08:07:51.655] | : . '   ..$ misuseGlobalEnv    : NULL
[08:07:51.655] | : . '   ..$ misuseConnections  :List of 3
[08:07:51.655] | : . '   .. ..$ added   : NULL
[08:07:51.655] | : . '   .. ..$ removed : NULL
[08:07:51.655] | : . '   .. ..$ replaced: NULL
[08:07:51.655] | : . '   ..$ misuseDevices      : NULL
[08:07:51.655] | : . '   ..$ misuseDefaultDevice: list()
[08:07:51.655] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:51"
[08:07:51.655] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:51"
[08:07:51.655] | : . '   ..$ uuid               : chr [1:2] "87aff4716e6c17114cd1a8a4c28de6fe" "20"
[08:07:51.655] | : . '   ..$ session_uuid       : chr "b85c0cc4937e11f1e9817244cb71c5df"
[08:07:51.655] | : . '   .. ..- attr(*, "source")=List of 5
[08:07:51.655] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:07:51.655] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:51.655] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:51.655] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:51.655] | : . '   .. .. ..$ pid   : int 68440
[08:07:51.655] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:07:50"
[08:07:51.655] | : . '   .. .. ..$ random: int 2147483647
[08:07:51.655] | : . '   ..$ r_info             :List of 4
[08:07:51.655] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:51.655] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:07:51.655] | : . '   .. ..$ os           : chr "unix"
[08:07:51.655] | : . '   .. ..$ os_name      : chr "Linux"
[08:07:51.655] | : . '   .. ..$ captures_utf8: logi TRUE
[08:07:51.655] | : . '   ..$ version            : chr "1.8"
[08:07:51.655] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:07:51.655] | : . '  $ success: logi TRUE
[08:07:51.655] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:07:51.655] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:51.655] | : . '  $ tag    : NULL
[08:07:51.666] | : . ' Received FutureResult
[08:07:51.666] | : . ' FutureResult:
[08:07:51.666] | : . ' value: ‘numeric’
[08:07:51.666] | : . ' visible: TRUE
[08:07:51.666] | : . ' stdout: character
[08:07:51.666] | : . ' conditions: [n = 0] 
[08:07:51.666] | : . ' RNG used: FALSE
[08:07:51.666] | : . ' duration: 0.002406836 secs (started 2025-06-17 08:07:51.651824)
[08:07:51.666] | : . ' version: 1.8
[08:07:51.666] | : . ' FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'remove', earlySignal = 0) ...
[08:07:51.666] | : . ' , Removed future from position #1
[08:07:51.666] | : . ' , Number of registered futures: 0
[08:07:51.667] | : . ' FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'remove', earlySignal = 0) ... done
[08:07:51.667] | : . ' Erased future from future backend
[08:07:51.667] | : . ' result() for ClusterFuture ...
[08:07:51.667] | : . ' , result already collected: FutureResult
[08:07:51.667] | : . ' result() for ClusterFuture ... done
[08:07:51.667] | : . ' signalConditions() ...
[08:07:51.667] | : . ' , include = ‘immediateCondition’
[08:07:51.667] | : . ' , exclude = 
[08:07:51.667] | : . ' , resignal = FALSE
[08:07:51.667] | : . ' , Number of conditions: 0
[08:07:51.668] | : . ' ,  int 0
[08:07:51.668] | : . ' signalConditions() ... done
[08:07:51.668] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:07:51.668] | : result() for ClusterFuture ... done
[08:07:51.668] | : result() for ClusterFuture ...
[08:07:51.668] | : . result already collected: FutureResult
[08:07:51.669] | : result() for ClusterFuture ... done
[08:07:51.669] | : signalConditions() ...
[08:07:51.669] | : . include = ‘immediateCondition’
[08:07:51.669] | : . exclude = 
[08:07:51.669] | : . resignal = FALSE
[08:07:51.669] | : . Number of conditions: 0
[08:07:51.669] | : .  int 0
[08:07:51.670] | : signalConditions() ... done
[08:07:51.670] | : relay stdout ...
[08:07:51.670] | : relay stdout ... done
[08:07:51.670] | : check for misuse ...
[08:07:51.670] | : check for misuse ... done
[08:07:51.670] | value() for MultisessionFuture (<unnamed-20>) ... done
[08:07:51.670] | future(..., label = NULL) ...
[08:07:51.670] | : lazy: TRUE
[08:07:51.670] | : stdout: TRUE
[08:07:51.671] | : conditions: [n=1] ‘condition’
[08:07:51.671] | : gc: FALSE
[08:07:51.671] | : earlySignal: FALSE
[08:07:51.671] | : getGlobalsAndPackages() ...
[08:07:51.671] | : . Searching for globals ...
[08:07:51.678] | : . ' globals found: [3] ‘{’, ‘*’, ‘a’
[08:07:51.678] | : . Searching for globals ... done
[08:07:51.678] | : . Resolving globals: FALSE
[08:07:51.678] | : . Search for packages associated with the globals ...
[08:07:51.679] | : . ' Packages associated with globals: [1] ‘base’
[08:07:51.679] | : . ' Packages: [1] ‘base’
[08:07:51.679] | : . Search for packages associated with the globals ... done
[08:07:51.679] | : . Packages after dropping 'base': [0] 
[08:07:51.679] | : . globals: [1] ‘a’
[08:07:51.679] | : . packages: [0] 
[08:07:51.679] | : getGlobalsAndPackages() ... done
[08:07:51.680] | future(..., label = NULL) ... done
[08:07:51.680] | value() for Future (<unnamed-21>) ...
[08:07:51.680] | : run() for ‘Future’ (<unnamed-21>) ...
[08:07:51.680] | : . state: ‘created’
[08:07:51.680] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:51.680] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:51.680] | : . Using MultisessionFutureBackend ...
[08:07:51.681] | : . ' Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:07:51.681] | : . ' Launching futures ...
[08:07:51.681] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:07:51.681] | : . ' , ; Workers: [n=2]
[08:07:51.681] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:51.683] | : . ' , ; FutureRegistry: ‘workers-e37a289dcbe3654181a8f93123793267’
[08:07:51.683] | : . ' , ; requestWorker() ...
[08:07:51.683] | : . ' , ; ` requestNode() ...
[08:07:51.683] | : . ' , ; ` | Number of workers: 2
[08:07:51.683] | : . ' , ; ` | Polling for a free worker ...
[08:07:51.683] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ...
[08:07:51.683] | : . ' , ; ` | : . Listing all futures
[08:07:51.683] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:51.683] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ... done
[08:07:51.684] | : . ' , ; ` | : Total time: 0
[08:07:51.684] | : . ' , ; ` | Polling for a free worker ... done
[08:07:51.684] | : . ' , ; ` | FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ...
[08:07:51.684] | : . ' , ; ` | : Listing all futures
[08:07:51.684] | : . ' , ; ` | : Number of registered futures: 0
[08:07:51.684] | : . ' , ; ` | FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ... done
[08:07:51.684] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:07:51.684] | : . ' , ; ` | Index of first available worker: 1
[08:07:51.684] | : . ' , ; ` | Validate that the worker is functional ...
[08:07:51.749] | : . ' , ; ` | : Worker is functional
[08:07:51.749] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ...
[08:07:51.750] | : . ' , ; ` | : . Listing all futures
[08:07:51.750] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:51.750] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ... done
[08:07:51.750] | : . ' , ; ` | Validate that the worker is functional ... done
[08:07:51.750] | : . ' , ; ` requestNode() ... done
[08:07:51.750] | : . ' , ; ` cluster node index: 1
[08:07:51.750] | : . ' , ; requestWorker() ... done
[08:07:51.750] | : . ' , ; eraseGlobalEnvironment() ...
[08:07:51.751] | : . ' , ; eraseGlobalEnvironment() ... done
[08:07:51.751] | : . ' , ; launchFuture() ...
[08:07:51.751] | : . ' , ; ` cluster node index: 1
[08:07:51.751] | : . ' , ; ` getFutureData() ...
[08:07:51.751] | : . ' , ; ` | getFutureCore() ...
[08:07:51.751] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:07:51.752] | : . ' , ; ` | getFutureCore() ... done
[08:07:51.752] | : . ' , ; ` | getFutureCapture() ...
[08:07:51.752] | : . ' , ; ` | getFutureCapture() ... done
[08:07:51.752] | : . ' , ; ` | getFutureContext() ...
[08:07:51.752] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:51.752] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:07:51.752] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:51.752] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:07:51.753] | : . ' , ; ` | getFutureContext() ... done
[08:07:51.753] | : . ' , ; ` getFutureData() ... done
[08:07:51.753] | : . ' , ; ` FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'add', earlySignal = 0) ...
[08:07:51.753] | : . ' , ; ` | Appended future to position #1
[08:07:51.753] | : . ' , ; ` | Number of registered futures: 1
[08:07:51.753] | : . ' , ; ` FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'add', earlySignal = 0) ... done
[08:07:51.753] | : . ' , ; launchFuture() ... done
[08:07:51.754] | : . ' , ; MultisessionFuture started
[08:07:51.754] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:07:51.754] | : . ' Launching futures ... done
[08:07:51.754] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:51.754] | : . Using MultisessionFutureBackend ... done
[08:07:51.754] | : run() for ‘Future’ (<unnamed-21>) ... done
[08:07:51.754] | : result() for ClusterFuture ...
[08:07:51.754] | : . assertValidConnection() ...
[08:07:51.755] | : . ' cluster node index: 1
[08:07:51.755] | : . assertValidConnection() ... done
[08:07:51.755] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:07:51.755] | : . ' cluster node index: 1
[08:07:51.797] | : . ' [1] TRUE
[08:07:51.797] | : . ' received data:
[08:07:51.797] | : . ' List of 5
[08:07:51.797] | : . '  $ type   : chr "VALUE"
[08:07:51.797] | : . '  $ value  :List of 16
[08:07:51.797] | : . '   ..$ value              : num 2
[08:07:51.797] | : . '   ..$ visible            : logi TRUE
[08:07:51.797] | : . '   ..$ stdout             : chr ""
[08:07:51.797] | : . '   ..$ conditions         : list()
[08:07:51.797] | : . '   ..$ rng                : logi FALSE
[08:07:51.797] | : . '   ..$ seed               : NULL
[08:07:51.797] | : . '   ..$ misuseGlobalEnv    : NULL
[08:07:51.797] | : . '   ..$ misuseConnections  :List of 3
[08:07:51.797] | : . '   .. ..$ added   : NULL
[08:07:51.797] | : . '   .. ..$ removed : NULL
[08:07:51.797] | : . '   .. ..$ replaced: NULL
[08:07:51.797] | : . '   ..$ misuseDevices      : NULL
[08:07:51.797] | : . '   ..$ misuseDefaultDevice: list()
[08:07:51.797] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:51"
[08:07:51.797] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:51"
[08:07:51.797] | : . '   ..$ uuid               : chr [1:2] "87aff4716e6c17114cd1a8a4c28de6fe" "21"
[08:07:51.797] | : . '   ..$ session_uuid       : chr "b85c0cc4937e11f1e9817244cb71c5df"
[08:07:51.797] | : . '   .. ..- attr(*, "source")=List of 5
[08:07:51.797] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:07:51.797] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:51.797] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:51.797] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:51.797] | : . '   .. .. ..$ pid   : int 68440
[08:07:51.797] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:07:50"
[08:07:51.797] | : . '   .. .. ..$ random: int 2147483647
[08:07:51.797] | : . '   ..$ r_info             :List of 4
[08:07:51.797] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:51.797] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:07:51.797] | : . '   .. ..$ os           : chr "unix"
[08:07:51.797] | : . '   .. ..$ os_name      : chr "Linux"
[08:07:51.797] | : . '   .. ..$ captures_utf8: logi TRUE
[08:07:51.797] | : . '   ..$ version            : chr "1.8"
[08:07:51.797] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:07:51.797] | : . '  $ success: logi TRUE
[08:07:51.797] | : . '  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.003 0 0
[08:07:51.797] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:51.797] | : . '  $ tag    : NULL
[08:07:51.808] | : . ' Received FutureResult
[08:07:51.808] | : . ' FutureResult:
[08:07:51.808] | : . ' value: ‘numeric’
[08:07:51.808] | : . ' visible: TRUE
[08:07:51.808] | : . ' stdout: character
[08:07:51.808] | : . ' conditions: [n = 0] 
[08:07:51.808] | : . ' RNG used: FALSE
[08:07:51.808] | : . ' duration: 0.002696753 secs (started 2025-06-17 08:07:51.793845)
[08:07:51.808] | : . ' version: 1.8
[08:07:51.809] | : . ' FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'remove', earlySignal = 0) ...
[08:07:51.809] | : . ' , Removed future from position #1
[08:07:51.809] | : . ' , Number of registered futures: 0
[08:07:51.809] | : . ' FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'remove', earlySignal = 0) ... done
[08:07:51.809] | : . ' Erased future from future backend
[08:07:51.809] | : . ' result() for ClusterFuture ...
[08:07:51.809] | : . ' , result already collected: FutureResult
[08:07:51.810] | : . ' result() for ClusterFuture ... done
[08:07:51.810] | : . ' signalConditions() ...
[08:07:51.810] | : . ' , include = ‘immediateCondition’
[08:07:51.810] | : . ' , exclude = 
[08:07:51.810] | : . ' , resignal = FALSE
[08:07:51.810] | : . ' , Number of conditions: 0
[08:07:51.810] | : . ' ,  int 0
[08:07:51.811] | : . ' signalConditions() ... done
[08:07:51.811] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:07:51.811] | : result() for ClusterFuture ... done
[08:07:51.811] | : result() for ClusterFuture ...
[08:07:51.811] | : . result already collected: FutureResult
[08:07:51.811] | : result() for ClusterFuture ... done
[08:07:51.811] | : signalConditions() ...
[08:07:51.811] | : . include = ‘immediateCondition’
[08:07:51.811] | : . exclude = 
[08:07:51.811] | : . resignal = FALSE
[08:07:51.812] | : . Number of conditions: 0
[08:07:51.812] | : .  int 0
[08:07:51.812] | : signalConditions() ... done
[08:07:51.812] | : relay stdout ...
[08:07:51.812] | : relay stdout ... done
[08:07:51.812] | : check for misuse ...
[08:07:51.812] | : check for misuse ... done
[08:07:51.813] | value() for Future (<unnamed-21>) ... done
[08:07:51.813] | future(..., label = NULL) ...
[08:07:51.813] | : lazy: TRUE
[08:07:51.813] | : stdout: TRUE
[08:07:51.813] | : conditions: [n=1] ‘condition’
[08:07:51.813] | : gc: FALSE
[08:07:51.813] | : earlySignal: FALSE
[08:07:51.813] | : getGlobalsAndPackages() ...
[08:07:51.813] | : . Searching for globals ...
[08:07:51.819] | : . ' globals found: [3] ‘{’, ‘*’, ‘a’
[08:07:51.819] | : . Searching for globals ... done
[08:07:51.819] | : . Resolving globals: FALSE
[08:07:51.819] | : . Search for packages associated with the globals ...
[08:07:51.819] | : . ' Packages associated with globals: [1] ‘base’
[08:07:51.820] | : . ' Packages: [1] ‘base’
[08:07:51.820] | : . Search for packages associated with the globals ... done
[08:07:51.820] | : . Packages after dropping 'base': [0] 
[08:07:51.820] | : . globals: [1] ‘a’
[08:07:51.820] | : . packages: [0] 
[08:07:51.820] | : getGlobalsAndPackages() ... done
[08:07:51.820] | future(..., label = NULL) ... done
[08:07:51.821] | value() for Future (<unnamed-22>) ...
[08:07:51.821] | : run() for ‘Future’ (<unnamed-22>) ...
[08:07:51.821] | : . state: ‘created’
[08:07:51.821] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:51.821] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:51.821] | : . Using MultisessionFutureBackend ...
[08:07:51.821] | : . ' Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:07:51.821] | : . ' Launching futures ...
[08:07:51.822] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:07:51.822] | : . ' , ; Workers: [n=2]
[08:07:51.822] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:51.823] | : . ' , ; FutureRegistry: ‘workers-e37a289dcbe3654181a8f93123793267’
[08:07:51.823] | : . ' , ; requestWorker() ...
[08:07:51.823] | : . ' , ; ` requestNode() ...
[08:07:51.824] | : . ' , ; ` | Number of workers: 2
[08:07:51.824] | : . ' , ; ` | Polling for a free worker ...
[08:07:51.824] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ...
[08:07:51.824] | : . ' , ; ` | : . Listing all futures
[08:07:51.824] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:51.824] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ... done
[08:07:51.824] | : . ' , ; ` | : Total time: 0
[08:07:51.824] | : . ' , ; ` | Polling for a free worker ... done
[08:07:51.824] | : . ' , ; ` | FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ...
[08:07:51.825] | : . ' , ; ` | : Listing all futures
[08:07:51.825] | : . ' , ; ` | : Number of registered futures: 0
[08:07:51.825] | : . ' , ; ` | FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ... done
[08:07:51.825] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:07:51.825] | : . ' , ; ` | Index of first available worker: 1
[08:07:51.825] | : . ' , ; ` | Validate that the worker is functional ...
[08:07:51.921] | : . ' , ; ` | : Worker is functional
[08:07:51.922] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ...
[08:07:51.922] | : . ' , ; ` | : . Listing all futures
[08:07:51.922] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:51.922] | : . ' , ; ` | : FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'list', earlySignal = 0) ... done
[08:07:51.922] | : . ' , ; ` | Validate that the worker is functional ... done
[08:07:51.922] | : . ' , ; ` requestNode() ... done
[08:07:51.922] | : . ' , ; ` cluster node index: 1
[08:07:51.923] | : . ' , ; requestWorker() ... done
[08:07:51.923] | : . ' , ; eraseGlobalEnvironment() ...
[08:07:51.923] | : . ' , ; eraseGlobalEnvironment() ... done
[08:07:51.923] | : . ' , ; launchFuture() ...
[08:07:51.923] | : . ' , ; ` cluster node index: 1
[08:07:51.923] | : . ' , ; ` getFutureData() ...
[08:07:51.924] | : . ' , ; ` | getFutureCore() ...
[08:07:51.924] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:07:51.924] | : . ' , ; ` | getFutureCore() ... done
[08:07:51.924] | : . ' , ; ` | getFutureCapture() ...
[08:07:51.924] | : . ' , ; ` | getFutureCapture() ... done
[08:07:51.924] | : . ' , ; ` | getFutureContext() ...
[08:07:51.924] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:51.924] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:07:51.924] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:51.925] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:07:51.925] | : . ' , ; ` | getFutureContext() ... done
[08:07:51.925] | : . ' , ; ` getFutureData() ... done
[08:07:51.925] | : . ' , ; ` FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'add', earlySignal = 0) ...
[08:07:51.925] | : . ' , ; ` | Appended future to position #1
[08:07:51.925] | : . ' , ; ` | Number of registered futures: 1
[08:07:51.925] | : . ' , ; ` FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'add', earlySignal = 0) ... done
[08:07:51.926] | : . ' , ; launchFuture() ... done
[08:07:51.926] | : . ' , ; MultisessionFuture started
[08:07:51.926] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:07:51.926] | : . ' Launching futures ... done
[08:07:51.926] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:51.926] | : . Using MultisessionFutureBackend ... done
[08:07:51.926] | : run() for ‘Future’ (<unnamed-22>) ... done
[08:07:51.926] | : result() for ClusterFuture ...
[08:07:51.927] | : . assertValidConnection() ...
[08:07:51.927] | : . ' cluster node index: 1
[08:07:51.927] | : . assertValidConnection() ... done
[08:07:51.927] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:07:51.927] | : . ' cluster node index: 1
[08:07:51.969] | : . ' [1] TRUE
[08:07:51.969] | : . ' received data:
[08:07:51.969] | : . ' List of 5
[08:07:51.969] | : . '  $ type   : chr "VALUE"
[08:07:51.969] | : . '  $ value  :List of 16
[08:07:51.969] | : . '   ..$ value              : num 2
[08:07:51.969] | : . '   ..$ visible            : logi TRUE
[08:07:51.969] | : . '   ..$ stdout             : chr ""
[08:07:51.969] | : . '   ..$ conditions         : list()
[08:07:51.969] | : . '   ..$ rng                : logi FALSE
[08:07:51.969] | : . '   ..$ seed               : NULL
[08:07:51.969] | : . '   ..$ misuseGlobalEnv    : NULL
[08:07:51.969] | : . '   ..$ misuseConnections  :List of 3
[08:07:51.969] | : . '   .. ..$ added   : NULL
[08:07:51.969] | : . '   .. ..$ removed : NULL
[08:07:51.969] | : . '   .. ..$ replaced: NULL
[08:07:51.969] | : . '   ..$ misuseDevices      : NULL
[08:07:51.969] | : . '   ..$ misuseDefaultDevice: list()
[08:07:51.969] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:51"
[08:07:51.969] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:51"
[08:07:51.969] | : . '   ..$ uuid               : chr [1:2] "87aff4716e6c17114cd1a8a4c28de6fe" "22"
[08:07:51.969] | : . '   ..$ session_uuid       : chr "b85c0cc4937e11f1e9817244cb71c5df"
[08:07:51.969] | : . '   .. ..- attr(*, "source")=List of 5
[08:07:51.969] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:07:51.969] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:51.969] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:51.969] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:51.969] | : . '   .. .. ..$ pid   : int 68440
[08:07:51.969] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:07:50"
[08:07:51.969] | : . '   .. .. ..$ random: int 2147483647
[08:07:51.969] | : . '   ..$ r_info             :List of 4
[08:07:51.969] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:51.969] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:07:51.969] | : . '   .. ..$ os           : chr "unix"
[08:07:51.969] | : . '   .. ..$ os_name      : chr "Linux"
[08:07:51.969] | : . '   .. ..$ captures_utf8: logi TRUE
[08:07:51.969] | : . '   ..$ version            : chr "1.8"
[08:07:51.969] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:07:51.969] | : . '  $ success: logi TRUE
[08:07:51.969] | : . '  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[08:07:51.969] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:51.969] | : . '  $ tag    : NULL
[08:07:51.982] | : . ' Received FutureResult
[08:07:51.983] | : . ' FutureResult:
[08:07:51.983] | : . ' value: ‘numeric’
[08:07:51.983] | : . ' visible: TRUE
[08:07:51.983] | : . ' stdout: character
[08:07:51.983] | : . ' conditions: [n = 0] 
[08:07:51.983] | : . ' RNG used: FALSE
[08:07:51.983] | : . ' duration: 0.002934933 secs (started 2025-06-17 08:07:51.965828)
[08:07:51.983] | : . ' version: 1.8
[08:07:51.983] | : . ' FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'remove', earlySignal = 0) ...
[08:07:51.983] | : . ' , Removed future from position #1
[08:07:51.983] | : . ' , Number of registered futures: 0
[08:07:51.983] | : . ' FutureRegistry('workers-e37a289dcbe3654181a8f93123793267', action = 'remove', earlySignal = 0) ... done
[08:07:51.984] | : . ' Erased future from future backend
[08:07:51.984] | : . ' result() for ClusterFuture ...
[08:07:51.984] | : . ' , result already collected: FutureResult
[08:07:51.984] | : . ' result() for ClusterFuture ... done
[08:07:51.984] | : . ' signalConditions() ...
[08:07:51.984] | : . ' , include = ‘immediateCondition’
[08:07:51.984] | : . ' , exclude = 
[08:07:51.984] | : . ' , resignal = FALSE
[08:07:51.984] | : . ' , Number of conditions: 0
[08:07:51.984] | : . ' ,  int 0
[08:07:51.985] | : . ' signalConditions() ... done
[08:07:51.985] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:07:51.985] | : result() for ClusterFuture ... done
[08:07:51.985] | : result() for ClusterFuture ...
[08:07:51.985] | : . result already collected: FutureResult
[08:07:51.985] | : result() for ClusterFuture ... done
[08:07:51.985] | : signalConditions() ...
[08:07:51.986] | : . include = ‘immediateCondition’
[08:07:51.986] | : . exclude = 
[08:07:51.986] | : . resignal = FALSE
[08:07:51.986] | : . Number of conditions: 0
[08:07:51.986] | : .  int 0
[08:07:51.986] | : signalConditions() ... done
[08:07:51.986] | : relay stdout ...
[08:07:51.986] | : relay stdout ... done
[08:07:51.987] | : check for misuse ...
[08:07:51.987] | : check for misuse ... done
[08:07:51.987] | value() for Future (<unnamed-22>) ... done
*** futureAssign() with ‘multisession’ futures ... DONE
Testing with 2 cores ... DONE

> message("*** futureAssign() - lazy = TRUE / FALSE ... DONE")
*** futureAssign() - lazy = TRUE / FALSE ... DONE

> message("*** futureAssign() ... DONE")
*** futureAssign() ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=1s, sys.self=0.1s, elapsed=3s, user.child=0.5s, sys.child=0.5s
Test ‘futureAssign’ ... success
> 
