
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-globals,subassignment.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("globals,subassignment")
Test ‘globals,subassignment’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-globals,subassignment.R’

> library(future)
[08:08:33.915] Option 'future.startup.script': TRUE
[08:08:33.915] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:08:33.916] Future startup scripts found: <none>

> oopts <- c(oopts, options(future.globals.resolve = TRUE, 
+     future.globals.onMissing = "error"))

> message("*** Globals - subassignments ...")
*** Globals - subassignments ...

> message("*** Globals - subassignments w/ x$a <- value ...")
*** Globals - subassignments w/ x$a <- value ...

> x <- x0 <- list()

> y0 <- list(a = 1)

> str(list(x = x, y0 = y0))
List of 2
 $ x : list()
 $ y0:List of 1
  ..$ a: num 1

> y <- local({
+     x$a <- 1
+     x
+ })

> stopifnot(identical(y, y0))

> y <- local({
+     x[["a"]] <- 1
+     x
+ })

> stopifnot(identical(y, y0))

> y <- local({
+     x["a"] <- list(1)
+     x
+ })

> stopifnot(identical(y, y0))

> stopifnot(identical(x, list()))

> for (cores in 1:availCores) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+     message("availableCor ..." ... [TRUNCATED] 
Testing with 1 cores ...
availableCores(): 1
- plan('sequential') ...
[08:08:33.964] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:33.964] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:33.964] | : all.equal() for FutureStrategyList ...
[08:08:33.965] | : . New stack:
[08:08:33.965] | : . List of 1
[08:08:33.965] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:33.965] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:33.965] | : .   ..- attr(*, "init")= logi TRUE
[08:08:33.965] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:33.965] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:33.965] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:33.965] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:33.965] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:33.967] | : . Old stack:
[08:08:33.967] | : . List of 1
[08:08:33.967] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:33.967] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:33.967] | : .   ..- attr(*, "init")= logi TRUE
[08:08:33.967] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:33.967] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:33.967] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:33.967] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:33.967] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:33.970] | : . Not identical
[08:08:33.970] | : . all.equal() for future ...
[08:08:33.970] | : . ' List of 2
[08:08:33.970] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:33.970] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:33.970] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:33.970] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:33.970] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:33.970] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:33.970] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:33.970] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:33.970] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:33.970] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:33.970] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:33.970] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:33.970] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:33.970] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:33.975] | : . all.equal() for future ... done
[08:08:33.976] | : all.equal() for FutureStrategyList ... done
[08:08:33.976] | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:33.976] | : List of future strategies:
[08:08:33.976] | : 1. sequential:
[08:08:33.976] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:33.976] | :    - tweaked: FALSE
[08:08:33.976] | :    - call: plan(sequential)
[08:08:33.976] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:33.977] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:33.977] future(..., label = NULL) ...
[08:08:33.977] | lazy: FALSE
[08:08:33.977] | stdout: TRUE
[08:08:33.977] | conditions: [n=1] ‘condition’
[08:08:33.977] | gc: FALSE
[08:08:33.977] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:33.978] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:33.978] | : Searching for globals ...
[08:08:33.996] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:33.996] | : Searching for globals ... done
[08:08:33.998] | : Resolving globals: TRUE
[08:08:33.998] | : Resolving any globals that are futures ...
[08:08:33.998] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:33.998] | : Resolving any globals that are futures ... done
[08:08:33.998] | : Search for packages associated with the globals ...
[08:08:33.999] | : . Packages associated with globals: [1] ‘base’
[08:08:33.999] | : . Packages: [1] ‘base’
[08:08:33.999] | : Search for packages associated with the globals ... done
[08:08:33.999] | : Resolving futures part of globals (recursively) ...
[08:08:34.000] | : . resolve() for FutureGlobals ...
[08:08:34.000] | : . ' recursive: 99
[08:08:34.000] | : . ' Number of elements: 1
[08:08:34.000] | : . ' elements: ‘x’
[08:08:34.001] | : . ' 'obj' is list
[08:08:34.001] | : . ' resolve(obj, ...) ...
[08:08:34.001] | : . ' , resolve() for list ...
[08:08:34.001] | : . ' , ; recursive: 98
[08:08:34.001] | : . ' , ; Number of elements: 0
[08:08:34.001] | : . ' , resolve() for list ... done
[08:08:34.001] | : . ' resolve(obj, ...) ... done
[08:08:34.001] | : . ' resolved() for list ...
[08:08:34.002] | : . ' , Number of elements: 0
[08:08:34.002] | : . ' , Number of futures: 0
[08:08:34.002] | : . ' resolved() for list ... done
[08:08:34.002] | : . ' length: 0 (resolved future 1)
[08:08:34.002] | : . resolve() for FutureGlobals ... done
[08:08:34.002] | : . globals: [1] ‘x’
[08:08:34.002] | : Resolving futures part of globals (recursively) ... done
[08:08:34.002] | : Packages after dropping 'base': [0] 
[08:08:34.002] | : globals: [1] ‘x’
[08:08:34.003] | : packages: [0] 
[08:08:34.003] | getGlobalsAndPackages() ... done
[08:08:34.003] | run() for ‘Future’ (<unnamed-1>) ...
[08:08:34.003] | : state: ‘created’
[08:08:34.004] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.004] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:34.004] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.004] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.004] | : . '  - attr(*, "init")= logi TRUE
[08:08:34.004] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.004] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.004] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.004] | : . '  - attr(*, "call")= language plan(sequential)
[08:08:34.006] | : . ' init: TRUE
[08:08:34.006] | : . ' makeFutureBackend(<sequential>) ...
[08:08:34.006] | : . ' , Backend function: <‘NULL’>
[08:08:34.006] | : . ' , Evaluator tweak arguments: [n=0]
[08:08:34.006] | : . ' ,  list()
[08:08:34.007] | : . ' , Evaluator formal arguments: [n=2]
[08:08:34.007] | : . ' ,  list()
[08:08:34.007] | : . ' , Backend factory arguments: [n=2]
[08:08:34.007] | : . ' , Dotted pair list of 2
[08:08:34.007] | : . ' ,  $ gc         : logi FALSE
[08:08:34.007] | : . ' ,  $ earlySignal: logi FALSE
[08:08:34.008] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:34.008] | : . ' makeFutureBackend(<sequential>) ... done
[08:08:34.009] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:34.009] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.009] | : Using SequentialFutureBackend ...
[08:08:34.009] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:34.009] | : . Launching futures ...
[08:08:34.009] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:34.009] | : . ' , getFutureData() ...
[08:08:34.010] | : . ' , ; getFutureCore() ...
[08:08:34.010] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:34.010] | : . ' , ; getFutureCore() ... done
[08:08:34.010] | : . ' , ; getFutureCapture() ...
[08:08:34.010] | : . ' , ; getFutureCapture() ... done
[08:08:34.010] | : . ' , ; getFutureContext() ...
[08:08:34.010] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.010] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:34.011] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.011] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:34.011] | : . ' , ; getFutureContext() ... done
[08:08:34.011] | : . ' , getFutureData() ... done
[08:08:34.013] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.013] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:34.014] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.014] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.014] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.014] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:34.014] | : . ' , ; ` | New stack:
[08:08:34.015] | : . ' , ; ` | List of 1
[08:08:34.015] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.015] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.015] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:34.015] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.015] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.015] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.015] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.015] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.017] | : . ' , ; ` | Old stack:
[08:08:34.017] | : . ' , ; ` | List of 1
[08:08:34.017] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.017] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.017] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:34.017] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.017] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.017] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.017] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:34.017] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.017] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.017] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.017] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.020] | : . ' , ; ` | Not identical
[08:08:34.020] | : . ' , ; ` | all.equal() for future ...
[08:08:34.021] | : . ' , ; ` | : List of 2
[08:08:34.021] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.021] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.021] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:34.021] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.021] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.021] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.021] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.021] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.021] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.021] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.021] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.021] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.021] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.021] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.021] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.021] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.021] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.027] | : . ' , ; ` | all.equal() for future ... done
[08:08:34.027] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:34.028] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.028] | : . ' , ; ` List of future strategies:
[08:08:34.028] | : . ' , ; ` 1. sequential:
[08:08:34.028] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.028] | : . ' , ; `    - tweaked: FALSE
[08:08:34.028] | : . ' , ; `    - call: plan(sequential)
[08:08:34.028] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.028] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.028] | : . ' , assign_globals() ...
[08:08:34.029] | : . ' , List of 1
[08:08:34.029] | : . ' ,  $ x: list()
[08:08:34.029] | : . ' ,  - attr(*, "where")=List of 1
[08:08:34.029] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:34.029] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:34.029] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:34.029] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:34.029] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:34.031] | : . ' , - copied ‘x’ to environment
[08:08:34.031] | : . ' , assign_globals() ... done
[08:08:34.033] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.033] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.034] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.034] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:34.034] | : . ' , ; ` | : New stack:
[08:08:34.034] | : . ' , ; ` | : List of 1
[08:08:34.034] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.034] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.034] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.034] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.034] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.034] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.034] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.034] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.034] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.034] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.034] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.037] | : . ' , ; ` | : Old stack:
[08:08:34.037] | : . ' , ; ` | : List of 1
[08:08:34.037] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.037] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.037] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.037] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.037] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.037] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.037] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.037] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.037] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.037] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.037] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.040] | : . ' , ; ` | : Identical
[08:08:34.040] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:34.040] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.040] | : . ' , ; ` | List of future strategies:
[08:08:34.040] | : . ' , ; ` | 1. sequential:
[08:08:34.040] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.040] | : . ' , ; ` |    - tweaked: FALSE
[08:08:34.040] | : . ' , ; ` |    - call: plan(sequential)
[08:08:34.041] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.041] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.041] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.045] | : . ' , SequentialFuture started (and completed)
[08:08:34.045] | : . ' , signalConditions() ...
[08:08:34.045] | : . ' , ; include = ‘immediateCondition’
[08:08:34.046] | : . ' , ; exclude = 
[08:08:34.046] | : . ' , ; resignal = FALSE
[08:08:34.046] | : . ' , ; Number of conditions: 6
[08:08:34.046] | : . ' , ;  int 6
[08:08:34.046] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.046] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.046] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.047] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.047] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.047] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.047] | : . ' , signalConditions() ... done
[08:08:34.047] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:34.047] | : . Launching futures ... done
[08:08:34.047] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:34.047] | : Using SequentialFutureBackend ... done
[08:08:34.048] | run() for ‘Future’ (<unnamed-1>) ... done
[08:08:34.048] future(..., label = NULL) ... done
[08:08:34.048] value() for SequentialFuture (<unnamed-1>) ...
[08:08:34.048] | signalConditions() ...
[08:08:34.048] | : include = ‘immediateCondition’
[08:08:34.048] | : exclude = 
[08:08:34.048] | : resignal = FALSE
[08:08:34.049] | : Number of conditions: 6
[08:08:34.049] | :  int 6
[08:08:34.049] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.049] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.049] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.049] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.049] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.050] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.050] | signalConditions() ... done
[08:08:34.050] | relay stdout ...
[08:08:34.050] | relay stdout ... done
[08:08:34.050] | check for misuse ...
[08:08:34.050] | check for misuse ... done
[08:08:34.050] | relay conditions ...
[08:08:34.050] | : Future state: ‘finished’
[08:08:34.050] | : signalConditions() ...
[08:08:34.050] | : . include = ‘condition’
[08:08:34.051] | : . exclude = ‘immediateCondition’
[08:08:34.051] | : . resignal = TRUE
[08:08:34.051] | : . Number of conditions: 6
[08:08:34.051] | : .  int 6
[08:08:34.051] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.051] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.012] | : . ' , attachPackages() ...
[08:08:34.051] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.052] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.012] | : . ' , ; packages: [n=1] ‘future’
[08:08:34.052] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.052] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.013] | : . ' , attachPackages() ... done
[08:08:34.052] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.052] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.013] | : . ' , attachPackages() ...
[08:08:34.052] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.052] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.013] | : . ' , ; packages: [n=0] 
[08:08:34.052] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.052] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.013] | : . ' , attachPackages() ... done
[08:08:34.053] | : signalConditions() ... done
[08:08:34.053] | relay conditions ... done
[08:08:34.053] value() for SequentialFuture (<unnamed-1>) ... done
$a
[1] 1

[08:08:34.053] future(..., label = NULL) ...
[08:08:34.053] | lazy: TRUE
[08:08:34.053] | stdout: TRUE
[08:08:34.053] | conditions: [n=1] ‘condition’
[08:08:34.053] | gc: FALSE
[08:08:34.053] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:34.054] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:34.054] | : Searching for globals ...
[08:08:34.065] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:34.065] | : Searching for globals ... done
[08:08:34.066] | : Resolving globals: TRUE
[08:08:34.066] | : Resolving any globals that are futures ...
[08:08:34.066] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:34.066] | : Resolving any globals that are futures ... done
[08:08:34.066] | : Search for packages associated with the globals ...
[08:08:34.066] | : . Packages associated with globals: [1] ‘base’
[08:08:34.067] | : . Packages: [1] ‘base’
[08:08:34.067] | : Search for packages associated with the globals ... done
[08:08:34.067] | : Resolving futures part of globals (recursively) ...
[08:08:34.067] | : . resolve() for FutureGlobals ...
[08:08:34.067] | : . ' recursive: 99
[08:08:34.067] | : . ' Number of elements: 1
[08:08:34.067] | : . ' elements: ‘x’
[08:08:34.067] | : . ' 'obj' is list
[08:08:34.068] | : . ' resolve(obj, ...) ...
[08:08:34.068] | : . ' , resolve() for list ...
[08:08:34.068] | : . ' , ; recursive: 98
[08:08:34.068] | : . ' , ; Number of elements: 0
[08:08:34.068] | : . ' , resolve() for list ... done
[08:08:34.068] | : . ' resolve(obj, ...) ... done
[08:08:34.068] | : . ' resolved() for list ...
[08:08:34.068] | : . ' , Number of elements: 0
[08:08:34.068] | : . ' , Number of futures: 0
[08:08:34.068] | : . ' resolved() for list ... done
[08:08:34.069] | : . ' length: 0 (resolved future 1)
[08:08:34.069] | : . resolve() for FutureGlobals ... done
[08:08:34.069] | : . globals: [1] ‘x’
[08:08:34.069] | : Resolving futures part of globals (recursively) ... done
[08:08:34.069] | : Packages after dropping 'base': [0] 
[08:08:34.069] | : globals: [1] ‘x’
[08:08:34.069] | : packages: [0] 
[08:08:34.069] | getGlobalsAndPackages() ... done
[08:08:34.070] future(..., label = NULL) ... done
[08:08:34.070] value() for Future (<unnamed-2>) ...
[08:08:34.070] | run() for ‘Future’ (<unnamed-2>) ...
[08:08:34.070] | : state: ‘created’
[08:08:34.070] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.070] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.070] | : Using SequentialFutureBackend ...
[08:08:34.070] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:08:34.070] | : . Launching futures ...
[08:08:34.071] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:34.071] | : . ' , getFutureData() ...
[08:08:34.071] | : . ' , ; getFutureCore() ...
[08:08:34.071] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:34.071] | : . ' , ; getFutureCore() ... done
[08:08:34.071] | : . ' , ; getFutureCapture() ...
[08:08:34.071] | : . ' , ; getFutureCapture() ... done
[08:08:34.071] | : . ' , ; getFutureContext() ...
[08:08:34.071] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.071] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:34.072] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.072] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:34.072] | : . ' , ; getFutureContext() ... done
[08:08:34.072] | : . ' , getFutureData() ... done
[08:08:34.073] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.073] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:34.073] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.074] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.074] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.074] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:34.074] | : . ' , ; ` | New stack:
[08:08:34.074] | : . ' , ; ` | List of 1
[08:08:34.074] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.074] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.074] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:34.074] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.074] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.074] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.074] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.074] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.077] | : . ' , ; ` | Old stack:
[08:08:34.077] | : . ' , ; ` | List of 1
[08:08:34.077] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.077] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.077] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:34.077] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.077] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.077] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.077] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:34.077] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.077] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.077] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.077] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.080] | : . ' , ; ` | Not identical
[08:08:34.080] | : . ' , ; ` | all.equal() for future ...
[08:08:34.080] | : . ' , ; ` | : List of 2
[08:08:34.080] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.080] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.080] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:34.080] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.080] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.080] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.080] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.080] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.080] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.080] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.080] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.080] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.080] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.080] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.080] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.080] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.080] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.087] | : . ' , ; ` | all.equal() for future ... done
[08:08:34.087] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:34.087] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.088] | : . ' , ; ` List of future strategies:
[08:08:34.088] | : . ' , ; ` 1. sequential:
[08:08:34.088] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.088] | : . ' , ; `    - tweaked: FALSE
[08:08:34.088] | : . ' , ; `    - call: plan(sequential)
[08:08:34.088] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.088] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.088] | : . ' , assign_globals() ...
[08:08:34.088] | : . ' , List of 1
[08:08:34.088] | : . ' ,  $ x: list()
[08:08:34.088] | : . ' ,  - attr(*, "where")=List of 1
[08:08:34.088] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:34.088] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:34.088] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:34.088] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:34.088] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:34.091] | : . ' , - copied ‘x’ to environment
[08:08:34.091] | : . ' , assign_globals() ... done
[08:08:34.092] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.093] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.093] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.093] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:34.093] | : . ' , ; ` | : New stack:
[08:08:34.093] | : . ' , ; ` | : List of 1
[08:08:34.093] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.093] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.093] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.093] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.093] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.093] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.093] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.093] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.093] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.093] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.093] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.096] | : . ' , ; ` | : Old stack:
[08:08:34.096] | : . ' , ; ` | : List of 1
[08:08:34.096] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.096] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.096] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.096] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.096] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.096] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.096] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.096] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.096] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.096] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.096] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.099] | : . ' , ; ` | : Identical
[08:08:34.100] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:34.100] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.100] | : . ' , ; ` | List of future strategies:
[08:08:34.100] | : . ' , ; ` | 1. sequential:
[08:08:34.100] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.100] | : . ' , ; ` |    - tweaked: FALSE
[08:08:34.100] | : . ' , ; ` |    - call: plan(sequential)
[08:08:34.100] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.100] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.100] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.101] | : . ' , SequentialFuture started (and completed)
[08:08:34.101] | : . ' , signalConditions() ...
[08:08:34.101] | : . ' , ; include = ‘immediateCondition’
[08:08:34.101] | : . ' , ; exclude = 
[08:08:34.101] | : . ' , ; resignal = FALSE
[08:08:34.101] | : . ' , ; Number of conditions: 6
[08:08:34.101] | : . ' , ;  int 6
[08:08:34.102] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.102] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.102] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.102] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.102] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.102] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.102] | : . ' , signalConditions() ... done
[08:08:34.103] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:34.103] | : . Launching futures ... done
[08:08:34.103] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:34.103] | : Using SequentialFutureBackend ... done
[08:08:34.104] | run() for ‘Future’ (<unnamed-2>) ... done
[08:08:34.104] | signalConditions() ...
[08:08:34.105] | : include = ‘immediateCondition’
[08:08:34.105] | : exclude = 
[08:08:34.105] | : resignal = FALSE
[08:08:34.105] | : Number of conditions: 6
[08:08:34.105] | :  int 6
[08:08:34.105] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.105] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.106] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.106] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.106] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.106] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.106] | signalConditions() ... done
[08:08:34.106] | relay stdout ...
[08:08:34.106] | relay stdout ... done
[08:08:34.106] | check for misuse ...
[08:08:34.106] | check for misuse ... done
[08:08:34.107] | relay conditions ...
[08:08:34.107] | : Future state: ‘finished’
[08:08:34.107] | : signalConditions() ...
[08:08:34.107] | : . include = ‘condition’
[08:08:34.107] | : . exclude = ‘immediateCondition’
[08:08:34.107] | : . resignal = TRUE
[08:08:34.107] | : . Number of conditions: 6
[08:08:34.107] | : .  int 6
[08:08:34.108] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.108] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.072] | : . ' , attachPackages() ...
[08:08:34.108] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.108] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.072] | : . ' , ; packages: [n=1] ‘future’
[08:08:34.108] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.108] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.072] | : . ' , attachPackages() ... done
[08:08:34.108] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.108] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.073] | : . ' , attachPackages() ...
[08:08:34.109] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.109] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.073] | : . ' , ; packages: [n=0] 
[08:08:34.109] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.109] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.073] | : . ' , attachPackages() ... done
[08:08:34.109] | : signalConditions() ... done
[08:08:34.109] | relay conditions ... done
[08:08:34.109] value() for Future (<unnamed-2>) ... done
$a
[1] 1

[08:08:34.110] future(..., label = NULL) ...
[08:08:34.110] | lazy: FALSE
[08:08:34.110] | stdout: TRUE
[08:08:34.110] | conditions: [n=1] ‘condition’
[08:08:34.111] | gc: FALSE
[08:08:34.111] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:34.111] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:34.111] | : Searching for globals ...
[08:08:34.123] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:34.123] | : Searching for globals ... done
[08:08:34.123] | : Resolving globals: TRUE
[08:08:34.123] | : Resolving any globals that are futures ...
[08:08:34.123] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:34.123] | : Resolving any globals that are futures ... done
[08:08:34.123] | : Search for packages associated with the globals ...
[08:08:34.124] | : . Packages associated with globals: [1] ‘base’
[08:08:34.124] | : . Packages: [1] ‘base’
[08:08:34.124] | : Search for packages associated with the globals ... done
[08:08:34.124] | : Resolving futures part of globals (recursively) ...
[08:08:34.124] | : . resolve() for FutureGlobals ...
[08:08:34.124] | : . ' recursive: 99
[08:08:34.124] | : . ' Number of elements: 1
[08:08:34.125] | : . ' elements: ‘x’
[08:08:34.125] | : . ' 'obj' is list
[08:08:34.125] | : . ' resolve(obj, ...) ...
[08:08:34.125] | : . ' , resolve() for list ...
[08:08:34.125] | : . ' , ; recursive: 98
[08:08:34.125] | : . ' , ; Number of elements: 0
[08:08:34.125] | : . ' , resolve() for list ... done
[08:08:34.125] | : . ' resolve(obj, ...) ... done
[08:08:34.125] | : . ' resolved() for list ...
[08:08:34.125] | : . ' , Number of elements: 0
[08:08:34.126] | : . ' , Number of futures: 0
[08:08:34.126] | : . ' resolved() for list ... done
[08:08:34.126] | : . ' length: 0 (resolved future 1)
[08:08:34.126] | : . resolve() for FutureGlobals ... done
[08:08:34.126] | : . globals: [1] ‘x’
[08:08:34.126] | : Resolving futures part of globals (recursively) ... done
[08:08:34.126] | : Packages after dropping 'base': [0] 
[08:08:34.126] | : globals: [1] ‘x’
[08:08:34.126] | : packages: [0] 
[08:08:34.127] | getGlobalsAndPackages() ... done
[08:08:34.127] | run() for ‘Future’ (<unnamed-3>) ...
[08:08:34.127] | : state: ‘created’
[08:08:34.127] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.127] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.127] | : Using SequentialFutureBackend ...
[08:08:34.127] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:08:34.127] | : . Launching futures ...
[08:08:34.128] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:34.128] | : . ' , getFutureData() ...
[08:08:34.128] | : . ' , ; getFutureCore() ...
[08:08:34.128] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:34.128] | : . ' , ; getFutureCore() ... done
[08:08:34.128] | : . ' , ; getFutureCapture() ...
[08:08:34.128] | : . ' , ; getFutureCapture() ... done
[08:08:34.128] | : . ' , ; getFutureContext() ...
[08:08:34.128] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.129] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:34.129] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.129] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:34.129] | : . ' , ; getFutureContext() ... done
[08:08:34.129] | : . ' , getFutureData() ... done
[08:08:34.130] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.130] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:34.130] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.131] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.131] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.131] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:34.131] | : . ' , ; ` | New stack:
[08:08:34.131] | : . ' , ; ` | List of 1
[08:08:34.131] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.131] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.131] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:34.131] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.131] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.131] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.131] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.131] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.134] | : . ' , ; ` | Old stack:
[08:08:34.134] | : . ' , ; ` | List of 1
[08:08:34.134] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.134] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.134] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:34.134] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.134] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.134] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.134] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:34.134] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.134] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.134] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.134] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.137] | : . ' , ; ` | Not identical
[08:08:34.137] | : . ' , ; ` | all.equal() for future ...
[08:08:34.137] | : . ' , ; ` | : List of 2
[08:08:34.137] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.137] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.137] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:34.137] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.137] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.137] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.137] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.137] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.137] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.137] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.137] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.137] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.137] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.137] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.137] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.137] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.137] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.143] | : . ' , ; ` | all.equal() for future ... done
[08:08:34.143] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:34.143] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.144] | : . ' , ; ` List of future strategies:
[08:08:34.144] | : . ' , ; ` 1. sequential:
[08:08:34.144] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.144] | : . ' , ; `    - tweaked: FALSE
[08:08:34.144] | : . ' , ; `    - call: plan(sequential)
[08:08:34.144] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.144] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.144] | : . ' , assign_globals() ...
[08:08:34.144] | : . ' , List of 1
[08:08:34.144] | : . ' ,  $ x: list()
[08:08:34.144] | : . ' ,  - attr(*, "where")=List of 1
[08:08:34.144] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:34.144] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:34.144] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:34.144] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:34.144] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:34.147] | : . ' , - copied ‘x’ to environment
[08:08:34.147] | : . ' , assign_globals() ... done
[08:08:34.148] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.148] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.149] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.149] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:34.149] | : . ' , ; ` | : New stack:
[08:08:34.149] | : . ' , ; ` | : List of 1
[08:08:34.149] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.149] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.149] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.149] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.149] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.149] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.149] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.149] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.149] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.149] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.149] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.152] | : . ' , ; ` | : Old stack:
[08:08:34.152] | : . ' , ; ` | : List of 1
[08:08:34.152] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.152] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.152] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.152] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.152] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.152] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.152] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.152] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.152] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.152] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.152] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.155] | : . ' , ; ` | : Identical
[08:08:34.155] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:34.155] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.155] | : . ' , ; ` | List of future strategies:
[08:08:34.155] | : . ' , ; ` | 1. sequential:
[08:08:34.155] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.155] | : . ' , ; ` |    - tweaked: FALSE
[08:08:34.155] | : . ' , ; ` |    - call: plan(sequential)
[08:08:34.156] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.156] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.156] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.156] | : . ' , SequentialFuture started (and completed)
[08:08:34.156] | : . ' , signalConditions() ...
[08:08:34.156] | : . ' , ; include = ‘immediateCondition’
[08:08:34.157] | : . ' , ; exclude = 
[08:08:34.157] | : . ' , ; resignal = FALSE
[08:08:34.157] | : . ' , ; Number of conditions: 6
[08:08:34.157] | : . ' , ;  int 6
[08:08:34.157] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.157] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.157] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.158] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.158] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.158] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.158] | : . ' , signalConditions() ... done
[08:08:34.158] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:34.158] | : . Launching futures ... done
[08:08:34.158] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:34.158] | : Using SequentialFutureBackend ... done
[08:08:34.158] | run() for ‘Future’ (<unnamed-3>) ... done
[08:08:34.158] future(..., label = NULL) ... done
[08:08:34.159] value() for SequentialFuture (<unnamed-3>) ...
[08:08:34.159] | signalConditions() ...
[08:08:34.160] | : include = ‘immediateCondition’
[08:08:34.160] | : exclude = 
[08:08:34.160] | : resignal = FALSE
[08:08:34.160] | : Number of conditions: 6
[08:08:34.160] | :  int 6
[08:08:34.161] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.161] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.161] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.161] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.161] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.161] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.161] | signalConditions() ... done
[08:08:34.161] | relay stdout ...
[08:08:34.161] | relay stdout ... done
[08:08:34.162] | check for misuse ...
[08:08:34.162] | check for misuse ... done
[08:08:34.162] | relay conditions ...
[08:08:34.162] | : Future state: ‘finished’
[08:08:34.162] | : signalConditions() ...
[08:08:34.162] | : . include = ‘condition’
[08:08:34.162] | : . exclude = ‘immediateCondition’
[08:08:34.162] | : . resignal = TRUE
[08:08:34.162] | : . Number of conditions: 6
[08:08:34.162] | : .  int 6
[08:08:34.163] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.163] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.129] | : . ' , attachPackages() ...
[08:08:34.163] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.163] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.129] | : . ' , ; packages: [n=1] ‘future’
[08:08:34.163] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.163] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.129] | : . ' , attachPackages() ... done
[08:08:34.163] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.164] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.130] | : . ' , attachPackages() ...
[08:08:34.164] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.164] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.130] | : . ' , ; packages: [n=0] 
[08:08:34.164] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.164] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.130] | : . ' , attachPackages() ... done
[08:08:34.164] | : signalConditions() ... done
[08:08:34.164] | relay conditions ... done
[08:08:34.164] value() for SequentialFuture (<unnamed-3>) ... done
$a
[1] 1

[08:08:34.165] future(..., label = NULL) ...
[08:08:34.165] | lazy: TRUE
[08:08:34.165] | stdout: TRUE
[08:08:34.165] | conditions: [n=1] ‘condition’
[08:08:34.165] | gc: FALSE
[08:08:34.165] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:34.165] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:34.166] | : Searching for globals ...
[08:08:34.176] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:34.177] | : Searching for globals ... done
[08:08:34.177] | : Resolving globals: TRUE
[08:08:34.177] | : Resolving any globals that are futures ...
[08:08:34.177] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:34.177] | : Resolving any globals that are futures ... done
[08:08:34.177] | : Search for packages associated with the globals ...
[08:08:34.177] | : . Packages associated with globals: [1] ‘base’
[08:08:34.178] | : . Packages: [1] ‘base’
[08:08:34.178] | : Search for packages associated with the globals ... done
[08:08:34.178] | : Resolving futures part of globals (recursively) ...
[08:08:34.178] | : . resolve() for FutureGlobals ...
[08:08:34.178] | : . ' recursive: 99
[08:08:34.178] | : . ' Number of elements: 1
[08:08:34.178] | : . ' elements: ‘x’
[08:08:34.178] | : . ' 'obj' is list
[08:08:34.179] | : . ' resolve(obj, ...) ...
[08:08:34.179] | : . ' , resolve() for list ...
[08:08:34.179] | : . ' , ; recursive: 98
[08:08:34.179] | : . ' , ; Number of elements: 0
[08:08:34.179] | : . ' , resolve() for list ... done
[08:08:34.179] | : . ' resolve(obj, ...) ... done
[08:08:34.179] | : . ' resolved() for list ...
[08:08:34.179] | : . ' , Number of elements: 0
[08:08:34.179] | : . ' , Number of futures: 0
[08:08:34.179] | : . ' resolved() for list ... done
[08:08:34.180] | : . ' length: 0 (resolved future 1)
[08:08:34.180] | : . resolve() for FutureGlobals ... done
[08:08:34.180] | : . globals: [1] ‘x’
[08:08:34.180] | : Resolving futures part of globals (recursively) ... done
[08:08:34.180] | : Packages after dropping 'base': [0] 
[08:08:34.180] | : globals: [1] ‘x’
[08:08:34.180] | : packages: [0] 
[08:08:34.180] | getGlobalsAndPackages() ... done
[08:08:34.180] future(..., label = NULL) ... done
[08:08:34.181] value() for Future (<unnamed-4>) ...
[08:08:34.181] | run() for ‘Future’ (<unnamed-4>) ...
[08:08:34.181] | : state: ‘created’
[08:08:34.181] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.181] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.181] | : Using SequentialFutureBackend ...
[08:08:34.181] | : . Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:08:34.181] | : . Launching futures ...
[08:08:34.181] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:34.182] | : . ' , getFutureData() ...
[08:08:34.182] | : . ' , ; getFutureCore() ...
[08:08:34.182] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:34.182] | : . ' , ; getFutureCore() ... done
[08:08:34.182] | : . ' , ; getFutureCapture() ...
[08:08:34.182] | : . ' , ; getFutureCapture() ... done
[08:08:34.182] | : . ' , ; getFutureContext() ...
[08:08:34.182] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.182] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:34.182] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.183] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:34.183] | : . ' , ; getFutureContext() ... done
[08:08:34.183] | : . ' , getFutureData() ... done
[08:08:34.184] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.184] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:34.184] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.184] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.185] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.185] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:34.185] | : . ' , ; ` | New stack:
[08:08:34.185] | : . ' , ; ` | List of 1
[08:08:34.185] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.185] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.185] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:34.185] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.185] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.185] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.185] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.185] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.188] | : . ' , ; ` | Old stack:
[08:08:34.188] | : . ' , ; ` | List of 1
[08:08:34.188] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.188] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.188] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:34.188] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.188] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.188] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.188] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:34.188] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.188] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.188] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.188] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.191] | : . ' , ; ` | Not identical
[08:08:34.191] | : . ' , ; ` | all.equal() for future ...
[08:08:34.191] | : . ' , ; ` | : List of 2
[08:08:34.191] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.191] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.191] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:34.191] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.191] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.191] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.191] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.191] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.191] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.191] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.191] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.191] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.191] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.191] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.191] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.191] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.191] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.197] | : . ' , ; ` | all.equal() for future ... done
[08:08:34.197] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:34.197] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.198] | : . ' , ; ` List of future strategies:
[08:08:34.198] | : . ' , ; ` 1. sequential:
[08:08:34.198] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.198] | : . ' , ; `    - tweaked: FALSE
[08:08:34.198] | : . ' , ; `    - call: plan(sequential)
[08:08:34.198] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.198] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.198] | : . ' , assign_globals() ...
[08:08:34.198] | : . ' , List of 1
[08:08:34.198] | : . ' ,  $ x: list()
[08:08:34.198] | : . ' ,  - attr(*, "where")=List of 1
[08:08:34.198] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:34.198] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:34.198] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:34.198] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:34.198] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:34.201] | : . ' , - copied ‘x’ to environment
[08:08:34.201] | : . ' , assign_globals() ... done
[08:08:34.202] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.202] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.203] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.203] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:34.203] | : . ' , ; ` | : New stack:
[08:08:34.203] | : . ' , ; ` | : List of 1
[08:08:34.203] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.203] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.203] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.203] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.203] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.203] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.203] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.203] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.203] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.203] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.203] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.206] | : . ' , ; ` | : Old stack:
[08:08:34.206] | : . ' , ; ` | : List of 1
[08:08:34.206] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.206] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.206] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.206] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.206] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.206] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.206] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.206] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.206] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.206] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.206] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.209] | : . ' , ; ` | : Identical
[08:08:34.209] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:34.209] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.209] | : . ' , ; ` | List of future strategies:
[08:08:34.209] | : . ' , ; ` | 1. sequential:
[08:08:34.209] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.209] | : . ' , ; ` |    - tweaked: FALSE
[08:08:34.209] | : . ' , ; ` |    - call: plan(sequential)
[08:08:34.210] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.210] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.210] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.210] | : . ' , SequentialFuture started (and completed)
[08:08:34.210] | : . ' , signalConditions() ...
[08:08:34.210] | : . ' , ; include = ‘immediateCondition’
[08:08:34.211] | : . ' , ; exclude = 
[08:08:34.211] | : . ' , ; resignal = FALSE
[08:08:34.211] | : . ' , ; Number of conditions: 6
[08:08:34.211] | : . ' , ;  int 6
[08:08:34.211] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.211] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.212] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.212] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.212] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.213] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.213] | : . ' , signalConditions() ... done
[08:08:34.213] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:34.213] | : . Launching futures ... done
[08:08:34.213] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:34.213] | : Using SequentialFutureBackend ... done
[08:08:34.213] | run() for ‘Future’ (<unnamed-4>) ... done
[08:08:34.214] | signalConditions() ...
[08:08:34.214] | : include = ‘immediateCondition’
[08:08:34.214] | : exclude = 
[08:08:34.214] | : resignal = FALSE
[08:08:34.214] | : Number of conditions: 6
[08:08:34.214] | :  int 6
[08:08:34.214] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.215] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.215] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.215] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.215] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.215] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.215] | signalConditions() ... done
[08:08:34.215] | relay stdout ...
[08:08:34.215] | relay stdout ... done
[08:08:34.215] | check for misuse ...
[08:08:34.215] | check for misuse ... done
[08:08:34.216] | relay conditions ...
[08:08:34.216] | : Future state: ‘finished’
[08:08:34.216] | : signalConditions() ...
[08:08:34.216] | : . include = ‘condition’
[08:08:34.216] | : . exclude = ‘immediateCondition’
[08:08:34.216] | : . resignal = TRUE
[08:08:34.216] | : . Number of conditions: 6
[08:08:34.216] | : .  int 6
[08:08:34.217] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.217] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.183] | : . ' , attachPackages() ...
[08:08:34.217] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.217] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.183] | : . ' , ; packages: [n=1] ‘future’
[08:08:34.217] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.217] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.183] | : . ' , attachPackages() ... done
[08:08:34.217] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.217] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.183] | : . ' , attachPackages() ...
[08:08:34.218] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.218] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.184] | : . ' , ; packages: [n=0] 
[08:08:34.218] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.218] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.184] | : . ' , attachPackages() ... done
[08:08:34.218] | : signalConditions() ... done
[08:08:34.218] | relay conditions ... done
[08:08:34.218] value() for Future (<unnamed-4>) ... done
$a
[1] 1

[08:08:34.218] future(..., label = NULL) ...
[08:08:34.219] | lazy: FALSE
[08:08:34.219] | stdout: TRUE
[08:08:34.219] | conditions: [n=1] ‘condition’
[08:08:34.219] | gc: FALSE
[08:08:34.219] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:34.219] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:34.219] | : Searching for globals ...
[08:08:34.235] | : . globals found: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[08:08:34.235] | : Searching for globals ... done
[08:08:34.235] | : Resolving globals: TRUE
[08:08:34.235] | : Resolving any globals that are futures ...
[08:08:34.235] | : . globals: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[08:08:34.236] | : Resolving any globals that are futures ... done
[08:08:34.236] | : Search for packages associated with the globals ...
[08:08:34.236] | : . Packages associated with globals: [1] ‘base’
[08:08:34.236] | : . Packages: [1] ‘base’
[08:08:34.236] | : Search for packages associated with the globals ... done
[08:08:34.236] | : Packages after dropping 'base': [0] 
[08:08:34.236] | : globals: [0] 
[08:08:34.237] | : packages: [0] 
[08:08:34.237] | getGlobalsAndPackages() ... done
[08:08:34.237] | run() for ‘Future’ (<unnamed-5>) ...
[08:08:34.237] | : state: ‘created’
[08:08:34.237] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.237] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.237] | : Using SequentialFutureBackend ...
[08:08:34.237] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:34.237] | : . Launching futures ...
[08:08:34.238] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:34.238] | : . ' , getFutureData() ...
[08:08:34.238] | : . ' , ; getFutureCore() ...
[08:08:34.238] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:34.238] | : . ' , ; getFutureCore() ... done
[08:08:34.238] | : . ' , ; getFutureCapture() ...
[08:08:34.238] | : . ' , ; getFutureCapture() ... done
[08:08:34.238] | : . ' , ; getFutureContext() ...
[08:08:34.238] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.239] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:34.239] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.239] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:34.239] | : . ' , ; getFutureContext() ... done
[08:08:34.239] | : . ' , getFutureData() ... done
[08:08:34.240] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.240] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:34.240] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.241] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.241] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.241] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:34.241] | : . ' , ; ` | New stack:
[08:08:34.241] | : . ' , ; ` | List of 1
[08:08:34.241] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.241] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.241] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:34.241] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.241] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.241] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.241] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.241] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.244] | : . ' , ; ` | Old stack:
[08:08:34.244] | : . ' , ; ` | List of 1
[08:08:34.244] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.244] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.244] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:34.244] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.244] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.244] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.244] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:34.244] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.244] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.244] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.244] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.248] | : . ' , ; ` | Not identical
[08:08:34.248] | : . ' , ; ` | all.equal() for future ...
[08:08:34.248] | : . ' , ; ` | : List of 2
[08:08:34.248] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.248] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.248] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:34.248] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.248] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.248] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.248] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.248] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.248] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.248] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.248] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.248] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.248] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.248] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.248] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.248] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.248] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.253] | : . ' , ; ` | all.equal() for future ... done
[08:08:34.253] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:34.253] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.253] | : . ' , ; ` List of future strategies:
[08:08:34.253] | : . ' , ; ` 1. sequential:
[08:08:34.253] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.253] | : . ' , ; `    - tweaked: FALSE
[08:08:34.253] | : . ' , ; `    - call: plan(sequential)
[08:08:34.254] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.254] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.255] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.255] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.255] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.255] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:34.256] | : . ' , ; ` | : New stack:
[08:08:34.256] | : . ' , ; ` | : List of 1
[08:08:34.256] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.256] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.256] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.256] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.256] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.256] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.256] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.256] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.256] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.256] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.256] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.259] | : . ' , ; ` | : Old stack:
[08:08:34.259] | : . ' , ; ` | : List of 1
[08:08:34.259] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.259] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.259] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.259] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.259] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.259] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.259] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.259] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.259] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.259] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.259] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.263] | : . ' , ; ` | : Identical
[08:08:34.263] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:34.263] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.263] | : . ' , ; ` | List of future strategies:
[08:08:34.263] | : . ' , ; ` | 1. sequential:
[08:08:34.263] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.263] | : . ' , ; ` |    - tweaked: FALSE
[08:08:34.263] | : . ' , ; ` |    - call: plan(sequential)
[08:08:34.263] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.264] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.264] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.264] | : . ' , SequentialFuture started (and completed)
[08:08:34.264] | : . ' , signalConditions() ...
[08:08:34.264] | : . ' , ; include = ‘immediateCondition’
[08:08:34.264] | : . ' , ; exclude = 
[08:08:34.264] | : . ' , ; resignal = FALSE
[08:08:34.264] | : . ' , ; Number of conditions: 6
[08:08:34.265] | : . ' , ;  int 6
[08:08:34.265] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.265] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.265] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.265] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.265] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.265] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.266] | : . ' , signalConditions() ... done
[08:08:34.266] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:34.266] | : . Launching futures ... done
[08:08:34.266] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:34.266] | : Using SequentialFutureBackend ... done
[08:08:34.266] | run() for ‘Future’ (<unnamed-5>) ... done
[08:08:34.266] future(..., label = NULL) ... done
[08:08:34.266] value() for SequentialFuture (<unnamed-5>) ...
[08:08:34.266] | signalConditions() ...
[08:08:34.266] | : include = ‘immediateCondition’
[08:08:34.267] | : exclude = 
[08:08:34.267] | : resignal = FALSE
[08:08:34.267] | : Number of conditions: 6
[08:08:34.267] | :  int 6
[08:08:34.267] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.267] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.267] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.268] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.268] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.268] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.268] | signalConditions() ... done
[08:08:34.268] | relay stdout ...
[08:08:34.268] | relay stdout ... done
[08:08:34.268] | check for misuse ...
[08:08:34.268] | check for misuse ... done
[08:08:34.268] | relay conditions ...
[08:08:34.268] | : Future state: ‘finished’
[08:08:34.269] | : signalConditions() ...
[08:08:34.269] | : . include = ‘condition’
[08:08:34.269] | : . exclude = ‘immediateCondition’
[08:08:34.269] | : . resignal = TRUE
[08:08:34.269] | : . Number of conditions: 6
[08:08:34.269] | : .  int 6
[08:08:34.269] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.269] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.239] | : . ' , attachPackages() ...
[08:08:34.270] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.270] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.239] | : . ' , ; packages: [n=1] ‘future’
[08:08:34.270] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.270] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.239] | : . ' , attachPackages() ... done
[08:08:34.270] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.270] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.240] | : . ' , attachPackages() ...
[08:08:34.270] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.270] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.240] | : . ' , ; packages: [n=0] 
[08:08:34.271] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.271] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.240] | : . ' , attachPackages() ... done
[08:08:34.271] | : signalConditions() ... done
[08:08:34.271] | relay conditions ... done
[08:08:34.271] value() for SequentialFuture (<unnamed-5>) ... done
$b
[1] 2

$a
[1] 1

[08:08:34.271] future(..., label = NULL) ...
[08:08:34.271] | lazy: FALSE
[08:08:34.271] | stdout: TRUE
[08:08:34.271] | conditions: [n=1] ‘condition’
[08:08:34.271] | gc: FALSE
[08:08:34.272] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:34.272] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:34.272] | : Searching for globals ...
[08:08:34.311] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:34.311] | : Searching for globals ... done
[08:08:34.311] | : Resolving globals: TRUE
[08:08:34.311] | : Resolving any globals that are futures ...
[08:08:34.311] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:34.311] | : Resolving any globals that are futures ... done
[08:08:34.311] | : Search for packages associated with the globals ...
[08:08:34.312] | : . Packages associated with globals: [1] ‘base’
[08:08:34.312] | : . Packages: [1] ‘base’
[08:08:34.312] | : Search for packages associated with the globals ... done
[08:08:34.312] | : Resolving futures part of globals (recursively) ...
[08:08:34.312] | : . resolve() for FutureGlobals ...
[08:08:34.312] | : . ' recursive: 99
[08:08:34.313] | : . ' Number of elements: 1
[08:08:34.313] | : . ' elements: ‘x’
[08:08:34.313] | : . ' 'obj' is list
[08:08:34.313] | : . ' resolve(obj, ...) ...
[08:08:34.313] | : . ' , resolve() for list ...
[08:08:34.313] | : . ' , ; recursive: 98
[08:08:34.313] | : . ' , ; Number of elements: 0
[08:08:34.313] | : . ' , resolve() for list ... done
[08:08:34.313] | : . ' resolve(obj, ...) ... done
[08:08:34.313] | : . ' resolved() for list ...
[08:08:34.314] | : . ' , Number of elements: 0
[08:08:34.314] | : . ' , Number of futures: 0
[08:08:34.314] | : . ' resolved() for list ... done
[08:08:34.314] | : . ' length: 0 (resolved future 1)
[08:08:34.314] | : . resolve() for FutureGlobals ... done
[08:08:34.314] | : . globals: [1] ‘x’
[08:08:34.314] | : Resolving futures part of globals (recursively) ... done
[08:08:34.314] | : Packages after dropping 'base': [0] 
[08:08:34.314] | : globals: [1] ‘x’
[08:08:34.315] | : packages: [0] 
[08:08:34.315] | getGlobalsAndPackages() ... done
[08:08:34.315] | run() for ‘Future’ (<unnamed-6>) ...
[08:08:34.315] | : state: ‘created’
[08:08:34.315] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.315] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.315] | : Using SequentialFutureBackend ...
[08:08:34.315] | : . Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:08:34.316] | : . Launching futures ...
[08:08:34.316] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:34.316] | : . ' , getFutureData() ...
[08:08:34.316] | : . ' , ; getFutureCore() ...
[08:08:34.316] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:34.316] | : . ' , ; getFutureCore() ... done
[08:08:34.316] | : . ' , ; getFutureCapture() ...
[08:08:34.316] | : . ' , ; getFutureCapture() ... done
[08:08:34.316] | : . ' , ; getFutureContext() ...
[08:08:34.316] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.317] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:34.317] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.317] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:34.317] | : . ' , ; getFutureContext() ... done
[08:08:34.317] | : . ' , getFutureData() ... done
[08:08:34.318] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.318] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:34.319] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.319] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.319] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.319] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:34.319] | : . ' , ; ` | New stack:
[08:08:34.319] | : . ' , ; ` | List of 1
[08:08:34.319] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.319] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.319] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:34.319] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.319] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.319] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.319] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.319] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.322] | : . ' , ; ` | Old stack:
[08:08:34.322] | : . ' , ; ` | List of 1
[08:08:34.322] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.322] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.322] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:34.322] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.322] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.322] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.322] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:34.322] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.322] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.322] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.322] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.325] | : . ' , ; ` | Not identical
[08:08:34.325] | : . ' , ; ` | all.equal() for future ...
[08:08:34.326] | : . ' , ; ` | : List of 2
[08:08:34.326] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.326] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.326] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:34.326] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.326] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.326] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.326] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.326] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.326] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.326] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.326] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.326] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.326] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.326] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.326] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.326] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.326] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.331] | : . ' , ; ` | all.equal() for future ... done
[08:08:34.332] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:34.332] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.332] | : . ' , ; ` List of future strategies:
[08:08:34.332] | : . ' , ; ` 1. sequential:
[08:08:34.332] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.332] | : . ' , ; `    - tweaked: FALSE
[08:08:34.332] | : . ' , ; `    - call: plan(sequential)
[08:08:34.332] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.332] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.333] | : . ' , assign_globals() ...
[08:08:34.333] | : . ' , List of 1
[08:08:34.333] | : . ' ,  $ x: list()
[08:08:34.333] | : . ' ,  - attr(*, "where")=List of 1
[08:08:34.333] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:34.333] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:34.333] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:34.333] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:34.333] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:34.335] | : . ' , - copied ‘x’ to environment
[08:08:34.335] | : . ' , assign_globals() ... done
[08:08:34.337] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.337] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.337] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.337] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:34.337] | : . ' , ; ` | : New stack:
[08:08:34.337] | : . ' , ; ` | : List of 1
[08:08:34.337] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.337] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.337] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.337] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.337] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.337] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.337] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.337] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.337] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.337] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.337] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.340] | : . ' , ; ` | : Old stack:
[08:08:34.341] | : . ' , ; ` | : List of 1
[08:08:34.341] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.341] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.341] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.341] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.341] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.341] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.341] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.341] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.341] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.341] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.341] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.344] | : . ' , ; ` | : Identical
[08:08:34.344] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:34.344] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.344] | : . ' , ; ` | List of future strategies:
[08:08:34.344] | : . ' , ; ` | 1. sequential:
[08:08:34.344] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.344] | : . ' , ; ` |    - tweaked: FALSE
[08:08:34.344] | : . ' , ; ` |    - call: plan(sequential)
[08:08:34.344] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.345] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.345] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.345] | : . ' , SequentialFuture started (and completed)
[08:08:34.345] | : . ' , signalConditions() ...
[08:08:34.345] | : . ' , ; include = ‘immediateCondition’
[08:08:34.345] | : . ' , ; exclude = 
[08:08:34.345] | : . ' , ; resignal = FALSE
[08:08:34.346] | : . ' , ; Number of conditions: 6
[08:08:34.346] | : . ' , ;  int 6
[08:08:34.347] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.347] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.347] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.347] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.347] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.347] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.348] | : . ' , signalConditions() ... done
[08:08:34.348] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:34.348] | : . Launching futures ... done
[08:08:34.348] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:34.348] | : Using SequentialFutureBackend ... done
[08:08:34.348] | run() for ‘Future’ (<unnamed-6>) ... done
[08:08:34.348] future(..., label = NULL) ... done
[08:08:34.348] value() for SequentialFuture (<unnamed-6>) ...
[08:08:34.349] | signalConditions() ...
[08:08:34.349] | : include = ‘immediateCondition’
[08:08:34.349] | : exclude = 
[08:08:34.349] | : resignal = FALSE
[08:08:34.349] | : Number of conditions: 6
[08:08:34.349] | :  int 6
[08:08:34.349] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.349] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.350] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.350] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.350] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.350] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.350] | signalConditions() ... done
[08:08:34.350] | relay stdout ...
[08:08:34.350] | relay stdout ... done
[08:08:34.350] | check for misuse ...
[08:08:34.350] | check for misuse ... done
[08:08:34.351] | relay conditions ...
[08:08:34.351] | : Future state: ‘finished’
[08:08:34.351] | : signalConditions() ...
[08:08:34.351] | : . include = ‘condition’
[08:08:34.351] | : . exclude = ‘immediateCondition’
[08:08:34.351] | : . resignal = TRUE
[08:08:34.351] | : . Number of conditions: 6
[08:08:34.351] | : .  int 6
[08:08:34.352] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.352] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.317] | : . ' , attachPackages() ...
[08:08:34.352] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.352] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.317] | : . ' , ; packages: [n=1] ‘future’
[08:08:34.352] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.352] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.318] | : . ' , attachPackages() ... done
[08:08:34.352] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.352] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.318] | : . ' , attachPackages() ...
[08:08:34.352] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.353] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.318] | : . ' , ; packages: [n=0] 
[08:08:34.353] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.353] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.318] | : . ' , attachPackages() ... done
[08:08:34.353] | : signalConditions() ... done
[08:08:34.353] | relay conditions ... done
[08:08:34.353] value() for SequentialFuture (<unnamed-6>) ... done
$a
[1] 1

[08:08:34.353] future(..., label = NULL) ...
[08:08:34.353] | lazy: TRUE
[08:08:34.353] | stdout: TRUE
[08:08:34.354] | conditions: [n=1] ‘condition’
[08:08:34.354] | gc: FALSE
[08:08:34.354] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:34.354] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:34.354] | : Searching for globals ...
[08:08:34.365] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:34.365] | : Searching for globals ... done
[08:08:34.365] | : Resolving globals: TRUE
[08:08:34.366] | : Resolving any globals that are futures ...
[08:08:34.366] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:34.366] | : Resolving any globals that are futures ... done
[08:08:34.366] | : Search for packages associated with the globals ...
[08:08:34.366] | : . Packages associated with globals: [1] ‘base’
[08:08:34.366] | : . Packages: [1] ‘base’
[08:08:34.366] | : Search for packages associated with the globals ... done
[08:08:34.367] | : Resolving futures part of globals (recursively) ...
[08:08:34.367] | : . resolve() for FutureGlobals ...
[08:08:34.367] | : . ' recursive: 99
[08:08:34.367] | : . ' Number of elements: 1
[08:08:34.367] | : . ' elements: ‘x’
[08:08:34.367] | : . ' 'obj' is list
[08:08:34.367] | : . ' resolve(obj, ...) ...
[08:08:34.367] | : . ' , resolve() for list ...
[08:08:34.367] | : . ' , ; recursive: 98
[08:08:34.368] | : . ' , ; Number of elements: 0
[08:08:34.368] | : . ' , resolve() for list ... done
[08:08:34.368] | : . ' resolve(obj, ...) ... done
[08:08:34.368] | : . ' resolved() for list ...
[08:08:34.368] | : . ' , Number of elements: 0
[08:08:34.368] | : . ' , Number of futures: 0
[08:08:34.368] | : . ' resolved() for list ... done
[08:08:34.368] | : . ' length: 0 (resolved future 1)
[08:08:34.368] | : . resolve() for FutureGlobals ... done
[08:08:34.368] | : . globals: [1] ‘x’
[08:08:34.369] | : Resolving futures part of globals (recursively) ... done
[08:08:34.369] | : Packages after dropping 'base': [0] 
[08:08:34.369] | : globals: [1] ‘x’
[08:08:34.369] | : packages: [0] 
[08:08:34.369] | getGlobalsAndPackages() ... done
[08:08:34.369] future(..., label = NULL) ... done
[08:08:34.369] value() for Future (<unnamed-7>) ...
[08:08:34.369] | run() for ‘Future’ (<unnamed-7>) ...
[08:08:34.369] | : state: ‘created’
[08:08:34.370] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.370] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.370] | : Using SequentialFutureBackend ...
[08:08:34.370] | : . Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:08:34.370] | : . Launching futures ...
[08:08:34.370] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:34.370] | : . ' , getFutureData() ...
[08:08:34.370] | : . ' , ; getFutureCore() ...
[08:08:34.370] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:34.370] | : . ' , ; getFutureCore() ... done
[08:08:34.371] | : . ' , ; getFutureCapture() ...
[08:08:34.371] | : . ' , ; getFutureCapture() ... done
[08:08:34.371] | : . ' , ; getFutureContext() ...
[08:08:34.371] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.371] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:34.371] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.371] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:34.371] | : . ' , ; getFutureContext() ... done
[08:08:34.371] | : . ' , getFutureData() ... done
[08:08:34.373] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.373] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:34.373] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.373] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.373] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.373] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:34.373] | : . ' , ; ` | New stack:
[08:08:34.374] | : . ' , ; ` | List of 1
[08:08:34.374] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.374] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.374] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:34.374] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.374] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.374] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.374] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.374] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.376] | : . ' , ; ` | Old stack:
[08:08:34.376] | : . ' , ; ` | List of 1
[08:08:34.376] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.376] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.376] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:34.376] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.376] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.376] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.376] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:34.376] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.376] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.376] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.376] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.379] | : . ' , ; ` | Not identical
[08:08:34.379] | : . ' , ; ` | all.equal() for future ...
[08:08:34.379] | : . ' , ; ` | : List of 2
[08:08:34.379] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.379] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.379] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:34.379] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.379] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.379] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.379] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.379] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.379] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.379] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.379] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.379] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.379] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.379] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.379] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.379] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.379] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.385] | : . ' , ; ` | all.equal() for future ... done
[08:08:34.385] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:34.386] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.386] | : . ' , ; ` List of future strategies:
[08:08:34.386] | : . ' , ; ` 1. sequential:
[08:08:34.386] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.386] | : . ' , ; `    - tweaked: FALSE
[08:08:34.386] | : . ' , ; `    - call: plan(sequential)
[08:08:34.386] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.386] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.386] | : . ' , assign_globals() ...
[08:08:34.386] | : . ' , List of 1
[08:08:34.386] | : . ' ,  $ x: list()
[08:08:34.386] | : . ' ,  - attr(*, "where")=List of 1
[08:08:34.386] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:34.386] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:34.386] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:34.386] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:34.386] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:34.389] | : . ' , - copied ‘x’ to environment
[08:08:34.389] | : . ' , assign_globals() ... done
[08:08:34.390] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.390] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.391] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.391] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:34.391] | : . ' , ; ` | : New stack:
[08:08:34.391] | : . ' , ; ` | : List of 1
[08:08:34.391] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.391] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.391] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.391] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.391] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.391] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.391] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.391] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.391] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.391] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.391] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.394] | : . ' , ; ` | : Old stack:
[08:08:34.394] | : . ' , ; ` | : List of 1
[08:08:34.394] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.394] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.394] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.394] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.394] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.394] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.394] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.394] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.394] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.394] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.394] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.397] | : . ' , ; ` | : Identical
[08:08:34.397] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:34.397] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.397] | : . ' , ; ` | List of future strategies:
[08:08:34.397] | : . ' , ; ` | 1. sequential:
[08:08:34.397] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.397] | : . ' , ; ` |    - tweaked: FALSE
[08:08:34.397] | : . ' , ; ` |    - call: plan(sequential)
[08:08:34.398] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.398] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.398] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.398] | : . ' , SequentialFuture started (and completed)
[08:08:34.399] | : . ' , signalConditions() ...
[08:08:34.399] | : . ' , ; include = ‘immediateCondition’
[08:08:34.399] | : . ' , ; exclude = 
[08:08:34.399] | : . ' , ; resignal = FALSE
[08:08:34.399] | : . ' , ; Number of conditions: 6
[08:08:34.399] | : . ' , ;  int 6
[08:08:34.399] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.399] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.400] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.400] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.400] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.400] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.400] | : . ' , signalConditions() ... done
[08:08:34.400] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:34.400] | : . Launching futures ... done
[08:08:34.400] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:34.400] | : Using SequentialFutureBackend ... done
[08:08:34.401] | run() for ‘Future’ (<unnamed-7>) ... done
[08:08:34.401] | signalConditions() ...
[08:08:34.401] | : include = ‘immediateCondition’
[08:08:34.401] | : exclude = 
[08:08:34.401] | : resignal = FALSE
[08:08:34.401] | : Number of conditions: 6
[08:08:34.401] | :  int 6
[08:08:34.401] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.402] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.402] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.402] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.402] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.402] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.402] | signalConditions() ... done
[08:08:34.402] | relay stdout ...
[08:08:34.402] | relay stdout ... done
[08:08:34.402] | check for misuse ...
[08:08:34.403] | check for misuse ... done
[08:08:34.403] | relay conditions ...
[08:08:34.403] | : Future state: ‘finished’
[08:08:34.404] | : signalConditions() ...
[08:08:34.404] | : . include = ‘condition’
[08:08:34.404] | : . exclude = ‘immediateCondition’
[08:08:34.404] | : . resignal = TRUE
[08:08:34.404] | : . Number of conditions: 6
[08:08:34.404] | : .  int 6
[08:08:34.405] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.405] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.372] | : . ' , attachPackages() ...
[08:08:34.405] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.405] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.372] | : . ' , ; packages: [n=1] ‘future’
[08:08:34.405] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.405] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.372] | : . ' , attachPackages() ... done
[08:08:34.405] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.405] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.372] | : . ' , attachPackages() ...
[08:08:34.406] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.406] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.372] | : . ' , ; packages: [n=0] 
[08:08:34.406] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.406] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.372] | : . ' , attachPackages() ... done
[08:08:34.406] | : signalConditions() ... done
[08:08:34.406] | relay conditions ... done
[08:08:34.406] value() for Future (<unnamed-7>) ... done
$a
[1] 1

[08:08:34.406] future(..., label = NULL) ...
[08:08:34.407] | lazy: FALSE
[08:08:34.407] | stdout: TRUE
[08:08:34.407] | conditions: [n=1] ‘condition’
[08:08:34.407] | gc: FALSE
[08:08:34.407] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:34.407] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:34.407] | : Searching for globals ...
[08:08:34.417] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:34.417] | : Searching for globals ... done
[08:08:34.417] | : Resolving globals: TRUE
[08:08:34.418] | : Resolving any globals that are futures ...
[08:08:34.418] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:34.418] | : Resolving any globals that are futures ... done
[08:08:34.418] | : Search for packages associated with the globals ...
[08:08:34.418] | : . Packages associated with globals: [1] ‘base’
[08:08:34.418] | : . Packages: [1] ‘base’
[08:08:34.418] | : Search for packages associated with the globals ... done
[08:08:34.419] | : Resolving futures part of globals (recursively) ...
[08:08:34.419] | : . resolve() for FutureGlobals ...
[08:08:34.419] | : . ' recursive: 99
[08:08:34.419] | : . ' Number of elements: 1
[08:08:34.419] | : . ' elements: ‘x’
[08:08:34.419] | : . ' 'obj' is list
[08:08:34.419] | : . ' resolve(obj, ...) ...
[08:08:34.419] | : . ' , resolve() for list ...
[08:08:34.419] | : . ' , ; recursive: 98
[08:08:34.420] | : . ' , ; Number of elements: 0
[08:08:34.420] | : . ' , resolve() for list ... done
[08:08:34.420] | : . ' resolve(obj, ...) ... done
[08:08:34.420] | : . ' resolved() for list ...
[08:08:34.420] | : . ' , Number of elements: 0
[08:08:34.421] | : . ' , Number of futures: 0
[08:08:34.421] | : . ' resolved() for list ... done
[08:08:34.421] | : . ' length: 0 (resolved future 1)
[08:08:34.421] | : . resolve() for FutureGlobals ... done
[08:08:34.421] | : . globals: [1] ‘x’
[08:08:34.421] | : Resolving futures part of globals (recursively) ... done
[08:08:34.421] | : Packages after dropping 'base': [0] 
[08:08:34.422] | : globals: [1] ‘x’
[08:08:34.422] | : packages: [0] 
[08:08:34.422] | getGlobalsAndPackages() ... done
[08:08:34.422] | run() for ‘Future’ (<unnamed-8>) ...
[08:08:34.422] | : state: ‘created’
[08:08:34.422] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.422] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.422] | : Using SequentialFutureBackend ...
[08:08:34.423] | : . Number of futures since start: 7 (7 created, 7 launched, 7 finished)
[08:08:34.423] | : . Launching futures ...
[08:08:34.423] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:34.423] | : . ' , getFutureData() ...
[08:08:34.423] | : . ' , ; getFutureCore() ...
[08:08:34.423] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:34.423] | : . ' , ; getFutureCore() ... done
[08:08:34.423] | : . ' , ; getFutureCapture() ...
[08:08:34.423] | : . ' , ; getFutureCapture() ... done
[08:08:34.424] | : . ' , ; getFutureContext() ...
[08:08:34.424] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.424] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:34.424] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.424] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:34.424] | : . ' , ; getFutureContext() ... done
[08:08:34.424] | : . ' , getFutureData() ... done
[08:08:34.425] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.425] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:34.426] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.426] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.426] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.426] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:34.426] | : . ' , ; ` | New stack:
[08:08:34.426] | : . ' , ; ` | List of 1
[08:08:34.426] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.426] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.426] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:34.426] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.426] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.426] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.426] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.426] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.429] | : . ' , ; ` | Old stack:
[08:08:34.429] | : . ' , ; ` | List of 1
[08:08:34.429] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.429] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.429] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:34.429] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.429] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.429] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.429] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:34.429] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.429] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.429] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.429] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.432] | : . ' , ; ` | Not identical
[08:08:34.432] | : . ' , ; ` | all.equal() for future ...
[08:08:34.432] | : . ' , ; ` | : List of 2
[08:08:34.432] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.432] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.432] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:34.432] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.432] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.432] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.432] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.432] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.432] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.432] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.432] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.432] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.432] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.432] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.432] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.432] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.432] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.437] | : . ' , ; ` | all.equal() for future ... done
[08:08:34.437] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:34.437] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.437] | : . ' , ; ` List of future strategies:
[08:08:34.437] | : . ' , ; ` 1. sequential:
[08:08:34.437] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.437] | : . ' , ; `    - tweaked: FALSE
[08:08:34.437] | : . ' , ; `    - call: plan(sequential)
[08:08:34.438] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.438] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.438] | : . ' , assign_globals() ...
[08:08:34.438] | : . ' , List of 1
[08:08:34.438] | : . ' ,  $ x: list()
[08:08:34.438] | : . ' ,  - attr(*, "where")=List of 1
[08:08:34.438] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:34.438] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:34.438] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:34.438] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:34.438] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:34.441] | : . ' , - copied ‘x’ to environment
[08:08:34.441] | : . ' , assign_globals() ... done
[08:08:34.443] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.443] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.443] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.443] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:34.443] | : . ' , ; ` | : New stack:
[08:08:34.444] | : . ' , ; ` | : List of 1
[08:08:34.444] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.444] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.444] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.444] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.444] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.444] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.444] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.444] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.444] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.444] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.444] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.447] | : . ' , ; ` | : Old stack:
[08:08:34.447] | : . ' , ; ` | : List of 1
[08:08:34.447] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.447] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.447] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.447] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.447] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.447] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.447] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.447] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.447] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.447] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.447] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.450] | : . ' , ; ` | : Identical
[08:08:34.450] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:34.450] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.450] | : . ' , ; ` | List of future strategies:
[08:08:34.450] | : . ' , ; ` | 1. sequential:
[08:08:34.450] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.450] | : . ' , ; ` |    - tweaked: FALSE
[08:08:34.450] | : . ' , ; ` |    - call: plan(sequential)
[08:08:34.451] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.451] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.451] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.451] | : . ' , SequentialFuture started (and completed)
[08:08:34.451] | : . ' , signalConditions() ...
[08:08:34.451] | : . ' , ; include = ‘immediateCondition’
[08:08:34.451] | : . ' , ; exclude = 
[08:08:34.452] | : . ' , ; resignal = FALSE
[08:08:34.452] | : . ' , ; Number of conditions: 6
[08:08:34.452] | : . ' , ;  int 6
[08:08:34.452] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.452] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.452] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.452] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.453] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.453] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.453] | : . ' , signalConditions() ... done
[08:08:34.453] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:34.453] | : . Launching futures ... done
[08:08:34.453] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:34.453] | : Using SequentialFutureBackend ... done
[08:08:34.453] | run() for ‘Future’ (<unnamed-8>) ... done
[08:08:34.453] future(..., label = NULL) ... done
[08:08:34.453] value() for SequentialFuture (<unnamed-8>) ...
[08:08:34.454] | signalConditions() ...
[08:08:34.454] | : include = ‘immediateCondition’
[08:08:34.454] | : exclude = 
[08:08:34.454] | : resignal = FALSE
[08:08:34.454] | : Number of conditions: 6
[08:08:34.454] | :  int 6
[08:08:34.454] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.455] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.455] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.455] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.455] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.455] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.455] | signalConditions() ... done
[08:08:34.455] | relay stdout ...
[08:08:34.455] | relay stdout ... done
[08:08:34.455] | check for misuse ...
[08:08:34.455] | check for misuse ... done
[08:08:34.456] | relay conditions ...
[08:08:34.456] | : Future state: ‘finished’
[08:08:34.456] | : signalConditions() ...
[08:08:34.456] | : . include = ‘condition’
[08:08:34.456] | : . exclude = ‘immediateCondition’
[08:08:34.456] | : . resignal = TRUE
[08:08:34.456] | : . Number of conditions: 6
[08:08:34.456] | : .  int 6
[08:08:34.457] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.457] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.424] | : . ' , attachPackages() ...
[08:08:34.457] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.457] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.425] | : . ' , ; packages: [n=1] ‘future’
[08:08:34.457] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.457] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.425] | : . ' , attachPackages() ... done
[08:08:34.457] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.457] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.425] | : . ' , attachPackages() ...
[08:08:34.458] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.458] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.425] | : . ' , ; packages: [n=0] 
[08:08:34.458] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.458] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.425] | : . ' , attachPackages() ... done
[08:08:34.458] | : signalConditions() ... done
[08:08:34.458] | relay conditions ... done
[08:08:34.458] value() for SequentialFuture (<unnamed-8>) ... done
$a
[1] 1

[08:08:34.458] future(..., label = NULL) ...
[08:08:34.458] | lazy: FALSE
[08:08:34.458] | stdout: TRUE
[08:08:34.459] | conditions: [n=1] ‘condition’
[08:08:34.459] | gc: FALSE
[08:08:34.460] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:34.460] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:34.460] | : Searching for globals ...
[08:08:34.471] | : . globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:34.472] | : Searching for globals ... done
[08:08:34.472] | : Resolving globals: TRUE
[08:08:34.472] | : Resolving any globals that are futures ...
[08:08:34.472] | : . globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:34.472] | : Resolving any globals that are futures ... done
[08:08:34.472] | : Search for packages associated with the globals ...
[08:08:34.473] | : . Packages associated with globals: [1] ‘base’
[08:08:34.473] | : . Packages: [1] ‘base’
[08:08:34.473] | : Search for packages associated with the globals ... done
[08:08:34.473] | : Resolving futures part of globals (recursively) ...
[08:08:34.473] | : . resolve() for FutureGlobals ...
[08:08:34.473] | : . ' recursive: 99
[08:08:34.473] | : . ' Number of elements: 1
[08:08:34.474] | : . ' elements: ‘x’
[08:08:34.474] | : . ' 'obj' is list
[08:08:34.474] | : . ' resolve(obj, ...) ...
[08:08:34.474] | : . ' , resolve() for list ...
[08:08:34.474] | : . ' , ; recursive: 98
[08:08:34.474] | : . ' , ; Number of elements: 0
[08:08:34.474] | : . ' , resolve() for list ... done
[08:08:34.474] | : . ' resolve(obj, ...) ... done
[08:08:34.474] | : . ' resolved() for list ...
[08:08:34.474] | : . ' , Number of elements: 0
[08:08:34.475] | : . ' , Number of futures: 0
[08:08:34.475] | : . ' resolved() for list ... done
[08:08:34.475] | : . ' length: 0 (resolved future 1)
[08:08:34.475] | : . resolve() for FutureGlobals ... done
[08:08:34.475] | : . globals: [1] ‘x’
[08:08:34.475] | : Resolving futures part of globals (recursively) ... done
[08:08:34.475] | : Packages after dropping 'base': [0] 
[08:08:34.476] | : globals: [1] ‘x’
[08:08:34.477] | : packages: [0] 
[08:08:34.477] | getGlobalsAndPackages() ... done
[08:08:34.477] | run() for ‘Future’ (<unnamed-9>) ...
[08:08:34.477] | : state: ‘created’
[08:08:34.477] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.477] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.477] | : Using SequentialFutureBackend ...
[08:08:34.478] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:08:34.478] | : . Launching futures ...
[08:08:34.478] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:34.478] | : . ' , getFutureData() ...
[08:08:34.478] | : . ' , ; getFutureCore() ...
[08:08:34.478] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:34.478] | : . ' , ; getFutureCore() ... done
[08:08:34.478] | : . ' , ; getFutureCapture() ...
[08:08:34.478] | : . ' , ; getFutureCapture() ... done
[08:08:34.479] | : . ' , ; getFutureContext() ...
[08:08:34.479] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.479] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:34.479] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.479] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:34.479] | : . ' , ; getFutureContext() ... done
[08:08:34.479] | : . ' , getFutureData() ... done
[08:08:34.480] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.480] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:34.481] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.481] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.481] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.481] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:34.481] | : . ' , ; ` | New stack:
[08:08:34.481] | : . ' , ; ` | List of 1
[08:08:34.481] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.481] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.481] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:34.481] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.481] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.481] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.481] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.481] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.484] | : . ' , ; ` | Old stack:
[08:08:34.484] | : . ' , ; ` | List of 1
[08:08:34.484] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.484] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.484] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:34.484] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.484] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.484] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.484] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:34.484] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.484] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.484] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.484] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.487] | : . ' , ; ` | Not identical
[08:08:34.487] | : . ' , ; ` | all.equal() for future ...
[08:08:34.487] | : . ' , ; ` | : List of 2
[08:08:34.487] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.487] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.487] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:34.487] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.487] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.487] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.487] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.487] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.487] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.487] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.487] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.487] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.487] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.487] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.487] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.487] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.487] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.492] | : . ' , ; ` | all.equal() for future ... done
[08:08:34.492] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:34.492] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.492] | : . ' , ; ` List of future strategies:
[08:08:34.492] | : . ' , ; ` 1. sequential:
[08:08:34.492] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.492] | : . ' , ; `    - tweaked: FALSE
[08:08:34.492] | : . ' , ; `    - call: plan(sequential)
[08:08:34.493] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.493] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.493] | : . ' , assign_globals() ...
[08:08:34.493] | : . ' , List of 1
[08:08:34.493] | : . ' ,  $ x: list()
[08:08:34.493] | : . ' ,  - attr(*, "where")=List of 1
[08:08:34.493] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:34.493] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:34.493] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:34.493] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:34.493] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:34.496] | : . ' , - copied ‘x’ to environment
[08:08:34.496] | : . ' , assign_globals() ... done
[08:08:34.498] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.498] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.498] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.498] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:34.498] | : . ' , ; ` | : New stack:
[08:08:34.498] | : . ' , ; ` | : List of 1
[08:08:34.498] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.498] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.498] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.498] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.498] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.498] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.498] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.498] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.498] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.498] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.498] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.502] | : . ' , ; ` | : Old stack:
[08:08:34.502] | : . ' , ; ` | : List of 1
[08:08:34.502] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.502] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.502] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.502] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.502] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.502] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.502] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.502] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.502] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.502] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.502] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.505] | : . ' , ; ` | : Identical
[08:08:34.505] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:34.505] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.505] | : . ' , ; ` | List of future strategies:
[08:08:34.505] | : . ' , ; ` | 1. sequential:
[08:08:34.505] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.505] | : . ' , ; ` |    - tweaked: FALSE
[08:08:34.505] | : . ' , ; ` |    - call: plan(sequential)
[08:08:34.505] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.506] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.506] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.506] | : . ' , SequentialFuture started (and completed)
[08:08:34.506] | : . ' , signalConditions() ...
[08:08:34.506] | : . ' , ; include = ‘immediateCondition’
[08:08:34.506] | : . ' , ; exclude = 
[08:08:34.506] | : . ' , ; resignal = FALSE
[08:08:34.506] | : . ' , ; Number of conditions: 6
[08:08:34.506] | : . ' , ;  int 6
[08:08:34.507] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.507] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.507] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.507] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.507] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.507] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.507] | : . ' , signalConditions() ... done
[08:08:34.508] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:34.508] | : . Launching futures ... done
[08:08:34.508] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:34.508] | : Using SequentialFutureBackend ... done
[08:08:34.508] | run() for ‘Future’ (<unnamed-9>) ... done
[08:08:34.508] future(..., label = NULL) ... done
[08:08:34.508] value() for SequentialFuture (<unnamed-9>) ...
[08:08:34.508] | signalConditions() ...
[08:08:34.508] | : include = ‘immediateCondition’
[08:08:34.509] | : exclude = 
[08:08:34.509] | : resignal = FALSE
[08:08:34.509] | : Number of conditions: 6
[08:08:34.509] | :  int 6
[08:08:34.509] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.509] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.509] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.509] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.510] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.510] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.510] | signalConditions() ... done
[08:08:34.510] | relay stdout ...
[08:08:34.510] | relay stdout ... done
[08:08:34.510] | check for misuse ...
[08:08:34.510] | check for misuse ... done
[08:08:34.510] | relay conditions ...
[08:08:34.510] | : Future state: ‘finished’
[08:08:34.510] | : signalConditions() ...
[08:08:34.511] | : . include = ‘condition’
[08:08:34.511] | : . exclude = ‘immediateCondition’
[08:08:34.511] | : . resignal = TRUE
[08:08:34.511] | : . Number of conditions: 6
[08:08:34.511] | : .  int 6
[08:08:34.511] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.511] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.479] | : . ' , attachPackages() ...
[08:08:34.512] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.512] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.479] | : . ' , ; packages: [n=1] ‘future’
[08:08:34.512] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.512] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.480] | : . ' , attachPackages() ... done
[08:08:34.512] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.512] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.480] | : . ' , attachPackages() ...
[08:08:34.512] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.512] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.480] | : . ' , ; packages: [n=0] 
[08:08:34.512] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.512] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.480] | : . ' , attachPackages() ... done
[08:08:34.513] | : signalConditions() ... done
[08:08:34.513] | relay conditions ... done
[08:08:34.513] value() for SequentialFuture (<unnamed-9>) ... done
$a
[1] 1

[08:08:34.513] future(..., label = NULL) ...
[08:08:34.513] | lazy: TRUE
[08:08:34.513] | stdout: TRUE
[08:08:34.513] | conditions: [n=1] ‘condition’
[08:08:34.513] | gc: FALSE
[08:08:34.513] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:34.514] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:34.515] | : Searching for globals ...
[08:08:34.526] | : . globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:34.526] | : Searching for globals ... done
[08:08:34.526] | : Resolving globals: TRUE
[08:08:34.526] | : Resolving any globals that are futures ...
[08:08:34.526] | : . globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:34.527] | : Resolving any globals that are futures ... done
[08:08:34.527] | : Search for packages associated with the globals ...
[08:08:34.527] | : . Packages associated with globals: [1] ‘base’
[08:08:34.527] | : . Packages: [1] ‘base’
[08:08:34.527] | : Search for packages associated with the globals ... done
[08:08:34.527] | : Resolving futures part of globals (recursively) ...
[08:08:34.527] | : . resolve() for FutureGlobals ...
[08:08:34.527] | : . ' recursive: 99
[08:08:34.528] | : . ' Number of elements: 1
[08:08:34.528] | : . ' elements: ‘x’
[08:08:34.528] | : . ' 'obj' is list
[08:08:34.528] | : . ' resolve(obj, ...) ...
[08:08:34.528] | : . ' , resolve() for list ...
[08:08:34.528] | : . ' , ; recursive: 98
[08:08:34.528] | : . ' , ; Number of elements: 0
[08:08:34.528] | : . ' , resolve() for list ... done
[08:08:34.528] | : . ' resolve(obj, ...) ... done
[08:08:34.529] | : . ' resolved() for list ...
[08:08:34.529] | : . ' , Number of elements: 0
[08:08:34.529] | : . ' , Number of futures: 0
[08:08:34.529] | : . ' resolved() for list ... done
[08:08:34.529] | : . ' length: 0 (resolved future 1)
[08:08:34.529] | : . resolve() for FutureGlobals ... done
[08:08:34.529] | : . globals: [1] ‘x’
[08:08:34.529] | : Resolving futures part of globals (recursively) ... done
[08:08:34.529] | : Packages after dropping 'base': [0] 
[08:08:34.529] | : globals: [1] ‘x’
[08:08:34.530] | : packages: [0] 
[08:08:34.530] | getGlobalsAndPackages() ... done
[08:08:34.531] future(..., label = NULL) ... done
[08:08:34.531] value() for Future (<unnamed-10>) ...
[08:08:34.531] | run() for ‘Future’ (<unnamed-10>) ...
[08:08:34.531] | : state: ‘created’
[08:08:34.531] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.531] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.531] | : Using SequentialFutureBackend ...
[08:08:34.531] | : . Number of futures since start: 9 (9 created, 9 launched, 9 finished)
[08:08:34.531] | : . Launching futures ...
[08:08:34.532] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:34.532] | : . ' , getFutureData() ...
[08:08:34.532] | : . ' , ; getFutureCore() ...
[08:08:34.532] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:34.532] | : . ' , ; getFutureCore() ... done
[08:08:34.532] | : . ' , ; getFutureCapture() ...
[08:08:34.532] | : . ' , ; getFutureCapture() ... done
[08:08:34.532] | : . ' , ; getFutureContext() ...
[08:08:34.532] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.532] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:34.533] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.533] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:34.533] | : . ' , ; getFutureContext() ... done
[08:08:34.533] | : . ' , getFutureData() ... done
[08:08:34.534] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.534] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:34.534] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.535] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.535] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.535] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:34.535] | : . ' , ; ` | New stack:
[08:08:34.535] | : . ' , ; ` | List of 1
[08:08:34.535] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.535] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.535] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:34.535] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.535] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.535] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.535] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.535] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.537] | : . ' , ; ` | Old stack:
[08:08:34.538] | : . ' , ; ` | List of 1
[08:08:34.538] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.538] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.538] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:34.538] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.538] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.538] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.538] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:34.538] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.538] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.538] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.538] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.541] | : . ' , ; ` | Not identical
[08:08:34.541] | : . ' , ; ` | all.equal() for future ...
[08:08:34.541] | : . ' , ; ` | : List of 2
[08:08:34.541] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.541] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.541] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:34.541] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.541] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.541] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.541] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.541] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.541] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.541] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.541] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.541] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.541] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.541] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.541] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.541] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.541] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.546] | : . ' , ; ` | all.equal() for future ... done
[08:08:34.546] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:34.546] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.546] | : . ' , ; ` List of future strategies:
[08:08:34.546] | : . ' , ; ` 1. sequential:
[08:08:34.546] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.546] | : . ' , ; `    - tweaked: FALSE
[08:08:34.546] | : . ' , ; `    - call: plan(sequential)
[08:08:34.547] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.547] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.547] | : . ' , assign_globals() ...
[08:08:34.547] | : . ' , List of 1
[08:08:34.547] | : . ' ,  $ x: list()
[08:08:34.547] | : . ' ,  - attr(*, "where")=List of 1
[08:08:34.547] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:34.547] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:34.547] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:34.547] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:34.547] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:34.550] | : . ' , - copied ‘x’ to environment
[08:08:34.550] | : . ' , assign_globals() ... done
[08:08:34.552] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.552] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.552] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.552] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:34.552] | : . ' , ; ` | : New stack:
[08:08:34.552] | : . ' , ; ` | : List of 1
[08:08:34.552] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.552] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.552] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.552] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.552] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.552] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.552] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.552] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.552] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.552] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.552] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.555] | : . ' , ; ` | : Old stack:
[08:08:34.555] | : . ' , ; ` | : List of 1
[08:08:34.555] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.555] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.555] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.555] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.555] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.555] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.555] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.555] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.555] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.555] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.555] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.558] | : . ' , ; ` | : Identical
[08:08:34.559] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:34.559] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.559] | : . ' , ; ` | List of future strategies:
[08:08:34.559] | : . ' , ; ` | 1. sequential:
[08:08:34.559] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.559] | : . ' , ; ` |    - tweaked: FALSE
[08:08:34.559] | : . ' , ; ` |    - call: plan(sequential)
[08:08:34.559] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.559] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.559] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.560] | : . ' , SequentialFuture started (and completed)
[08:08:34.560] | : . ' , signalConditions() ...
[08:08:34.560] | : . ' , ; include = ‘immediateCondition’
[08:08:34.560] | : . ' , ; exclude = 
[08:08:34.560] | : . ' , ; resignal = FALSE
[08:08:34.560] | : . ' , ; Number of conditions: 6
[08:08:34.560] | : . ' , ;  int 6
[08:08:34.561] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.561] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.561] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.561] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.561] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.561] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.561] | : . ' , signalConditions() ... done
[08:08:34.561] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:34.561] | : . Launching futures ... done
[08:08:34.562] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:34.562] | : Using SequentialFutureBackend ... done
[08:08:34.562] | run() for ‘Future’ (<unnamed-10>) ... done
[08:08:34.562] | signalConditions() ...
[08:08:34.562] | : include = ‘immediateCondition’
[08:08:34.562] | : exclude = 
[08:08:34.562] | : resignal = FALSE
[08:08:34.562] | : Number of conditions: 6
[08:08:34.562] | :  int 6
[08:08:34.563] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.563] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.563] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.563] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.563] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.563] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.563] | signalConditions() ... done
[08:08:34.563] | relay stdout ...
[08:08:34.563] | relay stdout ... done
[08:08:34.564] | check for misuse ...
[08:08:34.564] | check for misuse ... done
[08:08:34.564] | relay conditions ...
[08:08:34.564] | : Future state: ‘finished’
[08:08:34.564] | : signalConditions() ...
[08:08:34.564] | : . include = ‘condition’
[08:08:34.564] | : . exclude = ‘immediateCondition’
[08:08:34.564] | : . resignal = TRUE
[08:08:34.564] | : . Number of conditions: 6
[08:08:34.564] | : .  int 6
[08:08:34.565] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.565] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.533] | : . ' , attachPackages() ...
[08:08:34.565] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.565] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.533] | : . ' , ; packages: [n=1] ‘future’
[08:08:34.565] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.565] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.533] | : . ' , attachPackages() ... done
[08:08:34.565] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.566] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.534] | : . ' , attachPackages() ...
[08:08:34.566] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.566] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.534] | : . ' , ; packages: [n=0] 
[08:08:34.566] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.566] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.534] | : . ' , attachPackages() ... done
[08:08:34.566] | : signalConditions() ... done
[08:08:34.566] | relay conditions ... done
[08:08:34.566] value() for Future (<unnamed-10>) ... done
$a
[1] 1

[08:08:34.567] future(..., label = NULL) ...
[08:08:34.567] | lazy: FALSE
[08:08:34.567] | stdout: TRUE
[08:08:34.567] | conditions: [n=1] ‘condition’
[08:08:34.567] | gc: FALSE
[08:08:34.567] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:34.568] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:34.568] | : Searching for globals ...
[08:08:34.579] | : . globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:34.580] | : Searching for globals ... done
[08:08:34.580] | : Resolving globals: TRUE
[08:08:34.580] | : Resolving any globals that are futures ...
[08:08:34.580] | : . globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:34.580] | : Resolving any globals that are futures ... done
[08:08:34.580] | : Search for packages associated with the globals ...
[08:08:34.580] | : . Packages associated with globals: [1] ‘base’
[08:08:34.581] | : . Packages: [1] ‘base’
[08:08:34.581] | : Search for packages associated with the globals ... done
[08:08:34.581] | : Resolving futures part of globals (recursively) ...
[08:08:34.581] | : . resolve() for FutureGlobals ...
[08:08:34.581] | : . ' recursive: 99
[08:08:34.581] | : . ' Number of elements: 1
[08:08:34.581] | : . ' elements: ‘x’
[08:08:34.581] | : . ' 'obj' is list
[08:08:34.582] | : . ' resolve(obj, ...) ...
[08:08:34.582] | : . ' , resolve() for list ...
[08:08:34.582] | : . ' , ; recursive: 98
[08:08:34.582] | : . ' , ; Number of elements: 0
[08:08:34.582] | : . ' , resolve() for list ... done
[08:08:34.582] | : . ' resolve(obj, ...) ... done
[08:08:34.582] | : . ' resolved() for list ...
[08:08:34.582] | : . ' , Number of elements: 0
[08:08:34.582] | : . ' , Number of futures: 0
[08:08:34.582] | : . ' resolved() for list ... done
[08:08:34.582] | : . ' length: 0 (resolved future 1)
[08:08:34.583] | : . resolve() for FutureGlobals ... done
[08:08:34.583] | : . globals: [1] ‘x’
[08:08:34.583] | : Resolving futures part of globals (recursively) ... done
[08:08:34.584] | : Packages after dropping 'base': [0] 
[08:08:34.584] | : globals: [1] ‘x’
[08:08:34.584] | : packages: [0] 
[08:08:34.584] | getGlobalsAndPackages() ... done
[08:08:34.584] | run() for ‘Future’ (<unnamed-11>) ...
[08:08:34.584] | : state: ‘created’
[08:08:34.584] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.584] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.585] | : Using SequentialFutureBackend ...
[08:08:34.585] | : . Number of futures since start: 10 (10 created, 10 launched, 10 finished)
[08:08:34.585] | : . Launching futures ...
[08:08:34.585] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:34.585] | : . ' , getFutureData() ...
[08:08:34.585] | : . ' , ; getFutureCore() ...
[08:08:34.585] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:34.585] | : . ' , ; getFutureCore() ... done
[08:08:34.585] | : . ' , ; getFutureCapture() ...
[08:08:34.585] | : . ' , ; getFutureCapture() ... done
[08:08:34.586] | : . ' , ; getFutureContext() ...
[08:08:34.586] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.586] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:34.586] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.586] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:34.586] | : . ' , ; getFutureContext() ... done
[08:08:34.586] | : . ' , getFutureData() ... done
[08:08:34.587] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.587] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:34.588] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.588] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.588] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.588] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:34.588] | : . ' , ; ` | New stack:
[08:08:34.588] | : . ' , ; ` | List of 1
[08:08:34.588] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.588] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.588] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:34.588] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.588] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.588] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.588] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.588] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.591] | : . ' , ; ` | Old stack:
[08:08:34.591] | : . ' , ; ` | List of 1
[08:08:34.591] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.591] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.591] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:34.591] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.591] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.591] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.591] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:34.591] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.591] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.591] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.591] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.594] | : . ' , ; ` | Not identical
[08:08:34.594] | : . ' , ; ` | all.equal() for future ...
[08:08:34.594] | : . ' , ; ` | : List of 2
[08:08:34.594] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.594] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.594] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:34.594] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.594] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.594] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.594] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.594] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.594] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.594] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.594] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.594] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.594] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.594] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.594] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.594] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.594] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.599] | : . ' , ; ` | all.equal() for future ... done
[08:08:34.599] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:34.599] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.599] | : . ' , ; ` List of future strategies:
[08:08:34.599] | : . ' , ; ` 1. sequential:
[08:08:34.599] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.599] | : . ' , ; `    - tweaked: FALSE
[08:08:34.599] | : . ' , ; `    - call: plan(sequential)
[08:08:34.600] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.600] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.600] | : . ' , assign_globals() ...
[08:08:34.600] | : . ' , List of 1
[08:08:34.600] | : . ' ,  $ x: list()
[08:08:34.600] | : . ' ,  - attr(*, "where")=List of 1
[08:08:34.600] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:34.600] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:34.600] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:34.600] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:34.600] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:34.603] | : . ' , - copied ‘x’ to environment
[08:08:34.603] | : . ' , assign_globals() ... done
[08:08:34.605] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.605] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.605] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.605] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:34.605] | : . ' , ; ` | : New stack:
[08:08:34.605] | : . ' , ; ` | : List of 1
[08:08:34.605] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.605] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.605] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.605] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.605] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.605] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.605] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.605] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.605] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.605] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.605] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.608] | : . ' , ; ` | : Old stack:
[08:08:34.608] | : . ' , ; ` | : List of 1
[08:08:34.608] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.608] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.608] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.608] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.608] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.608] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.608] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.608] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.608] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.608] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.608] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.611] | : . ' , ; ` | : Identical
[08:08:34.611] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:34.611] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.612] | : . ' , ; ` | List of future strategies:
[08:08:34.612] | : . ' , ; ` | 1. sequential:
[08:08:34.612] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.612] | : . ' , ; ` |    - tweaked: FALSE
[08:08:34.612] | : . ' , ; ` |    - call: plan(sequential)
[08:08:34.612] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.612] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.612] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.612] | : . ' , SequentialFuture started (and completed)
[08:08:34.613] | : . ' , signalConditions() ...
[08:08:34.613] | : . ' , ; include = ‘immediateCondition’
[08:08:34.613] | : . ' , ; exclude = 
[08:08:34.613] | : . ' , ; resignal = FALSE
[08:08:34.613] | : . ' , ; Number of conditions: 6
[08:08:34.613] | : . ' , ;  int 6
[08:08:34.613] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.614] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.614] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.614] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.614] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.614] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.614] | : . ' , signalConditions() ... done
[08:08:34.614] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:34.614] | : . Launching futures ... done
[08:08:34.614] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:34.615] | : Using SequentialFutureBackend ... done
[08:08:34.615] | run() for ‘Future’ (<unnamed-11>) ... done
[08:08:34.615] future(..., label = NULL) ... done
[08:08:34.615] value() for SequentialFuture (<unnamed-11>) ...
[08:08:34.615] | signalConditions() ...
[08:08:34.615] | : include = ‘immediateCondition’
[08:08:34.615] | : exclude = 
[08:08:34.615] | : resignal = FALSE
[08:08:34.615] | : Number of conditions: 6
[08:08:34.615] | :  int 6
[08:08:34.616] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.616] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.616] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.616] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.616] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.616] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.616] | signalConditions() ... done
[08:08:34.617] | relay stdout ...
[08:08:34.617] | relay stdout ... done
[08:08:34.617] | check for misuse ...
[08:08:34.617] | check for misuse ... done
[08:08:34.617] | relay conditions ...
[08:08:34.617] | : Future state: ‘finished’
[08:08:34.617] | : signalConditions() ...
[08:08:34.617] | : . include = ‘condition’
[08:08:34.617] | : . exclude = ‘immediateCondition’
[08:08:34.617] | : . resignal = TRUE
[08:08:34.617] | : . Number of conditions: 6
[08:08:34.618] | : .  int 6
[08:08:34.618] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.618] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.586] | : . ' , attachPackages() ...
[08:08:34.618] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.618] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.587] | : . ' , ; packages: [n=1] ‘future’
[08:08:34.618] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.618] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.587] | : . ' , attachPackages() ... done
[08:08:34.619] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.619] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.587] | : . ' , attachPackages() ...
[08:08:34.619] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.619] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.587] | : . ' , ; packages: [n=0] 
[08:08:34.619] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.620] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.587] | : . ' , attachPackages() ... done
[08:08:34.620] | : signalConditions() ... done
[08:08:34.620] | relay conditions ... done
[08:08:34.620] value() for SequentialFuture (<unnamed-11>) ... done
$a
[1] 1

[08:08:34.621] future(..., label = NULL) ...
[08:08:34.621] | lazy: FALSE
[08:08:34.621] | stdout: TRUE
[08:08:34.621] | conditions: [n=1] ‘condition’
[08:08:34.621] | gc: FALSE
[08:08:34.621] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:34.621] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:34.622] | : Searching for globals ...
[08:08:34.633] | : . globals found: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[08:08:34.633] | : Searching for globals ... done
[08:08:34.633] | : Resolving globals: TRUE
[08:08:34.633] | : Resolving any globals that are futures ...
[08:08:34.633] | : . globals: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[08:08:34.633] | : Resolving any globals that are futures ... done
[08:08:34.633] | : Search for packages associated with the globals ...
[08:08:34.634] | : . Packages associated with globals: [1] ‘base’
[08:08:34.634] | : . Packages: [1] ‘base’
[08:08:34.634] | : Search for packages associated with the globals ... done
[08:08:34.634] | : Resolving futures part of globals (recursively) ...
[08:08:34.634] | : . resolve() for FutureGlobals ...
[08:08:34.634] | : . ' recursive: 99
[08:08:34.635] | : . ' Number of elements: 2
[08:08:34.635] | : . ' elements: ‘x’, ‘name’
[08:08:34.636] | : . ' 'obj' is list
[08:08:34.636] | : . ' resolve(obj, ...) ...
[08:08:34.636] | : . ' , resolve() for list ...
[08:08:34.636] | : . ' , ; recursive: 98
[08:08:34.636] | : . ' , ; Number of elements: 0
[08:08:34.636] | : . ' , resolve() for list ... done
[08:08:34.636] | : . ' resolve(obj, ...) ... done
[08:08:34.636] | : . ' resolved() for list ...
[08:08:34.636] | : . ' , Number of elements: 0
[08:08:34.636] | : . ' , Number of futures: 0
[08:08:34.637] | : . ' resolved() for list ... done
[08:08:34.637] | : . ' length: 1 (resolved future 1)
[08:08:34.637] | : . ' 'obj' is atomic
[08:08:34.637] | : . ' length: 0 (resolved future 2)
[08:08:34.637] | : . resolve() for FutureGlobals ... done
[08:08:34.637] | : . globals: [2] ‘x’, ‘name’
[08:08:34.637] | : Resolving futures part of globals (recursively) ... done
[08:08:34.637] | : Packages after dropping 'base': [0] 
[08:08:34.638] | : globals: [2] ‘x’, ‘name’
[08:08:34.638] | : packages: [0] 
[08:08:34.638] | getGlobalsAndPackages() ... done
[08:08:34.638] | run() for ‘Future’ (<unnamed-12>) ...
[08:08:34.638] | : state: ‘created’
[08:08:34.638] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.638] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.638] | : Using SequentialFutureBackend ...
[08:08:34.638] | : . Number of futures since start: 11 (11 created, 11 launched, 11 finished)
[08:08:34.639] | : . Launching futures ...
[08:08:34.639] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:34.639] | : . ' , getFutureData() ...
[08:08:34.639] | : . ' , ; getFutureCore() ...
[08:08:34.639] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:34.639] | : . ' , ; getFutureCore() ... done
[08:08:34.639] | : . ' , ; getFutureCapture() ...
[08:08:34.639] | : . ' , ; getFutureCapture() ... done
[08:08:34.639] | : . ' , ; getFutureContext() ...
[08:08:34.639] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.640] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:34.640] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.640] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:34.640] | : . ' , ; getFutureContext() ... done
[08:08:34.640] | : . ' , getFutureData() ... done
[08:08:34.641] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.641] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:34.641] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.642] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.642] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.642] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:34.642] | : . ' , ; ` | New stack:
[08:08:34.642] | : . ' , ; ` | List of 1
[08:08:34.642] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.642] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.642] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:34.642] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.642] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.642] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.642] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.642] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.645] | : . ' , ; ` | Old stack:
[08:08:34.645] | : . ' , ; ` | List of 1
[08:08:34.645] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.645] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.645] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:34.645] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.645] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.645] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.645] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:34.645] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.645] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.645] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.645] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.648] | : . ' , ; ` | Not identical
[08:08:34.648] | : . ' , ; ` | all.equal() for future ...
[08:08:34.648] | : . ' , ; ` | : List of 2
[08:08:34.648] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.648] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.648] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:34.648] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.648] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.648] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.648] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.648] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.648] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.648] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.648] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.648] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.648] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.648] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.648] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.648] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.648] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.654] | : . ' , ; ` | all.equal() for future ... done
[08:08:34.654] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:34.654] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.654] | : . ' , ; ` List of future strategies:
[08:08:34.654] | : . ' , ; ` 1. sequential:
[08:08:34.654] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.654] | : . ' , ; `    - tweaked: FALSE
[08:08:34.654] | : . ' , ; `    - call: plan(sequential)
[08:08:34.655] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.655] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.655] | : . ' , assign_globals() ...
[08:08:34.655] | : . ' , List of 2
[08:08:34.655] | : . ' ,  $ x   : list()
[08:08:34.655] | : . ' ,  $ name: chr "a"
[08:08:34.655] | : . ' ,  - attr(*, "where")=List of 2
[08:08:34.655] | : . ' ,   ..$ x   :<environment: R_GlobalEnv> 
[08:08:34.655] | : . ' ,   ..$ name:<environment: R_GlobalEnv> 
[08:08:34.655] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:34.655] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:34.655] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:34.655] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:34.658] | : . ' , - copied ‘x’ to environment
[08:08:34.658] | : . ' , - copied ‘name’ to environment
[08:08:34.658] | : . ' , assign_globals() ... done
[08:08:34.659] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.660] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.660] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.660] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:34.660] | : . ' , ; ` | : New stack:
[08:08:34.660] | : . ' , ; ` | : List of 1
[08:08:34.660] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.660] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.660] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.660] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.660] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.660] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.660] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.660] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.660] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.660] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.660] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.663] | : . ' , ; ` | : Old stack:
[08:08:34.663] | : . ' , ; ` | : List of 1
[08:08:34.663] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.663] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.663] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.663] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.663] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.663] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.663] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:34.663] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.663] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.663] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.663] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.666] | : . ' , ; ` | : Identical
[08:08:34.666] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:34.666] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:34.666] | : . ' , ; ` | List of future strategies:
[08:08:34.666] | : . ' , ; ` | 1. sequential:
[08:08:34.666] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.666] | : . ' , ; ` |    - tweaked: FALSE
[08:08:34.666] | : . ' , ; ` |    - call: plan(sequential)
[08:08:34.667] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.667] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.667] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.667] | : . ' , SequentialFuture started (and completed)
[08:08:34.667] | : . ' , signalConditions() ...
[08:08:34.667] | : . ' , ; include = ‘immediateCondition’
[08:08:34.668] | : . ' , ; exclude = 
[08:08:34.668] | : . ' , ; resignal = FALSE
[08:08:34.668] | : . ' , ; Number of conditions: 6
[08:08:34.668] | : . ' , ;  int 6
[08:08:34.668] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.668] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.668] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.669] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.669] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.669] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.669] | : . ' , signalConditions() ... done
[08:08:34.669] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:34.669] | : . Launching futures ... done
[08:08:34.669] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:34.669] | : Using SequentialFutureBackend ... done
[08:08:34.669] | run() for ‘Future’ (<unnamed-12>) ... done
[08:08:34.669] future(..., label = NULL) ... done
[08:08:34.670] value() for SequentialFuture (<unnamed-12>) ...
[08:08:34.670] | signalConditions() ...
[08:08:34.670] | : include = ‘immediateCondition’
[08:08:34.670] | : exclude = 
[08:08:34.670] | : resignal = FALSE
[08:08:34.670] | : Number of conditions: 6
[08:08:34.670] | :  int 6
[08:08:34.671] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.671] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.671] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.671] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.671] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.672] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.672] | signalConditions() ... done
[08:08:34.672] | relay stdout ...
[08:08:34.672] | relay stdout ... done
[08:08:34.672] | check for misuse ...
[08:08:34.672] | check for misuse ... done
[08:08:34.672] | relay conditions ...
[08:08:34.672] | : Future state: ‘finished’
[08:08:34.673] | : signalConditions() ...
[08:08:34.673] | : . include = ‘condition’
[08:08:34.673] | : . exclude = ‘immediateCondition’
[08:08:34.673] | : . resignal = TRUE
[08:08:34.673] | : . Number of conditions: 6
[08:08:34.673] | : .  int 6
[08:08:34.673] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.674] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.640] | : . ' , attachPackages() ...
[08:08:34.674] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.674] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.640] | : . ' , ; packages: [n=1] ‘future’
[08:08:34.674] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.674] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.641] | : . ' , attachPackages() ... done
[08:08:34.674] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.674] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.641] | : . ' , attachPackages() ...
[08:08:34.674] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.674] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.641] | : . ' , ; packages: [n=0] 
[08:08:34.675] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.675] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.641] | : . ' , attachPackages() ... done
[08:08:34.675] | : signalConditions() ... done
[08:08:34.675] | relay conditions ... done
[08:08:34.675] value() for SequentialFuture (<unnamed-12>) ... done
$a
[1] 1

Testing with 1 cores ... DONE
Testing with 2 cores ...
availableCores(): 2
- plan('multicore') ...
[08:08:34.677] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.677] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:34.677] | : all.equal() for FutureStrategyList ...
[08:08:34.677] | : . New stack:
[08:08:34.677] | : . List of 1
[08:08:34.677] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:34.677] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:34.677] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:34.677] | : .   ..- attr(*, "init")= logi TRUE
[08:08:34.677] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.677] | : .     ...)  
[08:08:34.677] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.677] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.677] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:34.677] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.680] | : . Old stack:
[08:08:34.680] | : . List of 1
[08:08:34.680] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.680] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.680] | : .   ..- attr(*, "init")= chr "done"
[08:08:34.680] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.680] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.680] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.680] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:34.680] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.680] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.680] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.680] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.683] | : . Not identical
[08:08:34.683] | : . all.equal() for future ...
[08:08:34.683] | : . ' List of 2
[08:08:34.683] | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:34.683] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:34.683] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:34.683] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:34.683] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.683] | : . '     ...)  
[08:08:34.683] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.683] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.683] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:34.683] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.683] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.683] | : . '   ..- attr(*, "init")= chr "done"
[08:08:34.683] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.683] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.683] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.683] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:34.683] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6d8c200> 
[08:08:34.683] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.683] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.688] | : . ' Formals differ
[08:08:34.688] | : . all.equal() for future ... done
[08:08:34.688] | : . Future strategies differ at level 1
[08:08:34.688] | : all.equal() for FutureStrategyList ... done
[08:08:34.688] | : plan(): Setting new future backend stack:
[08:08:34.688] | : List of future strategies:
[08:08:34.688] | : 1. multicore:
[08:08:34.688] | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:34.688] | :    - tweaked: FALSE
[08:08:34.688] | :    - call: plan(strategy)
[08:08:34.689] | : List of 1
[08:08:34.689] | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:34.689] | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:34.689] | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:34.689] | :   ..- attr(*, "init")= logi TRUE
[08:08:34.689] | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.689] | :     ...)  
[08:08:34.689] | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.689] | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.689] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:34.689] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.693] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:34.693] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.693] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:34.693] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.693] | : . Legacy shutdown of cluster workers ...
[08:08:34.693] | : . ' Stopping existing cluster ...
[08:08:34.693] | : . ' , No pre-existing cluster. Skipping
[08:08:34.694] | : . ' Stopping existing cluster ... done
[08:08:34.694] | : . Legacy shutdown of cluster workers ... done
[08:08:34.694] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:34.694] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:34.694] | : . function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:34.694] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:34.694] | : .  - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:34.694] | : .  - attr(*, "init")= logi TRUE
[08:08:34.694] | : .  - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.694] | : .     ...)  
[08:08:34.694] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.694] | : .  - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.694] | : .  - attr(*, "call")= language plan(strategy)
[08:08:34.696] | : . init: TRUE
[08:08:34.696] | : . makeFutureBackend(<multicore>) ...
[08:08:34.696] | : . ' Backend function: <‘NULL’>
[08:08:34.696] | : . ' Evaluator tweak arguments: [n=0]
[08:08:34.696] | : . '  list()
[08:08:34.697] | : . ' Evaluator formal arguments: [n=3]
[08:08:34.697] | : . '  list()
[08:08:34.697] | : . ' Backend factory arguments: [n=3]
[08:08:34.697] | : . ' Dotted pair list of 3
[08:08:34.697] | : . '  $ workers    : language availableCores(constraints = "multicore")
[08:08:34.697] | : . '  $ gc         : logi FALSE
[08:08:34.697] | : . '  $ earlySignal: logi FALSE
[08:08:34.700] | : . ' Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:34.700] | : . makeFutureBackend(<multicore>) ... done
[08:08:34.700] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:34.700] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.700] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.700] | : plan(): nbrOfWorkers() = 2
[08:08:34.700] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:34.701] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.701] future(..., label = NULL) ...
[08:08:34.701] | lazy: FALSE
[08:08:34.701] | stdout: TRUE
[08:08:34.701] | conditions: [n=1] ‘condition’
[08:08:34.701] | gc: FALSE
[08:08:34.701] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:34.701] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:34.702] | : Searching for globals ...
[08:08:34.712] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:34.712] | : Searching for globals ... done
[08:08:34.713] | : Resolving globals: TRUE
[08:08:34.713] | : Resolving any globals that are futures ...
[08:08:34.713] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:34.713] | : Resolving any globals that are futures ... done
[08:08:34.713] | : Search for packages associated with the globals ...
[08:08:34.713] | : . Packages associated with globals: [1] ‘base’
[08:08:34.713] | : . Packages: [1] ‘base’
[08:08:34.714] | : Search for packages associated with the globals ... done
[08:08:34.714] | : Resolving futures part of globals (recursively) ...
[08:08:34.714] | : . resolve() for FutureGlobals ...
[08:08:34.714] | : . ' recursive: 99
[08:08:34.714] | : . ' Number of elements: 1
[08:08:34.714] | : . ' elements: ‘x’
[08:08:34.714] | : . ' 'obj' is list
[08:08:34.714] | : . ' resolve(obj, ...) ...
[08:08:34.714] | : . ' , resolve() for list ...
[08:08:34.715] | : . ' , ; recursive: 98
[08:08:34.715] | : . ' , ; Number of elements: 0
[08:08:34.715] | : . ' , resolve() for list ... done
[08:08:34.715] | : . ' resolve(obj, ...) ... done
[08:08:34.715] | : . ' resolved() for list ...
[08:08:34.715] | : . ' , Number of elements: 0
[08:08:34.715] | : . ' , Number of futures: 0
[08:08:34.715] | : . ' resolved() for list ... done
[08:08:34.715] | : . ' length: 0 (resolved future 1)
[08:08:34.715] | : . resolve() for FutureGlobals ... done
[08:08:34.715] | : . globals: [1] ‘x’
[08:08:34.716] | : Resolving futures part of globals (recursively) ... done
[08:08:34.716] | : Packages after dropping 'base': [0] 
[08:08:34.716] | : globals: [1] ‘x’
[08:08:34.716] | : packages: [0] 
[08:08:34.716] | getGlobalsAndPackages() ... done
[08:08:34.716] | run() for ‘Future’ (<unnamed-13>) ...
[08:08:34.716] | : state: ‘created’
[08:08:34.716] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.717] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.717] | : Using MulticoreFutureBackend ...
[08:08:34.717] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:34.717] | : . Launching futures ...
[08:08:34.717] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:34.717] | : . ' , getFutureData() ...
[08:08:34.717] | : . ' , ; getFutureCore() ...
[08:08:34.717] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:34.717] | : . ' , ; getFutureCore() ... done
[08:08:34.718] | : . ' , ; getFutureCapture() ...
[08:08:34.718] | : . ' , ; getFutureCapture() ... done
[08:08:34.718] | : . ' , ; getFutureContext() ...
[08:08:34.718] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.718] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:34.718] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.718] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:34.718] | : . ' , ; getFutureContext() ... done
[08:08:34.719] | : . ' , getFutureData() ... done
[08:08:34.719] | : . ' , requestCore(..., workers = 2) ...
[08:08:34.719] | : . ' , requestCore(..., workers = 2) ... done
[08:08:34.722] | : . ' , MulticoreFuture started
[08:08:34.723] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:34.723] | : . Launching futures ... done
[08:08:34.723] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:34.723] | : Using MulticoreFutureBackend ... done
[08:08:34.724] | run() for ‘Future’ (<unnamed-13>) ... done
[08:08:34.724] future(..., label = NULL) ... done
[08:08:34.724] value() for MulticoreFuture (<unnamed-13>) ...
[08:08:34.725] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.725] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:34.726] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.726] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.726] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.727] | result() for MulticoreFuture ...
[08:08:34.727] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:34.727] | : . ' , ; ` | New stack:
[08:08:34.727] | : . ' , ; ` | List of 1
[08:08:34.727] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.727] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.727] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:34.727] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.727] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.727] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.727] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.727] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.731] | : . ' , ; ` | Old stack:
[08:08:34.732] | : . ' , ; ` | List of 1
[08:08:34.732] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:34.732] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:34.732] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:34.732] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:34.732] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.732] | : . ' , ; ` |     ...)  
[08:08:34.732] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.732] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.732] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:34.732] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:34.732] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.732] | : . ' , ; ` |     ...)  
[08:08:34.732] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.732] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.739] | : . ' , ; ` | Not identical
[08:08:34.740] | : . ' , ; ` | all.equal() for future ...
[08:08:34.740] | : . ' , ; ` | : List of 2
[08:08:34.740] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.740] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.740] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:34.740] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.740] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.740] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.740] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.740] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:34.740] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:34.740] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:34.740] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.740] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.740] | : . ' , ; ` | :     ...)  
[08:08:34.740] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.740] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.740] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:34.740] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:34.740] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.740] | : . ' , ; ` | :     ...)  
[08:08:34.740] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.750] | : . ' , ; ` | : Formals differ
[08:08:34.750] | : . ' , ; ` | all.equal() for future ... done
[08:08:34.750] | : . ' , ; ` | Future strategies differ at level 1
[08:08:34.750] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:34.750] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:34.751] | : . ' , ; ` List of future strategies:
[08:08:34.751] | : . ' , ; ` 1. sequential:
[08:08:34.751] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.751] | : . ' , ; `    - tweaked: FALSE
[08:08:34.751] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.751] | : . ' , ; ` List of 1
[08:08:34.751] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.751] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.751] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:34.751] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.751] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.751] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.751] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.751] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.754] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:34.755] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:34.755] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.755] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:34.755] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.755] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.755] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:34.755] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.755] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.755] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.755] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.757] | : . ' , ; ` | : init: TRUE
[08:08:34.758] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:34.758] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:34.758] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:34.758] | : . ' , ; ` | : .  list()
[08:08:34.758] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:34.758] | : . ' , ; ` | : .  list()
[08:08:34.759] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:34.759] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:34.759] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:34.759] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:34.760] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:34.760] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:34.760] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:34.760] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.760] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:34.760] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.761] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.761] | : . ' , assign_globals() ...
[08:08:34.761] | : . ' , List of 1
[08:08:34.761] | : . ' ,  $ x: list()
[08:08:34.761] | : . ' ,  - attr(*, "where")=List of 1
[08:08:34.761] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:34.761] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:34.761] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:34.761] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:34.761] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:34.763] | : . ' , - copied ‘x’ to environment
[08:08:34.763] | : . ' , assign_globals() ... done
[08:08:34.765] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.767] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.767] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.767] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:34.767] | : . ' , ; ` | : New stack:
[08:08:34.767] | : . ' , ; ` | : List of 1
[08:08:34.767] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:34.767] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:34.767] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:34.767] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.767] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.767] | : . ' , ; ` | :     ...)  
[08:08:34.767] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.767] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.767] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:34.767] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:34.767] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.767] | : . ' , ; ` | :     ...)  
[08:08:34.767] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.767] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.771] | : . ' , ; ` | : Old stack:
[08:08:34.771] | : . ' , ; ` | : List of 1
[08:08:34.771] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.771] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.771] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.771] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.771] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.771] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.771] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.771] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a7756340> 
[08:08:34.771] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.771] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.771] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.774] | : . ' , ; ` | : Not identical
[08:08:34.774] | : . ' , ; ` | : all.equal() for future ...
[08:08:34.774] | : . ' , ; ` | : . List of 2
[08:08:34.774] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:34.774] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:34.774] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:34.774] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:34.774] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.774] | : . ' , ; ` | : .     ...)  
[08:08:34.774] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.774] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.774] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:34.774] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:34.774] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.774] | : . ' , ; ` | : .     ...)  
[08:08:34.774] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.774] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.774] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.774] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:34.774] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.774] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.774] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.774] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.774] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a7756340> 
[08:08:34.774] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.774] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.779] | : . ' , ; ` | : . Formals differ
[08:08:34.779] | : . ' , ; ` | : all.equal() for future ... done
[08:08:34.780] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:34.780] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:34.780] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:34.780] | : . ' , ; ` | List of future strategies:
[08:08:34.780] | : . ' , ; ` | 1. multicore:
[08:08:34.780] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:34.780] | : . ' , ; ` |    - tweaked: FALSE
[08:08:34.780] | : . ' , ; ` |    - call: plan(strategy)
[08:08:34.780] | : . ' , ; ` | List of 1
[08:08:34.780] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:34.780] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:34.780] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:34.780] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:34.780] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.780] | : . ' , ; ` |     ...)  
[08:08:34.780] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.780] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.780] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:34.780] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:34.780] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.780] | : . ' , ; ` |     ...)  
[08:08:34.780] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.780] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.783] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:34.784] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:34.784] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.784] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.784] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:34.784] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.784] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.784] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.786] | : readImmediateCondition() ...
[08:08:34.786] | : . Path: ‘/tmp/Rtmp2i29t9/.future/immediateConditions’
[08:08:34.787] | : . Number of RDS files: 0
[08:08:34.787] | : . Returned conditions set:
[08:08:34.787] | : .  list()
[08:08:34.788] | : readImmediateCondition() ... done
[08:08:34.788] | : result() for MulticoreFuture ...
[08:08:34.788] | : result() for MulticoreFuture ... done
[08:08:34.788] | : signalConditions() ...
[08:08:34.788] | : . include = ‘immediateCondition’
[08:08:34.789] | : . exclude = 
[08:08:34.789] | : . resignal = FALSE
[08:08:34.789] | : . Number of conditions: 6
[08:08:34.789] | : .  int 6
[08:08:34.790] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.790] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.790] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.790] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.790] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.790] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.790] | : signalConditions() ... done
[08:08:34.791] | result() for MulticoreFuture ... done
[08:08:34.791] | result() for MulticoreFuture ...
[08:08:34.791] | result() for MulticoreFuture ... done
[08:08:34.791] | signalConditions() ...
[08:08:34.791] | : include = ‘immediateCondition’
[08:08:34.791] | : exclude = 
[08:08:34.791] | : resignal = FALSE
[08:08:34.791] | : Number of conditions: 6
[08:08:34.792] | :  int 6
[08:08:34.792] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.792] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.792] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.792] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.793] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.793] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.793] | signalConditions() ... done
[08:08:34.793] | relay stdout ...
[08:08:34.793] | relay stdout ... done
[08:08:34.793] | check for misuse ...
[08:08:34.793] | check for misuse ... done
[08:08:34.793] | relay conditions ...
[08:08:34.794] | : Future state: ‘finished’
[08:08:34.794] | : result() for MulticoreFuture ...
[08:08:34.794] | : result() for MulticoreFuture ... done
[08:08:34.794] | : signalConditions() ...
[08:08:34.794] | : . include = ‘condition’
[08:08:34.794] | : . exclude = ‘immediateCondition’
[08:08:34.794] | : . resignal = TRUE
[08:08:34.795] | : . Number of conditions: 6
[08:08:34.795] | : .  int 6
[08:08:34.797] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.797] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.723] | : . ' , attachPackages() ...
[08:08:34.798] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.798] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.723] | : . ' , ; packages: [n=1] ‘future’
[08:08:34.798] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.799] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.724] | : . ' , attachPackages() ... done
[08:08:34.799] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.799] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.724] | : . ' , attachPackages() ...
[08:08:34.799] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.799] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.724] | : . ' , ; packages: [n=0] 
[08:08:34.800] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.800] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.724] | : . ' , attachPackages() ... done
[08:08:34.800] | : signalConditions() ... done
[08:08:34.800] | relay conditions ... done
[08:08:34.800] value() for MulticoreFuture (<unnamed-13>) ... done
$a
[1] 1

[08:08:34.801] future(..., label = NULL) ...
[08:08:34.801] | lazy: TRUE
[08:08:34.801] | stdout: TRUE
[08:08:34.801] | conditions: [n=1] ‘condition’
[08:08:34.801] | gc: FALSE
[08:08:34.802] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:34.802] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:34.802] | : Searching for globals ...
[08:08:34.815] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:34.815] | : Searching for globals ... done
[08:08:34.815] | : Resolving globals: TRUE
[08:08:34.815] | : Resolving any globals that are futures ...
[08:08:34.815] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:34.815] | : Resolving any globals that are futures ... done
[08:08:34.815] | : Search for packages associated with the globals ...
[08:08:34.816] | : . Packages associated with globals: [1] ‘base’
[08:08:34.816] | : . Packages: [1] ‘base’
[08:08:34.816] | : Search for packages associated with the globals ... done
[08:08:34.816] | : Resolving futures part of globals (recursively) ...
[08:08:34.816] | : . resolve() for FutureGlobals ...
[08:08:34.816] | : . ' recursive: 99
[08:08:34.817] | : . ' Number of elements: 1
[08:08:34.817] | : . ' elements: ‘x’
[08:08:34.817] | : . ' 'obj' is list
[08:08:34.817] | : . ' resolve(obj, ...) ...
[08:08:34.817] | : . ' , resolve() for list ...
[08:08:34.817] | : . ' , ; recursive: 98
[08:08:34.817] | : . ' , ; Number of elements: 0
[08:08:34.818] | : . ' , resolve() for list ... done
[08:08:34.818] | : . ' resolve(obj, ...) ... done
[08:08:34.818] | : . ' resolved() for list ...
[08:08:34.819] | : . ' , Number of elements: 0
[08:08:34.819] | : . ' , Number of futures: 0
[08:08:34.819] | : . ' resolved() for list ... done
[08:08:34.819] | : . ' length: 0 (resolved future 1)
[08:08:34.819] | : . resolve() for FutureGlobals ... done
[08:08:34.819] | : . globals: [1] ‘x’
[08:08:34.819] | : Resolving futures part of globals (recursively) ... done
[08:08:34.819] | : Packages after dropping 'base': [0] 
[08:08:34.819] | : globals: [1] ‘x’
[08:08:34.820] | : packages: [0] 
[08:08:34.820] | getGlobalsAndPackages() ... done
[08:08:34.820] future(..., label = NULL) ... done
[08:08:34.820] value() for Future (<unnamed-14>) ...
[08:08:34.820] | run() for ‘Future’ (<unnamed-14>) ...
[08:08:34.820] | : state: ‘created’
[08:08:34.820] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.821] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.821] | : Using MulticoreFutureBackend ...
[08:08:34.821] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:08:34.821] | : . Launching futures ...
[08:08:34.821] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:34.821] | : . ' , getFutureData() ...
[08:08:34.821] | : . ' , ; getFutureCore() ...
[08:08:34.821] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:34.821] | : . ' , ; getFutureCore() ... done
[08:08:34.822] | : . ' , ; getFutureCapture() ...
[08:08:34.822] | : . ' , ; getFutureCapture() ... done
[08:08:34.822] | : . ' , ; getFutureContext() ...
[08:08:34.822] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.822] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:34.822] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.822] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:34.822] | : . ' , ; getFutureContext() ... done
[08:08:34.822] | : . ' , getFutureData() ... done
[08:08:34.823] | : . ' , requestCore(..., workers = 2) ...
[08:08:34.823] | : . ' , requestCore(..., workers = 2) ... done
[08:08:34.825] | : . ' , MulticoreFuture started
[08:08:34.825] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:34.826] | : . Launching futures ... done
[08:08:34.826] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:34.826] | : Using MulticoreFutureBackend ... done
[08:08:34.826] | run() for ‘Future’ (<unnamed-14>) ... done
[08:08:34.827] | result() for MulticoreFuture ...
[08:08:34.828] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.829] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:34.829] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.829] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.830] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.830] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:34.830] | : . ' , ; ` | New stack:
[08:08:34.831] | : . ' , ; ` | List of 1
[08:08:34.831] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.831] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.831] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:34.831] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.831] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.831] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.831] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.831] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.836] | : . ' , ; ` | Old stack:
[08:08:34.836] | : . ' , ; ` | List of 1
[08:08:34.836] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:34.836] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:34.836] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:34.836] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:34.836] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.836] | : . ' , ; ` |     ...)  
[08:08:34.836] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.836] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.836] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:34.836] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:34.836] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.836] | : . ' , ; ` |     ...)  
[08:08:34.836] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.836] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.842] | : . ' , ; ` | Not identical
[08:08:34.842] | : . ' , ; ` | all.equal() for future ...
[08:08:34.842] | : . ' , ; ` | : List of 2
[08:08:34.842] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.842] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.842] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:34.842] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.842] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.842] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.842] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.842] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:34.842] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:34.842] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:34.842] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.842] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.842] | : . ' , ; ` | :     ...)  
[08:08:34.842] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.842] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.842] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:34.842] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:34.842] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.842] | : . ' , ; ` | :     ...)  
[08:08:34.842] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.850] | : . ' , ; ` | : Formals differ
[08:08:34.850] | : . ' , ; ` | all.equal() for future ... done
[08:08:34.850] | : . ' , ; ` | Future strategies differ at level 1
[08:08:34.852] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:34.852] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:34.853] | : . ' , ; ` List of future strategies:
[08:08:34.853] | : . ' , ; ` 1. sequential:
[08:08:34.853] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.853] | : . ' , ; `    - tweaked: FALSE
[08:08:34.853] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.854] | : . ' , ; ` List of 1
[08:08:34.854] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.854] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.854] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:34.854] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.854] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.854] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.854] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.854] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.858] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:34.858] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:34.858] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.858] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:34.859] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.859] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.859] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:34.859] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.859] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.859] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.859] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.861] | : . ' , ; ` | : init: TRUE
[08:08:34.861] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:34.861] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:34.861] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:34.861] | : . ' , ; ` | : .  list()
[08:08:34.862] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:34.862] | : . ' , ; ` | : .  list()
[08:08:34.862] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:34.862] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:34.862] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:34.862] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:34.863] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:34.863] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:34.864] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:34.864] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.864] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:34.864] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.864] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.864] | : . ' , assign_globals() ...
[08:08:34.864] | : . ' , List of 1
[08:08:34.864] | : . ' ,  $ x: list()
[08:08:34.864] | : . ' ,  - attr(*, "where")=List of 1
[08:08:34.864] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:34.864] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:34.864] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:34.864] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:34.864] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:34.867] | : . ' , - copied ‘x’ to environment
[08:08:34.867] | : . ' , assign_globals() ... done
[08:08:34.869] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.869] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.869] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.870] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:34.870] | : . ' , ; ` | : New stack:
[08:08:34.870] | : . ' , ; ` | : List of 1
[08:08:34.870] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:34.870] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:34.870] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:34.870] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.870] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.870] | : . ' , ; ` | :     ...)  
[08:08:34.870] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.870] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.870] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:34.870] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:34.870] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.870] | : . ' , ; ` | :     ...)  
[08:08:34.870] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.870] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.873] | : . ' , ; ` | : Old stack:
[08:08:34.873] | : . ' , ; ` | : List of 1
[08:08:34.873] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.873] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.873] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.873] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.873] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.873] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.873] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.873] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a5dbc408> 
[08:08:34.873] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.873] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.873] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.878] | : . ' , ; ` | : Not identical
[08:08:34.878] | : . ' , ; ` | : all.equal() for future ...
[08:08:34.878] | : . ' , ; ` | : . List of 2
[08:08:34.878] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:34.878] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:34.878] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:34.878] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:34.878] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.878] | : . ' , ; ` | : .     ...)  
[08:08:34.878] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.878] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.878] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:34.878] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:34.878] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.878] | : . ' , ; ` | : .     ...)  
[08:08:34.878] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.878] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.878] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.878] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:34.878] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.878] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.878] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.878] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.878] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a5dbc408> 
[08:08:34.878] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.878] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.883] | : . ' , ; ` | : . Formals differ
[08:08:34.883] | : . ' , ; ` | : all.equal() for future ... done
[08:08:34.884] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:34.884] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:34.884] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:34.884] | : . ' , ; ` | List of future strategies:
[08:08:34.884] | : . ' , ; ` | 1. multicore:
[08:08:34.884] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:34.884] | : . ' , ; ` |    - tweaked: FALSE
[08:08:34.884] | : . ' , ; ` |    - call: plan(strategy)
[08:08:34.884] | : . ' , ; ` | List of 1
[08:08:34.884] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:34.884] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:34.884] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:34.884] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:34.884] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.884] | : . ' , ; ` |     ...)  
[08:08:34.884] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.884] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.884] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:34.884] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:34.884] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.884] | : . ' , ; ` |     ...)  
[08:08:34.884] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.884] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.887] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:34.888] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:34.888] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.888] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.888] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:34.888] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.888] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.888] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.889] | : readImmediateCondition() ...
[08:08:34.889] | : . Path: ‘/tmp/Rtmp2i29t9/.future/immediateConditions’
[08:08:34.889] | : . Number of RDS files: 0
[08:08:34.890] | : . Returned conditions set:
[08:08:34.890] | : .  list()
[08:08:34.890] | : readImmediateCondition() ... done
[08:08:34.891] | : result() for MulticoreFuture ...
[08:08:34.891] | : result() for MulticoreFuture ... done
[08:08:34.891] | : signalConditions() ...
[08:08:34.891] | : . include = ‘immediateCondition’
[08:08:34.891] | : . exclude = 
[08:08:34.892] | : . resignal = FALSE
[08:08:34.892] | : . Number of conditions: 6
[08:08:34.892] | : .  int 6
[08:08:34.893] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.893] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.893] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.893] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.893] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.893] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.894] | : signalConditions() ... done
[08:08:34.894] | result() for MulticoreFuture ... done
[08:08:34.894] | result() for MulticoreFuture ...
[08:08:34.894] | result() for MulticoreFuture ... done
[08:08:34.894] | signalConditions() ...
[08:08:34.894] | : include = ‘immediateCondition’
[08:08:34.894] | : exclude = 
[08:08:34.895] | : resignal = FALSE
[08:08:34.895] | : Number of conditions: 6
[08:08:34.895] | :  int 6
[08:08:34.895] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.896] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.896] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.896] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.896] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.896] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.896] | signalConditions() ... done
[08:08:34.896] | relay stdout ...
[08:08:34.896] | relay stdout ... done
[08:08:34.897] | check for misuse ...
[08:08:34.897] | check for misuse ... done
[08:08:34.897] | relay conditions ...
[08:08:34.897] | : Future state: ‘finished’
[08:08:34.897] | : result() for MulticoreFuture ...
[08:08:34.897] | : result() for MulticoreFuture ... done
[08:08:34.897] | : signalConditions() ...
[08:08:34.898] | : . include = ‘condition’
[08:08:34.898] | : . exclude = ‘immediateCondition’
[08:08:34.898] | : . resignal = TRUE
[08:08:34.898] | : . Number of conditions: 6
[08:08:34.898] | : .  int 6
[08:08:34.899] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.899] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.826] | : . ' , attachPackages() ...
[08:08:34.899] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.899] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.826] | : . ' , ; packages: [n=1] ‘future’
[08:08:34.899] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.899] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.827] | : . ' , attachPackages() ... done
[08:08:34.900] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.900] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.827] | : . ' , attachPackages() ...
[08:08:34.900] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.900] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.827] | : . ' , ; packages: [n=0] 
[08:08:34.900] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.900] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.827] | : . ' , attachPackages() ... done
[08:08:34.901] | : signalConditions() ... done
[08:08:34.901] | relay conditions ... done
[08:08:34.901] value() for Future (<unnamed-14>) ... done
$a
[1] 1

[08:08:34.901] future(..., label = NULL) ...
[08:08:34.901] | lazy: FALSE
[08:08:34.902] | stdout: TRUE
[08:08:34.902] | conditions: [n=1] ‘condition’
[08:08:34.902] | gc: FALSE
[08:08:34.902] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:34.902] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:34.902] | : Searching for globals ...
[08:08:34.917] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:34.918] | : Searching for globals ... done
[08:08:34.918] | : Resolving globals: TRUE
[08:08:34.918] | : Resolving any globals that are futures ...
[08:08:34.918] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:34.918] | : Resolving any globals that are futures ... done
[08:08:34.918] | : Search for packages associated with the globals ...
[08:08:34.918] | : . Packages associated with globals: [1] ‘base’
[08:08:34.919] | : . Packages: [1] ‘base’
[08:08:34.919] | : Search for packages associated with the globals ... done
[08:08:34.919] | : Resolving futures part of globals (recursively) ...
[08:08:34.919] | : . resolve() for FutureGlobals ...
[08:08:34.919] | : . ' recursive: 99
[08:08:34.919] | : . ' Number of elements: 1
[08:08:34.919] | : . ' elements: ‘x’
[08:08:34.920] | : . ' 'obj' is list
[08:08:34.920] | : . ' resolve(obj, ...) ...
[08:08:34.920] | : . ' , resolve() for list ...
[08:08:34.920] | : . ' , ; recursive: 98
[08:08:34.920] | : . ' , ; Number of elements: 0
[08:08:34.920] | : . ' , resolve() for list ... done
[08:08:34.920] | : . ' resolve(obj, ...) ... done
[08:08:34.920] | : . ' resolved() for list ...
[08:08:34.920] | : . ' , Number of elements: 0
[08:08:34.921] | : . ' , Number of futures: 0
[08:08:34.921] | : . ' resolved() for list ... done
[08:08:34.921] | : . ' length: 0 (resolved future 1)
[08:08:34.921] | : . resolve() for FutureGlobals ... done
[08:08:34.921] | : . globals: [1] ‘x’
[08:08:34.921] | : Resolving futures part of globals (recursively) ... done
[08:08:34.921] | : Packages after dropping 'base': [0] 
[08:08:34.921] | : globals: [1] ‘x’
[08:08:34.921] | : packages: [0] 
[08:08:34.922] | getGlobalsAndPackages() ... done
[08:08:34.922] | run() for ‘Future’ (<unnamed-15>) ...
[08:08:34.922] | : state: ‘created’
[08:08:34.922] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.922] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.922] | : Using MulticoreFutureBackend ...
[08:08:34.922] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:08:34.922] | : . Launching futures ...
[08:08:34.923] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:34.923] | : . ' , getFutureData() ...
[08:08:34.923] | : . ' , ; getFutureCore() ...
[08:08:34.923] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:34.923] | : . ' , ; getFutureCore() ... done
[08:08:34.923] | : . ' , ; getFutureCapture() ...
[08:08:34.923] | : . ' , ; getFutureCapture() ... done
[08:08:34.923] | : . ' , ; getFutureContext() ...
[08:08:34.923] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.923] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:34.924] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.924] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:34.924] | : . ' , ; getFutureContext() ... done
[08:08:34.924] | : . ' , getFutureData() ... done
[08:08:34.924] | : . ' , requestCore(..., workers = 2) ...
[08:08:34.924] | : . ' , requestCore(..., workers = 2) ... done
[08:08:34.926] | : . ' , MulticoreFuture started
[08:08:34.927] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:34.927] | : . Launching futures ... done
[08:08:34.927] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:34.927] | : Using MulticoreFutureBackend ... done
[08:08:34.927] | run() for ‘Future’ (<unnamed-15>) ... done
[08:08:34.928] future(..., label = NULL) ... done
[08:08:34.928] value() for MulticoreFuture (<unnamed-15>) ...
[08:08:34.928] | result() for MulticoreFuture ...
[08:08:34.929] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.929] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:34.930] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.930] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.930] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.931] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:34.931] | : . ' , ; ` | New stack:
[08:08:34.931] | : . ' , ; ` | List of 1
[08:08:34.931] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.931] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.931] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:34.931] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.931] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.931] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.931] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.931] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.941] | : . ' , ; ` | Old stack:
[08:08:34.942] | : . ' , ; ` | List of 1
[08:08:34.942] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:34.942] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:34.942] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:34.942] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:34.942] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.942] | : . ' , ; ` |     ...)  
[08:08:34.942] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.942] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.942] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:34.942] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:34.942] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.942] | : . ' , ; ` |     ...)  
[08:08:34.942] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.942] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.947] | : . ' , ; ` | Not identical
[08:08:34.947] | : . ' , ; ` | all.equal() for future ...
[08:08:34.947] | : . ' , ; ` | : List of 2
[08:08:34.947] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.947] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.947] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:34.947] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.947] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.947] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.947] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.947] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:34.947] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:34.947] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:34.947] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.947] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.947] | : . ' , ; ` | :     ...)  
[08:08:34.947] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.947] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.947] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:34.947] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:34.947] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.947] | : . ' , ; ` | :     ...)  
[08:08:34.947] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.954] | : . ' , ; ` | : Formals differ
[08:08:34.954] | : . ' , ; ` | all.equal() for future ... done
[08:08:34.955] | : . ' , ; ` | Future strategies differ at level 1
[08:08:34.955] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:34.955] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:34.955] | : . ' , ; ` List of future strategies:
[08:08:34.955] | : . ' , ; ` 1. sequential:
[08:08:34.955] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:34.955] | : . ' , ; `    - tweaked: FALSE
[08:08:34.955] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.956] | : . ' , ; ` List of 1
[08:08:34.956] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.956] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.956] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:34.956] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.956] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.956] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.956] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.956] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.959] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:34.959] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:34.959] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.959] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:34.960] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.960] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.960] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:34.960] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.960] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.960] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.960] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.962] | : . ' , ; ` | : init: TRUE
[08:08:34.962] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:34.962] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:34.962] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:34.962] | : . ' , ; ` | : .  list()
[08:08:34.964] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:34.964] | : . ' , ; ` | : .  list()
[08:08:34.964] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:34.964] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:34.964] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:34.964] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:34.966] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:34.966] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:34.966] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:34.966] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.966] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:34.966] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.966] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.967] | : . ' , assign_globals() ...
[08:08:34.967] | : . ' , List of 1
[08:08:34.967] | : . ' ,  $ x: list()
[08:08:34.967] | : . ' ,  - attr(*, "where")=List of 1
[08:08:34.967] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:34.967] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:34.967] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:34.967] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:34.967] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:34.969] | : . ' , - copied ‘x’ to environment
[08:08:34.969] | : . ' , assign_globals() ... done
[08:08:34.972] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.972] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:34.972] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:34.972] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:34.972] | : . ' , ; ` | : New stack:
[08:08:34.972] | : . ' , ; ` | : List of 1
[08:08:34.972] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:34.972] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:34.972] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:34.972] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.972] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.972] | : . ' , ; ` | :     ...)  
[08:08:34.972] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.972] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.972] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:34.972] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:34.972] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.972] | : . ' , ; ` | :     ...)  
[08:08:34.972] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.972] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.975] | : . ' , ; ` | : Old stack:
[08:08:34.975] | : . ' , ; ` | : List of 1
[08:08:34.975] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.975] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.975] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:34.975] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.975] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.975] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.975] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.975] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6a316c8> 
[08:08:34.975] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.975] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.975] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.978] | : . ' , ; ` | : Not identical
[08:08:34.979] | : . ' , ; ` | : all.equal() for future ...
[08:08:34.979] | : . ' , ; ` | : . List of 2
[08:08:34.979] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:34.979] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:34.979] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:34.979] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:34.979] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.979] | : . ' , ; ` | : .     ...)  
[08:08:34.979] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.979] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.979] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:34.979] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:34.979] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.979] | : . ' , ; ` | : .     ...)  
[08:08:34.979] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.979] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:34.979] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:34.979] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:34.979] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.979] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.979] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.979] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:34.979] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6a316c8> 
[08:08:34.979] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:34.979] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:34.985] | : . ' , ; ` | : . Formals differ
[08:08:34.985] | : . ' , ; ` | : all.equal() for future ... done
[08:08:34.986] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:34.986] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:34.986] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:34.986] | : . ' , ; ` | List of future strategies:
[08:08:34.986] | : . ' , ; ` | 1. multicore:
[08:08:34.986] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:34.986] | : . ' , ; ` |    - tweaked: FALSE
[08:08:34.986] | : . ' , ; ` |    - call: plan(strategy)
[08:08:34.986] | : . ' , ; ` | List of 1
[08:08:34.986] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:34.986] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:34.986] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:34.986] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:34.986] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.986] | : . ' , ; ` |     ...)  
[08:08:34.986] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.986] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.986] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:34.986] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:34.986] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:34.986] | : . ' , ; ` |     ...)  
[08:08:34.986] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:34.986] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:34.989] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:34.990] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:34.990] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:34.990] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:34.990] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:34.990] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:34.990] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.990] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:34.991] | : readImmediateCondition() ...
[08:08:34.991] | : . Path: ‘/tmp/Rtmp2i29t9/.future/immediateConditions’
[08:08:34.992] | : . Number of RDS files: 0
[08:08:34.992] | : . Returned conditions set:
[08:08:34.992] | : .  list()
[08:08:34.992] | : readImmediateCondition() ... done
[08:08:34.993] | : result() for MulticoreFuture ...
[08:08:34.993] | : result() for MulticoreFuture ... done
[08:08:34.993] | : signalConditions() ...
[08:08:34.995] | : . include = ‘immediateCondition’
[08:08:34.995] | : . exclude = 
[08:08:34.996] | : . resignal = FALSE
[08:08:34.996] | : . Number of conditions: 6
[08:08:34.996] | : .  int 6
[08:08:34.997] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.998] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.998] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.998] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.998] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.999] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:34.999] | : signalConditions() ... done
[08:08:34.999] | result() for MulticoreFuture ... done
[08:08:34.999] | result() for MulticoreFuture ...
[08:08:35.000] | result() for MulticoreFuture ... done
[08:08:35.000] | signalConditions() ...
[08:08:35.000] | : include = ‘immediateCondition’
[08:08:35.000] | : exclude = 
[08:08:35.000] | : resignal = FALSE
[08:08:35.001] | : Number of conditions: 6
[08:08:35.001] | :  int 6
[08:08:35.002] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.002] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.002] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.002] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.002] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.002] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.002] | signalConditions() ... done
[08:08:35.003] | relay stdout ...
[08:08:35.003] | relay stdout ... done
[08:08:35.003] | check for misuse ...
[08:08:35.003] | check for misuse ... done
[08:08:35.003] | relay conditions ...
[08:08:35.003] | : Future state: ‘finished’
[08:08:35.003] | : result() for MulticoreFuture ...
[08:08:35.004] | : result() for MulticoreFuture ... done
[08:08:35.004] | : signalConditions() ...
[08:08:35.004] | : . include = ‘condition’
[08:08:35.004] | : . exclude = ‘immediateCondition’
[08:08:35.004] | : . resignal = TRUE
[08:08:35.004] | : . Number of conditions: 6
[08:08:35.004] | : .  int 6
[08:08:35.005] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.005] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.927] | : . ' , attachPackages() ...
[08:08:35.005] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.005] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.927] | : . ' , ; packages: [n=1] ‘future’
[08:08:35.005] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.006] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.928] | : . ' , attachPackages() ... done
[08:08:35.006] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.006] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.928] | : . ' , attachPackages() ...
[08:08:35.006] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.006] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.928] | : . ' , ; packages: [n=0] 
[08:08:35.006] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.006] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:34.928] | : . ' , attachPackages() ... done
[08:08:35.007] | : signalConditions() ... done
[08:08:35.007] | relay conditions ... done
[08:08:35.007] value() for MulticoreFuture (<unnamed-15>) ... done
$a
[1] 1

[08:08:35.007] future(..., label = NULL) ...
[08:08:35.007] | lazy: TRUE
[08:08:35.008] | stdout: TRUE
[08:08:35.008] | conditions: [n=1] ‘condition’
[08:08:35.008] | gc: FALSE
[08:08:35.008] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:35.008] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:35.008] | : Searching for globals ...
[08:08:35.023] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:35.023] | : Searching for globals ... done
[08:08:35.023] | : Resolving globals: TRUE
[08:08:35.023] | : Resolving any globals that are futures ...
[08:08:35.024] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:35.024] | : Resolving any globals that are futures ... done
[08:08:35.024] | : Search for packages associated with the globals ...
[08:08:35.024] | : . Packages associated with globals: [1] ‘base’
[08:08:35.024] | : . Packages: [1] ‘base’
[08:08:35.025] | : Search for packages associated with the globals ... done
[08:08:35.025] | : Resolving futures part of globals (recursively) ...
[08:08:35.025] | : . resolve() for FutureGlobals ...
[08:08:35.025] | : . ' recursive: 99
[08:08:35.025] | : . ' Number of elements: 1
[08:08:35.025] | : . ' elements: ‘x’
[08:08:35.025] | : . ' 'obj' is list
[08:08:35.025] | : . ' resolve(obj, ...) ...
[08:08:35.026] | : . ' , resolve() for list ...
[08:08:35.026] | : . ' , ; recursive: 98
[08:08:35.026] | : . ' , ; Number of elements: 0
[08:08:35.026] | : . ' , resolve() for list ... done
[08:08:35.026] | : . ' resolve(obj, ...) ... done
[08:08:35.026] | : . ' resolved() for list ...
[08:08:35.026] | : . ' , Number of elements: 0
[08:08:35.026] | : . ' , Number of futures: 0
[08:08:35.026] | : . ' resolved() for list ... done
[08:08:35.027] | : . ' length: 0 (resolved future 1)
[08:08:35.027] | : . resolve() for FutureGlobals ... done
[08:08:35.027] | : . globals: [1] ‘x’
[08:08:35.027] | : Resolving futures part of globals (recursively) ... done
[08:08:35.027] | : Packages after dropping 'base': [0] 
[08:08:35.027] | : globals: [1] ‘x’
[08:08:35.027] | : packages: [0] 
[08:08:35.027] | getGlobalsAndPackages() ... done
[08:08:35.028] future(..., label = NULL) ... done
[08:08:35.028] value() for Future (<unnamed-16>) ...
[08:08:35.028] | run() for ‘Future’ (<unnamed-16>) ...
[08:08:35.028] | : state: ‘created’
[08:08:35.028] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.028] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.028] | : Using MulticoreFutureBackend ...
[08:08:35.028] | : . Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:08:35.029] | : . Launching futures ...
[08:08:35.029] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:35.029] | : . ' , getFutureData() ...
[08:08:35.029] | : . ' , ; getFutureCore() ...
[08:08:35.029] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:35.029] | : . ' , ; getFutureCore() ... done
[08:08:35.029] | : . ' , ; getFutureCapture() ...
[08:08:35.029] | : . ' , ; getFutureCapture() ... done
[08:08:35.029] | : . ' , ; getFutureContext() ...
[08:08:35.030] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.030] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:35.030] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.030] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:35.030] | : . ' , ; getFutureContext() ... done
[08:08:35.030] | : . ' , getFutureData() ... done
[08:08:35.030] | : . ' , requestCore(..., workers = 2) ...
[08:08:35.031] | : . ' , requestCore(..., workers = 2) ... done
[08:08:35.033] | : . ' , MulticoreFuture started
[08:08:35.033] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:35.034] | : . Launching futures ... done
[08:08:35.034] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:35.034] | : Using MulticoreFutureBackend ... done
[08:08:35.034] | run() for ‘Future’ (<unnamed-16>) ... done
[08:08:35.034] | result() for MulticoreFuture ...
[08:08:35.036] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.037] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:35.037] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.037] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.038] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:35.038] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:35.038] | : . ' , ; ` | New stack:
[08:08:35.039] | : . ' , ; ` | List of 1
[08:08:35.039] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.039] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.039] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:35.039] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.039] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.039] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.039] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.039] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.043] | : . ' , ; ` | Old stack:
[08:08:35.043] | : . ' , ; ` | List of 1
[08:08:35.043] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.043] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.043] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.043] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:35.043] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.043] | : . ' , ; ` |     ...)  
[08:08:35.043] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.043] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.043] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:35.043] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.043] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.043] | : . ' , ; ` |     ...)  
[08:08:35.043] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.043] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.051] | : . ' , ; ` | Not identical
[08:08:35.052] | : . ' , ; ` | all.equal() for future ...
[08:08:35.052] | : . ' , ; ` | : List of 2
[08:08:35.052] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.052] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.052] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:35.052] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.052] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.052] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.052] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.052] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.052] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.052] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.052] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.052] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.052] | : . ' , ; ` | :     ...)  
[08:08:35.052] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.052] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.052] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:35.052] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.052] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.052] | : . ' , ; ` | :     ...)  
[08:08:35.052] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.062] | : . ' , ; ` | : Formals differ
[08:08:35.063] | : . ' , ; ` | all.equal() for future ... done
[08:08:35.063] | : . ' , ; ` | Future strategies differ at level 1
[08:08:35.063] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:35.063] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:35.063] | : . ' , ; ` List of future strategies:
[08:08:35.063] | : . ' , ; ` 1. sequential:
[08:08:35.063] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:35.063] | : . ' , ; `    - tweaked: FALSE
[08:08:35.063] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.064] | : . ' , ; ` List of 1
[08:08:35.064] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.064] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.064] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:35.064] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.064] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.064] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.064] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.064] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.067] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:35.067] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:35.067] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.068] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:35.068] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.068] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.068] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:35.068] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.068] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.068] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.068] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.070] | : . ' , ; ` | : init: TRUE
[08:08:35.070] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:35.070] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:35.070] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:35.070] | : . ' , ; ` | : .  list()
[08:08:35.071] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:35.071] | : . ' , ; ` | : .  list()
[08:08:35.071] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:35.071] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:35.071] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:35.071] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:35.072] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:35.073] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:35.073] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:35.073] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.073] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:35.073] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:35.073] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.073] | : . ' , assign_globals() ...
[08:08:35.074] | : . ' , List of 1
[08:08:35.074] | : . ' ,  $ x: list()
[08:08:35.074] | : . ' ,  - attr(*, "where")=List of 1
[08:08:35.074] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:35.074] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:35.074] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:35.074] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:35.074] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:35.076] | : . ' , - copied ‘x’ to environment
[08:08:35.076] | : . ' , assign_globals() ... done
[08:08:35.081] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.081] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.081] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:35.081] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:35.081] | : . ' , ; ` | : New stack:
[08:08:35.082] | : . ' , ; ` | : List of 1
[08:08:35.082] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.082] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.082] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.082] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.082] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.082] | : . ' , ; ` | :     ...)  
[08:08:35.082] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.082] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.082] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:35.082] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.082] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.082] | : . ' , ; ` | :     ...)  
[08:08:35.082] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.082] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.085] | : . ' , ; ` | : Old stack:
[08:08:35.086] | : . ' , ; ` | : List of 1
[08:08:35.086] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.086] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.086] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.086] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.086] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.086] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.086] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.086] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a77b1d10> 
[08:08:35.086] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.086] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.086] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.089] | : . ' , ; ` | : Not identical
[08:08:35.089] | : . ' , ; ` | : all.equal() for future ...
[08:08:35.089] | : . ' , ; ` | : . List of 2
[08:08:35.089] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.089] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.089] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.089] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:35.089] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.089] | : . ' , ; ` | : .     ...)  
[08:08:35.089] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.089] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.089] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:35.089] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.089] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.089] | : . ' , ; ` | : .     ...)  
[08:08:35.089] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.089] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.089] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.089] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:35.089] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.089] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.089] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.089] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.089] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a77b1d10> 
[08:08:35.089] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.089] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.095] | : . ' , ; ` | : . Formals differ
[08:08:35.095] | : . ' , ; ` | : all.equal() for future ... done
[08:08:35.095] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:35.095] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:35.096] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:35.096] | : . ' , ; ` | List of future strategies:
[08:08:35.096] | : . ' , ; ` | 1. multicore:
[08:08:35.096] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:35.096] | : . ' , ; ` |    - tweaked: FALSE
[08:08:35.096] | : . ' , ; ` |    - call: plan(strategy)
[08:08:35.096] | : . ' , ; ` | List of 1
[08:08:35.096] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.096] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.096] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.096] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:35.096] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.096] | : . ' , ; ` |     ...)  
[08:08:35.096] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.096] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.096] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:35.096] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.096] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.096] | : . ' , ; ` |     ...)  
[08:08:35.096] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.096] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.101] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:35.101] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:35.102] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.102] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.102] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:35.102] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:35.102] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.102] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.103] | : readImmediateCondition() ...
[08:08:35.103] | : . Path: ‘/tmp/Rtmp2i29t9/.future/immediateConditions’
[08:08:35.104] | : . Number of RDS files: 0
[08:08:35.104] | : . Returned conditions set:
[08:08:35.104] | : .  list()
[08:08:35.104] | : readImmediateCondition() ... done
[08:08:35.105] | : result() for MulticoreFuture ...
[08:08:35.105] | : result() for MulticoreFuture ... done
[08:08:35.105] | : signalConditions() ...
[08:08:35.105] | : . include = ‘immediateCondition’
[08:08:35.106] | : . exclude = 
[08:08:35.106] | : . resignal = FALSE
[08:08:35.106] | : . Number of conditions: 6
[08:08:35.106] | : .  int 6
[08:08:35.107] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.107] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.107] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.108] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.108] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.108] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.108] | : signalConditions() ... done
[08:08:35.108] | result() for MulticoreFuture ... done
[08:08:35.109] | result() for MulticoreFuture ...
[08:08:35.109] | result() for MulticoreFuture ... done
[08:08:35.109] | signalConditions() ...
[08:08:35.109] | : include = ‘immediateCondition’
[08:08:35.109] | : exclude = 
[08:08:35.110] | : resignal = FALSE
[08:08:35.110] | : Number of conditions: 6
[08:08:35.110] | :  int 6
[08:08:35.110] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.110] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.111] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.111] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.111] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.111] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.111] | signalConditions() ... done
[08:08:35.112] | relay stdout ...
[08:08:35.112] | relay stdout ... done
[08:08:35.112] | check for misuse ...
[08:08:35.112] | check for misuse ... done
[08:08:35.112] | relay conditions ...
[08:08:35.112] | : Future state: ‘finished’
[08:08:35.113] | : result() for MulticoreFuture ...
[08:08:35.113] | : result() for MulticoreFuture ... done
[08:08:35.113] | : signalConditions() ...
[08:08:35.113] | : . include = ‘condition’
[08:08:35.113] | : . exclude = ‘immediateCondition’
[08:08:35.113] | : . resignal = TRUE
[08:08:35.114] | : . Number of conditions: 6
[08:08:35.114] | : .  int 6
[08:08:35.114] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.114] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.034] | : . ' , attachPackages() ...
[08:08:35.115] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.115] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.034] | : . ' , ; packages: [n=1] ‘future’
[08:08:35.115] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.115] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.035] | : . ' , attachPackages() ... done
[08:08:35.115] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.117] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.035] | : . ' , attachPackages() ...
[08:08:35.118] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.118] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.035] | : . ' , ; packages: [n=0] 
[08:08:35.118] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.118] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.035] | : . ' , attachPackages() ... done
[08:08:35.119] | : signalConditions() ... done
[08:08:35.119] | relay conditions ... done
[08:08:35.119] value() for Future (<unnamed-16>) ... done
$a
[1] 1

[08:08:35.120] future(..., label = NULL) ...
[08:08:35.120] | lazy: FALSE
[08:08:35.120] | stdout: TRUE
[08:08:35.120] | conditions: [n=1] ‘condition’
[08:08:35.120] | gc: FALSE
[08:08:35.121] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:35.121] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:35.121] | : Searching for globals ...
[08:08:35.140] | : . globals found: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[08:08:35.140] | : Searching for globals ... done
[08:08:35.140] | : Resolving globals: TRUE
[08:08:35.140] | : Resolving any globals that are futures ...
[08:08:35.140] | : . globals: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[08:08:35.141] | : Resolving any globals that are futures ... done
[08:08:35.141] | : Search for packages associated with the globals ...
[08:08:35.141] | : . Packages associated with globals: [1] ‘base’
[08:08:35.141] | : . Packages: [1] ‘base’
[08:08:35.141] | : Search for packages associated with the globals ... done
[08:08:35.141] | : Packages after dropping 'base': [0] 
[08:08:35.142] | : globals: [0] 
[08:08:35.142] | : packages: [0] 
[08:08:35.142] | getGlobalsAndPackages() ... done
[08:08:35.142] | run() for ‘Future’ (<unnamed-17>) ...
[08:08:35.142] | : state: ‘created’
[08:08:35.142] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.142] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.142] | : Using MulticoreFutureBackend ...
[08:08:35.143] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:35.143] | : . Launching futures ...
[08:08:35.143] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:35.143] | : . ' , getFutureData() ...
[08:08:35.143] | : . ' , ; getFutureCore() ...
[08:08:35.143] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:35.143] | : . ' , ; getFutureCore() ... done
[08:08:35.143] | : . ' , ; getFutureCapture() ...
[08:08:35.143] | : . ' , ; getFutureCapture() ... done
[08:08:35.144] | : . ' , ; getFutureContext() ...
[08:08:35.144] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.144] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:35.144] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.144] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:35.144] | : . ' , ; getFutureContext() ... done
[08:08:35.144] | : . ' , getFutureData() ... done
[08:08:35.144] | : . ' , requestCore(..., workers = 2) ...
[08:08:35.145] | : . ' , requestCore(..., workers = 2) ... done
[08:08:35.147] | : . ' , MulticoreFuture started
[08:08:35.147] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:35.147] | : . Launching futures ... done
[08:08:35.148] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:35.148] | : Using MulticoreFutureBackend ... done
[08:08:35.148] | run() for ‘Future’ (<unnamed-17>) ... done
[08:08:35.148] future(..., label = NULL) ... done
[08:08:35.149] value() for MulticoreFuture (<unnamed-17>) ...
[08:08:35.149] | result() for MulticoreFuture ...
[08:08:35.150] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.150] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:35.150] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.151] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.151] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:35.151] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:35.152] | : . ' , ; ` | New stack:
[08:08:35.152] | : . ' , ; ` | List of 1
[08:08:35.152] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.152] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.152] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:35.152] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.152] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.152] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.152] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.152] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.157] | : . ' , ; ` | Old stack:
[08:08:35.157] | : . ' , ; ` | List of 1
[08:08:35.157] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.157] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.157] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.157] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:35.157] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.157] | : . ' , ; ` |     ...)  
[08:08:35.157] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.157] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.157] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:35.157] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.157] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.157] | : . ' , ; ` |     ...)  
[08:08:35.157] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.157] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.162] | : . ' , ; ` | Not identical
[08:08:35.162] | : . ' , ; ` | all.equal() for future ...
[08:08:35.162] | : . ' , ; ` | : List of 2
[08:08:35.162] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.162] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.162] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:35.162] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.162] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.162] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.162] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.162] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.162] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.162] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.162] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.162] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.162] | : . ' , ; ` | :     ...)  
[08:08:35.162] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.162] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.162] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:35.162] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.162] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.162] | : . ' , ; ` | :     ...)  
[08:08:35.162] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.176] | : . ' , ; ` | : Formals differ
[08:08:35.176] | : . ' , ; ` | all.equal() for future ... done
[08:08:35.176] | : . ' , ; ` | Future strategies differ at level 1
[08:08:35.176] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:35.176] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:35.176] | : . ' , ; ` List of future strategies:
[08:08:35.176] | : . ' , ; ` 1. sequential:
[08:08:35.176] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:35.176] | : . ' , ; `    - tweaked: FALSE
[08:08:35.176] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.177] | : . ' , ; ` List of 1
[08:08:35.177] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.177] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.177] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:35.177] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.177] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.177] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.177] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.177] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.181] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:35.181] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:35.181] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.181] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:35.181] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.181] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.181] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:35.181] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.181] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.181] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.181] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.184] | : . ' , ; ` | : init: TRUE
[08:08:35.184] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:35.184] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:35.184] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:35.184] | : . ' , ; ` | : .  list()
[08:08:35.184] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:35.185] | : . ' , ; ` | : .  list()
[08:08:35.185] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:35.185] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:35.185] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:35.185] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:35.186] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:35.186] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:35.186] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:35.186] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.187] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:35.187] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:35.187] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.189] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.189] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.190] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:35.190] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:35.190] | : . ' , ; ` | : New stack:
[08:08:35.190] | : . ' , ; ` | : List of 1
[08:08:35.190] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.190] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.190] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.190] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.190] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.190] | : . ' , ; ` | :     ...)  
[08:08:35.190] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.190] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.190] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:35.190] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.190] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.190] | : . ' , ; ` | :     ...)  
[08:08:35.190] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.190] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.195] | : . ' , ; ` | : Old stack:
[08:08:35.195] | : . ' , ; ` | : List of 1
[08:08:35.195] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.195] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.195] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.195] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.195] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.195] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.195] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.195] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a734ea30> 
[08:08:35.195] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.195] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.195] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.199] | : . ' , ; ` | : Not identical
[08:08:35.199] | : . ' , ; ` | : all.equal() for future ...
[08:08:35.199] | : . ' , ; ` | : . List of 2
[08:08:35.199] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.199] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.199] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.199] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:35.199] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.199] | : . ' , ; ` | : .     ...)  
[08:08:35.199] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.199] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.199] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:35.199] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.199] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.199] | : . ' , ; ` | : .     ...)  
[08:08:35.199] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.199] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.199] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.199] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:35.199] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.199] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.199] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.199] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.199] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a734ea30> 
[08:08:35.199] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.199] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.205] | : . ' , ; ` | : . Formals differ
[08:08:35.205] | : . ' , ; ` | : all.equal() for future ... done
[08:08:35.205] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:35.206] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:35.206] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:35.206] | : . ' , ; ` | List of future strategies:
[08:08:35.206] | : . ' , ; ` | 1. multicore:
[08:08:35.206] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:35.206] | : . ' , ; ` |    - tweaked: FALSE
[08:08:35.206] | : . ' , ; ` |    - call: plan(strategy)
[08:08:35.206] | : . ' , ; ` | List of 1
[08:08:35.206] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.206] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.206] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.206] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:35.206] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.206] | : . ' , ; ` |     ...)  
[08:08:35.206] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.206] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.206] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:35.206] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.206] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.206] | : . ' , ; ` |     ...)  
[08:08:35.206] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.206] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.209] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:35.210] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:35.210] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.210] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.210] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:35.210] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:35.210] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.210] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.211] | : readImmediateCondition() ...
[08:08:35.211] | : . Path: ‘/tmp/Rtmp2i29t9/.future/immediateConditions’
[08:08:35.212] | : . Number of RDS files: 0
[08:08:35.212] | : . Returned conditions set:
[08:08:35.212] | : .  list()
[08:08:35.212] | : readImmediateCondition() ... done
[08:08:35.213] | : result() for MulticoreFuture ...
[08:08:35.213] | : result() for MulticoreFuture ... done
[08:08:35.213] | : signalConditions() ...
[08:08:35.213] | : . include = ‘immediateCondition’
[08:08:35.213] | : . exclude = 
[08:08:35.213] | : . resignal = FALSE
[08:08:35.214] | : . Number of conditions: 6
[08:08:35.214] | : .  int 6
[08:08:35.214] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.215] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.215] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.215] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.215] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.215] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.215] | : signalConditions() ... done
[08:08:35.216] | result() for MulticoreFuture ... done
[08:08:35.216] | result() for MulticoreFuture ...
[08:08:35.216] | result() for MulticoreFuture ... done
[08:08:35.216] | signalConditions() ...
[08:08:35.216] | : include = ‘immediateCondition’
[08:08:35.216] | : exclude = 
[08:08:35.216] | : resignal = FALSE
[08:08:35.217] | : Number of conditions: 6
[08:08:35.217] | :  int 6
[08:08:35.217] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.217] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.217] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.218] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.218] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.218] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.218] | signalConditions() ... done
[08:08:35.218] | relay stdout ...
[08:08:35.218] | relay stdout ... done
[08:08:35.218] | check for misuse ...
[08:08:35.219] | check for misuse ... done
[08:08:35.219] | relay conditions ...
[08:08:35.219] | : Future state: ‘finished’
[08:08:35.219] | : result() for MulticoreFuture ...
[08:08:35.219] | : result() for MulticoreFuture ... done
[08:08:35.219] | : signalConditions() ...
[08:08:35.219] | : . include = ‘condition’
[08:08:35.219] | : . exclude = ‘immediateCondition’
[08:08:35.220] | : . resignal = TRUE
[08:08:35.220] | : . Number of conditions: 6
[08:08:35.220] | : .  int 6
[08:08:35.220] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.220] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.148] | : . ' , attachPackages() ...
[08:08:35.221] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.221] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.148] | : . ' , ; packages: [n=1] ‘future’
[08:08:35.221] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.221] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.148] | : . ' , attachPackages() ... done
[08:08:35.221] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.221] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.149] | : . ' , attachPackages() ...
[08:08:35.222] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.222] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.149] | : . ' , ; packages: [n=0] 
[08:08:35.222] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.222] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.149] | : . ' , attachPackages() ... done
[08:08:35.222] | : signalConditions() ... done
[08:08:35.222] | relay conditions ... done
[08:08:35.222] value() for MulticoreFuture (<unnamed-17>) ... done
$b
[1] 2

$a
[1] 1

[08:08:35.223] future(..., label = NULL) ...
[08:08:35.223] | lazy: FALSE
[08:08:35.223] | stdout: TRUE
[08:08:35.223] | conditions: [n=1] ‘condition’
[08:08:35.225] | gc: FALSE
[08:08:35.225] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:35.225] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:35.226] | : Searching for globals ...
[08:08:35.240] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:35.240] | : Searching for globals ... done
[08:08:35.240] | : Resolving globals: TRUE
[08:08:35.240] | : Resolving any globals that are futures ...
[08:08:35.240] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:35.240] | : Resolving any globals that are futures ... done
[08:08:35.240] | : Search for packages associated with the globals ...
[08:08:35.241] | : . Packages associated with globals: [1] ‘base’
[08:08:35.241] | : . Packages: [1] ‘base’
[08:08:35.241] | : Search for packages associated with the globals ... done
[08:08:35.241] | : Resolving futures part of globals (recursively) ...
[08:08:35.241] | : . resolve() for FutureGlobals ...
[08:08:35.241] | : . ' recursive: 99
[08:08:35.242] | : . ' Number of elements: 1
[08:08:35.242] | : . ' elements: ‘x’
[08:08:35.242] | : . ' 'obj' is list
[08:08:35.242] | : . ' resolve(obj, ...) ...
[08:08:35.242] | : . ' , resolve() for list ...
[08:08:35.242] | : . ' , ; recursive: 98
[08:08:35.242] | : . ' , ; Number of elements: 0
[08:08:35.242] | : . ' , resolve() for list ... done
[08:08:35.243] | : . ' resolve(obj, ...) ... done
[08:08:35.243] | : . ' resolved() for list ...
[08:08:35.243] | : . ' , Number of elements: 0
[08:08:35.243] | : . ' , Number of futures: 0
[08:08:35.243] | : . ' resolved() for list ... done
[08:08:35.243] | : . ' length: 0 (resolved future 1)
[08:08:35.243] | : . resolve() for FutureGlobals ... done
[08:08:35.243] | : . globals: [1] ‘x’
[08:08:35.243] | : Resolving futures part of globals (recursively) ... done
[08:08:35.244] | : Packages after dropping 'base': [0] 
[08:08:35.244] | : globals: [1] ‘x’
[08:08:35.244] | : packages: [0] 
[08:08:35.244] | getGlobalsAndPackages() ... done
[08:08:35.244] | run() for ‘Future’ (<unnamed-18>) ...
[08:08:35.245] | : state: ‘created’
[08:08:35.246] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.246] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.246] | : Using MulticoreFutureBackend ...
[08:08:35.246] | : . Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:08:35.246] | : . Launching futures ...
[08:08:35.246] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:35.246] | : . ' , getFutureData() ...
[08:08:35.246] | : . ' , ; getFutureCore() ...
[08:08:35.247] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:35.247] | : . ' , ; getFutureCore() ... done
[08:08:35.247] | : . ' , ; getFutureCapture() ...
[08:08:35.247] | : . ' , ; getFutureCapture() ... done
[08:08:35.247] | : . ' , ; getFutureContext() ...
[08:08:35.247] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.247] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:35.247] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.248] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:35.248] | : . ' , ; getFutureContext() ... done
[08:08:35.248] | : . ' , getFutureData() ... done
[08:08:35.248] | : . ' , requestCore(..., workers = 2) ...
[08:08:35.248] | : . ' , requestCore(..., workers = 2) ... done
[08:08:35.250] | : . ' , MulticoreFuture started
[08:08:35.251] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:35.252] | : . Launching futures ... done
[08:08:35.252] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:35.253] | : Using MulticoreFutureBackend ... done
[08:08:35.253] | run() for ‘Future’ (<unnamed-18>) ... done
[08:08:35.253] future(..., label = NULL) ... done
[08:08:35.253] value() for MulticoreFuture (<unnamed-18>) ...
[08:08:35.254] | result() for MulticoreFuture ...
[08:08:35.254] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.255] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:35.255] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.256] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.256] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:35.256] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:35.256] | : . ' , ; ` | New stack:
[08:08:35.257] | : . ' , ; ` | List of 1
[08:08:35.257] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.257] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.257] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:35.257] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.257] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.257] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.257] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.257] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.262] | : . ' , ; ` | Old stack:
[08:08:35.262] | : . ' , ; ` | List of 1
[08:08:35.262] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.262] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.262] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.262] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:35.262] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.262] | : . ' , ; ` |     ...)  
[08:08:35.262] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.262] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.262] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:35.262] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.262] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.262] | : . ' , ; ` |     ...)  
[08:08:35.262] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.262] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.267] | : . ' , ; ` | Not identical
[08:08:35.268] | : . ' , ; ` | all.equal() for future ...
[08:08:35.268] | : . ' , ; ` | : List of 2
[08:08:35.268] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.268] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.268] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:35.268] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.268] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.268] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.268] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.268] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.268] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.268] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.268] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.268] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.268] | : . ' , ; ` | :     ...)  
[08:08:35.268] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.268] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.268] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:35.268] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.268] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.268] | : . ' , ; ` | :     ...)  
[08:08:35.268] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.276] | : . ' , ; ` | : Formals differ
[08:08:35.276] | : . ' , ; ` | all.equal() for future ... done
[08:08:35.276] | : . ' , ; ` | Future strategies differ at level 1
[08:08:35.276] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:35.276] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:35.276] | : . ' , ; ` List of future strategies:
[08:08:35.276] | : . ' , ; ` 1. sequential:
[08:08:35.276] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:35.276] | : . ' , ; `    - tweaked: FALSE
[08:08:35.276] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.277] | : . ' , ; ` List of 1
[08:08:35.277] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.277] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.277] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:35.277] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.277] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.277] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.277] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.277] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.284] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:35.284] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:35.284] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.284] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:35.284] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.284] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.284] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:35.284] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.284] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.284] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.284] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.287] | : . ' , ; ` | : init: TRUE
[08:08:35.287] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:35.287] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:35.287] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:35.287] | : . ' , ; ` | : .  list()
[08:08:35.287] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:35.288] | : . ' , ; ` | : .  list()
[08:08:35.288] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:35.288] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:35.288] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:35.288] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:35.289] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:35.289] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:35.289] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:35.289] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.290] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:35.290] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:35.290] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.290] | : . ' , assign_globals() ...
[08:08:35.290] | : . ' , List of 1
[08:08:35.290] | : . ' ,  $ x: list()
[08:08:35.290] | : . ' ,  - attr(*, "where")=List of 1
[08:08:35.290] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:35.290] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:35.290] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:35.290] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:35.290] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:35.293] | : . ' , - copied ‘x’ to environment
[08:08:35.293] | : . ' , assign_globals() ... done
[08:08:35.295] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.295] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.295] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:35.295] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:35.296] | : . ' , ; ` | : New stack:
[08:08:35.296] | : . ' , ; ` | : List of 1
[08:08:35.296] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.296] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.296] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.296] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.296] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.296] | : . ' , ; ` | :     ...)  
[08:08:35.296] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.296] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.296] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:35.296] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.296] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.296] | : . ' , ; ` | :     ...)  
[08:08:35.296] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.296] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.299] | : . ' , ; ` | : Old stack:
[08:08:35.299] | : . ' , ; ` | : List of 1
[08:08:35.299] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.299] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.299] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.299] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.299] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.299] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.299] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.299] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a51d8d90> 
[08:08:35.299] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.299] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.299] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.304] | : . ' , ; ` | : Not identical
[08:08:35.304] | : . ' , ; ` | : all.equal() for future ...
[08:08:35.304] | : . ' , ; ` | : . List of 2
[08:08:35.304] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.304] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.304] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.304] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:35.304] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.304] | : . ' , ; ` | : .     ...)  
[08:08:35.304] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.304] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.304] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:35.304] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.304] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.304] | : . ' , ; ` | : .     ...)  
[08:08:35.304] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.304] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.304] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.304] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:35.304] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.304] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.304] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.304] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.304] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a51d8d90> 
[08:08:35.304] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.304] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.310] | : . ' , ; ` | : . Formals differ
[08:08:35.310] | : . ' , ; ` | : all.equal() for future ... done
[08:08:35.310] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:35.310] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:35.310] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:35.311] | : . ' , ; ` | List of future strategies:
[08:08:35.311] | : . ' , ; ` | 1. multicore:
[08:08:35.311] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:35.311] | : . ' , ; ` |    - tweaked: FALSE
[08:08:35.311] | : . ' , ; ` |    - call: plan(strategy)
[08:08:35.311] | : . ' , ; ` | List of 1
[08:08:35.311] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.311] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.311] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.311] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:35.311] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.311] | : . ' , ; ` |     ...)  
[08:08:35.311] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.311] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.311] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:35.311] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.311] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.311] | : . ' , ; ` |     ...)  
[08:08:35.311] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.311] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.314] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:35.314] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:35.315] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.315] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.315] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:35.315] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:35.315] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.315] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.316] | : readImmediateCondition() ...
[08:08:35.316] | : . Path: ‘/tmp/Rtmp2i29t9/.future/immediateConditions’
[08:08:35.316] | : . Number of RDS files: 0
[08:08:35.317] | : . Returned conditions set:
[08:08:35.317] | : .  list()
[08:08:35.317] | : readImmediateCondition() ... done
[08:08:35.318] | : result() for MulticoreFuture ...
[08:08:35.318] | : result() for MulticoreFuture ... done
[08:08:35.318] | : signalConditions() ...
[08:08:35.318] | : . include = ‘immediateCondition’
[08:08:35.318] | : . exclude = 
[08:08:35.318] | : . resignal = FALSE
[08:08:35.319] | : . Number of conditions: 6
[08:08:35.319] | : .  int 6
[08:08:35.319] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.320] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.320] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.320] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.320] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.320] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.320] | : signalConditions() ... done
[08:08:35.321] | result() for MulticoreFuture ... done
[08:08:35.321] | result() for MulticoreFuture ...
[08:08:35.321] | result() for MulticoreFuture ... done
[08:08:35.321] | signalConditions() ...
[08:08:35.321] | : include = ‘immediateCondition’
[08:08:35.321] | : exclude = 
[08:08:35.321] | : resignal = FALSE
[08:08:35.321] | : Number of conditions: 6
[08:08:35.322] | :  int 6
[08:08:35.322] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.322] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.322] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.323] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.323] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.323] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.323] | signalConditions() ... done
[08:08:35.323] | relay stdout ...
[08:08:35.323] | relay stdout ... done
[08:08:35.323] | check for misuse ...
[08:08:35.324] | check for misuse ... done
[08:08:35.324] | relay conditions ...
[08:08:35.324] | : Future state: ‘finished’
[08:08:35.324] | : result() for MulticoreFuture ...
[08:08:35.324] | : result() for MulticoreFuture ... done
[08:08:35.324] | : signalConditions() ...
[08:08:35.324] | : . include = ‘condition’
[08:08:35.325] | : . exclude = ‘immediateCondition’
[08:08:35.325] | : . resignal = TRUE
[08:08:35.325] | : . Number of conditions: 6
[08:08:35.325] | : .  int 6
[08:08:35.325] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.326] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.252] | : . ' , attachPackages() ...
[08:08:35.326] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.326] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.252] | : . ' , ; packages: [n=1] ‘future’
[08:08:35.326] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.326] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.253] | : . ' , attachPackages() ... done
[08:08:35.326] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.326] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.253] | : . ' , attachPackages() ...
[08:08:35.327] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.327] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.253] | : . ' , ; packages: [n=0] 
[08:08:35.327] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.327] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.254] | : . ' , attachPackages() ... done
[08:08:35.327] | : signalConditions() ... done
[08:08:35.327] | relay conditions ... done
[08:08:35.328] value() for MulticoreFuture (<unnamed-18>) ... done
$a
[1] 1

[08:08:35.328] future(..., label = NULL) ...
[08:08:35.328] | lazy: TRUE
[08:08:35.328] | stdout: TRUE
[08:08:35.328] | conditions: [n=1] ‘condition’
[08:08:35.328] | gc: FALSE
[08:08:35.328] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:35.329] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:35.329] | : Searching for globals ...
[08:08:35.344] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:35.344] | : Searching for globals ... done
[08:08:35.344] | : Resolving globals: TRUE
[08:08:35.344] | : Resolving any globals that are futures ...
[08:08:35.344] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:35.344] | : Resolving any globals that are futures ... done
[08:08:35.344] | : Search for packages associated with the globals ...
[08:08:35.345] | : . Packages associated with globals: [1] ‘base’
[08:08:35.345] | : . Packages: [1] ‘base’
[08:08:35.345] | : Search for packages associated with the globals ... done
[08:08:35.345] | : Resolving futures part of globals (recursively) ...
[08:08:35.345] | : . resolve() for FutureGlobals ...
[08:08:35.345] | : . ' recursive: 99
[08:08:35.346] | : . ' Number of elements: 1
[08:08:35.346] | : . ' elements: ‘x’
[08:08:35.346] | : . ' 'obj' is list
[08:08:35.346] | : . ' resolve(obj, ...) ...
[08:08:35.346] | : . ' , resolve() for list ...
[08:08:35.346] | : . ' , ; recursive: 98
[08:08:35.346] | : . ' , ; Number of elements: 0
[08:08:35.346] | : . ' , resolve() for list ... done
[08:08:35.347] | : . ' resolve(obj, ...) ... done
[08:08:35.347] | : . ' resolved() for list ...
[08:08:35.347] | : . ' , Number of elements: 0
[08:08:35.347] | : . ' , Number of futures: 0
[08:08:35.347] | : . ' resolved() for list ... done
[08:08:35.347] | : . ' length: 0 (resolved future 1)
[08:08:35.347] | : . resolve() for FutureGlobals ... done
[08:08:35.347] | : . globals: [1] ‘x’
[08:08:35.347] | : Resolving futures part of globals (recursively) ... done
[08:08:35.347] | : Packages after dropping 'base': [0] 
[08:08:35.348] | : globals: [1] ‘x’
[08:08:35.348] | : packages: [0] 
[08:08:35.348] | getGlobalsAndPackages() ... done
[08:08:35.348] future(..., label = NULL) ... done
[08:08:35.348] value() for Future (<unnamed-19>) ...
[08:08:35.348] | run() for ‘Future’ (<unnamed-19>) ...
[08:08:35.348] | : state: ‘created’
[08:08:35.349] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.349] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.349] | : Using MulticoreFutureBackend ...
[08:08:35.349] | : . Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:08:35.349] | : . Launching futures ...
[08:08:35.349] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:35.349] | : . ' , getFutureData() ...
[08:08:35.349] | : . ' , ; getFutureCore() ...
[08:08:35.349] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:35.349] | : . ' , ; getFutureCore() ... done
[08:08:35.350] | : . ' , ; getFutureCapture() ...
[08:08:35.350] | : . ' , ; getFutureCapture() ... done
[08:08:35.350] | : . ' , ; getFutureContext() ...
[08:08:35.350] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.350] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:35.350] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.350] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:35.350] | : . ' , ; getFutureContext() ... done
[08:08:35.351] | : . ' , getFutureData() ... done
[08:08:35.351] | : . ' , requestCore(..., workers = 2) ...
[08:08:35.351] | : . ' , requestCore(..., workers = 2) ... done
[08:08:35.353] | : . ' , MulticoreFuture started
[08:08:35.353] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:35.354] | : . Launching futures ... done
[08:08:35.354] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:35.354] | : Using MulticoreFutureBackend ... done
[08:08:35.354] | run() for ‘Future’ (<unnamed-19>) ... done
[08:08:35.354] | result() for MulticoreFuture ...
[08:08:35.356] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.356] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:35.357] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.357] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.358] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:35.358] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:35.358] | : . ' , ; ` | New stack:
[08:08:35.358] | : . ' , ; ` | List of 1
[08:08:35.358] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.358] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.358] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:35.358] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.358] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.358] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.358] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.358] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.369] | : . ' , ; ` | Old stack:
[08:08:35.369] | : . ' , ; ` | List of 1
[08:08:35.369] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.369] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.369] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.369] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:35.369] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.369] | : . ' , ; ` |     ...)  
[08:08:35.369] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.369] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.369] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:35.369] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.369] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.369] | : . ' , ; ` |     ...)  
[08:08:35.369] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.369] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.375] | : . ' , ; ` | Not identical
[08:08:35.375] | : . ' , ; ` | all.equal() for future ...
[08:08:35.375] | : . ' , ; ` | : List of 2
[08:08:35.375] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.375] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.375] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:35.375] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.375] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.375] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.375] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.375] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.375] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.375] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.375] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.375] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.375] | : . ' , ; ` | :     ...)  
[08:08:35.375] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.375] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.375] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:35.375] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.375] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.375] | : . ' , ; ` | :     ...)  
[08:08:35.375] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.382] | : . ' , ; ` | : Formals differ
[08:08:35.382] | : . ' , ; ` | all.equal() for future ... done
[08:08:35.383] | : . ' , ; ` | Future strategies differ at level 1
[08:08:35.383] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:35.383] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:35.383] | : . ' , ; ` List of future strategies:
[08:08:35.383] | : . ' , ; ` 1. sequential:
[08:08:35.383] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:35.383] | : . ' , ; `    - tweaked: FALSE
[08:08:35.383] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.384] | : . ' , ; ` List of 1
[08:08:35.384] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.384] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.384] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:35.384] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.384] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.384] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.384] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.384] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.387] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:35.387] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:35.387] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.388] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:35.388] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.388] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.388] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:35.388] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.388] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.388] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.388] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.390] | : . ' , ; ` | : init: TRUE
[08:08:35.390] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:35.390] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:35.390] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:35.392] | : . ' , ; ` | : .  list()
[08:08:35.393] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:35.393] | : . ' , ; ` | : .  list()
[08:08:35.393] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:35.393] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:35.393] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:35.393] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:35.395] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:35.395] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:35.395] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:35.395] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.395] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:35.396] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:35.396] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.396] | : . ' , assign_globals() ...
[08:08:35.396] | : . ' , List of 1
[08:08:35.396] | : . ' ,  $ x: list()
[08:08:35.396] | : . ' ,  - attr(*, "where")=List of 1
[08:08:35.396] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:35.396] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:35.396] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:35.396] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:35.396] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:35.399] | : . ' , - copied ‘x’ to environment
[08:08:35.399] | : . ' , assign_globals() ... done
[08:08:35.401] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.401] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.401] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:35.401] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:35.402] | : . ' , ; ` | : New stack:
[08:08:35.402] | : . ' , ; ` | : List of 1
[08:08:35.402] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.402] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.402] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.402] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.402] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.402] | : . ' , ; ` | :     ...)  
[08:08:35.402] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.402] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.402] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:35.402] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.402] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.402] | : . ' , ; ` | :     ...)  
[08:08:35.402] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.402] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.405] | : . ' , ; ` | : Old stack:
[08:08:35.405] | : . ' , ; ` | : List of 1
[08:08:35.405] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.405] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.405] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.405] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.405] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.405] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.405] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.405] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a705e150> 
[08:08:35.405] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.405] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.405] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.408] | : . ' , ; ` | : Not identical
[08:08:35.409] | : . ' , ; ` | : all.equal() for future ...
[08:08:35.409] | : . ' , ; ` | : . List of 2
[08:08:35.409] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.409] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.409] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.409] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:35.409] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.409] | : . ' , ; ` | : .     ...)  
[08:08:35.409] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.409] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.409] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:35.409] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.409] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.409] | : . ' , ; ` | : .     ...)  
[08:08:35.409] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.409] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.409] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.409] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:35.409] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.409] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.409] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.409] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.409] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a705e150> 
[08:08:35.409] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.409] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.416] | : . ' , ; ` | : . Formals differ
[08:08:35.416] | : . ' , ; ` | : all.equal() for future ... done
[08:08:35.416] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:35.416] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:35.416] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:35.416] | : . ' , ; ` | List of future strategies:
[08:08:35.416] | : . ' , ; ` | 1. multicore:
[08:08:35.416] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:35.416] | : . ' , ; ` |    - tweaked: FALSE
[08:08:35.416] | : . ' , ; ` |    - call: plan(strategy)
[08:08:35.417] | : . ' , ; ` | List of 1
[08:08:35.417] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.417] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.417] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.417] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:35.417] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.417] | : . ' , ; ` |     ...)  
[08:08:35.417] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.417] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.417] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:35.417] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.417] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.417] | : . ' , ; ` |     ...)  
[08:08:35.417] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.417] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.420] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:35.420] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:35.420] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.420] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.420] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:35.421] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:35.421] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.421] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.421] | : readImmediateCondition() ...
[08:08:35.422] | : . Path: ‘/tmp/Rtmp2i29t9/.future/immediateConditions’
[08:08:35.422] | : . Number of RDS files: 0
[08:08:35.422] | : . Returned conditions set:
[08:08:35.422] | : .  list()
[08:08:35.423] | : readImmediateCondition() ... done
[08:08:35.423] | : result() for MulticoreFuture ...
[08:08:35.423] | : result() for MulticoreFuture ... done
[08:08:35.423] | : signalConditions() ...
[08:08:35.424] | : . include = ‘immediateCondition’
[08:08:35.424] | : . exclude = 
[08:08:35.424] | : . resignal = FALSE
[08:08:35.424] | : . Number of conditions: 6
[08:08:35.424] | : .  int 6
[08:08:35.426] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.427] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.427] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.427] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.428] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.428] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.428] | : signalConditions() ... done
[08:08:35.428] | result() for MulticoreFuture ... done
[08:08:35.429] | result() for MulticoreFuture ...
[08:08:35.429] | result() for MulticoreFuture ... done
[08:08:35.429] | signalConditions() ...
[08:08:35.429] | : include = ‘immediateCondition’
[08:08:35.430] | : exclude = 
[08:08:35.430] | : resignal = FALSE
[08:08:35.430] | : Number of conditions: 6
[08:08:35.430] | :  int 6
[08:08:35.431] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.431] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.431] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.432] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.432] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.432] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.432] | signalConditions() ... done
[08:08:35.432] | relay stdout ...
[08:08:35.432] | relay stdout ... done
[08:08:35.433] | check for misuse ...
[08:08:35.433] | check for misuse ... done
[08:08:35.433] | relay conditions ...
[08:08:35.433] | : Future state: ‘finished’
[08:08:35.433] | : result() for MulticoreFuture ...
[08:08:35.433] | : result() for MulticoreFuture ... done
[08:08:35.433] | : signalConditions() ...
[08:08:35.434] | : . include = ‘condition’
[08:08:35.434] | : . exclude = ‘immediateCondition’
[08:08:35.434] | : . resignal = TRUE
[08:08:35.434] | : . Number of conditions: 6
[08:08:35.434] | : .  int 6
[08:08:35.435] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.435] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.354] | : . ' , attachPackages() ...
[08:08:35.435] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.435] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.354] | : . ' , ; packages: [n=1] ‘future’
[08:08:35.435] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.435] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.355] | : . ' , attachPackages() ... done
[08:08:35.436] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.436] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.355] | : . ' , attachPackages() ...
[08:08:35.436] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.436] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.355] | : . ' , ; packages: [n=0] 
[08:08:35.436] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.436] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.355] | : . ' , attachPackages() ... done
[08:08:35.436] | : signalConditions() ... done
[08:08:35.437] | relay conditions ... done
[08:08:35.437] value() for Future (<unnamed-19>) ... done
$a
[1] 1

[08:08:35.437] future(..., label = NULL) ...
[08:08:35.437] | lazy: FALSE
[08:08:35.437] | stdout: TRUE
[08:08:35.437] | conditions: [n=1] ‘condition’
[08:08:35.438] | gc: FALSE
[08:08:35.438] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:35.438] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:35.438] | : Searching for globals ...
[08:08:35.452] | : . globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:35.452] | : Searching for globals ... done
[08:08:35.453] | : Resolving globals: TRUE
[08:08:35.453] | : Resolving any globals that are futures ...
[08:08:35.453] | : . globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:35.453] | : Resolving any globals that are futures ... done
[08:08:35.453] | : Search for packages associated with the globals ...
[08:08:35.453] | : . Packages associated with globals: [1] ‘base’
[08:08:35.454] | : . Packages: [1] ‘base’
[08:08:35.454] | : Search for packages associated with the globals ... done
[08:08:35.454] | : Resolving futures part of globals (recursively) ...
[08:08:35.454] | : . resolve() for FutureGlobals ...
[08:08:35.454] | : . ' recursive: 99
[08:08:35.454] | : . ' Number of elements: 1
[08:08:35.454] | : . ' elements: ‘x’
[08:08:35.455] | : . ' 'obj' is list
[08:08:35.455] | : . ' resolve(obj, ...) ...
[08:08:35.455] | : . ' , resolve() for list ...
[08:08:35.455] | : . ' , ; recursive: 98
[08:08:35.455] | : . ' , ; Number of elements: 0
[08:08:35.455] | : . ' , resolve() for list ... done
[08:08:35.455] | : . ' resolve(obj, ...) ... done
[08:08:35.455] | : . ' resolved() for list ...
[08:08:35.455] | : . ' , Number of elements: 0
[08:08:35.455] | : . ' , Number of futures: 0
[08:08:35.456] | : . ' resolved() for list ... done
[08:08:35.456] | : . ' length: 0 (resolved future 1)
[08:08:35.456] | : . resolve() for FutureGlobals ... done
[08:08:35.456] | : . globals: [1] ‘x’
[08:08:35.456] | : Resolving futures part of globals (recursively) ... done
[08:08:35.456] | : Packages after dropping 'base': [0] 
[08:08:35.456] | : globals: [1] ‘x’
[08:08:35.456] | : packages: [0] 
[08:08:35.456] | getGlobalsAndPackages() ... done
[08:08:35.457] | run() for ‘Future’ (<unnamed-20>) ...
[08:08:35.457] | : state: ‘created’
[08:08:35.457] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.457] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.457] | : Using MulticoreFutureBackend ...
[08:08:35.457] | : . Number of futures since start: 7 (7 created, 7 launched, 7 finished)
[08:08:35.457] | : . Launching futures ...
[08:08:35.458] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:35.458] | : . ' , getFutureData() ...
[08:08:35.458] | : . ' , ; getFutureCore() ...
[08:08:35.458] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:35.458] | : . ' , ; getFutureCore() ... done
[08:08:35.458] | : . ' , ; getFutureCapture() ...
[08:08:35.458] | : . ' , ; getFutureCapture() ... done
[08:08:35.458] | : . ' , ; getFutureContext() ...
[08:08:35.458] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.458] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:35.459] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.459] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:35.459] | : . ' , ; getFutureContext() ... done
[08:08:35.459] | : . ' , getFutureData() ... done
[08:08:35.459] | : . ' , requestCore(..., workers = 2) ...
[08:08:35.459] | : . ' , requestCore(..., workers = 2) ... done
[08:08:35.461] | : . ' , MulticoreFuture started
[08:08:35.462] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:35.462] | : . Launching futures ... done
[08:08:35.462] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:35.463] | : Using MulticoreFutureBackend ... done
[08:08:35.463] | run() for ‘Future’ (<unnamed-20>) ... done
[08:08:35.463] future(..., label = NULL) ... done
[08:08:35.463] value() for MulticoreFuture (<unnamed-20>) ...
[08:08:35.464] | result() for MulticoreFuture ...
[08:08:35.465] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.465] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:35.465] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.466] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.466] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:35.466] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:35.467] | : . ' , ; ` | New stack:
[08:08:35.467] | : . ' , ; ` | List of 1
[08:08:35.467] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.467] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.467] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:35.467] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.467] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.467] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.467] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.467] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.472] | : . ' , ; ` | Old stack:
[08:08:35.472] | : . ' , ; ` | List of 1
[08:08:35.472] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.472] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.472] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.472] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:35.472] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.472] | : . ' , ; ` |     ...)  
[08:08:35.472] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.472] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.472] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:35.472] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.472] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.472] | : . ' , ; ` |     ...)  
[08:08:35.472] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.472] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.479] | : . ' , ; ` | Not identical
[08:08:35.480] | : . ' , ; ` | all.equal() for future ...
[08:08:35.480] | : . ' , ; ` | : List of 2
[08:08:35.480] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.480] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.480] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:35.480] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.480] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.480] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.480] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.480] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.480] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.480] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.480] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.480] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.480] | : . ' , ; ` | :     ...)  
[08:08:35.480] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.480] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.480] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:35.480] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.480] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.480] | : . ' , ; ` | :     ...)  
[08:08:35.480] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.490] | : . ' , ; ` | : Formals differ
[08:08:35.490] | : . ' , ; ` | all.equal() for future ... done
[08:08:35.490] | : . ' , ; ` | Future strategies differ at level 1
[08:08:35.491] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:35.491] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:35.491] | : . ' , ; ` List of future strategies:
[08:08:35.491] | : . ' , ; ` 1. sequential:
[08:08:35.491] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:35.491] | : . ' , ; `    - tweaked: FALSE
[08:08:35.491] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.492] | : . ' , ; ` List of 1
[08:08:35.492] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.492] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.492] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:35.492] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.492] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.492] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.492] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.492] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.495] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:35.495] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:35.495] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.495] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:35.495] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.495] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.495] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:35.495] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.495] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.495] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.495] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.498] | : . ' , ; ` | : init: TRUE
[08:08:35.498] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:35.498] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:35.498] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:35.498] | : . ' , ; ` | : .  list()
[08:08:35.498] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:35.499] | : . ' , ; ` | : .  list()
[08:08:35.499] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:35.499] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:35.499] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:35.499] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:35.500] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:35.500] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:35.500] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:35.501] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.501] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:35.501] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:35.501] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.501] | : . ' , assign_globals() ...
[08:08:35.501] | : . ' , List of 1
[08:08:35.501] | : . ' ,  $ x: list()
[08:08:35.501] | : . ' ,  - attr(*, "where")=List of 1
[08:08:35.501] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:35.501] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:35.501] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:35.501] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:35.501] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:35.505] | : . ' , - copied ‘x’ to environment
[08:08:35.506] | : . ' , assign_globals() ... done
[08:08:35.508] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.508] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.509] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:35.509] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:35.509] | : . ' , ; ` | : New stack:
[08:08:35.509] | : . ' , ; ` | : List of 1
[08:08:35.509] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.509] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.509] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.509] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.509] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.509] | : . ' , ; ` | :     ...)  
[08:08:35.509] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.509] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.509] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:35.509] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.509] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.509] | : . ' , ; ` | :     ...)  
[08:08:35.509] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.509] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.512] | : . ' , ; ` | : Old stack:
[08:08:35.512] | : . ' , ; ` | : List of 1
[08:08:35.512] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.512] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.512] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.512] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.512] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.512] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.512] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.512] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a77fc988> 
[08:08:35.512] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.512] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.512] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.516] | : . ' , ; ` | : Not identical
[08:08:35.516] | : . ' , ; ` | : all.equal() for future ...
[08:08:35.516] | : . ' , ; ` | : . List of 2
[08:08:35.516] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.516] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.516] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.516] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:35.516] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.516] | : . ' , ; ` | : .     ...)  
[08:08:35.516] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.516] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.516] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:35.516] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.516] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.516] | : . ' , ; ` | : .     ...)  
[08:08:35.516] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.516] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.516] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.516] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:35.516] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.516] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.516] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.516] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.516] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a77fc988> 
[08:08:35.516] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.516] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.522] | : . ' , ; ` | : . Formals differ
[08:08:35.522] | : . ' , ; ` | : all.equal() for future ... done
[08:08:35.522] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:35.522] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:35.522] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:35.522] | : . ' , ; ` | List of future strategies:
[08:08:35.522] | : . ' , ; ` | 1. multicore:
[08:08:35.522] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:35.522] | : . ' , ; ` |    - tweaked: FALSE
[08:08:35.522] | : . ' , ; ` |    - call: plan(strategy)
[08:08:35.522] | : . ' , ; ` | List of 1
[08:08:35.522] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.522] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.522] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.522] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:35.522] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.522] | : . ' , ; ` |     ...)  
[08:08:35.522] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.522] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.522] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:35.522] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.522] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.522] | : . ' , ; ` |     ...)  
[08:08:35.522] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.522] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.527] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:35.527] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:35.527] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.528] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.528] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:35.528] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:35.528] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.528] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.529] | : readImmediateCondition() ...
[08:08:35.529] | : . Path: ‘/tmp/Rtmp2i29t9/.future/immediateConditions’
[08:08:35.529] | : . Number of RDS files: 0
[08:08:35.529] | : . Returned conditions set:
[08:08:35.530] | : .  list()
[08:08:35.530] | : readImmediateCondition() ... done
[08:08:35.531] | : result() for MulticoreFuture ...
[08:08:35.531] | : result() for MulticoreFuture ... done
[08:08:35.531] | : signalConditions() ...
[08:08:35.531] | : . include = ‘immediateCondition’
[08:08:35.531] | : . exclude = 
[08:08:35.531] | : . resignal = FALSE
[08:08:35.531] | : . Number of conditions: 6
[08:08:35.532] | : .  int 6
[08:08:35.532] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.532] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.533] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.533] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.533] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.533] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.533] | : signalConditions() ... done
[08:08:35.533] | result() for MulticoreFuture ... done
[08:08:35.533] | result() for MulticoreFuture ...
[08:08:35.534] | result() for MulticoreFuture ... done
[08:08:35.534] | signalConditions() ...
[08:08:35.534] | : include = ‘immediateCondition’
[08:08:35.534] | : exclude = 
[08:08:35.534] | : resignal = FALSE
[08:08:35.534] | : Number of conditions: 6
[08:08:35.534] | :  int 6
[08:08:35.535] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.535] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.535] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.535] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.535] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.536] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.536] | signalConditions() ... done
[08:08:35.536] | relay stdout ...
[08:08:35.536] | relay stdout ... done
[08:08:35.536] | check for misuse ...
[08:08:35.536] | check for misuse ... done
[08:08:35.536] | relay conditions ...
[08:08:35.536] | : Future state: ‘finished’
[08:08:35.537] | : result() for MulticoreFuture ...
[08:08:35.537] | : result() for MulticoreFuture ... done
[08:08:35.537] | : signalConditions() ...
[08:08:35.537] | : . include = ‘condition’
[08:08:35.537] | : . exclude = ‘immediateCondition’
[08:08:35.537] | : . resignal = TRUE
[08:08:35.537] | : . Number of conditions: 6
[08:08:35.537] | : .  int 6
[08:08:35.538] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.538] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.462] | : . ' , attachPackages() ...
[08:08:35.538] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.538] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.463] | : . ' , ; packages: [n=1] ‘future’
[08:08:35.540] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.541] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.463] | : . ' , attachPackages() ... done
[08:08:35.541] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.541] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.463] | : . ' , attachPackages() ...
[08:08:35.542] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.542] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.464] | : . ' , ; packages: [n=0] 
[08:08:35.542] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.542] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.464] | : . ' , attachPackages() ... done
[08:08:35.543] | : signalConditions() ... done
[08:08:35.543] | relay conditions ... done
[08:08:35.543] value() for MulticoreFuture (<unnamed-20>) ... done
$a
[1] 1

[08:08:35.543] future(..., label = NULL) ...
[08:08:35.544] | lazy: FALSE
[08:08:35.544] | stdout: TRUE
[08:08:35.544] | conditions: [n=1] ‘condition’
[08:08:35.544] | gc: FALSE
[08:08:35.544] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:35.545] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:35.545] | : Searching for globals ...
[08:08:35.561] | : . globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:35.561] | : Searching for globals ... done
[08:08:35.561] | : Resolving globals: TRUE
[08:08:35.562] | : Resolving any globals that are futures ...
[08:08:35.562] | : . globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:35.562] | : Resolving any globals that are futures ... done
[08:08:35.562] | : Search for packages associated with the globals ...
[08:08:35.562] | : . Packages associated with globals: [1] ‘base’
[08:08:35.563] | : . Packages: [1] ‘base’
[08:08:35.563] | : Search for packages associated with the globals ... done
[08:08:35.563] | : Resolving futures part of globals (recursively) ...
[08:08:35.563] | : . resolve() for FutureGlobals ...
[08:08:35.563] | : . ' recursive: 99
[08:08:35.564] | : . ' Number of elements: 1
[08:08:35.564] | : . ' elements: ‘x’
[08:08:35.564] | : . ' 'obj' is list
[08:08:35.564] | : . ' resolve(obj, ...) ...
[08:08:35.564] | : . ' , resolve() for list ...
[08:08:35.564] | : . ' , ; recursive: 98
[08:08:35.565] | : . ' , ; Number of elements: 0
[08:08:35.565] | : . ' , resolve() for list ... done
[08:08:35.565] | : . ' resolve(obj, ...) ... done
[08:08:35.565] | : . ' resolved() for list ...
[08:08:35.565] | : . ' , Number of elements: 0
[08:08:35.565] | : . ' , Number of futures: 0
[08:08:35.565] | : . ' resolved() for list ... done
[08:08:35.565] | : . ' length: 0 (resolved future 1)
[08:08:35.565] | : . resolve() for FutureGlobals ... done
[08:08:35.566] | : . globals: [1] ‘x’
[08:08:35.566] | : Resolving futures part of globals (recursively) ... done
[08:08:35.566] | : Packages after dropping 'base': [0] 
[08:08:35.566] | : globals: [1] ‘x’
[08:08:35.566] | : packages: [0] 
[08:08:35.566] | getGlobalsAndPackages() ... done
[08:08:35.566] | run() for ‘Future’ (<unnamed-21>) ...
[08:08:35.567] | : state: ‘created’
[08:08:35.567] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.567] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.567] | : Using MulticoreFutureBackend ...
[08:08:35.567] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:08:35.567] | : . Launching futures ...
[08:08:35.567] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:35.567] | : . ' , getFutureData() ...
[08:08:35.567] | : . ' , ; getFutureCore() ...
[08:08:35.568] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:35.568] | : . ' , ; getFutureCore() ... done
[08:08:35.568] | : . ' , ; getFutureCapture() ...
[08:08:35.568] | : . ' , ; getFutureCapture() ... done
[08:08:35.568] | : . ' , ; getFutureContext() ...
[08:08:35.568] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.568] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:35.568] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.568] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:35.569] | : . ' , ; getFutureContext() ... done
[08:08:35.569] | : . ' , getFutureData() ... done
[08:08:35.569] | : . ' , requestCore(..., workers = 2) ...
[08:08:35.569] | : . ' , requestCore(..., workers = 2) ... done
[08:08:35.571] | : . ' , MulticoreFuture started
[08:08:35.572] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:35.572] | : . Launching futures ... done
[08:08:35.572] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:35.573] | : Using MulticoreFutureBackend ... done
[08:08:35.573] | run() for ‘Future’ (<unnamed-21>) ... done
[08:08:35.573] future(..., label = NULL) ... done
[08:08:35.573] value() for MulticoreFuture (<unnamed-21>) ...
[08:08:35.574] | result() for MulticoreFuture ...
[08:08:35.575] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.575] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:35.576] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.576] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.576] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:35.577] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:35.577] | : . ' , ; ` | New stack:
[08:08:35.577] | : . ' , ; ` | List of 1
[08:08:35.577] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.577] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.577] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:35.577] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.577] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.577] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.577] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.577] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.582] | : . ' , ; ` | Old stack:
[08:08:35.582] | : . ' , ; ` | List of 1
[08:08:35.582] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.582] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.582] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.582] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:35.582] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.582] | : . ' , ; ` |     ...)  
[08:08:35.582] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.582] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.582] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:35.582] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.582] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.582] | : . ' , ; ` |     ...)  
[08:08:35.582] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.582] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.587] | : . ' , ; ` | Not identical
[08:08:35.587] | : . ' , ; ` | all.equal() for future ...
[08:08:35.588] | : . ' , ; ` | : List of 2
[08:08:35.588] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.588] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.588] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:35.588] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.588] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.588] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.588] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.588] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.588] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.588] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.588] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.588] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.588] | : . ' , ; ` | :     ...)  
[08:08:35.588] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.588] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.588] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:35.588] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.588] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.588] | : . ' , ; ` | :     ...)  
[08:08:35.588] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.600] | : . ' , ; ` | : Formals differ
[08:08:35.600] | : . ' , ; ` | all.equal() for future ... done
[08:08:35.601] | : . ' , ; ` | Future strategies differ at level 1
[08:08:35.601] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:35.601] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:35.601] | : . ' , ; ` List of future strategies:
[08:08:35.601] | : . ' , ; ` 1. sequential:
[08:08:35.601] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:35.601] | : . ' , ; `    - tweaked: FALSE
[08:08:35.601] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.602] | : . ' , ; ` List of 1
[08:08:35.602] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.602] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.602] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:35.602] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.602] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.602] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.602] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.602] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.605] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:35.605] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:35.605] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.606] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:35.606] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.606] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.606] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:35.606] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.606] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.606] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.606] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.608] | : . ' , ; ` | : init: TRUE
[08:08:35.608] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:35.608] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:35.608] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:35.608] | : . ' , ; ` | : .  list()
[08:08:35.609] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:35.609] | : . ' , ; ` | : .  list()
[08:08:35.609] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:35.609] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:35.609] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:35.609] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:35.610] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:35.610] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:35.610] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:35.611] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.611] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:35.611] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:35.611] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.611] | : . ' , assign_globals() ...
[08:08:35.611] | : . ' , List of 1
[08:08:35.611] | : . ' ,  $ x: list()
[08:08:35.611] | : . ' ,  - attr(*, "where")=List of 1
[08:08:35.611] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:35.611] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:35.611] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:35.611] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:35.611] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:35.614] | : . ' , - copied ‘x’ to environment
[08:08:35.614] | : . ' , assign_globals() ... done
[08:08:35.616] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.616] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.616] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:35.616] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:35.617] | : . ' , ; ` | : New stack:
[08:08:35.617] | : . ' , ; ` | : List of 1
[08:08:35.617] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.617] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.617] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.617] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.617] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.617] | : . ' , ; ` | :     ...)  
[08:08:35.617] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.617] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.617] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:35.617] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.617] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.617] | : . ' , ; ` | :     ...)  
[08:08:35.617] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.617] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.622] | : . ' , ; ` | : Old stack:
[08:08:35.622] | : . ' , ; ` | : List of 1
[08:08:35.622] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.622] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.622] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.622] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.622] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.622] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.622] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.622] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a71534b0> 
[08:08:35.622] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.622] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.622] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.625] | : . ' , ; ` | : Not identical
[08:08:35.625] | : . ' , ; ` | : all.equal() for future ...
[08:08:35.625] | : . ' , ; ` | : . List of 2
[08:08:35.625] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.625] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.625] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.625] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:35.625] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.625] | : . ' , ; ` | : .     ...)  
[08:08:35.625] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.625] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.625] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:35.625] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.625] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.625] | : . ' , ; ` | : .     ...)  
[08:08:35.625] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.625] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.625] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.625] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:35.625] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.625] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.625] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.625] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.625] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a71534b0> 
[08:08:35.625] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.625] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.631] | : . ' , ; ` | : . Formals differ
[08:08:35.631] | : . ' , ; ` | : all.equal() for future ... done
[08:08:35.631] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:35.631] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:35.631] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:35.631] | : . ' , ; ` | List of future strategies:
[08:08:35.631] | : . ' , ; ` | 1. multicore:
[08:08:35.631] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:35.631] | : . ' , ; ` |    - tweaked: FALSE
[08:08:35.631] | : . ' , ; ` |    - call: plan(strategy)
[08:08:35.632] | : . ' , ; ` | List of 1
[08:08:35.632] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.632] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.632] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.632] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:35.632] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.632] | : . ' , ; ` |     ...)  
[08:08:35.632] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.632] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.632] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:35.632] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.632] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.632] | : . ' , ; ` |     ...)  
[08:08:35.632] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.632] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.636] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:35.636] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:35.636] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.636] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.637] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:35.637] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:35.637] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.637] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.637] | : readImmediateCondition() ...
[08:08:35.638] | : . Path: ‘/tmp/Rtmp2i29t9/.future/immediateConditions’
[08:08:35.638] | : . Number of RDS files: 0
[08:08:35.638] | : . Returned conditions set:
[08:08:35.638] | : .  list()
[08:08:35.639] | : readImmediateCondition() ... done
[08:08:35.639] | : result() for MulticoreFuture ...
[08:08:35.640] | : result() for MulticoreFuture ... done
[08:08:35.640] | : signalConditions() ...
[08:08:35.640] | : . include = ‘immediateCondition’
[08:08:35.640] | : . exclude = 
[08:08:35.640] | : . resignal = FALSE
[08:08:35.640] | : . Number of conditions: 6
[08:08:35.640] | : .  int 6
[08:08:35.641] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.641] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.641] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.642] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.642] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.642] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.642] | : signalConditions() ... done
[08:08:35.642] | result() for MulticoreFuture ... done
[08:08:35.642] | result() for MulticoreFuture ...
[08:08:35.642] | result() for MulticoreFuture ... done
[08:08:35.643] | signalConditions() ...
[08:08:35.643] | : include = ‘immediateCondition’
[08:08:35.643] | : exclude = 
[08:08:35.643] | : resignal = FALSE
[08:08:35.643] | : Number of conditions: 6
[08:08:35.643] | :  int 6
[08:08:35.644] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.644] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.644] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.644] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.644] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.645] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.645] | signalConditions() ... done
[08:08:35.645] | relay stdout ...
[08:08:35.645] | relay stdout ... done
[08:08:35.645] | check for misuse ...
[08:08:35.645] | check for misuse ... done
[08:08:35.645] | relay conditions ...
[08:08:35.645] | : Future state: ‘finished’
[08:08:35.646] | : result() for MulticoreFuture ...
[08:08:35.646] | : result() for MulticoreFuture ... done
[08:08:35.646] | : signalConditions() ...
[08:08:35.646] | : . include = ‘condition’
[08:08:35.646] | : . exclude = ‘immediateCondition’
[08:08:35.646] | : . resignal = TRUE
[08:08:35.646] | : . Number of conditions: 6
[08:08:35.647] | : .  int 6
[08:08:35.647] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.647] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.572] | : . ' , attachPackages() ...
[08:08:35.647] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.648] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.573] | : . ' , ; packages: [n=1] ‘future’
[08:08:35.648] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.648] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.573] | : . ' , attachPackages() ... done
[08:08:35.648] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.648] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.574] | : . ' , attachPackages() ...
[08:08:35.648] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.648] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.574] | : . ' , ; packages: [n=0] 
[08:08:35.649] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.649] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.574] | : . ' , attachPackages() ... done
[08:08:35.649] | : signalConditions() ... done
[08:08:35.649] | relay conditions ... done
[08:08:35.649] value() for MulticoreFuture (<unnamed-21>) ... done
$a
[1] 1

[08:08:35.649] future(..., label = NULL) ...
[08:08:35.649] | lazy: TRUE
[08:08:35.650] | stdout: TRUE
[08:08:35.650] | conditions: [n=1] ‘condition’
[08:08:35.650] | gc: FALSE
[08:08:35.650] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:35.650] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:35.651] | : Searching for globals ...
[08:08:35.668] | : . globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:35.668] | : Searching for globals ... done
[08:08:35.668] | : Resolving globals: TRUE
[08:08:35.668] | : Resolving any globals that are futures ...
[08:08:35.668] | : . globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:35.668] | : Resolving any globals that are futures ... done
[08:08:35.668] | : Search for packages associated with the globals ...
[08:08:35.669] | : . Packages associated with globals: [1] ‘base’
[08:08:35.669] | : . Packages: [1] ‘base’
[08:08:35.669] | : Search for packages associated with the globals ... done
[08:08:35.669] | : Resolving futures part of globals (recursively) ...
[08:08:35.669] | : . resolve() for FutureGlobals ...
[08:08:35.669] | : . ' recursive: 99
[08:08:35.670] | : . ' Number of elements: 1
[08:08:35.670] | : . ' elements: ‘x’
[08:08:35.670] | : . ' 'obj' is list
[08:08:35.670] | : . ' resolve(obj, ...) ...
[08:08:35.670] | : . ' , resolve() for list ...
[08:08:35.671] | : . ' , ; recursive: 98
[08:08:35.671] | : . ' , ; Number of elements: 0
[08:08:35.671] | : . ' , resolve() for list ... done
[08:08:35.672] | : . ' resolve(obj, ...) ... done
[08:08:35.672] | : . ' resolved() for list ...
[08:08:35.672] | : . ' , Number of elements: 0
[08:08:35.672] | : . ' , Number of futures: 0
[08:08:35.672] | : . ' resolved() for list ... done
[08:08:35.672] | : . ' length: 0 (resolved future 1)
[08:08:35.672] | : . resolve() for FutureGlobals ... done
[08:08:35.672] | : . globals: [1] ‘x’
[08:08:35.672] | : Resolving futures part of globals (recursively) ... done
[08:08:35.673] | : Packages after dropping 'base': [0] 
[08:08:35.673] | : globals: [1] ‘x’
[08:08:35.673] | : packages: [0] 
[08:08:35.673] | getGlobalsAndPackages() ... done
[08:08:35.673] future(..., label = NULL) ... done
[08:08:35.673] value() for Future (<unnamed-22>) ...
[08:08:35.673] | run() for ‘Future’ (<unnamed-22>) ...
[08:08:35.674] | : state: ‘created’
[08:08:35.674] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.674] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.674] | : Using MulticoreFutureBackend ...
[08:08:35.674] | : . Number of futures since start: 9 (9 created, 9 launched, 9 finished)
[08:08:35.674] | : . Launching futures ...
[08:08:35.674] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:35.674] | : . ' , getFutureData() ...
[08:08:35.675] | : . ' , ; getFutureCore() ...
[08:08:35.675] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:35.675] | : . ' , ; getFutureCore() ... done
[08:08:35.675] | : . ' , ; getFutureCapture() ...
[08:08:35.675] | : . ' , ; getFutureCapture() ... done
[08:08:35.675] | : . ' , ; getFutureContext() ...
[08:08:35.675] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.675] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:35.675] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.675] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:35.676] | : . ' , ; getFutureContext() ... done
[08:08:35.676] | : . ' , getFutureData() ... done
[08:08:35.676] | : . ' , requestCore(..., workers = 2) ...
[08:08:35.676] | : . ' , requestCore(..., workers = 2) ... done
[08:08:35.678] | : . ' , MulticoreFuture started
[08:08:35.679] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:35.679] | : . Launching futures ... done
[08:08:35.679] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:35.680] | : Using MulticoreFutureBackend ... done
[08:08:35.680] | run() for ‘Future’ (<unnamed-22>) ... done
[08:08:35.680] | result() for MulticoreFuture ...
[08:08:35.682] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.682] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:35.683] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.683] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.683] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:35.684] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:35.684] | : . ' , ; ` | New stack:
[08:08:35.684] | : . ' , ; ` | List of 1
[08:08:35.684] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.684] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.684] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:35.684] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.684] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.684] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.684] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.684] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.689] | : . ' , ; ` | Old stack:
[08:08:35.689] | : . ' , ; ` | List of 1
[08:08:35.689] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.689] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.689] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.689] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:35.689] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.689] | : . ' , ; ` |     ...)  
[08:08:35.689] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.689] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.689] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:35.689] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.689] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.689] | : . ' , ; ` |     ...)  
[08:08:35.689] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.689] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.695] | : . ' , ; ` | Not identical
[08:08:35.695] | : . ' , ; ` | all.equal() for future ...
[08:08:35.695] | : . ' , ; ` | : List of 2
[08:08:35.695] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.695] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.695] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:35.695] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.695] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.695] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.695] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.695] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.695] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.695] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.695] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.695] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.695] | : . ' , ; ` | :     ...)  
[08:08:35.695] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.695] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.695] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:35.695] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.695] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.695] | : . ' , ; ` | :     ...)  
[08:08:35.695] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.706] | : . ' , ; ` | : Formals differ
[08:08:35.706] | : . ' , ; ` | all.equal() for future ... done
[08:08:35.707] | : . ' , ; ` | Future strategies differ at level 1
[08:08:35.707] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:35.707] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:35.707] | : . ' , ; ` List of future strategies:
[08:08:35.707] | : . ' , ; ` 1. sequential:
[08:08:35.707] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:35.707] | : . ' , ; `    - tweaked: FALSE
[08:08:35.707] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.708] | : . ' , ; ` List of 1
[08:08:35.708] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.708] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.708] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:35.708] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.708] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.708] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.708] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.708] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.712] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:35.712] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:35.712] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.712] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:35.712] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.712] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.712] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:35.712] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.712] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.712] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.712] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.714] | : . ' , ; ` | : init: TRUE
[08:08:35.714] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:35.714] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:35.715] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:35.715] | : . ' , ; ` | : .  list()
[08:08:35.715] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:35.715] | : . ' , ; ` | : .  list()
[08:08:35.715] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:35.715] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:35.715] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:35.715] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:35.716] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:35.717] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:35.717] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:35.717] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.717] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:35.717] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:35.717] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.717] | : . ' , assign_globals() ...
[08:08:35.718] | : . ' , List of 1
[08:08:35.718] | : . ' ,  $ x: list()
[08:08:35.718] | : . ' ,  - attr(*, "where")=List of 1
[08:08:35.718] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:35.718] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:35.718] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:35.718] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:35.718] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:35.720] | : . ' , - copied ‘x’ to environment
[08:08:35.720] | : . ' , assign_globals() ... done
[08:08:35.722] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.722] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.723] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:35.723] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:35.723] | : . ' , ; ` | : New stack:
[08:08:35.723] | : . ' , ; ` | : List of 1
[08:08:35.723] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.723] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.723] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.723] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.723] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.723] | : . ' , ; ` | :     ...)  
[08:08:35.723] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.723] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.723] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:35.723] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.723] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.723] | : . ' , ; ` | :     ...)  
[08:08:35.723] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.723] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.728] | : . ' , ; ` | : Old stack:
[08:08:35.728] | : . ' , ; ` | : List of 1
[08:08:35.728] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.728] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.728] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.728] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.728] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.728] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.728] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.728] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6df2a98> 
[08:08:35.728] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.728] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.728] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.731] | : . ' , ; ` | : Not identical
[08:08:35.731] | : . ' , ; ` | : all.equal() for future ...
[08:08:35.732] | : . ' , ; ` | : . List of 2
[08:08:35.732] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.732] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.732] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.732] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:35.732] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.732] | : . ' , ; ` | : .     ...)  
[08:08:35.732] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.732] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.732] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:35.732] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.732] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.732] | : . ' , ; ` | : .     ...)  
[08:08:35.732] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.732] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.732] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.732] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:35.732] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.732] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.732] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.732] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.732] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6df2a98> 
[08:08:35.732] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.732] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.738] | : . ' , ; ` | : . Formals differ
[08:08:35.738] | : . ' , ; ` | : all.equal() for future ... done
[08:08:35.738] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:35.738] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:35.738] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:35.738] | : . ' , ; ` | List of future strategies:
[08:08:35.738] | : . ' , ; ` | 1. multicore:
[08:08:35.738] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:35.738] | : . ' , ; ` |    - tweaked: FALSE
[08:08:35.738] | : . ' , ; ` |    - call: plan(strategy)
[08:08:35.739] | : . ' , ; ` | List of 1
[08:08:35.739] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.739] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.739] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.739] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:35.739] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.739] | : . ' , ; ` |     ...)  
[08:08:35.739] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.739] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.739] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:35.739] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.739] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.739] | : . ' , ; ` |     ...)  
[08:08:35.739] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.739] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.742] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:35.742] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:35.742] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.742] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.743] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:35.743] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:35.743] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.743] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.744] | : readImmediateCondition() ...
[08:08:35.744] | : . Path: ‘/tmp/Rtmp2i29t9/.future/immediateConditions’
[08:08:35.744] | : . Number of RDS files: 0
[08:08:35.745] | : . Returned conditions set:
[08:08:35.745] | : .  list()
[08:08:35.745] | : readImmediateCondition() ... done
[08:08:35.746] | : result() for MulticoreFuture ...
[08:08:35.746] | : result() for MulticoreFuture ... done
[08:08:35.746] | : signalConditions() ...
[08:08:35.746] | : . include = ‘immediateCondition’
[08:08:35.746] | : . exclude = 
[08:08:35.746] | : . resignal = FALSE
[08:08:35.747] | : . Number of conditions: 6
[08:08:35.747] | : .  int 6
[08:08:35.747] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.748] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.748] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.748] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.748] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.748] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.748] | : signalConditions() ... done
[08:08:35.748] | result() for MulticoreFuture ... done
[08:08:35.749] | result() for MulticoreFuture ...
[08:08:35.749] | result() for MulticoreFuture ... done
[08:08:35.749] | signalConditions() ...
[08:08:35.749] | : include = ‘immediateCondition’
[08:08:35.749] | : exclude = 
[08:08:35.749] | : resignal = FALSE
[08:08:35.749] | : Number of conditions: 6
[08:08:35.750] | :  int 6
[08:08:35.750] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.750] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.750] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.751] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.751] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.751] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.751] | signalConditions() ... done
[08:08:35.751] | relay stdout ...
[08:08:35.751] | relay stdout ... done
[08:08:35.751] | check for misuse ...
[08:08:35.752] | check for misuse ... done
[08:08:35.752] | relay conditions ...
[08:08:35.752] | : Future state: ‘finished’
[08:08:35.752] | : result() for MulticoreFuture ...
[08:08:35.752] | : result() for MulticoreFuture ... done
[08:08:35.752] | : signalConditions() ...
[08:08:35.752] | : . include = ‘condition’
[08:08:35.753] | : . exclude = ‘immediateCondition’
[08:08:35.753] | : . resignal = TRUE
[08:08:35.753] | : . Number of conditions: 6
[08:08:35.753] | : .  int 6
[08:08:35.753] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.754] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.679] | : . ' , attachPackages() ...
[08:08:35.754] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.754] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.680] | : . ' , ; packages: [n=1] ‘future’
[08:08:35.754] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.754] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.680] | : . ' , attachPackages() ... done
[08:08:35.754] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.755] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.680] | : . ' , attachPackages() ...
[08:08:35.755] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.755] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.681] | : . ' , ; packages: [n=0] 
[08:08:35.755] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.755] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.681] | : . ' , attachPackages() ... done
[08:08:35.755] | : signalConditions() ... done
[08:08:35.756] | relay conditions ... done
[08:08:35.756] value() for Future (<unnamed-22>) ... done
$a
[1] 1

[08:08:35.756] future(..., label = NULL) ...
[08:08:35.756] | lazy: FALSE
[08:08:35.756] | stdout: TRUE
[08:08:35.757] | conditions: [n=1] ‘condition’
[08:08:35.757] | gc: FALSE
[08:08:35.757] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:35.757] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:35.757] | : Searching for globals ...
[08:08:35.774] | : . globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:35.775] | : Searching for globals ... done
[08:08:35.775] | : Resolving globals: TRUE
[08:08:35.775] | : Resolving any globals that are futures ...
[08:08:35.775] | : . globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:35.775] | : Resolving any globals that are futures ... done
[08:08:35.775] | : Search for packages associated with the globals ...
[08:08:35.775] | : . Packages associated with globals: [1] ‘base’
[08:08:35.776] | : . Packages: [1] ‘base’
[08:08:35.776] | : Search for packages associated with the globals ... done
[08:08:35.776] | : Resolving futures part of globals (recursively) ...
[08:08:35.776] | : . resolve() for FutureGlobals ...
[08:08:35.776] | : . ' recursive: 99
[08:08:35.776] | : . ' Number of elements: 1
[08:08:35.777] | : . ' elements: ‘x’
[08:08:35.777] | : . ' 'obj' is list
[08:08:35.777] | : . ' resolve(obj, ...) ...
[08:08:35.777] | : . ' , resolve() for list ...
[08:08:35.777] | : . ' , ; recursive: 98
[08:08:35.777] | : . ' , ; Number of elements: 0
[08:08:35.777] | : . ' , resolve() for list ... done
[08:08:35.777] | : . ' resolve(obj, ...) ... done
[08:08:35.777] | : . ' resolved() for list ...
[08:08:35.778] | : . ' , Number of elements: 0
[08:08:35.778] | : . ' , Number of futures: 0
[08:08:35.778] | : . ' resolved() for list ... done
[08:08:35.778] | : . ' length: 0 (resolved future 1)
[08:08:35.778] | : . resolve() for FutureGlobals ... done
[08:08:35.778] | : . globals: [1] ‘x’
[08:08:35.778] | : Resolving futures part of globals (recursively) ... done
[08:08:35.778] | : Packages after dropping 'base': [0] 
[08:08:35.778] | : globals: [1] ‘x’
[08:08:35.779] | : packages: [0] 
[08:08:35.779] | getGlobalsAndPackages() ... done
[08:08:35.779] | run() for ‘Future’ (<unnamed-23>) ...
[08:08:35.779] | : state: ‘created’
[08:08:35.780] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.781] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.781] | : Using MulticoreFutureBackend ...
[08:08:35.781] | : . Number of futures since start: 10 (10 created, 10 launched, 10 finished)
[08:08:35.781] | : . Launching futures ...
[08:08:35.781] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:35.781] | : . ' , getFutureData() ...
[08:08:35.781] | : . ' , ; getFutureCore() ...
[08:08:35.781] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:35.782] | : . ' , ; getFutureCore() ... done
[08:08:35.782] | : . ' , ; getFutureCapture() ...
[08:08:35.782] | : . ' , ; getFutureCapture() ... done
[08:08:35.782] | : . ' , ; getFutureContext() ...
[08:08:35.782] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.782] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:35.782] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.782] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:35.783] | : . ' , ; getFutureContext() ... done
[08:08:35.783] | : . ' , getFutureData() ... done
[08:08:35.783] | : . ' , requestCore(..., workers = 2) ...
[08:08:35.783] | : . ' , requestCore(..., workers = 2) ... done
[08:08:35.785] | : . ' , MulticoreFuture started
[08:08:35.786] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:35.787] | : . Launching futures ... done
[08:08:35.787] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:35.788] | : Using MulticoreFutureBackend ... done
[08:08:35.788] | run() for ‘Future’ (<unnamed-23>) ... done
[08:08:35.788] future(..., label = NULL) ... done
[08:08:35.788] value() for MulticoreFuture (<unnamed-23>) ...
[08:08:35.789] | result() for MulticoreFuture ...
[08:08:35.789] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.790] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:35.790] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.790] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.791] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:35.791] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:35.791] | : . ' , ; ` | New stack:
[08:08:35.792] | : . ' , ; ` | List of 1
[08:08:35.792] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.792] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.792] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:35.792] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.792] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.792] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.792] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.792] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.797] | : . ' , ; ` | Old stack:
[08:08:35.797] | : . ' , ; ` | List of 1
[08:08:35.797] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.797] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.797] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.797] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:35.797] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.797] | : . ' , ; ` |     ...)  
[08:08:35.797] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.797] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.797] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:35.797] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.797] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.797] | : . ' , ; ` |     ...)  
[08:08:35.797] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.797] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.802] | : . ' , ; ` | Not identical
[08:08:35.802] | : . ' , ; ` | all.equal() for future ...
[08:08:35.802] | : . ' , ; ` | : List of 2
[08:08:35.802] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.802] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.802] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:35.802] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.802] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.802] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.802] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.802] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.802] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.802] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.802] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.802] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.802] | : . ' , ; ` | :     ...)  
[08:08:35.802] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.802] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.802] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:35.802] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.802] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.802] | : . ' , ; ` | :     ...)  
[08:08:35.802] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.810] | : . ' , ; ` | : Formals differ
[08:08:35.810] | : . ' , ; ` | all.equal() for future ... done
[08:08:35.810] | : . ' , ; ` | Future strategies differ at level 1
[08:08:35.810] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:35.811] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:35.811] | : . ' , ; ` List of future strategies:
[08:08:35.811] | : . ' , ; ` 1. sequential:
[08:08:35.811] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:35.811] | : . ' , ; `    - tweaked: FALSE
[08:08:35.811] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.814] | : . ' , ; ` List of 1
[08:08:35.814] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.814] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.814] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:35.814] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.814] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.814] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.814] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.814] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.818] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:35.818] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:35.819] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.819] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:35.819] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.819] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.819] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:35.819] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.819] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.819] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.819] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.821] | : . ' , ; ` | : init: TRUE
[08:08:35.821] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:35.821] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:35.821] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:35.821] | : . ' , ; ` | : .  list()
[08:08:35.822] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:35.822] | : . ' , ; ` | : .  list()
[08:08:35.822] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:35.822] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:35.822] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:35.822] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:35.823] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:35.823] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:35.824] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:35.824] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.824] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:35.824] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:35.824] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.824] | : . ' , assign_globals() ...
[08:08:35.824] | : . ' , List of 1
[08:08:35.824] | : . ' ,  $ x: list()
[08:08:35.824] | : . ' ,  - attr(*, "where")=List of 1
[08:08:35.824] | : . ' ,   ..$ x:<environment: R_GlobalEnv> 
[08:08:35.824] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:35.824] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:35.824] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:35.824] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:35.827] | : . ' , - copied ‘x’ to environment
[08:08:35.827] | : . ' , assign_globals() ... done
[08:08:35.829] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.829] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.829] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:35.829] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:35.830] | : . ' , ; ` | : New stack:
[08:08:35.830] | : . ' , ; ` | : List of 1
[08:08:35.830] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.830] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.830] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.830] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.830] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.830] | : . ' , ; ` | :     ...)  
[08:08:35.830] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.830] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.830] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:35.830] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.830] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.830] | : . ' , ; ` | :     ...)  
[08:08:35.830] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.830] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.833] | : . ' , ; ` | : Old stack:
[08:08:35.833] | : . ' , ; ` | : List of 1
[08:08:35.833] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.833] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.833] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.833] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.833] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.833] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.833] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.833] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a56876a0> 
[08:08:35.833] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.833] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.833] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.840] | : . ' , ; ` | : Not identical
[08:08:35.840] | : . ' , ; ` | : all.equal() for future ...
[08:08:35.840] | : . ' , ; ` | : . List of 2
[08:08:35.840] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.840] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.840] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.840] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:35.840] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.840] | : . ' , ; ` | : .     ...)  
[08:08:35.840] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.840] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.840] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:35.840] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.840] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.840] | : . ' , ; ` | : .     ...)  
[08:08:35.840] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.840] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.840] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.840] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:35.840] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.840] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.840] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.840] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.840] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a56876a0> 
[08:08:35.840] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.840] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.846] | : . ' , ; ` | : . Formals differ
[08:08:35.846] | : . ' , ; ` | : all.equal() for future ... done
[08:08:35.846] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:35.846] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:35.846] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:35.846] | : . ' , ; ` | List of future strategies:
[08:08:35.846] | : . ' , ; ` | 1. multicore:
[08:08:35.846] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:35.846] | : . ' , ; ` |    - tweaked: FALSE
[08:08:35.846] | : . ' , ; ` |    - call: plan(strategy)
[08:08:35.847] | : . ' , ; ` | List of 1
[08:08:35.847] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.847] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.847] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.847] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:35.847] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.847] | : . ' , ; ` |     ...)  
[08:08:35.847] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.847] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.847] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:35.847] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.847] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.847] | : . ' , ; ` |     ...)  
[08:08:35.847] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.847] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.850] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:35.850] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:35.850] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.850] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.850] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:35.851] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:35.851] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.851] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.851] | : readImmediateCondition() ...
[08:08:35.852] | : . Path: ‘/tmp/Rtmp2i29t9/.future/immediateConditions’
[08:08:35.852] | : . Number of RDS files: 0
[08:08:35.852] | : . Returned conditions set:
[08:08:35.852] | : .  list()
[08:08:35.853] | : readImmediateCondition() ... done
[08:08:35.854] | : result() for MulticoreFuture ...
[08:08:35.854] | : result() for MulticoreFuture ... done
[08:08:35.854] | : signalConditions() ...
[08:08:35.854] | : . include = ‘immediateCondition’
[08:08:35.854] | : . exclude = 
[08:08:35.854] | : . resignal = FALSE
[08:08:35.854] | : . Number of conditions: 6
[08:08:35.855] | : .  int 6
[08:08:35.855] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.855] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.856] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.856] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.856] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.856] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.856] | : signalConditions() ... done
[08:08:35.856] | result() for MulticoreFuture ... done
[08:08:35.857] | result() for MulticoreFuture ...
[08:08:35.857] | result() for MulticoreFuture ... done
[08:08:35.857] | signalConditions() ...
[08:08:35.857] | : include = ‘immediateCondition’
[08:08:35.857] | : exclude = 
[08:08:35.857] | : resignal = FALSE
[08:08:35.857] | : Number of conditions: 6
[08:08:35.857] | :  int 6
[08:08:35.858] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.858] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.858] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.858] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.859] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.859] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.859] | signalConditions() ... done
[08:08:35.859] | relay stdout ...
[08:08:35.859] | relay stdout ... done
[08:08:35.859] | check for misuse ...
[08:08:35.859] | check for misuse ... done
[08:08:35.860] | relay conditions ...
[08:08:35.860] | : Future state: ‘finished’
[08:08:35.860] | : result() for MulticoreFuture ...
[08:08:35.860] | : result() for MulticoreFuture ... done
[08:08:35.860] | : signalConditions() ...
[08:08:35.860] | : . include = ‘condition’
[08:08:35.860] | : . exclude = ‘immediateCondition’
[08:08:35.860] | : . resignal = TRUE
[08:08:35.861] | : . Number of conditions: 6
[08:08:35.861] | : .  int 6
[08:08:35.861] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.861] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.786] | : . ' , attachPackages() ...
[08:08:35.862] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.862] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.787] | : . ' , ; packages: [n=1] ‘future’
[08:08:35.862] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.862] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.788] | : . ' , attachPackages() ... done
[08:08:35.862] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.862] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.788] | : . ' , attachPackages() ...
[08:08:35.863] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.863] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.788] | : . ' , ; packages: [n=0] 
[08:08:35.863] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.863] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.788] | : . ' , attachPackages() ... done
[08:08:35.863] | : signalConditions() ... done
[08:08:35.863] | relay conditions ... done
[08:08:35.863] value() for MulticoreFuture (<unnamed-23>) ... done
$a
[1] 1

[08:08:35.864] future(..., label = NULL) ...
[08:08:35.864] | lazy: FALSE
[08:08:35.864] | stdout: TRUE
[08:08:35.864] | conditions: [n=1] ‘condition’
[08:08:35.864] | gc: FALSE
[08:08:35.864] | earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:35.865] | getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:35.865] | : Searching for globals ...
[08:08:35.882] | : . globals found: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[08:08:35.882] | : Searching for globals ... done
[08:08:35.882] | : Resolving globals: TRUE
[08:08:35.882] | : Resolving any globals that are futures ...
[08:08:35.882] | : . globals: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[08:08:35.883] | : Resolving any globals that are futures ... done
[08:08:35.883] | : Search for packages associated with the globals ...
[08:08:35.883] | : . Packages associated with globals: [1] ‘base’
[08:08:35.883] | : . Packages: [1] ‘base’
[08:08:35.883] | : Search for packages associated with the globals ... done
[08:08:35.883] | : Resolving futures part of globals (recursively) ...
[08:08:35.884] | : . resolve() for FutureGlobals ...
[08:08:35.884] | : . ' recursive: 99
[08:08:35.884] | : . ' Number of elements: 2
[08:08:35.884] | : . ' elements: ‘x’, ‘name’
[08:08:35.884] | : . ' 'obj' is list
[08:08:35.884] | : . ' resolve(obj, ...) ...
[08:08:35.884] | : . ' , resolve() for list ...
[08:08:35.885] | : . ' , ; recursive: 98
[08:08:35.885] | : . ' , ; Number of elements: 0
[08:08:35.885] | : . ' , resolve() for list ... done
[08:08:35.885] | : . ' resolve(obj, ...) ... done
[08:08:35.885] | : . ' resolved() for list ...
[08:08:35.885] | : . ' , Number of elements: 0
[08:08:35.885] | : . ' , Number of futures: 0
[08:08:35.885] | : . ' resolved() for list ... done
[08:08:35.885] | : . ' length: 1 (resolved future 1)
[08:08:35.885] | : . ' 'obj' is atomic
[08:08:35.886] | : . ' length: 0 (resolved future 2)
[08:08:35.886] | : . resolve() for FutureGlobals ... done
[08:08:35.886] | : . globals: [2] ‘x’, ‘name’
[08:08:35.886] | : Resolving futures part of globals (recursively) ... done
[08:08:35.886] | : Packages after dropping 'base': [0] 
[08:08:35.886] | : globals: [2] ‘x’, ‘name’
[08:08:35.886] | : packages: [0] 
[08:08:35.886] | getGlobalsAndPackages() ... done
[08:08:35.887] | run() for ‘Future’ (<unnamed-24>) ...
[08:08:35.887] | : state: ‘created’
[08:08:35.887] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.887] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.887] | : Using MulticoreFutureBackend ...
[08:08:35.887] | : . Number of futures since start: 11 (11 created, 11 launched, 11 finished)
[08:08:35.887] | : . Launching futures ...
[08:08:35.888] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:35.888] | : . ' , getFutureData() ...
[08:08:35.888] | : . ' , ; getFutureCore() ...
[08:08:35.888] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:35.888] | : . ' , ; getFutureCore() ... done
[08:08:35.888] | : . ' , ; getFutureCapture() ...
[08:08:35.888] | : . ' , ; getFutureCapture() ... done
[08:08:35.891] | : . ' , ; getFutureContext() ...
[08:08:35.892] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.892] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:35.892] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.892] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:35.892] | : . ' , ; getFutureContext() ... done
[08:08:35.892] | : . ' , getFutureData() ... done
[08:08:35.893] | : . ' , requestCore(..., workers = 2) ...
[08:08:35.893] | : . ' , requestCore(..., workers = 2) ... done
[08:08:35.895] | : . ' , MulticoreFuture started
[08:08:35.896] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:35.897] | : . Launching futures ... done
[08:08:35.897] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:35.898] | : Using MulticoreFutureBackend ... done
[08:08:35.898] | run() for ‘Future’ (<unnamed-24>) ... done
[08:08:35.899] future(..., label = NULL) ... done
[08:08:35.899] value() for MulticoreFuture (<unnamed-24>) ...
[08:08:35.900] | result() for MulticoreFuture ...
[08:08:35.901] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.901] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:35.901] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.902] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.903] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:35.903] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:35.903] | : . ' , ; ` | New stack:
[08:08:35.904] | : . ' , ; ` | List of 1
[08:08:35.904] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.904] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.904] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:35.904] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.904] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.904] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.904] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.904] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.910] | : . ' , ; ` | Old stack:
[08:08:35.910] | : . ' , ; ` | List of 1
[08:08:35.910] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.910] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.910] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.910] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:35.910] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.910] | : . ' , ; ` |     ...)  
[08:08:35.910] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.910] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.910] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:35.910] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.910] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.910] | : . ' , ; ` |     ...)  
[08:08:35.910] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.910] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.915] | : . ' , ; ` | Not identical
[08:08:35.915] | : . ' , ; ` | all.equal() for future ...
[08:08:35.915] | : . ' , ; ` | : List of 2
[08:08:35.915] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.915] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.915] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:35.915] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.915] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.915] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.915] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.915] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.915] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.915] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.915] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.915] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.915] | : . ' , ; ` | :     ...)  
[08:08:35.915] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.915] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.915] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:35.915] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.915] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.915] | : . ' , ; ` | :     ...)  
[08:08:35.915] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.922] | : . ' , ; ` | : Formals differ
[08:08:35.922] | : . ' , ; ` | all.equal() for future ... done
[08:08:35.923] | : . ' , ; ` | Future strategies differ at level 1
[08:08:35.923] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:35.923] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:35.923] | : . ' , ; ` List of future strategies:
[08:08:35.923] | : . ' , ; ` 1. sequential:
[08:08:35.923] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:35.923] | : . ' , ; `    - tweaked: FALSE
[08:08:35.923] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.924] | : . ' , ; ` List of 1
[08:08:35.924] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.924] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.924] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:35.924] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.924] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.924] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.924] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.924] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.928] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:35.929] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:35.929] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.929] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:35.929] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.929] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.929] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:35.929] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.929] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.929] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.929] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.932] | : . ' , ; ` | : init: TRUE
[08:08:35.932] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:35.932] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:35.932] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:35.932] | : . ' , ; ` | : .  list()
[08:08:35.933] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:35.933] | : . ' , ; ` | : .  list()
[08:08:35.933] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:35.933] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:35.933] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:35.933] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:35.934] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:35.934] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:35.935] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:35.935] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.935] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:35.935] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:35.935] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.935] | : . ' , assign_globals() ...
[08:08:35.935] | : . ' , List of 2
[08:08:35.935] | : . ' ,  $ x   : list()
[08:08:35.935] | : . ' ,  $ name: chr "a"
[08:08:35.935] | : . ' ,  - attr(*, "where")=List of 2
[08:08:35.935] | : . ' ,   ..$ x   :<environment: R_GlobalEnv> 
[08:08:35.935] | : . ' ,   ..$ name:<environment: R_GlobalEnv> 
[08:08:35.935] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:35.935] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:08:35.935] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:35.935] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:35.938] | : . ' , - copied ‘x’ to environment
[08:08:35.939] | : . ' , - copied ‘name’ to environment
[08:08:35.939] | : . ' , assign_globals() ... done
[08:08:35.941] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.941] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:35.941] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:35.941] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:35.941] | : . ' , ; ` | : New stack:
[08:08:35.942] | : . ' , ; ` | : List of 1
[08:08:35.942] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.942] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.942] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.942] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.942] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.942] | : . ' , ; ` | :     ...)  
[08:08:35.942] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.942] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.942] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:35.942] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.942] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.942] | : . ' , ; ` | :     ...)  
[08:08:35.942] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.942] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.945] | : . ' , ; ` | : Old stack:
[08:08:35.945] | : . ' , ; ` | : List of 1
[08:08:35.945] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.945] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.945] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:35.945] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.945] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.945] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.945] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.945] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a60350a8> 
[08:08:35.945] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.945] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.945] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.949] | : . ' , ; ` | : Not identical
[08:08:35.949] | : . ' , ; ` | : all.equal() for future ...
[08:08:35.950] | : . ' , ; ` | : . List of 2
[08:08:35.950] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.950] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.950] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.950] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:35.950] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.950] | : . ' , ; ` | : .     ...)  
[08:08:35.950] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.950] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.950] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:35.950] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.950] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.950] | : . ' , ; ` | : .     ...)  
[08:08:35.950] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.950] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.950] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:35.950] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:35.950] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.950] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.950] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.950] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:35.950] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a60350a8> 
[08:08:35.950] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:35.950] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:35.956] | : . ' , ; ` | : . Formals differ
[08:08:35.956] | : . ' , ; ` | : all.equal() for future ... done
[08:08:35.956] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:35.956] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:35.956] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:35.956] | : . ' , ; ` | List of future strategies:
[08:08:35.956] | : . ' , ; ` | 1. multicore:
[08:08:35.956] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:35.956] | : . ' , ; ` |    - tweaked: FALSE
[08:08:35.956] | : . ' , ; ` |    - call: plan(strategy)
[08:08:35.957] | : . ' , ; ` | List of 1
[08:08:35.957] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.957] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.957] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.957] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:35.957] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.957] | : . ' , ; ` |     ...)  
[08:08:35.957] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.957] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.957] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:35.957] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.957] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.957] | : . ' , ; ` |     ...)  
[08:08:35.957] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.957] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.960] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:35.960] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:35.960] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.960] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.961] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:35.961] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:35.961] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.961] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:35.962] | : readImmediateCondition() ...
[08:08:35.962] | : . Path: ‘/tmp/Rtmp2i29t9/.future/immediateConditions’
[08:08:35.963] | : . Number of RDS files: 0
[08:08:35.963] | : . Returned conditions set:
[08:08:35.963] | : .  list()
[08:08:35.964] | : readImmediateCondition() ... done
[08:08:35.964] | : result() for MulticoreFuture ...
[08:08:35.965] | : result() for MulticoreFuture ... done
[08:08:35.965] | : signalConditions() ...
[08:08:35.965] | : . include = ‘immediateCondition’
[08:08:35.965] | : . exclude = 
[08:08:35.965] | : . resignal = FALSE
[08:08:35.966] | : . Number of conditions: 6
[08:08:35.966] | : .  int 6
[08:08:35.967] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.967] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.967] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.967] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.967] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.967] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.967] | : signalConditions() ... done
[08:08:35.968] | result() for MulticoreFuture ... done
[08:08:35.968] | result() for MulticoreFuture ...
[08:08:35.968] | result() for MulticoreFuture ... done
[08:08:35.968] | signalConditions() ...
[08:08:35.968] | : include = ‘immediateCondition’
[08:08:35.968] | : exclude = 
[08:08:35.968] | : resignal = FALSE
[08:08:35.969] | : Number of conditions: 6
[08:08:35.969] | :  int 6
[08:08:35.969] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.969] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.969] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.970] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.970] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.970] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.970] | signalConditions() ... done
[08:08:35.970] | relay stdout ...
[08:08:35.970] | relay stdout ... done
[08:08:35.970] | check for misuse ...
[08:08:35.971] | check for misuse ... done
[08:08:35.971] | relay conditions ...
[08:08:35.971] | : Future state: ‘finished’
[08:08:35.971] | : result() for MulticoreFuture ...
[08:08:35.971] | : result() for MulticoreFuture ... done
[08:08:35.971] | : signalConditions() ...
[08:08:35.971] | : . include = ‘condition’
[08:08:35.971] | : . exclude = ‘immediateCondition’
[08:08:35.972] | : . resignal = TRUE
[08:08:35.972] | : . Number of conditions: 6
[08:08:35.972] | : .  int 6
[08:08:35.972] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.972] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.896] | : . ' , attachPackages() ...
[08:08:35.973] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.973] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.897] | : . ' , ; packages: [n=1] ‘future’
[08:08:35.973] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.973] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.898] | : . ' , attachPackages() ... done
[08:08:35.973] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.973] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.899] | : . ' , attachPackages() ...
[08:08:35.973] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.974] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.899] | : . ' , ; packages: [n=0] 
[08:08:35.974] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:35.974] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:35.899] | : . ' , attachPackages() ... done
[08:08:35.974] | : signalConditions() ... done
[08:08:35.974] | relay conditions ... done
[08:08:35.974] value() for MulticoreFuture (<unnamed-24>) ... done
$a
[1] 1

- plan('multisession') ...
[08:08:35.975] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.975] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:35.975] | : all.equal() for FutureStrategyList ...
[08:08:35.975] | : . New stack:
[08:08:35.975] | : . List of 1
[08:08:35.975] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:35.975] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.975] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:35.975] | : .   ..- attr(*, "init")= logi TRUE
[08:08:35.975] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:35.975] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:35.975] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:35.975] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:35.975] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:08:35.975] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:35.975] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.979] | : . Old stack:
[08:08:35.979] | : . List of 1
[08:08:35.979] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.979] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.979] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.979] | : .   ..- attr(*, "init")= chr "done"
[08:08:35.979] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.979] | : .     ...)  
[08:08:35.979] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.979] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.979] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:35.979] | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.979] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.979] | : .     ...)  
[08:08:35.979] | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.979] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.983] | : . Not identical
[08:08:35.983] | : . all.equal() for future ...
[08:08:35.983] | : . ' List of 2
[08:08:35.983] | : . '  $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:35.983] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.983] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:35.983] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:35.983] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:35.983] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:35.983] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:35.983] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:35.983] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:08:35.983] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:35.983] | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:35.983] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:35.983] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:35.983] | : . '   ..- attr(*, "init")= chr "done"
[08:08:35.983] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.983] | : . '     ...)  
[08:08:35.983] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.983] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.983] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:35.983] | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f3a6cbc4a8> 
[08:08:35.983] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:35.983] | : . '     ...)  
[08:08:35.983] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:35.992] | : . ' Formals differ
[08:08:35.992] | : . all.equal() for future ... done
[08:08:35.992] | : . Future strategies differ at level 1
[08:08:35.992] | : all.equal() for FutureStrategyList ... done
[08:08:35.992] | : plan(): Setting new future backend stack:
[08:08:35.992] | : List of future strategies:
[08:08:35.992] | : 1. multisession:
[08:08:35.992] | :    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:35.992] | :    - tweaked: FALSE
[08:08:35.992] | :    - call: plan(strategy)
[08:08:35.993] | : List of 1
[08:08:35.993] | :  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:35.993] | :     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.993] | :   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:35.993] | :   ..- attr(*, "init")= logi TRUE
[08:08:35.993] | :   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:35.993] | :     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:35.993] | :   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:35.993] | :   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:35.993] | :   ..- attr(*, "untweakable")= chr "persistent"
[08:08:35.993] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:35.993] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:35.996] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:35.996] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:35.996] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:35.996] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:35.997] | : . Legacy shutdown of cluster workers ...
[08:08:35.997] | : . ' Stopping existing cluster ...
[08:08:35.997] | : . ' , No pre-existing cluster. Skipping
[08:08:35.997] | : . ' Stopping existing cluster ... done
[08:08:35.997] | : . Legacy shutdown of cluster workers ... done
[08:08:35.997] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:35.998] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:35.998] | : . function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:35.998] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:35.998] | : .  - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:35.998] | : .  - attr(*, "init")= logi TRUE
[08:08:35.998] | : .  - attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:35.998] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:35.998] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:35.998] | : .  - attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:35.998] | : .  - attr(*, "untweakable")= chr "persistent"
[08:08:35.998] | : .  - attr(*, "call")= language plan(strategy)
[08:08:36.000] | : . init: TRUE
[08:08:36.000] | : . makeFutureBackend(<multisession>) ...
[08:08:36.000] | : . ' Backend function: <‘NULL’>
[08:08:36.000] | : . ' Evaluator tweak arguments: [n=0]
[08:08:36.001] | : . '  list()
[08:08:36.001] | : . ' Evaluator formal arguments: [n=4]
[08:08:36.001] | : . '  list()
[08:08:36.001] | : . ' Backend factory arguments: [n=4]
[08:08:36.001] | : . ' Dotted pair list of 4
[08:08:36.001] | : . '  $ workers     : language availableCores()
[08:08:36.001] | : . '  $ rscript_libs: language .libPaths()
[08:08:36.001] | : . '  $ gc          : logi FALSE
[08:08:36.001] | : . '  $ earlySignal : logi FALSE
[08:08:36.003] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ...
[08:08:36.003] | : . ' , Arguments:
[08:08:36.003] | : . ' , List of 5
[08:08:36.003] | : . ' ,  $ workers     : Named int 2
[08:08:36.003] | : . ' ,   ..- attr(*, "names")= chr "mc.cores"
[08:08:36.003] | : . ' ,  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:36.003] | : . ' ,  $ interrupts  : logi TRUE
[08:08:36.003] | : . ' ,  $ gc          : logi FALSE
[08:08:36.003] | : . ' ,  $ earlySignal : logi FALSE
[08:08:36.009] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[08:08:36.009] | : . ' , ; workers: 2
[08:08:36.009] | : . ' , ; getCluster() ...
[08:08:36.009] | : . ' , ; getCluster() ... done
[08:08:36.009] | : . ' , ; Stopping existing cluster ...
[08:08:36.009] | : . ' , ; ` No pre-existing cluster. Skipping
[08:08:36.009] | : . ' , ; Stopping existing cluster ... done
[08:08:36.010] | : . ' , ; Starting new cluster ...
[08:08:36.010] | : . ' , ; ` makeCluster(workers, ...) ...
[08:08:36.010] | : . ' , ; ` | Arguments:
[08:08:36.010] | : . ' , ; ` | List of 2
[08:08:36.010] | : . ' , ; ` |  $             : int 2
[08:08:36.010] | : . ' , ; ` |  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:36.011] | : . ' , ; ` | .makeCluster() ...
[08:08:36.011] | : . ' , ; ` | : workers: ‘2’
[08:08:36.011] | : . ' , ; ` | : R_FUTURE_PLAN: NA
[08:08:36.011] | : . ' , ; ` | : parallelly::makeClusterPSOCK() arguments:
[08:08:36.012] | : . ' , ; ` | : List of 2
[08:08:36.012] | : . ' , ; ` | :  $             : int 2
[08:08:36.012] | : . ' , ; ` | :  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:36.535] | : . ' , ; ` | : Generated cluster UUID
[08:08:36.535] | : . ' , ; ` | : Cluster UUID: ‘3bd062d8b9190b31ad6b5a00e5612964’
[08:08:36.535] | : . ' , ; ` | : Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:36.538] | : . ' , ; ` | .makeCluster() ... done
[08:08:36.538] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:36.539] | : . ' , ; ` makeCluster(workers, ...) ... done
[08:08:36.539] | : . ' , ; ` Number of workers: 2
[08:08:36.539] | : . ' , ; ` Workers UUID: ‘3bd062d8b9190b31ad6b5a00e5612964’
[08:08:36.540] | : . ' , ; Starting new cluster ... done
[08:08:36.540] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[08:08:36.540] | : . ' , Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:36.540] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ... done
[08:08:36.540] | : . makeFutureBackend(<multisession>) ... done
[08:08:36.540] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:36.540] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:36.541] | : . plan(): nbrOfWorkers() = 2
[08:08:36.541] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:36.541] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:36.541] | future(..., label = NULL) ...
[08:08:36.541] | : lazy: FALSE
[08:08:36.541] | : stdout: TRUE
[08:08:36.541] | : conditions: [n=1] ‘condition’
[08:08:36.541] | : gc: FALSE
[08:08:36.541] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:36.542] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:36.542] | : . Searching for globals ...
[08:08:36.553] | : . ' globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:36.553] | : . Searching for globals ... done
[08:08:36.553] | : . Resolving globals: TRUE
[08:08:36.553] | : . Resolving any globals that are futures ...
[08:08:36.553] | : . ' globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:36.554] | : . Resolving any globals that are futures ... done
[08:08:36.554] | : . Search for packages associated with the globals ...
[08:08:36.554] | : . ' Packages associated with globals: [1] ‘base’
[08:08:36.554] | : . ' Packages: [1] ‘base’
[08:08:36.554] | : . Search for packages associated with the globals ... done
[08:08:36.555] | : . Resolving futures part of globals (recursively) ...
[08:08:36.555] | : . ' resolve() for FutureGlobals ...
[08:08:36.555] | : . ' , recursive: 99
[08:08:36.555] | : . ' , Number of elements: 1
[08:08:36.555] | : . ' , elements: ‘x’
[08:08:36.555] | : . ' , 'obj' is list
[08:08:36.556] | : . ' , resolve(obj, ...) ...
[08:08:36.556] | : . ' , ; resolve() for list ...
[08:08:36.556] | : . ' , ; ` recursive: 98
[08:08:36.556] | : . ' , ; ` Number of elements: 0
[08:08:36.556] | : . ' , ; resolve() for list ... done
[08:08:36.556] | : . ' , resolve(obj, ...) ... done
[08:08:36.556] | : . ' , resolved() for list ...
[08:08:36.556] | : . ' , ; Number of elements: 0
[08:08:36.557] | : . ' , ; Number of futures: 0
[08:08:36.557] | : . ' , resolved() for list ... done
[08:08:36.557] | : . ' , length: 0 (resolved future 1)
[08:08:36.557] | : . ' resolve() for FutureGlobals ... done
[08:08:36.557] | : . ' globals: [1] ‘x’
[08:08:36.557] | : . Resolving futures part of globals (recursively) ... done
[08:08:36.557] | : . Packages after dropping 'base': [0] 
[08:08:36.558] | : . globals: [1] ‘x’
[08:08:36.558] | : . packages: [0] 
[08:08:36.558] | : getGlobalsAndPackages() ... done
[08:08:36.558] | : run() for ‘Future’ (<unnamed-25>) ...
[08:08:36.558] | : . state: ‘created’
[08:08:36.558] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:36.559] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:36.559] | : . Using MultisessionFutureBackend ...
[08:08:36.559] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:36.559] | : . ' Launching futures ...
[08:08:36.559] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:36.560] | : . ' , ; Workers: [n=2]
[08:08:36.560] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:36.562] | : . ' , ; FutureRegistry: ‘workers-3bd062d8b9190b31ad6b5a00e5612964’
[08:08:36.562] | : . ' , ; requestWorker() ...
[08:08:36.562] | : . ' , ; ` requestNode() ...
[08:08:36.562] | : . ' , ; ` | Number of workers: 2
[08:08:36.562] | : . ' , ; ` | Polling for a free worker ...
[08:08:36.562] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:36.562] | : . ' , ; ` | : . Created empty registry ‘workers-3bd062d8b9190b31ad6b5a00e5612964’
[08:08:36.563] | : . ' , ; ` | : . Listing all futures
[08:08:36.563] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:36.563] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:36.563] | : . ' , ; ` | : Total time: 0
[08:08:36.563] | : . ' , ; ` | Polling for a free worker ... done
[08:08:36.563] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:36.563] | : . ' , ; ` | : Listing all futures
[08:08:36.563] | : . ' , ; ` | : Number of registered futures: 0
[08:08:36.564] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:36.564] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:36.564] | : . ' , ; ` | Index of first available worker: 1
[08:08:36.564] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:36.627] | : . ' , ; ` | : Worker is functional
[08:08:36.627] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:36.628] | : . ' , ; ` | : . Listing all futures
[08:08:36.628] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:36.628] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:36.628] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:36.628] | : . ' , ; ` requestNode() ... done
[08:08:36.628] | : . ' , ; ` cluster node index: 1
[08:08:36.628] | : . ' , ; requestWorker() ... done
[08:08:36.629] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:36.630] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:36.631] | : . ' , ; launchFuture() ...
[08:08:36.631] | : . ' , ; ` cluster node index: 1
[08:08:36.631] | : . ' , ; ` getFutureData() ...
[08:08:36.631] | : . ' , ; ` | getFutureCore() ...
[08:08:36.631] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:36.631] | : . ' , ; ` | getFutureCore() ... done
[08:08:36.631] | : . ' , ; ` | getFutureCapture() ...
[08:08:36.631] | : . ' , ; ` | getFutureCapture() ... done
[08:08:36.632] | : . ' , ; ` | getFutureContext() ...
[08:08:36.632] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:36.632] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:36.632] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:36.632] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:36.632] | : . ' , ; ` | getFutureContext() ... done
[08:08:36.633] | : . ' , ; ` getFutureData() ... done
[08:08:36.633] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ...
[08:08:36.633] | : . ' , ; ` | Appended future to position #1
[08:08:36.633] | : . ' , ; ` | Number of registered futures: 1
[08:08:36.633] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ... done
[08:08:36.634] | : . ' , ; launchFuture() ... done
[08:08:36.634] | : . ' , ; MultisessionFuture started
[08:08:36.634] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:36.634] | : . ' Launching futures ... done
[08:08:36.634] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:36.634] | : . Using MultisessionFutureBackend ... done
[08:08:36.634] | : run() for ‘Future’ (<unnamed-25>) ... done
[08:08:36.635] | future(..., label = NULL) ... done
[08:08:36.635] | value() for MultisessionFuture (<unnamed-25>) ...
[08:08:36.635] | : result() for ClusterFuture ...
[08:08:36.635] | : . assertValidConnection() ...
[08:08:36.635] | : . ' cluster node index: 1
[08:08:36.636] | : . assertValidConnection() ... done
[08:08:36.636] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:36.637] | : . ' cluster node index: 1
[08:08:36.722] | : . ' [1] TRUE
[08:08:36.723] | : . ' received data:
[08:08:36.723] | : . ' List of 5
[08:08:36.723] | : . '  $ type   : chr "VALUE"
[08:08:36.723] | : . '  $ value  :List of 16
[08:08:36.723] | : . '   ..$ value              :List of 1
[08:08:36.723] | : . '   .. ..$ a: num 1
[08:08:36.723] | : . '   ..$ visible            : logi TRUE
[08:08:36.723] | : . '   ..$ stdout             : chr ""
[08:08:36.723] | : . '   ..$ conditions         : list()
[08:08:36.723] | : . '   ..$ rng                : logi FALSE
[08:08:36.723] | : . '   ..$ seed               : NULL
[08:08:36.723] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:36.723] | : . '   ..$ misuseConnections  :List of 3
[08:08:36.723] | : . '   .. ..$ added   : NULL
[08:08:36.723] | : . '   .. ..$ removed : NULL
[08:08:36.723] | : . '   .. ..$ replaced: NULL
[08:08:36.723] | : . '   ..$ misuseDevices      : NULL
[08:08:36.723] | : . '   ..$ misuseDefaultDevice: list()
[08:08:36.723] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:36"
[08:08:36.723] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:36"
[08:08:36.723] | : . '   ..$ uuid               : chr [1:2] "3c0c038025b3a5a8ea89664461f5ad46" "25"
[08:08:36.723] | : . '   ..$ session_uuid       : chr "80594d95b504ec13ed9cdeb474cbe50c"
[08:08:36.723] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:36.723] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:36.723] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:36.723] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:36.723] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:36.723] | : . '   .. .. ..$ pid   : int 70405
[08:08:36.723] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:36"
[08:08:36.723] | : . '   .. .. ..$ random: int 2147483647
[08:08:36.723] | : . '   ..$ r_info             :List of 4
[08:08:36.723] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:36.723] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:36.723] | : . '   .. ..$ os           : chr "unix"
[08:08:36.723] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:36.723] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:36.723] | : . '   ..$ version            : chr "1.8"
[08:08:36.723] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:36.723] | : . '  $ success: logi TRUE
[08:08:36.723] | : . '  $ time   : 'proc_time' Named num [1:5] 0.046 0.002 0.049 0 0
[08:08:36.723] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:36.723] | : . '  $ tag    : NULL
[08:08:36.738] | : . ' Received FutureResult
[08:08:36.738] | : . ' FutureResult:
[08:08:36.738] | : . ' value: ‘list’
[08:08:36.738] | : . ' visible: TRUE
[08:08:36.738] | : . ' stdout: character
[08:08:36.738] | : . ' conditions: [n = 0] 
[08:08:36.738] | : . ' RNG used: FALSE
[08:08:36.738] | : . ' duration: 0.0472064 secs (started 2025-06-17 08:08:36.674972)
[08:08:36.738] | : . ' version: 1.8
[08:08:36.739] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ...
[08:08:36.739] | : . ' , Removed future from position #1
[08:08:36.739] | : . ' , Number of registered futures: 0
[08:08:36.739] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ... done
[08:08:36.739] | : . ' Erased future from future backend
[08:08:36.739] | : . ' result() for ClusterFuture ...
[08:08:36.740] | : . ' , result already collected: FutureResult
[08:08:36.740] | : . ' result() for ClusterFuture ... done
[08:08:36.740] | : . ' signalConditions() ...
[08:08:36.740] | : . ' , include = ‘immediateCondition’
[08:08:36.740] | : . ' , exclude = 
[08:08:36.740] | : . ' , resignal = FALSE
[08:08:36.740] | : . ' , Number of conditions: 0
[08:08:36.740] | : . ' ,  int 0
[08:08:36.741] | : . ' signalConditions() ... done
[08:08:36.741] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:36.741] | : result() for ClusterFuture ... done
[08:08:36.741] | : result() for ClusterFuture ...
[08:08:36.742] | : . result already collected: FutureResult
[08:08:36.742] | : result() for ClusterFuture ... done
[08:08:36.742] | : signalConditions() ...
[08:08:36.742] | : . include = ‘immediateCondition’
[08:08:36.742] | : . exclude = 
[08:08:36.742] | : . resignal = FALSE
[08:08:36.742] | : . Number of conditions: 0
[08:08:36.742] | : .  int 0
[08:08:36.743] | : signalConditions() ... done
[08:08:36.743] | : relay stdout ...
[08:08:36.743] | : relay stdout ... done
[08:08:36.743] | : check for misuse ...
[08:08:36.743] | : check for misuse ... done
[08:08:36.744] | value() for MultisessionFuture (<unnamed-25>) ... done
$a
[1] 1

[08:08:36.744] | future(..., label = NULL) ...
[08:08:36.744] | : lazy: TRUE
[08:08:36.744] | : stdout: TRUE
[08:08:36.744] | : conditions: [n=1] ‘condition’
[08:08:36.744] | : gc: FALSE
[08:08:36.744] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:36.745] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:36.745] | : . Searching for globals ...
[08:08:36.760] | : . ' globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:36.761] | : . Searching for globals ... done
[08:08:36.761] | : . Resolving globals: TRUE
[08:08:36.761] | : . Resolving any globals that are futures ...
[08:08:36.761] | : . ' globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:36.761] | : . Resolving any globals that are futures ... done
[08:08:36.761] | : . Search for packages associated with the globals ...
[08:08:36.761] | : . ' Packages associated with globals: [1] ‘base’
[08:08:36.762] | : . ' Packages: [1] ‘base’
[08:08:36.762] | : . Search for packages associated with the globals ... done
[08:08:36.762] | : . Resolving futures part of globals (recursively) ...
[08:08:36.762] | : . ' resolve() for FutureGlobals ...
[08:08:36.762] | : . ' , recursive: 99
[08:08:36.762] | : . ' , Number of elements: 1
[08:08:36.762] | : . ' , elements: ‘x’
[08:08:36.763] | : . ' , 'obj' is list
[08:08:36.763] | : . ' , resolve(obj, ...) ...
[08:08:36.763] | : . ' , ; resolve() for list ...
[08:08:36.763] | : . ' , ; ` recursive: 98
[08:08:36.763] | : . ' , ; ` Number of elements: 0
[08:08:36.763] | : . ' , ; resolve() for list ... done
[08:08:36.763] | : . ' , resolve(obj, ...) ... done
[08:08:36.763] | : . ' , resolved() for list ...
[08:08:36.763] | : . ' , ; Number of elements: 0
[08:08:36.763] | : . ' , ; Number of futures: 0
[08:08:36.764] | : . ' , resolved() for list ... done
[08:08:36.764] | : . ' , length: 0 (resolved future 1)
[08:08:36.764] | : . ' resolve() for FutureGlobals ... done
[08:08:36.764] | : . ' globals: [1] ‘x’
[08:08:36.764] | : . Resolving futures part of globals (recursively) ... done
[08:08:36.764] | : . Packages after dropping 'base': [0] 
[08:08:36.764] | : . globals: [1] ‘x’
[08:08:36.764] | : . packages: [0] 
[08:08:36.764] | : getGlobalsAndPackages() ... done
[08:08:36.765] | future(..., label = NULL) ... done
[08:08:36.765] | value() for Future (<unnamed-26>) ...
[08:08:36.765] | : run() for ‘Future’ (<unnamed-26>) ...
[08:08:36.765] | : . state: ‘created’
[08:08:36.765] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:36.765] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:36.765] | : . Using MultisessionFutureBackend ...
[08:08:36.765] | : . ' Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:08:36.765] | : . ' Launching futures ...
[08:08:36.766] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:36.766] | : . ' , ; Workers: [n=2]
[08:08:36.766] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:36.767] | : . ' , ; FutureRegistry: ‘workers-3bd062d8b9190b31ad6b5a00e5612964’
[08:08:36.767] | : . ' , ; requestWorker() ...
[08:08:36.768] | : . ' , ; ` requestNode() ...
[08:08:36.768] | : . ' , ; ` | Number of workers: 2
[08:08:36.768] | : . ' , ; ` | Polling for a free worker ...
[08:08:36.768] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:36.768] | : . ' , ; ` | : . Listing all futures
[08:08:36.768] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:36.768] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:36.768] | : . ' , ; ` | : Total time: 0
[08:08:36.768] | : . ' , ; ` | Polling for a free worker ... done
[08:08:36.768] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:36.768] | : . ' , ; ` | : Listing all futures
[08:08:36.769] | : . ' , ; ` | : Number of registered futures: 0
[08:08:36.769] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:36.769] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:36.769] | : . ' , ; ` | Index of first available worker: 1
[08:08:36.769] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:36.829] | : . ' , ; ` | : Worker is functional
[08:08:36.829] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:36.829] | : . ' , ; ` | : . Listing all futures
[08:08:36.829] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:36.830] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:36.830] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:36.830] | : . ' , ; ` requestNode() ... done
[08:08:36.830] | : . ' , ; ` cluster node index: 1
[08:08:36.830] | : . ' , ; requestWorker() ... done
[08:08:36.830] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:36.831] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:36.831] | : . ' , ; launchFuture() ...
[08:08:36.831] | : . ' , ; ` cluster node index: 1
[08:08:36.831] | : . ' , ; ` getFutureData() ...
[08:08:36.831] | : . ' , ; ` | getFutureCore() ...
[08:08:36.831] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:36.831] | : . ' , ; ` | getFutureCore() ... done
[08:08:36.831] | : . ' , ; ` | getFutureCapture() ...
[08:08:36.831] | : . ' , ; ` | getFutureCapture() ... done
[08:08:36.832] | : . ' , ; ` | getFutureContext() ...
[08:08:36.832] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:36.832] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:36.832] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:36.832] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:36.832] | : . ' , ; ` | getFutureContext() ... done
[08:08:36.832] | : . ' , ; ` getFutureData() ... done
[08:08:36.833] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ...
[08:08:36.833] | : . ' , ; ` | Appended future to position #1
[08:08:36.833] | : . ' , ; ` | Number of registered futures: 1
[08:08:36.833] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ... done
[08:08:36.833] | : . ' , ; launchFuture() ... done
[08:08:36.833] | : . ' , ; MultisessionFuture started
[08:08:36.833] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:36.833] | : . ' Launching futures ... done
[08:08:36.833] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:36.834] | : . Using MultisessionFutureBackend ... done
[08:08:36.834] | : run() for ‘Future’ (<unnamed-26>) ... done
[08:08:36.834] | : result() for ClusterFuture ...
[08:08:36.834] | : . assertValidConnection() ...
[08:08:36.834] | : . ' cluster node index: 1
[08:08:36.834] | : . assertValidConnection() ... done
[08:08:36.835] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:36.835] | : . ' cluster node index: 1
[08:08:36.876] | : . ' [1] TRUE
[08:08:36.877] | : . ' received data:
[08:08:36.877] | : . ' List of 5
[08:08:36.877] | : . '  $ type   : chr "VALUE"
[08:08:36.877] | : . '  $ value  :List of 16
[08:08:36.877] | : . '   ..$ value              :List of 1
[08:08:36.877] | : . '   .. ..$ a: num 1
[08:08:36.877] | : . '   ..$ visible            : logi TRUE
[08:08:36.877] | : . '   ..$ stdout             : chr ""
[08:08:36.877] | : . '   ..$ conditions         : list()
[08:08:36.877] | : . '   ..$ rng                : logi FALSE
[08:08:36.877] | : . '   ..$ seed               : NULL
[08:08:36.877] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:36.877] | : . '   ..$ misuseConnections  :List of 3
[08:08:36.877] | : . '   .. ..$ added   : NULL
[08:08:36.877] | : . '   .. ..$ removed : NULL
[08:08:36.877] | : . '   .. ..$ replaced: NULL
[08:08:36.877] | : . '   ..$ misuseDevices      : NULL
[08:08:36.877] | : . '   ..$ misuseDefaultDevice: list()
[08:08:36.877] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:36"
[08:08:36.877] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:36"
[08:08:36.877] | : . '   ..$ uuid               : chr [1:2] "3c0c038025b3a5a8ea89664461f5ad46" "26"
[08:08:36.877] | : . '   ..$ session_uuid       : chr "80594d95b504ec13ed9cdeb474cbe50c"
[08:08:36.877] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:36.877] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:36.877] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:36.877] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:36.877] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:36.877] | : . '   .. .. ..$ pid   : int 70405
[08:08:36.877] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:36"
[08:08:36.877] | : . '   .. .. ..$ random: int 2147483647
[08:08:36.877] | : . '   ..$ r_info             :List of 4
[08:08:36.877] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:36.877] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:36.877] | : . '   .. ..$ os           : chr "unix"
[08:08:36.877] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:36.877] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:36.877] | : . '   ..$ version            : chr "1.8"
[08:08:36.877] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:36.877] | : . '  $ success: logi TRUE
[08:08:36.877] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:36.877] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:36.877] | : . '  $ tag    : NULL
[08:08:36.888] | : . ' Received FutureResult
[08:08:36.888] | : . ' FutureResult:
[08:08:36.888] | : . ' value: ‘list’
[08:08:36.888] | : . ' visible: TRUE
[08:08:36.888] | : . ' stdout: character
[08:08:36.888] | : . ' conditions: [n = 0] 
[08:08:36.888] | : . ' RNG used: FALSE
[08:08:36.888] | : . ' duration: 0.002604246 secs (started 2025-06-17 08:08:36.873796)
[08:08:36.888] | : . ' version: 1.8
[08:08:36.889] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ...
[08:08:36.889] | : . ' , Removed future from position #1
[08:08:36.889] | : . ' , Number of registered futures: 0
[08:08:36.889] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ... done
[08:08:36.889] | : . ' Erased future from future backend
[08:08:36.889] | : . ' result() for ClusterFuture ...
[08:08:36.889] | : . ' , result already collected: FutureResult
[08:08:36.889] | : . ' result() for ClusterFuture ... done
[08:08:36.889] | : . ' signalConditions() ...
[08:08:36.890] | : . ' , include = ‘immediateCondition’
[08:08:36.890] | : . ' , exclude = 
[08:08:36.890] | : . ' , resignal = FALSE
[08:08:36.890] | : . ' , Number of conditions: 0
[08:08:36.890] | : . ' ,  int 0
[08:08:36.890] | : . ' signalConditions() ... done
[08:08:36.890] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:36.891] | : result() for ClusterFuture ... done
[08:08:36.891] | : result() for ClusterFuture ...
[08:08:36.891] | : . result already collected: FutureResult
[08:08:36.891] | : result() for ClusterFuture ... done
[08:08:36.891] | : signalConditions() ...
[08:08:36.891] | : . include = ‘immediateCondition’
[08:08:36.891] | : . exclude = 
[08:08:36.891] | : . resignal = FALSE
[08:08:36.891] | : . Number of conditions: 0
[08:08:36.892] | : .  int 0
[08:08:36.892] | : signalConditions() ... done
[08:08:36.892] | : relay stdout ...
[08:08:36.892] | : relay stdout ... done
[08:08:36.892] | : check for misuse ...
[08:08:36.892] | : check for misuse ... done
[08:08:36.893] | value() for Future (<unnamed-26>) ... done
$a
[1] 1

[08:08:36.893] | future(..., label = NULL) ...
[08:08:36.893] | : lazy: FALSE
[08:08:36.893] | : stdout: TRUE
[08:08:36.893] | : conditions: [n=1] ‘condition’
[08:08:36.893] | : gc: FALSE
[08:08:36.893] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:36.893] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:36.894] | : . Searching for globals ...
[08:08:36.904] | : . ' globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:36.904] | : . Searching for globals ... done
[08:08:36.904] | : . Resolving globals: TRUE
[08:08:36.905] | : . Resolving any globals that are futures ...
[08:08:36.905] | : . ' globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:36.905] | : . Resolving any globals that are futures ... done
[08:08:36.905] | : . Search for packages associated with the globals ...
[08:08:36.905] | : . ' Packages associated with globals: [1] ‘base’
[08:08:36.905] | : . ' Packages: [1] ‘base’
[08:08:36.905] | : . Search for packages associated with the globals ... done
[08:08:36.906] | : . Resolving futures part of globals (recursively) ...
[08:08:36.906] | : . ' resolve() for FutureGlobals ...
[08:08:36.906] | : . ' , recursive: 99
[08:08:36.906] | : . ' , Number of elements: 1
[08:08:36.906] | : . ' , elements: ‘x’
[08:08:36.906] | : . ' , 'obj' is list
[08:08:36.906] | : . ' , resolve(obj, ...) ...
[08:08:36.906] | : . ' , ; resolve() for list ...
[08:08:36.907] | : . ' , ; ` recursive: 98
[08:08:36.907] | : . ' , ; ` Number of elements: 0
[08:08:36.907] | : . ' , ; resolve() for list ... done
[08:08:36.907] | : . ' , resolve(obj, ...) ... done
[08:08:36.907] | : . ' , resolved() for list ...
[08:08:36.907] | : . ' , ; Number of elements: 0
[08:08:36.907] | : . ' , ; Number of futures: 0
[08:08:36.907] | : . ' , resolved() for list ... done
[08:08:36.907] | : . ' , length: 0 (resolved future 1)
[08:08:36.908] | : . ' resolve() for FutureGlobals ... done
[08:08:36.908] | : . ' globals: [1] ‘x’
[08:08:36.908] | : . Resolving futures part of globals (recursively) ... done
[08:08:36.908] | : . Packages after dropping 'base': [0] 
[08:08:36.908] | : . globals: [1] ‘x’
[08:08:36.908] | : . packages: [0] 
[08:08:36.908] | : getGlobalsAndPackages() ... done
[08:08:36.908] | : run() for ‘Future’ (<unnamed-27>) ...
[08:08:36.909] | : . state: ‘created’
[08:08:36.909] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:36.909] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:36.909] | : . Using MultisessionFutureBackend ...
[08:08:36.909] | : . ' Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:08:36.909] | : . ' Launching futures ...
[08:08:36.909] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:36.909] | : . ' , ; Workers: [n=2]
[08:08:36.910] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:36.911] | : . ' , ; FutureRegistry: ‘workers-3bd062d8b9190b31ad6b5a00e5612964’
[08:08:36.911] | : . ' , ; requestWorker() ...
[08:08:36.911] | : . ' , ; ` requestNode() ...
[08:08:36.911] | : . ' , ; ` | Number of workers: 2
[08:08:36.912] | : . ' , ; ` | Polling for a free worker ...
[08:08:36.912] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:36.912] | : . ' , ; ` | : . Listing all futures
[08:08:36.912] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:36.912] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:36.912] | : . ' , ; ` | : Total time: 0
[08:08:36.912] | : . ' , ; ` | Polling for a free worker ... done
[08:08:36.912] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:36.912] | : . ' , ; ` | : Listing all futures
[08:08:36.912] | : . ' , ; ` | : Number of registered futures: 0
[08:08:36.913] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:36.913] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:36.913] | : . ' , ; ` | Index of first available worker: 1
[08:08:36.913] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:37.009] | : . ' , ; ` | : Worker is functional
[08:08:37.010] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:37.010] | : . ' , ; ` | : . Listing all futures
[08:08:37.010] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:37.010] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:37.010] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:37.010] | : . ' , ; ` requestNode() ... done
[08:08:37.010] | : . ' , ; ` cluster node index: 1
[08:08:37.011] | : . ' , ; requestWorker() ... done
[08:08:37.011] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:37.011] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:37.011] | : . ' , ; launchFuture() ...
[08:08:37.011] | : . ' , ; ` cluster node index: 1
[08:08:37.011] | : . ' , ; ` getFutureData() ...
[08:08:37.011] | : . ' , ; ` | getFutureCore() ...
[08:08:37.012] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:37.012] | : . ' , ; ` | getFutureCore() ... done
[08:08:37.012] | : . ' , ; ` | getFutureCapture() ...
[08:08:37.012] | : . ' , ; ` | getFutureCapture() ... done
[08:08:37.012] | : . ' , ; ` | getFutureContext() ...
[08:08:37.012] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:37.012] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:37.012] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:37.012] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:37.013] | : . ' , ; ` | getFutureContext() ... done
[08:08:37.013] | : . ' , ; ` getFutureData() ... done
[08:08:37.013] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ...
[08:08:37.013] | : . ' , ; ` | Appended future to position #1
[08:08:37.013] | : . ' , ; ` | Number of registered futures: 1
[08:08:37.013] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ... done
[08:08:37.013] | : . ' , ; launchFuture() ... done
[08:08:37.013] | : . ' , ; MultisessionFuture started
[08:08:37.014] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:37.014] | : . ' Launching futures ... done
[08:08:37.014] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:37.016] | : . Using MultisessionFutureBackend ... done
[08:08:37.016] | : run() for ‘Future’ (<unnamed-27>) ... done
[08:08:37.016] | future(..., label = NULL) ... done
[08:08:37.016] | value() for MultisessionFuture (<unnamed-27>) ...
[08:08:37.016] | : result() for ClusterFuture ...
[08:08:37.016] | : . assertValidConnection() ...
[08:08:37.016] | : . ' cluster node index: 1
[08:08:37.017] | : . assertValidConnection() ... done
[08:08:37.017] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:37.017] | : . ' cluster node index: 1
[08:08:37.056] | : . ' [1] TRUE
[08:08:37.057] | : . ' received data:
[08:08:37.057] | : . ' List of 5
[08:08:37.057] | : . '  $ type   : chr "VALUE"
[08:08:37.057] | : . '  $ value  :List of 16
[08:08:37.057] | : . '   ..$ value              :List of 1
[08:08:37.057] | : . '   .. ..$ a: num 1
[08:08:37.057] | : . '   ..$ visible            : logi TRUE
[08:08:37.057] | : . '   ..$ stdout             : chr ""
[08:08:37.057] | : . '   ..$ conditions         : list()
[08:08:37.057] | : . '   ..$ rng                : logi FALSE
[08:08:37.057] | : . '   ..$ seed               : NULL
[08:08:37.057] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:37.057] | : . '   ..$ misuseConnections  :List of 3
[08:08:37.057] | : . '   .. ..$ added   : NULL
[08:08:37.057] | : . '   .. ..$ removed : NULL
[08:08:37.057] | : . '   .. ..$ replaced: NULL
[08:08:37.057] | : . '   ..$ misuseDevices      : NULL
[08:08:37.057] | : . '   ..$ misuseDefaultDevice: list()
[08:08:37.057] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:37"
[08:08:37.057] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:37"
[08:08:37.057] | : . '   ..$ uuid               : chr [1:2] "3c0c038025b3a5a8ea89664461f5ad46" "27"
[08:08:37.057] | : . '   ..$ session_uuid       : chr "80594d95b504ec13ed9cdeb474cbe50c"
[08:08:37.057] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:37.057] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:37.057] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:37.057] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:37.057] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:37.057] | : . '   .. .. ..$ pid   : int 70405
[08:08:37.057] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:36"
[08:08:37.057] | : . '   .. .. ..$ random: int 2147483647
[08:08:37.057] | : . '   ..$ r_info             :List of 4
[08:08:37.057] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:37.057] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:37.057] | : . '   .. ..$ os           : chr "unix"
[08:08:37.057] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:37.057] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:37.057] | : . '   ..$ version            : chr "1.8"
[08:08:37.057] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:37.057] | : . '  $ success: logi TRUE
[08:08:37.057] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:37.057] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:37.057] | : . '  $ tag    : NULL
[08:08:37.068] | : . ' Received FutureResult
[08:08:37.068] | : . ' FutureResult:
[08:08:37.068] | : . ' value: ‘list’
[08:08:37.068] | : . ' visible: TRUE
[08:08:37.068] | : . ' stdout: character
[08:08:37.068] | : . ' conditions: [n = 0] 
[08:08:37.068] | : . ' RNG used: FALSE
[08:08:37.068] | : . ' duration: 0.002588034 secs (started 2025-06-17 08:08:37.053864)
[08:08:37.068] | : . ' version: 1.8
[08:08:37.068] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ...
[08:08:37.068] | : . ' , Removed future from position #1
[08:08:37.069] | : . ' , Number of registered futures: 0
[08:08:37.069] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ... done
[08:08:37.069] | : . ' Erased future from future backend
[08:08:37.069] | : . ' result() for ClusterFuture ...
[08:08:37.069] | : . ' , result already collected: FutureResult
[08:08:37.069] | : . ' result() for ClusterFuture ... done
[08:08:37.069] | : . ' signalConditions() ...
[08:08:37.069] | : . ' , include = ‘immediateCondition’
[08:08:37.069] | : . ' , exclude = 
[08:08:37.070] | : . ' , resignal = FALSE
[08:08:37.070] | : . ' , Number of conditions: 0
[08:08:37.070] | : . ' ,  int 0
[08:08:37.070] | : . ' signalConditions() ... done
[08:08:37.070] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:37.070] | : result() for ClusterFuture ... done
[08:08:37.070] | : result() for ClusterFuture ...
[08:08:37.071] | : . result already collected: FutureResult
[08:08:37.071] | : result() for ClusterFuture ... done
[08:08:37.071] | : signalConditions() ...
[08:08:37.071] | : . include = ‘immediateCondition’
[08:08:37.071] | : . exclude = 
[08:08:37.071] | : . resignal = FALSE
[08:08:37.071] | : . Number of conditions: 0
[08:08:37.071] | : .  int 0
[08:08:37.072] | : signalConditions() ... done
[08:08:37.072] | : relay stdout ...
[08:08:37.072] | : relay stdout ... done
[08:08:37.072] | : check for misuse ...
[08:08:37.072] | : check for misuse ... done
[08:08:37.072] | value() for MultisessionFuture (<unnamed-27>) ... done
$a
[1] 1

[08:08:37.072] | future(..., label = NULL) ...
[08:08:37.073] | : lazy: TRUE
[08:08:37.073] | : stdout: TRUE
[08:08:37.073] | : conditions: [n=1] ‘condition’
[08:08:37.073] | : gc: FALSE
[08:08:37.073] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:37.073] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:37.073] | : . Searching for globals ...
[08:08:37.084] | : . ' globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:37.084] | : . Searching for globals ... done
[08:08:37.084] | : . Resolving globals: TRUE
[08:08:37.084] | : . Resolving any globals that are futures ...
[08:08:37.084] | : . ' globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[08:08:37.085] | : . Resolving any globals that are futures ... done
[08:08:37.085] | : . Search for packages associated with the globals ...
[08:08:37.085] | : . ' Packages associated with globals: [1] ‘base’
[08:08:37.085] | : . ' Packages: [1] ‘base’
[08:08:37.085] | : . Search for packages associated with the globals ... done
[08:08:37.085] | : . Resolving futures part of globals (recursively) ...
[08:08:37.085] | : . ' resolve() for FutureGlobals ...
[08:08:37.086] | : . ' , recursive: 99
[08:08:37.086] | : . ' , Number of elements: 1
[08:08:37.086] | : . ' , elements: ‘x’
[08:08:37.086] | : . ' , 'obj' is list
[08:08:37.086] | : . ' , resolve(obj, ...) ...
[08:08:37.086] | : . ' , ; resolve() for list ...
[08:08:37.086] | : . ' , ; ` recursive: 98
[08:08:37.086] | : . ' , ; ` Number of elements: 0
[08:08:37.087] | : . ' , ; resolve() for list ... done
[08:08:37.087] | : . ' , resolve(obj, ...) ... done
[08:08:37.087] | : . ' , resolved() for list ...
[08:08:37.087] | : . ' , ; Number of elements: 0
[08:08:37.087] | : . ' , ; Number of futures: 0
[08:08:37.087] | : . ' , resolved() for list ... done
[08:08:37.087] | : . ' , length: 0 (resolved future 1)
[08:08:37.087] | : . ' resolve() for FutureGlobals ... done
[08:08:37.087] | : . ' globals: [1] ‘x’
[08:08:37.087] | : . Resolving futures part of globals (recursively) ... done
[08:08:37.088] | : . Packages after dropping 'base': [0] 
[08:08:37.088] | : . globals: [1] ‘x’
[08:08:37.088] | : . packages: [0] 
[08:08:37.088] | : getGlobalsAndPackages() ... done
[08:08:37.088] | future(..., label = NULL) ... done
[08:08:37.088] | value() for Future (<unnamed-28>) ...
[08:08:37.088] | : run() for ‘Future’ (<unnamed-28>) ...
[08:08:37.089] | : . state: ‘created’
[08:08:37.089] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:37.089] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:37.089] | : . Using MultisessionFutureBackend ...
[08:08:37.089] | : . ' Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:08:37.089] | : . ' Launching futures ...
[08:08:37.089] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:37.089] | : . ' , ; Workers: [n=2]
[08:08:37.090] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:37.091] | : . ' , ; FutureRegistry: ‘workers-3bd062d8b9190b31ad6b5a00e5612964’
[08:08:37.091] | : . ' , ; requestWorker() ...
[08:08:37.091] | : . ' , ; ` requestNode() ...
[08:08:37.091] | : . ' , ; ` | Number of workers: 2
[08:08:37.092] | : . ' , ; ` | Polling for a free worker ...
[08:08:37.092] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:37.092] | : . ' , ; ` | : . Listing all futures
[08:08:37.092] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:37.092] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:37.092] | : . ' , ; ` | : Total time: 0
[08:08:37.092] | : . ' , ; ` | Polling for a free worker ... done
[08:08:37.092] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:37.092] | : . ' , ; ` | : Listing all futures
[08:08:37.092] | : . ' , ; ` | : Number of registered futures: 0
[08:08:37.092] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:37.093] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:37.093] | : . ' , ; ` | Index of first available worker: 1
[08:08:37.093] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:37.188] | : . ' , ; ` | : Worker is functional
[08:08:37.189] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:37.189] | : . ' , ; ` | : . Listing all futures
[08:08:37.189] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:37.189] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:37.189] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:37.189] | : . ' , ; ` requestNode() ... done
[08:08:37.189] | : . ' , ; ` cluster node index: 1
[08:08:37.189] | : . ' , ; requestWorker() ... done
[08:08:37.190] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:37.190] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:37.190] | : . ' , ; launchFuture() ...
[08:08:37.190] | : . ' , ; ` cluster node index: 1
[08:08:37.190] | : . ' , ; ` getFutureData() ...
[08:08:37.190] | : . ' , ; ` | getFutureCore() ...
[08:08:37.190] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:37.191] | : . ' , ; ` | getFutureCore() ... done
[08:08:37.191] | : . ' , ; ` | getFutureCapture() ...
[08:08:37.191] | : . ' , ; ` | getFutureCapture() ... done
[08:08:37.191] | : . ' , ; ` | getFutureContext() ...
[08:08:37.191] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:37.191] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:37.191] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:37.191] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:37.191] | : . ' , ; ` | getFutureContext() ... done
[08:08:37.192] | : . ' , ; ` getFutureData() ... done
[08:08:37.192] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ...
[08:08:37.192] | : . ' , ; ` | Appended future to position #1
[08:08:37.192] | : . ' , ; ` | Number of registered futures: 1
[08:08:37.192] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ... done
[08:08:37.192] | : . ' , ; launchFuture() ... done
[08:08:37.192] | : . ' , ; MultisessionFuture started
[08:08:37.193] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:37.193] | : . ' Launching futures ... done
[08:08:37.193] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:37.193] | : . Using MultisessionFutureBackend ... done
[08:08:37.193] | : run() for ‘Future’ (<unnamed-28>) ... done
[08:08:37.193] | : result() for ClusterFuture ...
[08:08:37.193] | : . assertValidConnection() ...
[08:08:37.193] | : . ' cluster node index: 1
[08:08:37.194] | : . assertValidConnection() ... done
[08:08:37.194] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:37.194] | : . ' cluster node index: 1
[08:08:37.235] | : . ' [1] TRUE
[08:08:37.236] | : . ' received data:
[08:08:37.236] | : . ' List of 5
[08:08:37.236] | : . '  $ type   : chr "VALUE"
[08:08:37.236] | : . '  $ value  :List of 16
[08:08:37.236] | : . '   ..$ value              :List of 1
[08:08:37.236] | : . '   .. ..$ a: num 1
[08:08:37.236] | : . '   ..$ visible            : logi TRUE
[08:08:37.236] | : . '   ..$ stdout             : chr ""
[08:08:37.236] | : . '   ..$ conditions         : list()
[08:08:37.236] | : . '   ..$ rng                : logi FALSE
[08:08:37.236] | : . '   ..$ seed               : NULL
[08:08:37.236] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:37.236] | : . '   ..$ misuseConnections  :List of 3
[08:08:37.236] | : . '   .. ..$ added   : NULL
[08:08:37.236] | : . '   .. ..$ removed : NULL
[08:08:37.236] | : . '   .. ..$ replaced: NULL
[08:08:37.236] | : . '   ..$ misuseDevices      : NULL
[08:08:37.236] | : . '   ..$ misuseDefaultDevice: list()
[08:08:37.236] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:37"
[08:08:37.236] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:37"
[08:08:37.236] | : . '   ..$ uuid               : chr [1:2] "3c0c038025b3a5a8ea89664461f5ad46" "28"
[08:08:37.236] | : . '   ..$ session_uuid       : chr "80594d95b504ec13ed9cdeb474cbe50c"
[08:08:37.236] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:37.236] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:37.236] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:37.236] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:37.236] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:37.236] | : . '   .. .. ..$ pid   : int 70405
[08:08:37.236] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:36"
[08:08:37.236] | : . '   .. .. ..$ random: int 2147483647
[08:08:37.236] | : . '   ..$ r_info             :List of 4
[08:08:37.236] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:37.236] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:37.236] | : . '   .. ..$ os           : chr "unix"
[08:08:37.236] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:37.236] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:37.236] | : . '   ..$ version            : chr "1.8"
[08:08:37.236] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:37.236] | : . '  $ success: logi TRUE
[08:08:37.236] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:37.236] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:37.236] | : . '  $ tag    : NULL
[08:08:37.247] | : . ' Received FutureResult
[08:08:37.247] | : . ' FutureResult:
[08:08:37.247] | : . ' value: ‘list’
[08:08:37.247] | : . ' visible: TRUE
[08:08:37.247] | : . ' stdout: character
[08:08:37.247] | : . ' conditions: [n = 0] 
[08:08:37.247] | : . ' RNG used: FALSE
[08:08:37.247] | : . ' duration: 0.002531052 secs (started 2025-06-17 08:08:37.232886)
[08:08:37.247] | : . ' version: 1.8
[08:08:37.248] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ...
[08:08:37.248] | : . ' , Removed future from position #1
[08:08:37.248] | : . ' , Number of registered futures: 0
[08:08:37.248] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ... done
[08:08:37.248] | : . ' Erased future from future backend
[08:08:37.248] | : . ' result() for ClusterFuture ...
[08:08:37.248] | : . ' , result already collected: FutureResult
[08:08:37.248] | : . ' result() for ClusterFuture ... done
[08:08:37.248] | : . ' signalConditions() ...
[08:08:37.249] | : . ' , include = ‘immediateCondition’
[08:08:37.249] | : . ' , exclude = 
[08:08:37.249] | : . ' , resignal = FALSE
[08:08:37.249] | : . ' , Number of conditions: 0
[08:08:37.249] | : . ' ,  int 0
[08:08:37.249] | : . ' signalConditions() ... done
[08:08:37.249] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:37.249] | : result() for ClusterFuture ... done
[08:08:37.250] | : result() for ClusterFuture ...
[08:08:37.250] | : . result already collected: FutureResult
[08:08:37.250] | : result() for ClusterFuture ... done
[08:08:37.250] | : signalConditions() ...
[08:08:37.250] | : . include = ‘immediateCondition’
[08:08:37.250] | : . exclude = 
[08:08:37.250] | : . resignal = FALSE
[08:08:37.250] | : . Number of conditions: 0
[08:08:37.250] | : .  int 0
[08:08:37.251] | : signalConditions() ... done
[08:08:37.251] | : relay stdout ...
[08:08:37.251] | : relay stdout ... done
[08:08:37.251] | : check for misuse ...
[08:08:37.251] | : check for misuse ... done
[08:08:37.251] | value() for Future (<unnamed-28>) ... done
$a
[1] 1

[08:08:37.252] | future(..., label = NULL) ...
[08:08:37.252] | : lazy: FALSE
[08:08:37.252] | : stdout: TRUE
[08:08:37.252] | : conditions: [n=1] ‘condition’
[08:08:37.252] | : gc: FALSE
[08:08:37.252] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:37.252] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:37.253] | : . Searching for globals ...
[08:08:37.269] | : . ' globals found: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[08:08:37.269] | : . Searching for globals ... done
[08:08:37.269] | : . Resolving globals: TRUE
[08:08:37.269] | : . Resolving any globals that are futures ...
[08:08:37.270] | : . ' globals: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[08:08:37.270] | : . Resolving any globals that are futures ... done
[08:08:37.270] | : . Search for packages associated with the globals ...
[08:08:37.270] | : . ' Packages associated with globals: [1] ‘base’
[08:08:37.270] | : . ' Packages: [1] ‘base’
[08:08:37.270] | : . Search for packages associated with the globals ... done
[08:08:37.270] | : . Packages after dropping 'base': [0] 
[08:08:37.271] | : . globals: [0] 
[08:08:37.271] | : . packages: [0] 
[08:08:37.271] | : getGlobalsAndPackages() ... done
[08:08:37.271] | : run() for ‘Future’ (<unnamed-29>) ...
[08:08:37.271] | : . state: ‘created’
[08:08:37.271] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:37.271] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:37.271] | : . Using MultisessionFutureBackend ...
[08:08:37.272] | : . ' Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:37.272] | : . ' Launching futures ...
[08:08:37.272] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:37.272] | : . ' , ; Workers: [n=2]
[08:08:37.272] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:37.274] | : . ' , ; FutureRegistry: ‘workers-3bd062d8b9190b31ad6b5a00e5612964’
[08:08:37.274] | : . ' , ; requestWorker() ...
[08:08:37.274] | : . ' , ; ` requestNode() ...
[08:08:37.274] | : . ' , ; ` | Number of workers: 2
[08:08:37.274] | : . ' , ; ` | Polling for a free worker ...
[08:08:37.274] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:37.274] | : . ' , ; ` | : . Listing all futures
[08:08:37.274] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:37.274] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:37.275] | : . ' , ; ` | : Total time: 0
[08:08:37.275] | : . ' , ; ` | Polling for a free worker ... done
[08:08:37.275] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:37.275] | : . ' , ; ` | : Listing all futures
[08:08:37.275] | : . ' , ; ` | : Number of registered futures: 0
[08:08:37.275] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:37.275] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:37.275] | : . ' , ; ` | Index of first available worker: 1
[08:08:37.275] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:37.339] | : . ' , ; ` | : Worker is functional
[08:08:37.340] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:37.340] | : . ' , ; ` | : . Listing all futures
[08:08:37.340] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:37.340] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:37.340] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:37.340] | : . ' , ; ` requestNode() ... done
[08:08:37.340] | : . ' , ; ` cluster node index: 1
[08:08:37.341] | : . ' , ; requestWorker() ... done
[08:08:37.341] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:37.341] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:37.341] | : . ' , ; launchFuture() ...
[08:08:37.342] | : . ' , ; ` cluster node index: 1
[08:08:37.342] | : . ' , ; ` getFutureData() ...
[08:08:37.342] | : . ' , ; ` | getFutureCore() ...
[08:08:37.342] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:37.342] | : . ' , ; ` | getFutureCore() ... done
[08:08:37.342] | : . ' , ; ` | getFutureCapture() ...
[08:08:37.342] | : . ' , ; ` | getFutureCapture() ... done
[08:08:37.342] | : . ' , ; ` | getFutureContext() ...
[08:08:37.342] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:37.343] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:37.343] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:37.343] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:37.343] | : . ' , ; ` | getFutureContext() ... done
[08:08:37.343] | : . ' , ; ` getFutureData() ... done
[08:08:37.343] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ...
[08:08:37.343] | : . ' , ; ` | Appended future to position #1
[08:08:37.344] | : . ' , ; ` | Number of registered futures: 1
[08:08:37.344] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ... done
[08:08:37.344] | : . ' , ; launchFuture() ... done
[08:08:37.344] | : . ' , ; MultisessionFuture started
[08:08:37.344] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:37.344] | : . ' Launching futures ... done
[08:08:37.344] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:37.344] | : . Using MultisessionFutureBackend ... done
[08:08:37.344] | : run() for ‘Future’ (<unnamed-29>) ... done
[08:08:37.345] | future(..., label = NULL) ... done
[08:08:37.345] | value() for MultisessionFuture (<unnamed-29>) ...
[08:08:37.345] | : result() for ClusterFuture ...
[08:08:37.345] | : . assertValidConnection() ...
[08:08:37.345] | : . ' cluster node index: 1
[08:08:37.345] | : . assertValidConnection() ... done
[08:08:37.346] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:37.346] | : . ' cluster node index: 1
[08:08:37.388] | : . ' [1] TRUE
[08:08:37.388] | : . ' received data:
[08:08:37.388] | : . ' List of 5
[08:08:37.388] | : . '  $ type   : chr "VALUE"
[08:08:37.388] | : . '  $ value  :List of 16
[08:08:37.388] | : . '   ..$ value              :List of 2
[08:08:37.388] | : . '   .. ..$ b: num 2
[08:08:37.388] | : . '   .. ..$ a: num 1
[08:08:37.388] | : . '   ..$ visible            : logi TRUE
[08:08:37.388] | : . '   ..$ stdout             : chr ""
[08:08:37.388] | : . '   ..$ conditions         : list()
[08:08:37.388] | : . '   ..$ rng                : logi FALSE
[08:08:37.388] | : . '   ..$ seed               : NULL
[08:08:37.388] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:37.388] | : . '   ..$ misuseConnections  :List of 3
[08:08:37.388] | : . '   .. ..$ added   : NULL
[08:08:37.388] | : . '   .. ..$ removed : NULL
[08:08:37.388] | : . '   .. ..$ replaced: NULL
[08:08:37.388] | : . '   ..$ misuseDevices      : NULL
[08:08:37.388] | : . '   ..$ misuseDefaultDevice: list()
[08:08:37.388] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:37"
[08:08:37.388] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:37"
[08:08:37.388] | : . '   ..$ uuid               : chr [1:2] "3c0c038025b3a5a8ea89664461f5ad46" "29"
[08:08:37.388] | : . '   ..$ session_uuid       : chr "80594d95b504ec13ed9cdeb474cbe50c"
[08:08:37.388] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:37.388] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:37.388] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:37.388] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:37.388] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:37.388] | : . '   .. .. ..$ pid   : int 70405
[08:08:37.388] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:36"
[08:08:37.388] | : . '   .. .. ..$ random: int 2147483647
[08:08:37.388] | : . '   ..$ r_info             :List of 4
[08:08:37.388] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:37.388] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:37.388] | : . '   .. ..$ os           : chr "unix"
[08:08:37.388] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:37.388] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:37.388] | : . '   ..$ version            : chr "1.8"
[08:08:37.388] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:37.388] | : . '  $ success: logi TRUE
[08:08:37.388] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[08:08:37.388] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:37.388] | : . '  $ tag    : NULL
[08:08:37.399] | : . ' Received FutureResult
[08:08:37.400] | : . ' FutureResult:
[08:08:37.400] | : . ' value: ‘list’
[08:08:37.400] | : . ' visible: TRUE
[08:08:37.400] | : . ' stdout: character
[08:08:37.400] | : . ' conditions: [n = 0] 
[08:08:37.400] | : . ' RNG used: FALSE
[08:08:37.400] | : . ' duration: 0.002713919 secs (started 2025-06-17 08:08:37.38481)
[08:08:37.400] | : . ' version: 1.8
[08:08:37.400] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ...
[08:08:37.400] | : . ' , Removed future from position #1
[08:08:37.400] | : . ' , Number of registered futures: 0
[08:08:37.400] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ... done
[08:08:37.401] | : . ' Erased future from future backend
[08:08:37.401] | : . ' result() for ClusterFuture ...
[08:08:37.401] | : . ' , result already collected: FutureResult
[08:08:37.401] | : . ' result() for ClusterFuture ... done
[08:08:37.401] | : . ' signalConditions() ...
[08:08:37.401] | : . ' , include = ‘immediateCondition’
[08:08:37.401] | : . ' , exclude = 
[08:08:37.401] | : . ' , resignal = FALSE
[08:08:37.401] | : . ' , Number of conditions: 0
[08:08:37.402] | : . ' ,  int 0
[08:08:37.402] | : . ' signalConditions() ... done
[08:08:37.402] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:37.402] | : result() for ClusterFuture ... done
[08:08:37.402] | : result() for ClusterFuture ...
[08:08:37.402] | : . result already collected: FutureResult
[08:08:37.402] | : result() for ClusterFuture ... done
[08:08:37.403] | : signalConditions() ...
[08:08:37.403] | : . include = ‘immediateCondition’
[08:08:37.403] | : . exclude = 
[08:08:37.403] | : . resignal = FALSE
[08:08:37.403] | : . Number of conditions: 0
[08:08:37.403] | : .  int 0
[08:08:37.403] | : signalConditions() ... done
[08:08:37.403] | : relay stdout ...
[08:08:37.404] | : relay stdout ... done
[08:08:37.404] | : check for misuse ...
[08:08:37.404] | : check for misuse ... done
[08:08:37.404] | value() for MultisessionFuture (<unnamed-29>) ... done
$b
[1] 2

$a
[1] 1

[08:08:37.404] | future(..., label = NULL) ...
[08:08:37.404] | : lazy: FALSE
[08:08:37.404] | : stdout: TRUE
[08:08:37.404] | : conditions: [n=1] ‘condition’
[08:08:37.404] | : gc: FALSE
[08:08:37.405] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:37.405] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:37.405] | : . Searching for globals ...
[08:08:37.415] | : . ' globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:37.416] | : . Searching for globals ... done
[08:08:37.416] | : . Resolving globals: TRUE
[08:08:37.416] | : . Resolving any globals that are futures ...
[08:08:37.416] | : . ' globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:37.416] | : . Resolving any globals that are futures ... done
[08:08:37.416] | : . Search for packages associated with the globals ...
[08:08:37.416] | : . ' Packages associated with globals: [1] ‘base’
[08:08:37.417] | : . ' Packages: [1] ‘base’
[08:08:37.417] | : . Search for packages associated with the globals ... done
[08:08:37.417] | : . Resolving futures part of globals (recursively) ...
[08:08:37.417] | : . ' resolve() for FutureGlobals ...
[08:08:37.417] | : . ' , recursive: 99
[08:08:37.417] | : . ' , Number of elements: 1
[08:08:37.417] | : . ' , elements: ‘x’
[08:08:37.418] | : . ' , 'obj' is list
[08:08:37.418] | : . ' , resolve(obj, ...) ...
[08:08:37.418] | : . ' , ; resolve() for list ...
[08:08:37.418] | : . ' , ; ` recursive: 98
[08:08:37.418] | : . ' , ; ` Number of elements: 0
[08:08:37.418] | : . ' , ; resolve() for list ... done
[08:08:37.418] | : . ' , resolve(obj, ...) ... done
[08:08:37.418] | : . ' , resolved() for list ...
[08:08:37.418] | : . ' , ; Number of elements: 0
[08:08:37.418] | : . ' , ; Number of futures: 0
[08:08:37.419] | : . ' , resolved() for list ... done
[08:08:37.419] | : . ' , length: 0 (resolved future 1)
[08:08:37.419] | : . ' resolve() for FutureGlobals ... done
[08:08:37.419] | : . ' globals: [1] ‘x’
[08:08:37.419] | : . Resolving futures part of globals (recursively) ... done
[08:08:37.419] | : . Packages after dropping 'base': [0] 
[08:08:37.419] | : . globals: [1] ‘x’
[08:08:37.419] | : . packages: [0] 
[08:08:37.419] | : getGlobalsAndPackages() ... done
[08:08:37.420] | : run() for ‘Future’ (<unnamed-30>) ...
[08:08:37.420] | : . state: ‘created’
[08:08:37.420] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:37.420] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:37.420] | : . Using MultisessionFutureBackend ...
[08:08:37.420] | : . ' Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:08:37.420] | : . ' Launching futures ...
[08:08:37.421] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:37.421] | : . ' , ; Workers: [n=2]
[08:08:37.421] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:37.422] | : . ' , ; FutureRegistry: ‘workers-3bd062d8b9190b31ad6b5a00e5612964’
[08:08:37.422] | : . ' , ; requestWorker() ...
[08:08:37.422] | : . ' , ; ` requestNode() ...
[08:08:37.423] | : . ' , ; ` | Number of workers: 2
[08:08:37.423] | : . ' , ; ` | Polling for a free worker ...
[08:08:37.423] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:37.423] | : . ' , ; ` | : . Listing all futures
[08:08:37.425] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:37.425] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:37.425] | : . ' , ; ` | : Total time: 0
[08:08:37.425] | : . ' , ; ` | Polling for a free worker ... done
[08:08:37.425] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:37.425] | : . ' , ; ` | : Listing all futures
[08:08:37.425] | : . ' , ; ` | : Number of registered futures: 0
[08:08:37.425] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:37.425] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:37.425] | : . ' , ; ` | Index of first available worker: 1
[08:08:37.426] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:37.523] | : . ' , ; ` | : Worker is functional
[08:08:37.523] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:37.523] | : . ' , ; ` | : . Listing all futures
[08:08:37.523] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:37.523] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:37.523] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:37.524] | : . ' , ; ` requestNode() ... done
[08:08:37.524] | : . ' , ; ` cluster node index: 1
[08:08:37.524] | : . ' , ; requestWorker() ... done
[08:08:37.524] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:37.524] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:37.524] | : . ' , ; launchFuture() ...
[08:08:37.525] | : . ' , ; ` cluster node index: 1
[08:08:37.525] | : . ' , ; ` getFutureData() ...
[08:08:37.525] | : . ' , ; ` | getFutureCore() ...
[08:08:37.525] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:37.525] | : . ' , ; ` | getFutureCore() ... done
[08:08:37.525] | : . ' , ; ` | getFutureCapture() ...
[08:08:37.525] | : . ' , ; ` | getFutureCapture() ... done
[08:08:37.525] | : . ' , ; ` | getFutureContext() ...
[08:08:37.525] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:37.525] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:37.526] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:37.526] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:37.526] | : . ' , ; ` | getFutureContext() ... done
[08:08:37.526] | : . ' , ; ` getFutureData() ... done
[08:08:37.526] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ...
[08:08:37.526] | : . ' , ; ` | Appended future to position #1
[08:08:37.526] | : . ' , ; ` | Number of registered futures: 1
[08:08:37.527] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ... done
[08:08:37.527] | : . ' , ; launchFuture() ... done
[08:08:37.527] | : . ' , ; MultisessionFuture started
[08:08:37.527] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:37.527] | : . ' Launching futures ... done
[08:08:37.527] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:37.527] | : . Using MultisessionFutureBackend ... done
[08:08:37.527] | : run() for ‘Future’ (<unnamed-30>) ... done
[08:08:37.527] | future(..., label = NULL) ... done
[08:08:37.527] | value() for MultisessionFuture (<unnamed-30>) ...
[08:08:37.528] | : result() for ClusterFuture ...
[08:08:37.528] | : . assertValidConnection() ...
[08:08:37.528] | : . ' cluster node index: 1
[08:08:37.528] | : . assertValidConnection() ... done
[08:08:37.528] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:37.528] | : . ' cluster node index: 1
[08:08:37.571] | : . ' [1] TRUE
[08:08:37.571] | : . ' received data:
[08:08:37.571] | : . ' List of 5
[08:08:37.571] | : . '  $ type   : chr "VALUE"
[08:08:37.571] | : . '  $ value  :List of 16
[08:08:37.571] | : . '   ..$ value              :List of 1
[08:08:37.571] | : . '   .. ..$ a: num 1
[08:08:37.571] | : . '   ..$ visible            : logi TRUE
[08:08:37.571] | : . '   ..$ stdout             : chr ""
[08:08:37.571] | : . '   ..$ conditions         : list()
[08:08:37.571] | : . '   ..$ rng                : logi FALSE
[08:08:37.571] | : . '   ..$ seed               : NULL
[08:08:37.571] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:37.571] | : . '   ..$ misuseConnections  :List of 3
[08:08:37.571] | : . '   .. ..$ added   : NULL
[08:08:37.571] | : . '   .. ..$ removed : NULL
[08:08:37.571] | : . '   .. ..$ replaced: NULL
[08:08:37.571] | : . '   ..$ misuseDevices      : NULL
[08:08:37.571] | : . '   ..$ misuseDefaultDevice: list()
[08:08:37.571] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:37"
[08:08:37.571] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:37"
[08:08:37.571] | : . '   ..$ uuid               : chr [1:2] "3c0c038025b3a5a8ea89664461f5ad46" "30"
[08:08:37.571] | : . '   ..$ session_uuid       : chr "80594d95b504ec13ed9cdeb474cbe50c"
[08:08:37.571] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:37.571] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:37.571] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:37.571] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:37.571] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:37.571] | : . '   .. .. ..$ pid   : int 70405
[08:08:37.571] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:36"
[08:08:37.571] | : . '   .. .. ..$ random: int 2147483647
[08:08:37.571] | : . '   ..$ r_info             :List of 4
[08:08:37.571] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:37.571] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:37.571] | : . '   .. ..$ os           : chr "unix"
[08:08:37.571] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:37.571] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:37.571] | : . '   ..$ version            : chr "1.8"
[08:08:37.571] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:37.571] | : . '  $ success: logi TRUE
[08:08:37.571] | : . '  $ time   : 'proc_time' Named num [1:5] 0.004 0.001 0.004 0 0
[08:08:37.571] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:37.571] | : . '  $ tag    : NULL
[08:08:37.582] | : . ' Received FutureResult
[08:08:37.582] | : . ' FutureResult:
[08:08:37.582] | : . ' value: ‘list’
[08:08:37.582] | : . ' visible: TRUE
[08:08:37.582] | : . ' stdout: character
[08:08:37.582] | : . ' conditions: [n = 0] 
[08:08:37.582] | : . ' RNG used: FALSE
[08:08:37.582] | : . ' duration: 0.002901793 secs (started 2025-06-17 08:08:37.567808)
[08:08:37.582] | : . ' version: 1.8
[08:08:37.583] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ...
[08:08:37.583] | : . ' , Removed future from position #1
[08:08:37.583] | : . ' , Number of registered futures: 0
[08:08:37.583] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ... done
[08:08:37.583] | : . ' Erased future from future backend
[08:08:37.584] | : . ' result() for ClusterFuture ...
[08:08:37.584] | : . ' , result already collected: FutureResult
[08:08:37.584] | : . ' result() for ClusterFuture ... done
[08:08:37.584] | : . ' signalConditions() ...
[08:08:37.584] | : . ' , include = ‘immediateCondition’
[08:08:37.584] | : . ' , exclude = 
[08:08:37.584] | : . ' , resignal = FALSE
[08:08:37.584] | : . ' , Number of conditions: 0
[08:08:37.584] | : . ' ,  int 0
[08:08:37.585] | : . ' signalConditions() ... done
[08:08:37.585] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:37.585] | : result() for ClusterFuture ... done
[08:08:37.585] | : result() for ClusterFuture ...
[08:08:37.585] | : . result already collected: FutureResult
[08:08:37.585] | : result() for ClusterFuture ... done
[08:08:37.585] | : signalConditions() ...
[08:08:37.586] | : . include = ‘immediateCondition’
[08:08:37.586] | : . exclude = 
[08:08:37.586] | : . resignal = FALSE
[08:08:37.586] | : . Number of conditions: 0
[08:08:37.586] | : .  int 0
[08:08:37.586] | : signalConditions() ... done
[08:08:37.586] | : relay stdout ...
[08:08:37.587] | : relay stdout ... done
[08:08:37.587] | : check for misuse ...
[08:08:37.587] | : check for misuse ... done
[08:08:37.587] | value() for MultisessionFuture (<unnamed-30>) ... done
$a
[1] 1

[08:08:37.587] | future(..., label = NULL) ...
[08:08:37.587] | : lazy: TRUE
[08:08:37.587] | : stdout: TRUE
[08:08:37.587] | : conditions: [n=1] ‘condition’
[08:08:37.587] | : gc: FALSE
[08:08:37.587] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:37.588] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:37.588] | : . Searching for globals ...
[08:08:37.598] | : . ' globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:37.598] | : . Searching for globals ... done
[08:08:37.599] | : . Resolving globals: TRUE
[08:08:37.599] | : . Resolving any globals that are futures ...
[08:08:37.599] | : . ' globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:37.599] | : . Resolving any globals that are futures ... done
[08:08:37.599] | : . Search for packages associated with the globals ...
[08:08:37.599] | : . ' Packages associated with globals: [1] ‘base’
[08:08:37.600] | : . ' Packages: [1] ‘base’
[08:08:37.600] | : . Search for packages associated with the globals ... done
[08:08:37.600] | : . Resolving futures part of globals (recursively) ...
[08:08:37.600] | : . ' resolve() for FutureGlobals ...
[08:08:37.600] | : . ' , recursive: 99
[08:08:37.600] | : . ' , Number of elements: 1
[08:08:37.600] | : . ' , elements: ‘x’
[08:08:37.600] | : . ' , 'obj' is list
[08:08:37.601] | : . ' , resolve(obj, ...) ...
[08:08:37.601] | : . ' , ; resolve() for list ...
[08:08:37.601] | : . ' , ; ` recursive: 98
[08:08:37.601] | : . ' , ; ` Number of elements: 0
[08:08:37.601] | : . ' , ; resolve() for list ... done
[08:08:37.601] | : . ' , resolve(obj, ...) ... done
[08:08:37.601] | : . ' , resolved() for list ...
[08:08:37.601] | : . ' , ; Number of elements: 0
[08:08:37.601] | : . ' , ; Number of futures: 0
[08:08:37.601] | : . ' , resolved() for list ... done
[08:08:37.602] | : . ' , length: 0 (resolved future 1)
[08:08:37.602] | : . ' resolve() for FutureGlobals ... done
[08:08:37.602] | : . ' globals: [1] ‘x’
[08:08:37.602] | : . Resolving futures part of globals (recursively) ... done
[08:08:37.602] | : . Packages after dropping 'base': [0] 
[08:08:37.602] | : . globals: [1] ‘x’
[08:08:37.602] | : . packages: [0] 
[08:08:37.602] | : getGlobalsAndPackages() ... done
[08:08:37.603] | future(..., label = NULL) ... done
[08:08:37.603] | value() for Future (<unnamed-31>) ...
[08:08:37.603] | : run() for ‘Future’ (<unnamed-31>) ...
[08:08:37.603] | : . state: ‘created’
[08:08:37.603] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:37.603] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:37.603] | : . Using MultisessionFutureBackend ...
[08:08:37.603] | : . ' Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:08:37.603] | : . ' Launching futures ...
[08:08:37.604] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:37.604] | : . ' , ; Workers: [n=2]
[08:08:37.604] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:37.605] | : . ' , ; FutureRegistry: ‘workers-3bd062d8b9190b31ad6b5a00e5612964’
[08:08:37.605] | : . ' , ; requestWorker() ...
[08:08:37.606] | : . ' , ; ` requestNode() ...
[08:08:37.606] | : . ' , ; ` | Number of workers: 2
[08:08:37.606] | : . ' , ; ` | Polling for a free worker ...
[08:08:37.606] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:37.606] | : . ' , ; ` | : . Listing all futures
[08:08:37.606] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:37.606] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:37.606] | : . ' , ; ` | : Total time: 0
[08:08:37.606] | : . ' , ; ` | Polling for a free worker ... done
[08:08:37.607] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:37.607] | : . ' , ; ` | : Listing all futures
[08:08:37.607] | : . ' , ; ` | : Number of registered futures: 0
[08:08:37.607] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:37.607] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:37.607] | : . ' , ; ` | Index of first available worker: 1
[08:08:37.607] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:37.703] | : . ' , ; ` | : Worker is functional
[08:08:37.703] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:37.703] | : . ' , ; ` | : . Listing all futures
[08:08:37.703] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:37.703] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:37.704] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:37.704] | : . ' , ; ` requestNode() ... done
[08:08:37.704] | : . ' , ; ` cluster node index: 1
[08:08:37.704] | : . ' , ; requestWorker() ... done
[08:08:37.704] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:37.704] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:37.705] | : . ' , ; launchFuture() ...
[08:08:37.705] | : . ' , ; ` cluster node index: 1
[08:08:37.705] | : . ' , ; ` getFutureData() ...
[08:08:37.705] | : . ' , ; ` | getFutureCore() ...
[08:08:37.705] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:37.705] | : . ' , ; ` | getFutureCore() ... done
[08:08:37.705] | : . ' , ; ` | getFutureCapture() ...
[08:08:37.705] | : . ' , ; ` | getFutureCapture() ... done
[08:08:37.705] | : . ' , ; ` | getFutureContext() ...
[08:08:37.706] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:37.706] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:37.706] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:37.706] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:37.706] | : . ' , ; ` | getFutureContext() ... done
[08:08:37.706] | : . ' , ; ` getFutureData() ... done
[08:08:37.706] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ...
[08:08:37.707] | : . ' , ; ` | Appended future to position #1
[08:08:37.707] | : . ' , ; ` | Number of registered futures: 1
[08:08:37.707] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ... done
[08:08:37.707] | : . ' , ; launchFuture() ... done
[08:08:37.707] | : . ' , ; MultisessionFuture started
[08:08:37.707] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:37.707] | : . ' Launching futures ... done
[08:08:37.707] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:37.707] | : . Using MultisessionFutureBackend ... done
[08:08:37.708] | : run() for ‘Future’ (<unnamed-31>) ... done
[08:08:37.708] | : result() for ClusterFuture ...
[08:08:37.708] | : . assertValidConnection() ...
[08:08:37.708] | : . ' cluster node index: 1
[08:08:37.708] | : . assertValidConnection() ... done
[08:08:37.708] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:37.708] | : . ' cluster node index: 1
[08:08:37.753] | : . ' [1] TRUE
[08:08:37.753] | : . ' received data:
[08:08:37.753] | : . ' List of 5
[08:08:37.753] | : . '  $ type   : chr "VALUE"
[08:08:37.753] | : . '  $ value  :List of 16
[08:08:37.753] | : . '   ..$ value              :List of 1
[08:08:37.753] | : . '   .. ..$ a: num 1
[08:08:37.753] | : . '   ..$ visible            : logi TRUE
[08:08:37.753] | : . '   ..$ stdout             : chr ""
[08:08:37.753] | : . '   ..$ conditions         : list()
[08:08:37.753] | : . '   ..$ rng                : logi FALSE
[08:08:37.753] | : . '   ..$ seed               : NULL
[08:08:37.753] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:37.753] | : . '   ..$ misuseConnections  :List of 3
[08:08:37.753] | : . '   .. ..$ added   : NULL
[08:08:37.753] | : . '   .. ..$ removed : NULL
[08:08:37.753] | : . '   .. ..$ replaced: NULL
[08:08:37.753] | : . '   ..$ misuseDevices      : NULL
[08:08:37.753] | : . '   ..$ misuseDefaultDevice: list()
[08:08:37.753] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:37"
[08:08:37.753] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:37"
[08:08:37.753] | : . '   ..$ uuid               : chr [1:2] "3c0c038025b3a5a8ea89664461f5ad46" "31"
[08:08:37.753] | : . '   ..$ session_uuid       : chr "80594d95b504ec13ed9cdeb474cbe50c"
[08:08:37.753] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:37.753] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:37.753] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:37.753] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:37.753] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:37.753] | : . '   .. .. ..$ pid   : int 70405
[08:08:37.753] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:36"
[08:08:37.753] | : . '   .. .. ..$ random: int 2147483647
[08:08:37.753] | : . '   ..$ r_info             :List of 4
[08:08:37.753] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:37.753] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:37.753] | : . '   .. ..$ os           : chr "unix"
[08:08:37.753] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:37.753] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:37.753] | : . '   ..$ version            : chr "1.8"
[08:08:37.753] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:37.753] | : . '  $ success: logi TRUE
[08:08:37.753] | : . '  $ time   : 'proc_time' Named num [1:5] 0.005 0 0.006 0 0
[08:08:37.753] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:37.753] | : . '  $ tag    : NULL
[08:08:37.766] | : . ' Received FutureResult
[08:08:37.766] | : . ' FutureResult:
[08:08:37.766] | : . ' value: ‘list’
[08:08:37.766] | : . ' visible: TRUE
[08:08:37.766] | : . ' stdout: character
[08:08:37.766] | : . ' conditions: [n = 0] 
[08:08:37.766] | : . ' RNG used: FALSE
[08:08:37.766] | : . ' duration: 0.00478816 secs (started 2025-06-17 08:08:37.747886)
[08:08:37.766] | : . ' version: 1.8
[08:08:37.767] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ...
[08:08:37.767] | : . ' , Removed future from position #1
[08:08:37.767] | : . ' , Number of registered futures: 0
[08:08:37.767] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ... done
[08:08:37.767] | : . ' Erased future from future backend
[08:08:37.768] | : . ' result() for ClusterFuture ...
[08:08:37.768] | : . ' , result already collected: FutureResult
[08:08:37.768] | : . ' result() for ClusterFuture ... done
[08:08:37.768] | : . ' signalConditions() ...
[08:08:37.768] | : . ' , include = ‘immediateCondition’
[08:08:37.768] | : . ' , exclude = 
[08:08:37.768] | : . ' , resignal = FALSE
[08:08:37.768] | : . ' , Number of conditions: 0
[08:08:37.768] | : . ' ,  int 0
[08:08:37.769] | : . ' signalConditions() ... done
[08:08:37.769] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:37.769] | : result() for ClusterFuture ... done
[08:08:37.769] | : result() for ClusterFuture ...
[08:08:37.769] | : . result already collected: FutureResult
[08:08:37.769] | : result() for ClusterFuture ... done
[08:08:37.769] | : signalConditions() ...
[08:08:37.769] | : . include = ‘immediateCondition’
[08:08:37.770] | : . exclude = 
[08:08:37.770] | : . resignal = FALSE
[08:08:37.770] | : . Number of conditions: 0
[08:08:37.770] | : .  int 0
[08:08:37.770] | : signalConditions() ... done
[08:08:37.770] | : relay stdout ...
[08:08:37.770] | : relay stdout ... done
[08:08:37.770] | : check for misuse ...
[08:08:37.771] | : check for misuse ... done
[08:08:37.771] | value() for Future (<unnamed-31>) ... done
$a
[1] 1

[08:08:37.771] | future(..., label = NULL) ...
[08:08:37.771] | : lazy: FALSE
[08:08:37.771] | : stdout: TRUE
[08:08:37.771] | : conditions: [n=1] ‘condition’
[08:08:37.771] | : gc: FALSE
[08:08:37.771] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:37.772] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:37.772] | : . Searching for globals ...
[08:08:37.782] | : . ' globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:37.783] | : . Searching for globals ... done
[08:08:37.783] | : . Resolving globals: TRUE
[08:08:37.783] | : . Resolving any globals that are futures ...
[08:08:37.783] | : . ' globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[08:08:37.783] | : . Resolving any globals that are futures ... done
[08:08:37.783] | : . Search for packages associated with the globals ...
[08:08:37.783] | : . ' Packages associated with globals: [1] ‘base’
[08:08:37.784] | : . ' Packages: [1] ‘base’
[08:08:37.784] | : . Search for packages associated with the globals ... done
[08:08:37.784] | : . Resolving futures part of globals (recursively) ...
[08:08:37.784] | : . ' resolve() for FutureGlobals ...
[08:08:37.784] | : . ' , recursive: 99
[08:08:37.784] | : . ' , Number of elements: 1
[08:08:37.784] | : . ' , elements: ‘x’
[08:08:37.785] | : . ' , 'obj' is list
[08:08:37.785] | : . ' , resolve(obj, ...) ...
[08:08:37.785] | : . ' , ; resolve() for list ...
[08:08:37.785] | : . ' , ; ` recursive: 98
[08:08:37.785] | : . ' , ; ` Number of elements: 0
[08:08:37.785] | : . ' , ; resolve() for list ... done
[08:08:37.785] | : . ' , resolve(obj, ...) ... done
[08:08:37.785] | : . ' , resolved() for list ...
[08:08:37.785] | : . ' , ; Number of elements: 0
[08:08:37.785] | : . ' , ; Number of futures: 0
[08:08:37.785] | : . ' , resolved() for list ... done
[08:08:37.786] | : . ' , length: 0 (resolved future 1)
[08:08:37.786] | : . ' resolve() for FutureGlobals ... done
[08:08:37.786] | : . ' globals: [1] ‘x’
[08:08:37.786] | : . Resolving futures part of globals (recursively) ... done
[08:08:37.786] | : . Packages after dropping 'base': [0] 
[08:08:37.786] | : . globals: [1] ‘x’
[08:08:37.786] | : . packages: [0] 
[08:08:37.786] | : getGlobalsAndPackages() ... done
[08:08:37.787] | : run() for ‘Future’ (<unnamed-32>) ...
[08:08:37.787] | : . state: ‘created’
[08:08:37.787] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:37.787] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:37.787] | : . Using MultisessionFutureBackend ...
[08:08:37.787] | : . ' Number of futures since start: 7 (7 created, 7 launched, 7 finished)
[08:08:37.787] | : . ' Launching futures ...
[08:08:37.787] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:37.788] | : . ' , ; Workers: [n=2]
[08:08:37.788] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:37.789] | : . ' , ; FutureRegistry: ‘workers-3bd062d8b9190b31ad6b5a00e5612964’
[08:08:37.789] | : . ' , ; requestWorker() ...
[08:08:37.789] | : . ' , ; ` requestNode() ...
[08:08:37.789] | : . ' , ; ` | Number of workers: 2
[08:08:37.790] | : . ' , ; ` | Polling for a free worker ...
[08:08:37.790] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:37.790] | : . ' , ; ` | : . Listing all futures
[08:08:37.790] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:37.790] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:37.790] | : . ' , ; ` | : Total time: 0
[08:08:37.790] | : . ' , ; ` | Polling for a free worker ... done
[08:08:37.790] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:37.790] | : . ' , ; ` | : Listing all futures
[08:08:37.790] | : . ' , ; ` | : Number of registered futures: 0
[08:08:37.791] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:37.791] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:37.791] | : . ' , ; ` | Index of first available worker: 1
[08:08:37.791] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:37.887] | : . ' , ; ` | : Worker is functional
[08:08:37.888] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:37.888] | : . ' , ; ` | : . Listing all futures
[08:08:37.888] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:37.888] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:37.888] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:37.888] | : . ' , ; ` requestNode() ... done
[08:08:37.888] | : . ' , ; ` cluster node index: 1
[08:08:37.889] | : . ' , ; requestWorker() ... done
[08:08:37.889] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:37.889] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:37.889] | : . ' , ; launchFuture() ...
[08:08:37.889] | : . ' , ; ` cluster node index: 1
[08:08:37.889] | : . ' , ; ` getFutureData() ...
[08:08:37.890] | : . ' , ; ` | getFutureCore() ...
[08:08:37.890] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:37.890] | : . ' , ; ` | getFutureCore() ... done
[08:08:37.890] | : . ' , ; ` | getFutureCapture() ...
[08:08:37.890] | : . ' , ; ` | getFutureCapture() ... done
[08:08:37.890] | : . ' , ; ` | getFutureContext() ...
[08:08:37.890] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:37.890] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:37.890] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:37.891] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:37.891] | : . ' , ; ` | getFutureContext() ... done
[08:08:37.891] | : . ' , ; ` getFutureData() ... done
[08:08:37.891] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ...
[08:08:37.891] | : . ' , ; ` | Appended future to position #1
[08:08:37.891] | : . ' , ; ` | Number of registered futures: 1
[08:08:37.892] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ... done
[08:08:37.892] | : . ' , ; launchFuture() ... done
[08:08:37.892] | : . ' , ; MultisessionFuture started
[08:08:37.892] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:37.892] | : . ' Launching futures ... done
[08:08:37.892] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:37.892] | : . Using MultisessionFutureBackend ... done
[08:08:37.892] | : run() for ‘Future’ (<unnamed-32>) ... done
[08:08:37.892] | future(..., label = NULL) ... done
[08:08:37.893] | value() for MultisessionFuture (<unnamed-32>) ...
[08:08:37.893] | : result() for ClusterFuture ...
[08:08:37.893] | : . assertValidConnection() ...
[08:08:37.893] | : . ' cluster node index: 1
[08:08:37.893] | : . assertValidConnection() ... done
[08:08:37.893] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:37.894] | : . ' cluster node index: 1
[08:08:37.936] | : . ' [1] TRUE
[08:08:37.936] | : . ' received data:
[08:08:37.936] | : . ' List of 5
[08:08:37.936] | : . '  $ type   : chr "VALUE"
[08:08:37.936] | : . '  $ value  :List of 16
[08:08:37.936] | : . '   ..$ value              :List of 1
[08:08:37.936] | : . '   .. ..$ a: num 1
[08:08:37.936] | : . '   ..$ visible            : logi TRUE
[08:08:37.936] | : . '   ..$ stdout             : chr ""
[08:08:37.936] | : . '   ..$ conditions         : list()
[08:08:37.936] | : . '   ..$ rng                : logi FALSE
[08:08:37.936] | : . '   ..$ seed               : NULL
[08:08:37.936] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:37.936] | : . '   ..$ misuseConnections  :List of 3
[08:08:37.936] | : . '   .. ..$ added   : NULL
[08:08:37.936] | : . '   .. ..$ removed : NULL
[08:08:37.936] | : . '   .. ..$ replaced: NULL
[08:08:37.936] | : . '   ..$ misuseDevices      : NULL
[08:08:37.936] | : . '   ..$ misuseDefaultDevice: list()
[08:08:37.936] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:37"
[08:08:37.936] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:37"
[08:08:37.936] | : . '   ..$ uuid               : chr [1:2] "3c0c038025b3a5a8ea89664461f5ad46" "32"
[08:08:37.936] | : . '   ..$ session_uuid       : chr "80594d95b504ec13ed9cdeb474cbe50c"
[08:08:37.936] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:37.936] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:37.936] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:37.936] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:37.936] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:37.936] | : . '   .. .. ..$ pid   : int 70405
[08:08:37.936] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:36"
[08:08:37.936] | : . '   .. .. ..$ random: int 2147483647
[08:08:37.936] | : . '   ..$ r_info             :List of 4
[08:08:37.936] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:37.936] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:37.936] | : . '   .. ..$ os           : chr "unix"
[08:08:37.936] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:37.936] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:37.936] | : . '   ..$ version            : chr "1.8"
[08:08:37.936] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:37.936] | : . '  $ success: logi TRUE
[08:08:37.936] | : . '  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[08:08:37.936] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:37.936] | : . '  $ tag    : NULL
[08:08:37.948] | : . ' Received FutureResult
[08:08:37.948] | : . ' FutureResult:
[08:08:37.948] | : . ' value: ‘list’
[08:08:37.948] | : . ' visible: TRUE
[08:08:37.948] | : . ' stdout: character
[08:08:37.948] | : . ' conditions: [n = 0] 
[08:08:37.948] | : . ' RNG used: FALSE
[08:08:37.948] | : . ' duration: 0.002999783 secs (started 2025-06-17 08:08:37.932851)
[08:08:37.948] | : . ' version: 1.8
[08:08:37.948] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ...
[08:08:37.948] | : . ' , Removed future from position #1
[08:08:37.949] | : . ' , Number of registered futures: 0
[08:08:37.949] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ... done
[08:08:37.949] | : . ' Erased future from future backend
[08:08:37.949] | : . ' result() for ClusterFuture ...
[08:08:37.949] | : . ' , result already collected: FutureResult
[08:08:37.949] | : . ' result() for ClusterFuture ... done
[08:08:37.949] | : . ' signalConditions() ...
[08:08:37.949] | : . ' , include = ‘immediateCondition’
[08:08:37.949] | : . ' , exclude = 
[08:08:37.949] | : . ' , resignal = FALSE
[08:08:37.950] | : . ' , Number of conditions: 0
[08:08:37.950] | : . ' ,  int 0
[08:08:37.950] | : . ' signalConditions() ... done
[08:08:37.950] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:37.950] | : result() for ClusterFuture ... done
[08:08:37.950] | : result() for ClusterFuture ...
[08:08:37.951] | : . result already collected: FutureResult
[08:08:37.951] | : result() for ClusterFuture ... done
[08:08:37.951] | : signalConditions() ...
[08:08:37.951] | : . include = ‘immediateCondition’
[08:08:37.951] | : . exclude = 
[08:08:37.951] | : . resignal = FALSE
[08:08:37.951] | : . Number of conditions: 0
[08:08:37.951] | : .  int 0
[08:08:37.952] | : signalConditions() ... done
[08:08:37.952] | : relay stdout ...
[08:08:37.952] | : relay stdout ... done
[08:08:37.952] | : check for misuse ...
[08:08:37.952] | : check for misuse ... done
[08:08:37.952] | value() for MultisessionFuture (<unnamed-32>) ... done
$a
[1] 1

[08:08:37.952] | future(..., label = NULL) ...
[08:08:37.952] | : lazy: FALSE
[08:08:37.953] | : stdout: TRUE
[08:08:37.953] | : conditions: [n=1] ‘condition’
[08:08:37.953] | : gc: FALSE
[08:08:37.953] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:37.953] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:37.953] | : . Searching for globals ...
[08:08:37.967] | : . ' globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:37.967] | : . Searching for globals ... done
[08:08:37.967] | : . Resolving globals: TRUE
[08:08:37.967] | : . Resolving any globals that are futures ...
[08:08:37.967] | : . ' globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:37.967] | : . Resolving any globals that are futures ... done
[08:08:37.968] | : . Search for packages associated with the globals ...
[08:08:37.968] | : . ' Packages associated with globals: [1] ‘base’
[08:08:37.968] | : . ' Packages: [1] ‘base’
[08:08:37.968] | : . Search for packages associated with the globals ... done
[08:08:37.968] | : . Resolving futures part of globals (recursively) ...
[08:08:37.968] | : . ' resolve() for FutureGlobals ...
[08:08:37.968] | : . ' , recursive: 99
[08:08:37.969] | : . ' , Number of elements: 1
[08:08:37.969] | : . ' , elements: ‘x’
[08:08:37.969] | : . ' , 'obj' is list
[08:08:37.969] | : . ' , resolve(obj, ...) ...
[08:08:37.969] | : . ' , ; resolve() for list ...
[08:08:37.969] | : . ' , ; ` recursive: 98
[08:08:37.969] | : . ' , ; ` Number of elements: 0
[08:08:37.969] | : . ' , ; resolve() for list ... done
[08:08:37.970] | : . ' , resolve(obj, ...) ... done
[08:08:37.970] | : . ' , resolved() for list ...
[08:08:37.970] | : . ' , ; Number of elements: 0
[08:08:37.970] | : . ' , ; Number of futures: 0
[08:08:37.970] | : . ' , resolved() for list ... done
[08:08:37.970] | : . ' , length: 0 (resolved future 1)
[08:08:37.970] | : . ' resolve() for FutureGlobals ... done
[08:08:37.970] | : . ' globals: [1] ‘x’
[08:08:37.970] | : . Resolving futures part of globals (recursively) ... done
[08:08:37.970] | : . Packages after dropping 'base': [0] 
[08:08:37.971] | : . globals: [1] ‘x’
[08:08:37.971] | : . packages: [0] 
[08:08:37.971] | : getGlobalsAndPackages() ... done
[08:08:37.971] | : run() for ‘Future’ (<unnamed-33>) ...
[08:08:37.971] | : . state: ‘created’
[08:08:37.971] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:37.971] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:37.971] | : . Using MultisessionFutureBackend ...
[08:08:37.972] | : . ' Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:08:37.972] | : . ' Launching futures ...
[08:08:37.972] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:37.972] | : . ' , ; Workers: [n=2]
[08:08:37.972] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:37.973] | : . ' , ; FutureRegistry: ‘workers-3bd062d8b9190b31ad6b5a00e5612964’
[08:08:37.974] | : . ' , ; requestWorker() ...
[08:08:37.974] | : . ' , ; ` requestNode() ...
[08:08:37.974] | : . ' , ; ` | Number of workers: 2
[08:08:37.974] | : . ' , ; ` | Polling for a free worker ...
[08:08:37.974] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:37.974] | : . ' , ; ` | : . Listing all futures
[08:08:37.974] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:37.974] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:37.974] | : . ' , ; ` | : Total time: 0
[08:08:37.974] | : . ' , ; ` | Polling for a free worker ... done
[08:08:37.975] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:37.975] | : . ' , ; ` | : Listing all futures
[08:08:37.975] | : . ' , ; ` | : Number of registered futures: 0
[08:08:37.975] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:37.975] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:37.975] | : . ' , ; ` | Index of first available worker: 1
[08:08:37.975] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:38.075] | : . ' , ; ` | : Worker is functional
[08:08:38.075] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:38.075] | : . ' , ; ` | : . Listing all futures
[08:08:38.075] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:38.075] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:38.075] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:38.076] | : . ' , ; ` requestNode() ... done
[08:08:38.076] | : . ' , ; ` cluster node index: 1
[08:08:38.076] | : . ' , ; requestWorker() ... done
[08:08:38.076] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:38.076] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:38.077] | : . ' , ; launchFuture() ...
[08:08:38.077] | : . ' , ; ` cluster node index: 1
[08:08:38.077] | : . ' , ; ` getFutureData() ...
[08:08:38.077] | : . ' , ; ` | getFutureCore() ...
[08:08:38.077] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:38.077] | : . ' , ; ` | getFutureCore() ... done
[08:08:38.077] | : . ' , ; ` | getFutureCapture() ...
[08:08:38.077] | : . ' , ; ` | getFutureCapture() ... done
[08:08:38.077] | : . ' , ; ` | getFutureContext() ...
[08:08:38.077] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:38.078] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:38.078] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:38.078] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:38.078] | : . ' , ; ` | getFutureContext() ... done
[08:08:38.078] | : . ' , ; ` getFutureData() ... done
[08:08:38.078] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ...
[08:08:38.078] | : . ' , ; ` | Appended future to position #1
[08:08:38.079] | : . ' , ; ` | Number of registered futures: 1
[08:08:38.079] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ... done
[08:08:38.079] | : . ' , ; launchFuture() ... done
[08:08:38.079] | : . ' , ; MultisessionFuture started
[08:08:38.079] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:38.079] | : . ' Launching futures ... done
[08:08:38.079] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:38.079] | : . Using MultisessionFutureBackend ... done
[08:08:38.079] | : run() for ‘Future’ (<unnamed-33>) ... done
[08:08:38.080] | future(..., label = NULL) ... done
[08:08:38.080] | value() for MultisessionFuture (<unnamed-33>) ...
[08:08:38.080] | : result() for ClusterFuture ...
[08:08:38.080] | : . assertValidConnection() ...
[08:08:38.080] | : . ' cluster node index: 1
[08:08:38.080] | : . assertValidConnection() ... done
[08:08:38.081] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:38.081] | : . ' cluster node index: 1
[08:08:38.122] | : . ' [1] TRUE
[08:08:38.123] | : . ' received data:
[08:08:38.123] | : . ' List of 5
[08:08:38.123] | : . '  $ type   : chr "VALUE"
[08:08:38.123] | : . '  $ value  :List of 16
[08:08:38.123] | : . '   ..$ value              :List of 1
[08:08:38.123] | : . '   .. ..$ a: num 1
[08:08:38.123] | : . '   ..$ visible            : logi TRUE
[08:08:38.123] | : . '   ..$ stdout             : chr ""
[08:08:38.123] | : . '   ..$ conditions         : list()
[08:08:38.123] | : . '   ..$ rng                : logi FALSE
[08:08:38.123] | : . '   ..$ seed               : NULL
[08:08:38.123] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:38.123] | : . '   ..$ misuseConnections  :List of 3
[08:08:38.123] | : . '   .. ..$ added   : NULL
[08:08:38.123] | : . '   .. ..$ removed : NULL
[08:08:38.123] | : . '   .. ..$ replaced: NULL
[08:08:38.123] | : . '   ..$ misuseDevices      : NULL
[08:08:38.123] | : . '   ..$ misuseDefaultDevice: list()
[08:08:38.123] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:38"
[08:08:38.123] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:38"
[08:08:38.123] | : . '   ..$ uuid               : chr [1:2] "3c0c038025b3a5a8ea89664461f5ad46" "33"
[08:08:38.123] | : . '   ..$ session_uuid       : chr "80594d95b504ec13ed9cdeb474cbe50c"
[08:08:38.123] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:38.123] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:38.123] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:38.123] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:38.123] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:38.123] | : . '   .. .. ..$ pid   : int 70405
[08:08:38.123] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:36"
[08:08:38.123] | : . '   .. .. ..$ random: int 2147483647
[08:08:38.123] | : . '   ..$ r_info             :List of 4
[08:08:38.123] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:38.123] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:38.123] | : . '   .. ..$ os           : chr "unix"
[08:08:38.123] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:38.123] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:38.123] | : . '   ..$ version            : chr "1.8"
[08:08:38.123] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:38.123] | : . '  $ success: logi TRUE
[08:08:38.123] | : . '  $ time   : 'proc_time' Named num [1:5] 0.002 0 0.003 0 0
[08:08:38.123] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:38.123] | : . '  $ tag    : NULL
[08:08:38.134] | : . ' Received FutureResult
[08:08:38.134] | : . ' FutureResult:
[08:08:38.134] | : . ' value: ‘list’
[08:08:38.134] | : . ' visible: TRUE
[08:08:38.134] | : . ' stdout: character
[08:08:38.134] | : . ' conditions: [n = 0] 
[08:08:38.134] | : . ' RNG used: FALSE
[08:08:38.134] | : . ' duration: 0.002575636 secs (started 2025-06-17 08:08:38.11988)
[08:08:38.134] | : . ' version: 1.8
[08:08:38.135] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ...
[08:08:38.135] | : . ' , Removed future from position #1
[08:08:38.135] | : . ' , Number of registered futures: 0
[08:08:38.135] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ... done
[08:08:38.135] | : . ' Erased future from future backend
[08:08:38.135] | : . ' result() for ClusterFuture ...
[08:08:38.135] | : . ' , result already collected: FutureResult
[08:08:38.136] | : . ' result() for ClusterFuture ... done
[08:08:38.136] | : . ' signalConditions() ...
[08:08:38.136] | : . ' , include = ‘immediateCondition’
[08:08:38.136] | : . ' , exclude = 
[08:08:38.136] | : . ' , resignal = FALSE
[08:08:38.136] | : . ' , Number of conditions: 0
[08:08:38.136] | : . ' ,  int 0
[08:08:38.137] | : . ' signalConditions() ... done
[08:08:38.137] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:38.137] | : result() for ClusterFuture ... done
[08:08:38.137] | : result() for ClusterFuture ...
[08:08:38.137] | : . result already collected: FutureResult
[08:08:38.137] | : result() for ClusterFuture ... done
[08:08:38.137] | : signalConditions() ...
[08:08:38.137] | : . include = ‘immediateCondition’
[08:08:38.137] | : . exclude = 
[08:08:38.137] | : . resignal = FALSE
[08:08:38.138] | : . Number of conditions: 0
[08:08:38.138] | : .  int 0
[08:08:38.138] | : signalConditions() ... done
[08:08:38.138] | : relay stdout ...
[08:08:38.138] | : relay stdout ... done
[08:08:38.138] | : check for misuse ...
[08:08:38.138] | : check for misuse ... done
[08:08:38.139] | value() for MultisessionFuture (<unnamed-33>) ... done
$a
[1] 1

[08:08:38.139] | future(..., label = NULL) ...
[08:08:38.139] | : lazy: TRUE
[08:08:38.139] | : stdout: TRUE
[08:08:38.139] | : conditions: [n=1] ‘condition’
[08:08:38.139] | : gc: FALSE
[08:08:38.139] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:38.139] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:38.140] | : . Searching for globals ...
[08:08:38.152] | : . ' globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:38.152] | : . Searching for globals ... done
[08:08:38.152] | : . Resolving globals: TRUE
[08:08:38.152] | : . Resolving any globals that are futures ...
[08:08:38.152] | : . ' globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:38.152] | : . Resolving any globals that are futures ... done
[08:08:38.152] | : . Search for packages associated with the globals ...
[08:08:38.153] | : . ' Packages associated with globals: [1] ‘base’
[08:08:38.153] | : . ' Packages: [1] ‘base’
[08:08:38.153] | : . Search for packages associated with the globals ... done
[08:08:38.153] | : . Resolving futures part of globals (recursively) ...
[08:08:38.153] | : . ' resolve() for FutureGlobals ...
[08:08:38.153] | : . ' , recursive: 99
[08:08:38.154] | : . ' , Number of elements: 1
[08:08:38.154] | : . ' , elements: ‘x’
[08:08:38.154] | : . ' , 'obj' is list
[08:08:38.154] | : . ' , resolve(obj, ...) ...
[08:08:38.154] | : . ' , ; resolve() for list ...
[08:08:38.154] | : . ' , ; ` recursive: 98
[08:08:38.154] | : . ' , ; ` Number of elements: 0
[08:08:38.154] | : . ' , ; resolve() for list ... done
[08:08:38.154] | : . ' , resolve(obj, ...) ... done
[08:08:38.155] | : . ' , resolved() for list ...
[08:08:38.155] | : . ' , ; Number of elements: 0
[08:08:38.155] | : . ' , ; Number of futures: 0
[08:08:38.155] | : . ' , resolved() for list ... done
[08:08:38.155] | : . ' , length: 0 (resolved future 1)
[08:08:38.155] | : . ' resolve() for FutureGlobals ... done
[08:08:38.155] | : . ' globals: [1] ‘x’
[08:08:38.155] | : . Resolving futures part of globals (recursively) ... done
[08:08:38.155] | : . Packages after dropping 'base': [0] 
[08:08:38.155] | : . globals: [1] ‘x’
[08:08:38.156] | : . packages: [0] 
[08:08:38.156] | : getGlobalsAndPackages() ... done
[08:08:38.156] | future(..., label = NULL) ... done
[08:08:38.156] | value() for Future (<unnamed-34>) ...
[08:08:38.156] | : run() for ‘Future’ (<unnamed-34>) ...
[08:08:38.156] | : . state: ‘created’
[08:08:38.156] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:38.157] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:38.157] | : . Using MultisessionFutureBackend ...
[08:08:38.157] | : . ' Number of futures since start: 9 (9 created, 9 launched, 9 finished)
[08:08:38.157] | : . ' Launching futures ...
[08:08:38.157] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:38.157] | : . ' , ; Workers: [n=2]
[08:08:38.157] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:38.159] | : . ' , ; FutureRegistry: ‘workers-3bd062d8b9190b31ad6b5a00e5612964’
[08:08:38.159] | : . ' , ; requestWorker() ...
[08:08:38.159] | : . ' , ; ` requestNode() ...
[08:08:38.159] | : . ' , ; ` | Number of workers: 2
[08:08:38.159] | : . ' , ; ` | Polling for a free worker ...
[08:08:38.159] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:38.159] | : . ' , ; ` | : . Listing all futures
[08:08:38.159] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:38.160] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:38.160] | : . ' , ; ` | : Total time: 0
[08:08:38.160] | : . ' , ; ` | Polling for a free worker ... done
[08:08:38.160] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:38.160] | : . ' , ; ` | : Listing all futures
[08:08:38.160] | : . ' , ; ` | : Number of registered futures: 0
[08:08:38.160] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:38.160] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:38.160] | : . ' , ; ` | Index of first available worker: 1
[08:08:38.160] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:38.257] | : . ' , ; ` | : Worker is functional
[08:08:38.257] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:38.257] | : . ' , ; ` | : . Listing all futures
[08:08:38.257] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:38.257] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:38.257] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:38.258] | : . ' , ; ` requestNode() ... done
[08:08:38.258] | : . ' , ; ` cluster node index: 1
[08:08:38.258] | : . ' , ; requestWorker() ... done
[08:08:38.258] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:38.258] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:38.258] | : . ' , ; launchFuture() ...
[08:08:38.259] | : . ' , ; ` cluster node index: 1
[08:08:38.259] | : . ' , ; ` getFutureData() ...
[08:08:38.259] | : . ' , ; ` | getFutureCore() ...
[08:08:38.259] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:38.259] | : . ' , ; ` | getFutureCore() ... done
[08:08:38.259] | : . ' , ; ` | getFutureCapture() ...
[08:08:38.259] | : . ' , ; ` | getFutureCapture() ... done
[08:08:38.259] | : . ' , ; ` | getFutureContext() ...
[08:08:38.259] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:38.261] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:38.261] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:38.261] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:38.262] | : . ' , ; ` | getFutureContext() ... done
[08:08:38.262] | : . ' , ; ` getFutureData() ... done
[08:08:38.262] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ...
[08:08:38.262] | : . ' , ; ` | Appended future to position #1
[08:08:38.262] | : . ' , ; ` | Number of registered futures: 1
[08:08:38.262] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ... done
[08:08:38.262] | : . ' , ; launchFuture() ... done
[08:08:38.263] | : . ' , ; MultisessionFuture started
[08:08:38.263] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:38.263] | : . ' Launching futures ... done
[08:08:38.263] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:38.263] | : . Using MultisessionFutureBackend ... done
[08:08:38.263] | : run() for ‘Future’ (<unnamed-34>) ... done
[08:08:38.263] | : result() for ClusterFuture ...
[08:08:38.263] | : . assertValidConnection() ...
[08:08:38.263] | : . ' cluster node index: 1
[08:08:38.264] | : . assertValidConnection() ... done
[08:08:38.264] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:38.264] | : . ' cluster node index: 1
[08:08:38.306] | : . ' [1] TRUE
[08:08:38.306] | : . ' received data:
[08:08:38.306] | : . ' List of 5
[08:08:38.306] | : . '  $ type   : chr "VALUE"
[08:08:38.306] | : . '  $ value  :List of 16
[08:08:38.306] | : . '   ..$ value              :List of 1
[08:08:38.306] | : . '   .. ..$ a: num 1
[08:08:38.306] | : . '   ..$ visible            : logi TRUE
[08:08:38.306] | : . '   ..$ stdout             : chr ""
[08:08:38.306] | : . '   ..$ conditions         : list()
[08:08:38.306] | : . '   ..$ rng                : logi FALSE
[08:08:38.306] | : . '   ..$ seed               : NULL
[08:08:38.306] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:38.306] | : . '   ..$ misuseConnections  :List of 3
[08:08:38.306] | : . '   .. ..$ added   : NULL
[08:08:38.306] | : . '   .. ..$ removed : NULL
[08:08:38.306] | : . '   .. ..$ replaced: NULL
[08:08:38.306] | : . '   ..$ misuseDevices      : NULL
[08:08:38.306] | : . '   ..$ misuseDefaultDevice: list()
[08:08:38.306] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:38"
[08:08:38.306] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:38"
[08:08:38.306] | : . '   ..$ uuid               : chr [1:2] "3c0c038025b3a5a8ea89664461f5ad46" "34"
[08:08:38.306] | : . '   ..$ session_uuid       : chr "80594d95b504ec13ed9cdeb474cbe50c"
[08:08:38.306] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:38.306] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:38.306] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:38.306] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:38.306] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:38.306] | : . '   .. .. ..$ pid   : int 70405
[08:08:38.306] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:36"
[08:08:38.306] | : . '   .. .. ..$ random: int 2147483647
[08:08:38.306] | : . '   ..$ r_info             :List of 4
[08:08:38.306] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:38.306] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:38.306] | : . '   .. ..$ os           : chr "unix"
[08:08:38.306] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:38.306] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:38.306] | : . '   ..$ version            : chr "1.8"
[08:08:38.306] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:38.306] | : . '  $ success: logi TRUE
[08:08:38.306] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[08:08:38.306] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:38.306] | : . '  $ tag    : NULL
[08:08:38.317] | : . ' Received FutureResult
[08:08:38.317] | : . ' FutureResult:
[08:08:38.317] | : . ' value: ‘list’
[08:08:38.317] | : . ' visible: TRUE
[08:08:38.317] | : . ' stdout: character
[08:08:38.317] | : . ' conditions: [n = 0] 
[08:08:38.317] | : . ' RNG used: FALSE
[08:08:38.317] | : . ' duration: 0.002805948 secs (started 2025-06-17 08:08:38.302903)
[08:08:38.317] | : . ' version: 1.8
[08:08:38.318] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ...
[08:08:38.318] | : . ' , Removed future from position #1
[08:08:38.318] | : . ' , Number of registered futures: 0
[08:08:38.318] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ... done
[08:08:38.318] | : . ' Erased future from future backend
[08:08:38.318] | : . ' result() for ClusterFuture ...
[08:08:38.318] | : . ' , result already collected: FutureResult
[08:08:38.319] | : . ' result() for ClusterFuture ... done
[08:08:38.319] | : . ' signalConditions() ...
[08:08:38.319] | : . ' , include = ‘immediateCondition’
[08:08:38.319] | : . ' , exclude = 
[08:08:38.319] | : . ' , resignal = FALSE
[08:08:38.319] | : . ' , Number of conditions: 0
[08:08:38.319] | : . ' ,  int 0
[08:08:38.320] | : . ' signalConditions() ... done
[08:08:38.320] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:38.320] | : result() for ClusterFuture ... done
[08:08:38.320] | : result() for ClusterFuture ...
[08:08:38.320] | : . result already collected: FutureResult
[08:08:38.320] | : result() for ClusterFuture ... done
[08:08:38.320] | : signalConditions() ...
[08:08:38.320] | : . include = ‘immediateCondition’
[08:08:38.320] | : . exclude = 
[08:08:38.321] | : . resignal = FALSE
[08:08:38.321] | : . Number of conditions: 0
[08:08:38.321] | : .  int 0
[08:08:38.321] | : signalConditions() ... done
[08:08:38.321] | : relay stdout ...
[08:08:38.321] | : relay stdout ... done
[08:08:38.321] | : check for misuse ...
[08:08:38.322] | : check for misuse ... done
[08:08:38.322] | value() for Future (<unnamed-34>) ... done
$a
[1] 1

[08:08:38.322] | future(..., label = NULL) ...
[08:08:38.322] | : lazy: FALSE
[08:08:38.322] | : stdout: TRUE
[08:08:38.322] | : conditions: [n=1] ‘condition’
[08:08:38.322] | : gc: FALSE
[08:08:38.322] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:38.323] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:38.323] | : . Searching for globals ...
[08:08:38.335] | : . ' globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:38.335] | : . Searching for globals ... done
[08:08:38.335] | : . Resolving globals: TRUE
[08:08:38.335] | : . Resolving any globals that are futures ...
[08:08:38.335] | : . ' globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[08:08:38.335] | : . Resolving any globals that are futures ... done
[08:08:38.335] | : . Search for packages associated with the globals ...
[08:08:38.336] | : . ' Packages associated with globals: [1] ‘base’
[08:08:38.336] | : . ' Packages: [1] ‘base’
[08:08:38.336] | : . Search for packages associated with the globals ... done
[08:08:38.336] | : . Resolving futures part of globals (recursively) ...
[08:08:38.336] | : . ' resolve() for FutureGlobals ...
[08:08:38.336] | : . ' , recursive: 99
[08:08:38.337] | : . ' , Number of elements: 1
[08:08:38.337] | : . ' , elements: ‘x’
[08:08:38.337] | : . ' , 'obj' is list
[08:08:38.337] | : . ' , resolve(obj, ...) ...
[08:08:38.337] | : . ' , ; resolve() for list ...
[08:08:38.337] | : . ' , ; ` recursive: 98
[08:08:38.337] | : . ' , ; ` Number of elements: 0
[08:08:38.337] | : . ' , ; resolve() for list ... done
[08:08:38.337] | : . ' , resolve(obj, ...) ... done
[08:08:38.338] | : . ' , resolved() for list ...
[08:08:38.338] | : . ' , ; Number of elements: 0
[08:08:38.338] | : . ' , ; Number of futures: 0
[08:08:38.338] | : . ' , resolved() for list ... done
[08:08:38.338] | : . ' , length: 0 (resolved future 1)
[08:08:38.338] | : . ' resolve() for FutureGlobals ... done
[08:08:38.338] | : . ' globals: [1] ‘x’
[08:08:38.338] | : . Resolving futures part of globals (recursively) ... done
[08:08:38.339] | : . Packages after dropping 'base': [0] 
[08:08:38.339] | : . globals: [1] ‘x’
[08:08:38.339] | : . packages: [0] 
[08:08:38.339] | : getGlobalsAndPackages() ... done
[08:08:38.339] | : run() for ‘Future’ (<unnamed-35>) ...
[08:08:38.339] | : . state: ‘created’
[08:08:38.339] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:38.339] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:38.340] | : . Using MultisessionFutureBackend ...
[08:08:38.340] | : . ' Number of futures since start: 10 (10 created, 10 launched, 10 finished)
[08:08:38.340] | : . ' Launching futures ...
[08:08:38.340] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:38.340] | : . ' , ; Workers: [n=2]
[08:08:38.340] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:38.342] | : . ' , ; FutureRegistry: ‘workers-3bd062d8b9190b31ad6b5a00e5612964’
[08:08:38.342] | : . ' , ; requestWorker() ...
[08:08:38.342] | : . ' , ; ` requestNode() ...
[08:08:38.342] | : . ' , ; ` | Number of workers: 2
[08:08:38.342] | : . ' , ; ` | Polling for a free worker ...
[08:08:38.342] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:38.342] | : . ' , ; ` | : . Listing all futures
[08:08:38.342] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:38.342] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:38.343] | : . ' , ; ` | : Total time: 0
[08:08:38.343] | : . ' , ; ` | Polling for a free worker ... done
[08:08:38.343] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:38.343] | : . ' , ; ` | : Listing all futures
[08:08:38.343] | : . ' , ; ` | : Number of registered futures: 0
[08:08:38.343] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:38.343] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:38.343] | : . ' , ; ` | Index of first available worker: 1
[08:08:38.343] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:38.439] | : . ' , ; ` | : Worker is functional
[08:08:38.440] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:38.440] | : . ' , ; ` | : . Listing all futures
[08:08:38.440] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:38.440] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:38.440] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:38.440] | : . ' , ; ` requestNode() ... done
[08:08:38.440] | : . ' , ; ` cluster node index: 1
[08:08:38.440] | : . ' , ; requestWorker() ... done
[08:08:38.441] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:38.441] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:38.441] | : . ' , ; launchFuture() ...
[08:08:38.441] | : . ' , ; ` cluster node index: 1
[08:08:38.441] | : . ' , ; ` getFutureData() ...
[08:08:38.441] | : . ' , ; ` | getFutureCore() ...
[08:08:38.441] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:38.442] | : . ' , ; ` | getFutureCore() ... done
[08:08:38.442] | : . ' , ; ` | getFutureCapture() ...
[08:08:38.442] | : . ' , ; ` | getFutureCapture() ... done
[08:08:38.442] | : . ' , ; ` | getFutureContext() ...
[08:08:38.442] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:38.442] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:38.442] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:38.442] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:38.442] | : . ' , ; ` | getFutureContext() ... done
[08:08:38.443] | : . ' , ; ` getFutureData() ... done
[08:08:38.443] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ...
[08:08:38.443] | : . ' , ; ` | Appended future to position #1
[08:08:38.443] | : . ' , ; ` | Number of registered futures: 1
[08:08:38.443] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ... done
[08:08:38.443] | : . ' , ; launchFuture() ... done
[08:08:38.444] | : . ' , ; MultisessionFuture started
[08:08:38.444] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:38.444] | : . ' Launching futures ... done
[08:08:38.444] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:38.444] | : . Using MultisessionFutureBackend ... done
[08:08:38.444] | : run() for ‘Future’ (<unnamed-35>) ... done
[08:08:38.444] | future(..., label = NULL) ... done
[08:08:38.444] | value() for MultisessionFuture (<unnamed-35>) ...
[08:08:38.444] | : result() for ClusterFuture ...
[08:08:38.445] | : . assertValidConnection() ...
[08:08:38.445] | : . ' cluster node index: 1
[08:08:38.445] | : . assertValidConnection() ... done
[08:08:38.445] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:38.445] | : . ' cluster node index: 1
[08:08:38.490] | : . ' [1] TRUE
[08:08:38.490] | : . ' received data:
[08:08:38.491] | : . ' List of 5
[08:08:38.491] | : . '  $ type   : chr "VALUE"
[08:08:38.491] | : . '  $ value  :List of 16
[08:08:38.491] | : . '   ..$ value              :List of 1
[08:08:38.491] | : . '   .. ..$ a: num 1
[08:08:38.491] | : . '   ..$ visible            : logi TRUE
[08:08:38.491] | : . '   ..$ stdout             : chr ""
[08:08:38.491] | : . '   ..$ conditions         : list()
[08:08:38.491] | : . '   ..$ rng                : logi FALSE
[08:08:38.491] | : . '   ..$ seed               : NULL
[08:08:38.491] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:38.491] | : . '   ..$ misuseConnections  :List of 3
[08:08:38.491] | : . '   .. ..$ added   : NULL
[08:08:38.491] | : . '   .. ..$ removed : NULL
[08:08:38.491] | : . '   .. ..$ replaced: NULL
[08:08:38.491] | : . '   ..$ misuseDevices      : NULL
[08:08:38.491] | : . '   ..$ misuseDefaultDevice: list()
[08:08:38.491] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:38"
[08:08:38.491] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:38"
[08:08:38.491] | : . '   ..$ uuid               : chr [1:2] "3c0c038025b3a5a8ea89664461f5ad46" "35"
[08:08:38.491] | : . '   ..$ session_uuid       : chr "80594d95b504ec13ed9cdeb474cbe50c"
[08:08:38.491] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:38.491] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:38.491] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:38.491] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:38.491] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:38.491] | : . '   .. .. ..$ pid   : int 70405
[08:08:38.491] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:36"
[08:08:38.491] | : . '   .. .. ..$ random: int 2147483647
[08:08:38.491] | : . '   ..$ r_info             :List of 4
[08:08:38.491] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:38.491] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:38.491] | : . '   .. ..$ os           : chr "unix"
[08:08:38.491] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:38.491] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:38.491] | : . '   ..$ version            : chr "1.8"
[08:08:38.491] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:38.491] | : . '  $ success: logi TRUE
[08:08:38.491] | : . '  $ time   : 'proc_time' Named num [1:5] 0.005 0 0.006 0 0
[08:08:38.491] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:38.491] | : . '  $ tag    : NULL
[08:08:38.504] | : . ' Received FutureResult
[08:08:38.504] | : . ' FutureResult:
[08:08:38.504] | : . ' value: ‘list’
[08:08:38.504] | : . ' visible: TRUE
[08:08:38.504] | : . ' stdout: character
[08:08:38.504] | : . ' conditions: [n = 0] 
[08:08:38.504] | : . ' RNG used: FALSE
[08:08:38.504] | : . ' duration: 0.004747391 secs (started 2025-06-17 08:08:38.48494)
[08:08:38.504] | : . ' version: 1.8
[08:08:38.505] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ...
[08:08:38.505] | : . ' , Removed future from position #1
[08:08:38.505] | : . ' , Number of registered futures: 0
[08:08:38.506] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ... done
[08:08:38.506] | : . ' Erased future from future backend
[08:08:38.506] | : . ' result() for ClusterFuture ...
[08:08:38.506] | : . ' , result already collected: FutureResult
[08:08:38.506] | : . ' result() for ClusterFuture ... done
[08:08:38.507] | : . ' signalConditions() ...
[08:08:38.507] | : . ' , include = ‘immediateCondition’
[08:08:38.507] | : . ' , exclude = 
[08:08:38.507] | : . ' , resignal = FALSE
[08:08:38.507] | : . ' , Number of conditions: 0
[08:08:38.508] | : . ' ,  int 0
[08:08:38.508] | : . ' signalConditions() ... done
[08:08:38.508] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:38.509] | : result() for ClusterFuture ... done
[08:08:38.509] | : result() for ClusterFuture ...
[08:08:38.509] | : . result already collected: FutureResult
[08:08:38.509] | : result() for ClusterFuture ... done
[08:08:38.510] | : signalConditions() ...
[08:08:38.510] | : . include = ‘immediateCondition’
[08:08:38.510] | : . exclude = 
[08:08:38.510] | : . resignal = FALSE
[08:08:38.510] | : . Number of conditions: 0
[08:08:38.510] | : .  int 0
[08:08:38.511] | : signalConditions() ... done
[08:08:38.511] | : relay stdout ...
[08:08:38.512] | : relay stdout ... done
[08:08:38.512] | : check for misuse ...
[08:08:38.512] | : check for misuse ... done
[08:08:38.512] | value() for MultisessionFuture (<unnamed-35>) ... done
$a
[1] 1

[08:08:38.515] | future(..., label = NULL) ...
[08:08:38.516] | : lazy: FALSE
[08:08:38.516] | : stdout: TRUE
[08:08:38.516] | : conditions: [n=1] ‘condition’
[08:08:38.516] | : gc: FALSE
[08:08:38.516] | : earlySignal: FALSE
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[08:08:38.517] | : getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[08:08:38.517] | : . Searching for globals ...
[08:08:38.538] | : . ' globals found: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[08:08:38.538] | : . Searching for globals ... done
[08:08:38.538] | : . Resolving globals: TRUE
[08:08:38.539] | : . Resolving any globals that are futures ...
[08:08:38.539] | : . ' globals: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[08:08:38.539] | : . Resolving any globals that are futures ... done
[08:08:38.539] | : . Search for packages associated with the globals ...
[08:08:38.540] | : . ' Packages associated with globals: [1] ‘base’
[08:08:38.540] | : . ' Packages: [1] ‘base’
[08:08:38.540] | : . Search for packages associated with the globals ... done
[08:08:38.541] | : . Resolving futures part of globals (recursively) ...
[08:08:38.541] | : . ' resolve() for FutureGlobals ...
[08:08:38.541] | : . ' , recursive: 99
[08:08:38.541] | : . ' , Number of elements: 2
[08:08:38.542] | : . ' , elements: ‘x’, ‘name’
[08:08:38.542] | : . ' , 'obj' is list
[08:08:38.542] | : . ' , resolve(obj, ...) ...
[08:08:38.542] | : . ' , ; resolve() for list ...
[08:08:38.543] | : . ' , ; ` recursive: 98
[08:08:38.543] | : . ' , ; ` Number of elements: 0
[08:08:38.543] | : . ' , ; resolve() for list ... done
[08:08:38.543] | : . ' , resolve(obj, ...) ... done
[08:08:38.543] | : . ' , resolved() for list ...
[08:08:38.544] | : . ' , ; Number of elements: 0
[08:08:38.544] | : . ' , ; Number of futures: 0
[08:08:38.544] | : . ' , resolved() for list ... done
[08:08:38.544] | : . ' , length: 1 (resolved future 1)
[08:08:38.544] | : . ' , 'obj' is atomic
[08:08:38.545] | : . ' , length: 0 (resolved future 2)
[08:08:38.545] | : . ' resolve() for FutureGlobals ... done
[08:08:38.545] | : . ' globals: [2] ‘x’, ‘name’
[08:08:38.545] | : . Resolving futures part of globals (recursively) ... done
[08:08:38.545] | : . Packages after dropping 'base': [0] 
[08:08:38.545] | : . globals: [2] ‘x’, ‘name’
[08:08:38.546] | : . packages: [0] 
[08:08:38.546] | : getGlobalsAndPackages() ... done
[08:08:38.546] | : run() for ‘Future’ (<unnamed-36>) ...
[08:08:38.546] | : . state: ‘created’
[08:08:38.546] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:38.547] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:38.547] | : . Using MultisessionFutureBackend ...
[08:08:38.547] | : . ' Number of futures since start: 11 (11 created, 11 launched, 11 finished)
[08:08:38.547] | : . ' Launching futures ...
[08:08:38.547] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:38.547] | : . ' , ; Workers: [n=2]
[08:08:38.548] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:38.550] | : . ' , ; FutureRegistry: ‘workers-3bd062d8b9190b31ad6b5a00e5612964’
[08:08:38.550] | : . ' , ; requestWorker() ...
[08:08:38.551] | : . ' , ; ` requestNode() ...
[08:08:38.551] | : . ' , ; ` | Number of workers: 2
[08:08:38.551] | : . ' , ; ` | Polling for a free worker ...
[08:08:38.551] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:38.551] | : . ' , ; ` | : . Listing all futures
[08:08:38.552] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:38.552] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:38.552] | : . ' , ; ` | : Total time: 0
[08:08:38.552] | : . ' , ; ` | Polling for a free worker ... done
[08:08:38.552] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:38.553] | : . ' , ; ` | : Listing all futures
[08:08:38.553] | : . ' , ; ` | : Number of registered futures: 0
[08:08:38.553] | : . ' , ; ` | FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:38.553] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:38.554] | : . ' , ; ` | Index of first available worker: 1
[08:08:38.554] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:38.651] | : . ' , ; ` | : Worker is functional
[08:08:38.651] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ...
[08:08:38.651] | : . ' , ; ` | : . Listing all futures
[08:08:38.651] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:38.651] | : . ' , ; ` | : FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'list', earlySignal = 0) ... done
[08:08:38.651] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:38.651] | : . ' , ; ` requestNode() ... done
[08:08:38.651] | : . ' , ; ` cluster node index: 1
[08:08:38.652] | : . ' , ; requestWorker() ... done
[08:08:38.652] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:38.652] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:38.652] | : . ' , ; launchFuture() ...
[08:08:38.652] | : . ' , ; ` cluster node index: 1
[08:08:38.652] | : . ' , ; ` getFutureData() ...
[08:08:38.653] | : . ' , ; ` | getFutureCore() ...
[08:08:38.653] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:38.653] | : . ' , ; ` | getFutureCore() ... done
[08:08:38.653] | : . ' , ; ` | getFutureCapture() ...
[08:08:38.653] | : . ' , ; ` | getFutureCapture() ... done
[08:08:38.653] | : . ' , ; ` | getFutureContext() ...
[08:08:38.653] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:38.653] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:38.653] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:38.654] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:38.654] | : . ' , ; ` | getFutureContext() ... done
[08:08:38.654] | : . ' , ; ` getFutureData() ... done
[08:08:38.654] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ...
[08:08:38.654] | : . ' , ; ` | Appended future to position #1
[08:08:38.654] | : . ' , ; ` | Number of registered futures: 1
[08:08:38.654] | : . ' , ; ` FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'add', earlySignal = 0) ... done
[08:08:38.655] | : . ' , ; launchFuture() ... done
[08:08:38.655] | : . ' , ; MultisessionFuture started
[08:08:38.655] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:38.655] | : . ' Launching futures ... done
[08:08:38.655] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:38.655] | : . Using MultisessionFutureBackend ... done
[08:08:38.655] | : run() for ‘Future’ (<unnamed-36>) ... done
[08:08:38.655] | future(..., label = NULL) ... done
[08:08:38.655] | value() for MultisessionFuture (<unnamed-36>) ...
[08:08:38.656] | : result() for ClusterFuture ...
[08:08:38.656] | : . assertValidConnection() ...
[08:08:38.656] | : . ' cluster node index: 1
[08:08:38.656] | : . assertValidConnection() ... done
[08:08:38.656] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:38.656] | : . ' cluster node index: 1
[08:08:38.698] | : . ' [1] TRUE
[08:08:38.698] | : . ' received data:
[08:08:38.698] | : . ' List of 5
[08:08:38.698] | : . '  $ type   : chr "VALUE"
[08:08:38.698] | : . '  $ value  :List of 16
[08:08:38.698] | : . '   ..$ value              :List of 1
[08:08:38.698] | : . '   .. ..$ a: num 1
[08:08:38.698] | : . '   ..$ visible            : logi TRUE
[08:08:38.698] | : . '   ..$ stdout             : chr ""
[08:08:38.698] | : . '   ..$ conditions         : list()
[08:08:38.698] | : . '   ..$ rng                : logi FALSE
[08:08:38.698] | : . '   ..$ seed               : NULL
[08:08:38.698] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:38.698] | : . '   ..$ misuseConnections  :List of 3
[08:08:38.698] | : . '   .. ..$ added   : NULL
[08:08:38.698] | : . '   .. ..$ removed : NULL
[08:08:38.698] | : . '   .. ..$ replaced: NULL
[08:08:38.698] | : . '   ..$ misuseDevices      : NULL
[08:08:38.698] | : . '   ..$ misuseDefaultDevice: list()
[08:08:38.698] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:38"
[08:08:38.698] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:38"
[08:08:38.698] | : . '   ..$ uuid               : chr [1:2] "3c0c038025b3a5a8ea89664461f5ad46" "36"
[08:08:38.698] | : . '   ..$ session_uuid       : chr "80594d95b504ec13ed9cdeb474cbe50c"
[08:08:38.698] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:38.698] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:38.698] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:38.698] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:38.698] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:38.698] | : . '   .. .. ..$ pid   : int 70405
[08:08:38.698] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:36"
[08:08:38.698] | : . '   .. .. ..$ random: int 2147483647
[08:08:38.698] | : . '   ..$ r_info             :List of 4
[08:08:38.698] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:38.698] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:38.698] | : . '   .. ..$ os           : chr "unix"
[08:08:38.698] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:38.698] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:38.698] | : . '   ..$ version            : chr "1.8"
[08:08:38.698] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:38.698] | : . '  $ success: logi TRUE
[08:08:38.698] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[08:08:38.698] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:38.698] | : . '  $ tag    : NULL
[08:08:38.709] | : . ' Received FutureResult
[08:08:38.709] | : . ' FutureResult:
[08:08:38.709] | : . ' value: ‘list’
[08:08:38.709] | : . ' visible: TRUE
[08:08:38.709] | : . ' stdout: character
[08:08:38.709] | : . ' conditions: [n = 0] 
[08:08:38.709] | : . ' RNG used: FALSE
[08:08:38.709] | : . ' duration: 0.00282979 secs (started 2025-06-17 08:08:38.694855)
[08:08:38.709] | : . ' version: 1.8
[08:08:38.710] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ...
[08:08:38.710] | : . ' , Removed future from position #1
[08:08:38.710] | : . ' , Number of registered futures: 0
[08:08:38.710] | : . ' FutureRegistry('workers-3bd062d8b9190b31ad6b5a00e5612964', action = 'remove', earlySignal = 0) ... done
[08:08:38.710] | : . ' Erased future from future backend
[08:08:38.711] | : . ' result() for ClusterFuture ...
[08:08:38.711] | : . ' , result already collected: FutureResult
[08:08:38.711] | : . ' result() for ClusterFuture ... done
[08:08:38.711] | : . ' signalConditions() ...
[08:08:38.711] | : . ' , include = ‘immediateCondition’
[08:08:38.711] | : . ' , exclude = 
[08:08:38.711] | : . ' , resignal = FALSE
[08:08:38.711] | : . ' , Number of conditions: 0
[08:08:38.711] | : . ' ,  int 0
[08:08:38.712] | : . ' signalConditions() ... done
[08:08:38.712] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:38.712] | : result() for ClusterFuture ... done
[08:08:38.712] | : result() for ClusterFuture ...
[08:08:38.712] | : . result already collected: FutureResult
[08:08:38.712] | : result() for ClusterFuture ... done
[08:08:38.712] | : signalConditions() ...
[08:08:38.713] | : . include = ‘immediateCondition’
[08:08:38.713] | : . exclude = 
[08:08:38.713] | : . resignal = FALSE
[08:08:38.713] | : . Number of conditions: 0
[08:08:38.713] | : .  int 0
[08:08:38.713] | : signalConditions() ... done
[08:08:38.713] | : relay stdout ...
[08:08:38.713] | : relay stdout ... done
[08:08:38.714] | : check for misuse ...
[08:08:38.714] | : check for misuse ... done
[08:08:38.714] | value() for MultisessionFuture (<unnamed-36>) ... done
$a
[1] 1

Testing with 2 cores ... DONE

> message("*** Globals - subassignments w/ x$a <- value ... DONE")
*** Globals - subassignments w/ x$a <- value ... DONE

> message("*** Globals - subassignments ... DONE")
*** Globals - subassignments ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=3s, sys.self=0.2s, elapsed=5s, user.child=0.8s, sys.child=0.6s
Test ‘globals,subassignment’ ... success
> 
