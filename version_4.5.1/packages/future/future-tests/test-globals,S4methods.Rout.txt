
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-globals,S4methods.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("globals,S4methods")
Test ‘globals,S4methods’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-globals,S4methods.R’

> library(future)
[08:08:32.100] Option 'future.startup.script': TRUE
[08:08:32.101] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:08:32.101] Future startup scripts found: <none>

> library(methods)

> message("*** Globals - S4 methods ...")
*** Globals - S4 methods ...

> setGeneric("my_fcn", function(x) standardGeneric("my_fcn"))
[1] "my_fcn"

> setMethod("my_fcn", signature(x = "numeric"), function(x) {
+     -x
+ })

> org_my_fcn <- my_fcn

> truth <- my_fcn(3)

> for (strategy in supportedStrategies()) {
+     message("Type of future: ", strategy)
+     plan(strategy)
+     f <- future({
+         my_fcn
+    .... [TRUNCATED] 
Type of future: sequential
[08:08:32.122] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.122] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:32.122] | : all.equal() for FutureStrategyList ...
[08:08:32.122] | : . New stack:
[08:08:32.122] | : . List of 1
[08:08:32.122] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.122] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.122] | : .   ..- attr(*, "init")= logi TRUE
[08:08:32.122] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.122] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.122] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.122] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:32.122] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.127] | : . Old stack:
[08:08:32.127] | : . List of 1
[08:08:32.127] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.127] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.127] | : .   ..- attr(*, "init")= logi TRUE
[08:08:32.127] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.127] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.127] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.127] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:32.127] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.129] | : . Not identical
[08:08:32.130] | : . all.equal() for future ...
[08:08:32.130] | : . ' List of 2
[08:08:32.130] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.130] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.130] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:32.130] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.130] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.130] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.130] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:32.130] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.130] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.130] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:32.130] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.130] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.130] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.130] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:32.134] | : . all.equal() for future ... done
[08:08:32.134] | : all.equal() for FutureStrategyList ... done
[08:08:32.134] | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:32.134] | : List of future strategies:
[08:08:32.134] | : 1. sequential:
[08:08:32.134] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:32.134] | :    - tweaked: FALSE
[08:08:32.134] | :    - call: plan(sequential)
[08:08:32.135] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:32.135] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.135] future(..., label = NULL) ...
[08:08:32.135] | lazy: TRUE
[08:08:32.135] | stdout: TRUE
[08:08:32.136] | conditions: [n=1] ‘condition’
[08:08:32.136] | gc: FALSE
[08:08:32.136] | earlySignal: FALSE
[08:08:32.136] | getGlobalsAndPackages() ...
[08:08:32.136] | : Searching for globals ...
[08:08:32.156] | : . globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[08:08:32.156] | : Searching for globals ... done
[08:08:32.156] | : Resolving globals: FALSE
[08:08:32.156] | : Search for packages associated with the globals ...
[08:08:32.156] | : . Packages associated with globals: [1] ‘base’
[08:08:32.157] | : . Packages: [1] ‘base’
[08:08:32.157] | : Search for packages associated with the globals ... done
[08:08:32.157] | : Packages after dropping 'base': [0] 
[08:08:32.157] | : globals: [1] ‘my_fcn’
[08:08:32.157] | : packages: [0] 
[08:08:32.157] | getGlobalsAndPackages() ... done
[08:08:32.158] future(..., label = NULL) ... done
[08:08:32.158] value() for Future (<unnamed-1>) ...
[08:08:32.159] | run() for ‘Future’ (<unnamed-1>) ...
[08:08:32.159] | : state: ‘created’
[08:08:32.159] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.159] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:32.159] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.159] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.159] | : . '  - attr(*, "init")= logi TRUE
[08:08:32.159] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.159] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.159] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.159] | : . '  - attr(*, "call")= language plan(sequential)
[08:08:32.163] | : . ' init: TRUE
[08:08:32.163] | : . ' makeFutureBackend(<sequential>) ...
[08:08:32.163] | : . ' , Backend function: <‘NULL’>
[08:08:32.163] | : . ' , Evaluator tweak arguments: [n=0]
[08:08:32.163] | : . ' ,  list()
[08:08:32.163] | : . ' , Evaluator formal arguments: [n=2]
[08:08:32.163] | : . ' ,  list()
[08:08:32.164] | : . ' , Backend factory arguments: [n=2]
[08:08:32.164] | : . ' , Dotted pair list of 2
[08:08:32.164] | : . ' ,  $ gc         : logi FALSE
[08:08:32.164] | : . ' ,  $ earlySignal: logi FALSE
[08:08:32.165] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:32.165] | : . ' makeFutureBackend(<sequential>) ... done
[08:08:32.165] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:32.165] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.165] | : Using SequentialFutureBackend ...
[08:08:32.166] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:32.166] | : . Launching futures ...
[08:08:32.166] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:32.166] | : . ' , getFutureData() ...
[08:08:32.166] | : . ' , ; getFutureCore() ...
[08:08:32.166] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:32.166] | : . ' , ; getFutureCore() ... done
[08:08:32.167] | : . ' , ; getFutureCapture() ...
[08:08:32.167] | : . ' , ; getFutureCapture() ... done
[08:08:32.167] | : . ' , ; getFutureContext() ...
[08:08:32.167] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.167] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:32.167] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.167] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:32.168] | : . ' , ; getFutureContext() ... done
[08:08:32.168] | : . ' , getFutureData() ... done
[08:08:32.170] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.170] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:32.170] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.171] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:32.171] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:32.171] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:32.171] | : . ' , ; ` | New stack:
[08:08:32.171] | : . ' , ; ` | List of 1
[08:08:32.171] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.171] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.171] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:32.171] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.171] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.171] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.171] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:32.171] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.174] | : . ' , ; ` | Old stack:
[08:08:32.174] | : . ' , ; ` | List of 1
[08:08:32.174] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.174] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.174] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:32.174] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.174] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.174] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.174] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:32.174] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3b0d7bb0> 
[08:08:32.174] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.174] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.174] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.177] | : . ' , ; ` | Not identical
[08:08:32.177] | : . ' , ; ` | all.equal() for future ...
[08:08:32.177] | : . ' , ; ` | : List of 2
[08:08:32.177] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.177] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.177] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:32.177] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.177] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.177] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.177] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:32.177] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.177] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.177] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:32.177] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.177] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.177] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.177] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:32.177] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3b0d7bb0> 
[08:08:32.177] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.177] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.184] | : . ' , ; ` | all.equal() for future ... done
[08:08:32.184] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:32.184] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:32.184] | : . ' , ; ` List of future strategies:
[08:08:32.184] | : . ' , ; ` 1. sequential:
[08:08:32.184] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:32.184] | : . ' , ; `    - tweaked: FALSE
[08:08:32.184] | : . ' , ; `    - call: plan(sequential)
[08:08:32.185] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:32.185] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:32.185] | : . ' , assign_globals() ...
[08:08:32.185] | : . ' , List of 1
[08:08:32.185] | : . ' ,  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[08:08:32.185] | : . ' ,   .. ..@ .Data     :function (x)  
[08:08:32.185] | : . ' ,   .. ..@ generic   : chr "my_fcn"
[08:08:32.185] | : . ' ,   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[08:08:32.185] | : . ' ,   .. ..@ package   : chr ".GlobalEnv"
[08:08:32.185] | : . ' ,   .. ..@ group     : list()
[08:08:32.185] | : . ' ,   .. ..@ valueClass: chr(0) 
[08:08:32.185] | : . ' ,   .. ..@ signature : chr "x"
[08:08:32.185] | : . ' ,   .. ..@ default   : NULL
[08:08:32.185] | : . ' ,   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[08:08:32.185] | : . ' ,  - attr(*, "where")=List of 1
[08:08:32.185] | : . ' ,   ..$ my_fcn:<environment: R_GlobalEnv> 
[08:08:32.185] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:32.185] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:32.185] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:32.185] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:32.190] | : . ' , - copied ‘my_fcn’ to environment
[08:08:32.190] | : . ' , assign_globals() ... done
[08:08:32.193] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:32.193] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:32.193] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:32.193] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:32.193] | : . ' , ; ` | : New stack:
[08:08:32.193] | : . ' , ; ` | : List of 1
[08:08:32.193] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.193] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.193] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:32.193] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.193] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.193] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.193] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:32.193] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3b0d7bb0> 
[08:08:32.193] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.193] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.193] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.196] | : . ' , ; ` | : Old stack:
[08:08:32.196] | : . ' , ; ` | : List of 1
[08:08:32.196] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.196] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.196] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:32.196] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.196] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.196] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.196] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:32.196] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3b0d7bb0> 
[08:08:32.196] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.196] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.196] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.200] | : . ' , ; ` | : Identical
[08:08:32.200] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:32.200] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:32.200] | : . ' , ; ` | List of future strategies:
[08:08:32.200] | : . ' , ; ` | 1. sequential:
[08:08:32.200] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:32.200] | : . ' , ; ` |    - tweaked: FALSE
[08:08:32.200] | : . ' , ; ` |    - call: plan(sequential)
[08:08:32.200] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:32.200] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:32.200] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:32.204] | : . ' , SequentialFuture started (and completed)
[08:08:32.205] | : . ' , signalConditions() ...
[08:08:32.205] | : . ' , ; include = ‘immediateCondition’
[08:08:32.205] | : . ' , ; exclude = 
[08:08:32.205] | : . ' , ; resignal = FALSE
[08:08:32.205] | : . ' , ; Number of conditions: 6
[08:08:32.205] | : . ' , ;  int 6
[08:08:32.206] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.206] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.206] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.206] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.206] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.206] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.207] | : . ' , signalConditions() ... done
[08:08:32.207] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:32.207] | : . Launching futures ... done
[08:08:32.207] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:32.207] | : Using SequentialFutureBackend ... done
[08:08:32.207] | run() for ‘Future’ (<unnamed-1>) ... done
[08:08:32.207] | signalConditions() ...
[08:08:32.207] | : include = ‘immediateCondition’
[08:08:32.207] | : exclude = 
[08:08:32.208] | : resignal = FALSE
[08:08:32.208] | : Number of conditions: 6
[08:08:32.208] | :  int 6
[08:08:32.208] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.208] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.208] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.208] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.209] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.209] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.209] | signalConditions() ... done
[08:08:32.209] | relay stdout ...
[08:08:32.209] | relay stdout ... done
[08:08:32.209] | check for misuse ...
[08:08:32.209] | check for misuse ... done
[08:08:32.209] | relay conditions ...
[08:08:32.209] | : Future state: ‘finished’
[08:08:32.210] | : signalConditions() ...
[08:08:32.210] | : . include = ‘condition’
[08:08:32.210] | : . exclude = ‘immediateCondition’
[08:08:32.210] | : . resignal = TRUE
[08:08:32.210] | : . Number of conditions: 6
[08:08:32.210] | : .  int 6
[08:08:32.210] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.211] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.169] | : . ' , attachPackages() ...
[08:08:32.211] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.211] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.169] | : . ' , ; packages: [n=1] ‘future’
[08:08:32.211] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.211] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.169] | : . ' , attachPackages() ... done
[08:08:32.211] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.211] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.169] | : . ' , attachPackages() ...
[08:08:32.211] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.212] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.170] | : . ' , ; packages: [n=0] 
[08:08:32.212] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.212] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.170] | : . ' , attachPackages() ... done
[08:08:32.212] | : signalConditions() ... done
[08:08:32.212] | relay conditions ... done
[08:08:32.212] value() for Future (<unnamed-1>) ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55ca3ce289d0>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[08:08:32.212] future(..., label = NULL) ...
[08:08:32.213] | lazy: TRUE
[08:08:32.213] | stdout: TRUE
[08:08:32.213] | conditions: [n=1] ‘condition’
[08:08:32.213] | gc: FALSE
[08:08:32.213] | earlySignal: FALSE
[08:08:32.213] | getGlobalsAndPackages() ...
[08:08:32.213] | : Searching for globals ...
[08:08:32.227] | : . globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[08:08:32.227] | : Searching for globals ... done
[08:08:32.227] | : Resolving globals: FALSE
[08:08:32.227] | : Search for packages associated with the globals ...
[08:08:32.227] | : . Packages associated with globals: [1] ‘base’
[08:08:32.227] | : . Packages: [1] ‘base’
[08:08:32.228] | : Search for packages associated with the globals ... done
[08:08:32.228] | : Packages after dropping 'base': [0] 
[08:08:32.228] | : globals: [1] ‘my_fcn’
[08:08:32.228] | : packages: [0] 
[08:08:32.228] | getGlobalsAndPackages() ... done
[08:08:32.228] future(..., label = NULL) ... done
[08:08:32.228] value() for Future (<unnamed-2>) ...
[08:08:32.228] | run() for ‘Future’ (<unnamed-2>) ...
[08:08:32.229] | : state: ‘created’
[08:08:32.229] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.229] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.229] | : Using SequentialFutureBackend ...
[08:08:32.229] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:08:32.229] | : . Launching futures ...
[08:08:32.229] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:32.229] | : . ' , getFutureData() ...
[08:08:32.229] | : . ' , ; getFutureCore() ...
[08:08:32.229] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:32.230] | : . ' , ; getFutureCore() ... done
[08:08:32.230] | : . ' , ; getFutureCapture() ...
[08:08:32.230] | : . ' , ; getFutureCapture() ... done
[08:08:32.230] | : . ' , ; getFutureContext() ...
[08:08:32.230] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.230] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:32.230] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.230] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:32.230] | : . ' , ; getFutureContext() ... done
[08:08:32.231] | : . ' , getFutureData() ... done
[08:08:32.232] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.232] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:32.232] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.232] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:32.232] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:32.232] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:32.233] | : . ' , ; ` | New stack:
[08:08:32.233] | : . ' , ; ` | List of 1
[08:08:32.233] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.233] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.233] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:32.233] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.233] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.233] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.233] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:32.233] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.235] | : . ' , ; ` | Old stack:
[08:08:32.235] | : . ' , ; ` | List of 1
[08:08:32.235] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.235] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.235] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:32.235] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.235] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.235] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.235] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:32.235] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3b0d7bb0> 
[08:08:32.235] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.235] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.235] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.239] | : . ' , ; ` | Not identical
[08:08:32.240] | : . ' , ; ` | all.equal() for future ...
[08:08:32.240] | : . ' , ; ` | : List of 2
[08:08:32.240] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.240] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.240] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:32.240] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.240] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.240] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.240] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:32.240] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.240] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.240] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:32.240] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.240] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.240] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.240] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:32.240] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3b0d7bb0> 
[08:08:32.240] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.240] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.245] | : . ' , ; ` | all.equal() for future ... done
[08:08:32.245] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:32.245] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:32.245] | : . ' , ; ` List of future strategies:
[08:08:32.245] | : . ' , ; ` 1. sequential:
[08:08:32.245] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:32.245] | : . ' , ; `    - tweaked: FALSE
[08:08:32.245] | : . ' , ; `    - call: plan(sequential)
[08:08:32.245] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:32.246] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:32.246] | : . ' , assign_globals() ...
[08:08:32.246] | : . ' , List of 1
[08:08:32.246] | : . ' ,  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[08:08:32.246] | : . ' ,   .. ..@ .Data     :function (x)  
[08:08:32.246] | : . ' ,   .. ..@ generic   : chr "my_fcn"
[08:08:32.246] | : . ' ,   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[08:08:32.246] | : . ' ,   .. ..@ package   : chr ".GlobalEnv"
[08:08:32.246] | : . ' ,   .. ..@ group     : list()
[08:08:32.246] | : . ' ,   .. ..@ valueClass: chr(0) 
[08:08:32.246] | : . ' ,   .. ..@ signature : chr "x"
[08:08:32.246] | : . ' ,   .. ..@ default   : NULL
[08:08:32.246] | : . ' ,   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[08:08:32.246] | : . ' ,  - attr(*, "where")=List of 1
[08:08:32.246] | : . ' ,   ..$ my_fcn:<environment: R_GlobalEnv> 
[08:08:32.246] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:32.246] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:32.246] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:32.246] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:32.251] | : . ' , - copied ‘my_fcn’ to environment
[08:08:32.251] | : . ' , assign_globals() ... done
[08:08:32.253] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:32.253] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:32.253] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:32.253] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:32.253] | : . ' , ; ` | : New stack:
[08:08:32.254] | : . ' , ; ` | : List of 1
[08:08:32.254] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.254] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.254] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:32.254] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.254] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.254] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.254] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:32.254] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3b0d7bb0> 
[08:08:32.254] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.254] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.254] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.258] | : . ' , ; ` | : Old stack:
[08:08:32.258] | : . ' , ; ` | : List of 1
[08:08:32.258] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.258] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.258] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:32.258] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.258] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.258] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.258] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:32.258] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3b0d7bb0> 
[08:08:32.258] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.258] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.258] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.261] | : . ' , ; ` | : Identical
[08:08:32.261] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:32.261] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:32.261] | : . ' , ; ` | List of future strategies:
[08:08:32.261] | : . ' , ; ` | 1. sequential:
[08:08:32.261] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:32.261] | : . ' , ; ` |    - tweaked: FALSE
[08:08:32.261] | : . ' , ; ` |    - call: plan(sequential)
[08:08:32.262] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:32.262] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:32.262] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:32.262] | : . ' , SequentialFuture started (and completed)
[08:08:32.262] | : . ' , signalConditions() ...
[08:08:32.262] | : . ' , ; include = ‘immediateCondition’
[08:08:32.262] | : . ' , ; exclude = 
[08:08:32.262] | : . ' , ; resignal = FALSE
[08:08:32.263] | : . ' , ; Number of conditions: 6
[08:08:32.263] | : . ' , ;  int 6
[08:08:32.263] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.263] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.263] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.263] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.263] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.264] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.264] | : . ' , signalConditions() ... done
[08:08:32.264] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:32.264] | : . Launching futures ... done
[08:08:32.264] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:32.264] | : Using SequentialFutureBackend ... done
[08:08:32.264] | run() for ‘Future’ (<unnamed-2>) ... done
[08:08:32.264] | signalConditions() ...
[08:08:32.264] | : include = ‘immediateCondition’
[08:08:32.265] | : exclude = 
[08:08:32.265] | : resignal = FALSE
[08:08:32.265] | : Number of conditions: 6
[08:08:32.265] | :  int 6
[08:08:32.265] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.265] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.265] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.266] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.266] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.266] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.266] | signalConditions() ... done
[08:08:32.266] | relay stdout ...
[08:08:32.266] | relay stdout ... done
[08:08:32.266] | check for misuse ...
[08:08:32.266] | check for misuse ... done
[08:08:32.266] | relay conditions ...
[08:08:32.266] | : Future state: ‘finished’
[08:08:32.267] | : signalConditions() ...
[08:08:32.267] | : . include = ‘condition’
[08:08:32.267] | : . exclude = ‘immediateCondition’
[08:08:32.267] | : . resignal = TRUE
[08:08:32.267] | : . Number of conditions: 6
[08:08:32.267] | : .  int 6
[08:08:32.267] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.267] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.231] | : . ' , attachPackages() ...
[08:08:32.268] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.268] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.231] | : . ' , ; packages: [n=1] ‘future’
[08:08:32.268] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.268] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.231] | : . ' , attachPackages() ... done
[08:08:32.268] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.268] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.231] | : . ' , attachPackages() ...
[08:08:32.268] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.268] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.231] | : . ' , ; packages: [n=0] 
[08:08:32.269] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.269] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.231] | : . ' , attachPackages() ... done
[08:08:32.269] | : signalConditions() ... done
[08:08:32.269] | relay conditions ... done
[08:08:32.269] value() for Future (<unnamed-2>) ... done
[1] -3
future.globals.keepWhere=TRUE
[08:08:32.269] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.269] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:32.269] | : all.equal() for FutureStrategyList ...
[08:08:32.270] | : . New stack:
[08:08:32.270] | : . List of 1
[08:08:32.270] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.270] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.270] | : .   ..- attr(*, "init")= logi TRUE
[08:08:32.270] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.270] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.270] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.270] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:32.270] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.273] | : . Old stack:
[08:08:32.273] | : . List of 1
[08:08:32.273] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.273] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.273] | : .   ..- attr(*, "init")= chr "done"
[08:08:32.273] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.273] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.273] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.273] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:32.273] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3b0d7bb0> 
[08:08:32.273] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.273] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.273] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.276] | : . Not identical
[08:08:32.277] | : . all.equal() for future ...
[08:08:32.277] | : . ' List of 2
[08:08:32.277] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.277] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.277] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:32.277] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.277] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.277] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.277] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:32.277] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.277] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.277] | : . '   ..- attr(*, "init")= chr "done"
[08:08:32.277] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.277] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.277] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.277] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:32.277] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3b0d7bb0> 
[08:08:32.277] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.277] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.282] | : . all.equal() for future ... done
[08:08:32.282] | : all.equal() for FutureStrategyList ... done
[08:08:32.282] | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:32.282] | : List of future strategies:
[08:08:32.282] | : 1. sequential:
[08:08:32.282] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:32.282] | :    - tweaked: FALSE
[08:08:32.282] | :    - call: plan(sequential)
[08:08:32.282] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:32.282] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Type of future: multicore
[08:08:32.283] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.283] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:32.283] | : all.equal() for FutureStrategyList ...
[08:08:32.283] | : . New stack:
[08:08:32.283] | : . List of 1
[08:08:32.283] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:32.283] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:32.283] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:32.283] | : .   ..- attr(*, "init")= logi TRUE
[08:08:32.283] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.283] | : .     ...)  
[08:08:32.283] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.283] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.283] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:32.283] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.286] | : . Old stack:
[08:08:32.286] | : . List of 1
[08:08:32.286] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.286] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.286] | : .   ..- attr(*, "init")= chr "done"
[08:08:32.286] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.286] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.286] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.286] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:32.286] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3b0d7bb0> 
[08:08:32.286] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.286] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.286] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.290] | : . Not identical
[08:08:32.290] | : . all.equal() for future ...
[08:08:32.290] | : . ' List of 2
[08:08:32.290] | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:32.290] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:32.290] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:32.290] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:32.290] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.290] | : . '     ...)  
[08:08:32.290] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.290] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.290] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:32.290] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.290] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.290] | : . '   ..- attr(*, "init")= chr "done"
[08:08:32.290] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.290] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.290] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.290] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:32.290] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3b0d7bb0> 
[08:08:32.290] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.290] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.295] | : . ' Formals differ
[08:08:32.295] | : . all.equal() for future ... done
[08:08:32.295] | : . Future strategies differ at level 1
[08:08:32.295] | : all.equal() for FutureStrategyList ... done
[08:08:32.295] | : plan(): Setting new future backend stack:
[08:08:32.295] | : List of future strategies:
[08:08:32.295] | : 1. multicore:
[08:08:32.295] | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:32.295] | :    - tweaked: FALSE
[08:08:32.295] | :    - call: plan(strategy)
[08:08:32.296] | : List of 1
[08:08:32.296] | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:32.296] | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:32.296] | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:32.296] | :   ..- attr(*, "init")= logi TRUE
[08:08:32.296] | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.296] | :     ...)  
[08:08:32.296] | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.296] | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.296] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:32.296] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.298] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:32.298] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.299] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:32.299] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.299] | : . Legacy shutdown of cluster workers ...
[08:08:32.299] | : . ' Stopping existing cluster ...
[08:08:32.299] | : . ' , No pre-existing cluster. Skipping
[08:08:32.299] | : . ' Stopping existing cluster ... done
[08:08:32.299] | : . Legacy shutdown of cluster workers ... done
[08:08:32.299] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:32.300] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:32.300] | : . function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:32.300] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:32.300] | : .  - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:32.300] | : .  - attr(*, "init")= logi TRUE
[08:08:32.300] | : .  - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.300] | : .     ...)  
[08:08:32.300] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.300] | : .  - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.300] | : .  - attr(*, "call")= language plan(strategy)
[08:08:32.302] | : . init: TRUE
[08:08:32.302] | : . makeFutureBackend(<multicore>) ...
[08:08:32.302] | : . ' Backend function: <‘NULL’>
[08:08:32.302] | : . ' Evaluator tweak arguments: [n=0]
[08:08:32.302] | : . '  list()
[08:08:32.302] | : . ' Evaluator formal arguments: [n=3]
[08:08:32.302] | : . '  list()
[08:08:32.303] | : . ' Backend factory arguments: [n=3]
[08:08:32.303] | : . ' Dotted pair list of 3
[08:08:32.303] | : . '  $ workers    : language availableCores(constraints = "multicore")
[08:08:32.303] | : . '  $ gc         : logi FALSE
[08:08:32.303] | : . '  $ earlySignal: logi FALSE
[08:08:32.306] | : . ' Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:32.306] | : . makeFutureBackend(<multicore>) ... done
[08:08:32.306] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:32.306] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.306] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.307] | : plan(): nbrOfWorkers() = 2
[08:08:32.308] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:32.308] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.308] future(..., label = NULL) ...
[08:08:32.308] | lazy: TRUE
[08:08:32.308] | stdout: TRUE
[08:08:32.308] | conditions: [n=1] ‘condition’
[08:08:32.308] | gc: FALSE
[08:08:32.308] | earlySignal: FALSE
[08:08:32.308] | getGlobalsAndPackages() ...
[08:08:32.308] | : Searching for globals ...
[08:08:32.319] | : . globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[08:08:32.319] | : Searching for globals ... done
[08:08:32.320] | : Resolving globals: FALSE
[08:08:32.320] | : Search for packages associated with the globals ...
[08:08:32.320] | : . Packages associated with globals: [1] ‘base’
[08:08:32.320] | : . Packages: [1] ‘base’
[08:08:32.320] | : Search for packages associated with the globals ... done
[08:08:32.320] | : Packages after dropping 'base': [0] 
[08:08:32.321] | : globals: [1] ‘my_fcn’
[08:08:32.321] | : packages: [0] 
[08:08:32.321] | getGlobalsAndPackages() ... done
[08:08:32.321] future(..., label = NULL) ... done
[08:08:32.321] value() for Future (<unnamed-3>) ...
[08:08:32.321] | run() for ‘Future’ (<unnamed-3>) ...
[08:08:32.321] | : state: ‘created’
[08:08:32.322] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.323] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.323] | : Using MulticoreFutureBackend ...
[08:08:32.323] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:32.323] | : . Launching futures ...
[08:08:32.323] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:32.323] | : . ' , getFutureData() ...
[08:08:32.323] | : . ' , ; getFutureCore() ...
[08:08:32.323] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:32.324] | : . ' , ; getFutureCore() ... done
[08:08:32.324] | : . ' , ; getFutureCapture() ...
[08:08:32.324] | : . ' , ; getFutureCapture() ... done
[08:08:32.324] | : . ' , ; getFutureContext() ...
[08:08:32.324] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.324] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:32.324] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.324] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:32.324] | : . ' , ; getFutureContext() ... done
[08:08:32.325] | : . ' , getFutureData() ... done
[08:08:32.325] | : . ' , requestCore(..., workers = 2) ...
[08:08:32.325] | : . ' , requestCore(..., workers = 2) ... done
[08:08:32.328] | : . ' , MulticoreFuture started
[08:08:32.329] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:32.329] | : . Launching futures ... done
[08:08:32.329] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:32.330] | : Using MulticoreFutureBackend ... done
[08:08:32.330] | run() for ‘Future’ (<unnamed-3>) ... done
[08:08:32.331] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.332] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:32.332] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.332] | result() for MulticoreFuture ...
[08:08:32.332] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:32.333] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:32.333] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:32.333] | : . ' , ; ` | New stack:
[08:08:32.333] | : . ' , ; ` | List of 1
[08:08:32.333] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.333] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.333] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:32.333] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.333] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.333] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.333] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:32.333] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.338] | : . ' , ; ` | Old stack:
[08:08:32.338] | : . ' , ; ` | List of 1
[08:08:32.338] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:32.338] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:32.338] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:32.338] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:32.338] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.338] | : . ' , ; ` |     ...)  
[08:08:32.338] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.338] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.338] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:32.338] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3d2f7b80> 
[08:08:32.338] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.338] | : . ' , ; ` |     ...)  
[08:08:32.338] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.338] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.343] | : . ' , ; ` | Not identical
[08:08:32.343] | : . ' , ; ` | all.equal() for future ...
[08:08:32.343] | : . ' , ; ` | : List of 2
[08:08:32.343] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.343] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.343] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:32.343] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.343] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.343] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.343] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:32.343] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:32.343] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:32.343] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:32.343] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:32.343] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.343] | : . ' , ; ` | :     ...)  
[08:08:32.343] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.343] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.343] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:32.343] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3d2f7b80> 
[08:08:32.343] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.343] | : . ' , ; ` | :     ...)  
[08:08:32.343] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.351] | : . ' , ; ` | : Formals differ
[08:08:32.351] | : . ' , ; ` | all.equal() for future ... done
[08:08:32.352] | : . ' , ; ` | Future strategies differ at level 1
[08:08:32.352] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:32.354] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:32.354] | : . ' , ; ` List of future strategies:
[08:08:32.354] | : . ' , ; ` 1. sequential:
[08:08:32.354] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:32.354] | : . ' , ; `    - tweaked: FALSE
[08:08:32.354] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:32.355] | : . ' , ; ` List of 1
[08:08:32.355] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.355] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.355] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:32.355] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.355] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.355] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.355] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:32.355] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.359] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:32.359] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:32.359] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.360] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:32.360] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.360] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.360] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:32.360] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.360] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.360] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.360] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:32.362] | : . ' , ; ` | : init: TRUE
[08:08:32.362] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:32.362] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:32.362] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:32.362] | : . ' , ; ` | : .  list()
[08:08:32.362] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:32.363] | : . ' , ; ` | : .  list()
[08:08:32.363] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:32.363] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:32.363] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:32.363] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:32.364] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:32.364] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:32.364] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:32.364] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.365] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:32.365] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:32.365] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:32.365] | : . ' , assign_globals() ...
[08:08:32.365] | : . ' , List of 1
[08:08:32.365] | : . ' ,  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[08:08:32.365] | : . ' ,   .. ..@ .Data     :function (x)  
[08:08:32.365] | : . ' ,   .. ..@ generic   : chr "my_fcn"
[08:08:32.365] | : . ' ,   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[08:08:32.365] | : . ' ,   .. ..@ package   : chr ".GlobalEnv"
[08:08:32.365] | : . ' ,   .. ..@ group     : list()
[08:08:32.365] | : . ' ,   .. ..@ valueClass: chr(0) 
[08:08:32.365] | : . ' ,   .. ..@ signature : chr "x"
[08:08:32.365] | : . ' ,   .. ..@ default   : NULL
[08:08:32.365] | : . ' ,   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[08:08:32.365] | : . ' ,  - attr(*, "where")=List of 1
[08:08:32.365] | : . ' ,   ..$ my_fcn:<environment: R_GlobalEnv> 
[08:08:32.365] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:32.365] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:32.365] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:32.365] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:32.370] | : . ' , - copied ‘my_fcn’ to environment
[08:08:32.371] | : . ' , assign_globals() ... done
[08:08:32.373] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:32.373] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:32.373] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:32.373] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:32.373] | : . ' , ; ` | : New stack:
[08:08:32.373] | : . ' , ; ` | : List of 1
[08:08:32.373] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:32.373] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:32.373] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:32.373] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:32.373] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.373] | : . ' , ; ` | :     ...)  
[08:08:32.373] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.373] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.373] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:32.373] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3d2f7b80> 
[08:08:32.373] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.373] | : . ' , ; ` | :     ...)  
[08:08:32.373] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.373] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.378] | : . ' , ; ` | : Old stack:
[08:08:32.378] | : . ' , ; ` | : List of 1
[08:08:32.378] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.378] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.378] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:32.378] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.378] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.378] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.378] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:32.378] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3c51c1e8> 
[08:08:32.378] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.378] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.378] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.381] | : . ' , ; ` | : Not identical
[08:08:32.381] | : . ' , ; ` | : all.equal() for future ...
[08:08:32.381] | : . ' , ; ` | : . List of 2
[08:08:32.381] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:32.381] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:32.381] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:32.381] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:32.381] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.381] | : . ' , ; ` | : .     ...)  
[08:08:32.381] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.381] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.381] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:32.381] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3d2f7b80> 
[08:08:32.381] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.381] | : . ' , ; ` | : .     ...)  
[08:08:32.381] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.381] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.381] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.381] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:32.381] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.381] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.381] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.381] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:32.381] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3c51c1e8> 
[08:08:32.381] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.381] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.387] | : . ' , ; ` | : . Formals differ
[08:08:32.387] | : . ' , ; ` | : all.equal() for future ... done
[08:08:32.387] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:32.387] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:32.388] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:32.388] | : . ' , ; ` | List of future strategies:
[08:08:32.388] | : . ' , ; ` | 1. multicore:
[08:08:32.388] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:32.388] | : . ' , ; ` |    - tweaked: FALSE
[08:08:32.388] | : . ' , ; ` |    - call: plan(strategy)
[08:08:32.388] | : . ' , ; ` | List of 1
[08:08:32.388] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:32.388] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:32.388] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:32.388] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:32.388] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.388] | : . ' , ; ` |     ...)  
[08:08:32.388] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.388] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.388] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:32.388] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3d2f7b80> 
[08:08:32.388] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.388] | : . ' , ; ` |     ...)  
[08:08:32.388] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.388] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.393] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:32.393] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:32.393] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.393] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.393] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:32.393] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:32.393] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:32.394] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:32.395] | : readImmediateCondition() ...
[08:08:32.395] | : . Path: ‘/tmp/RtmpVrhrPV/.future/immediateConditions’
[08:08:32.395] | : . Number of RDS files: 0
[08:08:32.395] | : . Returned conditions set:
[08:08:32.396] | : .  list()
[08:08:32.396] | : readImmediateCondition() ... done
[08:08:32.397] | : result() for MulticoreFuture ...
[08:08:32.397] | : result() for MulticoreFuture ... done
[08:08:32.397] | : signalConditions() ...
[08:08:32.397] | : . include = ‘immediateCondition’
[08:08:32.397] | : . exclude = 
[08:08:32.397] | : . resignal = FALSE
[08:08:32.397] | : . Number of conditions: 6
[08:08:32.397] | : .  int 6
[08:08:32.398] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.398] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.398] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.399] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.399] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.399] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.399] | : signalConditions() ... done
[08:08:32.399] | result() for MulticoreFuture ... done
[08:08:32.399] | result() for MulticoreFuture ...
[08:08:32.400] | result() for MulticoreFuture ... done
[08:08:32.400] | signalConditions() ...
[08:08:32.400] | : include = ‘immediateCondition’
[08:08:32.400] | : exclude = 
[08:08:32.400] | : resignal = FALSE
[08:08:32.400] | : Number of conditions: 6
[08:08:32.400] | :  int 6
[08:08:32.401] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.401] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.401] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.401] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.401] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.402] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.402] | signalConditions() ... done
[08:08:32.402] | relay stdout ...
[08:08:32.402] | relay stdout ... done
[08:08:32.402] | check for misuse ...
[08:08:32.402] | check for misuse ... done
[08:08:32.402] | relay conditions ...
[08:08:32.403] | : Future state: ‘finished’
[08:08:32.403] | : result() for MulticoreFuture ...
[08:08:32.403] | : result() for MulticoreFuture ... done
[08:08:32.403] | : signalConditions() ...
[08:08:32.403] | : . include = ‘condition’
[08:08:32.403] | : . exclude = ‘immediateCondition’
[08:08:32.403] | : . resignal = TRUE
[08:08:32.403] | : . Number of conditions: 6
[08:08:32.404] | : .  int 6
[08:08:32.404] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.404] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.329] | : . ' , attachPackages() ...
[08:08:32.404] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.405] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.329] | : . ' , ; packages: [n=1] ‘future’
[08:08:32.405] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.405] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.330] | : . ' , attachPackages() ... done
[08:08:32.405] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.405] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.330] | : . ' , attachPackages() ...
[08:08:32.405] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.406] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.330] | : . ' , ; packages: [n=0] 
[08:08:32.406] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.406] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.331] | : . ' , attachPackages() ... done
[08:08:32.406] | : signalConditions() ... done
[08:08:32.406] | relay conditions ... done
[08:08:32.406] value() for Future (<unnamed-3>) ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55ca3a771570>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[08:08:32.407] future(..., label = NULL) ...
[08:08:32.407] | lazy: TRUE
[08:08:32.407] | stdout: TRUE
[08:08:32.407] | conditions: [n=1] ‘condition’
[08:08:32.407] | gc: FALSE
[08:08:32.407] | earlySignal: FALSE
[08:08:32.407] | getGlobalsAndPackages() ...
[08:08:32.408] | : Searching for globals ...
[08:08:32.425] | : . globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[08:08:32.425] | : Searching for globals ... done
[08:08:32.425] | : Resolving globals: FALSE
[08:08:32.425] | : Search for packages associated with the globals ...
[08:08:32.426] | : . Packages associated with globals: [1] ‘base’
[08:08:32.426] | : . Packages: [1] ‘base’
[08:08:32.426] | : Search for packages associated with the globals ... done
[08:08:32.426] | : Packages after dropping 'base': [0] 
[08:08:32.426] | : globals: [1] ‘my_fcn’
[08:08:32.427] | : packages: [0] 
[08:08:32.427] | getGlobalsAndPackages() ... done
[08:08:32.427] future(..., label = NULL) ... done
[08:08:32.427] value() for Future (<unnamed-4>) ...
[08:08:32.427] | run() for ‘Future’ (<unnamed-4>) ...
[08:08:32.427] | : state: ‘created’
[08:08:32.427] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.428] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.428] | : Using MulticoreFutureBackend ...
[08:08:32.428] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:08:32.428] | : . Launching futures ...
[08:08:32.428] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:32.428] | : . ' , getFutureData() ...
[08:08:32.428] | : . ' , ; getFutureCore() ...
[08:08:32.428] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:32.428] | : . ' , ; getFutureCore() ... done
[08:08:32.429] | : . ' , ; getFutureCapture() ...
[08:08:32.429] | : . ' , ; getFutureCapture() ... done
[08:08:32.429] | : . ' , ; getFutureContext() ...
[08:08:32.429] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.429] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:32.429] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.461] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:32.462] | : . ' , ; getFutureContext() ... done
[08:08:32.462] | : . ' , getFutureData() ... done
[08:08:32.462] | : . ' , requestCore(..., workers = 2) ...
[08:08:32.462] | : . ' , requestCore(..., workers = 2) ... done
[08:08:32.465] | : . ' , MulticoreFuture started
[08:08:32.465] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:32.466] | : . Launching futures ... done
[08:08:32.466] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:32.467] | : Using MulticoreFutureBackend ... done
[08:08:32.467] | run() for ‘Future’ (<unnamed-4>) ... done
[08:08:32.468] | result() for MulticoreFuture ...
[08:08:32.469] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.470] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:32.470] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.470] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:32.471] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:32.471] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:32.471] | : . ' , ; ` | New stack:
[08:08:32.471] | : . ' , ; ` | List of 1
[08:08:32.471] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.471] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.471] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:32.471] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.471] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.471] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.471] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:32.471] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.477] | : . ' , ; ` | Old stack:
[08:08:32.477] | : . ' , ; ` | List of 1
[08:08:32.477] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:32.477] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:32.477] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:32.477] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:32.477] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.477] | : . ' , ; ` |     ...)  
[08:08:32.477] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.477] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.477] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:32.477] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3d2f7b80> 
[08:08:32.477] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.477] | : . ' , ; ` |     ...)  
[08:08:32.477] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.477] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.483] | : . ' , ; ` | Not identical
[08:08:32.483] | : . ' , ; ` | all.equal() for future ...
[08:08:32.483] | : . ' , ; ` | : List of 2
[08:08:32.483] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.483] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.483] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:32.483] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.483] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.483] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.483] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:32.483] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:32.483] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:32.483] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:32.483] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:32.483] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.483] | : . ' , ; ` | :     ...)  
[08:08:32.483] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.483] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.483] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:32.483] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3d2f7b80> 
[08:08:32.483] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.483] | : . ' , ; ` | :     ...)  
[08:08:32.483] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.491] | : . ' , ; ` | : Formals differ
[08:08:32.491] | : . ' , ; ` | all.equal() for future ... done
[08:08:32.492] | : . ' , ; ` | Future strategies differ at level 1
[08:08:32.492] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:32.492] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:32.492] | : . ' , ; ` List of future strategies:
[08:08:32.492] | : . ' , ; ` 1. sequential:
[08:08:32.492] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:32.492] | : . ' , ; `    - tweaked: FALSE
[08:08:32.492] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:32.493] | : . ' , ; ` List of 1
[08:08:32.493] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.493] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.493] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:32.493] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.493] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.493] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.493] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:32.493] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.498] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:32.499] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:32.499] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.499] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:32.499] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.499] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.499] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:32.499] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.499] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.499] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.499] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:32.501] | : . ' , ; ` | : init: TRUE
[08:08:32.501] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:32.502] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:32.502] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:32.502] | : . ' , ; ` | : .  list()
[08:08:32.502] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:32.502] | : . ' , ; ` | : .  list()
[08:08:32.502] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:32.503] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:32.503] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:32.503] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:32.504] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:32.504] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:32.504] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:32.504] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.504] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:32.504] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:32.504] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:32.505] | : . ' , assign_globals() ...
[08:08:32.505] | : . ' , List of 1
[08:08:32.505] | : . ' ,  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[08:08:32.505] | : . ' ,   .. ..@ .Data     :function (x)  
[08:08:32.505] | : . ' ,   .. ..@ generic   : chr "my_fcn"
[08:08:32.505] | : . ' ,   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[08:08:32.505] | : . ' ,   .. ..@ package   : chr ".GlobalEnv"
[08:08:32.505] | : . ' ,   .. ..@ group     : list()
[08:08:32.505] | : . ' ,   .. ..@ valueClass: chr(0) 
[08:08:32.505] | : . ' ,   .. ..@ signature : chr "x"
[08:08:32.505] | : . ' ,   .. ..@ default   : NULL
[08:08:32.505] | : . ' ,   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[08:08:32.505] | : . ' ,  - attr(*, "where")=List of 1
[08:08:32.505] | : . ' ,   ..$ my_fcn:<environment: R_GlobalEnv> 
[08:08:32.505] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:32.505] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:32.505] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:32.505] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:32.510] | : . ' , - copied ‘my_fcn’ to environment
[08:08:32.510] | : . ' , assign_globals() ... done
[08:08:32.513] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:32.513] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:32.513] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:32.513] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:32.513] | : . ' , ; ` | : New stack:
[08:08:32.513] | : . ' , ; ` | : List of 1
[08:08:32.513] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:32.513] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:32.513] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:32.513] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:32.513] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.513] | : . ' , ; ` | :     ...)  
[08:08:32.513] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.513] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.513] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:32.513] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3d2f7b80> 
[08:08:32.513] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.513] | : . ' , ; ` | :     ...)  
[08:08:32.513] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.513] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.517] | : . ' , ; ` | : Old stack:
[08:08:32.517] | : . ' , ; ` | : List of 1
[08:08:32.517] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.517] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.517] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:32.517] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.517] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.517] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.517] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:32.517] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3a716f68> 
[08:08:32.517] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.517] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.517] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.521] | : . ' , ; ` | : Not identical
[08:08:32.522] | : . ' , ; ` | : all.equal() for future ...
[08:08:32.522] | : . ' , ; ` | : . List of 2
[08:08:32.522] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:32.522] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:32.522] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:32.522] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:32.522] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.522] | : . ' , ; ` | : .     ...)  
[08:08:32.522] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.522] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.522] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:32.522] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3d2f7b80> 
[08:08:32.522] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.522] | : . ' , ; ` | : .     ...)  
[08:08:32.522] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.522] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.522] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.522] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:32.522] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.522] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.522] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.522] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:32.522] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3a716f68> 
[08:08:32.522] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.522] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.527] | : . ' , ; ` | : . Formals differ
[08:08:32.528] | : . ' , ; ` | : all.equal() for future ... done
[08:08:32.528] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:32.528] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:32.528] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:32.528] | : . ' , ; ` | List of future strategies:
[08:08:32.528] | : . ' , ; ` | 1. multicore:
[08:08:32.528] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:32.528] | : . ' , ; ` |    - tweaked: FALSE
[08:08:32.528] | : . ' , ; ` |    - call: plan(strategy)
[08:08:32.528] | : . ' , ; ` | List of 1
[08:08:32.528] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:32.528] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:32.528] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:32.528] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:32.528] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.528] | : . ' , ; ` |     ...)  
[08:08:32.528] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.528] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.528] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:32.528] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3d2f7b80> 
[08:08:32.528] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.528] | : . ' , ; ` |     ...)  
[08:08:32.528] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.528] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.532] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:32.532] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:32.532] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.532] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.532] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:32.532] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:32.532] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:32.532] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:32.533] | : readImmediateCondition() ...
[08:08:32.533] | : . Path: ‘/tmp/RtmpVrhrPV/.future/immediateConditions’
[08:08:32.534] | : . Number of RDS files: 0
[08:08:32.534] | : . Returned conditions set:
[08:08:32.534] | : .  list()
[08:08:32.534] | : readImmediateCondition() ... done
[08:08:32.535] | : result() for MulticoreFuture ...
[08:08:32.535] | : result() for MulticoreFuture ... done
[08:08:32.535] | : signalConditions() ...
[08:08:32.535] | : . include = ‘immediateCondition’
[08:08:32.536] | : . exclude = 
[08:08:32.536] | : . resignal = FALSE
[08:08:32.536] | : . Number of conditions: 6
[08:08:32.536] | : .  int 6
[08:08:32.537] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.537] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.537] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.537] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.537] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.538] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.538] | : signalConditions() ... done
[08:08:32.538] | result() for MulticoreFuture ... done
[08:08:32.538] | result() for MulticoreFuture ...
[08:08:32.538] | result() for MulticoreFuture ... done
[08:08:32.538] | signalConditions() ...
[08:08:32.538] | : include = ‘immediateCondition’
[08:08:32.539] | : exclude = 
[08:08:32.539] | : resignal = FALSE
[08:08:32.539] | : Number of conditions: 6
[08:08:32.539] | :  int 6
[08:08:32.540] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.540] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.540] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.540] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.540] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.540] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.540] | signalConditions() ... done
[08:08:32.541] | relay stdout ...
[08:08:32.541] | relay stdout ... done
[08:08:32.541] | check for misuse ...
[08:08:32.541] | check for misuse ... done
[08:08:32.541] | relay conditions ...
[08:08:32.541] | : Future state: ‘finished’
[08:08:32.541] | : result() for MulticoreFuture ...
[08:08:32.542] | : result() for MulticoreFuture ... done
[08:08:32.542] | : signalConditions() ...
[08:08:32.542] | : . include = ‘condition’
[08:08:32.542] | : . exclude = ‘immediateCondition’
[08:08:32.542] | : . resignal = TRUE
[08:08:32.542] | : . Number of conditions: 6
[08:08:32.542] | : .  int 6
[08:08:32.543] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.543] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.466] | : . ' , attachPackages() ...
[08:08:32.543] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.543] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.467] | : . ' , ; packages: [n=1] ‘future’
[08:08:32.543] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.544] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.467] | : . ' , attachPackages() ... done
[08:08:32.544] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.544] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.468] | : . ' , attachPackages() ...
[08:08:32.544] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.544] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.468] | : . ' , ; packages: [n=0] 
[08:08:32.544] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:32.545] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:32.468] | : . ' , attachPackages() ... done
[08:08:32.545] | : signalConditions() ... done
[08:08:32.545] | relay conditions ... done
[08:08:32.545] value() for Future (<unnamed-4>) ... done
[1] -3
future.globals.keepWhere=TRUE
[08:08:32.545] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.545] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:32.546] | : all.equal() for FutureStrategyList ...
[08:08:32.546] | : . New stack:
[08:08:32.546] | : . List of 1
[08:08:32.546] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.546] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.546] | : .   ..- attr(*, "init")= logi TRUE
[08:08:32.546] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.546] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.546] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.546] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:32.546] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.549] | : . Old stack:
[08:08:32.549] | : . List of 1
[08:08:32.549] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:32.549] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:32.549] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:32.549] | : .   ..- attr(*, "init")= chr "done"
[08:08:32.549] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.549] | : .     ...)  
[08:08:32.549] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.549] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.549] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:32.549] | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3d2f7b80> 
[08:08:32.549] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.549] | : .     ...)  
[08:08:32.549] | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.549] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.553] | : . Not identical
[08:08:32.553] | : . all.equal() for future ...
[08:08:32.554] | : . ' List of 2
[08:08:32.554] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.554] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.554] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:32.554] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.554] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.554] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.554] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:32.554] | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:32.554] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:32.554] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:32.554] | : . '   ..- attr(*, "init")= chr "done"
[08:08:32.554] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.554] | : . '     ...)  
[08:08:32.554] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.554] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.554] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:32.554] | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3d2f7b80> 
[08:08:32.554] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:32.554] | : . '     ...)  
[08:08:32.554] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:32.561] | : . ' Formals differ
[08:08:32.561] | : . all.equal() for future ... done
[08:08:32.561] | : . Future strategies differ at level 1
[08:08:32.561] | : all.equal() for FutureStrategyList ... done
[08:08:32.562] | : plan(): Setting new future backend stack:
[08:08:32.562] | : List of future strategies:
[08:08:32.562] | : 1. sequential:
[08:08:32.562] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:32.562] | :    - tweaked: FALSE
[08:08:32.562] | :    - call: plan(sequential)
[08:08:32.562] | : List of 1
[08:08:32.562] | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.562] | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.562] | :   ..- attr(*, "init")= logi TRUE
[08:08:32.562] | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.562] | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.562] | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.562] | :   ..- attr(*, "call")= language plan(sequential)
[08:08:32.562] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.565] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:32.565] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.565] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:32.565] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.566] | : . Legacy shutdown of cluster workers ...
[08:08:32.566] | : . ' Stopping existing cluster ...
[08:08:32.566] | : . ' , No pre-existing cluster. Skipping
[08:08:32.566] | : . ' Stopping existing cluster ... done
[08:08:32.566] | : . Legacy shutdown of cluster workers ... done
[08:08:32.566] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:32.567] | : plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:32.567] | : . function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.567] | : .  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.567] | : .  - attr(*, "init")= logi TRUE
[08:08:32.567] | : .  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.567] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.567] | : .  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.567] | : .  - attr(*, "call")= language plan(sequential)
[08:08:32.569] | : . init: TRUE
[08:08:32.569] | : . makeFutureBackend(<sequential>) ...
[08:08:32.569] | : . ' Backend function: <‘NULL’>
[08:08:32.569] | : . ' Evaluator tweak arguments: [n=0]
[08:08:32.569] | : . '  list()
[08:08:32.569] | : . ' Evaluator formal arguments: [n=2]
[08:08:32.570] | : . '  list()
[08:08:32.570] | : . ' Backend factory arguments: [n=2]
[08:08:32.570] | : . ' Dotted pair list of 2
[08:08:32.570] | : . '  $ gc         : logi FALSE
[08:08:32.570] | : . '  $ earlySignal: logi FALSE
[08:08:32.571] | : . ' Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:32.571] | : . makeFutureBackend(<sequential>) ... done
[08:08:32.571] | : plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:32.571] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.571] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.572] | : plan(): nbrOfWorkers() = 1
[08:08:32.572] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:32.572] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Type of future: multisession
[08:08:32.572] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.572] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:32.572] | : all.equal() for FutureStrategyList ...
[08:08:32.572] | : . New stack:
[08:08:32.572] | : . List of 1
[08:08:32.572] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:32.572] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.572] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:32.572] | : .   ..- attr(*, "init")= logi TRUE
[08:08:32.572] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:32.572] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:32.572] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:32.572] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:32.572] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:08:32.572] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:32.572] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.577] | : . Old stack:
[08:08:32.577] | : . List of 1
[08:08:32.577] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.577] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.577] | : .   ..- attr(*, "init")= chr "done"
[08:08:32.577] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.577] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.577] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.577] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:32.577] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3ccfa578> 
[08:08:32.577] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.577] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.577] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.580] | : . Not identical
[08:08:32.580] | : . all.equal() for future ...
[08:08:32.580] | : . ' List of 2
[08:08:32.580] | : . '  $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:32.580] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.580] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:32.580] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:32.580] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:32.580] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:32.580] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:32.580] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:32.580] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:08:32.580] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:32.580] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.580] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:32.580] | : . '   ..- attr(*, "init")= chr "done"
[08:08:32.580] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.580] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.580] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.580] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:32.580] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3ccfa578> 
[08:08:32.580] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:32.580] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:32.586] | : . ' Formals differ
[08:08:32.586] | : . all.equal() for future ... done
[08:08:32.586] | : . Future strategies differ at level 1
[08:08:32.586] | : all.equal() for FutureStrategyList ... done
[08:08:32.586] | : plan(): Setting new future backend stack:
[08:08:32.586] | : List of future strategies:
[08:08:32.586] | : 1. multisession:
[08:08:32.586] | :    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:32.586] | :    - tweaked: FALSE
[08:08:32.586] | :    - call: plan(strategy)
[08:08:32.587] | : List of 1
[08:08:32.587] | :  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:32.587] | :     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.587] | :   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:32.587] | :   ..- attr(*, "init")= logi TRUE
[08:08:32.587] | :   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:32.587] | :     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:32.587] | :   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:32.587] | :   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:32.587] | :   ..- attr(*, "untweakable")= chr "persistent"
[08:08:32.587] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:32.587] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:32.589] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:32.589] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.590] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:32.590] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.590] | : . Legacy shutdown of cluster workers ...
[08:08:32.590] | : . ' Stopping existing cluster ...
[08:08:32.590] | : . ' , No pre-existing cluster. Skipping
[08:08:32.590] | : . ' Stopping existing cluster ... done
[08:08:32.590] | : . Legacy shutdown of cluster workers ... done
[08:08:32.590] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:32.590] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:32.590] | : . function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:32.590] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:32.590] | : .  - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:32.590] | : .  - attr(*, "init")= logi TRUE
[08:08:32.590] | : .  - attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:32.590] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:32.590] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:32.590] | : .  - attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:32.590] | : .  - attr(*, "untweakable")= chr "persistent"
[08:08:32.590] | : .  - attr(*, "call")= language plan(strategy)
[08:08:32.594] | : . init: TRUE
[08:08:32.594] | : . makeFutureBackend(<multisession>) ...
[08:08:32.594] | : . ' Backend function: <‘NULL’>
[08:08:32.594] | : . ' Evaluator tweak arguments: [n=0]
[08:08:32.594] | : . '  list()
[08:08:32.595] | : . ' Evaluator formal arguments: [n=4]
[08:08:32.595] | : . '  list()
[08:08:32.595] | : . ' Backend factory arguments: [n=4]
[08:08:32.595] | : . ' Dotted pair list of 4
[08:08:32.595] | : . '  $ workers     : language availableCores()
[08:08:32.595] | : . '  $ rscript_libs: language .libPaths()
[08:08:32.595] | : . '  $ gc          : logi FALSE
[08:08:32.595] | : . '  $ earlySignal : logi FALSE
[08:08:32.597] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ...
[08:08:32.597] | : . ' , Arguments:
[08:08:32.597] | : . ' , List of 5
[08:08:32.597] | : . ' ,  $ workers     : Named int 2
[08:08:32.597] | : . ' ,   ..- attr(*, "names")= chr "mc.cores"
[08:08:32.597] | : . ' ,  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:32.597] | : . ' ,  $ interrupts  : logi TRUE
[08:08:32.597] | : . ' ,  $ gc          : logi FALSE
[08:08:32.597] | : . ' ,  $ earlySignal : logi FALSE
[08:08:32.601] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[08:08:32.601] | : . ' , ; workers: 2
[08:08:32.601] | : . ' , ; getCluster() ...
[08:08:32.601] | : . ' , ; getCluster() ... done
[08:08:32.602] | : . ' , ; Stopping existing cluster ...
[08:08:32.602] | : . ' , ; ` No pre-existing cluster. Skipping
[08:08:32.602] | : . ' , ; Stopping existing cluster ... done
[08:08:32.602] | : . ' , ; Starting new cluster ...
[08:08:32.602] | : . ' , ; ` makeCluster(workers, ...) ...
[08:08:32.602] | : . ' , ; ` | Arguments:
[08:08:32.602] | : . ' , ; ` | List of 2
[08:08:32.602] | : . ' , ; ` |  $             : int 2
[08:08:32.602] | : . ' , ; ` |  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:32.603] | : . ' , ; ` | .makeCluster() ...
[08:08:32.603] | : . ' , ; ` | : workers: ‘2’
[08:08:32.603] | : . ' , ; ` | : R_FUTURE_PLAN: NA
[08:08:32.604] | : . ' , ; ` | : parallelly::makeClusterPSOCK() arguments:
[08:08:32.604] | : . ' , ; ` | : List of 2
[08:08:32.604] | : . ' , ; ` | :  $             : int 2
[08:08:32.604] | : . ' , ; ` | :  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:33.107] | : . ' , ; ` | : Generated cluster UUID
[08:08:33.107] | : . ' , ; ` | : Cluster UUID: ‘e6a93581c96b8fbfe3a14d54940ecb2a’
[08:08:33.108] | : . ' , ; ` | : Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:33.110] | : . ' , ; ` | .makeCluster() ... done
[08:08:33.110] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:33.112] | : . ' , ; ` makeCluster(workers, ...) ... done
[08:08:33.112] | : . ' , ; ` Number of workers: 2
[08:08:33.112] | : . ' , ; ` Workers UUID: ‘e6a93581c96b8fbfe3a14d54940ecb2a’
[08:08:33.112] | : . ' , ; Starting new cluster ... done
[08:08:33.112] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[08:08:33.113] | : . ' , Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:33.113] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ... done
[08:08:33.113] | : . makeFutureBackend(<multisession>) ... done
[08:08:33.113] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:33.113] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:33.113] | : . plan(): nbrOfWorkers() = 2
[08:08:33.113] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:33.113] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:33.113] | future(..., label = NULL) ...
[08:08:33.114] | : lazy: TRUE
[08:08:33.114] | : stdout: TRUE
[08:08:33.114] | : conditions: [n=1] ‘condition’
[08:08:33.114] | : gc: FALSE
[08:08:33.114] | : earlySignal: FALSE
[08:08:33.114] | : getGlobalsAndPackages() ...
[08:08:33.114] | : . Searching for globals ...
[08:08:33.127] | : . ' globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[08:08:33.127] | : . Searching for globals ... done
[08:08:33.127] | : . Resolving globals: FALSE
[08:08:33.127] | : . Search for packages associated with the globals ...
[08:08:33.128] | : . ' Packages associated with globals: [1] ‘base’
[08:08:33.128] | : . ' Packages: [1] ‘base’
[08:08:33.128] | : . Search for packages associated with the globals ... done
[08:08:33.128] | : . Packages after dropping 'base': [0] 
[08:08:33.128] | : . globals: [1] ‘my_fcn’
[08:08:33.129] | : . packages: [0] 
[08:08:33.129] | : getGlobalsAndPackages() ... done
[08:08:33.129] | future(..., label = NULL) ... done
[08:08:33.129] | value() for Future (<unnamed-5>) ...
[08:08:33.129] | : run() for ‘Future’ (<unnamed-5>) ...
[08:08:33.129] | : . state: ‘created’
[08:08:33.130] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:33.130] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:33.130] | : . Using MultisessionFutureBackend ...
[08:08:33.130] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:33.130] | : . ' Launching futures ...
[08:08:33.131] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:33.131] | : . ' , ; Workers: [n=2]
[08:08:33.131] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:33.133] | : . ' , ; FutureRegistry: ‘workers-e6a93581c96b8fbfe3a14d54940ecb2a’
[08:08:33.133] | : . ' , ; requestWorker() ...
[08:08:33.133] | : . ' , ; ` requestNode() ...
[08:08:33.133] | : . ' , ; ` | Number of workers: 2
[08:08:33.134] | : . ' , ; ` | Polling for a free worker ...
[08:08:33.134] | : . ' , ; ` | : FutureRegistry('workers-e6a93581c96b8fbfe3a14d54940ecb2a', action = 'list', earlySignal = 0) ...
[08:08:33.134] | : . ' , ; ` | : . Created empty registry ‘workers-e6a93581c96b8fbfe3a14d54940ecb2a’
[08:08:33.134] | : . ' , ; ` | : . Listing all futures
[08:08:33.134] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:33.134] | : . ' , ; ` | : FutureRegistry('workers-e6a93581c96b8fbfe3a14d54940ecb2a', action = 'list', earlySignal = 0) ... done
[08:08:33.134] | : . ' , ; ` | : Total time: 0
[08:08:33.134] | : . ' , ; ` | Polling for a free worker ... done
[08:08:33.135] | : . ' , ; ` | FutureRegistry('workers-e6a93581c96b8fbfe3a14d54940ecb2a', action = 'list', earlySignal = 0) ...
[08:08:33.135] | : . ' , ; ` | : Listing all futures
[08:08:33.135] | : . ' , ; ` | : Number of registered futures: 0
[08:08:33.135] | : . ' , ; ` | FutureRegistry('workers-e6a93581c96b8fbfe3a14d54940ecb2a', action = 'list', earlySignal = 0) ... done
[08:08:33.135] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:33.135] | : . ' , ; ` | Index of first available worker: 1
[08:08:33.135] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:33.199] | : . ' , ; ` | : Worker is functional
[08:08:33.199] | : . ' , ; ` | : FutureRegistry('workers-e6a93581c96b8fbfe3a14d54940ecb2a', action = 'list', earlySignal = 0) ...
[08:08:33.200] | : . ' , ; ` | : . Listing all futures
[08:08:33.200] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:33.200] | : . ' , ; ` | : FutureRegistry('workers-e6a93581c96b8fbfe3a14d54940ecb2a', action = 'list', earlySignal = 0) ... done
[08:08:33.200] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:33.200] | : . ' , ; ` requestNode() ... done
[08:08:33.201] | : . ' , ; ` cluster node index: 1
[08:08:33.201] | : . ' , ; requestWorker() ... done
[08:08:33.201] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:33.203] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:33.203] | : . ' , ; launchFuture() ...
[08:08:33.203] | : . ' , ; ` cluster node index: 1
[08:08:33.203] | : . ' , ; ` getFutureData() ...
[08:08:33.203] | : . ' , ; ` | getFutureCore() ...
[08:08:33.203] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:33.204] | : . ' , ; ` | getFutureCore() ... done
[08:08:33.204] | : . ' , ; ` | getFutureCapture() ...
[08:08:33.204] | : . ' , ; ` | getFutureCapture() ... done
[08:08:33.204] | : . ' , ; ` | getFutureContext() ...
[08:08:33.204] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:33.204] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:33.205] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:33.205] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:33.205] | : . ' , ; ` | getFutureContext() ... done
[08:08:33.205] | : . ' , ; ` getFutureData() ... done
[08:08:33.206] | : . ' , ; ` FutureRegistry('workers-e6a93581c96b8fbfe3a14d54940ecb2a', action = 'add', earlySignal = 0) ...
[08:08:33.206] | : . ' , ; ` | Appended future to position #1
[08:08:33.206] | : . ' , ; ` | Number of registered futures: 1
[08:08:33.206] | : . ' , ; ` FutureRegistry('workers-e6a93581c96b8fbfe3a14d54940ecb2a', action = 'add', earlySignal = 0) ... done
[08:08:33.206] | : . ' , ; launchFuture() ... done
[08:08:33.206] | : . ' , ; MultisessionFuture started
[08:08:33.206] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:33.207] | : . ' Launching futures ... done
[08:08:33.207] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:33.207] | : . Using MultisessionFutureBackend ... done
[08:08:33.207] | : run() for ‘Future’ (<unnamed-5>) ... done
[08:08:33.207] | : result() for ClusterFuture ...
[08:08:33.208] | : . assertValidConnection() ...
[08:08:33.208] | : . ' cluster node index: 1
[08:08:33.208] | : . assertValidConnection() ... done
[08:08:33.209] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:33.209] | : . ' cluster node index: 1
[08:08:33.296] | : . ' [1] TRUE
[08:08:33.297] | : . ' received data:
[08:08:33.297] | : . ' List of 5
[08:08:33.297] | : . '  $ type   : chr "VALUE"
[08:08:33.297] | : . '  $ value  :List of 16
[08:08:33.297] | : . '   ..$ value              :Formal class 'standardGeneric' [package "methods"] with 8 slots
[08:08:33.297] | : . '   .. .. ..@ .Data     :function (x)  
[08:08:33.297] | : . '   .. .. ..@ generic   : chr "my_fcn"
[08:08:33.297] | : . '   .. .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[08:08:33.297] | : . '   .. .. ..@ package   : chr ".GlobalEnv"
[08:08:33.297] | : . '   .. .. ..@ group     : list()
[08:08:33.297] | : . '   .. .. ..@ valueClass: chr(0) 
[08:08:33.297] | : . '   .. .. ..@ signature : chr "x"
[08:08:33.297] | : . '   .. .. ..@ default   : NULL
[08:08:33.297] | : . '   .. .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[08:08:33.297] | : . '   ..$ visible            : logi TRUE
[08:08:33.297] | : . '   ..$ stdout             : chr ""
[08:08:33.297] | : . '   ..$ conditions         : list()
[08:08:33.297] | : . '   ..$ rng                : logi FALSE
[08:08:33.297] | : . '   ..$ seed               : NULL
[08:08:33.297] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:33.297] | : . '   ..$ misuseConnections  :List of 3
[08:08:33.297] | : . '   .. ..$ added   : NULL
[08:08:33.297] | : . '   .. ..$ removed : NULL
[08:08:33.297] | : . '   .. ..$ replaced: NULL
[08:08:33.297] | : . '   ..$ misuseDevices      : NULL
[08:08:33.297] | : . '   ..$ misuseDefaultDevice: list()
[08:08:33.297] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:33"
[08:08:33.297] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:33"
[08:08:33.297] | : . '   ..$ uuid               : chr [1:2] "3b93805ec67dcdaf7b02658b8ba1fde9" "5"
[08:08:33.297] | : . '   ..$ session_uuid       : chr "4d84e32ccf249a249c720d72320ac00a"
[08:08:33.297] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:33.297] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:33.297] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:33.297] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:33.297] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:33.297] | : . '   .. .. ..$ pid   : int 70246
[08:08:33.297] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:33"
[08:08:33.297] | : . '   .. .. ..$ random: int 2147483647
[08:08:33.297] | : . '   ..$ r_info             :List of 4
[08:08:33.297] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:33.297] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:33.297] | : . '   .. ..$ os           : chr "unix"
[08:08:33.297] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:33.297] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:33.297] | : . '   ..$ version            : chr "1.8"
[08:08:33.297] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:33.297] | : . '  $ success: logi TRUE
[08:08:33.297] | : . '  $ time   : 'proc_time' Named num [1:5] 0.049 0.001 0.05 0 0
[08:08:33.297] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:33.297] | : . '  $ tag    : NULL
[08:08:33.315] | : . ' Received FutureResult
[08:08:33.315] | : . ' FutureResult:
[08:08:33.315] | : . ' value: ‘standardGeneric’
[08:08:33.315] | : . ' visible: TRUE
[08:08:33.315] | : . ' stdout: character
[08:08:33.315] | : . ' conditions: [n = 0] 
[08:08:33.315] | : . ' RNG used: FALSE
[08:08:33.315] | : . ' duration: 0.04796457 secs (started 2025-06-17 08:08:33.248111)
[08:08:33.315] | : . ' version: 1.8
[08:08:33.316] | : . ' FutureRegistry('workers-e6a93581c96b8fbfe3a14d54940ecb2a', action = 'remove', earlySignal = 0) ...
[08:08:33.316] | : . ' , Removed future from position #1
[08:08:33.316] | : . ' , Number of registered futures: 0
[08:08:33.317] | : . ' FutureRegistry('workers-e6a93581c96b8fbfe3a14d54940ecb2a', action = 'remove', earlySignal = 0) ... done
[08:08:33.317] | : . ' Erased future from future backend
[08:08:33.317] | : . ' result() for ClusterFuture ...
[08:08:33.317] | : . ' , result already collected: FutureResult
[08:08:33.317] | : . ' result() for ClusterFuture ... done
[08:08:33.317] | : . ' signalConditions() ...
[08:08:33.317] | : . ' , include = ‘immediateCondition’
[08:08:33.317] | : . ' , exclude = 
[08:08:33.318] | : . ' , resignal = FALSE
[08:08:33.318] | : . ' , Number of conditions: 0
[08:08:33.318] | : . ' ,  int 0
[08:08:33.318] | : . ' signalConditions() ... done
[08:08:33.318] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:33.319] | : result() for ClusterFuture ... done
[08:08:33.319] | : result() for ClusterFuture ...
[08:08:33.319] | : . result already collected: FutureResult
[08:08:33.319] | : result() for ClusterFuture ... done
[08:08:33.319] | : signalConditions() ...
[08:08:33.319] | : . include = ‘immediateCondition’
[08:08:33.319] | : . exclude = 
[08:08:33.319] | : . resignal = FALSE
[08:08:33.320] | : . Number of conditions: 0
[08:08:33.320] | : .  int 0
[08:08:33.320] | : signalConditions() ... done
[08:08:33.320] | : relay stdout ...
[08:08:33.320] | : relay stdout ... done
[08:08:33.321] | : check for misuse ...
[08:08:33.321] | : check for misuse ... done
[08:08:33.321] | value() for Future (<unnamed-5>) ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55ca3e9a3700>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[08:08:33.321] | future(..., label = NULL) ...
[08:08:33.321] | : lazy: TRUE
[08:08:33.321] | : stdout: TRUE
[08:08:33.322] | : conditions: [n=1] ‘condition’
[08:08:33.322] | : gc: FALSE
[08:08:33.322] | : earlySignal: FALSE
[08:08:33.322] | : getGlobalsAndPackages() ...
[08:08:33.322] | : . Searching for globals ...
[08:08:33.340] | : . ' globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[08:08:33.340] | : . Searching for globals ... done
[08:08:33.340] | : . Resolving globals: FALSE
[08:08:33.341] | : . Search for packages associated with the globals ...
[08:08:33.341] | : . ' Packages associated with globals: [1] ‘base’
[08:08:33.341] | : . ' Packages: [1] ‘base’
[08:08:33.341] | : . Search for packages associated with the globals ... done
[08:08:33.341] | : . Packages after dropping 'base': [0] 
[08:08:33.341] | : . globals: [1] ‘my_fcn’
[08:08:33.342] | : . packages: [0] 
[08:08:33.342] | : getGlobalsAndPackages() ... done
[08:08:33.342] | future(..., label = NULL) ... done
[08:08:33.342] | value() for Future (<unnamed-6>) ...
[08:08:33.342] | : run() for ‘Future’ (<unnamed-6>) ...
[08:08:33.342] | : . state: ‘created’
[08:08:33.342] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:33.342] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:33.343] | : . Using MultisessionFutureBackend ...
[08:08:33.343] | : . ' Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:08:33.343] | : . ' Launching futures ...
[08:08:33.343] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:33.343] | : . ' , ; Workers: [n=2]
[08:08:33.343] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:33.345] | : . ' , ; FutureRegistry: ‘workers-e6a93581c96b8fbfe3a14d54940ecb2a’
[08:08:33.345] | : . ' , ; requestWorker() ...
[08:08:33.345] | : . ' , ; ` requestNode() ...
[08:08:33.345] | : . ' , ; ` | Number of workers: 2
[08:08:33.345] | : . ' , ; ` | Polling for a free worker ...
[08:08:33.345] | : . ' , ; ` | : FutureRegistry('workers-e6a93581c96b8fbfe3a14d54940ecb2a', action = 'list', earlySignal = 0) ...
[08:08:33.345] | : . ' , ; ` | : . Listing all futures
[08:08:33.345] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:33.345] | : . ' , ; ` | : FutureRegistry('workers-e6a93581c96b8fbfe3a14d54940ecb2a', action = 'list', earlySignal = 0) ... done
[08:08:33.346] | : . ' , ; ` | : Total time: 0
[08:08:33.346] | : . ' , ; ` | Polling for a free worker ... done
[08:08:33.346] | : . ' , ; ` | FutureRegistry('workers-e6a93581c96b8fbfe3a14d54940ecb2a', action = 'list', earlySignal = 0) ...
[08:08:33.346] | : . ' , ; ` | : Listing all futures
[08:08:33.346] | : . ' , ; ` | : Number of registered futures: 0
[08:08:33.346] | : . ' , ; ` | FutureRegistry('workers-e6a93581c96b8fbfe3a14d54940ecb2a', action = 'list', earlySignal = 0) ... done
[08:08:33.346] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:33.346] | : . ' , ; ` | Index of first available worker: 1
[08:08:33.346] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:33.446] | : . ' , ; ` | : Worker is functional
[08:08:33.447] | : . ' , ; ` | : FutureRegistry('workers-e6a93581c96b8fbfe3a14d54940ecb2a', action = 'list', earlySignal = 0) ...
[08:08:33.447] | : . ' , ; ` | : . Listing all futures
[08:08:33.447] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:33.447] | : . ' , ; ` | : FutureRegistry('workers-e6a93581c96b8fbfe3a14d54940ecb2a', action = 'list', earlySignal = 0) ... done
[08:08:33.447] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:33.447] | : . ' , ; ` requestNode() ... done
[08:08:33.447] | : . ' , ; ` cluster node index: 1
[08:08:33.448] | : . ' , ; requestWorker() ... done
[08:08:33.448] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:33.448] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:33.448] | : . ' , ; launchFuture() ...
[08:08:33.448] | : . ' , ; ` cluster node index: 1
[08:08:33.448] | : . ' , ; ` getFutureData() ...
[08:08:33.448] | : . ' , ; ` | getFutureCore() ...
[08:08:33.449] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:33.449] | : . ' , ; ` | getFutureCore() ... done
[08:08:33.449] | : . ' , ; ` | getFutureCapture() ...
[08:08:33.449] | : . ' , ; ` | getFutureCapture() ... done
[08:08:33.449] | : . ' , ; ` | getFutureContext() ...
[08:08:33.449] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:33.449] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:33.449] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:33.449] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:33.450] | : . ' , ; ` | getFutureContext() ... done
[08:08:33.450] | : . ' , ; ` getFutureData() ... done
[08:08:33.450] | : . ' , ; ` FutureRegistry('workers-e6a93581c96b8fbfe3a14d54940ecb2a', action = 'add', earlySignal = 0) ...
[08:08:33.450] | : . ' , ; ` | Appended future to position #1
[08:08:33.450] | : . ' , ; ` | Number of registered futures: 1
[08:08:33.450] | : . ' , ; ` FutureRegistry('workers-e6a93581c96b8fbfe3a14d54940ecb2a', action = 'add', earlySignal = 0) ... done
[08:08:33.450] | : . ' , ; launchFuture() ... done
[08:08:33.451] | : . ' , ; MultisessionFuture started
[08:08:33.451] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:33.451] | : . ' Launching futures ... done
[08:08:33.451] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:33.451] | : . Using MultisessionFutureBackend ... done
[08:08:33.451] | : run() for ‘Future’ (<unnamed-6>) ... done
[08:08:33.451] | : result() for ClusterFuture ...
[08:08:33.451] | : . assertValidConnection() ...
[08:08:33.452] | : . ' cluster node index: 1
[08:08:33.452] | : . assertValidConnection() ... done
[08:08:33.452] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:33.452] | : . ' cluster node index: 1
[08:08:33.494] | : . ' [1] TRUE
[08:08:33.494] | : . ' received data:
[08:08:33.494] | : . ' List of 5
[08:08:33.494] | : . '  $ type   : chr "VALUE"
[08:08:33.494] | : . '  $ value  :List of 16
[08:08:33.494] | : . '   ..$ value              : num -3
[08:08:33.494] | : . '   ..$ visible            : logi TRUE
[08:08:33.494] | : . '   ..$ stdout             : chr ""
[08:08:33.494] | : . '   ..$ conditions         : list()
[08:08:33.494] | : . '   ..$ rng                : logi FALSE
[08:08:33.494] | : . '   ..$ seed               : NULL
[08:08:33.494] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:33.494] | : . '   ..$ misuseConnections  :List of 3
[08:08:33.494] | : . '   .. ..$ added   : NULL
[08:08:33.494] | : . '   .. ..$ removed : NULL
[08:08:33.494] | : . '   .. ..$ replaced: NULL
[08:08:33.494] | : . '   ..$ misuseDevices      : NULL
[08:08:33.494] | : . '   ..$ misuseDefaultDevice: list()
[08:08:33.494] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:33"
[08:08:33.494] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:33"
[08:08:33.494] | : . '   ..$ uuid               : chr [1:2] "3b93805ec67dcdaf7b02658b8ba1fde9" "6"
[08:08:33.494] | : . '   ..$ session_uuid       : chr "4d84e32ccf249a249c720d72320ac00a"
[08:08:33.494] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:33.494] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:33.494] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:33.494] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:33.494] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:33.494] | : . '   .. .. ..$ pid   : int 70246
[08:08:33.494] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:33"
[08:08:33.494] | : . '   .. .. ..$ random: int 2147483647
[08:08:33.494] | : . '   ..$ r_info             :List of 4
[08:08:33.494] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:33.494] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:33.494] | : . '   .. ..$ os           : chr "unix"
[08:08:33.494] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:33.494] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:33.494] | : . '   ..$ version            : chr "1.8"
[08:08:33.494] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:33.494] | : . '  $ success: logi TRUE
[08:08:33.494] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:33.494] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:33.494] | : . '  $ tag    : NULL
[08:08:33.505] | : . ' Received FutureResult
[08:08:33.505] | : . ' FutureResult:
[08:08:33.505] | : . ' value: ‘numeric’
[08:08:33.505] | : . ' visible: TRUE
[08:08:33.505] | : . ' stdout: character
[08:08:33.505] | : . ' conditions: [n = 0] 
[08:08:33.505] | : . ' RNG used: FALSE
[08:08:33.505] | : . ' duration: 0.002708197 secs (started 2025-06-17 08:08:33.490839)
[08:08:33.505] | : . ' version: 1.8
[08:08:33.506] | : . ' FutureRegistry('workers-e6a93581c96b8fbfe3a14d54940ecb2a', action = 'remove', earlySignal = 0) ...
[08:08:33.506] | : . ' , Removed future from position #1
[08:08:33.506] | : . ' , Number of registered futures: 0
[08:08:33.506] | : . ' FutureRegistry('workers-e6a93581c96b8fbfe3a14d54940ecb2a', action = 'remove', earlySignal = 0) ... done
[08:08:33.506] | : . ' Erased future from future backend
[08:08:33.506] | : . ' result() for ClusterFuture ...
[08:08:33.507] | : . ' , result already collected: FutureResult
[08:08:33.507] | : . ' result() for ClusterFuture ... done
[08:08:33.507] | : . ' signalConditions() ...
[08:08:33.507] | : . ' , include = ‘immediateCondition’
[08:08:33.507] | : . ' , exclude = 
[08:08:33.507] | : . ' , resignal = FALSE
[08:08:33.507] | : . ' , Number of conditions: 0
[08:08:33.507] | : . ' ,  int 0
[08:08:33.508] | : . ' signalConditions() ... done
[08:08:33.508] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:33.508] | : result() for ClusterFuture ... done
[08:08:33.508] | : result() for ClusterFuture ...
[08:08:33.508] | : . result already collected: FutureResult
[08:08:33.508] | : result() for ClusterFuture ... done
[08:08:33.508] | : signalConditions() ...
[08:08:33.508] | : . include = ‘immediateCondition’
[08:08:33.509] | : . exclude = 
[08:08:33.509] | : . resignal = FALSE
[08:08:33.509] | : . Number of conditions: 0
[08:08:33.509] | : .  int 0
[08:08:33.509] | : signalConditions() ... done
[08:08:33.509] | : relay stdout ...
[08:08:33.509] | : relay stdout ... done
[08:08:33.510] | : check for misuse ...
[08:08:33.510] | : check for misuse ... done
[08:08:33.510] | value() for Future (<unnamed-6>) ... done
[1] -3
future.globals.keepWhere=TRUE
[08:08:33.510] | plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:33.510] | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:33.510] | : . all.equal() for FutureStrategyList ...
[08:08:33.510] | : . ' New stack:
[08:08:33.510] | : . ' List of 1
[08:08:33.510] | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:33.510] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:33.510] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:33.510] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:33.510] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:33.510] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:33.510] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:33.510] | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:33.513] | : . ' Old stack:
[08:08:33.513] | : . ' List of 1
[08:08:33.513] | : . '  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:33.513] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:33.513] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:33.513] | : . '   ..- attr(*, "init")= chr "done"
[08:08:33.513] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:33.513] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:33.513] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:33.513] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:33.513] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:08:33.513] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:33.513] | : . '   ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3c8d3a98> 
[08:08:33.513] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:33.513] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:33.513] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:33.513] | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:33.517] | : . ' Not identical
[08:08:33.517] | : . ' all.equal() for future ...
[08:08:33.517] | : . ' , List of 2
[08:08:33.517] | : . ' ,  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:33.517] | : . ' ,   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:33.517] | : . ' ,   ..- attr(*, "init")= logi TRUE
[08:08:33.517] | : . ' ,   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:33.517] | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:33.517] | : . ' ,   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:33.517] | : . ' ,   ..- attr(*, "call")= language plan(sequential)
[08:08:33.517] | : . ' ,  $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:33.517] | : . ' ,     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:33.517] | : . ' ,   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:33.517] | : . ' ,   ..- attr(*, "init")= chr "done"
[08:08:33.517] | : . ' ,   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:33.517] | : . ' ,     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:33.517] | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:33.517] | : . ' ,   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:33.517] | : . ' ,   ..- attr(*, "untweakable")= chr "persistent"
[08:08:33.517] | : . ' ,   ..- attr(*, "call")= language plan(strategy)
[08:08:33.517] | : . ' ,   ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ca3c8d3a98> 
[08:08:33.517] | : . ' ,   .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:33.517] | : . ' ,     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:33.517] | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:33.522] | : . ' , Formals differ
[08:08:33.522] | : . ' all.equal() for future ... done
[08:08:33.522] | : . ' Future strategies differ at level 1
[08:08:33.522] | : . all.equal() for FutureStrategyList ... done
[08:08:33.523] | : . plan(): Setting new future backend stack:
[08:08:33.523] | : . List of future strategies:
[08:08:33.523] | : . 1. sequential:
[08:08:33.523] | : .    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:33.523] | : .    - tweaked: FALSE
[08:08:33.523] | : .    - call: plan(sequential)
[08:08:33.523] | : . List of 1
[08:08:33.523] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:33.523] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:33.523] | : .   ..- attr(*, "init")= logi TRUE
[08:08:33.523] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:33.523] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:33.523] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:33.523] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:33.523] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:33.526] | : . plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:33.526] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:33.526] | : . ' , Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:08:33.526] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:33.526] | : . ' stopWorkers() for MultisessionFutureBackend ...
[08:08:33.526] | : . ' , Interrupt active futures ...
[08:08:33.527] | : . ' , ; Number of futures: 0
[08:08:33.527] | : . ' , Interrupt active futures ... done
[08:08:33.527] | : . ' , Clear future registry ...
[08:08:33.527] | : . ' , Clear future registry ... done
[08:08:33.527] | : . ' , Stop cluster workers ...
[08:08:33.528] | : . ' , ; Stopping existing cluster ...
[08:08:33.528] | : . ' , ; ` Cluster to shut down:
[08:08:33.528] | : . ' , ; ` Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:33.548] | : . ' , ; ` Stopped cluster: ‘c(TRUE, TRUE)’
[08:08:33.587] | : . ' , ; Stopping existing cluster ... done
[08:08:33.587] | : . ' , Stop cluster workers ... done
[08:08:33.587] | : . ' stopWorkers() for MultisessionFutureBackend ... done
[08:08:33.587] | : . ' Legacy shutdown of cluster workers ...
[08:08:33.587] | : . ' , Stopping existing cluster ...
[08:08:33.587] | : . ' , ; No pre-existing cluster. Skipping
[08:08:33.587] | : . ' , Stopping existing cluster ... done
[08:08:33.587] | : . ' Legacy shutdown of cluster workers ... done
[08:08:33.588] | : . plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:33.588] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:33.588] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:33.588] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:33.588] | : . '  - attr(*, "init")= logi TRUE
[08:08:33.588] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:33.588] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:33.588] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:33.588] | : . '  - attr(*, "call")= language plan(sequential)
[08:08:33.590] | : . ' init: TRUE
[08:08:33.590] | : . ' makeFutureBackend(<sequential>) ...
[08:08:33.590] | : . ' , Backend function: <‘NULL’>
[08:08:33.590] | : . ' , Evaluator tweak arguments: [n=0]
[08:08:33.591] | : . ' ,  list()
[08:08:33.591] | : . ' , Evaluator formal arguments: [n=2]
[08:08:33.591] | : . ' ,  list()
[08:08:33.591] | : . ' , Backend factory arguments: [n=2]
[08:08:33.591] | : . ' , Dotted pair list of 2
[08:08:33.591] | : . ' ,  $ gc         : logi FALSE
[08:08:33.591] | : . ' ,  $ earlySignal: logi FALSE
[08:08:33.592] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:33.592] | : . ' makeFutureBackend(<sequential>) ... done
[08:08:33.593] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:33.593] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:33.593] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:33.593] | : . plan(): nbrOfWorkers() = 1
[08:08:33.593] | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:33.593] | plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done

> message("*** Globals - S4 methods ... DONE")
*** Globals - S4 methods ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.8s, sys.self=0.05s, elapsed=2s, user.child=0.3s, sys.child=0.4s
Test ‘globals,S4methods’ ... success
> 
