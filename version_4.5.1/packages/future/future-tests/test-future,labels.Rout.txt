
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-future,labels.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("future,labels")
Test ‘future,labels’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-future,labels.R’

> library(future)
[08:07:38.962] Option 'future.startup.script': TRUE
[08:07:38.962] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:07:38.962] Future startup scripts found: <none>

> message("*** Futures - labels ...")
*** Futures - labels ...

> strategies <- supportedStrategies()

> for (strategy in strategies) {
+     message(sprintf("- plan('%s') ...", strategy))
+     plan(strategy)
+     for (label in list(NULL, sprintf("str ..." ... [TRUNCATED] 
- plan('sequential') ...
[08:07:38.976] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:38.976] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:07:38.976] | : all.equal() for FutureStrategyList ...
[08:07:38.976] | : . New stack:
[08:07:38.976] | : . List of 1
[08:07:38.976] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:38.976] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:38.976] | : .   ..- attr(*, "init")= logi TRUE
[08:07:38.976] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:38.976] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:38.976] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:38.976] | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:38.976] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:38.981] | : . Old stack:
[08:07:38.981] | : . List of 1
[08:07:38.981] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:38.981] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:38.981] | : .   ..- attr(*, "init")= logi TRUE
[08:07:38.981] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:38.981] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:38.981] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:38.981] | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:38.981] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:38.983] | : . Not identical
[08:07:38.983] | : . all.equal() for future ...
[08:07:38.983] | : . ' List of 2
[08:07:38.983] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:38.983] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:38.983] | : . '   ..- attr(*, "init")= logi TRUE
[08:07:38.983] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:38.983] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:38.983] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:38.983] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:38.983] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:38.983] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:38.983] | : . '   ..- attr(*, "init")= logi TRUE
[08:07:38.983] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:38.983] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:38.983] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:38.983] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:07:38.988] | : . all.equal() for future ... done
[08:07:38.988] | : all.equal() for FutureStrategyList ... done
[08:07:38.988] | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:38.988] | : List of future strategies:
[08:07:38.988] | : 1. sequential:
[08:07:38.988] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:38.988] | :    - tweaked: FALSE
[08:07:38.988] | :    - call: plan(sequential)
[08:07:38.989] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:07:38.989] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:38.989] future(..., label = NULL) ...
[08:07:38.989] | lazy: FALSE
[08:07:38.989] | stdout: TRUE
[08:07:38.990] | conditions: [n=1] ‘condition’
[08:07:38.990] | gc: FALSE
[08:07:38.990] | earlySignal: FALSE
[08:07:38.990] | getGlobalsAndPackages() ...
[08:07:38.990] | : Searching for globals ...
[08:07:38.997] | : . globals found: [0] 
[08:07:38.997] | : Searching for globals ... done
[08:07:38.997] | : globals: [0] <none>
[08:07:38.998] | : packages: [0] <none>
[08:07:38.998] | getGlobalsAndPackages() ... done
[08:07:38.998] | run() for ‘Future’ (<unnamed-1>) ...
[08:07:38.998] | : state: ‘created’
[08:07:38.999] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:38.999] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:38.999] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:38.999] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:38.999] | : . '  - attr(*, "init")= logi TRUE
[08:07:38.999] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:38.999] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:38.999] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:38.999] | : . '  - attr(*, "call")= language plan(sequential)
[08:07:39.002] | : . ' init: TRUE
[08:07:39.003] | : . ' makeFutureBackend(<sequential>) ...
[08:07:39.003] | : . ' , Backend function: <‘NULL’>
[08:07:39.003] | : . ' , Evaluator tweak arguments: [n=0]
[08:07:39.003] | : . ' ,  list()
[08:07:39.003] | : . ' , Evaluator formal arguments: [n=2]
[08:07:39.003] | : . ' ,  list()
[08:07:39.004] | : . ' , Backend factory arguments: [n=2]
[08:07:39.004] | : . ' , Dotted pair list of 2
[08:07:39.004] | : . ' ,  $ gc         : logi FALSE
[08:07:39.004] | : . ' ,  $ earlySignal: logi FALSE
[08:07:39.005] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:39.005] | : . ' makeFutureBackend(<sequential>) ... done
[08:07:39.005] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:39.005] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.005] | : Using SequentialFutureBackend ...
[08:07:39.005] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:07:39.006] | : . Launching futures ...
[08:07:39.006] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:39.006] | : . ' , getFutureData() ...
[08:07:39.006] | : . ' , ; getFutureCore() ...
[08:07:39.006] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:39.006] | : . ' , ; getFutureCore() ... done
[08:07:39.006] | : . ' , ; getFutureCapture() ...
[08:07:39.007] | : . ' , ; getFutureCapture() ... done
[08:07:39.007] | : . ' , ; getFutureContext() ...
[08:07:39.007] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.007] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:39.007] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.007] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:39.007] | : . ' , ; getFutureContext() ... done
[08:07:39.008] | : . ' , getFutureData() ... done
[08:07:39.010] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.010] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:39.010] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.010] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.011] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:39.011] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:39.011] | : . ' , ; ` | New stack:
[08:07:39.011] | : . ' , ; ` | List of 1
[08:07:39.011] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.011] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.011] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:39.011] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.011] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.011] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.011] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.011] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.013] | : . ' , ; ` | Old stack:
[08:07:39.014] | : . ' , ; ` | List of 1
[08:07:39.014] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.014] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.014] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:39.014] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.014] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.014] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.014] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:39.014] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4954c3d70> 
[08:07:39.014] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.014] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.014] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.017] | : . ' , ; ` | Not identical
[08:07:39.017] | : . ' , ; ` | all.equal() for future ...
[08:07:39.017] | : . ' , ; ` | : List of 2
[08:07:39.017] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.017] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.017] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:39.017] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.017] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.017] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.017] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.017] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.017] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.017] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.017] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.017] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.017] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.017] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:39.017] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4954c3d70> 
[08:07:39.017] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.017] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.022] | : . ' , ; ` | all.equal() for future ... done
[08:07:39.022] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:39.022] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:39.022] | : . ' , ; ` List of future strategies:
[08:07:39.022] | : . ' , ; ` 1. sequential:
[08:07:39.022] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:39.022] | : . ' , ; `    - tweaked: FALSE
[08:07:39.022] | : . ' , ; `    - call: plan(sequential)
[08:07:39.023] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:39.023] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.026] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.026] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.026] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:39.026] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:39.026] | : . ' , ; ` | : New stack:
[08:07:39.027] | : . ' , ; ` | : List of 1
[08:07:39.027] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.027] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.027] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.027] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.027] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.027] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.027] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:39.027] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4954c3d70> 
[08:07:39.027] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.027] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.027] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.030] | : . ' , ; ` | : Old stack:
[08:07:39.030] | : . ' , ; ` | : List of 1
[08:07:39.030] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.030] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.030] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.030] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.030] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.030] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.030] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:39.030] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4954c3d70> 
[08:07:39.030] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.030] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.030] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.033] | : . ' , ; ` | : Identical
[08:07:39.033] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:39.033] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:39.033] | : . ' , ; ` | List of future strategies:
[08:07:39.033] | : . ' , ; ` | 1. sequential:
[08:07:39.033] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:39.033] | : . ' , ; ` |    - tweaked: FALSE
[08:07:39.033] | : . ' , ; ` |    - call: plan(sequential)
[08:07:39.034] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:39.034] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.034] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.036] | : . ' , SequentialFuture started (and completed)
[08:07:39.037] | : . ' , signalConditions() ...
[08:07:39.037] | : . ' , ; include = ‘immediateCondition’
[08:07:39.037] | : . ' , ; exclude = 
[08:07:39.037] | : . ' , ; resignal = FALSE
[08:07:39.037] | : . ' , ; Number of conditions: 6
[08:07:39.037] | : . ' , ;  int 6
[08:07:39.038] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.038] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.038] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.038] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.038] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.038] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.039] | : . ' , signalConditions() ... done
[08:07:39.039] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:39.039] | : . Launching futures ... done
[08:07:39.039] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:39.039] | : Using SequentialFutureBackend ... done
[08:07:39.039] | run() for ‘Future’ (<unnamed-1>) ... done
[08:07:39.039] future(..., label = NULL) ... done
SequentialFuture:
Label: <unnamed-1>
Expression:
[1] 42
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: 6c5907d87436f90883f0d017798056a2-1
Owner process: 6c5907d87436f90883f0d017798056a2
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01703858 secs (started 2025-06-17 08:07:39.009073)
Worker process: 6c5907d87436f90883f0d017798056a2
[08:07:39.041] value() for SequentialFuture (<unnamed-1>) ...
[08:07:39.041] | signalConditions() ...
[08:07:39.041] | : include = ‘immediateCondition’
[08:07:39.041] | : exclude = 
[08:07:39.041] | : resignal = FALSE
[08:07:39.041] | : Number of conditions: 6
[08:07:39.041] | :  int 6
[08:07:39.042] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.042] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.042] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.042] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.042] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.042] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.043] | signalConditions() ... done
[08:07:39.043] | relay stdout ...
[08:07:39.043] | relay stdout ... done
[08:07:39.043] | check for misuse ...
[08:07:39.043] | check for misuse ... done
[08:07:39.043] | relay conditions ...
[08:07:39.043] | : Future state: ‘finished’
[08:07:39.043] | : signalConditions() ...
[08:07:39.043] | : . include = ‘condition’
[08:07:39.043] | : . exclude = ‘immediateCondition’
[08:07:39.044] | : . resignal = TRUE
[08:07:39.044] | : . Number of conditions: 6
[08:07:39.044] | : .  int 6
[08:07:39.044] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.044] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.009] | : . ' , attachPackages() ...
[08:07:39.044] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.044] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.009] | : . ' , ; packages: [n=1] ‘future’
[08:07:39.045] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.045] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.009] | : . ' , attachPackages() ... done
[08:07:39.045] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.045] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.009] | : . ' , attachPackages() ...
[08:07:39.045] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.045] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.009] | : . ' , ; packages: [n=0] 
[08:07:39.045] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.045] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.009] | : . ' , attachPackages() ... done
[08:07:39.046] | : signalConditions() ... done
[08:07:39.046] | relay conditions ... done
[08:07:39.046] value() for SequentialFuture (<unnamed-1>) ... done
[08:07:39.047] future(..., label = NULL) ...
[08:07:39.047] | lazy: FALSE
[08:07:39.047] | stdout: TRUE
[08:07:39.047] | conditions: [n=1] ‘condition’
[08:07:39.047] | gc: FALSE
[08:07:39.048] | earlySignal: FALSE
[08:07:39.048] | getGlobalsAndPackages() ...
[08:07:39.048] | : Searching for globals ...
[08:07:39.052] | : . globals found: [1] ‘{’
[08:07:39.052] | : Searching for globals ... done
[08:07:39.052] | : Resolving globals: FALSE
[08:07:39.052] | : Search for packages associated with the globals ...
[08:07:39.053] | : . Packages associated with globals: [1] ‘base’
[08:07:39.053] | : . Packages: [1] ‘base’
[08:07:39.053] | : Search for packages associated with the globals ... done
[08:07:39.053] | : Packages after dropping 'base': [0] 
[08:07:39.053] | : globals: [0] 
[08:07:39.053] | : packages: [0] 
[08:07:39.054] | getGlobalsAndPackages() ... done
[08:07:39.054] | run() for ‘Future’ (<unnamed-2>) ...
[08:07:39.054] | : state: ‘created’
[08:07:39.054] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.054] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.054] | : Using SequentialFutureBackend ...
[08:07:39.054] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:07:39.054] | : . Launching futures ...
[08:07:39.055] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:39.055] | : . ' , getFutureData() ...
[08:07:39.055] | : . ' , ; getFutureCore() ...
[08:07:39.055] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:39.055] | : . ' , ; getFutureCore() ... done
[08:07:39.055] | : . ' , ; getFutureCapture() ...
[08:07:39.055] | : . ' , ; getFutureCapture() ... done
[08:07:39.055] | : . ' , ; getFutureContext() ...
[08:07:39.055] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.056] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:39.056] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.056] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:39.056] | : . ' , ; getFutureContext() ... done
[08:07:39.056] | : . ' , getFutureData() ... done
[08:07:39.057] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.057] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:39.057] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.058] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.058] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:39.058] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:39.058] | : . ' , ; ` | New stack:
[08:07:39.058] | : . ' , ; ` | List of 1
[08:07:39.058] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.058] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.058] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:39.058] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.058] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.058] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.058] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.058] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.061] | : . ' , ; ` | Old stack:
[08:07:39.061] | : . ' , ; ` | List of 1
[08:07:39.061] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.061] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.061] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:39.061] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.061] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.061] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.061] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:39.061] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4954c3d70> 
[08:07:39.061] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.061] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.061] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.064] | : . ' , ; ` | Not identical
[08:07:39.064] | : . ' , ; ` | all.equal() for future ...
[08:07:39.064] | : . ' , ; ` | : List of 2
[08:07:39.064] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.064] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.064] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:39.064] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.064] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.064] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.064] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.064] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.064] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.064] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.064] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.064] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.064] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.064] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:39.064] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4954c3d70> 
[08:07:39.064] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.064] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.070] | : . ' , ; ` | all.equal() for future ... done
[08:07:39.070] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:39.070] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:39.070] | : . ' , ; ` List of future strategies:
[08:07:39.070] | : . ' , ; ` 1. sequential:
[08:07:39.070] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:39.070] | : . ' , ; `    - tweaked: FALSE
[08:07:39.070] | : . ' , ; `    - call: plan(sequential)
[08:07:39.071] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:39.071] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.072] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.073] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.073] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:39.073] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:39.073] | : . ' , ; ` | : New stack:
[08:07:39.073] | : . ' , ; ` | : List of 1
[08:07:39.073] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.073] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.073] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.073] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.073] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.073] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.073] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:39.073] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4954c3d70> 
[08:07:39.073] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.073] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.073] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.076] | : . ' , ; ` | : Old stack:
[08:07:39.076] | : . ' , ; ` | : List of 1
[08:07:39.076] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.076] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.076] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.076] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.076] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.076] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.076] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:39.076] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4954c3d70> 
[08:07:39.076] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.076] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.076] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.079] | : . ' , ; ` | : Identical
[08:07:39.079] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:39.079] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:39.080] | : . ' , ; ` | List of future strategies:
[08:07:39.080] | : . ' , ; ` | 1. sequential:
[08:07:39.080] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:39.080] | : . ' , ; ` |    - tweaked: FALSE
[08:07:39.080] | : . ' , ; ` |    - call: plan(sequential)
[08:07:39.080] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:39.080] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.080] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.080] | : . ' , SequentialFuture started (and completed)
[08:07:39.081] | : . ' , signalConditions() ...
[08:07:39.081] | : . ' , ; include = ‘immediateCondition’
[08:07:39.081] | : . ' , ; exclude = 
[08:07:39.081] | : . ' , ; resignal = FALSE
[08:07:39.081] | : . ' , ; Number of conditions: 6
[08:07:39.081] | : . ' , ;  int 6
[08:07:39.081] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.082] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.082] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.082] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.082] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.082] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.082] | : . ' , signalConditions() ... done
[08:07:39.082] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:39.082] | : . Launching futures ... done
[08:07:39.082] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:39.082] | : Using SequentialFutureBackend ... done
[08:07:39.083] | run() for ‘Future’ (<unnamed-2>) ... done
[08:07:39.083] future(..., label = NULL) ... done
SequentialFuture:
Label: <unnamed-2>
Expression:
{
    42
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: 6c5907d87436f90883f0d017798056a2-2
Owner process: 6c5907d87436f90883f0d017798056a2
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01613593 secs (started 2025-06-17 08:07:39.056576)
Worker process: 6c5907d87436f90883f0d017798056a2
[08:07:39.083] value() for SequentialFuture (<unnamed-2>) ...
[08:07:39.084] | signalConditions() ...
[08:07:39.084] | : include = ‘immediateCondition’
[08:07:39.084] | : exclude = 
[08:07:39.084] | : resignal = FALSE
[08:07:39.084] | : Number of conditions: 6
[08:07:39.084] | :  int 6
[08:07:39.084] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.085] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.085] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.085] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.085] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.085] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.085] | signalConditions() ... done
[08:07:39.085] | relay stdout ...
[08:07:39.085] | relay stdout ... done
[08:07:39.085] | check for misuse ...
[08:07:39.085] | check for misuse ... done
[08:07:39.086] | relay conditions ...
[08:07:39.086] | : Future state: ‘finished’
[08:07:39.086] | : signalConditions() ...
[08:07:39.086] | : . include = ‘condition’
[08:07:39.086] | : . exclude = ‘immediateCondition’
[08:07:39.086] | : . resignal = TRUE
[08:07:39.086] | : . Number of conditions: 6
[08:07:39.086] | : .  int 6
[08:07:39.087] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.087] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.056] | : . ' , attachPackages() ...
[08:07:39.087] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.087] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.056] | : . ' , ; packages: [n=1] ‘future’
[08:07:39.087] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.088] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.056] | : . ' , attachPackages() ... done
[08:07:39.088] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.088] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.057] | : . ' , attachPackages() ...
[08:07:39.088] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.089] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.057] | : . ' , ; packages: [n=0] 
[08:07:39.089] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.089] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.057] | : . ' , attachPackages() ... done
[08:07:39.089] | : signalConditions() ... done
[08:07:39.089] | relay conditions ... done
[08:07:39.089] value() for SequentialFuture (<unnamed-2>) ... done
[08:07:39.089] future(..., label = ‘strategy = sequential’) ...
[08:07:39.089] | lazy: FALSE
[08:07:39.089] | stdout: TRUE
[08:07:39.089] | conditions: [n=1] ‘condition’
[08:07:39.090] | gc: FALSE
[08:07:39.090] | earlySignal: FALSE
[08:07:39.090] | getGlobalsAndPackages() ...
[08:07:39.090] | : Searching for globals ...
[08:07:39.091] | : . globals found: [0] 
[08:07:39.091] | : Searching for globals ... done
[08:07:39.091] | : globals: [0] <none>
[08:07:39.091] | : packages: [0] <none>
[08:07:39.091] | getGlobalsAndPackages() ... done
[08:07:39.092] | run() for ‘Future’ (‘strategy = sequential’) ...
[08:07:39.092] | : state: ‘created’
[08:07:39.092] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.092] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.092] | : Using SequentialFutureBackend ...
[08:07:39.092] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:07:39.092] | : . Launching futures ...
[08:07:39.092] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:39.092] | : . ' , getFutureData() ...
[08:07:39.093] | : . ' , ; getFutureCore() ...
[08:07:39.093] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:39.093] | : . ' , ; getFutureCore() ... done
[08:07:39.093] | : . ' , ; getFutureCapture() ...
[08:07:39.093] | : . ' , ; getFutureCapture() ... done
[08:07:39.093] | : . ' , ; getFutureContext() ...
[08:07:39.093] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.093] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:39.093] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.093] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:39.094] | : . ' , ; getFutureContext() ... done
[08:07:39.094] | : . ' , getFutureData() ... done
[08:07:39.095] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.095] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:39.095] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.095] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.095] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:39.096] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:39.096] | : . ' , ; ` | New stack:
[08:07:39.096] | : . ' , ; ` | List of 1
[08:07:39.096] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.096] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.096] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:39.096] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.096] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.096] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.096] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.096] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.098] | : . ' , ; ` | Old stack:
[08:07:39.098] | : . ' , ; ` | List of 1
[08:07:39.098] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.098] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.098] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:39.098] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.098] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.098] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.098] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:39.098] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4954c3d70> 
[08:07:39.098] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.098] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.098] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.101] | : . ' , ; ` | Not identical
[08:07:39.101] | : . ' , ; ` | all.equal() for future ...
[08:07:39.101] | : . ' , ; ` | : List of 2
[08:07:39.101] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.101] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.101] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:39.101] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.101] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.101] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.101] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.101] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.101] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.101] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.101] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.101] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.101] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.101] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:39.101] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4954c3d70> 
[08:07:39.101] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.101] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.107] | : . ' , ; ` | all.equal() for future ... done
[08:07:39.107] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:39.107] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:39.107] | : . ' , ; ` List of future strategies:
[08:07:39.107] | : . ' , ; ` 1. sequential:
[08:07:39.107] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:39.107] | : . ' , ; `    - tweaked: FALSE
[08:07:39.107] | : . ' , ; `    - call: plan(sequential)
[08:07:39.108] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:39.108] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.109] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.110] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.110] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:39.110] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:39.110] | : . ' , ; ` | : New stack:
[08:07:39.110] | : . ' , ; ` | : List of 1
[08:07:39.110] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.110] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.110] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.110] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.110] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.110] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.110] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:39.110] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4954c3d70> 
[08:07:39.110] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.110] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.110] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.113] | : . ' , ; ` | : Old stack:
[08:07:39.113] | : . ' , ; ` | : List of 1
[08:07:39.113] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.113] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.113] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.113] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.113] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.113] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.113] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:39.113] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4954c3d70> 
[08:07:39.113] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.113] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.113] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.116] | : . ' , ; ` | : Identical
[08:07:39.116] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:39.116] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:39.116] | : . ' , ; ` | List of future strategies:
[08:07:39.116] | : . ' , ; ` | 1. sequential:
[08:07:39.116] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:39.116] | : . ' , ; ` |    - tweaked: FALSE
[08:07:39.116] | : . ' , ; ` |    - call: plan(sequential)
[08:07:39.117] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:39.117] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.117] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.117] | : . ' , SequentialFuture started (and completed)
[08:07:39.117] | : . ' , signalConditions() ...
[08:07:39.117] | : . ' , ; include = ‘immediateCondition’
[08:07:39.118] | : . ' , ; exclude = 
[08:07:39.118] | : . ' , ; resignal = FALSE
[08:07:39.118] | : . ' , ; Number of conditions: 6
[08:07:39.118] | : . ' , ;  int 6
[08:07:39.118] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.118] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.118] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.118] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.119] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.119] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.119] | : . ' , signalConditions() ... done
[08:07:39.119] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:39.119] | : . Launching futures ... done
[08:07:39.119] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:39.119] | : Using SequentialFutureBackend ... done
[08:07:39.119] | run() for ‘Future’ (‘strategy = sequential’) ... done
[08:07:39.119] future(..., label = ‘strategy = sequential’) ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: 6c5907d87436f90883f0d017798056a2-3
Owner process: 6c5907d87436f90883f0d017798056a2
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.0153439 secs (started 2025-06-17 08:07:39.094287)
Worker process: 6c5907d87436f90883f0d017798056a2
[08:07:39.120] value() for SequentialFuture (‘strategy = sequential’) ...
[08:07:39.120] | signalConditions() ...
[08:07:39.120] | : include = ‘immediateCondition’
[08:07:39.120] | : exclude = 
[08:07:39.120] | : resignal = FALSE
[08:07:39.121] | : Number of conditions: 6
[08:07:39.121] | :  int 6
[08:07:39.121] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.121] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.121] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.121] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.121] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.122] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.122] | signalConditions() ... done
[08:07:39.122] | relay stdout ...
[08:07:39.122] | relay stdout ... done
[08:07:39.122] | check for misuse ...
[08:07:39.122] | check for misuse ... done
[08:07:39.122] | relay conditions ...
[08:07:39.122] | : Future state: ‘finished’
[08:07:39.122] | : signalConditions() ...
[08:07:39.122] | : . include = ‘condition’
[08:07:39.122] | : . exclude = ‘immediateCondition’
[08:07:39.123] | : . resignal = TRUE
[08:07:39.123] | : . Number of conditions: 6
[08:07:39.123] | : .  int 6
[08:07:39.123] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.123] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.094] | : . ' , attachPackages() ...
[08:07:39.123] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.123] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.094] | : . ' , ; packages: [n=1] ‘future’
[08:07:39.124] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.124] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.094] | : . ' , attachPackages() ... done
[08:07:39.124] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.124] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.094] | : . ' , attachPackages() ...
[08:07:39.124] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.124] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.094] | : . ' , ; packages: [n=0] 
[08:07:39.125] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.125] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.095] | : . ' , attachPackages() ... done
[08:07:39.125] | : signalConditions() ... done
[08:07:39.125] | relay conditions ... done
[08:07:39.126] value() for SequentialFuture (‘strategy = sequential’) ... done
[08:07:39.126] future(..., label = ‘strategy = sequential’) ...
[08:07:39.126] | lazy: FALSE
[08:07:39.126] | stdout: TRUE
[08:07:39.126] | conditions: [n=1] ‘condition’
[08:07:39.126] | gc: FALSE
[08:07:39.126] | earlySignal: FALSE
[08:07:39.126] | getGlobalsAndPackages() ...
[08:07:39.126] | : Searching for globals ...
[08:07:39.129] | : . globals found: [1] ‘{’
[08:07:39.129] | : Searching for globals ... done
[08:07:39.129] | : Resolving globals: FALSE
[08:07:39.130] | : Search for packages associated with the globals ...
[08:07:39.130] | : . Packages associated with globals: [1] ‘base’
[08:07:39.130] | : . Packages: [1] ‘base’
[08:07:39.130] | : Search for packages associated with the globals ... done
[08:07:39.130] | : Packages after dropping 'base': [0] 
[08:07:39.130] | : globals: [0] 
[08:07:39.130] | : packages: [0] 
[08:07:39.130] | getGlobalsAndPackages() ... done
[08:07:39.131] | run() for ‘Future’ (‘strategy = sequential’) ...
[08:07:39.131] | : state: ‘created’
[08:07:39.131] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.131] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.131] | : Using SequentialFutureBackend ...
[08:07:39.131] | : . Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:07:39.131] | : . Launching futures ...
[08:07:39.131] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:39.132] | : . ' , getFutureData() ...
[08:07:39.132] | : . ' , ; getFutureCore() ...
[08:07:39.132] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:39.132] | : . ' , ; getFutureCore() ... done
[08:07:39.132] | : . ' , ; getFutureCapture() ...
[08:07:39.132] | : . ' , ; getFutureCapture() ... done
[08:07:39.132] | : . ' , ; getFutureContext() ...
[08:07:39.132] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.132] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:39.132] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.132] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:39.133] | : . ' , ; getFutureContext() ... done
[08:07:39.133] | : . ' , getFutureData() ... done
[08:07:39.134] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.134] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:39.134] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.134] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.134] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:39.135] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:39.135] | : . ' , ; ` | New stack:
[08:07:39.135] | : . ' , ; ` | List of 1
[08:07:39.135] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.135] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.135] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:39.135] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.135] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.135] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.135] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.135] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.137] | : . ' , ; ` | Old stack:
[08:07:39.137] | : . ' , ; ` | List of 1
[08:07:39.137] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.137] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.137] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:39.137] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.137] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.137] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.137] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:39.137] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4954c3d70> 
[08:07:39.137] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.137] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.137] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.140] | : . ' , ; ` | Not identical
[08:07:39.140] | : . ' , ; ` | all.equal() for future ...
[08:07:39.140] | : . ' , ; ` | : List of 2
[08:07:39.140] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.140] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.140] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:39.140] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.140] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.140] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.140] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.140] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.140] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.140] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.140] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.140] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.140] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.140] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:39.140] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4954c3d70> 
[08:07:39.140] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.140] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.146] | : . ' , ; ` | all.equal() for future ... done
[08:07:39.146] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:39.147] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:39.147] | : . ' , ; ` List of future strategies:
[08:07:39.147] | : . ' , ; ` 1. sequential:
[08:07:39.147] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:39.147] | : . ' , ; `    - tweaked: FALSE
[08:07:39.147] | : . ' , ; `    - call: plan(sequential)
[08:07:39.147] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:39.147] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.149] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.149] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.149] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:39.149] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:39.149] | : . ' , ; ` | : New stack:
[08:07:39.149] | : . ' , ; ` | : List of 1
[08:07:39.149] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.149] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.149] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.149] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.149] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.149] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.149] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:39.149] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4954c3d70> 
[08:07:39.149] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.149] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.149] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.152] | : . ' , ; ` | : Old stack:
[08:07:39.152] | : . ' , ; ` | : List of 1
[08:07:39.152] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.152] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.152] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.152] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.152] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.152] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.152] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:39.152] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4954c3d70> 
[08:07:39.152] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.152] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.152] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.155] | : . ' , ; ` | : Identical
[08:07:39.155] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:39.156] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:39.156] | : . ' , ; ` | List of future strategies:
[08:07:39.156] | : . ' , ; ` | 1. sequential:
[08:07:39.156] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:39.156] | : . ' , ; ` |    - tweaked: FALSE
[08:07:39.156] | : . ' , ; ` |    - call: plan(sequential)
[08:07:39.156] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:39.156] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.156] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.157] | : . ' , SequentialFuture started (and completed)
[08:07:39.157] | : . ' , signalConditions() ...
[08:07:39.157] | : . ' , ; include = ‘immediateCondition’
[08:07:39.157] | : . ' , ; exclude = 
[08:07:39.157] | : . ' , ; resignal = FALSE
[08:07:39.157] | : . ' , ; Number of conditions: 6
[08:07:39.157] | : . ' , ;  int 6
[08:07:39.158] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.158] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.158] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.158] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.158] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.158] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.158] | : . ' , signalConditions() ... done
[08:07:39.158] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:39.158] | : . Launching futures ... done
[08:07:39.158] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:39.159] | : Using SequentialFutureBackend ... done
[08:07:39.159] | run() for ‘Future’ (‘strategy = sequential’) ... done
[08:07:39.159] future(..., label = ‘strategy = sequential’) ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
{
    42
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: 6c5907d87436f90883f0d017798056a2-4
Owner process: 6c5907d87436f90883f0d017798056a2
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01554275 secs (started 2025-06-17 08:07:39.133338)
Worker process: 6c5907d87436f90883f0d017798056a2
[08:07:39.160] value() for SequentialFuture (‘strategy = sequential’) ...
[08:07:39.160] | signalConditions() ...
[08:07:39.160] | : include = ‘immediateCondition’
[08:07:39.160] | : exclude = 
[08:07:39.160] | : resignal = FALSE
[08:07:39.160] | : Number of conditions: 6
[08:07:39.160] | :  int 6
[08:07:39.161] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.161] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.161] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.161] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.161] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.162] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.162] | signalConditions() ... done
[08:07:39.162] | relay stdout ...
[08:07:39.162] | relay stdout ... done
[08:07:39.162] | check for misuse ...
[08:07:39.162] | check for misuse ... done
[08:07:39.162] | relay conditions ...
[08:07:39.163] | : Future state: ‘finished’
[08:07:39.163] | : signalConditions() ...
[08:07:39.163] | : . include = ‘condition’
[08:07:39.163] | : . exclude = ‘immediateCondition’
[08:07:39.163] | : . resignal = TRUE
[08:07:39.163] | : . Number of conditions: 6
[08:07:39.163] | : .  int 6
[08:07:39.164] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.164] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.133] | : . ' , attachPackages() ...
[08:07:39.164] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.164] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.133] | : . ' , ; packages: [n=1] ‘future’
[08:07:39.164] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.164] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.133] | : . ' , attachPackages() ... done
[08:07:39.164] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.164] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.133] | : . ' , attachPackages() ...
[08:07:39.164] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.165] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.133] | : . ' , ; packages: [n=0] 
[08:07:39.165] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.165] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.134] | : . ' , attachPackages() ... done
[08:07:39.165] | : signalConditions() ... done
[08:07:39.165] | relay conditions ... done
[08:07:39.165] value() for SequentialFuture (‘strategy = sequential’) ... done
- plan('sequential') ... DONE
- plan('multicore') ...
[08:07:39.165] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.166] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:07:39.166] | : all.equal() for FutureStrategyList ...
[08:07:39.166] | : . New stack:
[08:07:39.166] | : . List of 1
[08:07:39.166] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.166] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.166] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.166] | : .   ..- attr(*, "init")= logi TRUE
[08:07:39.166] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.166] | : .     ...)  
[08:07:39.166] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.166] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.166] | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:39.166] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.168] | : . Old stack:
[08:07:39.168] | : . List of 1
[08:07:39.168] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.168] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.168] | : .   ..- attr(*, "init")= chr "done"
[08:07:39.168] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.168] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.168] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.168] | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:39.168] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4954c3d70> 
[08:07:39.168] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.168] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.168] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.171] | : . Not identical
[08:07:39.172] | : . all.equal() for future ...
[08:07:39.172] | : . ' List of 2
[08:07:39.172] | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.172] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.172] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.172] | : . '   ..- attr(*, "init")= logi TRUE
[08:07:39.172] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.172] | : . '     ...)  
[08:07:39.172] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.172] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.172] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:39.172] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.172] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.172] | : . '   ..- attr(*, "init")= chr "done"
[08:07:39.172] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.172] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.172] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.172] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:07:39.172] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4954c3d70> 
[08:07:39.172] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.172] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.176] | : . ' Formals differ
[08:07:39.176] | : . all.equal() for future ... done
[08:07:39.177] | : . Future strategies differ at level 1
[08:07:39.177] | : all.equal() for FutureStrategyList ... done
[08:07:39.177] | : plan(): Setting new future backend stack:
[08:07:39.177] | : List of future strategies:
[08:07:39.177] | : 1. multicore:
[08:07:39.177] | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:39.177] | :    - tweaked: FALSE
[08:07:39.177] | :    - call: plan(strategy)
[08:07:39.177] | : List of 1
[08:07:39.177] | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.177] | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.177] | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.177] | :   ..- attr(*, "init")= logi TRUE
[08:07:39.177] | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.177] | :     ...)  
[08:07:39.177] | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.177] | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.177] | :   ..- attr(*, "call")= language plan(strategy)
[08:07:39.177] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.181] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:07:39.181] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.181] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:39.181] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.181] | : . Legacy shutdown of cluster workers ...
[08:07:39.181] | : . ' Stopping existing cluster ...
[08:07:39.181] | : . ' , No pre-existing cluster. Skipping
[08:07:39.182] | : . ' Stopping existing cluster ... done
[08:07:39.182] | : . Legacy shutdown of cluster workers ... done
[08:07:39.182] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:07:39.182] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:07:39.182] | : . function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.182] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.182] | : .  - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.182] | : .  - attr(*, "init")= logi TRUE
[08:07:39.182] | : .  - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.182] | : .     ...)  
[08:07:39.182] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.182] | : .  - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.182] | : .  - attr(*, "call")= language plan(strategy)
[08:07:39.184] | : . init: TRUE
[08:07:39.184] | : . makeFutureBackend(<multicore>) ...
[08:07:39.184] | : . ' Backend function: <‘NULL’>
[08:07:39.184] | : . ' Evaluator tweak arguments: [n=0]
[08:07:39.184] | : . '  list()
[08:07:39.185] | : . ' Evaluator formal arguments: [n=3]
[08:07:39.185] | : . '  list()
[08:07:39.185] | : . ' Backend factory arguments: [n=3]
[08:07:39.185] | : . ' Dotted pair list of 3
[08:07:39.185] | : . '  $ workers    : language availableCores(constraints = "multicore")
[08:07:39.185] | : . '  $ gc         : logi FALSE
[08:07:39.185] | : . '  $ earlySignal: logi FALSE
[08:07:39.188] | : . ' Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:39.188] | : . makeFutureBackend(<multicore>) ... done
[08:07:39.188] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:07:39.188] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.188] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.188] | : plan(): nbrOfWorkers() = 2
[08:07:39.189] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:07:39.189] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.189] future(..., label = NULL) ...
[08:07:39.189] | lazy: FALSE
[08:07:39.189] | stdout: TRUE
[08:07:39.189] | conditions: [n=1] ‘condition’
[08:07:39.189] | gc: FALSE
[08:07:39.189] | earlySignal: FALSE
[08:07:39.189] | getGlobalsAndPackages() ...
[08:07:39.189] | : Searching for globals ...
[08:07:39.191] | : . globals found: [0] 
[08:07:39.191] | : Searching for globals ... done
[08:07:39.191] | : globals: [0] <none>
[08:07:39.191] | : packages: [0] <none>
[08:07:39.191] | getGlobalsAndPackages() ... done
[08:07:39.191] | run() for ‘Future’ (<unnamed-5>) ...
[08:07:39.191] | : state: ‘created’
[08:07:39.191] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.192] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.192] | : Using MulticoreFutureBackend ...
[08:07:39.192] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:07:39.192] | : . Launching futures ...
[08:07:39.192] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:07:39.192] | : . ' , getFutureData() ...
[08:07:39.192] | : . ' , ; getFutureCore() ...
[08:07:39.192] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:39.193] | : . ' , ; getFutureCore() ... done
[08:07:39.193] | : . ' , ; getFutureCapture() ...
[08:07:39.193] | : . ' , ; getFutureCapture() ... done
[08:07:39.193] | : . ' , ; getFutureContext() ...
[08:07:39.193] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.193] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:39.193] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.193] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:39.193] | : . ' , ; getFutureContext() ... done
[08:07:39.194] | : . ' , getFutureData() ... done
[08:07:39.194] | : . ' , requestCore(..., workers = 2) ...
[08:07:39.194] | : . ' , requestCore(..., workers = 2) ... done
[08:07:39.197] | : . ' , MulticoreFuture started
[08:07:39.198] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:07:39.198] | : . Launching futures ... done
[08:07:39.198] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:39.198] | : Using MulticoreFutureBackend ... done
[08:07:39.199] | run() for ‘Future’ (<unnamed-5>) ... done
[08:07:39.199] future(..., label = NULL) ... done
MulticoreFuture:
Label: <unnamed-5>
Expression:
[1] 42
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘running’
[08:07:39.200] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.200] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:39.201] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.201] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.201] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:39.202] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:39.202] | : . ' , ; ` | New stack:
[08:07:39.202] | : . ' , ; ` | List of 1
[08:07:39.202] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.202] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.202] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:39.202] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.202] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.202] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.202] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.202] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.206] | : . ' , ; ` | Old stack:
[08:07:39.211] readImmediateCondition() ...
[08:07:39.212] | Path: ‘/tmp/Rtmpek4Bra/.future/immediateConditions’
[08:07:39.212] | Number of RDS files: 0
[08:07:39.212] | Returned conditions set:
[08:07:39.212] |  list()
[08:07:39.213] readImmediateCondition() ... done
Resolved: FALSE
Unique identifier: 6c5907d87436f90883f0d017798056a2-5
Owner process: 6c5907d87436f90883f0d017798056a2
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
Value: <not collected>
Conditions captured: <none>
[08:07:39.213] value() for MulticoreFuture (<unnamed-5>) ...
[08:07:39.215] | result() for MulticoreFuture ...
[08:07:39.209] | : . ' , ; ` | List of 1
[08:07:39.209] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.209] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.209] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.209] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:39.209] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.209] | : . ' , ; ` |     ...)  
[08:07:39.209] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.209] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.209] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:39.209] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.209] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.209] | : . ' , ; ` |     ...)  
[08:07:39.209] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.209] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.215] | : . ' , ; ` | Not identical
[08:07:39.215] | : . ' , ; ` | all.equal() for future ...
[08:07:39.216] | : . ' , ; ` | : List of 2
[08:07:39.216] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.216] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.216] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:39.216] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.216] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.216] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.216] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.216] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.216] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.216] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.216] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.216] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.216] | : . ' , ; ` | :     ...)  
[08:07:39.216] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.216] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.216] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:39.216] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.216] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.216] | : . ' , ; ` | :     ...)  
[08:07:39.216] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.223] | : . ' , ; ` | : Formals differ
[08:07:39.224] | : . ' , ; ` | all.equal() for future ... done
[08:07:39.224] | : . ' , ; ` | Future strategies differ at level 1
[08:07:39.224] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:39.224] | : . ' , ; ` plan(): Setting new future backend stack:
[08:07:39.224] | : . ' , ; ` List of future strategies:
[08:07:39.224] | : . ' , ; ` 1. sequential:
[08:07:39.224] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:39.224] | : . ' , ; `    - tweaked: FALSE
[08:07:39.224] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.225] | : . ' , ; ` List of 1
[08:07:39.225] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.225] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.225] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:07:39.225] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.225] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.225] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.225] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.225] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.228] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:39.229] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:39.229] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.229] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:39.229] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.229] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.229] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:07:39.229] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.229] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.229] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.229] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.231] | : . ' , ; ` | : init: TRUE
[08:07:39.231] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:07:39.232] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:07:39.232] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:07:39.232] | : . ' , ; ` | : .  list()
[08:07:39.232] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:07:39.232] | : . ' , ; ` | : .  list()
[08:07:39.232] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:07:39.233] | : . ' , ; ` | : . Dotted pair list of 2
[08:07:39.233] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:07:39.233] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:07:39.234] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:39.234] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:07:39.234] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:39.234] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.234] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:07:39.235] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:39.235] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.238] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.238] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.238] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:39.239] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:39.239] | : . ' , ; ` | : New stack:
[08:07:39.239] | : . ' , ; ` | : List of 1
[08:07:39.239] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.239] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.239] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.239] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.239] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.239] | : . ' , ; ` | :     ...)  
[08:07:39.239] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.239] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.239] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:39.239] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.239] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.239] | : . ' , ; ` | :     ...)  
[08:07:39.239] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.239] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.242] | : . ' , ; ` | : Old stack:
[08:07:39.242] | : . ' , ; ` | : List of 1
[08:07:39.242] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.242] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.242] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.242] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.242] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.242] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.242] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.242] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d497479fe8> 
[08:07:39.242] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.242] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.242] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.245] | : . ' , ; ` | : Not identical
[08:07:39.245] | : . ' , ; ` | : all.equal() for future ...
[08:07:39.246] | : . ' , ; ` | : . List of 2
[08:07:39.246] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.246] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.246] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.246] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:39.246] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.246] | : . ' , ; ` | : .     ...)  
[08:07:39.246] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.246] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.246] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:39.246] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.246] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.246] | : . ' , ; ` | : .     ...)  
[08:07:39.246] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.246] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.246] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.246] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:39.246] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.246] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.246] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.246] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.246] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d497479fe8> 
[08:07:39.246] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.246] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.251] | : . ' , ; ` | : . Formals differ
[08:07:39.251] | : . ' , ; ` | : all.equal() for future ... done
[08:07:39.251] | : . ' , ; ` | : Future strategies differ at level 1
[08:07:39.252] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:39.252] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:07:39.252] | : . ' , ; ` | List of future strategies:
[08:07:39.252] | : . ' , ; ` | 1. multicore:
[08:07:39.252] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:39.252] | : . ' , ; ` |    - tweaked: FALSE
[08:07:39.252] | : . ' , ; ` |    - call: plan(strategy)
[08:07:39.252] | : . ' , ; ` | List of 1
[08:07:39.252] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.252] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.252] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.252] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:39.252] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.252] | : . ' , ; ` |     ...)  
[08:07:39.252] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.252] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.252] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:39.252] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.252] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.252] | : . ' , ; ` |     ...)  
[08:07:39.252] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.252] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.256] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:39.257] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:39.257] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.257] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.257] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:07:39.257] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:39.257] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.257] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.258] | : readImmediateCondition() ...
[08:07:39.258] | : . Path: ‘/tmp/Rtmpek4Bra/.future/immediateConditions’
[08:07:39.258] | : . Number of RDS files: 0
[08:07:39.259] | : . Returned conditions set:
[08:07:39.259] | : .  list()
[08:07:39.259] | : readImmediateCondition() ... done
[08:07:39.260] | : result() for MulticoreFuture ...
[08:07:39.260] | : result() for MulticoreFuture ... done
[08:07:39.260] | : signalConditions() ...
[08:07:39.260] | : . include = ‘immediateCondition’
[08:07:39.260] | : . exclude = 
[08:07:39.260] | : . resignal = FALSE
[08:07:39.260] | : . Number of conditions: 6
[08:07:39.260] | : .  int 6
[08:07:39.263] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.263] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.264] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.264] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.264] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.264] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.264] | : signalConditions() ... done
[08:07:39.264] | result() for MulticoreFuture ... done
[08:07:39.265] | result() for MulticoreFuture ...
[08:07:39.265] | result() for MulticoreFuture ... done
[08:07:39.265] | signalConditions() ...
[08:07:39.265] | : include = ‘immediateCondition’
[08:07:39.265] | : exclude = 
[08:07:39.265] | : resignal = FALSE
[08:07:39.265] | : Number of conditions: 6
[08:07:39.265] | :  int 6
[08:07:39.266] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.266] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.266] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.266] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.267] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.267] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.267] | signalConditions() ... done
[08:07:39.267] | relay stdout ...
[08:07:39.267] | relay stdout ... done
[08:07:39.267] | check for misuse ...
[08:07:39.267] | check for misuse ... done
[08:07:39.268] | relay conditions ...
[08:07:39.268] | : Future state: ‘finished’
[08:07:39.268] | : result() for MulticoreFuture ...
[08:07:39.268] | : result() for MulticoreFuture ... done
[08:07:39.268] | : signalConditions() ...
[08:07:39.268] | : . include = ‘condition’
[08:07:39.268] | : . exclude = ‘immediateCondition’
[08:07:39.269] | : . resignal = TRUE
[08:07:39.269] | : . Number of conditions: 6
[08:07:39.269] | : .  int 6
[08:07:39.269] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.269] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.198] | : . ' , attachPackages() ...
[08:07:39.270] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.270] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.198] | : . ' , ; packages: [n=1] ‘future’
[08:07:39.270] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.270] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.199] | : . ' , attachPackages() ... done
[08:07:39.270] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.271] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.199] | : . ' , attachPackages() ...
[08:07:39.271] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.271] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.199] | : . ' , ; packages: [n=0] 
[08:07:39.271] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.271] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.199] | : . ' , attachPackages() ... done
[08:07:39.271] | : signalConditions() ... done
[08:07:39.271] | relay conditions ... done
[08:07:39.272] value() for MulticoreFuture (<unnamed-5>) ... done
[08:07:39.272] future(..., label = NULL) ...
[08:07:39.272] | lazy: FALSE
[08:07:39.272] | stdout: TRUE
[08:07:39.272] | conditions: [n=1] ‘condition’
[08:07:39.272] | gc: FALSE
[08:07:39.273] | earlySignal: FALSE
[08:07:39.273] | getGlobalsAndPackages() ...
[08:07:39.273] | : Searching for globals ...
[08:07:39.277] | : . globals found: [1] ‘{’
[08:07:39.277] | : Searching for globals ... done
[08:07:39.277] | : Resolving globals: FALSE
[08:07:39.277] | : Search for packages associated with the globals ...
[08:07:39.277] | : . Packages associated with globals: [1] ‘base’
[08:07:39.278] | : . Packages: [1] ‘base’
[08:07:39.278] | : Search for packages associated with the globals ... done
[08:07:39.278] | : Packages after dropping 'base': [0] 
[08:07:39.278] | : globals: [0] 
[08:07:39.278] | : packages: [0] 
[08:07:39.278] | getGlobalsAndPackages() ... done
[08:07:39.279] | run() for ‘Future’ (<unnamed-6>) ...
[08:07:39.279] | : state: ‘created’
[08:07:39.279] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.279] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.279] | : Using MulticoreFutureBackend ...
[08:07:39.279] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:07:39.279] | : . Launching futures ...
[08:07:39.280] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:07:39.280] | : . ' , getFutureData() ...
[08:07:39.280] | : . ' , ; getFutureCore() ...
[08:07:39.280] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:39.280] | : . ' , ; getFutureCore() ... done
[08:07:39.280] | : . ' , ; getFutureCapture() ...
[08:07:39.280] | : . ' , ; getFutureCapture() ... done
[08:07:39.281] | : . ' , ; getFutureContext() ...
[08:07:39.281] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.281] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:39.281] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.281] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:39.281] | : . ' , ; getFutureContext() ... done
[08:07:39.282] | : . ' , getFutureData() ... done
[08:07:39.282] | : . ' , requestCore(..., workers = 2) ...
[08:07:39.282] | : . ' , requestCore(..., workers = 2) ... done
[08:07:39.284] | : . ' , MulticoreFuture started
[08:07:39.284] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:07:39.285] | : . Launching futures ... done
[08:07:39.285] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:39.285] | : Using MulticoreFutureBackend ... done
[08:07:39.285] | run() for ‘Future’ (<unnamed-6>) ... done
[08:07:39.286] future(..., label = NULL) ... done
MulticoreFuture:
Label: <unnamed-6>
Expression:
{
    42
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘running’
[08:07:39.287] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.287] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:39.288] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.288] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.288] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:39.289] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:39.289] | : . ' , ; ` | New stack:
[08:07:39.289] | : . ' , ; ` | List of 1
[08:07:39.289] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.289] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.289] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:39.289] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.289] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.289] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.289] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.289] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.296] | : . ' , ; ` | Old stack:
[08:07:39.297] readImmediateCondition() ...
[08:07:39.297] | Path: ‘/tmp/Rtmpek4Bra/.future/immediateConditions’
[08:07:39.298] | Number of RDS files: 0
[08:07:39.298] | Returned conditions set:
[08:07:39.298] |  list()
[08:07:39.298] readImmediateCondition() ... done
Resolved: FALSE
Unique identifier: 6c5907d87436f90883f0d017798056a2-6
Owner process: 6c5907d87436f90883f0d017798056a2
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
Value: <not collected>
Conditions captured: <none>
[08:07:39.299] value() for MulticoreFuture (<unnamed-6>) ...
[08:07:39.299] | result() for MulticoreFuture ...
[08:07:39.297] | : . ' , ; ` | List of 1
[08:07:39.297] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.297] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.297] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.297] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:39.297] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.297] | : . ' , ; ` |     ...)  
[08:07:39.297] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.297] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.297] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:39.297] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.297] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.297] | : . ' , ; ` |     ...)  
[08:07:39.297] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.297] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.302] | : . ' , ; ` | Not identical
[08:07:39.303] | : . ' , ; ` | all.equal() for future ...
[08:07:39.303] | : . ' , ; ` | : List of 2
[08:07:39.303] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.303] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.303] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:39.303] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.303] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.303] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.303] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.303] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.303] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.303] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.303] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.303] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.303] | : . ' , ; ` | :     ...)  
[08:07:39.303] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.303] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.303] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:39.303] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.303] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.303] | : . ' , ; ` | :     ...)  
[08:07:39.303] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.311] | : . ' , ; ` | : Formals differ
[08:07:39.311] | : . ' , ; ` | all.equal() for future ... done
[08:07:39.311] | : . ' , ; ` | Future strategies differ at level 1
[08:07:39.311] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:39.311] | : . ' , ; ` plan(): Setting new future backend stack:
[08:07:39.312] | : . ' , ; ` List of future strategies:
[08:07:39.312] | : . ' , ; ` 1. sequential:
[08:07:39.312] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:39.312] | : . ' , ; `    - tweaked: FALSE
[08:07:39.312] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.312] | : . ' , ; ` List of 1
[08:07:39.312] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.312] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.312] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:07:39.312] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.312] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.312] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.312] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.312] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.316] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:39.316] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:39.316] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.316] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:39.316] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.316] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.316] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:07:39.316] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.316] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.316] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.316] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.319] | : . ' , ; ` | : init: TRUE
[08:07:39.319] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:07:39.319] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:07:39.321] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:07:39.321] | : . ' , ; ` | : .  list()
[08:07:39.321] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:07:39.321] | : . ' , ; ` | : .  list()
[08:07:39.322] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:07:39.322] | : . ' , ; ` | : . Dotted pair list of 2
[08:07:39.322] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:07:39.322] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:07:39.323] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:39.323] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:07:39.323] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:39.323] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.323] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:07:39.323] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:39.324] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.326] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.326] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.326] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:39.326] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:39.326] | : . ' , ; ` | : New stack:
[08:07:39.327] | : . ' , ; ` | : List of 1
[08:07:39.327] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.327] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.327] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.327] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.327] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.327] | : . ' , ; ` | :     ...)  
[08:07:39.327] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.327] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.327] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:39.327] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.327] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.327] | : . ' , ; ` | :     ...)  
[08:07:39.327] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.327] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.330] | : . ' , ; ` | : Old stack:
[08:07:39.330] | : . ' , ; ` | : List of 1
[08:07:39.330] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.330] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.330] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.330] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.330] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.330] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.330] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.330] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4956b92e8> 
[08:07:39.330] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.330] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.330] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.333] | : . ' , ; ` | : Not identical
[08:07:39.333] | : . ' , ; ` | : all.equal() for future ...
[08:07:39.333] | : . ' , ; ` | : . List of 2
[08:07:39.333] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.333] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.333] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.333] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:39.333] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.333] | : . ' , ; ` | : .     ...)  
[08:07:39.333] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.333] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.333] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:39.333] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.333] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.333] | : . ' , ; ` | : .     ...)  
[08:07:39.333] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.333] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.333] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.333] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:39.333] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.333] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.333] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.333] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.333] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4956b92e8> 
[08:07:39.333] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.333] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.340] | : . ' , ; ` | : . Formals differ
[08:07:39.340] | : . ' , ; ` | : all.equal() for future ... done
[08:07:39.340] | : . ' , ; ` | : Future strategies differ at level 1
[08:07:39.340] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:39.340] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:07:39.340] | : . ' , ; ` | List of future strategies:
[08:07:39.340] | : . ' , ; ` | 1. multicore:
[08:07:39.340] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:39.340] | : . ' , ; ` |    - tweaked: FALSE
[08:07:39.340] | : . ' , ; ` |    - call: plan(strategy)
[08:07:39.341] | : . ' , ; ` | List of 1
[08:07:39.341] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.341] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.341] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.341] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:39.341] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.341] | : . ' , ; ` |     ...)  
[08:07:39.341] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.341] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.341] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:39.341] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.341] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.341] | : . ' , ; ` |     ...)  
[08:07:39.341] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.341] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.344] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:39.344] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:39.344] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.344] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.344] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:07:39.345] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:39.345] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.345] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.345] | : readImmediateCondition() ...
[08:07:39.346] | : . Path: ‘/tmp/Rtmpek4Bra/.future/immediateConditions’
[08:07:39.346] | : . Number of RDS files: 0
[08:07:39.346] | : . Returned conditions set:
[08:07:39.346] | : .  list()
[08:07:39.348] | : readImmediateCondition() ... done
[08:07:39.348] | : result() for MulticoreFuture ...
[08:07:39.349] | : result() for MulticoreFuture ... done
[08:07:39.349] | : signalConditions() ...
[08:07:39.349] | : . include = ‘immediateCondition’
[08:07:39.349] | : . exclude = 
[08:07:39.349] | : . resignal = FALSE
[08:07:39.349] | : . Number of conditions: 6
[08:07:39.350] | : .  int 6
[08:07:39.350] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.350] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.350] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.351] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.351] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.351] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.351] | : signalConditions() ... done
[08:07:39.351] | result() for MulticoreFuture ... done
[08:07:39.351] | result() for MulticoreFuture ...
[08:07:39.352] | result() for MulticoreFuture ... done
[08:07:39.352] | signalConditions() ...
[08:07:39.352] | : include = ‘immediateCondition’
[08:07:39.352] | : exclude = 
[08:07:39.352] | : resignal = FALSE
[08:07:39.352] | : Number of conditions: 6
[08:07:39.352] | :  int 6
[08:07:39.353] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.353] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.353] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.353] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.354] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.354] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.354] | signalConditions() ... done
[08:07:39.354] | relay stdout ...
[08:07:39.354] | relay stdout ... done
[08:07:39.354] | check for misuse ...
[08:07:39.354] | check for misuse ... done
[08:07:39.355] | relay conditions ...
[08:07:39.355] | : Future state: ‘finished’
[08:07:39.355] | : result() for MulticoreFuture ...
[08:07:39.355] | : result() for MulticoreFuture ... done
[08:07:39.355] | : signalConditions() ...
[08:07:39.355] | : . include = ‘condition’
[08:07:39.355] | : . exclude = ‘immediateCondition’
[08:07:39.356] | : . resignal = TRUE
[08:07:39.356] | : . Number of conditions: 6
[08:07:39.356] | : .  int 6
[08:07:39.356] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.356] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.285] | : . ' , attachPackages() ...
[08:07:39.357] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.357] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.285] | : . ' , ; packages: [n=1] ‘future’
[08:07:39.357] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.357] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.286] | : . ' , attachPackages() ... done
[08:07:39.357] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.357] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.286] | : . ' , attachPackages() ...
[08:07:39.358] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.358] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.286] | : . ' , ; packages: [n=0] 
[08:07:39.358] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.358] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.286] | : . ' , attachPackages() ... done
[08:07:39.358] | : signalConditions() ... done
[08:07:39.358] | relay conditions ... done
[08:07:39.358] value() for MulticoreFuture (<unnamed-6>) ... done
[08:07:39.359] future(..., label = ‘strategy = multicore’) ...
[08:07:39.359] | lazy: FALSE
[08:07:39.359] | stdout: TRUE
[08:07:39.359] | conditions: [n=1] ‘condition’
[08:07:39.359] | gc: FALSE
[08:07:39.359] | earlySignal: FALSE
[08:07:39.359] | getGlobalsAndPackages() ...
[08:07:39.360] | : Searching for globals ...
[08:07:39.361] | : . globals found: [0] 
[08:07:39.361] | : Searching for globals ... done
[08:07:39.361] | : globals: [0] <none>
[08:07:39.362] | : packages: [0] <none>
[08:07:39.362] | getGlobalsAndPackages() ... done
[08:07:39.362] | run() for ‘Future’ (‘strategy = multicore’) ...
[08:07:39.362] | : state: ‘created’
[08:07:39.362] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.362] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.363] | : Using MulticoreFutureBackend ...
[08:07:39.363] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:07:39.363] | : . Launching futures ...
[08:07:39.363] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:07:39.363] | : . ' , getFutureData() ...
[08:07:39.363] | : . ' , ; getFutureCore() ...
[08:07:39.363] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:39.364] | : . ' , ; getFutureCore() ... done
[08:07:39.364] | : . ' , ; getFutureCapture() ...
[08:07:39.364] | : . ' , ; getFutureCapture() ... done
[08:07:39.364] | : . ' , ; getFutureContext() ...
[08:07:39.364] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.364] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:39.364] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.364] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:39.365] | : . ' , ; getFutureContext() ... done
[08:07:39.365] | : . ' , getFutureData() ... done
[08:07:39.365] | : . ' , requestCore(..., workers = 2) ...
[08:07:39.365] | : . ' , requestCore(..., workers = 2) ... done
[08:07:39.367] | : . ' , MulticoreFuture started
[08:07:39.367] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:07:39.368] | : . Launching futures ... done
[08:07:39.368] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:39.368] | : Using MulticoreFutureBackend ... done
[08:07:39.368] | run() for ‘Future’ (‘strategy = multicore’) ... done
[08:07:39.369] future(..., label = ‘strategy = multicore’) ... done
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘running’
[08:07:39.370] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.371] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:39.371] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.371] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.371] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:39.372] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:39.372] | : . ' , ; ` | New stack:
[08:07:39.372] | : . ' , ; ` | List of 1
[08:07:39.372] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.372] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.372] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:39.372] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.372] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.372] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.372] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.372] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.377] | : . ' , ; ` | Old stack:
[08:07:39.380] readImmediateCondition() ...
[08:07:39.380] | Path: ‘/tmp/Rtmpek4Bra/.future/immediateConditions’
[08:07:39.380] | Number of RDS files: 0
[08:07:39.380] | Returned conditions set:
[08:07:39.380] |  list()
[08:07:39.381] readImmediateCondition() ... done
Resolved: FALSE
Unique identifier: 6c5907d87436f90883f0d017798056a2-7
Owner process: 6c5907d87436f90883f0d017798056a2
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
Value: <not collected>
Conditions captured: <none>
[08:07:39.381] value() for MulticoreFuture (‘strategy = multicore’) ...
[08:07:39.381] | result() for MulticoreFuture ...
[08:07:39.379] | : . ' , ; ` | List of 1
[08:07:39.379] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.379] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.379] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.379] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:39.379] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.379] | : . ' , ; ` |     ...)  
[08:07:39.379] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.379] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.379] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:39.379] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.379] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.379] | : . ' , ; ` |     ...)  
[08:07:39.379] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.379] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.385] | : . ' , ; ` | Not identical
[08:07:39.385] | : . ' , ; ` | all.equal() for future ...
[08:07:39.386] | : . ' , ; ` | : List of 2
[08:07:39.386] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.386] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.386] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:39.386] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.386] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.386] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.386] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.386] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.386] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.386] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.386] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.386] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.386] | : . ' , ; ` | :     ...)  
[08:07:39.386] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.386] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.386] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:39.386] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.386] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.386] | : . ' , ; ` | :     ...)  
[08:07:39.386] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.393] | : . ' , ; ` | : Formals differ
[08:07:39.394] | : . ' , ; ` | all.equal() for future ... done
[08:07:39.394] | : . ' , ; ` | Future strategies differ at level 1
[08:07:39.394] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:39.394] | : . ' , ; ` plan(): Setting new future backend stack:
[08:07:39.394] | : . ' , ; ` List of future strategies:
[08:07:39.394] | : . ' , ; ` 1. sequential:
[08:07:39.394] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:39.394] | : . ' , ; `    - tweaked: FALSE
[08:07:39.394] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.395] | : . ' , ; ` List of 1
[08:07:39.395] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.395] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.395] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:07:39.395] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.395] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.395] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.395] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.395] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.398] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:39.399] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:39.399] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.399] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:39.399] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.399] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.399] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:07:39.399] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.399] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.399] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.399] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.401] | : . ' , ; ` | : init: TRUE
[08:07:39.401] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:07:39.402] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:07:39.402] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:07:39.402] | : . ' , ; ` | : .  list()
[08:07:39.402] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:07:39.402] | : . ' , ; ` | : .  list()
[08:07:39.403] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:07:39.403] | : . ' , ; ` | : . Dotted pair list of 2
[08:07:39.403] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:07:39.403] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:07:39.405] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:39.406] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:07:39.406] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:39.406] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.406] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:07:39.406] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:39.406] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.408] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.409] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.409] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:39.409] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:39.409] | : . ' , ; ` | : New stack:
[08:07:39.409] | : . ' , ; ` | : List of 1
[08:07:39.409] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.409] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.409] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.409] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.409] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.409] | : . ' , ; ` | :     ...)  
[08:07:39.409] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.409] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.409] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:39.409] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.409] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.409] | : . ' , ; ` | :     ...)  
[08:07:39.409] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.409] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.412] | : . ' , ; ` | : Old stack:
[08:07:39.412] | : . ' , ; ` | : List of 1
[08:07:39.412] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.412] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.412] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.412] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.412] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.412] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.412] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.412] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d496453bb0> 
[08:07:39.412] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.412] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.412] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.416] | : . ' , ; ` | : Not identical
[08:07:39.416] | : . ' , ; ` | : all.equal() for future ...
[08:07:39.416] | : . ' , ; ` | : . List of 2
[08:07:39.416] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.416] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.416] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.416] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:39.416] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.416] | : . ' , ; ` | : .     ...)  
[08:07:39.416] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.416] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.416] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:39.416] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.416] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.416] | : . ' , ; ` | : .     ...)  
[08:07:39.416] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.416] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.416] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.416] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:39.416] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.416] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.416] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.416] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.416] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d496453bb0> 
[08:07:39.416] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.416] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.422] | : . ' , ; ` | : . Formals differ
[08:07:39.422] | : . ' , ; ` | : all.equal() for future ... done
[08:07:39.422] | : . ' , ; ` | : Future strategies differ at level 1
[08:07:39.422] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:39.422] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:07:39.422] | : . ' , ; ` | List of future strategies:
[08:07:39.422] | : . ' , ; ` | 1. multicore:
[08:07:39.422] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:39.422] | : . ' , ; ` |    - tweaked: FALSE
[08:07:39.422] | : . ' , ; ` |    - call: plan(strategy)
[08:07:39.423] | : . ' , ; ` | List of 1
[08:07:39.423] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.423] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.423] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.423] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:39.423] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.423] | : . ' , ; ` |     ...)  
[08:07:39.423] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.423] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.423] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:39.423] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.423] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.423] | : . ' , ; ` |     ...)  
[08:07:39.423] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.423] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.427] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:39.427] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:39.427] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.427] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.427] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:07:39.427] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:39.427] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.427] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.428] | : readImmediateCondition() ...
[08:07:39.428] | : . Path: ‘/tmp/Rtmpek4Bra/.future/immediateConditions’
[08:07:39.428] | : . Number of RDS files: 0
[08:07:39.429] | : . Returned conditions set:
[08:07:39.429] | : .  list()
[08:07:39.429] | : readImmediateCondition() ... done
[08:07:39.430] | : result() for MulticoreFuture ...
[08:07:39.430] | : result() for MulticoreFuture ... done
[08:07:39.430] | : signalConditions() ...
[08:07:39.430] | : . include = ‘immediateCondition’
[08:07:39.430] | : . exclude = 
[08:07:39.430] | : . resignal = FALSE
[08:07:39.430] | : . Number of conditions: 6
[08:07:39.431] | : .  int 6
[08:07:39.431] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.431] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.431] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.432] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.432] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.432] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.434] | : signalConditions() ... done
[08:07:39.434] | result() for MulticoreFuture ... done
[08:07:39.434] | result() for MulticoreFuture ...
[08:07:39.434] | result() for MulticoreFuture ... done
[08:07:39.434] | signalConditions() ...
[08:07:39.434] | : include = ‘immediateCondition’
[08:07:39.435] | : exclude = 
[08:07:39.435] | : resignal = FALSE
[08:07:39.435] | : Number of conditions: 6
[08:07:39.435] | :  int 6
[08:07:39.436] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.436] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.436] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.436] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.436] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.436] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.436] | signalConditions() ... done
[08:07:39.437] | relay stdout ...
[08:07:39.437] | relay stdout ... done
[08:07:39.437] | check for misuse ...
[08:07:39.437] | check for misuse ... done
[08:07:39.437] | relay conditions ...
[08:07:39.437] | : Future state: ‘finished’
[08:07:39.438] | : result() for MulticoreFuture ...
[08:07:39.438] | : result() for MulticoreFuture ... done
[08:07:39.438] | : signalConditions() ...
[08:07:39.438] | : . include = ‘condition’
[08:07:39.438] | : . exclude = ‘immediateCondition’
[08:07:39.438] | : . resignal = TRUE
[08:07:39.438] | : . Number of conditions: 6
[08:07:39.438] | : .  int 6
[08:07:39.439] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.439] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.368] | : . ' , attachPackages() ...
[08:07:39.439] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.439] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.368] | : . ' , ; packages: [n=1] ‘future’
[08:07:39.440] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.440] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.369] | : . ' , attachPackages() ... done
[08:07:39.440] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.440] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.369] | : . ' , attachPackages() ...
[08:07:39.440] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.440] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.369] | : . ' , ; packages: [n=0] 
[08:07:39.441] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.441] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.369] | : . ' , attachPackages() ... done
[08:07:39.441] | : signalConditions() ... done
[08:07:39.441] | relay conditions ... done
[08:07:39.441] value() for MulticoreFuture (‘strategy = multicore’) ... done
[08:07:39.442] future(..., label = ‘strategy = multicore’) ...
[08:07:39.442] | lazy: FALSE
[08:07:39.442] | stdout: TRUE
[08:07:39.442] | conditions: [n=1] ‘condition’
[08:07:39.442] | gc: FALSE
[08:07:39.442] | earlySignal: FALSE
[08:07:39.442] | getGlobalsAndPackages() ...
[08:07:39.443] | : Searching for globals ...
[08:07:39.446] | : . globals found: [1] ‘{’
[08:07:39.447] | : Searching for globals ... done
[08:07:39.447] | : Resolving globals: FALSE
[08:07:39.447] | : Search for packages associated with the globals ...
[08:07:39.447] | : . Packages associated with globals: [1] ‘base’
[08:07:39.447] | : . Packages: [1] ‘base’
[08:07:39.448] | : Search for packages associated with the globals ... done
[08:07:39.448] | : Packages after dropping 'base': [0] 
[08:07:39.448] | : globals: [0] 
[08:07:39.448] | : packages: [0] 
[08:07:39.448] | getGlobalsAndPackages() ... done
[08:07:39.449] | run() for ‘Future’ (‘strategy = multicore’) ...
[08:07:39.449] | : state: ‘created’
[08:07:39.449] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.449] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.449] | : Using MulticoreFutureBackend ...
[08:07:39.449] | : . Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:07:39.449] | : . Launching futures ...
[08:07:39.450] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:07:39.450] | : . ' , getFutureData() ...
[08:07:39.450] | : . ' , ; getFutureCore() ...
[08:07:39.450] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:39.450] | : . ' , ; getFutureCore() ... done
[08:07:39.450] | : . ' , ; getFutureCapture() ...
[08:07:39.450] | : . ' , ; getFutureCapture() ... done
[08:07:39.450] | : . ' , ; getFutureContext() ...
[08:07:39.451] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.451] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:39.451] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.451] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:39.451] | : . ' , ; getFutureContext() ... done
[08:07:39.451] | : . ' , getFutureData() ... done
[08:07:39.451] | : . ' , requestCore(..., workers = 2) ...
[08:07:39.452] | : . ' , requestCore(..., workers = 2) ... done
[08:07:39.453] | : . ' , MulticoreFuture started
[08:07:39.454] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:07:39.454] | : . Launching futures ... done
[08:07:39.454] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:39.454] | : Using MulticoreFutureBackend ... done
[08:07:39.455] | run() for ‘Future’ (‘strategy = multicore’) ... done
[08:07:39.455] future(..., label = ‘strategy = multicore’) ... done
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
{
    42
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘running’
[08:07:39.456] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.457] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:39.457] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.457] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.458] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:39.458] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:39.458] | : . ' , ; ` | New stack:
[08:07:39.458] | : . ' , ; ` | List of 1
[08:07:39.458] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.458] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.458] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:39.458] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.458] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.458] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.458] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.458] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.465] | : . ' , ; ` | Old stack:
[08:07:39.466] readImmediateCondition() ...
[08:07:39.466] | Path: ‘/tmp/Rtmpek4Bra/.future/immediateConditions’
[08:07:39.467] | Number of RDS files: 0
[08:07:39.467] | Returned conditions set:
[08:07:39.467] |  list()
[08:07:39.467] readImmediateCondition() ... done
Resolved: FALSE
Unique identifier: 6c5907d87436f90883f0d017798056a2-8
Owner process: 6c5907d87436f90883f0d017798056a2
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
Value: <not collected>
Conditions captured: <none>
[08:07:39.468] value() for MulticoreFuture (‘strategy = multicore’) ...
[08:07:39.468] | result() for MulticoreFuture ...
[08:07:39.465] | : . ' , ; ` | List of 1
[08:07:39.465] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.465] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.465] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.465] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:39.465] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.465] | : . ' , ; ` |     ...)  
[08:07:39.465] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.465] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.465] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:39.465] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.465] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.465] | : . ' , ; ` |     ...)  
[08:07:39.465] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.465] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.471] | : . ' , ; ` | Not identical
[08:07:39.471] | : . ' , ; ` | all.equal() for future ...
[08:07:39.471] | : . ' , ; ` | : List of 2
[08:07:39.471] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.471] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.471] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:39.471] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.471] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.471] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.471] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.471] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.471] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.471] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.471] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.471] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.471] | : . ' , ; ` | :     ...)  
[08:07:39.471] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.471] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.471] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:39.471] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.471] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.471] | : . ' , ; ` | :     ...)  
[08:07:39.471] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.479] | : . ' , ; ` | : Formals differ
[08:07:39.479] | : . ' , ; ` | all.equal() for future ... done
[08:07:39.479] | : . ' , ; ` | Future strategies differ at level 1
[08:07:39.480] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:39.480] | : . ' , ; ` plan(): Setting new future backend stack:
[08:07:39.480] | : . ' , ; ` List of future strategies:
[08:07:39.480] | : . ' , ; ` 1. sequential:
[08:07:39.480] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:39.480] | : . ' , ; `    - tweaked: FALSE
[08:07:39.480] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.481] | : . ' , ; ` List of 1
[08:07:39.481] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.481] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.481] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:07:39.481] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.481] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.481] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.481] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.481] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.484] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:39.484] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:39.484] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.485] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:39.485] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.485] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.485] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:07:39.485] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.485] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.485] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.485] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.487] | : . ' , ; ` | : init: TRUE
[08:07:39.487] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:07:39.487] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:07:39.487] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:07:39.488] | : . ' , ; ` | : .  list()
[08:07:39.489] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:07:39.489] | : . ' , ; ` | : .  list()
[08:07:39.490] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:07:39.490] | : . ' , ; ` | : . Dotted pair list of 2
[08:07:39.490] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:07:39.490] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:07:39.491] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:39.491] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:07:39.491] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:39.491] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.491] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:07:39.492] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:39.492] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.494] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.494] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:39.494] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:39.494] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:39.494] | : . ' , ; ` | : New stack:
[08:07:39.494] | : . ' , ; ` | : List of 1
[08:07:39.494] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.494] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.494] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.494] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.494] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.494] | : . ' , ; ` | :     ...)  
[08:07:39.494] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.494] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.494] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:39.494] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.494] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.494] | : . ' , ; ` | :     ...)  
[08:07:39.494] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.494] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.498] | : . ' , ; ` | : Old stack:
[08:07:39.498] | : . ' , ; ` | : List of 1
[08:07:39.498] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.498] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.498] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:39.498] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.498] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.498] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.498] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.498] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d495863fd8> 
[08:07:39.498] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.498] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.498] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.501] | : . ' , ; ` | : Not identical
[08:07:39.501] | : . ' , ; ` | : all.equal() for future ...
[08:07:39.501] | : . ' , ; ` | : . List of 2
[08:07:39.501] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.501] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.501] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.501] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:39.501] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.501] | : . ' , ; ` | : .     ...)  
[08:07:39.501] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.501] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.501] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:39.501] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.501] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.501] | : . ' , ; ` | : .     ...)  
[08:07:39.501] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.501] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.501] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:39.501] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:39.501] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.501] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.501] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.501] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:39.501] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d495863fd8> 
[08:07:39.501] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:39.501] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:39.508] | : . ' , ; ` | : . Formals differ
[08:07:39.508] | : . ' , ; ` | : all.equal() for future ... done
[08:07:39.508] | : . ' , ; ` | : Future strategies differ at level 1
[08:07:39.508] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:39.508] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:07:39.508] | : . ' , ; ` | List of future strategies:
[08:07:39.508] | : . ' , ; ` | 1. multicore:
[08:07:39.508] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:39.508] | : . ' , ; ` |    - tweaked: FALSE
[08:07:39.508] | : . ' , ; ` |    - call: plan(strategy)
[08:07:39.509] | : . ' , ; ` | List of 1
[08:07:39.509] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.509] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.509] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.509] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:39.509] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.509] | : . ' , ; ` |     ...)  
[08:07:39.509] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.509] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.509] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:07:39.509] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.509] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.509] | : . ' , ; ` |     ...)  
[08:07:39.509] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.509] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.512] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:39.512] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:39.512] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.512] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.512] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:07:39.512] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:39.512] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.513] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:39.513] | : readImmediateCondition() ...
[08:07:39.513] | : . Path: ‘/tmp/Rtmpek4Bra/.future/immediateConditions’
[08:07:39.513] | : . Number of RDS files: 0
[08:07:39.514] | : . Returned conditions set:
[08:07:39.514] | : .  list()
[08:07:39.514] | : readImmediateCondition() ... done
[08:07:39.515] | : result() for MulticoreFuture ...
[08:07:39.515] | : result() for MulticoreFuture ... done
[08:07:39.515] | : signalConditions() ...
[08:07:39.516] | : . include = ‘immediateCondition’
[08:07:39.517] | : . exclude = 
[08:07:39.517] | : . resignal = FALSE
[08:07:39.517] | : . Number of conditions: 6
[08:07:39.517] | : .  int 6
[08:07:39.518] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.518] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.518] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.518] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.518] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.518] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.519] | : signalConditions() ... done
[08:07:39.519] | result() for MulticoreFuture ... done
[08:07:39.519] | result() for MulticoreFuture ...
[08:07:39.519] | result() for MulticoreFuture ... done
[08:07:39.519] | signalConditions() ...
[08:07:39.519] | : include = ‘immediateCondition’
[08:07:39.520] | : exclude = 
[08:07:39.520] | : resignal = FALSE
[08:07:39.520] | : Number of conditions: 6
[08:07:39.520] | :  int 6
[08:07:39.520] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.521] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.521] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.521] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.521] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.521] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.521] | signalConditions() ... done
[08:07:39.522] | relay stdout ...
[08:07:39.522] | relay stdout ... done
[08:07:39.522] | check for misuse ...
[08:07:39.522] | check for misuse ... done
[08:07:39.522] | relay conditions ...
[08:07:39.522] | : Future state: ‘finished’
[08:07:39.522] | : result() for MulticoreFuture ...
[08:07:39.523] | : result() for MulticoreFuture ... done
[08:07:39.523] | : signalConditions() ...
[08:07:39.523] | : . include = ‘condition’
[08:07:39.523] | : . exclude = ‘immediateCondition’
[08:07:39.523] | : . resignal = TRUE
[08:07:39.523] | : . Number of conditions: 6
[08:07:39.523] | : .  int 6
[08:07:39.524] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.524] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.454] | : . ' , attachPackages() ...
[08:07:39.524] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.524] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.455] | : . ' , ; packages: [n=1] ‘future’
[08:07:39.524] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.525] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.455] | : . ' , attachPackages() ... done
[08:07:39.525] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.525] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.455] | : . ' , attachPackages() ...
[08:07:39.525] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.525] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.455] | : . ' , ; packages: [n=0] 
[08:07:39.525] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:39.526] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:39.456] | : . ' , attachPackages() ... done
[08:07:39.526] | : signalConditions() ... done
[08:07:39.526] | relay conditions ... done
[08:07:39.526] value() for MulticoreFuture (‘strategy = multicore’) ... done
- plan('multicore') ... DONE
- plan('multisession') ...
[08:07:39.526] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.527] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:07:39.527] | : all.equal() for FutureStrategyList ...
[08:07:39.527] | : . New stack:
[08:07:39.527] | : . List of 1
[08:07:39.527] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:07:39.527] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.527] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:07:39.527] | : .   ..- attr(*, "init")= logi TRUE
[08:07:39.527] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:39.527] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:39.527] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:39.527] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:39.527] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:07:39.527] | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:39.527] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.531] | : . Old stack:
[08:07:39.531] | : . List of 1
[08:07:39.531] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.531] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.531] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.531] | : .   ..- attr(*, "init")= chr "done"
[08:07:39.531] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.531] | : .     ...)  
[08:07:39.531] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.531] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.531] | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:39.531] | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.531] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.531] | : .     ...)  
[08:07:39.531] | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.531] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.535] | : . Not identical
[08:07:39.535] | : . all.equal() for future ...
[08:07:39.535] | : . ' List of 2
[08:07:39.535] | : . '  $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:07:39.535] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.535] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:07:39.535] | : . '   ..- attr(*, "init")= logi TRUE
[08:07:39.535] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:39.535] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:39.535] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:39.535] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:39.535] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:07:39.535] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:39.535] | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:39.535] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:07:39.535] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:39.535] | : . '   ..- attr(*, "init")= chr "done"
[08:07:39.535] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.535] | : . '     ...)  
[08:07:39.535] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.535] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.535] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:39.535] | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d4967b5600> 
[08:07:39.535] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:39.535] | : . '     ...)  
[08:07:39.535] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:39.542] | : . ' Formals differ
[08:07:39.542] | : . all.equal() for future ... done
[08:07:39.542] | : . Future strategies differ at level 1
[08:07:39.542] | : all.equal() for FutureStrategyList ... done
[08:07:39.543] | : plan(): Setting new future backend stack:
[08:07:39.543] | : List of future strategies:
[08:07:39.543] | : 1. multisession:
[08:07:39.543] | :    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:39.543] | :    - tweaked: FALSE
[08:07:39.543] | :    - call: plan(strategy)
[08:07:39.543] | : List of 1
[08:07:39.543] | :  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:07:39.543] | :     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.543] | :   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:07:39.543] | :   ..- attr(*, "init")= logi TRUE
[08:07:39.543] | :   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:39.543] | :     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:39.543] | :   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:39.543] | :   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:39.543] | :   ..- attr(*, "untweakable")= chr "persistent"
[08:07:39.543] | :   ..- attr(*, "call")= language plan(strategy)
[08:07:39.543] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:39.546] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:07:39.546] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:39.546] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:39.546] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:39.547] | : . Legacy shutdown of cluster workers ...
[08:07:39.547] | : . ' Stopping existing cluster ...
[08:07:39.547] | : . ' , No pre-existing cluster. Skipping
[08:07:39.547] | : . ' Stopping existing cluster ... done
[08:07:39.547] | : . Legacy shutdown of cluster workers ... done
[08:07:39.548] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:07:39.548] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:07:39.548] | : . function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:07:39.548] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:39.548] | : .  - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:07:39.548] | : .  - attr(*, "init")= logi TRUE
[08:07:39.548] | : .  - attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:39.548] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:39.548] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:39.548] | : .  - attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:39.548] | : .  - attr(*, "untweakable")= chr "persistent"
[08:07:39.548] | : .  - attr(*, "call")= language plan(strategy)
[08:07:39.550] | : . init: TRUE
[08:07:39.550] | : . makeFutureBackend(<multisession>) ...
[08:07:39.550] | : . ' Backend function: <‘NULL’>
[08:07:39.550] | : . ' Evaluator tweak arguments: [n=0]
[08:07:39.550] | : . '  list()
[08:07:39.551] | : . ' Evaluator formal arguments: [n=4]
[08:07:39.551] | : . '  list()
[08:07:39.551] | : . ' Backend factory arguments: [n=4]
[08:07:39.551] | : . ' Dotted pair list of 4
[08:07:39.551] | : . '  $ workers     : language availableCores()
[08:07:39.551] | : . '  $ rscript_libs: language .libPaths()
[08:07:39.551] | : . '  $ gc          : logi FALSE
[08:07:39.551] | : . '  $ earlySignal : logi FALSE
[08:07:39.553] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ...
[08:07:39.553] | : . ' , Arguments:
[08:07:39.553] | : . ' , List of 5
[08:07:39.553] | : . ' ,  $ workers     : Named int 2
[08:07:39.553] | : . ' ,   ..- attr(*, "names")= chr "mc.cores"
[08:07:39.553] | : . ' ,  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:07:39.553] | : . ' ,  $ interrupts  : logi TRUE
[08:07:39.553] | : . ' ,  $ gc          : logi FALSE
[08:07:39.553] | : . ' ,  $ earlySignal : logi FALSE
[08:07:39.559] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[08:07:39.559] | : . ' , ; workers: 2
[08:07:39.559] | : . ' , ; getCluster() ...
[08:07:39.559] | : . ' , ; getCluster() ... done
[08:07:39.560] | : . ' , ; Stopping existing cluster ...
[08:07:39.560] | : . ' , ; ` No pre-existing cluster. Skipping
[08:07:39.560] | : . ' , ; Stopping existing cluster ... done
[08:07:39.560] | : . ' , ; Starting new cluster ...
[08:07:39.560] | : . ' , ; ` makeCluster(workers, ...) ...
[08:07:39.560] | : . ' , ; ` | Arguments:
[08:07:39.560] | : . ' , ; ` | List of 2
[08:07:39.560] | : . ' , ; ` |  $             : int 2
[08:07:39.560] | : . ' , ; ` |  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:07:39.561] | : . ' , ; ` | .makeCluster() ...
[08:07:39.561] | : . ' , ; ` | : workers: ‘2’
[08:07:39.561] | : . ' , ; ` | : R_FUTURE_PLAN: NA
[08:07:39.562] | : . ' , ; ` | : parallelly::makeClusterPSOCK() arguments:
[08:07:39.562] | : . ' , ; ` | : List of 2
[08:07:39.562] | : . ' , ; ` | :  $             : int 2
[08:07:39.562] | : . ' , ; ` | :  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:07:40.062] | : . ' , ; ` | : Generated cluster UUID
[08:07:40.063] | : . ' , ; ` | : Cluster UUID: ‘0aea9e0b5cb824241387f30687b99e75’
[08:07:40.063] | : . ' , ; ` | : Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:40.065] | : . ' , ; ` | .makeCluster() ... done
[08:07:40.065] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:40.067] | : . ' , ; ` makeCluster(workers, ...) ... done
[08:07:40.067] | : . ' , ; ` Number of workers: 2
[08:07:40.067] | : . ' , ; ` Workers UUID: ‘0aea9e0b5cb824241387f30687b99e75’
[08:07:40.067] | : . ' , ; Starting new cluster ... done
[08:07:40.067] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[08:07:40.067] | : . ' , Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:40.068] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ... done
[08:07:40.068] | : . makeFutureBackend(<multisession>) ... done
[08:07:40.068] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:40.068] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:40.068] | : . plan(): nbrOfWorkers() = 2
[08:07:40.068] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:07:40.068] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:07:40.068] | future(..., label = NULL) ...
[08:07:40.069] | : lazy: FALSE
[08:07:40.069] | : stdout: TRUE
[08:07:40.069] | : conditions: [n=1] ‘condition’
[08:07:40.069] | : gc: FALSE
[08:07:40.069] | : earlySignal: FALSE
[08:07:40.069] | : getGlobalsAndPackages() ...
[08:07:40.069] | : . Searching for globals ...
[08:07:40.070] | : . ' globals found: [0] 
[08:07:40.070] | : . Searching for globals ... done
[08:07:40.071] | : . globals: [0] <none>
[08:07:40.071] | : . packages: [0] <none>
[08:07:40.071] | : getGlobalsAndPackages() ... done
[08:07:40.071] | : run() for ‘Future’ (<unnamed-9>) ...
[08:07:40.071] | : . state: ‘created’
[08:07:40.071] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:40.071] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:40.071] | : . Using MultisessionFutureBackend ...
[08:07:40.072] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:07:40.072] | : . ' Launching futures ...
[08:07:40.072] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:07:40.072] | : . ' , ; Workers: [n=2]
[08:07:40.072] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:40.074] | : . ' , ; FutureRegistry: ‘workers-0aea9e0b5cb824241387f30687b99e75’
[08:07:40.074] | : . ' , ; requestWorker() ...
[08:07:40.074] | : . ' , ; ` requestNode() ...
[08:07:40.074] | : . ' , ; ` | Number of workers: 2
[08:07:40.074] | : . ' , ; ` | Polling for a free worker ...
[08:07:40.074] | : . ' , ; ` | : FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ...
[08:07:40.074] | : . ' , ; ` | : . Created empty registry ‘workers-0aea9e0b5cb824241387f30687b99e75’
[08:07:40.074] | : . ' , ; ` | : . Listing all futures
[08:07:40.075] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:40.075] | : . ' , ; ` | : FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ... done
[08:07:40.075] | : . ' , ; ` | : Total time: 0
[08:07:40.075] | : . ' , ; ` | Polling for a free worker ... done
[08:07:40.075] | : . ' , ; ` | FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ...
[08:07:40.075] | : . ' , ; ` | : Listing all futures
[08:07:40.075] | : . ' , ; ` | : Number of registered futures: 0
[08:07:40.075] | : . ' , ; ` | FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ... done
[08:07:40.075] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:07:40.075] | : . ' , ; ` | Index of first available worker: 1
[08:07:40.076] | : . ' , ; ` | Validate that the worker is functional ...
[08:07:40.139] | : . ' , ; ` | : Worker is functional
[08:07:40.139] | : . ' , ; ` | : FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ...
[08:07:40.139] | : . ' , ; ` | : . Listing all futures
[08:07:40.140] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:40.140] | : . ' , ; ` | : FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ... done
[08:07:40.140] | : . ' , ; ` | Validate that the worker is functional ... done
[08:07:40.140] | : . ' , ; ` requestNode() ... done
[08:07:40.140] | : . ' , ; ` cluster node index: 1
[08:07:40.140] | : . ' , ; requestWorker() ... done
[08:07:40.140] | : . ' , ; eraseGlobalEnvironment() ...
[08:07:40.141] | : . ' , ; eraseGlobalEnvironment() ... done
[08:07:40.141] | : . ' , ; launchFuture() ...
[08:07:40.141] | : . ' , ; ` cluster node index: 1
[08:07:40.141] | : . ' , ; ` getFutureData() ...
[08:07:40.142] | : . ' , ; ` | getFutureCore() ...
[08:07:40.142] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:07:40.142] | : . ' , ; ` | getFutureCore() ... done
[08:07:40.142] | : . ' , ; ` | getFutureCapture() ...
[08:07:40.142] | : . ' , ; ` | getFutureCapture() ... done
[08:07:40.142] | : . ' , ; ` | getFutureContext() ...
[08:07:40.142] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:40.143] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:07:40.143] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:40.143] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:07:40.143] | : . ' , ; ` | getFutureContext() ... done
[08:07:40.143] | : . ' , ; ` getFutureData() ... done
[08:07:40.144] | : . ' , ; ` FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'add', earlySignal = 0) ...
[08:07:40.144] | : . ' , ; ` | Appended future to position #1
[08:07:40.144] | : . ' , ; ` | Number of registered futures: 1
[08:07:40.144] | : . ' , ; ` FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'add', earlySignal = 0) ... done
[08:07:40.144] | : . ' , ; launchFuture() ... done
[08:07:40.144] | : . ' , ; MultisessionFuture started
[08:07:40.144] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:07:40.145] | : . ' Launching futures ... done
[08:07:40.145] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:40.145] | : . Using MultisessionFutureBackend ... done
[08:07:40.145] | : run() for ‘Future’ (<unnamed-9>) ... done
[08:07:40.145] | future(..., label = NULL) ... done
MultisessionFuture:
Label: <unnamed-9>
Expression:
[1] 42
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘running’
[08:07:40.146] | resolved() for MultisessionFuture (<unnamed-9>) ...
[08:07:40.146] | : Cluster node socket connection: index=4, id=373
[08:07:40.147] | : assertValidConnection() ...
[08:07:40.147] | : . cluster node index: 1
[08:07:40.147] | : assertValidConnection() ... done
[08:07:40.158] | : socketSelect(list(<connection #4 (id=373)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:40.158] | resolved() for MultisessionFuture (<unnamed-9>) ... done
Resolved: FALSE
Unique identifier: 6c5907d87436f90883f0d017798056a2-9
Owner process: 6c5907d87436f90883f0d017798056a2
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
Value: <not collected>
Conditions captured: <none>
[08:07:40.158] | value() for MultisessionFuture (<unnamed-9>) ...
[08:07:40.159] | : result() for ClusterFuture ...
[08:07:40.159] | : . assertValidConnection() ...
[08:07:40.159] | : . ' cluster node index: 1
[08:07:40.159] | : . assertValidConnection() ... done
[08:07:40.160] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:07:40.160] | : . ' cluster node index: 1
[08:07:40.233] | : . ' [1] TRUE
[08:07:40.233] | : . ' received data:
[08:07:40.234] | : . ' List of 5
[08:07:40.234] | : . '  $ type   : chr "VALUE"
[08:07:40.234] | : . '  $ value  :List of 16
[08:07:40.234] | : . '   ..$ value              : num 42
[08:07:40.234] | : . '   ..$ visible            : logi TRUE
[08:07:40.234] | : . '   ..$ stdout             : chr ""
[08:07:40.234] | : . '   ..$ conditions         : list()
[08:07:40.234] | : . '   ..$ rng                : logi FALSE
[08:07:40.234] | : . '   ..$ seed               : NULL
[08:07:40.234] | : . '   ..$ misuseGlobalEnv    : NULL
[08:07:40.234] | : . '   ..$ misuseConnections  :List of 3
[08:07:40.234] | : . '   .. ..$ added   : NULL
[08:07:40.234] | : . '   .. ..$ removed : NULL
[08:07:40.234] | : . '   .. ..$ replaced: NULL
[08:07:40.234] | : . '   ..$ misuseDevices      : NULL
[08:07:40.234] | : . '   ..$ misuseDefaultDevice: list()
[08:07:40.234] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:40"
[08:07:40.234] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:40"
[08:07:40.234] | : . '   ..$ uuid               : chr [1:2] "6c5907d87436f90883f0d017798056a2" "9"
[08:07:40.234] | : . '   ..$ session_uuid       : chr "c33fbf3f8d7bc2f1e5dc7d47a134da92"
[08:07:40.234] | : . '   .. ..- attr(*, "source")=List of 5
[08:07:40.234] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:07:40.234] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:40.234] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:40.234] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:40.234] | : . '   .. .. ..$ pid   : int 67897
[08:07:40.234] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:07:40"
[08:07:40.234] | : . '   .. .. ..$ random: int 2147483647
[08:07:40.234] | : . '   ..$ r_info             :List of 4
[08:07:40.234] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:40.234] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:07:40.234] | : . '   .. ..$ os           : chr "unix"
[08:07:40.234] | : . '   .. ..$ os_name      : chr "Linux"
[08:07:40.234] | : . '   .. ..$ captures_utf8: logi TRUE
[08:07:40.234] | : . '   ..$ version            : chr "1.8"
[08:07:40.234] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:07:40.234] | : . '  $ success: logi TRUE
[08:07:40.234] | : . '  $ time   : 'proc_time' Named num [1:5] 0.044 0.004 0.049 0 0
[08:07:40.234] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:40.234] | : . '  $ tag    : NULL
[08:07:40.248] | : . ' Received FutureResult
[08:07:40.248] | : . ' FutureResult:
[08:07:40.248] | : . ' value: ‘numeric’
[08:07:40.248] | : . ' visible: TRUE
[08:07:40.248] | : . ' stdout: character
[08:07:40.248] | : . ' conditions: [n = 0] 
[08:07:40.248] | : . ' RNG used: FALSE
[08:07:40.248] | : . ' duration: 0.04681039 secs (started 2025-06-17 08:07:40.185935)
[08:07:40.248] | : . ' version: 1.8
[08:07:40.249] | : . ' FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'remove', earlySignal = 0) ...
[08:07:40.249] | : . ' , Removed future from position #1
[08:07:40.249] | : . ' , Number of registered futures: 0
[08:07:40.249] | : . ' FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'remove', earlySignal = 0) ... done
[08:07:40.249] | : . ' Erased future from future backend
[08:07:40.249] | : . ' result() for ClusterFuture ...
[08:07:40.249] | : . ' , result already collected: FutureResult
[08:07:40.250] | : . ' result() for ClusterFuture ... done
[08:07:40.250] | : . ' signalConditions() ...
[08:07:40.250] | : . ' , include = ‘immediateCondition’
[08:07:40.250] | : . ' , exclude = 
[08:07:40.250] | : . ' , resignal = FALSE
[08:07:40.250] | : . ' , Number of conditions: 0
[08:07:40.250] | : . ' ,  int 0
[08:07:40.251] | : . ' signalConditions() ... done
[08:07:40.251] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:07:40.251] | : result() for ClusterFuture ... done
[08:07:40.251] | : result() for ClusterFuture ...
[08:07:40.251] | : . result already collected: FutureResult
[08:07:40.252] | : result() for ClusterFuture ... done
[08:07:40.252] | : signalConditions() ...
[08:07:40.252] | : . include = ‘immediateCondition’
[08:07:40.252] | : . exclude = 
[08:07:40.252] | : . resignal = FALSE
[08:07:40.252] | : . Number of conditions: 0
[08:07:40.252] | : .  int 0
[08:07:40.253] | : signalConditions() ... done
[08:07:40.253] | : relay stdout ...
[08:07:40.253] | : relay stdout ... done
[08:07:40.253] | : check for misuse ...
[08:07:40.253] | : check for misuse ... done
[08:07:40.253] | value() for MultisessionFuture (<unnamed-9>) ... done
[08:07:40.254] | future(..., label = NULL) ...
[08:07:40.254] | : lazy: FALSE
[08:07:40.254] | : stdout: TRUE
[08:07:40.254] | : conditions: [n=1] ‘condition’
[08:07:40.254] | : gc: FALSE
[08:07:40.254] | : earlySignal: FALSE
[08:07:40.255] | : getGlobalsAndPackages() ...
[08:07:40.255] | : . Searching for globals ...
[08:07:40.259] | : . ' globals found: [1] ‘{’
[08:07:40.259] | : . Searching for globals ... done
[08:07:40.259] | : . Resolving globals: FALSE
[08:07:40.259] | : . Search for packages associated with the globals ...
[08:07:40.259] | : . ' Packages associated with globals: [1] ‘base’
[08:07:40.260] | : . ' Packages: [1] ‘base’
[08:07:40.260] | : . Search for packages associated with the globals ... done
[08:07:40.260] | : . Packages after dropping 'base': [0] 
[08:07:40.260] | : . globals: [0] 
[08:07:40.260] | : . packages: [0] 
[08:07:40.260] | : getGlobalsAndPackages() ... done
[08:07:40.261] | : run() for ‘Future’ (<unnamed-10>) ...
[08:07:40.261] | : . state: ‘created’
[08:07:40.261] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:40.261] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:40.261] | : . Using MultisessionFutureBackend ...
[08:07:40.261] | : . ' Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:07:40.261] | : . ' Launching futures ...
[08:07:40.262] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:07:40.262] | : . ' , ; Workers: [n=2]
[08:07:40.262] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:40.264] | : . ' , ; FutureRegistry: ‘workers-0aea9e0b5cb824241387f30687b99e75’
[08:07:40.264] | : . ' , ; requestWorker() ...
[08:07:40.264] | : . ' , ; ` requestNode() ...
[08:07:40.264] | : . ' , ; ` | Number of workers: 2
[08:07:40.264] | : . ' , ; ` | Polling for a free worker ...
[08:07:40.265] | : . ' , ; ` | : FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ...
[08:07:40.265] | : . ' , ; ` | : . Listing all futures
[08:07:40.265] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:40.265] | : . ' , ; ` | : FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ... done
[08:07:40.265] | : . ' , ; ` | : Total time: 0
[08:07:40.265] | : . ' , ; ` | Polling for a free worker ... done
[08:07:40.265] | : . ' , ; ` | FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ...
[08:07:40.265] | : . ' , ; ` | : Listing all futures
[08:07:40.266] | : . ' , ; ` | : Number of registered futures: 0
[08:07:40.266] | : . ' , ; ` | FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ... done
[08:07:40.266] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:07:40.266] | : . ' , ; ` | Index of first available worker: 1
[08:07:40.266] | : . ' , ; ` | Validate that the worker is functional ...
[08:07:40.326] | : . ' , ; ` | : Worker is functional
[08:07:40.327] | : . ' , ; ` | : FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ...
[08:07:40.327] | : . ' , ; ` | : . Listing all futures
[08:07:40.327] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:40.327] | : . ' , ; ` | : FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ... done
[08:07:40.327] | : . ' , ; ` | Validate that the worker is functional ... done
[08:07:40.327] | : . ' , ; ` requestNode() ... done
[08:07:40.328] | : . ' , ; ` cluster node index: 1
[08:07:40.328] | : . ' , ; requestWorker() ... done
[08:07:40.328] | : . ' , ; eraseGlobalEnvironment() ...
[08:07:40.328] | : . ' , ; eraseGlobalEnvironment() ... done
[08:07:40.328] | : . ' , ; launchFuture() ...
[08:07:40.329] | : . ' , ; ` cluster node index: 1
[08:07:40.329] | : . ' , ; ` getFutureData() ...
[08:07:40.329] | : . ' , ; ` | getFutureCore() ...
[08:07:40.329] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:07:40.329] | : . ' , ; ` | getFutureCore() ... done
[08:07:40.329] | : . ' , ; ` | getFutureCapture() ...
[08:07:40.329] | : . ' , ; ` | getFutureCapture() ... done
[08:07:40.330] | : . ' , ; ` | getFutureContext() ...
[08:07:40.330] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:40.330] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:07:40.330] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:40.330] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:07:40.330] | : . ' , ; ` | getFutureContext() ... done
[08:07:40.330] | : . ' , ; ` getFutureData() ... done
[08:07:40.331] | : . ' , ; ` FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'add', earlySignal = 0) ...
[08:07:40.331] | : . ' , ; ` | Appended future to position #1
[08:07:40.331] | : . ' , ; ` | Number of registered futures: 1
[08:07:40.331] | : . ' , ; ` FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'add', earlySignal = 0) ... done
[08:07:40.331] | : . ' , ; launchFuture() ... done
[08:07:40.332] | : . ' , ; MultisessionFuture started
[08:07:40.332] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:07:40.332] | : . ' Launching futures ... done
[08:07:40.332] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:40.332] | : . Using MultisessionFutureBackend ... done
[08:07:40.332] | : run() for ‘Future’ (<unnamed-10>) ... done
[08:07:40.332] | future(..., label = NULL) ... done
MultisessionFuture:
Label: <unnamed-10>
Expression:
{
    42
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘running’
[08:07:40.333] | resolved() for MultisessionFuture (<unnamed-10>) ...
[08:07:40.333] | : Cluster node socket connection: index=4, id=373
[08:07:40.334] | : assertValidConnection() ...
[08:07:40.334] | : . cluster node index: 1
[08:07:40.334] | : assertValidConnection() ... done
[08:07:40.345] | : socketSelect(list(<connection #4 (id=373)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:40.345] | resolved() for MultisessionFuture (<unnamed-10>) ... done
Resolved: FALSE
Unique identifier: 6c5907d87436f90883f0d017798056a2-10
Owner process: 6c5907d87436f90883f0d017798056a2
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
Value: <not collected>
Conditions captured: <none>
[08:07:40.345] | value() for MultisessionFuture (<unnamed-10>) ...
[08:07:40.345] | : result() for ClusterFuture ...
[08:07:40.345] | : . assertValidConnection() ...
[08:07:40.346] | : . ' cluster node index: 1
[08:07:40.346] | : . assertValidConnection() ... done
[08:07:40.346] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:07:40.346] | : . ' cluster node index: 1
[08:07:40.374] | : . ' [1] TRUE
[08:07:40.375] | : . ' received data:
[08:07:40.375] | : . ' List of 5
[08:07:40.375] | : . '  $ type   : chr "VALUE"
[08:07:40.375] | : . '  $ value  :List of 16
[08:07:40.375] | : . '   ..$ value              : num 42
[08:07:40.375] | : . '   ..$ visible            : logi TRUE
[08:07:40.375] | : . '   ..$ stdout             : chr ""
[08:07:40.375] | : . '   ..$ conditions         : list()
[08:07:40.375] | : . '   ..$ rng                : logi FALSE
[08:07:40.375] | : . '   ..$ seed               : NULL
[08:07:40.375] | : . '   ..$ misuseGlobalEnv    : NULL
[08:07:40.375] | : . '   ..$ misuseConnections  :List of 3
[08:07:40.375] | : . '   .. ..$ added   : NULL
[08:07:40.375] | : . '   .. ..$ removed : NULL
[08:07:40.375] | : . '   .. ..$ replaced: NULL
[08:07:40.375] | : . '   ..$ misuseDevices      : NULL
[08:07:40.375] | : . '   ..$ misuseDefaultDevice: list()
[08:07:40.375] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:40"
[08:07:40.375] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:40"
[08:07:40.375] | : . '   ..$ uuid               : chr [1:2] "6c5907d87436f90883f0d017798056a2" "10"
[08:07:40.375] | : . '   ..$ session_uuid       : chr "c33fbf3f8d7bc2f1e5dc7d47a134da92"
[08:07:40.375] | : . '   .. ..- attr(*, "source")=List of 5
[08:07:40.375] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:07:40.375] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:40.375] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:40.375] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:40.375] | : . '   .. .. ..$ pid   : int 67897
[08:07:40.375] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:07:40"
[08:07:40.375] | : . '   .. .. ..$ random: int 2147483647
[08:07:40.375] | : . '   ..$ r_info             :List of 4
[08:07:40.375] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:40.375] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:07:40.375] | : . '   .. ..$ os           : chr "unix"
[08:07:40.375] | : . '   .. ..$ os_name      : chr "Linux"
[08:07:40.375] | : . '   .. ..$ captures_utf8: logi TRUE
[08:07:40.375] | : . '   ..$ version            : chr "1.8"
[08:07:40.375] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:07:40.375] | : . '  $ success: logi TRUE
[08:07:40.375] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:07:40.375] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:40.375] | : . '  $ tag    : NULL
[08:07:40.388] | : . ' Received FutureResult
[08:07:40.388] | : . ' FutureResult:
[08:07:40.388] | : . ' value: ‘numeric’
[08:07:40.388] | : . ' visible: TRUE
[08:07:40.388] | : . ' stdout: character
[08:07:40.388] | : . ' conditions: [n = 0] 
[08:07:40.388] | : . ' RNG used: FALSE
[08:07:40.388] | : . ' duration: 0.002550364 secs (started 2025-06-17 08:07:40.371781)
[08:07:40.388] | : . ' version: 1.8
[08:07:40.389] | : . ' FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'remove', earlySignal = 0) ...
[08:07:40.389] | : . ' , Removed future from position #1
[08:07:40.389] | : . ' , Number of registered futures: 0
[08:07:40.389] | : . ' FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'remove', earlySignal = 0) ... done
[08:07:40.389] | : . ' Erased future from future backend
[08:07:40.389] | : . ' result() for ClusterFuture ...
[08:07:40.389] | : . ' , result already collected: FutureResult
[08:07:40.389] | : . ' result() for ClusterFuture ... done
[08:07:40.390] | : . ' signalConditions() ...
[08:07:40.390] | : . ' , include = ‘immediateCondition’
[08:07:40.390] | : . ' , exclude = 
[08:07:40.390] | : . ' , resignal = FALSE
[08:07:40.390] | : . ' , Number of conditions: 0
[08:07:40.390] | : . ' ,  int 0
[08:07:40.391] | : . ' signalConditions() ... done
[08:07:40.391] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:07:40.391] | : result() for ClusterFuture ... done
[08:07:40.391] | : result() for ClusterFuture ...
[08:07:40.391] | : . result already collected: FutureResult
[08:07:40.391] | : result() for ClusterFuture ... done
[08:07:40.391] | : signalConditions() ...
[08:07:40.391] | : . include = ‘immediateCondition’
[08:07:40.391] | : . exclude = 
[08:07:40.391] | : . resignal = FALSE
[08:07:40.392] | : . Number of conditions: 0
[08:07:40.392] | : .  int 0
[08:07:40.392] | : signalConditions() ... done
[08:07:40.392] | : relay stdout ...
[08:07:40.392] | : relay stdout ... done
[08:07:40.392] | : check for misuse ...
[08:07:40.392] | : check for misuse ... done
[08:07:40.393] | value() for MultisessionFuture (<unnamed-10>) ... done
[08:07:40.393] | future(..., label = ‘strategy = multisession’) ...
[08:07:40.393] | : lazy: FALSE
[08:07:40.393] | : stdout: TRUE
[08:07:40.393] | : conditions: [n=1] ‘condition’
[08:07:40.393] | : gc: FALSE
[08:07:40.393] | : earlySignal: FALSE
[08:07:40.393] | : getGlobalsAndPackages() ...
[08:07:40.393] | : . Searching for globals ...
[08:07:40.395] | : . ' globals found: [0] 
[08:07:40.395] | : . Searching for globals ... done
[08:07:40.395] | : . globals: [0] <none>
[08:07:40.395] | : . packages: [0] <none>
[08:07:40.395] | : getGlobalsAndPackages() ... done
[08:07:40.395] | : run() for ‘Future’ (‘strategy = multisession’) ...
[08:07:40.395] | : . state: ‘created’
[08:07:40.395] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:40.396] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:40.396] | : . Using MultisessionFutureBackend ...
[08:07:40.396] | : . ' Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:07:40.396] | : . ' Launching futures ...
[08:07:40.396] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:07:40.396] | : . ' , ; Workers: [n=2]
[08:07:40.396] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:40.398] | : . ' , ; FutureRegistry: ‘workers-0aea9e0b5cb824241387f30687b99e75’
[08:07:40.398] | : . ' , ; requestWorker() ...
[08:07:40.398] | : . ' , ; ` requestNode() ...
[08:07:40.398] | : . ' , ; ` | Number of workers: 2
[08:07:40.398] | : . ' , ; ` | Polling for a free worker ...
[08:07:40.398] | : . ' , ; ` | : FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ...
[08:07:40.398] | : . ' , ; ` | : . Listing all futures
[08:07:40.399] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:40.399] | : . ' , ; ` | : FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ... done
[08:07:40.399] | : . ' , ; ` | : Total time: 0
[08:07:40.399] | : . ' , ; ` | Polling for a free worker ... done
[08:07:40.399] | : . ' , ; ` | FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ...
[08:07:40.399] | : . ' , ; ` | : Listing all futures
[08:07:40.399] | : . ' , ; ` | : Number of registered futures: 0
[08:07:40.399] | : . ' , ; ` | FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ... done
[08:07:40.399] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:07:40.399] | : . ' , ; ` | Index of first available worker: 1
[08:07:40.400] | : . ' , ; ` | Validate that the worker is functional ...
[08:07:40.496] | : . ' , ; ` | : Worker is functional
[08:07:40.496] | : . ' , ; ` | : FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ...
[08:07:40.496] | : . ' , ; ` | : . Listing all futures
[08:07:40.496] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:40.496] | : . ' , ; ` | : FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ... done
[08:07:40.497] | : . ' , ; ` | Validate that the worker is functional ... done
[08:07:40.497] | : . ' , ; ` requestNode() ... done
[08:07:40.497] | : . ' , ; ` cluster node index: 1
[08:07:40.497] | : . ' , ; requestWorker() ... done
[08:07:40.497] | : . ' , ; eraseGlobalEnvironment() ...
[08:07:40.497] | : . ' , ; eraseGlobalEnvironment() ... done
[08:07:40.497] | : . ' , ; launchFuture() ...
[08:07:40.498] | : . ' , ; ` cluster node index: 1
[08:07:40.498] | : . ' , ; ` getFutureData() ...
[08:07:40.498] | : . ' , ; ` | getFutureCore() ...
[08:07:40.498] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:07:40.498] | : . ' , ; ` | getFutureCore() ... done
[08:07:40.498] | : . ' , ; ` | getFutureCapture() ...
[08:07:40.498] | : . ' , ; ` | getFutureCapture() ... done
[08:07:40.498] | : . ' , ; ` | getFutureContext() ...
[08:07:40.498] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:40.499] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:07:40.499] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:40.499] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:07:40.499] | : . ' , ; ` | getFutureContext() ... done
[08:07:40.499] | : . ' , ; ` getFutureData() ... done
[08:07:40.499] | : . ' , ; ` FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'add', earlySignal = 0) ...
[08:07:40.499] | : . ' , ; ` | Appended future to position #1
[08:07:40.500] | : . ' , ; ` | Number of registered futures: 1
[08:07:40.500] | : . ' , ; ` FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'add', earlySignal = 0) ... done
[08:07:40.500] | : . ' , ; launchFuture() ... done
[08:07:40.500] | : . ' , ; MultisessionFuture started
[08:07:40.500] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:07:40.500] | : . ' Launching futures ... done
[08:07:40.500] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:40.500] | : . Using MultisessionFutureBackend ... done
[08:07:40.500] | : run() for ‘Future’ (‘strategy = multisession’) ... done
[08:07:40.501] | future(..., label = ‘strategy = multisession’) ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘running’
[08:07:40.501] | resolved() for MultisessionFuture (‘strategy = multisession’) ...
[08:07:40.501] | : Cluster node socket connection: index=4, id=373
[08:07:40.501] | : assertValidConnection() ...
[08:07:40.502] | : . cluster node index: 1
[08:07:40.502] | : assertValidConnection() ... done
[08:07:40.512] | : socketSelect(list(<connection #4 (id=373)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:40.512] | resolved() for MultisessionFuture (‘strategy = multisession’) ... done
Resolved: FALSE
Unique identifier: 6c5907d87436f90883f0d017798056a2-11
Owner process: 6c5907d87436f90883f0d017798056a2
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
Value: <not collected>
Conditions captured: <none>
[08:07:40.513] | value() for MultisessionFuture (‘strategy = multisession’) ...
[08:07:40.513] | : result() for ClusterFuture ...
[08:07:40.513] | : . assertValidConnection() ...
[08:07:40.513] | : . ' cluster node index: 1
[08:07:40.514] | : . assertValidConnection() ... done
[08:07:40.514] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:07:40.514] | : . ' cluster node index: 1
[08:07:40.543] | : . ' [1] TRUE
[08:07:40.544] | : . ' received data:
[08:07:40.544] | : . ' List of 5
[08:07:40.544] | : . '  $ type   : chr "VALUE"
[08:07:40.544] | : . '  $ value  :List of 16
[08:07:40.544] | : . '   ..$ value              : num 42
[08:07:40.544] | : . '   ..$ visible            : logi TRUE
[08:07:40.544] | : . '   ..$ stdout             : chr ""
[08:07:40.544] | : . '   ..$ conditions         : list()
[08:07:40.544] | : . '   ..$ rng                : logi FALSE
[08:07:40.544] | : . '   ..$ seed               : NULL
[08:07:40.544] | : . '   ..$ misuseGlobalEnv    : NULL
[08:07:40.544] | : . '   ..$ misuseConnections  :List of 3
[08:07:40.544] | : . '   .. ..$ added   : NULL
[08:07:40.544] | : . '   .. ..$ removed : NULL
[08:07:40.544] | : . '   .. ..$ replaced: NULL
[08:07:40.544] | : . '   ..$ misuseDevices      : NULL
[08:07:40.544] | : . '   ..$ misuseDefaultDevice: list()
[08:07:40.544] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:40"
[08:07:40.544] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:40"
[08:07:40.544] | : . '   ..$ uuid               : chr [1:2] "6c5907d87436f90883f0d017798056a2" "11"
[08:07:40.544] | : . '   ..$ session_uuid       : chr "c33fbf3f8d7bc2f1e5dc7d47a134da92"
[08:07:40.544] | : . '   .. ..- attr(*, "source")=List of 5
[08:07:40.544] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:07:40.544] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:40.544] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:40.544] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:40.544] | : . '   .. .. ..$ pid   : int 67897
[08:07:40.544] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:07:40"
[08:07:40.544] | : . '   .. .. ..$ random: int 2147483647
[08:07:40.544] | : . '   ..$ r_info             :List of 4
[08:07:40.544] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:40.544] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:07:40.544] | : . '   .. ..$ os           : chr "unix"
[08:07:40.544] | : . '   .. ..$ os_name      : chr "Linux"
[08:07:40.544] | : . '   .. ..$ captures_utf8: logi TRUE
[08:07:40.544] | : . '   ..$ version            : chr "1.8"
[08:07:40.544] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:07:40.544] | : . '  $ success: logi TRUE
[08:07:40.544] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:07:40.544] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:40.544] | : . '  $ tag    : NULL
[08:07:40.555] | : . ' Received FutureResult
[08:07:40.555] | : . ' FutureResult:
[08:07:40.555] | : . ' value: ‘numeric’
[08:07:40.555] | : . ' visible: TRUE
[08:07:40.555] | : . ' stdout: character
[08:07:40.555] | : . ' conditions: [n = 0] 
[08:07:40.555] | : . ' RNG used: FALSE
[08:07:40.555] | : . ' duration: 0.002670765 secs (started 2025-06-17 08:07:40.540745)
[08:07:40.555] | : . ' version: 1.8
[08:07:40.555] | : . ' FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'remove', earlySignal = 0) ...
[08:07:40.555] | : . ' , Removed future from position #1
[08:07:40.556] | : . ' , Number of registered futures: 0
[08:07:40.556] | : . ' FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'remove', earlySignal = 0) ... done
[08:07:40.556] | : . ' Erased future from future backend
[08:07:40.556] | : . ' result() for ClusterFuture ...
[08:07:40.556] | : . ' , result already collected: FutureResult
[08:07:40.556] | : . ' result() for ClusterFuture ... done
[08:07:40.556] | : . ' signalConditions() ...
[08:07:40.556] | : . ' , include = ‘immediateCondition’
[08:07:40.556] | : . ' , exclude = 
[08:07:40.557] | : . ' , resignal = FALSE
[08:07:40.557] | : . ' , Number of conditions: 0
[08:07:40.557] | : . ' ,  int 0
[08:07:40.557] | : . ' signalConditions() ... done
[08:07:40.557] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:07:40.557] | : result() for ClusterFuture ... done
[08:07:40.557] | : result() for ClusterFuture ...
[08:07:40.558] | : . result already collected: FutureResult
[08:07:40.558] | : result() for ClusterFuture ... done
[08:07:40.558] | : signalConditions() ...
[08:07:40.558] | : . include = ‘immediateCondition’
[08:07:40.558] | : . exclude = 
[08:07:40.558] | : . resignal = FALSE
[08:07:40.558] | : . Number of conditions: 0
[08:07:40.558] | : .  int 0
[08:07:40.559] | : signalConditions() ... done
[08:07:40.559] | : relay stdout ...
[08:07:40.559] | : relay stdout ... done
[08:07:40.559] | : check for misuse ...
[08:07:40.559] | : check for misuse ... done
[08:07:40.559] | value() for MultisessionFuture (‘strategy = multisession’) ... done
[08:07:40.559] | future(..., label = ‘strategy = multisession’) ...
[08:07:40.560] | : lazy: FALSE
[08:07:40.560] | : stdout: TRUE
[08:07:40.560] | : conditions: [n=1] ‘condition’
[08:07:40.560] | : gc: FALSE
[08:07:40.560] | : earlySignal: FALSE
[08:07:40.560] | : getGlobalsAndPackages() ...
[08:07:40.560] | : . Searching for globals ...
[08:07:40.563] | : . ' globals found: [1] ‘{’
[08:07:40.563] | : . Searching for globals ... done
[08:07:40.563] | : . Resolving globals: FALSE
[08:07:40.564] | : . Search for packages associated with the globals ...
[08:07:40.564] | : . ' Packages associated with globals: [1] ‘base’
[08:07:40.564] | : . ' Packages: [1] ‘base’
[08:07:40.564] | : . Search for packages associated with the globals ... done
[08:07:40.564] | : . Packages after dropping 'base': [0] 
[08:07:40.564] | : . globals: [0] 
[08:07:40.564] | : . packages: [0] 
[08:07:40.565] | : getGlobalsAndPackages() ... done
[08:07:40.565] | : run() for ‘Future’ (‘strategy = multisession’) ...
[08:07:40.565] | : . state: ‘created’
[08:07:40.565] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:40.565] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:40.565] | : . Using MultisessionFutureBackend ...
[08:07:40.565] | : . ' Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:07:40.565] | : . ' Launching futures ...
[08:07:40.566] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:07:40.566] | : . ' , ; Workers: [n=2]
[08:07:40.566] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:40.567] | : . ' , ; FutureRegistry: ‘workers-0aea9e0b5cb824241387f30687b99e75’
[08:07:40.567] | : . ' , ; requestWorker() ...
[08:07:40.568] | : . ' , ; ` requestNode() ...
[08:07:40.568] | : . ' , ; ` | Number of workers: 2
[08:07:40.568] | : . ' , ; ` | Polling for a free worker ...
[08:07:40.568] | : . ' , ; ` | : FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ...
[08:07:40.568] | : . ' , ; ` | : . Listing all futures
[08:07:40.568] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:40.568] | : . ' , ; ` | : FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ... done
[08:07:40.568] | : . ' , ; ` | : Total time: 0
[08:07:40.568] | : . ' , ; ` | Polling for a free worker ... done
[08:07:40.568] | : . ' , ; ` | FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ...
[08:07:40.569] | : . ' , ; ` | : Listing all futures
[08:07:40.569] | : . ' , ; ` | : Number of registered futures: 0
[08:07:40.569] | : . ' , ; ` | FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ... done
[08:07:40.569] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:07:40.569] | : . ' , ; ` | Index of first available worker: 1
[08:07:40.569] | : . ' , ; ` | Validate that the worker is functional ...
[08:07:40.665] | : . ' , ; ` | : Worker is functional
[08:07:40.665] | : . ' , ; ` | : FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ...
[08:07:40.665] | : . ' , ; ` | : . Listing all futures
[08:07:40.665] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:40.665] | : . ' , ; ` | : FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'list', earlySignal = 0) ... done
[08:07:40.665] | : . ' , ; ` | Validate that the worker is functional ... done
[08:07:40.666] | : . ' , ; ` requestNode() ... done
[08:07:40.666] | : . ' , ; ` cluster node index: 1
[08:07:40.666] | : . ' , ; requestWorker() ... done
[08:07:40.666] | : . ' , ; eraseGlobalEnvironment() ...
[08:07:40.666] | : . ' , ; eraseGlobalEnvironment() ... done
[08:07:40.666] | : . ' , ; launchFuture() ...
[08:07:40.666] | : . ' , ; ` cluster node index: 1
[08:07:40.667] | : . ' , ; ` getFutureData() ...
[08:07:40.667] | : . ' , ; ` | getFutureCore() ...
[08:07:40.667] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:07:40.667] | : . ' , ; ` | getFutureCore() ... done
[08:07:40.667] | : . ' , ; ` | getFutureCapture() ...
[08:07:40.667] | : . ' , ; ` | getFutureCapture() ... done
[08:07:40.667] | : . ' , ; ` | getFutureContext() ...
[08:07:40.667] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:40.667] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:07:40.668] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:40.668] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:07:40.668] | : . ' , ; ` | getFutureContext() ... done
[08:07:40.668] | : . ' , ; ` getFutureData() ... done
[08:07:40.668] | : . ' , ; ` FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'add', earlySignal = 0) ...
[08:07:40.668] | : . ' , ; ` | Appended future to position #1
[08:07:40.668] | : . ' , ; ` | Number of registered futures: 1
[08:07:40.669] | : . ' , ; ` FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'add', earlySignal = 0) ... done
[08:07:40.669] | : . ' , ; launchFuture() ... done
[08:07:40.669] | : . ' , ; MultisessionFuture started
[08:07:40.669] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:07:40.669] | : . ' Launching futures ... done
[08:07:40.669] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:40.669] | : . Using MultisessionFutureBackend ... done
[08:07:40.669] | : run() for ‘Future’ (‘strategy = multisession’) ... done
[08:07:40.669] | future(..., label = ‘strategy = multisession’) ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
{
    42
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘running’
[08:07:40.670] | resolved() for MultisessionFuture (‘strategy = multisession’) ...
[08:07:40.670] | : Cluster node socket connection: index=4, id=373
[08:07:40.671] | : assertValidConnection() ...
[08:07:40.671] | : . cluster node index: 1
[08:07:40.671] | : assertValidConnection() ... done
[08:07:40.681] | : socketSelect(list(<connection #4 (id=373)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:40.682] | resolved() for MultisessionFuture (‘strategy = multisession’) ... done
Resolved: FALSE
Unique identifier: 6c5907d87436f90883f0d017798056a2-12
Owner process: 6c5907d87436f90883f0d017798056a2
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
Value: <not collected>
Conditions captured: <none>
[08:07:40.687] | value() for MultisessionFuture (‘strategy = multisession’) ...
[08:07:40.687] | : result() for ClusterFuture ...
[08:07:40.687] | : . assertValidConnection() ...
[08:07:40.687] | : . ' cluster node index: 1
[08:07:40.688] | : . assertValidConnection() ... done
[08:07:40.688] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:07:40.688] | : . ' cluster node index: 1
[08:07:40.713] | : . ' [1] TRUE
[08:07:40.713] | : . ' received data:
[08:07:40.713] | : . ' List of 5
[08:07:40.713] | : . '  $ type   : chr "VALUE"
[08:07:40.713] | : . '  $ value  :List of 16
[08:07:40.713] | : . '   ..$ value              : num 42
[08:07:40.713] | : . '   ..$ visible            : logi TRUE
[08:07:40.713] | : . '   ..$ stdout             : chr ""
[08:07:40.713] | : . '   ..$ conditions         : list()
[08:07:40.713] | : . '   ..$ rng                : logi FALSE
[08:07:40.713] | : . '   ..$ seed               : NULL
[08:07:40.713] | : . '   ..$ misuseGlobalEnv    : NULL
[08:07:40.713] | : . '   ..$ misuseConnections  :List of 3
[08:07:40.713] | : . '   .. ..$ added   : NULL
[08:07:40.713] | : . '   .. ..$ removed : NULL
[08:07:40.713] | : . '   .. ..$ replaced: NULL
[08:07:40.713] | : . '   ..$ misuseDevices      : NULL
[08:07:40.713] | : . '   ..$ misuseDefaultDevice: list()
[08:07:40.713] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:40"
[08:07:40.713] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:40"
[08:07:40.713] | : . '   ..$ uuid               : chr [1:2] "6c5907d87436f90883f0d017798056a2" "12"
[08:07:40.713] | : . '   ..$ session_uuid       : chr "c33fbf3f8d7bc2f1e5dc7d47a134da92"
[08:07:40.713] | : . '   .. ..- attr(*, "source")=List of 5
[08:07:40.713] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:07:40.713] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:40.713] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:40.713] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:40.713] | : . '   .. .. ..$ pid   : int 67897
[08:07:40.713] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:07:40"
[08:07:40.713] | : . '   .. .. ..$ random: int 2147483647
[08:07:40.713] | : . '   ..$ r_info             :List of 4
[08:07:40.713] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:40.713] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:07:40.713] | : . '   .. ..$ os           : chr "unix"
[08:07:40.713] | : . '   .. ..$ os_name      : chr "Linux"
[08:07:40.713] | : . '   .. ..$ captures_utf8: logi TRUE
[08:07:40.713] | : . '   ..$ version            : chr "1.8"
[08:07:40.713] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:07:40.713] | : . '  $ success: logi TRUE
[08:07:40.713] | : . '  $ time   : 'proc_time' Named num [1:5] 0.002 0.001 0.003 0 0
[08:07:40.713] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:40.713] | : . '  $ tag    : NULL
[08:07:40.724] | : . ' Received FutureResult
[08:07:40.724] | : . ' FutureResult:
[08:07:40.724] | : . ' value: ‘numeric’
[08:07:40.724] | : . ' visible: TRUE
[08:07:40.724] | : . ' stdout: character
[08:07:40.724] | : . ' conditions: [n = 0] 
[08:07:40.724] | : . ' RNG used: FALSE
[08:07:40.724] | : . ' duration: 0.002548218 secs (started 2025-06-17 08:07:40.709939)
[08:07:40.724] | : . ' version: 1.8
[08:07:40.724] | : . ' FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'remove', earlySignal = 0) ...
[08:07:40.725] | : . ' , Removed future from position #1
[08:07:40.725] | : . ' , Number of registered futures: 0
[08:07:40.725] | : . ' FutureRegistry('workers-0aea9e0b5cb824241387f30687b99e75', action = 'remove', earlySignal = 0) ... done
[08:07:40.725] | : . ' Erased future from future backend
[08:07:40.725] | : . ' result() for ClusterFuture ...
[08:07:40.725] | : . ' , result already collected: FutureResult
[08:07:40.725] | : . ' result() for ClusterFuture ... done
[08:07:40.725] | : . ' signalConditions() ...
[08:07:40.725] | : . ' , include = ‘immediateCondition’
[08:07:40.726] | : . ' , exclude = 
[08:07:40.726] | : . ' , resignal = FALSE
[08:07:40.726] | : . ' , Number of conditions: 0
[08:07:40.726] | : . ' ,  int 0
[08:07:40.726] | : . ' signalConditions() ... done
[08:07:40.726] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:07:40.726] | : result() for ClusterFuture ... done
[08:07:40.727] | : result() for ClusterFuture ...
[08:07:40.727] | : . result already collected: FutureResult
[08:07:40.727] | : result() for ClusterFuture ... done
[08:07:40.727] | : signalConditions() ...
[08:07:40.727] | : . include = ‘immediateCondition’
[08:07:40.727] | : . exclude = 
[08:07:40.727] | : . resignal = FALSE
[08:07:40.727] | : . Number of conditions: 0
[08:07:40.727] | : .  int 0
[08:07:40.728] | : signalConditions() ... done
[08:07:40.728] | : relay stdout ...
[08:07:40.728] | : relay stdout ... done
[08:07:40.728] | : check for misuse ...
[08:07:40.728] | : check for misuse ... done
[08:07:40.728] | value() for MultisessionFuture (‘strategy = multisession’) ... done
- plan('multisession') ... DONE

> message("*** Futures - labels ... DONE")
*** Futures - labels ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.9s, sys.self=0.07s, elapsed=2s, user.child=0.4s, sys.child=0.4s
Test ‘future,labels’ ... success
> 
