
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-futureSessionInfo.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("futureSessionInfo")
Test ‘futureSessionInfo’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-futureSessionInfo.R’

> library(future)
[08:08:11.738] Option 'future.startup.script': TRUE
[08:08:11.739] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:08:11.739] Future startup scripts found: <none>

> message("*** futureSessionInfo() ...")
*** futureSessionInfo() ...

> message(" - test = FALSE")
 - test = FALSE

> futureSessionInfo(test = FALSE)
*** Package versions
future 1.58.0, parallelly 1.45.0, parallel 4.5.1, globals 0.18.0, listenv 0.9.1

*** Allocations
availableCores():
           system /proc/self/status             nproc          mc.cores 
                4                 4                 4                 2 
availableWorkers():
$mc.cores
[1] "localhost" "localhost"

$nproc
[1] "localhost" "localhost" "localhost" "localhost"

$system
[1] "localhost" "localhost" "localhost" "localhost"


*** Settings
- future.plan=<not set>
- future.fork.multithreading.enable=<not set>
- future.globals.maxSize=<not set>
- future.globals.onReference=<not set>
- future.resolve.recursive=<not set>
- future.rng.onMisuse=<not set>
- future.wait.timeout=<not set>
- future.wait.interval=<not set>
- future.wait.alpha=<not set>
- future.startup.script=<not set>

*** Backends
[08:08:11.747] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.747] | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:11.747] | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.747] | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.747] | :  - attr(*, "init")= logi TRUE
[08:08:11.747] | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.747] | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.747] | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.747] | :  - attr(*, "call")= language plan(sequential)
[08:08:11.752] | : init: TRUE
[08:08:11.752] | : makeFutureBackend(<sequential>) ...
[08:08:11.752] | : . Backend function: <‘NULL’>
[08:08:11.753] | : . Evaluator tweak arguments: [n=0]
[08:08:11.753] | : .  list()
[08:08:11.753] | : . Evaluator formal arguments: [n=2]
[08:08:11.753] | : .  list()
[08:08:11.753] | : . Backend factory arguments: [n=2]
[08:08:11.753] | : . Dotted pair list of 2
[08:08:11.753] | : .  $ gc         : logi FALSE
[08:08:11.753] | : .  $ earlySignal: logi FALSE
[08:08:11.755] | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:11.755] | : makeFutureBackend(<sequential>) ... done
[08:08:11.755] | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:11.755] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Number of workers: 1
[08:08:11.755] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.755] | Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:11.756] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
List of future strategies:
1. sequential:
   - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
   - tweaked: FALSE
   - call: plan(sequential)

*** Basic tests

> message(" - test = TRUE")
 - test = TRUE

> futureSessionInfo(test = TRUE)
*** Package versions
future 1.58.0, parallelly 1.45.0, parallel 4.5.1, globals 0.18.0, listenv 0.9.1

*** Allocations
availableCores():
           system /proc/self/status             nproc          mc.cores 
                4                 4                 4                 2 
availableWorkers():
$mc.cores
[1] "localhost" "localhost"

$nproc
[1] "localhost" "localhost" "localhost" "localhost"

$system
[1] "localhost" "localhost" "localhost" "localhost"


*** Settings
- future.plan=<not set>
- future.fork.multithreading.enable=<not set>
- future.globals.maxSize=<not set>
- future.globals.onReference=<not set>
- future.resolve.recursive=<not set>
- future.rng.onMisuse=<not set>
- future.wait.timeout=<not set>
- future.wait.interval=<not set>
- future.wait.alpha=<not set>
- future.startup.script=<not set>

*** Backends
[08:08:11.762] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.762] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Number of workers: 1
[08:08:11.762] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.762] | Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:11.763] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
List of future strategies:
1. sequential:
   - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
   - tweaked: FALSE
   - call: plan(sequential)

*** Basic tests
Main R session details:
    pid     r sysname           release
1 69265 4.5.1   Linux 6.11.0-1015-azure
                                              version nodename machine   login
1 #15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025  host001  x86_64 user002
     user effective_user
1 user001        user001
[08:08:11.766] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.766] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.766] future(..., label = ‘futureSessionInfo-1’) ...
[08:08:11.767] | lazy: FALSE
[08:08:11.767] | stdout: TRUE
[08:08:11.767] | conditions: [n=1] ‘condition’
[08:08:11.767] | gc: FALSE
[08:08:11.767] | earlySignal: FALSE
[08:08:11.768] | getGlobalsAndPackages() ...
[08:08:11.768] | : Searching for globals ...
[08:08:11.785] | : . globals found: [9] ‘{’, ‘Sys.sleep’, ‘delay’, ‘data.frame’, ‘ii’, ‘Sys.getpid’, ‘getRversion’, ‘as.list’, ‘Sys.info’
[08:08:11.786] | : Searching for globals ... done
[08:08:11.786] | : Resolving globals: FALSE
[08:08:11.786] | : Search for packages associated with the globals ...
[08:08:11.786] | : . Packages associated with globals: [1] ‘base’
[08:08:11.787] | : . Packages: [1] ‘base’
[08:08:11.787] | : Search for packages associated with the globals ... done
[08:08:11.787] | : Packages after dropping 'base': [0] 
[08:08:11.787] | : globals: [2] ‘delay’, ‘ii’
[08:08:11.787] | : packages: [0] 
[08:08:11.787] | getGlobalsAndPackages() ... done
[08:08:11.788] | run() for ‘Future’ (‘futureSessionInfo-1’) ...
[08:08:11.788] | : state: ‘created’
[08:08:11.788] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.788] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.788] | : Using SequentialFutureBackend ...
[08:08:11.788] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:11.789] | : . Launching futures ...
[08:08:11.789] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:11.789] | : . ' , getFutureData() ...
[08:08:11.789] | : . ' , ; getFutureCore() ...
[08:08:11.789] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:11.789] | : . ' , ; getFutureCore() ... done
[08:08:11.790] | : . ' , ; getFutureCapture() ...
[08:08:11.790] | : . ' , ; getFutureCapture() ... done
[08:08:11.790] | : . ' , ; getFutureContext() ...
[08:08:11.790] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.790] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:11.790] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.790] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:11.790] | : . ' , ; getFutureContext() ... done
[08:08:11.791] | : . ' , getFutureData() ... done
[08:08:11.793] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.793] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:11.793] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.793] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:11.794] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:11.794] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:11.794] | : . ' , ; ` | New stack:
[08:08:11.794] | : . ' , ; ` | List of 1
[08:08:11.794] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.794] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.794] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:11.794] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.794] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.794] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.794] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.794] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.796] | : . ' , ; ` | Old stack:
[08:08:11.797] | : . ' , ; ` | List of 1
[08:08:11.797] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.797] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.797] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:11.797] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.797] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.797] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.797] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:11.797] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561edb4c3c18> 
[08:08:11.797] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.797] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.797] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:11.800] | : . ' , ; ` | Not identical
[08:08:11.800] | : . ' , ; ` | all.equal() for future ...
[08:08:11.800] | : . ' , ; ` | : List of 2
[08:08:11.800] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.800] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.800] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:11.800] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.800] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.800] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.800] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:11.800] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:11.800] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:11.800] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:11.800] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.800] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.800] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.800] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:11.800] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561edb4c3c18> 
[08:08:11.800] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:11.800] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:11.806] | : . ' , ; ` | all.equal() for future ... done
[08:08:11.806] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:11.806] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:11.806] | : . ' , ; ` List of future strategies:
[08:08:11.806] | : . ' , ; ` 1. sequential:
[08:08:11.806] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:11.806] | : . ' , ; `    - tweaked: FALSE
[08:08:11.806] | : . ' , ; `    - call: plan(sequential)
[08:08:11.807] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:11.807] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:11.807] | : . ' , assign_globals() ...
[08:08:11.807] | : . ' , List of 2
[08:08:11.807] | : . ' ,  $ delay: num 1
[08:08:11.807] | : . ' ,  $ ii   : int 1
[08:08:11.807] | : . ' ,  - attr(*, "where")=List of 2
[08:08:11.807] | : . ' ,   ..$ delay:<environment: 0x561edb03eeb8> 
[08:08:11.807] | : . ' ,   ..$ ii   :<environment: 0x561edb03eeb8> 
[08:08:11.807] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:11.807] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:11.807] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:11.807] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:11.810] | : . ' , - copied ‘delay’ to environment
[08:08:11.810] | : . ' , - copied ‘ii’ to environment
[08:08:11.811] | : . ' , assign_globals() ... done
[08:08:12.815] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:12.816] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:12.816] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:12.816] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:12.816] | : . ' , ; ` | : New stack:
[08:08:12.816] | : . ' , ; ` | : List of 1
[08:08:12.816] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:12.816] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:12.816] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:12.816] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:12.816] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:12.816] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:12.816] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:12.816] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561edb4c3c18> 
[08:08:12.816] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:12.816] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:12.816] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:12.820] | : . ' , ; ` | : Old stack:
[08:08:12.820] | : . ' , ; ` | : List of 1
[08:08:12.820] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:12.820] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:12.820] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:12.820] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:12.820] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:12.820] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:12.820] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:12.820] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561edb4c3c18> 
[08:08:12.820] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:12.820] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:12.820] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:12.823] | : . ' , ; ` | : Identical
[08:08:12.823] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:12.823] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:12.823] | : . ' , ; ` | List of future strategies:
[08:08:12.823] | : . ' , ; ` | 1. sequential:
[08:08:12.823] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:12.823] | : . ' , ; ` |    - tweaked: FALSE
[08:08:12.823] | : . ' , ; ` |    - call: plan(sequential)
[08:08:12.824] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:12.824] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:12.824] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:12.829] | : . ' , SequentialFuture started (and completed)
[08:08:12.829] | : . ' , signalConditions() ...
[08:08:12.829] | : . ' , ; include = ‘immediateCondition’
[08:08:12.829] | : . ' , ; exclude = 
[08:08:12.829] | : . ' , ; resignal = FALSE
[08:08:12.830] | : . ' , ; Number of conditions: 6
[08:08:12.830] | : . ' , ;  int 6
[08:08:12.830] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.830] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.830] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.830] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.831] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.831] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.831] | : . ' , signalConditions() ... done
[08:08:12.831] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:12.831] | : . Launching futures ... done
[08:08:12.831] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:12.831] | : Using SequentialFutureBackend ... done
[08:08:12.831] | run() for ‘Future’ (‘futureSessionInfo-1’) ... done
[08:08:12.832] future(..., label = ‘futureSessionInfo-1’) ... done
[08:08:12.832] value() for list ...
[08:08:12.832] | recursive: 0
[08:08:12.832] | reduce: FALSE
[08:08:12.833] | length: 1

[08:08:12.833] | Number of remaining objects: 1
[08:08:12.833] | checking value #1:
[08:08:12.833] | 'obj' is SequentialFuture
[08:08:12.833] | resolved() for SequentialFuture (‘futureSessionInfo-1’) ...
[08:08:12.833] | : state: ‘finished’
[08:08:12.833] | : run: TRUE
[08:08:12.834] | : result: ‘FutureResult’
[08:08:12.834] | resolved() for SequentialFuture (‘futureSessionInfo-1’) ... done
[08:08:12.834] | SequentialFuture #1
[08:08:12.834] | signalConditionsASAP(SequentialFuture, pos=1) ...
[08:08:12.834] | : nx: 1
[08:08:12.834] | : relay: TRUE
[08:08:12.834] | : stdout: TRUE
[08:08:12.834] | : signal: TRUE
[08:08:12.834] | : resignal: FALSE
[08:08:12.834] | : force: TRUE
[08:08:12.835] | : relayed: [n=1] FALSE
[08:08:12.835] | : queued futures: [n=1] FALSE
[08:08:12.835] | : until=1
[08:08:12.835] | : relaying element #1
[08:08:12.835] | : value() for SequentialFuture (‘futureSessionInfo-1’) ...
[08:08:12.835] | : . signalConditions() ...
[08:08:12.836] | : . ' include = ‘immediateCondition’
[08:08:12.836] | : . ' exclude = 
[08:08:12.836] | : . ' resignal = FALSE
[08:08:12.836] | : . ' Number of conditions: 6
[08:08:12.836] | : . '  int 6
[08:08:12.836] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.836] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.837] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.837] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.837] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.837] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.837] | : . signalConditions() ... done
[08:08:12.837] | : . relay stdout ...
[08:08:12.837] | : . relay stdout ... done
[08:08:12.837] | : . check for misuse ...
[08:08:12.837] | : . check for misuse ... done
[08:08:12.837] | : value() for SequentialFuture (‘futureSessionInfo-1’) ... done
[08:08:12.838] | : signalConditions() ...
[08:08:12.838] | : . include = ‘immediateCondition’
[08:08:12.838] | : . exclude = 
[08:08:12.838] | : . resignal = FALSE
[08:08:12.838] | : . Number of conditions: 6
[08:08:12.838] | : .  int 6
[08:08:12.838] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.839] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.839] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.839] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.839] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.839] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.839] | : signalConditions() ... done
[08:08:12.839] | : signalConditions() ...
[08:08:12.839] | : . include = ‘condition’
[08:08:12.839] | : . exclude = ‘error’, ‘immediateCondition’
[08:08:12.839] | : . resignal = TRUE
[08:08:12.840] | : . Number of conditions: 6
[08:08:12.840] | : .  int 6
[08:08:12.840] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.840] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.792] | : . ' , attachPackages() ...
[08:08:12.840] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.840] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.792] | : . ' , ; packages: [n=1] ‘future’
[08:08:12.841] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.841] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.792] | : . ' , attachPackages() ... done
[08:08:12.841] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.841] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.792] | : . ' , attachPackages() ...
[08:08:12.841] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.841] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.792] | : . ' , ; packages: [n=0] 
[08:08:12.841] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.841] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:11.792] | : . ' , attachPackages() ... done
[08:08:12.841] | : signalConditions() ... done
[08:08:12.842] | : relayed: [n=1] TRUE
[08:08:12.842] | : queued futures: [n=1] TRUE
[08:08:12.842] | signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:08:12.842] | value(<SequentialFuture>, ...) ...
[08:08:12.842] | value(<SequentialFuture>, ...) ... done
[08:08:12.842] | value() for SequentialFuture (‘futureSessionInfo-1’) ...
[08:08:12.842] | : signalConditions() ...
[08:08:12.842] | : . include = ‘immediateCondition’
[08:08:12.842] | : . exclude = 
[08:08:12.842] | : . resignal = FALSE
[08:08:12.843] | : . Number of conditions: 6
[08:08:12.843] | : .  int 6
[08:08:12.843] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.843] | : . already signaled, skipping
[08:08:12.843] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.843] | : . already signaled, skipping
[08:08:12.843] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.844] | : . already signaled, skipping
[08:08:12.844] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.844] | : . already signaled, skipping
[08:08:12.844] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.844] | : . already signaled, skipping
[08:08:12.844] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:12.844] | : . already signaled, skipping
[08:08:12.844] | : signalConditions() ... done
[08:08:12.844] | : check for misuse ...
[08:08:12.844] | : check for misuse ... done
[08:08:12.844] | value() for SequentialFuture (‘futureSessionInfo-1’) ... done
[08:08:12.845] | value: <data.frame>
[08:08:12.845] | signalConditionsASAP(SequentialFuture, pos=1) ...
[08:08:12.845] | : nx: 1
[08:08:12.845] | : relay: TRUE
[08:08:12.845] | : stdout: TRUE
[08:08:12.845] | : signal: TRUE
[08:08:12.845] | : resignal: FALSE
[08:08:12.845] | : force: TRUE
[08:08:12.845] | : relayed: [n=1] TRUE
[08:08:12.845] | : queued futures: [n=1] TRUE
[08:08:12.845] | : until=1
[08:08:12.846] | : relayed: [n=1] TRUE
[08:08:12.846] | : queued futures: [n=1] TRUE
[08:08:12.846] | signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:08:12.846] | resolve() for SequentialFuture ...
[08:08:12.846] | resolve() for SequentialFuture ... done
[08:08:12.846] | length: 0 (resolved future 1)
[08:08:12.846] value() for list ... done
[08:08:12.846] Relaying remaining futures ...
[08:08:12.847] | signalConditionsASAP(NULL, pos=0) ...
[08:08:12.847] | : nx: 1
[08:08:12.847] | : relay: TRUE
[08:08:12.847] | : stdout: TRUE
[08:08:12.847] | : signal: TRUE
[08:08:12.847] | : resignal: FALSE
[08:08:12.847] | : force: TRUE
[08:08:12.847] | : relayed: [n=1] TRUE
[08:08:12.847] | : queued futures: [n=1] TRUE
 - flush all
[08:08:12.847] | : relayed: [n=1] TRUE
[08:08:12.847] | : queued futures: [n=1] TRUE
[08:08:12.848] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:12.848] Relaying remaining futures ... done

Worker R session details:
  worker   pid     r sysname           release
1      1 69265 4.5.1   Linux 6.11.0-1015-azure
                                              version nodename machine   login
1 #15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025  host001  x86_64 user002
     user effective_user
1 user001        user001
[08:08:12.851] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:12.851] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Number of unique worker PIDs: 1 (as expected)

> message("*** futureSessionInfo() ... DONE")
*** futureSessionInfo() ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.2s, sys.self=0.006s, elapsed=1s, user.child=0.001s, sys.child=0.004s
Test ‘futureSessionInfo’ ... success
> 
