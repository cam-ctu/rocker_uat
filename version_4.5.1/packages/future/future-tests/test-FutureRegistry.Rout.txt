
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-FutureRegistry.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("FutureRegistry")
Test ‘FutureRegistry’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-FutureRegistry.R’

> library(future)
[08:07:58.329] Option 'future.startup.script': TRUE
[08:07:58.329] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:07:58.329] Future startup scripts found: <none>

> message("*** FutureRegistry() ...")
*** FutureRegistry() ...

> for (where in c("multicore-dummy-uuid", "rscript")) {
+     message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+     futures <- FutureR .... [TRUNCATED] 
*** FutureRegistry('multicore-dummy-uuid', 'list') ...
list()
*** FutureRegistry('multicore-dummy-uuid', 'add') ...
[08:07:58.352] future(..., label = NULL) ...
[08:07:58.352] | lazy: FALSE
[08:07:58.352] | stdout: TRUE
[08:07:58.352] | conditions: [n=1] ‘condition’
[08:07:58.352] | gc: FALSE
[08:07:58.352] | earlySignal: FALSE
[08:07:58.353] | getGlobalsAndPackages() ...
[08:07:58.353] | : Searching for globals ...
[08:07:58.363] | : . globals found: [1] ‘{’
[08:07:58.363] | : Searching for globals ... done
[08:07:58.364] | : Resolving globals: FALSE
[08:07:58.364] | : Search for packages associated with the globals ...
[08:07:58.364] | : . Packages associated with globals: [1] ‘base’
[08:07:58.364] | : . Packages: [1] ‘base’
[08:07:58.364] | : Search for packages associated with the globals ... done
[08:07:58.364] | : Packages after dropping 'base': [0] 
[08:07:58.365] | : globals: [0] 
[08:07:58.365] | : packages: [0] 
[08:07:58.365] | getGlobalsAndPackages() ... done
[08:07:58.365] | run() for ‘Future’ (<unnamed-1>) ...
[08:07:58.366] | : state: ‘created’
[08:07:58.366] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.366] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:58.366] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.366] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.366] | : . '  - attr(*, "init")= logi TRUE
[08:07:58.366] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.366] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.366] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.366] | : . '  - attr(*, "call")= language plan(sequential)
[08:07:58.370] | : . ' init: TRUE
[08:07:58.370] | : . ' makeFutureBackend(<sequential>) ...
[08:07:58.370] | : . ' , Backend function: <‘NULL’>
[08:07:58.370] | : . ' , Evaluator tweak arguments: [n=0]
[08:07:58.370] | : . ' ,  list()
[08:07:58.371] | : . ' , Evaluator formal arguments: [n=2]
[08:07:58.371] | : . ' ,  list()
[08:07:58.371] | : . ' , Backend factory arguments: [n=2]
[08:07:58.371] | : . ' , Dotted pair list of 2
[08:07:58.371] | : . ' ,  $ gc         : logi FALSE
[08:07:58.371] | : . ' ,  $ earlySignal: logi FALSE
[08:07:58.372] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:58.372] | : . ' makeFutureBackend(<sequential>) ... done
[08:07:58.372] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:58.372] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:58.373] | : Using SequentialFutureBackend ...
[08:07:58.373] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:07:58.373] | : . Launching futures ...
[08:07:58.373] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:58.373] | : . ' , getFutureData() ...
[08:07:58.373] | : . ' , ; getFutureCore() ...
[08:07:58.373] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:58.374] | : . ' , ; getFutureCore() ... done
[08:07:58.374] | : . ' , ; getFutureCapture() ...
[08:07:58.374] | : . ' , ; getFutureCapture() ... done
[08:07:58.374] | : . ' , ; getFutureContext() ...
[08:07:58.374] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.374] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:58.374] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:58.374] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:58.375] | : . ' , ; getFutureContext() ... done
[08:07:58.375] | : . ' , getFutureData() ... done
[08:07:58.377] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.377] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:58.377] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:58.378] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:58.378] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:58.378] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:58.378] | : . ' , ; ` | New stack:
[08:07:58.378] | : . ' , ; ` | List of 1
[08:07:58.378] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.378] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.378] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:58.378] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.378] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.378] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.378] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:58.378] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.381] | : . ' , ; ` | Old stack:
[08:07:58.381] | : . ' , ; ` | List of 1
[08:07:58.381] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.381] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.381] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:58.381] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.381] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.381] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.381] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:58.381] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.381] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.381] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.381] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.384] | : . ' , ; ` | Not identical
[08:07:58.384] | : . ' , ; ` | all.equal() for future ...
[08:07:58.384] | : . ' , ; ` | : List of 2
[08:07:58.384] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.384] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.384] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:58.384] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.384] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.384] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.384] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:58.384] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.384] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.384] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:58.384] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.384] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.384] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.384] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:58.384] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.384] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.384] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.391] | : . ' , ; ` | all.equal() for future ... done
[08:07:58.391] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:58.391] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:58.391] | : . ' , ; ` List of future strategies:
[08:07:58.391] | : . ' , ; ` 1. sequential:
[08:07:58.391] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:58.391] | : . ' , ; `    - tweaked: FALSE
[08:07:58.391] | : . ' , ; `    - call: plan(sequential)
[08:07:58.392] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:58.392] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:58.394] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:58.394] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:58.394] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:58.394] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:58.394] | : . ' , ; ` | : New stack:
[08:07:58.394] | : . ' , ; ` | : List of 1
[08:07:58.394] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.394] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.394] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:58.394] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.394] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.394] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.394] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:58.394] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.394] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.394] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.394] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.398] | : . ' , ; ` | : Old stack:
[08:07:58.398] | : . ' , ; ` | : List of 1
[08:07:58.398] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.398] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.398] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:58.398] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.398] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.398] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.398] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:58.398] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.398] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.398] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.398] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.401] | : . ' , ; ` | : Identical
[08:07:58.401] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:58.401] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:58.401] | : . ' , ; ` | List of future strategies:
[08:07:58.401] | : . ' , ; ` | 1. sequential:
[08:07:58.401] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:58.401] | : . ' , ; ` |    - tweaked: FALSE
[08:07:58.401] | : . ' , ; ` |    - call: plan(sequential)
[08:07:58.401] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:58.402] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:58.402] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:58.405] | : . ' , SequentialFuture started (and completed)
[08:07:58.405] | : . ' , signalConditions() ...
[08:07:58.405] | : . ' , ; include = ‘immediateCondition’
[08:07:58.405] | : . ' , ; exclude = 
[08:07:58.405] | : . ' , ; resignal = FALSE
[08:07:58.405] | : . ' , ; Number of conditions: 6
[08:07:58.405] | : . ' , ;  int 6
[08:07:58.406] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.406] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.406] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.406] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.406] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.406] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.407] | : . ' , signalConditions() ... done
[08:07:58.407] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:58.407] | : . Launching futures ... done
[08:07:58.407] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:58.407] | : Using SequentialFutureBackend ... done
[08:07:58.407] | run() for ‘Future’ (<unnamed-1>) ... done
[08:07:58.407] future(..., label = NULL) ... done
SequentialFuture:
Label: <unnamed-1>
Expression:
{
    1
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: f8865cfcb9741f2e9285a8d7713260dd-1
Owner process: f8865cfcb9741f2e9285a8d7713260dd
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01781726 secs (started 2025-06-17 08:07:58.376263)
Worker process: f8865cfcb9741f2e9285a8d7713260dd
*** FutureRegistry('multicore-dummy-uuid', 'list') ...
[[1]]
SequentialFuture:
Label: <unnamed-1>
Expression:
{
    1
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: f8865cfcb9741f2e9285a8d7713260dd-1
Owner process: f8865cfcb9741f2e9285a8d7713260dd
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01781726 secs (started 2025-06-17 08:07:58.376263)
Worker process: f8865cfcb9741f2e9285a8d7713260dd

*** FutureRegistry('multicore-dummy-uuid', 'remove') ...
*** FutureRegistry('multicore-dummy-uuid', 'list') ...
list()
*** FutureRegistry('multicore-dummy-uuid', 'add') ...
[08:07:58.409] future(..., label = NULL) ...
[08:07:58.409] | lazy: FALSE
[08:07:58.410] | stdout: TRUE
[08:07:58.410] | conditions: [n=1] ‘condition’
[08:07:58.410] | gc: FALSE
[08:07:58.410] | earlySignal: FALSE
[08:07:58.410] | getGlobalsAndPackages() ...
[08:07:58.410] | : Searching for globals ...
[08:07:58.414] | : . globals found: [1] ‘{’
[08:07:58.414] | : Searching for globals ... done
[08:07:58.414] | : Resolving globals: FALSE
[08:07:58.414] | : Search for packages associated with the globals ...
[08:07:58.414] | : . Packages associated with globals: [1] ‘base’
[08:07:58.415] | : . Packages: [1] ‘base’
[08:07:58.415] | : Search for packages associated with the globals ... done
[08:07:58.415] | : Packages after dropping 'base': [0] 
[08:07:58.415] | : globals: [0] 
[08:07:58.415] | : packages: [0] 
[08:07:58.415] | getGlobalsAndPackages() ... done
[08:07:58.415] | run() for ‘Future’ (<unnamed-2>) ...
[08:07:58.416] | : state: ‘created’
[08:07:58.416] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.416] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:58.416] | : Using SequentialFutureBackend ...
[08:07:58.416] | : . Number of futures since start: 1 (1 created, 2 launched, 2 finished)
[08:07:58.416] | : . Launching futures ...
[08:07:58.416] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:58.416] | : . ' , getFutureData() ...
[08:07:58.416] | : . ' , ; getFutureCore() ...
[08:07:58.417] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:58.417] | : . ' , ; getFutureCore() ... done
[08:07:58.417] | : . ' , ; getFutureCapture() ...
[08:07:58.417] | : . ' , ; getFutureCapture() ... done
[08:07:58.417] | : . ' , ; getFutureContext() ...
[08:07:58.417] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.417] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:58.417] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:58.417] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:58.417] | : . ' , ; getFutureContext() ... done
[08:07:58.418] | : . ' , getFutureData() ... done
[08:07:58.419] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.419] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:58.419] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:58.419] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:58.419] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:58.419] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:58.420] | : . ' , ; ` | New stack:
[08:07:58.420] | : . ' , ; ` | List of 1
[08:07:58.420] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.420] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.420] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:58.420] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.420] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.420] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.420] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:58.420] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.422] | : . ' , ; ` | Old stack:
[08:07:58.422] | : . ' , ; ` | List of 1
[08:07:58.422] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.422] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.422] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:58.422] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.422] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.422] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.422] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:58.422] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.422] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.422] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.422] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.425] | : . ' , ; ` | Not identical
[08:07:58.425] | : . ' , ; ` | all.equal() for future ...
[08:07:58.425] | : . ' , ; ` | : List of 2
[08:07:58.425] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.425] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.425] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:58.425] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.425] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.425] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.425] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:58.425] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.425] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.425] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:58.425] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.425] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.425] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.425] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:58.425] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.425] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.425] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.430] | : . ' , ; ` | all.equal() for future ... done
[08:07:58.430] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:58.430] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:58.431] | : . ' , ; ` List of future strategies:
[08:07:58.431] | : . ' , ; ` 1. sequential:
[08:07:58.431] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:58.431] | : . ' , ; `    - tweaked: FALSE
[08:07:58.431] | : . ' , ; `    - call: plan(sequential)
[08:07:58.432] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:58.432] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:58.433] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:58.434] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:58.434] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:58.434] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:58.434] | : . ' , ; ` | : New stack:
[08:07:58.434] | : . ' , ; ` | : List of 1
[08:07:58.434] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.434] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.434] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:58.434] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.434] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.434] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.434] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:58.434] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.434] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.434] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.434] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.437] | : . ' , ; ` | : Old stack:
[08:07:58.437] | : . ' , ; ` | : List of 1
[08:07:58.437] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.437] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.437] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:58.437] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.437] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.437] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.437] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:58.437] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.437] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.437] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.437] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.440] | : . ' , ; ` | : Identical
[08:07:58.440] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:58.440] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:58.441] | : . ' , ; ` | List of future strategies:
[08:07:58.441] | : . ' , ; ` | 1. sequential:
[08:07:58.441] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:58.441] | : . ' , ; ` |    - tweaked: FALSE
[08:07:58.441] | : . ' , ; ` |    - call: plan(sequential)
[08:07:58.441] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:58.441] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:58.441] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:58.441] | : . ' , SequentialFuture started (and completed)
[08:07:58.442] | : . ' , signalConditions() ...
[08:07:58.442] | : . ' , ; include = ‘immediateCondition’
[08:07:58.442] | : . ' , ; exclude = 
[08:07:58.442] | : . ' , ; resignal = FALSE
[08:07:58.442] | : . ' , ; Number of conditions: 6
[08:07:58.442] | : . ' , ;  int 6
[08:07:58.442] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.443] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.443] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.443] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.443] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.443] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.443] | : . ' , signalConditions() ... done
[08:07:58.443] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:58.443] | : . Launching futures ... done
[08:07:58.443] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:58.443] | : Using SequentialFutureBackend ... done
[08:07:58.444] | run() for ‘Future’ (<unnamed-2>) ... done
[08:07:58.444] future(..., label = NULL) ... done
SequentialFuture:
Label: <unnamed-2>
Expression:
{
    2
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: f8865cfcb9741f2e9285a8d7713260dd-2
Owner process: f8865cfcb9741f2e9285a8d7713260dd
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01547551 secs (started 2025-06-17 08:07:58.418185)
Worker process: f8865cfcb9741f2e9285a8d7713260dd
*** FutureRegistry('multicore-dummy-uuid', 'list') ...
[[1]]
SequentialFuture:
Label: <unnamed-2>
Expression:
{
    2
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: f8865cfcb9741f2e9285a8d7713260dd-2
Owner process: f8865cfcb9741f2e9285a8d7713260dd
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01547551 secs (started 2025-06-17 08:07:58.418185)
Worker process: f8865cfcb9741f2e9285a8d7713260dd

*** FutureRegistry('multicore-dummy-uuid', 'collect-first') ...
[08:07:58.445] resolved() for SequentialFuture (<unnamed-2>) ...
[08:07:58.445] | state: ‘finished’
[08:07:58.445] | run: FALSE
[08:07:58.445] | result: ‘FutureResult’
[08:07:58.445] resolved() for SequentialFuture (<unnamed-2>) ... done
[08:07:58.446] value() for SequentialFuture (<unnamed-2>) ...
[08:07:58.446] | signalConditions() ...
[08:07:58.446] | : include = ‘immediateCondition’
[08:07:58.446] | : exclude = 
[08:07:58.446] | : resignal = FALSE
[08:07:58.446] | : Number of conditions: 6
[08:07:58.447] | :  int 6
[08:07:58.447] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.447] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.447] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.447] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.447] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.447] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.448] | signalConditions() ... done
[08:07:58.448] | check for misuse ...
[08:07:58.448] | check for misuse ... done
[08:07:58.448] value() for SequentialFuture (<unnamed-2>) ... done
list()
*** FutureRegistry('multicore-dummy-uuid', 'add') ...
[08:07:58.448] future(..., label = NULL) ...
[08:07:58.448] | lazy: FALSE
[08:07:58.448] | stdout: TRUE
[08:07:58.448] | conditions: [n=1] ‘condition’
[08:07:58.449] | gc: FALSE
[08:07:58.449] | earlySignal: FALSE
[08:07:58.449] | getGlobalsAndPackages() ...
[08:07:58.449] | : Searching for globals ...
[08:07:58.452] | : . globals found: [1] ‘{’
[08:07:58.453] | : Searching for globals ... done
[08:07:58.453] | : Resolving globals: FALSE
[08:07:58.453] | : Search for packages associated with the globals ...
[08:07:58.453] | : . Packages associated with globals: [1] ‘base’
[08:07:58.453] | : . Packages: [1] ‘base’
[08:07:58.453] | : Search for packages associated with the globals ... done
[08:07:58.453] | : Packages after dropping 'base': [0] 
[08:07:58.454] | : globals: [0] 
[08:07:58.454] | : packages: [0] 
[08:07:58.454] | getGlobalsAndPackages() ... done
[08:07:58.454] | run() for ‘Future’ (<unnamed-3>) ...
[08:07:58.454] | : state: ‘created’
[08:07:58.454] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.454] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:58.454] | : Using SequentialFutureBackend ...
[08:07:58.454] | : . Number of futures since start: 2 (2 created, 4 launched, 4 finished)
[08:07:58.455] | : . Launching futures ...
[08:07:58.455] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:58.455] | : . ' , getFutureData() ...
[08:07:58.455] | : . ' , ; getFutureCore() ...
[08:07:58.455] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:58.455] | : . ' , ; getFutureCore() ... done
[08:07:58.455] | : . ' , ; getFutureCapture() ...
[08:07:58.455] | : . ' , ; getFutureCapture() ... done
[08:07:58.455] | : . ' , ; getFutureContext() ...
[08:07:58.455] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.456] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:58.456] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:58.456] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:58.456] | : . ' , ; getFutureContext() ... done
[08:07:58.456] | : . ' , getFutureData() ... done
[08:07:58.457] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.457] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:58.457] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:58.458] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:58.458] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:58.458] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:58.458] | : . ' , ; ` | New stack:
[08:07:58.458] | : . ' , ; ` | List of 1
[08:07:58.458] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.458] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.458] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:58.458] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.458] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.458] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.458] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:58.458] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.461] | : . ' , ; ` | Old stack:
[08:07:58.461] | : . ' , ; ` | List of 1
[08:07:58.461] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.461] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.461] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:58.461] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.461] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.461] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.461] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:58.461] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.461] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.461] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.461] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.464] | : . ' , ; ` | Not identical
[08:07:58.464] | : . ' , ; ` | all.equal() for future ...
[08:07:58.464] | : . ' , ; ` | : List of 2
[08:07:58.464] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.464] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.464] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:58.464] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.464] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.464] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.464] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:58.464] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.464] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.464] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:58.464] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.464] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.464] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.464] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:58.464] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.464] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.464] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.469] | : . ' , ; ` | all.equal() for future ... done
[08:07:58.469] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:58.469] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:58.469] | : . ' , ; ` List of future strategies:
[08:07:58.469] | : . ' , ; ` 1. sequential:
[08:07:58.469] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:58.469] | : . ' , ; `    - tweaked: FALSE
[08:07:58.469] | : . ' , ; `    - call: plan(sequential)
[08:07:58.470] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:58.470] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:58.472] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:58.472] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:58.472] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:58.472] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:58.472] | : . ' , ; ` | : New stack:
[08:07:58.472] | : . ' , ; ` | : List of 1
[08:07:58.472] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.472] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.472] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:58.472] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.472] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.472] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.472] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:58.472] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.472] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.472] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.472] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.475] | : . ' , ; ` | : Old stack:
[08:07:58.476] | : . ' , ; ` | : List of 1
[08:07:58.476] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.476] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.476] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:58.476] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.476] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.476] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.476] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:58.476] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.476] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.476] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.476] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.479] | : . ' , ; ` | : Identical
[08:07:58.479] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:58.479] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:58.479] | : . ' , ; ` | List of future strategies:
[08:07:58.479] | : . ' , ; ` | 1. sequential:
[08:07:58.479] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:58.479] | : . ' , ; ` |    - tweaked: FALSE
[08:07:58.479] | : . ' , ; ` |    - call: plan(sequential)
[08:07:58.479] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:58.479] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:58.480] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:58.480] | : . ' , SequentialFuture started (and completed)
[08:07:58.480] | : . ' , signalConditions() ...
[08:07:58.480] | : . ' , ; include = ‘immediateCondition’
[08:07:58.480] | : . ' , ; exclude = 
[08:07:58.480] | : . ' , ; resignal = FALSE
[08:07:58.480] | : . ' , ; Number of conditions: 6
[08:07:58.480] | : . ' , ;  int 6
[08:07:58.481] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.481] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.481] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.481] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.481] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.481] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.481] | : . ' , signalConditions() ... done
[08:07:58.482] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:58.482] | : . Launching futures ... done
[08:07:58.482] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:58.482] | : Using SequentialFutureBackend ... done
[08:07:58.482] | run() for ‘Future’ (<unnamed-3>) ... done
[08:07:58.482] future(..., label = NULL) ... done
SequentialFuture:
Label: <unnamed-3>
Expression:
{
    2
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: f8865cfcb9741f2e9285a8d7713260dd-3
Owner process: f8865cfcb9741f2e9285a8d7713260dd
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01544714 secs (started 2025-06-17 08:07:58.456662)
Worker process: f8865cfcb9741f2e9285a8d7713260dd
*** FutureRegistry('multicore-dummy-uuid', 'reset') ...
*** FutureRegistry('multicore-dummy-uuid', 'list') ...
list()
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[08:07:58.483] future(..., label = NULL) ...
[08:07:58.483] | lazy: FALSE
[08:07:58.483] | stdout: TRUE
[08:07:58.483] | conditions: [n=1] ‘condition’
[08:07:58.483] | gc: FALSE
[08:07:58.483] | earlySignal: FALSE
[08:07:58.484] | getGlobalsAndPackages() ...
[08:07:58.484] | : Searching for globals ...
[08:07:58.486] | : . globals found: [1] ‘{’
[08:07:58.486] | : Searching for globals ... done
[08:07:58.487] | : Resolving globals: FALSE
[08:07:58.487] | : Search for packages associated with the globals ...
[08:07:58.487] | : . Packages associated with globals: [1] ‘base’
[08:07:58.487] | : . Packages: [1] ‘base’
[08:07:58.487] | : Search for packages associated with the globals ... done
[08:07:58.487] | : Packages after dropping 'base': [0] 
[08:07:58.487] | : globals: [0] 
[08:07:58.488] | : packages: [0] 
[08:07:58.488] | getGlobalsAndPackages() ... done
[08:07:58.488] | run() for ‘Future’ (<unnamed-4>) ...
[08:07:58.488] | : state: ‘created’
[08:07:58.488] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.488] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:58.488] | : Using SequentialFutureBackend ...
[08:07:58.488] | : . Number of futures since start: 3 (3 created, 6 launched, 5 finished)
[08:07:58.488] | : . Launching futures ...
[08:07:58.489] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:58.489] | : . ' , getFutureData() ...
[08:07:58.489] | : . ' , ; getFutureCore() ...
[08:07:58.489] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:58.489] | : . ' , ; getFutureCore() ... done
[08:07:58.489] | : . ' , ; getFutureCapture() ...
[08:07:58.489] | : . ' , ; getFutureCapture() ... done
[08:07:58.489] | : . ' , ; getFutureContext() ...
[08:07:58.489] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.490] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:58.491] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:58.491] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:58.491] | : . ' , ; getFutureContext() ... done
[08:07:58.491] | : . ' , getFutureData() ... done
[08:07:58.492] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.492] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:58.492] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:58.493] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:58.493] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:58.493] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:58.493] | : . ' , ; ` | New stack:
[08:07:58.493] | : . ' , ; ` | List of 1
[08:07:58.493] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.493] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.493] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:58.493] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.493] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.493] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.493] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:58.493] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.496] | : . ' , ; ` | Old stack:
[08:07:58.496] | : . ' , ; ` | List of 1
[08:07:58.496] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.496] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.496] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:58.496] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.496] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.496] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.496] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:58.496] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.496] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.496] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.496] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.499] | : . ' , ; ` | Not identical
[08:07:58.499] | : . ' , ; ` | all.equal() for future ...
[08:07:58.499] | : . ' , ; ` | : List of 2
[08:07:58.499] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.499] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.499] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:58.499] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.499] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.499] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.499] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:58.499] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.499] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.499] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:58.499] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.499] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.499] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.499] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:58.499] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.499] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.499] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.504] | : . ' , ; ` | all.equal() for future ... done
[08:07:58.504] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:58.504] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:58.504] | : . ' , ; ` List of future strategies:
[08:07:58.504] | : . ' , ; ` 1. sequential:
[08:07:58.504] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:58.504] | : . ' , ; `    - tweaked: FALSE
[08:07:58.504] | : . ' , ; `    - call: plan(sequential)
[08:07:58.505] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:58.505] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:58.506] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:58.506] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:58.506] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:58.506] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:58.507] | : . ' , ; ` | : New stack:
[08:07:58.507] | : . ' , ; ` | : List of 1
[08:07:58.507] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.507] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.507] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:58.507] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.507] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.507] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.507] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:58.507] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.507] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.507] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.507] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.511] | : . ' , ; ` | : Old stack:
[08:07:58.511] | : . ' , ; ` | : List of 1
[08:07:58.511] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.511] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.511] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:58.511] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.511] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.511] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.511] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:58.511] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.511] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.511] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.511] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.514] | : . ' , ; ` | : Identical
[08:07:58.514] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:58.514] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:58.514] | : . ' , ; ` | List of future strategies:
[08:07:58.514] | : . ' , ; ` | 1. sequential:
[08:07:58.514] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:58.514] | : . ' , ; ` |    - tweaked: FALSE
[08:07:58.514] | : . ' , ; ` |    - call: plan(sequential)
[08:07:58.514] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:58.515] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:58.515] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:58.515] | : . ' , SequentialFuture started (and completed)
[08:07:58.515] | : . ' , signalConditions() ...
[08:07:58.515] | : . ' , ; include = ‘immediateCondition’
[08:07:58.515] | : . ' , ; exclude = 
[08:07:58.515] | : . ' , ; resignal = FALSE
[08:07:58.515] | : . ' , ; Number of conditions: 6
[08:07:58.516] | : . ' , ;  int 6
[08:07:58.516] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.516] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.516] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.516] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.516] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.516] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.517] | : . ' , signalConditions() ... done
[08:07:58.517] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:58.517] | : . Launching futures ... done
[08:07:58.517] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:58.517] | : Using SequentialFutureBackend ... done
[08:07:58.517] | run() for ‘Future’ (<unnamed-4>) ... done
[08:07:58.517] future(..., label = NULL) ... done
SequentialFuture:
Label: <unnamed-4>
Expression:
{
    1
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: f8865cfcb9741f2e9285a8d7713260dd-4
Owner process: f8865cfcb9741f2e9285a8d7713260dd
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01474285 secs (started 2025-06-17 08:07:58.491608)
Worker process: f8865cfcb9741f2e9285a8d7713260dd
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: <unnamed-4>
Expression:
{
    1
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: f8865cfcb9741f2e9285a8d7713260dd-4
Owner process: f8865cfcb9741f2e9285a8d7713260dd
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01474285 secs (started 2025-06-17 08:07:58.491608)
Worker process: f8865cfcb9741f2e9285a8d7713260dd

*** FutureRegistry('rscript', 'remove') ...
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[08:07:58.519] future(..., label = NULL) ...
[08:07:58.519] | lazy: FALSE
[08:07:58.519] | stdout: TRUE
[08:07:58.519] | conditions: [n=1] ‘condition’
[08:07:58.519] | gc: FALSE
[08:07:58.519] | earlySignal: FALSE
[08:07:58.519] | getGlobalsAndPackages() ...
[08:07:58.519] | : Searching for globals ...
[08:07:58.522] | : . globals found: [1] ‘{’
[08:07:58.522] | : Searching for globals ... done
[08:07:58.522] | : Resolving globals: FALSE
[08:07:58.522] | : Search for packages associated with the globals ...
[08:07:58.522] | : . Packages associated with globals: [1] ‘base’
[08:07:58.523] | : . Packages: [1] ‘base’
[08:07:58.523] | : Search for packages associated with the globals ... done
[08:07:58.523] | : Packages after dropping 'base': [0] 
[08:07:58.523] | : globals: [0] 
[08:07:58.523] | : packages: [0] 
[08:07:58.523] | getGlobalsAndPackages() ... done
[08:07:58.523] | run() for ‘Future’ (<unnamed-5>) ...
[08:07:58.524] | : state: ‘created’
[08:07:58.524] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.524] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:58.524] | : Using SequentialFutureBackend ...
[08:07:58.524] | : . Number of futures since start: 4 (4 created, 8 launched, 7 finished)
[08:07:58.524] | : . Launching futures ...
[08:07:58.524] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:58.524] | : . ' , getFutureData() ...
[08:07:58.524] | : . ' , ; getFutureCore() ...
[08:07:58.524] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:58.525] | : . ' , ; getFutureCore() ... done
[08:07:58.525] | : . ' , ; getFutureCapture() ...
[08:07:58.525] | : . ' , ; getFutureCapture() ... done
[08:07:58.525] | : . ' , ; getFutureContext() ...
[08:07:58.525] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.525] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:58.525] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:58.525] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:58.525] | : . ' , ; getFutureContext() ... done
[08:07:58.526] | : . ' , getFutureData() ... done
[08:07:58.527] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.527] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:58.527] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:58.527] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:58.527] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:58.527] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:58.527] | : . ' , ; ` | New stack:
[08:07:58.528] | : . ' , ; ` | List of 1
[08:07:58.528] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.528] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.528] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:58.528] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.528] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.528] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.528] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:58.528] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.531] | : . ' , ; ` | Old stack:
[08:07:58.531] | : . ' , ; ` | List of 1
[08:07:58.531] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.531] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.531] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:58.531] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.531] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.531] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.531] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:58.531] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.531] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.531] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.531] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.534] | : . ' , ; ` | Not identical
[08:07:58.534] | : . ' , ; ` | all.equal() for future ...
[08:07:58.534] | : . ' , ; ` | : List of 2
[08:07:58.534] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.534] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.534] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:58.534] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.534] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.534] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.534] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:58.534] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.534] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.534] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:58.534] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.534] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.534] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.534] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:58.534] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.534] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.534] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.539] | : . ' , ; ` | all.equal() for future ... done
[08:07:58.539] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:58.539] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:58.539] | : . ' , ; ` List of future strategies:
[08:07:58.539] | : . ' , ; ` 1. sequential:
[08:07:58.539] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:58.539] | : . ' , ; `    - tweaked: FALSE
[08:07:58.539] | : . ' , ; `    - call: plan(sequential)
[08:07:58.540] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:58.540] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:58.541] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:58.541] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:58.542] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:58.542] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:58.542] | : . ' , ; ` | : New stack:
[08:07:58.542] | : . ' , ; ` | : List of 1
[08:07:58.542] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.542] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.542] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:58.542] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.542] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.542] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.542] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:58.542] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.542] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.542] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.542] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.545] | : . ' , ; ` | : Old stack:
[08:07:58.545] | : . ' , ; ` | : List of 1
[08:07:58.545] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.545] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.545] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:58.545] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.545] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.545] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.545] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:58.545] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.545] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.545] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.545] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.549] | : . ' , ; ` | : Identical
[08:07:58.549] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:58.549] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:58.549] | : . ' , ; ` | List of future strategies:
[08:07:58.549] | : . ' , ; ` | 1. sequential:
[08:07:58.549] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:58.549] | : . ' , ; ` |    - tweaked: FALSE
[08:07:58.549] | : . ' , ; ` |    - call: plan(sequential)
[08:07:58.550] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:58.550] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:58.550] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:58.550] | : . ' , SequentialFuture started (and completed)
[08:07:58.550] | : . ' , signalConditions() ...
[08:07:58.550] | : . ' , ; include = ‘immediateCondition’
[08:07:58.550] | : . ' , ; exclude = 
[08:07:58.550] | : . ' , ; resignal = FALSE
[08:07:58.551] | : . ' , ; Number of conditions: 6
[08:07:58.551] | : . ' , ;  int 6
[08:07:58.551] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.551] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.551] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.551] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.551] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.552] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.552] | : . ' , signalConditions() ... done
[08:07:58.552] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:58.552] | : . Launching futures ... done
[08:07:58.552] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:58.552] | : Using SequentialFutureBackend ... done
[08:07:58.552] | run() for ‘Future’ (<unnamed-5>) ... done
[08:07:58.552] future(..., label = NULL) ... done
SequentialFuture:
Label: <unnamed-5>
Expression:
{
    2
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: f8865cfcb9741f2e9285a8d7713260dd-5
Owner process: f8865cfcb9741f2e9285a8d7713260dd
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01543903 secs (started 2025-06-17 08:07:58.526149)
Worker process: f8865cfcb9741f2e9285a8d7713260dd
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: <unnamed-5>
Expression:
{
    2
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: f8865cfcb9741f2e9285a8d7713260dd-5
Owner process: f8865cfcb9741f2e9285a8d7713260dd
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01543903 secs (started 2025-06-17 08:07:58.526149)
Worker process: f8865cfcb9741f2e9285a8d7713260dd

*** FutureRegistry('rscript', 'collect-first') ...
[08:07:58.578] resolved() for SequentialFuture (<unnamed-5>) ...
[08:07:58.578] | state: ‘finished’
[08:07:58.578] | run: FALSE
[08:07:58.578] | result: ‘FutureResult’
[08:07:58.578] resolved() for SequentialFuture (<unnamed-5>) ... done
[08:07:58.578] value() for SequentialFuture (<unnamed-5>) ...
[08:07:58.578] | signalConditions() ...
[08:07:58.578] | : include = ‘immediateCondition’
[08:07:58.579] | : exclude = 
[08:07:58.579] | : resignal = FALSE
[08:07:58.579] | : Number of conditions: 6
[08:07:58.579] | :  int 6
[08:07:58.579] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.579] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.580] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.580] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.580] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.580] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.581] | signalConditions() ... done
[08:07:58.581] | check for misuse ...
[08:07:58.581] | check for misuse ... done
[08:07:58.581] value() for SequentialFuture (<unnamed-5>) ... done
list()
*** FutureRegistry('rscript', 'add') ...
[08:07:58.581] future(..., label = NULL) ...
[08:07:58.582] | lazy: FALSE
[08:07:58.582] | stdout: TRUE
[08:07:58.582] | conditions: [n=1] ‘condition’
[08:07:58.582] | gc: FALSE
[08:07:58.582] | earlySignal: FALSE
[08:07:58.582] | getGlobalsAndPackages() ...
[08:07:58.582] | : Searching for globals ...
[08:07:58.585] | : . globals found: [1] ‘{’
[08:07:58.585] | : Searching for globals ... done
[08:07:58.585] | : Resolving globals: FALSE
[08:07:58.585] | : Search for packages associated with the globals ...
[08:07:58.585] | : . Packages associated with globals: [1] ‘base’
[08:07:58.586] | : . Packages: [1] ‘base’
[08:07:58.586] | : Search for packages associated with the globals ... done
[08:07:58.586] | : Packages after dropping 'base': [0] 
[08:07:58.586] | : globals: [0] 
[08:07:58.586] | : packages: [0] 
[08:07:58.586] | getGlobalsAndPackages() ... done
[08:07:58.586] | run() for ‘Future’ (<unnamed-6>) ...
[08:07:58.586] | : state: ‘created’
[08:07:58.586] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.587] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:58.587] | : Using SequentialFutureBackend ...
[08:07:58.587] | : . Number of futures since start: 5 (5 created, 10 launched, 9 finished)
[08:07:58.587] | : . Launching futures ...
[08:07:58.587] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:58.587] | : . ' , getFutureData() ...
[08:07:58.587] | : . ' , ; getFutureCore() ...
[08:07:58.587] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:58.587] | : . ' , ; getFutureCore() ... done
[08:07:58.588] | : . ' , ; getFutureCapture() ...
[08:07:58.588] | : . ' , ; getFutureCapture() ... done
[08:07:58.588] | : . ' , ; getFutureContext() ...
[08:07:58.588] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.588] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:58.588] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:58.588] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:58.588] | : . ' , ; getFutureContext() ... done
[08:07:58.588] | : . ' , getFutureData() ... done
[08:07:58.590] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.590] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:58.590] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:58.590] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:58.590] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:58.590] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:58.590] | : . ' , ; ` | New stack:
[08:07:58.590] | : . ' , ; ` | List of 1
[08:07:58.590] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.590] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.590] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:58.590] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.590] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.590] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.590] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:58.590] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.593] | : . ' , ; ` | Old stack:
[08:07:58.593] | : . ' , ; ` | List of 1
[08:07:58.593] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.593] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.593] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:58.593] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.593] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.593] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.593] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:58.593] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.593] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.593] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.593] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.596] | : . ' , ; ` | Not identical
[08:07:58.596] | : . ' , ; ` | all.equal() for future ...
[08:07:58.596] | : . ' , ; ` | : List of 2
[08:07:58.596] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.596] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.596] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:58.596] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.596] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.596] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.596] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:58.596] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.596] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.596] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:58.596] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.596] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.596] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.596] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:58.596] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.596] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.596] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.602] | : . ' , ; ` | all.equal() for future ... done
[08:07:58.602] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:58.602] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:58.602] | : . ' , ; ` List of future strategies:
[08:07:58.602] | : . ' , ; ` 1. sequential:
[08:07:58.602] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:58.602] | : . ' , ; `    - tweaked: FALSE
[08:07:58.602] | : . ' , ; `    - call: plan(sequential)
[08:07:58.603] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:58.603] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:58.604] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:58.604] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:58.605] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:58.605] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:58.605] | : . ' , ; ` | : New stack:
[08:07:58.605] | : . ' , ; ` | : List of 1
[08:07:58.605] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.605] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.605] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:58.605] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.605] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.605] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.605] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:58.605] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.605] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.605] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.605] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.608] | : . ' , ; ` | : Old stack:
[08:07:58.608] | : . ' , ; ` | : List of 1
[08:07:58.608] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.608] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.608] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:58.608] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.608] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.608] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.608] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:58.608] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.608] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.608] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.608] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.611] | : . ' , ; ` | : Identical
[08:07:58.611] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:58.611] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:58.611] | : . ' , ; ` | List of future strategies:
[08:07:58.611] | : . ' , ; ` | 1. sequential:
[08:07:58.611] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:58.611] | : . ' , ; ` |    - tweaked: FALSE
[08:07:58.611] | : . ' , ; ` |    - call: plan(sequential)
[08:07:58.612] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:58.612] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:58.612] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:58.612] | : . ' , SequentialFuture started (and completed)
[08:07:58.612] | : . ' , signalConditions() ...
[08:07:58.612] | : . ' , ; include = ‘immediateCondition’
[08:07:58.612] | : . ' , ; exclude = 
[08:07:58.613] | : . ' , ; resignal = FALSE
[08:07:58.613] | : . ' , ; Number of conditions: 6
[08:07:58.613] | : . ' , ;  int 6
[08:07:58.613] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.613] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.613] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.613] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.614] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.614] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.614] | : . ' , signalConditions() ... done
[08:07:58.614] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:58.614] | : . Launching futures ... done
[08:07:58.614] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:58.614] | : Using SequentialFutureBackend ... done
[08:07:58.614] | run() for ‘Future’ (<unnamed-6>) ... done
[08:07:58.614] future(..., label = NULL) ... done
SequentialFuture:
Label: <unnamed-6>
Expression:
{
    2
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: f8865cfcb9741f2e9285a8d7713260dd-6
Owner process: f8865cfcb9741f2e9285a8d7713260dd
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01555204 secs (started 2025-06-17 08:07:58.589015)
Worker process: f8865cfcb9741f2e9285a8d7713260dd
*** FutureRegistry('rscript', 'reset') ...
*** FutureRegistry('rscript', 'list') ...
list()

> message("*** FutureRegistry() - exceptions ...")
*** FutureRegistry() - exceptions ...

> futures <- FutureRegistry(where = "test", action = "list")

> stopifnot(length(futures) == 0)

> f <- future(1)
[08:07:58.615] future(..., label = NULL) ...
[08:07:58.616] | lazy: FALSE
[08:07:58.616] | stdout: TRUE
[08:07:58.616] | conditions: [n=1] ‘condition’
[08:07:58.616] | gc: FALSE
[08:07:58.616] | earlySignal: FALSE
[08:07:58.616] | getGlobalsAndPackages() ...
[08:07:58.616] | : Searching for globals ...
[08:07:58.618] | : . globals found: [0] 
[08:07:58.618] | : Searching for globals ... done
[08:07:58.618] | : globals: [0] <none>
[08:07:58.618] | : packages: [0] <none>
[08:07:58.618] | getGlobalsAndPackages() ... done
[08:07:58.619] | run() for ‘Future’ (<unnamed-7>) ...
[08:07:58.619] | : state: ‘created’
[08:07:58.619] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.619] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:58.619] | : Using SequentialFutureBackend ...
[08:07:58.619] | : . Number of futures since start: 6 (6 created, 12 launched, 10 finished)
[08:07:58.619] | : . Launching futures ...
[08:07:58.619] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:58.619] | : . ' , getFutureData() ...
[08:07:58.620] | : . ' , ; getFutureCore() ...
[08:07:58.620] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:58.620] | : . ' , ; getFutureCore() ... done
[08:07:58.620] | : . ' , ; getFutureCapture() ...
[08:07:58.620] | : . ' , ; getFutureCapture() ... done
[08:07:58.620] | : . ' , ; getFutureContext() ...
[08:07:58.620] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.620] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:58.620] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:58.620] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:58.621] | : . ' , ; getFutureContext() ... done
[08:07:58.621] | : . ' , getFutureData() ... done
[08:07:58.622] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.622] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:58.622] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:58.622] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:58.622] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:58.623] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:58.623] | : . ' , ; ` | New stack:
[08:07:58.623] | : . ' , ; ` | List of 1
[08:07:58.623] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.623] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.623] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:58.623] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.623] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.623] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.623] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:58.623] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.625] | : . ' , ; ` | Old stack:
[08:07:58.625] | : . ' , ; ` | List of 1
[08:07:58.625] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.625] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.625] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:58.625] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.625] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.625] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.625] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:58.625] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.625] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.625] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.625] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.628] | : . ' , ; ` | Not identical
[08:07:58.628] | : . ' , ; ` | all.equal() for future ...
[08:07:58.628] | : . ' , ; ` | : List of 2
[08:07:58.628] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.628] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.628] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:58.628] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.628] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.628] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.628] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:58.628] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.628] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.628] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:58.628] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.628] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.628] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.628] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:58.628] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.628] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.628] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.633] | : . ' , ; ` | all.equal() for future ... done
[08:07:58.634] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:58.634] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:58.634] | : . ' , ; ` List of future strategies:
[08:07:58.634] | : . ' , ; ` 1. sequential:
[08:07:58.634] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:58.634] | : . ' , ; `    - tweaked: FALSE
[08:07:58.634] | : . ' , ; `    - call: plan(sequential)
[08:07:58.634] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:58.634] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:58.637] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:58.637] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:58.637] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:58.637] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:58.637] | : . ' , ; ` | : New stack:
[08:07:58.637] | : . ' , ; ` | : List of 1
[08:07:58.637] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.637] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.637] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:58.637] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.637] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.637] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.637] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:58.637] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.637] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.637] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.637] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.640] | : . ' , ; ` | : Old stack:
[08:07:58.640] | : . ' , ; ` | : List of 1
[08:07:58.640] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.640] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.640] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:58.640] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.640] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.640] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.640] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:58.640] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x561ac590bd88> 
[08:07:58.640] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.640] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.640] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:58.644] | : . ' , ; ` | : Identical
[08:07:58.644] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:58.644] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:58.644] | : . ' , ; ` | List of future strategies:
[08:07:58.644] | : . ' , ; ` | 1. sequential:
[08:07:58.644] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:58.644] | : . ' , ; ` |    - tweaked: FALSE
[08:07:58.644] | : . ' , ; ` |    - call: plan(sequential)
[08:07:58.644] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:58.644] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:58.644] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:58.645] | : . ' , SequentialFuture started (and completed)
[08:07:58.645] | : . ' , signalConditions() ...
[08:07:58.645] | : . ' , ; include = ‘immediateCondition’
[08:07:58.645] | : . ' , ; exclude = 
[08:07:58.645] | : . ' , ; resignal = FALSE
[08:07:58.645] | : . ' , ; Number of conditions: 6
[08:07:58.645] | : . ' , ;  int 6
[08:07:58.646] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.646] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.646] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.646] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.646] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.646] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:58.646] | : . ' , signalConditions() ... done
[08:07:58.646] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:58.647] | : . Launching futures ... done
[08:07:58.647] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:58.647] | : Using SequentialFutureBackend ... done
[08:07:58.647] | run() for ‘Future’ (<unnamed-7>) ... done
[08:07:58.647] future(..., label = NULL) ... done

> FutureRegistry(where = "test", action = "add", future = f)
[[1]]
SequentialFuture:
Label: <unnamed-7>
Expression:
[1] 1
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: f8865cfcb9741f2e9285a8d7713260dd-7
Owner process: f8865cfcb9741f2e9285a8d7713260dd
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01562548 secs (started 2025-06-17 08:07:58.621325)
Worker process: f8865cfcb9741f2e9285a8d7713260dd


> futures <- FutureRegistry(where = "test", action = "list")

> stopifnot(length(futures) == 1)

> res <- tryCatch(FutureRegistry(where = "test", action = "add", 
+     future = f), error = identity)

> stopifnot(inherits(res, "error"))

> futures <- FutureRegistry(where = "test", action = "list")

> stopifnot(length(futures) == 1)

> FutureRegistry(where = "test", action = "remove", 
+     future = f)
list()

> futures <- FutureRegistry(where = "test", action = "list")

> stopifnot(length(futures) == 0)

> res <- tryCatch(FutureRegistry(where = "test", action = "remove", 
+     future = f), error = identity)

> stopifnot(inherits(res, "error"))

> futures <- FutureRegistry(where = "test", action = "list")

> stopifnot(length(futures) == 0)

> FutureRegistry(where = "test", action = "reset")
list()

> futures <- FutureRegistry(where = "test", action = "list")

> stopifnot(length(futures) == 0)

> res <- tryCatch(FutureRegistry(where = "test", action = "<unknown>"), 
+     error = identity)

> stopifnot(inherits(res, "error"))

> message("*** FutureRegistry() - exceptions ... DONE")
*** FutureRegistry() - exceptions ... DONE

> message("*** FutureRegistry() ... DONE")
*** FutureRegistry() ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.4s, sys.self=0.004s, elapsed=0.4s, user.child=0.001s, sys.child=0.005s
Test ‘FutureRegistry’ ... success
> 
