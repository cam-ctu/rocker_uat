
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-futureAssign_OP_with_listenv.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("futureAssign_OP_with_listenv")
Test ‘futureAssign_OP_with_listenv’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-futureAssign_OP_with_listenv.R’

> library(future)
[08:07:43.289] Option 'future.startup.script': TRUE
[08:07:43.289] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:07:43.289] Future startup scripts found: <none>

> library(listenv)

> message("*** %<-% to listenv ...")
*** %<-% to listenv ...

> z <- listenv()

> stopifnot(length(names(z)) == 0)

> message("*** %<-% to listenv: Assign by index")
*** %<-% to listenv: Assign by index

> z[[1]] %<-% {
+     2
+ } %lazy% TRUE
[08:07:43.294] future(..., label = NULL) ...
[08:07:43.294] | lazy: TRUE
[08:07:43.294] | stdout: TRUE
[08:07:43.294] | conditions: [n=1] ‘condition’
[08:07:43.295] | gc: FALSE
[08:07:43.295] | earlySignal: FALSE
[08:07:43.295] | getGlobalsAndPackages() ...
[08:07:43.295] | : Searching for globals ...
[08:07:43.307] | : . globals found: [1] ‘{’
[08:07:43.307] | : Searching for globals ... done
[08:07:43.307] | : Resolving globals: FALSE
[08:07:43.308] | : Search for packages associated with the globals ...
[08:07:43.308] | : . Packages associated with globals: [1] ‘base’
[08:07:43.308] | : . Packages: [1] ‘base’
[08:07:43.308] | : Search for packages associated with the globals ... done
[08:07:43.309] | : Packages after dropping 'base': [0] 
[08:07:43.309] | : globals: [0] 
[08:07:43.309] | : packages: [0] 
[08:07:43.309] | getGlobalsAndPackages() ... done
[08:07:43.309] future(..., label = NULL) ... done

> stopifnot(length(z) == 1)

> stopifnot(length(names(z)) == 0)

> z[[1]] %<-% {
+     2
+ } %lazy% TRUE
[08:07:43.310] future(..., label = NULL) ...
[08:07:43.310] | lazy: TRUE
[08:07:43.310] | stdout: TRUE
[08:07:43.310] | conditions: [n=1] ‘condition’
[08:07:43.310] | gc: FALSE
[08:07:43.311] | earlySignal: FALSE
[08:07:43.311] | getGlobalsAndPackages() ...
[08:07:43.311] | : Searching for globals ...
[08:07:43.314] | : . globals found: [1] ‘{’
[08:07:43.314] | : Searching for globals ... done
[08:07:43.314] | : Resolving globals: FALSE
[08:07:43.314] | : Search for packages associated with the globals ...
[08:07:43.314] | : . Packages associated with globals: [1] ‘base’
[08:07:43.315] | : . Packages: [1] ‘base’
[08:07:43.315] | : Search for packages associated with the globals ... done
[08:07:43.315] | : Packages after dropping 'base': [0] 
[08:07:43.315] | : globals: [0] 
[08:07:43.315] | : packages: [0] 
[08:07:43.315] | getGlobalsAndPackages() ... done
[08:07:43.315] future(..., label = NULL) ... done

> stopifnot(length(z) == 1)

> stopifnot(length(names(z)) == 0)

> z[[4]] %<-% {
+     "async!"
+ } %lazy% TRUE
[08:07:43.316] future(..., label = NULL) ...
[08:07:43.316] | lazy: TRUE
[08:07:43.316] | stdout: TRUE
[08:07:43.316] | conditions: [n=1] ‘condition’
[08:07:43.316] | gc: FALSE
[08:07:43.317] | earlySignal: FALSE
[08:07:43.317] | getGlobalsAndPackages() ...
[08:07:43.317] | : Searching for globals ...
[08:07:43.320] | : . globals found: [1] ‘{’
[08:07:43.320] | : Searching for globals ... done
[08:07:43.320] | : Resolving globals: FALSE
[08:07:43.320] | : Search for packages associated with the globals ...
[08:07:43.320] | : . Packages associated with globals: [1] ‘base’
[08:07:43.320] | : . Packages: [1] ‘base’
[08:07:43.321] | : Search for packages associated with the globals ... done
[08:07:43.321] | : Packages after dropping 'base': [0] 
[08:07:43.321] | : globals: [0] 
[08:07:43.321] | : packages: [0] 
[08:07:43.321] | getGlobalsAndPackages() ... done
[08:07:43.321] future(..., label = NULL) ... done

> stopifnot(length(z) == 4)

> stopifnot(length(names(z)) == 0)

> message("*** %<-% to listenv: Update names")
*** %<-% to listenv: Update names

> names(z) <- c("A", "B", "C", "D")

> stopifnot(identical(names(z), c("A", "B", "C", "D")))

> message("*** %<-% to listenv: Assign by name (existing)")
*** %<-% to listenv: Assign by name (existing)

> z$B %<-% {
+     TRUE
+ } %lazy% TRUE
[08:07:43.322] future(..., label = NULL) ...
[08:07:43.322] | lazy: TRUE
[08:07:43.322] | stdout: TRUE
[08:07:43.323] | conditions: [n=1] ‘condition’
[08:07:43.323] | gc: FALSE
[08:07:43.323] | earlySignal: FALSE
[08:07:43.323] | getGlobalsAndPackages() ...
[08:07:43.323] | : Searching for globals ...
[08:07:43.326] | : . globals found: [1] ‘{’
[08:07:43.326] | : Searching for globals ... done
[08:07:43.326] | : Resolving globals: FALSE
[08:07:43.326] | : Search for packages associated with the globals ...
[08:07:43.326] | : . Packages associated with globals: [1] ‘base’
[08:07:43.327] | : . Packages: [1] ‘base’
[08:07:43.327] | : Search for packages associated with the globals ... done
[08:07:43.327] | : Packages after dropping 'base': [0] 
[08:07:43.327] | : globals: [0] 
[08:07:43.327] | : packages: [0] 
[08:07:43.327] | getGlobalsAndPackages() ... done
[08:07:43.327] future(..., label = NULL) ... done

> stopifnot(length(z) == 4)

> stopifnot(identical(names(z), c("A", "B", "C", "D")))

> y <- as.list(z)
[08:07:43.328] value() for Future (<unnamed-2>) ...
[08:07:43.329] | run() for ‘Future’ (<unnamed-2>) ...
[08:07:43.329] | : state: ‘created’
[08:07:43.329] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.329] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:43.329] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.329] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.329] | : . '  - attr(*, "init")= logi TRUE
[08:07:43.329] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.329] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.329] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.329] | : . '  - attr(*, "call")= language plan(sequential)
[08:07:43.335] | : . ' init: TRUE
[08:07:43.336] | : . ' makeFutureBackend(<sequential>) ...
[08:07:43.336] | : . ' , Backend function: <‘NULL’>
[08:07:43.336] | : . ' , Evaluator tweak arguments: [n=0]
[08:07:43.336] | : . ' ,  list()
[08:07:43.336] | : . ' , Evaluator formal arguments: [n=2]
[08:07:43.336] | : . ' ,  list()
[08:07:43.337] | : . ' , Backend factory arguments: [n=2]
[08:07:43.337] | : . ' , Dotted pair list of 2
[08:07:43.337] | : . ' ,  $ gc         : logi FALSE
[08:07:43.337] | : . ' ,  $ earlySignal: logi FALSE
[08:07:43.338] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:43.338] | : . ' makeFutureBackend(<sequential>) ... done
[08:07:43.338] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:43.338] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.338] | : Using SequentialFutureBackend ...
[08:07:43.338] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:07:43.339] | : . Launching futures ...
[08:07:43.339] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:43.339] | : . ' , getFutureData() ...
[08:07:43.339] | : . ' , ; getFutureCore() ...
[08:07:43.339] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:43.340] | : . ' , ; getFutureCore() ... done
[08:07:43.340] | : . ' , ; getFutureCapture() ...
[08:07:43.340] | : . ' , ; getFutureCapture() ... done
[08:07:43.340] | : . ' , ; getFutureContext() ...
[08:07:43.340] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.340] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:43.340] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.341] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:43.341] | : . ' , ; getFutureContext() ... done
[08:07:43.341] | : . ' , getFutureData() ... done
[08:07:43.344] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.344] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:43.344] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.344] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.344] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:43.345] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:43.345] | : . ' , ; ` | New stack:
[08:07:43.345] | : . ' , ; ` | List of 1
[08:07:43.345] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.345] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.345] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:43.345] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.345] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.345] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.345] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:43.345] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.348] | : . ' , ; ` | Old stack:
[08:07:43.348] | : . ' , ; ` | List of 1
[08:07:43.348] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.348] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.348] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:43.348] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.348] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.348] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.348] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:43.348] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.348] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.348] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.348] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.351] | : . ' , ; ` | Not identical
[08:07:43.351] | : . ' , ; ` | all.equal() for future ...
[08:07:43.351] | : . ' , ; ` | : List of 2
[08:07:43.351] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.351] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.351] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:43.351] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.351] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.351] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.351] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:43.351] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.351] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.351] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.351] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.351] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.351] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.351] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.351] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.351] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.351] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.357] | : . ' , ; ` | all.equal() for future ... done
[08:07:43.357] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:43.357] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:43.357] | : . ' , ; ` List of future strategies:
[08:07:43.357] | : . ' , ; ` 1. sequential:
[08:07:43.357] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:43.357] | : . ' , ; `    - tweaked: FALSE
[08:07:43.357] | : . ' , ; `    - call: plan(sequential)
[08:07:43.360] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:43.360] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.362] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.363] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.363] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:43.363] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:43.363] | : . ' , ; ` | : New stack:
[08:07:43.363] | : . ' , ; ` | : List of 1
[08:07:43.363] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.363] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.363] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.363] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.363] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.363] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.363] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.363] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.363] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.363] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.363] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.366] | : . ' , ; ` | : Old stack:
[08:07:43.367] | : . ' , ; ` | : List of 1
[08:07:43.367] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.367] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.367] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.367] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.367] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.367] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.367] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.367] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.367] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.367] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.367] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.370] | : . ' , ; ` | : Identical
[08:07:43.370] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:43.370] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:43.370] | : . ' , ; ` | List of future strategies:
[08:07:43.370] | : . ' , ; ` | 1. sequential:
[08:07:43.370] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:43.370] | : . ' , ; ` |    - tweaked: FALSE
[08:07:43.370] | : . ' , ; ` |    - call: plan(sequential)
[08:07:43.371] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:43.371] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.371] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.374] | : . ' , SequentialFuture started (and completed)
[08:07:43.375] | : . ' , signalConditions() ...
[08:07:43.375] | : . ' , ; include = ‘immediateCondition’
[08:07:43.375] | : . ' , ; exclude = 
[08:07:43.375] | : . ' , ; resignal = FALSE
[08:07:43.375] | : . ' , ; Number of conditions: 6
[08:07:43.375] | : . ' , ;  int 6
[08:07:43.376] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.376] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.376] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.376] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.376] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.376] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.376] | : . ' , signalConditions() ... done
[08:07:43.376] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:43.377] | : . Launching futures ... done
[08:07:43.377] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:43.377] | : Using SequentialFutureBackend ... done
[08:07:43.377] | run() for ‘Future’ (<unnamed-2>) ... done
[08:07:43.377] | signalConditions() ...
[08:07:43.377] | : include = ‘immediateCondition’
[08:07:43.377] | : exclude = 
[08:07:43.377] | : resignal = FALSE
[08:07:43.377] | : Number of conditions: 6
[08:07:43.378] | :  int 6
[08:07:43.378] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.378] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.378] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.378] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.378] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.379] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.379] | signalConditions() ... done
[08:07:43.379] | relay stdout ...
[08:07:43.379] | relay stdout ... done
[08:07:43.379] | check for misuse ...
[08:07:43.379] | check for misuse ... done
[08:07:43.379] | relay conditions ...
[08:07:43.379] | : Future state: ‘finished’
[08:07:43.379] | : signalConditions() ...
[08:07:43.380] | : . include = ‘condition’
[08:07:43.380] | : . exclude = ‘immediateCondition’
[08:07:43.380] | : . resignal = TRUE
[08:07:43.380] | : . Number of conditions: 6
[08:07:43.380] | : .  int 6
[08:07:43.381] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.381] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.342] | : . ' , attachPackages() ...
[08:07:43.381] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.381] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.343] | : . ' , ; packages: [n=1] ‘future’
[08:07:43.381] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.381] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.343] | : . ' , attachPackages() ... done
[08:07:43.381] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.381] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.343] | : . ' , attachPackages() ...
[08:07:43.382] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.382] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.343] | : . ' , ; packages: [n=0] 
[08:07:43.382] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.382] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.343] | : . ' , attachPackages() ... done
[08:07:43.385] | : signalConditions() ... done
[08:07:43.385] | relay conditions ... done
[08:07:43.385] value() for Future (<unnamed-2>) ... done
[08:07:43.385] value() for Future (<unnamed-3>) ...
[08:07:43.385] | run() for ‘Future’ (<unnamed-3>) ...
[08:07:43.385] | : state: ‘created’
[08:07:43.385] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.385] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.386] | : Using SequentialFutureBackend ...
[08:07:43.386] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:07:43.386] | : . Launching futures ...
[08:07:43.386] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:43.386] | : . ' , getFutureData() ...
[08:07:43.386] | : . ' , ; getFutureCore() ...
[08:07:43.386] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:43.386] | : . ' , ; getFutureCore() ... done
[08:07:43.386] | : . ' , ; getFutureCapture() ...
[08:07:43.387] | : . ' , ; getFutureCapture() ... done
[08:07:43.387] | : . ' , ; getFutureContext() ...
[08:07:43.387] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.387] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:43.387] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.387] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:43.387] | : . ' , ; getFutureContext() ... done
[08:07:43.387] | : . ' , getFutureData() ... done
[08:07:43.389] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.389] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:43.389] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.389] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.390] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:43.390] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:43.390] | : . ' , ; ` | New stack:
[08:07:43.390] | : . ' , ; ` | List of 1
[08:07:43.390] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.390] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.390] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:43.390] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.390] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.390] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.390] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:43.390] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.393] | : . ' , ; ` | Old stack:
[08:07:43.393] | : . ' , ; ` | List of 1
[08:07:43.393] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.393] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.393] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:43.393] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.393] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.393] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.393] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:43.393] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.393] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.393] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.393] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.396] | : . ' , ; ` | Not identical
[08:07:43.396] | : . ' , ; ` | all.equal() for future ...
[08:07:43.396] | : . ' , ; ` | : List of 2
[08:07:43.396] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.396] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.396] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:43.396] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.396] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.396] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.396] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:43.396] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.396] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.396] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.396] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.396] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.396] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.396] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.396] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.396] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.396] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.402] | : . ' , ; ` | all.equal() for future ... done
[08:07:43.402] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:43.402] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:43.402] | : . ' , ; ` List of future strategies:
[08:07:43.402] | : . ' , ; ` 1. sequential:
[08:07:43.402] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:43.402] | : . ' , ; `    - tweaked: FALSE
[08:07:43.402] | : . ' , ; `    - call: plan(sequential)
[08:07:43.402] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:43.403] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.404] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.404] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.405] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:43.405] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:43.405] | : . ' , ; ` | : New stack:
[08:07:43.405] | : . ' , ; ` | : List of 1
[08:07:43.405] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.405] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.405] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.405] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.405] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.405] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.405] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.405] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.405] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.405] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.405] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.410] | : . ' , ; ` | : Old stack:
[08:07:43.410] | : . ' , ; ` | : List of 1
[08:07:43.410] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.410] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.410] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.410] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.410] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.410] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.410] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.410] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.410] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.410] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.410] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.413] | : . ' , ; ` | : Identical
[08:07:43.413] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:43.413] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:43.414] | : . ' , ; ` | List of future strategies:
[08:07:43.414] | : . ' , ; ` | 1. sequential:
[08:07:43.414] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:43.414] | : . ' , ; ` |    - tweaked: FALSE
[08:07:43.414] | : . ' , ; ` |    - call: plan(sequential)
[08:07:43.414] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:43.414] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.414] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.415] | : . ' , SequentialFuture started (and completed)
[08:07:43.415] | : . ' , signalConditions() ...
[08:07:43.415] | : . ' , ; include = ‘immediateCondition’
[08:07:43.415] | : . ' , ; exclude = 
[08:07:43.415] | : . ' , ; resignal = FALSE
[08:07:43.415] | : . ' , ; Number of conditions: 6
[08:07:43.415] | : . ' , ;  int 6
[08:07:43.416] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.416] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.416] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.416] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.416] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.416] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.416] | : . ' , signalConditions() ... done
[08:07:43.416] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:43.417] | : . Launching futures ... done
[08:07:43.417] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:43.417] | : Using SequentialFutureBackend ... done
[08:07:43.417] | run() for ‘Future’ (<unnamed-3>) ... done
[08:07:43.417] | signalConditions() ...
[08:07:43.417] | : include = ‘immediateCondition’
[08:07:43.417] | : exclude = 
[08:07:43.417] | : resignal = FALSE
[08:07:43.417] | : Number of conditions: 6
[08:07:43.417] | :  int 6
[08:07:43.418] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.418] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.418] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.418] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.418] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.418] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.419] | signalConditions() ... done
[08:07:43.419] | relay stdout ...
[08:07:43.419] | relay stdout ... done
[08:07:43.419] | check for misuse ...
[08:07:43.419] | check for misuse ... done
[08:07:43.419] | relay conditions ...
[08:07:43.419] | : Future state: ‘finished’
[08:07:43.419] | : signalConditions() ...
[08:07:43.419] | : . include = ‘condition’
[08:07:43.419] | : . exclude = ‘immediateCondition’
[08:07:43.420] | : . resignal = TRUE
[08:07:43.420] | : . Number of conditions: 6
[08:07:43.420] | : .  int 6
[08:07:43.420] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.420] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.388] | : . ' , attachPackages() ...
[08:07:43.420] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.421] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.388] | : . ' , ; packages: [n=1] ‘future’
[08:07:43.421] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.421] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.388] | : . ' , attachPackages() ... done
[08:07:43.421] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.421] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.388] | : . ' , attachPackages() ...
[08:07:43.421] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.421] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.388] | : . ' , ; packages: [n=0] 
[08:07:43.421] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.422] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.389] | : . ' , attachPackages() ... done
[08:07:43.422] | : signalConditions() ... done
[08:07:43.422] | relay conditions ... done
[08:07:43.422] value() for Future (<unnamed-3>) ... done

> str(y)
List of 4
 $ A: num 2
 $ B: NULL
 $ C: NULL
 $ D: chr "async!"

> stopifnot(length(y) == 4)

> stopifnot(identical(names(y), c("A", "B", "C", "D")))

> message("*** %<-% to listenv: Asserting no name clashes among futures")
*** %<-% to listenv: Asserting no name clashes among futures

> u <- listenv()

> u$a %<-% {
+     1
+ } %lazy% TRUE
[08:07:43.424] future(..., label = NULL) ...
[08:07:43.424] | lazy: TRUE
[08:07:43.424] | stdout: TRUE
[08:07:43.424] | conditions: [n=1] ‘condition’
[08:07:43.424] | gc: FALSE
[08:07:43.424] | earlySignal: FALSE
[08:07:43.425] | getGlobalsAndPackages() ...
[08:07:43.425] | : Searching for globals ...
[08:07:43.429] | : . globals found: [1] ‘{’
[08:07:43.429] | : Searching for globals ... done
[08:07:43.429] | : Resolving globals: FALSE
[08:07:43.430] | : Search for packages associated with the globals ...
[08:07:43.430] | : . Packages associated with globals: [1] ‘base’
[08:07:43.430] | : . Packages: [1] ‘base’
[08:07:43.430] | : Search for packages associated with the globals ... done
[08:07:43.430] | : Packages after dropping 'base': [0] 
[08:07:43.430] | : globals: [0] 
[08:07:43.430] | : packages: [0] 
[08:07:43.430] | getGlobalsAndPackages() ... done
[08:07:43.431] future(..., label = NULL) ... done

> stopifnot(identical(names(u), "a"))

> fu <- futureOf(u$a)

> v <- listenv()

> v$a %<-% {
+     2
+ } %lazy% TRUE
[08:07:43.432] future(..., label = NULL) ...
[08:07:43.432] | lazy: TRUE
[08:07:43.432] | stdout: TRUE
[08:07:43.432] | conditions: [n=1] ‘condition’
[08:07:43.432] | gc: FALSE
[08:07:43.432] | earlySignal: FALSE
[08:07:43.432] | getGlobalsAndPackages() ...
[08:07:43.432] | : Searching for globals ...
[08:07:43.435] | : . globals found: [1] ‘{’
[08:07:43.435] | : Searching for globals ... done
[08:07:43.436] | : Resolving globals: FALSE
[08:07:43.436] | : Search for packages associated with the globals ...
[08:07:43.436] | : . Packages associated with globals: [1] ‘base’
[08:07:43.436] | : . Packages: [1] ‘base’
[08:07:43.436] | : Search for packages associated with the globals ... done
[08:07:43.436] | : Packages after dropping 'base': [0] 
[08:07:43.436] | : globals: [0] 
[08:07:43.436] | : packages: [0] 
[08:07:43.437] | getGlobalsAndPackages() ... done
[08:07:43.437] future(..., label = NULL) ... done

> stopifnot(identical(names(v), "a"))

> fv <- futureOf(v$a)

> stopifnot(!identical(fu, fv))

> fu <- futureOf(u$a)

> stopifnot(!identical(fu, fv))

> stopifnot(identical(u$a, 1))
[08:07:43.438] value() for Future (<unnamed-5>) ...
[08:07:43.438] | run() for ‘Future’ (<unnamed-5>) ...
[08:07:43.438] | : state: ‘created’
[08:07:43.438] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.438] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.438] | : Using SequentialFutureBackend ...
[08:07:43.438] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:07:43.438] | : . Launching futures ...
[08:07:43.439] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:43.439] | : . ' , getFutureData() ...
[08:07:43.439] | : . ' , ; getFutureCore() ...
[08:07:43.439] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:43.439] | : . ' , ; getFutureCore() ... done
[08:07:43.439] | : . ' , ; getFutureCapture() ...
[08:07:43.439] | : . ' , ; getFutureCapture() ... done
[08:07:43.439] | : . ' , ; getFutureContext() ...
[08:07:43.439] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.440] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:43.440] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.440] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:43.440] | : . ' , ; getFutureContext() ... done
[08:07:43.440] | : . ' , getFutureData() ... done
[08:07:43.441] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.441] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:43.442] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.442] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.442] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:43.442] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:43.442] | : . ' , ; ` | New stack:
[08:07:43.442] | : . ' , ; ` | List of 1
[08:07:43.442] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.442] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.442] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:43.442] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.442] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.442] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.442] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:43.442] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.445] | : . ' , ; ` | Old stack:
[08:07:43.445] | : . ' , ; ` | List of 1
[08:07:43.445] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.445] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.445] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:43.445] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.445] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.445] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.445] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:43.445] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.445] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.445] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.445] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.449] | : . ' , ; ` | Not identical
[08:07:43.449] | : . ' , ; ` | all.equal() for future ...
[08:07:43.449] | : . ' , ; ` | : List of 2
[08:07:43.449] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.449] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.449] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:43.449] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.449] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.449] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.449] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:43.449] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.449] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.449] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.449] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.449] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.449] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.449] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.449] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.449] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.449] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.454] | : . ' , ; ` | all.equal() for future ... done
[08:07:43.455] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:43.455] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:43.455] | : . ' , ; ` List of future strategies:
[08:07:43.455] | : . ' , ; ` 1. sequential:
[08:07:43.455] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:43.455] | : . ' , ; `    - tweaked: FALSE
[08:07:43.455] | : . ' , ; `    - call: plan(sequential)
[08:07:43.455] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:43.455] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.457] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.457] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.457] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:43.457] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:43.457] | : . ' , ; ` | : New stack:
[08:07:43.458] | : . ' , ; ` | : List of 1
[08:07:43.458] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.458] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.458] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.458] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.458] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.458] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.458] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.458] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.458] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.458] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.458] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.463] | : . ' , ; ` | : Old stack:
[08:07:43.464] | : . ' , ; ` | : List of 1
[08:07:43.464] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.464] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.464] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.464] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.464] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.464] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.464] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.464] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.464] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.464] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.464] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.468] | : . ' , ; ` | : Identical
[08:07:43.468] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:43.468] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:43.468] | : . ' , ; ` | List of future strategies:
[08:07:43.468] | : . ' , ; ` | 1. sequential:
[08:07:43.468] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:43.468] | : . ' , ; ` |    - tweaked: FALSE
[08:07:43.468] | : . ' , ; ` |    - call: plan(sequential)
[08:07:43.469] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:43.469] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.469] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.470] | : . ' , SequentialFuture started (and completed)
[08:07:43.470] | : . ' , signalConditions() ...
[08:07:43.470] | : . ' , ; include = ‘immediateCondition’
[08:07:43.470] | : . ' , ; exclude = 
[08:07:43.470] | : . ' , ; resignal = FALSE
[08:07:43.470] | : . ' , ; Number of conditions: 6
[08:07:43.470] | : . ' , ;  int 6
[08:07:43.471] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.471] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.471] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.471] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.471] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.471] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.472] | : . ' , signalConditions() ... done
[08:07:43.472] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:43.472] | : . Launching futures ... done
[08:07:43.472] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:43.472] | : Using SequentialFutureBackend ... done
[08:07:43.472] | run() for ‘Future’ (<unnamed-5>) ... done
[08:07:43.472] | signalConditions() ...
[08:07:43.474] | : include = ‘immediateCondition’
[08:07:43.474] | : exclude = 
[08:07:43.474] | : resignal = FALSE
[08:07:43.474] | : Number of conditions: 6
[08:07:43.475] | :  int 6
[08:07:43.475] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.475] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.475] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.475] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.476] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.476] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.476] | signalConditions() ... done
[08:07:43.476] | relay stdout ...
[08:07:43.476] | relay stdout ... done
[08:07:43.476] | check for misuse ...
[08:07:43.476] | check for misuse ... done
[08:07:43.476] | relay conditions ...
[08:07:43.476] | : Future state: ‘finished’
[08:07:43.477] | : signalConditions() ...
[08:07:43.477] | : . include = ‘condition’
[08:07:43.477] | : . exclude = ‘immediateCondition’
[08:07:43.477] | : . resignal = TRUE
[08:07:43.477] | : . Number of conditions: 6
[08:07:43.477] | : .  int 6
[08:07:43.478] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.478] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.440] | : . ' , attachPackages() ...
[08:07:43.478] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.478] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.440] | : . ' , ; packages: [n=1] ‘future’
[08:07:43.478] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.478] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.441] | : . ' , attachPackages() ... done
[08:07:43.478] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.478] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.441] | : . ' , attachPackages() ...
[08:07:43.479] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.479] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.441] | : . ' , ; packages: [n=0] 
[08:07:43.479] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.479] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.441] | : . ' , attachPackages() ... done
[08:07:43.479] | : signalConditions() ... done
[08:07:43.479] | relay conditions ... done
[08:07:43.479] value() for Future (<unnamed-5>) ... done

> stopifnot(identical(v$a, 2))
[08:07:43.480] value() for Future (<unnamed-6>) ...
[08:07:43.480] | run() for ‘Future’ (<unnamed-6>) ...
[08:07:43.480] | : state: ‘created’
[08:07:43.480] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.480] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.480] | : Using SequentialFutureBackend ...
[08:07:43.480] | : . Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:07:43.480] | : . Launching futures ...
[08:07:43.481] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:43.481] | : . ' , getFutureData() ...
[08:07:43.481] | : . ' , ; getFutureCore() ...
[08:07:43.481] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:43.481] | : . ' , ; getFutureCore() ... done
[08:07:43.481] | : . ' , ; getFutureCapture() ...
[08:07:43.481] | : . ' , ; getFutureCapture() ... done
[08:07:43.481] | : . ' , ; getFutureContext() ...
[08:07:43.482] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.482] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:43.482] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.482] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:43.482] | : . ' , ; getFutureContext() ... done
[08:07:43.482] | : . ' , getFutureData() ... done
[08:07:43.484] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.484] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:43.484] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.484] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.484] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:43.484] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:43.485] | : . ' , ; ` | New stack:
[08:07:43.485] | : . ' , ; ` | List of 1
[08:07:43.485] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.485] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.485] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:43.485] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.485] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.485] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.485] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:43.485] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.488] | : . ' , ; ` | Old stack:
[08:07:43.488] | : . ' , ; ` | List of 1
[08:07:43.488] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.488] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.488] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:43.488] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.488] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.488] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.488] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:43.488] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.488] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.488] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.488] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.491] | : . ' , ; ` | Not identical
[08:07:43.491] | : . ' , ; ` | all.equal() for future ...
[08:07:43.491] | : . ' , ; ` | : List of 2
[08:07:43.491] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.491] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.491] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:43.491] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.491] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.491] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.491] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:43.491] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.491] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.491] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.491] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.491] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.491] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.491] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.491] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.491] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.491] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.498] | : . ' , ; ` | all.equal() for future ... done
[08:07:43.499] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:43.499] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:43.499] | : . ' , ; ` List of future strategies:
[08:07:43.499] | : . ' , ; ` 1. sequential:
[08:07:43.499] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:43.499] | : . ' , ; `    - tweaked: FALSE
[08:07:43.499] | : . ' , ; `    - call: plan(sequential)
[08:07:43.499] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:43.499] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.501] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.501] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.501] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:43.501] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:43.502] | : . ' , ; ` | : New stack:
[08:07:43.502] | : . ' , ; ` | : List of 1
[08:07:43.502] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.502] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.502] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.502] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.502] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.502] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.502] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.502] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.502] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.502] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.502] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.505] | : . ' , ; ` | : Old stack:
[08:07:43.505] | : . ' , ; ` | : List of 1
[08:07:43.505] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.505] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.505] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.505] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.505] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.505] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.505] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.505] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.505] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.505] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.505] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.508] | : . ' , ; ` | : Identical
[08:07:43.508] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:43.509] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:43.509] | : . ' , ; ` | List of future strategies:
[08:07:43.509] | : . ' , ; ` | 1. sequential:
[08:07:43.509] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:43.509] | : . ' , ; ` |    - tweaked: FALSE
[08:07:43.509] | : . ' , ; ` |    - call: plan(sequential)
[08:07:43.509] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:43.509] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.509] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.510] | : . ' , SequentialFuture started (and completed)
[08:07:43.510] | : . ' , signalConditions() ...
[08:07:43.510] | : . ' , ; include = ‘immediateCondition’
[08:07:43.510] | : . ' , ; exclude = 
[08:07:43.510] | : . ' , ; resignal = FALSE
[08:07:43.510] | : . ' , ; Number of conditions: 6
[08:07:43.510] | : . ' , ;  int 6
[08:07:43.511] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.511] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.511] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.511] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.511] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.511] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.512] | : . ' , signalConditions() ... done
[08:07:43.512] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:43.512] | : . Launching futures ... done
[08:07:43.512] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:43.512] | : Using SequentialFutureBackend ... done
[08:07:43.512] | run() for ‘Future’ (<unnamed-6>) ... done
[08:07:43.512] | signalConditions() ...
[08:07:43.512] | : include = ‘immediateCondition’
[08:07:43.512] | : exclude = 
[08:07:43.513] | : resignal = FALSE
[08:07:43.513] | : Number of conditions: 6
[08:07:43.513] | :  int 6
[08:07:43.513] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.513] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.513] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.513] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.514] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.514] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.514] | signalConditions() ... done
[08:07:43.514] | relay stdout ...
[08:07:43.514] | relay stdout ... done
[08:07:43.514] | check for misuse ...
[08:07:43.514] | check for misuse ... done
[08:07:43.514] | relay conditions ...
[08:07:43.514] | : Future state: ‘finished’
[08:07:43.515] | : signalConditions() ...
[08:07:43.515] | : . include = ‘condition’
[08:07:43.515] | : . exclude = ‘immediateCondition’
[08:07:43.515] | : . resignal = TRUE
[08:07:43.515] | : . Number of conditions: 6
[08:07:43.515] | : .  int 6
[08:07:43.516] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.516] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.482] | : . ' , attachPackages() ...
[08:07:43.516] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.516] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.483] | : . ' , ; packages: [n=1] ‘future’
[08:07:43.516] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.516] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.483] | : . ' , attachPackages() ... done
[08:07:43.516] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.519] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.483] | : . ' , attachPackages() ...
[08:07:43.519] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.519] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.483] | : . ' , ; packages: [n=0] 
[08:07:43.519] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.519] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.483] | : . ' , attachPackages() ... done
[08:07:43.519] | : signalConditions() ... done
[08:07:43.520] | relay conditions ... done
[08:07:43.520] value() for Future (<unnamed-6>) ... done

> message("*** %<-% to listenv: multiple dimensions ...")
*** %<-% to listenv: multiple dimensions ...

> x0 <- list()

> length(x0) <- 6

> dim(x0) <- c(3, 2)

> x <- listenv()

> length(x) <- 6

> dim(x) <- c(3, 2)

> for (cc in 1:ncol(x)) {
+     for (rr in 1:nrow(x)) {
+         x0[[rr, cc]] <- sprintf("(%s, %s)", rr, cc)
+         x[[rr, cc]] %<-% sprintf("(%s, ..." ... [TRUNCATED] 
[08:07:43.526] future(..., label = NULL) ...
[08:07:43.527] | lazy: TRUE
[08:07:43.527] | stdout: TRUE
[08:07:43.527] | conditions: [n=1] ‘condition’
[08:07:43.527] | gc: FALSE
[08:07:43.527] | earlySignal: FALSE
[08:07:43.527] | getGlobalsAndPackages() ...
[08:07:43.527] | : Searching for globals ...
[08:07:43.532] | : . globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[08:07:43.532] | : Searching for globals ... done
[08:07:43.532] | : Resolving globals: FALSE
[08:07:43.532] | : Search for packages associated with the globals ...
[08:07:43.532] | : . Packages associated with globals: [1] ‘base’
[08:07:43.533] | : . Packages: [1] ‘base’
[08:07:43.533] | : Search for packages associated with the globals ... done
[08:07:43.533] | : Packages after dropping 'base': [0] 
[08:07:43.533] | : globals: [2] ‘rr’, ‘cc’
[08:07:43.533] | : packages: [0] 
[08:07:43.533] | getGlobalsAndPackages() ... done
[08:07:43.534] future(..., label = NULL) ... done
[08:07:43.534] future(..., label = NULL) ...
[08:07:43.534] | lazy: TRUE
[08:07:43.534] | stdout: TRUE
[08:07:43.534] | conditions: [n=1] ‘condition’
[08:07:43.535] | gc: FALSE
[08:07:43.535] | earlySignal: FALSE
[08:07:43.535] | getGlobalsAndPackages() ...
[08:07:43.535] | : Searching for globals ...
[08:07:43.541] | : . globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[08:07:43.541] | : Searching for globals ... done
[08:07:43.541] | : Resolving globals: FALSE
[08:07:43.541] | : Search for packages associated with the globals ...
[08:07:43.542] | : . Packages associated with globals: [1] ‘base’
[08:07:43.542] | : . Packages: [1] ‘base’
[08:07:43.542] | : Search for packages associated with the globals ... done
[08:07:43.542] | : Packages after dropping 'base': [0] 
[08:07:43.542] | : globals: [2] ‘rr’, ‘cc’
[08:07:43.542] | : packages: [0] 
[08:07:43.542] | getGlobalsAndPackages() ... done
[08:07:43.543] future(..., label = NULL) ... done
[08:07:43.543] future(..., label = NULL) ...
[08:07:43.543] | lazy: TRUE
[08:07:43.543] | stdout: TRUE
[08:07:43.543] | conditions: [n=1] ‘condition’
[08:07:43.544] | gc: FALSE
[08:07:43.544] | earlySignal: FALSE
[08:07:43.544] | getGlobalsAndPackages() ...
[08:07:43.544] | : Searching for globals ...
[08:07:43.548] | : . globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[08:07:43.548] | : Searching for globals ... done
[08:07:43.548] | : Resolving globals: FALSE
[08:07:43.548] | : Search for packages associated with the globals ...
[08:07:43.549] | : . Packages associated with globals: [1] ‘base’
[08:07:43.549] | : . Packages: [1] ‘base’
[08:07:43.549] | : Search for packages associated with the globals ... done
[08:07:43.549] | : Packages after dropping 'base': [0] 
[08:07:43.549] | : globals: [2] ‘rr’, ‘cc’
[08:07:43.549] | : packages: [0] 
[08:07:43.550] | getGlobalsAndPackages() ... done
[08:07:43.550] future(..., label = NULL) ... done
[08:07:43.550] future(..., label = NULL) ...
[08:07:43.550] | lazy: TRUE
[08:07:43.550] | stdout: TRUE
[08:07:43.551] | conditions: [n=1] ‘condition’
[08:07:43.551] | gc: FALSE
[08:07:43.551] | earlySignal: FALSE
[08:07:43.551] | getGlobalsAndPackages() ...
[08:07:43.551] | : Searching for globals ...
[08:07:43.555] | : . globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[08:07:43.555] | : Searching for globals ... done
[08:07:43.555] | : Resolving globals: FALSE
[08:07:43.556] | : Search for packages associated with the globals ...
[08:07:43.556] | : . Packages associated with globals: [1] ‘base’
[08:07:43.556] | : . Packages: [1] ‘base’
[08:07:43.556] | : Search for packages associated with the globals ... done
[08:07:43.556] | : Packages after dropping 'base': [0] 
[08:07:43.556] | : globals: [2] ‘rr’, ‘cc’
[08:07:43.557] | : packages: [0] 
[08:07:43.557] | getGlobalsAndPackages() ... done
[08:07:43.557] future(..., label = NULL) ... done
[08:07:43.559] future(..., label = NULL) ...
[08:07:43.559] | lazy: TRUE
[08:07:43.559] | stdout: TRUE
[08:07:43.559] | conditions: [n=1] ‘condition’
[08:07:43.559] | gc: FALSE
[08:07:43.559] | earlySignal: FALSE
[08:07:43.559] | getGlobalsAndPackages() ...
[08:07:43.559] | : Searching for globals ...
[08:07:43.564] | : . globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[08:07:43.564] | : Searching for globals ... done
[08:07:43.564] | : Resolving globals: FALSE
[08:07:43.564] | : Search for packages associated with the globals ...
[08:07:43.564] | : . Packages associated with globals: [1] ‘base’
[08:07:43.565] | : . Packages: [1] ‘base’
[08:07:43.565] | : Search for packages associated with the globals ... done
[08:07:43.565] | : Packages after dropping 'base': [0] 
[08:07:43.565] | : globals: [2] ‘rr’, ‘cc’
[08:07:43.565] | : packages: [0] 
[08:07:43.565] | getGlobalsAndPackages() ... done
[08:07:43.565] future(..., label = NULL) ... done
[08:07:43.566] future(..., label = NULL) ...
[08:07:43.566] | lazy: TRUE
[08:07:43.566] | stdout: TRUE
[08:07:43.566] | conditions: [n=1] ‘condition’
[08:07:43.566] | gc: FALSE
[08:07:43.566] | earlySignal: FALSE
[08:07:43.566] | getGlobalsAndPackages() ...
[08:07:43.567] | : Searching for globals ...
[08:07:43.571] | : . globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[08:07:43.571] | : Searching for globals ... done
[08:07:43.571] | : Resolving globals: FALSE
[08:07:43.571] | : Search for packages associated with the globals ...
[08:07:43.571] | : . Packages associated with globals: [1] ‘base’
[08:07:43.572] | : . Packages: [1] ‘base’
[08:07:43.572] | : Search for packages associated with the globals ... done
[08:07:43.572] | : Packages after dropping 'base': [0] 
[08:07:43.572] | : globals: [2] ‘rr’, ‘cc’
[08:07:43.572] | : packages: [0] 
[08:07:43.572] | getGlobalsAndPackages() ... done
[08:07:43.572] future(..., label = NULL) ... done

> y <- as.list(x)
[08:07:43.573] value() for Future (<unnamed-7>) ...
[08:07:43.573] | run() for ‘Future’ (<unnamed-7>) ...
[08:07:43.573] | : state: ‘created’
[08:07:43.573] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.573] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.573] | : Using SequentialFutureBackend ...
[08:07:43.573] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:07:43.574] | : . Launching futures ...
[08:07:43.574] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:43.574] | : . ' , getFutureData() ...
[08:07:43.574] | : . ' , ; getFutureCore() ...
[08:07:43.574] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:43.574] | : . ' , ; getFutureCore() ... done
[08:07:43.574] | : . ' , ; getFutureCapture() ...
[08:07:43.574] | : . ' , ; getFutureCapture() ... done
[08:07:43.574] | : . ' , ; getFutureContext() ...
[08:07:43.575] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.575] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:43.575] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.575] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:43.575] | : . ' , ; getFutureContext() ... done
[08:07:43.575] | : . ' , getFutureData() ... done
[08:07:43.578] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.578] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:43.578] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.578] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.578] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:43.578] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:43.579] | : . ' , ; ` | New stack:
[08:07:43.579] | : . ' , ; ` | List of 1
[08:07:43.579] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.579] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.579] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:43.579] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.579] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.579] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.579] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:43.579] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.581] | : . ' , ; ` | Old stack:
[08:07:43.581] | : . ' , ; ` | List of 1
[08:07:43.581] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.581] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.581] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:43.581] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.581] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.581] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.581] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:43.581] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.581] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.581] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.581] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.585] | : . ' , ; ` | Not identical
[08:07:43.585] | : . ' , ; ` | all.equal() for future ...
[08:07:43.585] | : . ' , ; ` | : List of 2
[08:07:43.585] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.585] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.585] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:43.585] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.585] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.585] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.585] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:43.585] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.585] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.585] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.585] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.585] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.585] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.585] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.585] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.585] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.585] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.590] | : . ' , ; ` | all.equal() for future ... done
[08:07:43.590] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:43.590] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:43.590] | : . ' , ; ` List of future strategies:
[08:07:43.590] | : . ' , ; ` 1. sequential:
[08:07:43.590] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:43.590] | : . ' , ; `    - tweaked: FALSE
[08:07:43.590] | : . ' , ; `    - call: plan(sequential)
[08:07:43.591] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:43.591] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.591] | : . ' , assign_globals() ...
[08:07:43.591] | : . ' , List of 2
[08:07:43.591] | : . ' ,  $ rr: int 1
[08:07:43.591] | : . ' ,  $ cc: int 1
[08:07:43.591] | : . ' ,  - attr(*, "where")=List of 2
[08:07:43.591] | : . ' ,   ..$ rr:<environment: R_GlobalEnv> 
[08:07:43.591] | : . ' ,   ..$ cc:<environment: R_GlobalEnv> 
[08:07:43.591] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:43.591] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:07:43.591] | : . ' ,  - attr(*, "total_size")= num NA
[08:07:43.591] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:07:43.594] | : . ' , - copied ‘rr’ to environment
[08:07:43.595] | : . ' , - copied ‘cc’ to environment
[08:07:43.595] | : . ' , assign_globals() ... done
[08:07:43.597] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.597] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.598] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:43.598] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:43.598] | : . ' , ; ` | : New stack:
[08:07:43.598] | : . ' , ; ` | : List of 1
[08:07:43.598] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.598] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.598] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.598] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.598] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.598] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.598] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.598] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.598] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.598] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.598] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.601] | : . ' , ; ` | : Old stack:
[08:07:43.601] | : . ' , ; ` | : List of 1
[08:07:43.601] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.601] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.601] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.601] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.601] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.601] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.601] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.601] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.601] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.601] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.601] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.604] | : . ' , ; ` | : Identical
[08:07:43.604] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:43.604] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:43.605] | : . ' , ; ` | List of future strategies:
[08:07:43.605] | : . ' , ; ` | 1. sequential:
[08:07:43.605] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:43.605] | : . ' , ; ` |    - tweaked: FALSE
[08:07:43.605] | : . ' , ; ` |    - call: plan(sequential)
[08:07:43.605] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:43.605] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.605] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.606] | : . ' , SequentialFuture started (and completed)
[08:07:43.606] | : . ' , signalConditions() ...
[08:07:43.606] | : . ' , ; include = ‘immediateCondition’
[08:07:43.606] | : . ' , ; exclude = 
[08:07:43.606] | : . ' , ; resignal = FALSE
[08:07:43.606] | : . ' , ; Number of conditions: 6
[08:07:43.606] | : . ' , ;  int 6
[08:07:43.607] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.607] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.607] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.607] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.607] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.607] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.607] | : . ' , signalConditions() ... done
[08:07:43.607] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:43.607] | : . Launching futures ... done
[08:07:43.607] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:43.608] | : Using SequentialFutureBackend ... done
[08:07:43.608] | run() for ‘Future’ (<unnamed-7>) ... done
[08:07:43.608] | signalConditions() ...
[08:07:43.608] | : include = ‘immediateCondition’
[08:07:43.608] | : exclude = 
[08:07:43.608] | : resignal = FALSE
[08:07:43.608] | : Number of conditions: 6
[08:07:43.608] | :  int 6
[08:07:43.609] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.609] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.609] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.609] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.609] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.609] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.609] | signalConditions() ... done
[08:07:43.609] | relay stdout ...
[08:07:43.609] | relay stdout ... done
[08:07:43.610] | check for misuse ...
[08:07:43.610] | check for misuse ... done
[08:07:43.610] | relay conditions ...
[08:07:43.610] | : Future state: ‘finished’
[08:07:43.610] | : signalConditions() ...
[08:07:43.610] | : . include = ‘condition’
[08:07:43.610] | : . exclude = ‘immediateCondition’
[08:07:43.610] | : . resignal = TRUE
[08:07:43.610] | : . Number of conditions: 6
[08:07:43.610] | : .  int 6
[08:07:43.611] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.611] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.575] | : . ' , attachPackages() ...
[08:07:43.611] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.611] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.575] | : . ' , ; packages: [n=1] ‘future’
[08:07:43.611] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.611] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.576] | : . ' , attachPackages() ... done
[08:07:43.612] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.612] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.576] | : . ' , attachPackages() ...
[08:07:43.612] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.612] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.576] | : . ' , ; packages: [n=0] 
[08:07:43.612] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.612] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.576] | : . ' , attachPackages() ... done
[08:07:43.612] | : signalConditions() ... done
[08:07:43.612] | relay conditions ... done
[08:07:43.612] value() for Future (<unnamed-7>) ... done
[08:07:43.613] value() for Future (<unnamed-8>) ...
[08:07:43.613] | run() for ‘Future’ (<unnamed-8>) ...
[08:07:43.613] | : state: ‘created’
[08:07:43.613] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.613] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.613] | : Using SequentialFutureBackend ...
[08:07:43.613] | : . Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:07:43.613] | : . Launching futures ...
[08:07:43.613] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:43.614] | : . ' , getFutureData() ...
[08:07:43.614] | : . ' , ; getFutureCore() ...
[08:07:43.614] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:43.614] | : . ' , ; getFutureCore() ... done
[08:07:43.614] | : . ' , ; getFutureCapture() ...
[08:07:43.614] | : . ' , ; getFutureCapture() ... done
[08:07:43.614] | : . ' , ; getFutureContext() ...
[08:07:43.614] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.614] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:43.614] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.615] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:43.616] | : . ' , ; getFutureContext() ... done
[08:07:43.616] | : . ' , getFutureData() ... done
[08:07:43.617] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.617] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:43.617] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.617] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.618] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:43.618] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:43.618] | : . ' , ; ` | New stack:
[08:07:43.618] | : . ' , ; ` | List of 1
[08:07:43.618] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.618] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.618] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:43.618] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.618] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.618] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.618] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:43.618] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.620] | : . ' , ; ` | Old stack:
[08:07:43.620] | : . ' , ; ` | List of 1
[08:07:43.620] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.620] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.620] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:43.620] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.620] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.620] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.620] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:43.620] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.620] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.620] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.620] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.623] | : . ' , ; ` | Not identical
[08:07:43.624] | : . ' , ; ` | all.equal() for future ...
[08:07:43.624] | : . ' , ; ` | : List of 2
[08:07:43.624] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.624] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.624] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:43.624] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.624] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.624] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.624] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:43.624] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.624] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.624] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.624] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.624] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.624] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.624] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.624] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.624] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.624] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.629] | : . ' , ; ` | all.equal() for future ... done
[08:07:43.629] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:43.629] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:43.629] | : . ' , ; ` List of future strategies:
[08:07:43.629] | : . ' , ; ` 1. sequential:
[08:07:43.629] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:43.629] | : . ' , ; `    - tweaked: FALSE
[08:07:43.629] | : . ' , ; `    - call: plan(sequential)
[08:07:43.629] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:43.629] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.630] | : . ' , assign_globals() ...
[08:07:43.630] | : . ' , List of 2
[08:07:43.630] | : . ' ,  $ rr: int 2
[08:07:43.630] | : . ' ,  $ cc: int 1
[08:07:43.630] | : . ' ,  - attr(*, "where")=List of 2
[08:07:43.630] | : . ' ,   ..$ rr:<environment: R_GlobalEnv> 
[08:07:43.630] | : . ' ,   ..$ cc:<environment: R_GlobalEnv> 
[08:07:43.630] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:43.630] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:07:43.630] | : . ' ,  - attr(*, "total_size")= num NA
[08:07:43.630] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:07:43.633] | : . ' , - copied ‘rr’ to environment
[08:07:43.634] | : . ' , - copied ‘cc’ to environment
[08:07:43.634] | : . ' , assign_globals() ... done
[08:07:43.636] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.636] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.636] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:43.636] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:43.636] | : . ' , ; ` | : New stack:
[08:07:43.636] | : . ' , ; ` | : List of 1
[08:07:43.636] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.636] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.636] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.636] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.636] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.636] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.636] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.636] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.636] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.636] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.636] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.639] | : . ' , ; ` | : Old stack:
[08:07:43.639] | : . ' , ; ` | : List of 1
[08:07:43.639] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.639] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.639] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.639] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.639] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.639] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.639] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.639] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.639] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.639] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.639] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.642] | : . ' , ; ` | : Identical
[08:07:43.643] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:43.643] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:43.643] | : . ' , ; ` | List of future strategies:
[08:07:43.643] | : . ' , ; ` | 1. sequential:
[08:07:43.643] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:43.643] | : . ' , ; ` |    - tweaked: FALSE
[08:07:43.643] | : . ' , ; ` |    - call: plan(sequential)
[08:07:43.643] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:43.643] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.643] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.644] | : . ' , SequentialFuture started (and completed)
[08:07:43.644] | : . ' , signalConditions() ...
[08:07:43.644] | : . ' , ; include = ‘immediateCondition’
[08:07:43.644] | : . ' , ; exclude = 
[08:07:43.644] | : . ' , ; resignal = FALSE
[08:07:43.644] | : . ' , ; Number of conditions: 6
[08:07:43.644] | : . ' , ;  int 6
[08:07:43.645] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.645] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.645] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.645] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.645] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.645] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.645] | : . ' , signalConditions() ... done
[08:07:43.645] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:43.646] | : . Launching futures ... done
[08:07:43.646] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:43.646] | : Using SequentialFutureBackend ... done
[08:07:43.646] | run() for ‘Future’ (<unnamed-8>) ... done
[08:07:43.646] | signalConditions() ...
[08:07:43.646] | : include = ‘immediateCondition’
[08:07:43.646] | : exclude = 
[08:07:43.646] | : resignal = FALSE
[08:07:43.646] | : Number of conditions: 6
[08:07:43.646] | :  int 6
[08:07:43.647] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.647] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.647] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.647] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.647] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.647] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.647] | signalConditions() ... done
[08:07:43.648] | relay stdout ...
[08:07:43.648] | relay stdout ... done
[08:07:43.648] | check for misuse ...
[08:07:43.648] | check for misuse ... done
[08:07:43.648] | relay conditions ...
[08:07:43.648] | : Future state: ‘finished’
[08:07:43.648] | : signalConditions() ...
[08:07:43.648] | : . include = ‘condition’
[08:07:43.648] | : . exclude = ‘immediateCondition’
[08:07:43.648] | : . resignal = TRUE
[08:07:43.649] | : . Number of conditions: 6
[08:07:43.649] | : .  int 6
[08:07:43.649] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.649] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.616] | : . ' , attachPackages() ...
[08:07:43.649] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.649] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.616] | : . ' , ; packages: [n=1] ‘future’
[08:07:43.650] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.650] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.616] | : . ' , attachPackages() ... done
[08:07:43.650] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.650] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.616] | : . ' , attachPackages() ...
[08:07:43.650] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.650] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.616] | : . ' , ; packages: [n=0] 
[08:07:43.650] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.650] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.617] | : . ' , attachPackages() ... done
[08:07:43.651] | : signalConditions() ... done
[08:07:43.651] | relay conditions ... done
[08:07:43.651] value() for Future (<unnamed-8>) ... done
[08:07:43.651] value() for Future (<unnamed-9>) ...
[08:07:43.651] | run() for ‘Future’ (<unnamed-9>) ...
[08:07:43.651] | : state: ‘created’
[08:07:43.651] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.651] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.651] | : Using SequentialFutureBackend ...
[08:07:43.651] | : . Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:07:43.652] | : . Launching futures ...
[08:07:43.653] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:43.653] | : . ' , getFutureData() ...
[08:07:43.653] | : . ' , ; getFutureCore() ...
[08:07:43.653] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:43.653] | : . ' , ; getFutureCore() ... done
[08:07:43.653] | : . ' , ; getFutureCapture() ...
[08:07:43.653] | : . ' , ; getFutureCapture() ... done
[08:07:43.653] | : . ' , ; getFutureContext() ...
[08:07:43.653] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.654] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:43.654] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.654] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:43.654] | : . ' , ; getFutureContext() ... done
[08:07:43.654] | : . ' , getFutureData() ... done
[08:07:43.655] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.655] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:43.655] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.656] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.656] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:43.656] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:43.656] | : . ' , ; ` | New stack:
[08:07:43.656] | : . ' , ; ` | List of 1
[08:07:43.656] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.656] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.656] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:43.656] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.656] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.656] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.656] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:43.656] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.659] | : . ' , ; ` | Old stack:
[08:07:43.659] | : . ' , ; ` | List of 1
[08:07:43.659] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.659] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.659] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:43.659] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.659] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.659] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.659] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:43.659] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.659] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.659] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.659] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.662] | : . ' , ; ` | Not identical
[08:07:43.662] | : . ' , ; ` | all.equal() for future ...
[08:07:43.662] | : . ' , ; ` | : List of 2
[08:07:43.662] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.662] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.662] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:43.662] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.662] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.662] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.662] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:43.662] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.662] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.662] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.662] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.662] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.662] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.662] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.662] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.662] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.662] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.667] | : . ' , ; ` | all.equal() for future ... done
[08:07:43.667] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:43.667] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:43.667] | : . ' , ; ` List of future strategies:
[08:07:43.667] | : . ' , ; ` 1. sequential:
[08:07:43.667] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:43.667] | : . ' , ; `    - tweaked: FALSE
[08:07:43.667] | : . ' , ; `    - call: plan(sequential)
[08:07:43.668] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:43.668] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.668] | : . ' , assign_globals() ...
[08:07:43.668] | : . ' , List of 2
[08:07:43.668] | : . ' ,  $ rr: int 3
[08:07:43.668] | : . ' ,  $ cc: int 1
[08:07:43.668] | : . ' ,  - attr(*, "where")=List of 2
[08:07:43.668] | : . ' ,   ..$ rr:<environment: R_GlobalEnv> 
[08:07:43.668] | : . ' ,   ..$ cc:<environment: R_GlobalEnv> 
[08:07:43.668] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:43.668] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:07:43.668] | : . ' ,  - attr(*, "total_size")= num NA
[08:07:43.668] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:07:43.672] | : . ' , - copied ‘rr’ to environment
[08:07:43.672] | : . ' , - copied ‘cc’ to environment
[08:07:43.672] | : . ' , assign_globals() ... done
[08:07:43.674] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.674] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.674] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:43.674] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:43.674] | : . ' , ; ` | : New stack:
[08:07:43.674] | : . ' , ; ` | : List of 1
[08:07:43.674] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.674] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.674] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.674] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.674] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.674] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.674] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.674] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.674] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.674] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.674] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.677] | : . ' , ; ` | : Old stack:
[08:07:43.677] | : . ' , ; ` | : List of 1
[08:07:43.677] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.677] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.677] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.677] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.677] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.677] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.677] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.677] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.677] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.677] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.677] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.680] | : . ' , ; ` | : Identical
[08:07:43.680] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:43.681] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:43.681] | : . ' , ; ` | List of future strategies:
[08:07:43.681] | : . ' , ; ` | 1. sequential:
[08:07:43.681] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:43.681] | : . ' , ; ` |    - tweaked: FALSE
[08:07:43.681] | : . ' , ; ` |    - call: plan(sequential)
[08:07:43.681] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:43.681] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.681] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.682] | : . ' , SequentialFuture started (and completed)
[08:07:43.682] | : . ' , signalConditions() ...
[08:07:43.682] | : . ' , ; include = ‘immediateCondition’
[08:07:43.682] | : . ' , ; exclude = 
[08:07:43.682] | : . ' , ; resignal = FALSE
[08:07:43.682] | : . ' , ; Number of conditions: 6
[08:07:43.682] | : . ' , ;  int 6
[08:07:43.683] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.683] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.683] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.683] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.683] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.683] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.683] | : . ' , signalConditions() ... done
[08:07:43.683] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:43.683] | : . Launching futures ... done
[08:07:43.684] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:43.684] | : Using SequentialFutureBackend ... done
[08:07:43.684] | run() for ‘Future’ (<unnamed-9>) ... done
[08:07:43.684] | signalConditions() ...
[08:07:43.684] | : include = ‘immediateCondition’
[08:07:43.684] | : exclude = 
[08:07:43.684] | : resignal = FALSE
[08:07:43.684] | : Number of conditions: 6
[08:07:43.684] | :  int 6
[08:07:43.685] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.685] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.685] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.685] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.685] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.685] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.685] | signalConditions() ... done
[08:07:43.685] | relay stdout ...
[08:07:43.686] | relay stdout ... done
[08:07:43.686] | check for misuse ...
[08:07:43.686] | check for misuse ... done
[08:07:43.686] | relay conditions ...
[08:07:43.686] | : Future state: ‘finished’
[08:07:43.686] | : signalConditions() ...
[08:07:43.686] | : . include = ‘condition’
[08:07:43.686] | : . exclude = ‘immediateCondition’
[08:07:43.686] | : . resignal = TRUE
[08:07:43.686] | : . Number of conditions: 6
[08:07:43.686] | : .  int 6
[08:07:43.687] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.687] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.654] | : . ' , attachPackages() ...
[08:07:43.687] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.687] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.654] | : . ' , ; packages: [n=1] ‘future’
[08:07:43.687] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.687] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.655] | : . ' , attachPackages() ... done
[08:07:43.688] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.713] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.655] | : . ' , attachPackages() ...
[08:07:43.713] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.713] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.655] | : . ' , ; packages: [n=0] 
[08:07:43.713] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.714] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.655] | : . ' , attachPackages() ... done
[08:07:43.714] | : signalConditions() ... done
[08:07:43.714] | relay conditions ... done
[08:07:43.714] value() for Future (<unnamed-9>) ... done
[08:07:43.714] value() for Future (<unnamed-10>) ...
[08:07:43.714] | run() for ‘Future’ (<unnamed-10>) ...
[08:07:43.714] | : state: ‘created’
[08:07:43.715] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.715] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.715] | : Using SequentialFutureBackend ...
[08:07:43.715] | : . Number of futures since start: 7 (7 created, 7 launched, 7 finished)
[08:07:43.715] | : . Launching futures ...
[08:07:43.715] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:43.715] | : . ' , getFutureData() ...
[08:07:43.715] | : . ' , ; getFutureCore() ...
[08:07:43.716] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:43.716] | : . ' , ; getFutureCore() ... done
[08:07:43.716] | : . ' , ; getFutureCapture() ...
[08:07:43.716] | : . ' , ; getFutureCapture() ... done
[08:07:43.716] | : . ' , ; getFutureContext() ...
[08:07:43.716] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.716] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:43.716] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.716] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:43.717] | : . ' , ; getFutureContext() ... done
[08:07:43.717] | : . ' , getFutureData() ... done
[08:07:43.718] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.718] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:43.718] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.718] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.719] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:43.719] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:43.719] | : . ' , ; ` | New stack:
[08:07:43.719] | : . ' , ; ` | List of 1
[08:07:43.719] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.719] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.719] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:43.719] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.719] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.719] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.719] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:43.719] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.722] | : . ' , ; ` | Old stack:
[08:07:43.722] | : . ' , ; ` | List of 1
[08:07:43.722] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.722] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.722] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:43.722] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.722] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.722] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.722] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:43.722] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.722] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.722] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.722] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.725] | : . ' , ; ` | Not identical
[08:07:43.725] | : . ' , ; ` | all.equal() for future ...
[08:07:43.725] | : . ' , ; ` | : List of 2
[08:07:43.725] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.725] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.725] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:43.725] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.725] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.725] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.725] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:43.725] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.725] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.725] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.725] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.725] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.725] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.725] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.725] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.725] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.725] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.730] | : . ' , ; ` | all.equal() for future ... done
[08:07:43.730] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:43.731] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:43.731] | : . ' , ; ` List of future strategies:
[08:07:43.731] | : . ' , ; ` 1. sequential:
[08:07:43.731] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:43.731] | : . ' , ; `    - tweaked: FALSE
[08:07:43.731] | : . ' , ; `    - call: plan(sequential)
[08:07:43.731] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:43.731] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.731] | : . ' , assign_globals() ...
[08:07:43.731] | : . ' , List of 2
[08:07:43.731] | : . ' ,  $ rr: int 1
[08:07:43.731] | : . ' ,  $ cc: int 2
[08:07:43.731] | : . ' ,  - attr(*, "where")=List of 2
[08:07:43.731] | : . ' ,   ..$ rr:<environment: R_GlobalEnv> 
[08:07:43.731] | : . ' ,   ..$ cc:<environment: R_GlobalEnv> 
[08:07:43.731] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:43.731] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:07:43.731] | : . ' ,  - attr(*, "total_size")= num NA
[08:07:43.731] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:07:43.735] | : . ' , - copied ‘rr’ to environment
[08:07:43.736] | : . ' , - copied ‘cc’ to environment
[08:07:43.736] | : . ' , assign_globals() ... done
[08:07:43.737] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.737] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.737] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:43.738] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:43.738] | : . ' , ; ` | : New stack:
[08:07:43.738] | : . ' , ; ` | : List of 1
[08:07:43.738] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.738] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.738] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.738] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.738] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.738] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.738] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.738] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.738] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.738] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.738] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.741] | : . ' , ; ` | : Old stack:
[08:07:43.741] | : . ' , ; ` | : List of 1
[08:07:43.741] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.741] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.741] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.741] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.741] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.741] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.741] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.741] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.741] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.741] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.741] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.744] | : . ' , ; ` | : Identical
[08:07:43.744] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:43.744] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:43.744] | : . ' , ; ` | List of future strategies:
[08:07:43.744] | : . ' , ; ` | 1. sequential:
[08:07:43.744] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:43.744] | : . ' , ; ` |    - tweaked: FALSE
[08:07:43.744] | : . ' , ; ` |    - call: plan(sequential)
[08:07:43.745] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:43.745] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.745] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.745] | : . ' , SequentialFuture started (and completed)
[08:07:43.745] | : . ' , signalConditions() ...
[08:07:43.746] | : . ' , ; include = ‘immediateCondition’
[08:07:43.746] | : . ' , ; exclude = 
[08:07:43.746] | : . ' , ; resignal = FALSE
[08:07:43.746] | : . ' , ; Number of conditions: 6
[08:07:43.746] | : . ' , ;  int 6
[08:07:43.746] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.746] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.747] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.747] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.747] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.747] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.747] | : . ' , signalConditions() ... done
[08:07:43.747] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:43.747] | : . Launching futures ... done
[08:07:43.747] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:43.747] | : Using SequentialFutureBackend ... done
[08:07:43.747] | run() for ‘Future’ (<unnamed-10>) ... done
[08:07:43.748] | signalConditions() ...
[08:07:43.748] | : include = ‘immediateCondition’
[08:07:43.748] | : exclude = 
[08:07:43.748] | : resignal = FALSE
[08:07:43.748] | : Number of conditions: 6
[08:07:43.748] | :  int 6
[08:07:43.748] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.749] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.749] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.749] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.749] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.749] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.749] | signalConditions() ... done
[08:07:43.749] | relay stdout ...
[08:07:43.749] | relay stdout ... done
[08:07:43.749] | check for misuse ...
[08:07:43.750] | check for misuse ... done
[08:07:43.750] | relay conditions ...
[08:07:43.750] | : Future state: ‘finished’
[08:07:43.750] | : signalConditions() ...
[08:07:43.750] | : . include = ‘condition’
[08:07:43.750] | : . exclude = ‘immediateCondition’
[08:07:43.750] | : . resignal = TRUE
[08:07:43.750] | : . Number of conditions: 6
[08:07:43.750] | : .  int 6
[08:07:43.751] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.751] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.717] | : . ' , attachPackages() ...
[08:07:43.751] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.751] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.717] | : . ' , ; packages: [n=1] ‘future’
[08:07:43.751] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.751] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.717] | : . ' , attachPackages() ... done
[08:07:43.751] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.752] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.717] | : . ' , attachPackages() ...
[08:07:43.752] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.752] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.717] | : . ' , ; packages: [n=0] 
[08:07:43.752] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.752] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.718] | : . ' , attachPackages() ... done
[08:07:43.752] | : signalConditions() ... done
[08:07:43.752] | relay conditions ... done
[08:07:43.752] value() for Future (<unnamed-10>) ... done
[08:07:43.752] value() for Future (<unnamed-11>) ...
[08:07:43.753] | run() for ‘Future’ (<unnamed-11>) ...
[08:07:43.753] | : state: ‘created’
[08:07:43.753] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.753] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.753] | : Using SequentialFutureBackend ...
[08:07:43.753] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:07:43.753] | : . Launching futures ...
[08:07:43.753] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:43.753] | : . ' , getFutureData() ...
[08:07:43.753] | : . ' , ; getFutureCore() ...
[08:07:43.754] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:43.754] | : . ' , ; getFutureCore() ... done
[08:07:43.754] | : . ' , ; getFutureCapture() ...
[08:07:43.755] | : . ' , ; getFutureCapture() ... done
[08:07:43.755] | : . ' , ; getFutureContext() ...
[08:07:43.755] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.755] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:43.755] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.755] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:43.755] | : . ' , ; getFutureContext() ... done
[08:07:43.755] | : . ' , getFutureData() ... done
[08:07:43.757] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.757] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:43.757] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.757] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.757] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:43.757] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:43.757] | : . ' , ; ` | New stack:
[08:07:43.758] | : . ' , ; ` | List of 1
[08:07:43.758] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.758] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.758] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:43.758] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.758] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.758] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.758] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:43.758] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.760] | : . ' , ; ` | Old stack:
[08:07:43.760] | : . ' , ; ` | List of 1
[08:07:43.760] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.760] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.760] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:43.760] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.760] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.760] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.760] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:43.760] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.760] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.760] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.760] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.763] | : . ' , ; ` | Not identical
[08:07:43.763] | : . ' , ; ` | all.equal() for future ...
[08:07:43.763] | : . ' , ; ` | : List of 2
[08:07:43.763] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.763] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.763] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:43.763] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.763] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.763] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.763] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:43.763] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.763] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.763] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.763] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.763] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.763] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.763] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.763] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.763] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.763] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.768] | : . ' , ; ` | all.equal() for future ... done
[08:07:43.768] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:43.768] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:43.769] | : . ' , ; ` List of future strategies:
[08:07:43.769] | : . ' , ; ` 1. sequential:
[08:07:43.769] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:43.769] | : . ' , ; `    - tweaked: FALSE
[08:07:43.769] | : . ' , ; `    - call: plan(sequential)
[08:07:43.769] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:43.769] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.769] | : . ' , assign_globals() ...
[08:07:43.769] | : . ' , List of 2
[08:07:43.769] | : . ' ,  $ rr: int 2
[08:07:43.769] | : . ' ,  $ cc: int 2
[08:07:43.769] | : . ' ,  - attr(*, "where")=List of 2
[08:07:43.769] | : . ' ,   ..$ rr:<environment: R_GlobalEnv> 
[08:07:43.769] | : . ' ,   ..$ cc:<environment: R_GlobalEnv> 
[08:07:43.769] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:43.769] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:07:43.769] | : . ' ,  - attr(*, "total_size")= num NA
[08:07:43.769] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:07:43.772] | : . ' , - copied ‘rr’ to environment
[08:07:43.772] | : . ' , - copied ‘cc’ to environment
[08:07:43.773] | : . ' , assign_globals() ... done
[08:07:43.775] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.775] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.775] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:43.775] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:43.775] | : . ' , ; ` | : New stack:
[08:07:43.775] | : . ' , ; ` | : List of 1
[08:07:43.775] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.775] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.775] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.775] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.775] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.775] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.775] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.775] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.775] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.775] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.775] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.779] | : . ' , ; ` | : Old stack:
[08:07:43.779] | : . ' , ; ` | : List of 1
[08:07:43.779] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.779] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.779] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.779] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.779] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.779] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.779] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.779] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.779] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.779] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.779] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.782] | : . ' , ; ` | : Identical
[08:07:43.782] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:43.782] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:43.782] | : . ' , ; ` | List of future strategies:
[08:07:43.782] | : . ' , ; ` | 1. sequential:
[08:07:43.782] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:43.782] | : . ' , ; ` |    - tweaked: FALSE
[08:07:43.782] | : . ' , ; ` |    - call: plan(sequential)
[08:07:43.782] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:43.782] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.783] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.783] | : . ' , SequentialFuture started (and completed)
[08:07:43.783] | : . ' , signalConditions() ...
[08:07:43.783] | : . ' , ; include = ‘immediateCondition’
[08:07:43.783] | : . ' , ; exclude = 
[08:07:43.783] | : . ' , ; resignal = FALSE
[08:07:43.783] | : . ' , ; Number of conditions: 6
[08:07:43.783] | : . ' , ;  int 6
[08:07:43.784] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.784] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.784] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.784] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.784] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.784] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.785] | : . ' , signalConditions() ... done
[08:07:43.785] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:43.785] | : . Launching futures ... done
[08:07:43.785] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:43.785] | : Using SequentialFutureBackend ... done
[08:07:43.785] | run() for ‘Future’ (<unnamed-11>) ... done
[08:07:43.785] | signalConditions() ...
[08:07:43.785] | : include = ‘immediateCondition’
[08:07:43.785] | : exclude = 
[08:07:43.785] | : resignal = FALSE
[08:07:43.785] | : Number of conditions: 6
[08:07:43.786] | :  int 6
[08:07:43.786] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.786] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.786] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.786] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.786] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.786] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.787] | signalConditions() ... done
[08:07:43.787] | relay stdout ...
[08:07:43.787] | relay stdout ... done
[08:07:43.787] | check for misuse ...
[08:07:43.787] | check for misuse ... done
[08:07:43.787] | relay conditions ...
[08:07:43.787] | : Future state: ‘finished’
[08:07:43.787] | : signalConditions() ...
[08:07:43.787] | : . include = ‘condition’
[08:07:43.787] | : . exclude = ‘immediateCondition’
[08:07:43.788] | : . resignal = TRUE
[08:07:43.788] | : . Number of conditions: 6
[08:07:43.788] | : .  int 6
[08:07:43.788] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.788] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.756] | : . ' , attachPackages() ...
[08:07:43.788] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.788] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.756] | : . ' , ; packages: [n=1] ‘future’
[08:07:43.789] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.789] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.756] | : . ' , attachPackages() ... done
[08:07:43.789] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.789] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.756] | : . ' , attachPackages() ...
[08:07:43.789] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.789] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.756] | : . ' , ; packages: [n=0] 
[08:07:43.789] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.789] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.756] | : . ' , attachPackages() ... done
[08:07:43.789] | : signalConditions() ... done
[08:07:43.790] | relay conditions ... done
[08:07:43.790] value() for Future (<unnamed-11>) ... done
[08:07:43.790] value() for Future (<unnamed-12>) ...
[08:07:43.790] | run() for ‘Future’ (<unnamed-12>) ...
[08:07:43.790] | : state: ‘created’
[08:07:43.790] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.790] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.790] | : Using SequentialFutureBackend ...
[08:07:43.790] | : . Number of futures since start: 9 (9 created, 9 launched, 9 finished)
[08:07:43.790] | : . Launching futures ...
[08:07:43.791] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:43.791] | : . ' , getFutureData() ...
[08:07:43.791] | : . ' , ; getFutureCore() ...
[08:07:43.791] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:43.791] | : . ' , ; getFutureCore() ... done
[08:07:43.791] | : . ' , ; getFutureCapture() ...
[08:07:43.791] | : . ' , ; getFutureCapture() ... done
[08:07:43.791] | : . ' , ; getFutureContext() ...
[08:07:43.791] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.792] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:43.792] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.792] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:43.792] | : . ' , ; getFutureContext() ... done
[08:07:43.792] | : . ' , getFutureData() ... done
[08:07:43.793] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:43.793] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:43.794] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:43.794] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.795] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:43.795] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:43.795] | : . ' , ; ` | New stack:
[08:07:43.795] | : . ' , ; ` | List of 1
[08:07:43.795] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.795] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.795] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:43.795] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.795] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.795] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.795] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:43.795] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.797] | : . ' , ; ` | Old stack:
[08:07:43.798] | : . ' , ; ` | List of 1
[08:07:43.798] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.798] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.798] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:43.798] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.798] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.798] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.798] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:43.798] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.798] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.798] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.798] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.801] | : . ' , ; ` | Not identical
[08:07:43.801] | : . ' , ; ` | all.equal() for future ...
[08:07:43.801] | : . ' , ; ` | : List of 2
[08:07:43.801] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.801] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.801] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:43.801] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.801] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.801] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.801] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:43.801] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.801] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.801] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.801] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.801] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.801] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.801] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.801] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.801] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.801] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.806] | : . ' , ; ` | all.equal() for future ... done
[08:07:43.806] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:43.806] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:43.806] | : . ' , ; ` List of future strategies:
[08:07:43.806] | : . ' , ; ` 1. sequential:
[08:07:43.806] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:43.806] | : . ' , ; `    - tweaked: FALSE
[08:07:43.806] | : . ' , ; `    - call: plan(sequential)
[08:07:43.806] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:43.807] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.807] | : . ' , assign_globals() ...
[08:07:43.807] | : . ' , List of 2
[08:07:43.807] | : . ' ,  $ rr: int 3
[08:07:43.807] | : . ' ,  $ cc: int 2
[08:07:43.807] | : . ' ,  - attr(*, "where")=List of 2
[08:07:43.807] | : . ' ,   ..$ rr:<environment: R_GlobalEnv> 
[08:07:43.807] | : . ' ,   ..$ cc:<environment: R_GlobalEnv> 
[08:07:43.807] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:43.807] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:07:43.807] | : . ' ,  - attr(*, "total_size")= num NA
[08:07:43.807] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:07:43.810] | : . ' , - copied ‘rr’ to environment
[08:07:43.810] | : . ' , - copied ‘cc’ to environment
[08:07:43.810] | : . ' , assign_globals() ... done
[08:07:43.811] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.811] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:43.812] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:43.812] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:43.812] | : . ' , ; ` | : New stack:
[08:07:43.812] | : . ' , ; ` | : List of 1
[08:07:43.812] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.812] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.812] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.812] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.812] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.812] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.812] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.812] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.812] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.812] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.812] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.816] | : . ' , ; ` | : Old stack:
[08:07:43.816] | : . ' , ; ` | : List of 1
[08:07:43.816] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:43.816] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:43.816] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:43.816] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.816] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.816] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.816] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:43.816] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560a24804cb8> 
[08:07:43.816] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:43.816] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:43.816] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:43.819] | : . ' , ; ` | : Identical
[08:07:43.819] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:43.819] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:43.819] | : . ' , ; ` | List of future strategies:
[08:07:43.819] | : . ' , ; ` | 1. sequential:
[08:07:43.819] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:43.819] | : . ' , ; ` |    - tweaked: FALSE
[08:07:43.819] | : . ' , ; ` |    - call: plan(sequential)
[08:07:43.820] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:43.820] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.820] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:43.820] | : . ' , SequentialFuture started (and completed)
[08:07:43.820] | : . ' , signalConditions() ...
[08:07:43.820] | : . ' , ; include = ‘immediateCondition’
[08:07:43.820] | : . ' , ; exclude = 
[08:07:43.821] | : . ' , ; resignal = FALSE
[08:07:43.821] | : . ' , ; Number of conditions: 6
[08:07:43.821] | : . ' , ;  int 6
[08:07:43.821] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.821] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.821] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.821] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.822] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.822] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.822] | : . ' , signalConditions() ... done
[08:07:43.822] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:43.822] | : . Launching futures ... done
[08:07:43.822] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:43.822] | : Using SequentialFutureBackend ... done
[08:07:43.822] | run() for ‘Future’ (<unnamed-12>) ... done
[08:07:43.822] | signalConditions() ...
[08:07:43.823] | : include = ‘immediateCondition’
[08:07:43.823] | : exclude = 
[08:07:43.823] | : resignal = FALSE
[08:07:43.823] | : Number of conditions: 6
[08:07:43.823] | :  int 6
[08:07:43.823] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.823] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.823] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.824] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.824] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.824] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.824] | signalConditions() ... done
[08:07:43.824] | relay stdout ...
[08:07:43.824] | relay stdout ... done
[08:07:43.824] | check for misuse ...
[08:07:43.824] | check for misuse ... done
[08:07:43.824] | relay conditions ...
[08:07:43.824] | : Future state: ‘finished’
[08:07:43.825] | : signalConditions() ...
[08:07:43.825] | : . include = ‘condition’
[08:07:43.825] | : . exclude = ‘immediateCondition’
[08:07:43.825] | : . resignal = TRUE
[08:07:43.825] | : . Number of conditions: 6
[08:07:43.825] | : .  int 6
[08:07:43.825] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.825] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.792] | : . ' , attachPackages() ...
[08:07:43.826] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.826] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.792] | : . ' , ; packages: [n=1] ‘future’
[08:07:43.826] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.826] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.792] | : . ' , attachPackages() ... done
[08:07:43.826] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.826] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.793] | : . ' , attachPackages() ...
[08:07:43.826] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.826] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.793] | : . ' , ; packages: [n=0] 
[08:07:43.827] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:43.827] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:43.793] | : . ' , attachPackages() ... done
[08:07:43.827] | : signalConditions() ... done
[08:07:43.827] | relay conditions ... done
[08:07:43.827] value() for Future (<unnamed-12>) ... done

> dim(y) <- dim(x)

> stopifnot(identical(y, x0))

> message("*** %<-% to listenv: multiple dimensions ... DONE")
*** %<-% to listenv: multiple dimensions ... DONE

> message("*** %<-% to listenv ... DONE")
*** %<-% to listenv ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.6s, sys.self=0.006s, elapsed=0.6s, user.child=0.001s, sys.child=0.005s
Test ‘futureAssign_OP_with_listenv’ ... success
> 
