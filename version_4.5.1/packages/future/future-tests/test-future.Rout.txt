
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-future.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("future")
Test ‘future’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-future.R’

> library(future)
[08:07:42.221] Option 'future.startup.script': TRUE
[08:07:42.221] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:07:42.222] Future startup scripts found: <none>

> message("*** future() ...")
*** future() ...

> message("*** future() w/ lazy = TRUE ...")
*** future() w/ lazy = TRUE ...

> f <- future({
+     42
+ }, lazy = TRUE)
[08:07:42.223] future(..., label = NULL) ...
[08:07:42.223] | lazy: TRUE
[08:07:42.223] | stdout: TRUE
[08:07:42.223] | conditions: [n=1] ‘condition’
[08:07:42.224] | gc: FALSE
[08:07:42.224] | earlySignal: FALSE
[08:07:42.224] | getGlobalsAndPackages() ...
[08:07:42.224] | : Searching for globals ...
[08:07:42.236] | : . globals found: [1] ‘{’
[08:07:42.236] | : Searching for globals ... done
[08:07:42.236] | : Resolving globals: FALSE
[08:07:42.236] | : Search for packages associated with the globals ...
[08:07:42.237] | : . Packages associated with globals: [1] ‘base’
[08:07:42.237] | : . Packages: [1] ‘base’
[08:07:42.237] | : Search for packages associated with the globals ... done
[08:07:42.237] | : Packages after dropping 'base': [0] 
[08:07:42.237] | : globals: [0] 
[08:07:42.237] | : packages: [0] 
[08:07:42.238] | getGlobalsAndPackages() ... done
[08:07:42.238] future(..., label = NULL) ... done

> print(resolved(f))
[08:07:42.238] resolved() for Future (<unnamed-1>) ...
[08:07:42.238] | state: ‘created’
[08:07:42.239] | run: TRUE
[08:07:42.239] | run() ...
[08:07:42.239] | : run() for ‘Future’ (<unnamed-1>) ...
[08:07:42.239] | : . state: ‘created’
[08:07:42.239] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:42.239] | : . ' plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:42.240] | : . ' , function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.240] | : . ' ,  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.240] | : . ' ,  - attr(*, "init")= logi TRUE
[08:07:42.240] | : . ' ,  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.240] | : . ' ,   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.240] | : . ' ,  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.240] | : . ' ,  - attr(*, "call")= language plan(sequential)
[08:07:42.243] | : . ' , init: TRUE
[08:07:42.244] | : . ' , makeFutureBackend(<sequential>) ...
[08:07:42.244] | : . ' , ; Backend function: <‘NULL’>
[08:07:42.244] | : . ' , ; Evaluator tweak arguments: [n=0]
[08:07:42.244] | : . ' , ;  list()
[08:07:42.244] | : . ' , ; Evaluator formal arguments: [n=2]
[08:07:42.244] | : . ' , ;  list()
[08:07:42.245] | : . ' , ; Backend factory arguments: [n=2]
[08:07:42.245] | : . ' , ; Dotted pair list of 2
[08:07:42.245] | : . ' , ;  $ gc         : logi FALSE
[08:07:42.245] | : . ' , ;  $ earlySignal: logi FALSE
[08:07:42.246] | : . ' , ; Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:42.246] | : . ' , makeFutureBackend(<sequential>) ... done
[08:07:42.246] | : . ' plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:42.246] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:42.246] | : . Using SequentialFutureBackend ...
[08:07:42.246] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:07:42.247] | : . ' Launching futures ...
[08:07:42.247] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:42.247] | : . ' , ; getFutureData() ...
[08:07:42.247] | : . ' , ; ` getFutureCore() ...
[08:07:42.247] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:07:42.247] | : . ' , ; ` getFutureCore() ... done
[08:07:42.248] | : . ' , ; ` getFutureCapture() ...
[08:07:42.248] | : . ' , ; ` getFutureCapture() ... done
[08:07:42.248] | : . ' , ; ` getFutureContext() ...
[08:07:42.248] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:42.248] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:07:42.248] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:42.248] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:07:42.248] | : . ' , ; ` getFutureContext() ... done
[08:07:42.249] | : . ' , ; getFutureData() ... done
[08:07:42.251] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:42.251] | : . ' , ; ` Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:42.251] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:42.252] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:42.252] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:42.252] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:42.252] | : . ' , ; ` | : New stack:
[08:07:42.252] | : . ' , ; ` | : List of 1
[08:07:42.252] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.252] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.252] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:42.252] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.252] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.252] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.252] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:42.252] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:42.255] | : . ' , ; ` | : Old stack:
[08:07:42.255] | : . ' , ; ` | : List of 1
[08:07:42.255] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.255] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.255] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:42.255] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.255] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.255] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.255] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:42.255] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560dda149628> 
[08:07:42.255] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.255] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.255] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:42.258] | : . ' , ; ` | : Not identical
[08:07:42.258] | : . ' , ; ` | : all.equal() for future ...
[08:07:42.258] | : . ' , ; ` | : . List of 2
[08:07:42.258] | : . ' , ; ` | : .  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.258] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.258] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:07:42.258] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.258] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.258] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.258] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:42.258] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.258] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.258] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:42.258] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.258] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.258] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.258] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:42.258] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560dda149628> 
[08:07:42.258] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.258] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.265] | : . ' , ; ` | : all.equal() for future ... done
[08:07:42.265] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:42.266] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:42.266] | : . ' , ; ` | List of future strategies:
[08:07:42.266] | : . ' , ; ` | 1. sequential:
[08:07:42.266] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:42.266] | : . ' , ; ` |    - tweaked: FALSE
[08:07:42.266] | : . ' , ; ` |    - call: plan(sequential)
[08:07:42.266] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:42.266] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:42.269] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:42.269] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:42.269] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:42.269] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:07:42.269] | : . ' , ; ` | : . New stack:
[08:07:42.269] | : . ' , ; ` | : . List of 1
[08:07:42.269] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.269] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.269] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:42.269] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.269] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.269] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.269] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:42.269] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560dda149628> 
[08:07:42.269] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.269] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.269] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:42.273] | : . ' , ; ` | : . Old stack:
[08:07:42.273] | : . ' , ; ` | : . List of 1
[08:07:42.273] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.273] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.273] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:42.273] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.273] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.273] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.273] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:42.273] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560dda149628> 
[08:07:42.273] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.273] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.273] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:42.276] | : . ' , ; ` | : . Identical
[08:07:42.276] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:07:42.276] | : . ' , ; ` | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:42.276] | : . ' , ; ` | : List of future strategies:
[08:07:42.276] | : . ' , ; ` | : 1. sequential:
[08:07:42.276] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:42.276] | : . ' , ; ` | :    - tweaked: FALSE
[08:07:42.276] | : . ' , ; ` | :    - call: plan(sequential)
[08:07:42.277] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:42.277] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:42.277] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:42.280] | : . ' , ; SequentialFuture started (and completed)
[08:07:42.281] | : . ' , ; signalConditions() ...
[08:07:42.281] | : . ' , ; ` include = ‘immediateCondition’
[08:07:42.281] | : . ' , ; ` exclude = 
[08:07:42.281] | : . ' , ; ` resignal = FALSE
[08:07:42.281] | : . ' , ; ` Number of conditions: 6
[08:07:42.281] | : . ' , ; `  int 6
[08:07:42.282] | : . ' , ; ` Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.282] | : . ' , ; ` Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.282] | : . ' , ; ` Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.282] | : . ' , ; ` Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.282] | : . ' , ; ` Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.282] | : . ' , ; ` Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.282] | : . ' , ; signalConditions() ... done
[08:07:42.282] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:42.283] | : . ' Launching futures ... done
[08:07:42.283] | : . ' Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:42.283] | : . Using SequentialFutureBackend ... done
[08:07:42.283] | : run() for ‘Future’ (<unnamed-1>) ... done
[08:07:42.283] | run() ... done
[08:07:42.283] | resolved() ...
[08:07:42.283] | : resolved() for SequentialFuture (<unnamed-1>) ...
[08:07:42.283] | : . state: ‘finished’
[08:07:42.283] | : . run: TRUE
[08:07:42.284] | : . result: ‘FutureResult’
[08:07:42.284] | : resolved() for SequentialFuture (<unnamed-1>) ... done
[08:07:42.284] | : resolved: TRUE
[08:07:42.284] | resolved() ... done
[08:07:42.284] resolved() for Future (<unnamed-1>) ... done
[1] TRUE

> y <- value(f)
[08:07:42.285] value() for SequentialFuture (<unnamed-1>) ...
[08:07:42.285] | signalConditions() ...
[08:07:42.285] | : include = ‘immediateCondition’
[08:07:42.285] | : exclude = 
[08:07:42.285] | : resignal = FALSE
[08:07:42.285] | : Number of conditions: 6
[08:07:42.285] | :  int 6
[08:07:42.286] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.288] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.288] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.288] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.288] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.288] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.288] | signalConditions() ... done
[08:07:42.288] | relay stdout ...
[08:07:42.289] | relay stdout ... done
[08:07:42.289] | check for misuse ...
[08:07:42.289] | check for misuse ... done
[08:07:42.289] | relay conditions ...
[08:07:42.289] | : Future state: ‘finished’
[08:07:42.289] | : signalConditions() ...
[08:07:42.289] | : . include = ‘condition’
[08:07:42.289] | : . exclude = ‘immediateCondition’
[08:07:42.289] | : . resignal = TRUE
[08:07:42.290] | : . Number of conditions: 6
[08:07:42.290] | : .  int 6
[08:07:42.290] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.290] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.250] | : . ' , ; attachPackages() ...
[08:07:42.290] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.290] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.250] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:42.291] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.291] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.250] | : . ' , ; attachPackages() ... done
[08:07:42.291] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.291] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.250] | : . ' , ; attachPackages() ...
[08:07:42.291] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.291] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.250] | : . ' , ; ` packages: [n=0] 
[08:07:42.291] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.292] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.251] | : . ' , ; attachPackages() ... done
[08:07:42.292] | : signalConditions() ... done
[08:07:42.292] | relay conditions ... done
[08:07:42.292] value() for SequentialFuture (<unnamed-1>) ... done

> print(y)
[1] 42

> stopifnot(y == 42)

> message("*** future() w/ lazy = TRUE ... DONE")
*** future() w/ lazy = TRUE ... DONE

> message("*** future() w/ lazy = TRUE in local() ...")
*** future() w/ lazy = TRUE in local() ...

> local({
+     a <- 42
+     f <- future({
+         a
+     }, lazy = TRUE)
+     a <- 0
+     y <- value(f)
+     print(y)
+     stopifnot(y == 42) .... [TRUNCATED] 
[08:07:42.293] future(..., label = NULL) ...
[08:07:42.293] | lazy: TRUE
[08:07:42.293] | stdout: TRUE
[08:07:42.293] | conditions: [n=1] ‘condition’
[08:07:42.293] | gc: FALSE
[08:07:42.293] | earlySignal: FALSE
[08:07:42.293] | getGlobalsAndPackages() ...
[08:07:42.293] | : Searching for globals ...
[08:07:42.297] | : . globals found: [2] ‘{’, ‘a’
[08:07:42.297] | : Searching for globals ... done
[08:07:42.297] | : Resolving globals: FALSE
[08:07:42.297] | : Search for packages associated with the globals ...
[08:07:42.297] | : . Packages associated with globals: [1] ‘base’
[08:07:42.298] | : . Packages: [1] ‘base’
[08:07:42.298] | : Search for packages associated with the globals ... done
[08:07:42.298] | : Packages after dropping 'base': [0] 
[08:07:42.298] | : globals: [1] ‘a’
[08:07:42.298] | : packages: [0] 
[08:07:42.298] | getGlobalsAndPackages() ... done
[08:07:42.298] future(..., label = NULL) ... done
[08:07:42.298] value() for Future (<unnamed-2>) ...
[08:07:42.299] | run() for ‘Future’ (<unnamed-2>) ...
[08:07:42.299] | : state: ‘created’
[08:07:42.299] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:42.299] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:42.299] | : Using SequentialFutureBackend ...
[08:07:42.299] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:07:42.299] | : . Launching futures ...
[08:07:42.299] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:42.300] | : . ' , getFutureData() ...
[08:07:42.300] | : . ' , ; getFutureCore() ...
[08:07:42.300] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:42.300] | : . ' , ; getFutureCore() ... done
[08:07:42.300] | : . ' , ; getFutureCapture() ...
[08:07:42.300] | : . ' , ; getFutureCapture() ... done
[08:07:42.300] | : . ' , ; getFutureContext() ...
[08:07:42.300] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:42.300] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:42.301] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:42.301] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:42.301] | : . ' , ; getFutureContext() ... done
[08:07:42.301] | : . ' , getFutureData() ... done
[08:07:42.302] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:42.302] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:42.303] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:42.303] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:42.303] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:42.303] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:42.303] | : . ' , ; ` | New stack:
[08:07:42.303] | : . ' , ; ` | List of 1
[08:07:42.303] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.303] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.303] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:42.303] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.303] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.303] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.303] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:42.303] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:42.306] | : . ' , ; ` | Old stack:
[08:07:42.306] | : . ' , ; ` | List of 1
[08:07:42.306] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.306] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.306] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:42.306] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.306] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.306] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.306] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:42.306] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560dda149628> 
[08:07:42.306] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.306] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.306] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:42.311] | : . ' , ; ` | Not identical
[08:07:42.311] | : . ' , ; ` | all.equal() for future ...
[08:07:42.311] | : . ' , ; ` | : List of 2
[08:07:42.311] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.311] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.311] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:42.311] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.311] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.311] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.311] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:42.311] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.311] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.311] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:42.311] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.311] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.311] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.311] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:42.311] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560dda149628> 
[08:07:42.311] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.311] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.317] | : . ' , ; ` | all.equal() for future ... done
[08:07:42.317] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:42.317] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:42.317] | : . ' , ; ` List of future strategies:
[08:07:42.317] | : . ' , ; ` 1. sequential:
[08:07:42.317] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:42.317] | : . ' , ; `    - tweaked: FALSE
[08:07:42.317] | : . ' , ; `    - call: plan(sequential)
[08:07:42.318] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:42.318] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:42.318] | : . ' , assign_globals() ...
[08:07:42.318] | : . ' , List of 1
[08:07:42.318] | : . ' ,  $ a: int 42
[08:07:42.318] | : . ' ,  - attr(*, "where")=List of 1
[08:07:42.318] | : . ' ,   ..$ a:<environment: 0x560dd85d68a8> 
[08:07:42.318] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:42.318] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:07:42.318] | : . ' ,  - attr(*, "total_size")= num NA
[08:07:42.318] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:07:42.321] | : . ' , - copied ‘a’ to environment
[08:07:42.321] | : . ' , assign_globals() ... done
[08:07:42.323] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:42.323] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:42.324] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:42.324] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:42.324] | : . ' , ; ` | : New stack:
[08:07:42.324] | : . ' , ; ` | : List of 1
[08:07:42.324] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.324] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.324] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:42.324] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.324] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.324] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.324] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:42.324] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560dda149628> 
[08:07:42.324] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.324] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.324] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:42.327] | : . ' , ; ` | : Old stack:
[08:07:42.327] | : . ' , ; ` | : List of 1
[08:07:42.327] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.327] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.327] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:42.327] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.327] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.327] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.327] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:42.327] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560dda149628> 
[08:07:42.327] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.327] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.327] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:42.331] | : . ' , ; ` | : Identical
[08:07:42.331] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:42.331] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:42.331] | : . ' , ; ` | List of future strategies:
[08:07:42.331] | : . ' , ; ` | 1. sequential:
[08:07:42.331] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:42.331] | : . ' , ; ` |    - tweaked: FALSE
[08:07:42.331] | : . ' , ; ` |    - call: plan(sequential)
[08:07:42.332] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:42.332] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:42.332] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:42.332] | : . ' , SequentialFuture started (and completed)
[08:07:42.333] | : . ' , signalConditions() ...
[08:07:42.333] | : . ' , ; include = ‘immediateCondition’
[08:07:42.333] | : . ' , ; exclude = 
[08:07:42.333] | : . ' , ; resignal = FALSE
[08:07:42.333] | : . ' , ; Number of conditions: 6
[08:07:42.333] | : . ' , ;  int 6
[08:07:42.336] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.336] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.336] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.336] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.336] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.336] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.336] | : . ' , signalConditions() ... done
[08:07:42.336] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:42.337] | : . Launching futures ... done
[08:07:42.337] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:42.337] | : Using SequentialFutureBackend ... done
[08:07:42.337] | run() for ‘Future’ (<unnamed-2>) ... done
[08:07:42.337] | signalConditions() ...
[08:07:42.337] | : include = ‘immediateCondition’
[08:07:42.337] | : exclude = 
[08:07:42.337] | : resignal = FALSE
[08:07:42.337] | : Number of conditions: 6
[08:07:42.338] | :  int 6
[08:07:42.338] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.338] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.338] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.338] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.338] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.339] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.339] | signalConditions() ... done
[08:07:42.339] | relay stdout ...
[08:07:42.339] | relay stdout ... done
[08:07:42.339] | check for misuse ...
[08:07:42.339] | check for misuse ... done
[08:07:42.339] | relay conditions ...
[08:07:42.339] | : Future state: ‘finished’
[08:07:42.339] | : signalConditions() ...
[08:07:42.340] | : . include = ‘condition’
[08:07:42.340] | : . exclude = ‘immediateCondition’
[08:07:42.340] | : . resignal = TRUE
[08:07:42.340] | : . Number of conditions: 6
[08:07:42.340] | : .  int 6
[08:07:42.340] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.341] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.301] | : . ' , attachPackages() ...
[08:07:42.341] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.341] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.301] | : . ' , ; packages: [n=1] ‘future’
[08:07:42.341] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.341] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.301] | : . ' , attachPackages() ... done
[08:07:42.341] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.341] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.302] | : . ' , attachPackages() ...
[08:07:42.341] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.342] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.302] | : . ' , ; packages: [n=0] 
[08:07:42.342] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.342] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.302] | : . ' , attachPackages() ... done
[08:07:42.342] | : signalConditions() ... done
[08:07:42.342] | relay conditions ... done
[08:07:42.342] value() for Future (<unnamed-2>) ... done
[1] 42

> message("*** future() w/ lazy = TRUE in local() ... DONE")
*** future() w/ lazy = TRUE in local() ... DONE

> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...

> f <- future(42, gc = TRUE, lazy = TRUE)
[08:07:42.343] future(..., label = NULL) ...
[08:07:42.343] | lazy: TRUE
[08:07:42.343] | stdout: TRUE
[08:07:42.343] | conditions: [n=1] ‘condition’
[08:07:42.343] | gc: TRUE
[08:07:42.343] | earlySignal: FALSE
[08:07:42.343] | getGlobalsAndPackages() ...
[08:07:42.343] | : Searching for globals ...
[08:07:42.345] | : . globals found: [0] 
[08:07:42.345] | : Searching for globals ... done
[08:07:42.345] | : globals: [0] <none>
[08:07:42.345] | : packages: [0] <none>
[08:07:42.345] | getGlobalsAndPackages() ... done
[08:07:42.345] future(..., label = NULL) ... done

> print(f)
Future:
Label: <unnamed-3>
Expression:
[1] 42
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: TRUE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘created’
Resolved: FALSE
Unique identifier: c731915c7f0e75c5e7fd4d82cb25ea55-3
Owner process: c731915c7f0e75c5e7fd4d82cb25ea55
Class: ‘Future’, ‘environment’
Value: <not collected>
Conditions captured: <none>

> y <- value(f)
[08:07:42.346] value() for Future (<unnamed-3>) ...
[08:07:42.347] | run() for ‘Future’ (<unnamed-3>) ...
[08:07:42.347] | : state: ‘created’
[08:07:42.347] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:42.347] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:42.347] | : Using SequentialFutureBackend ...
[08:07:42.347] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:07:42.347] | : . Launching futures ...
[08:07:42.347] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:42.348] | : . ' , getFutureData() ...
[08:07:42.348] | : . ' , ; getFutureCore() ...
[08:07:42.348] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:42.348] | : . ' , ; getFutureCore() ... done
[08:07:42.348] | : . ' , ; getFutureCapture() ...
[08:07:42.348] | : . ' , ; getFutureCapture() ... done
[08:07:42.348] | : . ' , ; getFutureContext() ...
[08:07:42.348] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:42.348] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:42.349] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:42.349] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:42.349] | : . ' , ; getFutureContext() ... done
[08:07:42.349] | : . ' , getFutureData() ... done
[08:07:42.350] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:42.350] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:42.351] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:42.351] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:42.351] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:42.351] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:42.351] | : . ' , ; ` | New stack:
[08:07:42.351] | : . ' , ; ` | List of 1
[08:07:42.351] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.351] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.351] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:42.351] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.351] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.351] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.351] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:42.351] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:42.354] | : . ' , ; ` | Old stack:
[08:07:42.355] | : . ' , ; ` | List of 1
[08:07:42.355] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.355] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.355] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:42.355] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.355] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.355] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.355] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:42.355] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560dda149628> 
[08:07:42.355] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.355] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.355] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:42.360] | : . ' , ; ` | Not identical
[08:07:42.360] | : . ' , ; ` | all.equal() for future ...
[08:07:42.361] | : . ' , ; ` | : List of 2
[08:07:42.361] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.361] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.361] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:42.361] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.361] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.361] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.361] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:42.361] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.361] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.361] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:42.361] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.361] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.361] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.361] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:42.361] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560dda149628> 
[08:07:42.361] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.361] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.366] | : . ' , ; ` | all.equal() for future ... done
[08:07:42.366] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:42.367] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:42.367] | : . ' , ; ` List of future strategies:
[08:07:42.367] | : . ' , ; ` 1. sequential:
[08:07:42.367] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:42.367] | : . ' , ; `    - tweaked: FALSE
[08:07:42.367] | : . ' , ; `    - call: plan(sequential)
[08:07:42.367] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:42.367] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:42.369] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:42.369] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:42.369] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:42.369] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:42.370] | : . ' , ; ` | : New stack:
[08:07:42.370] | : . ' , ; ` | : List of 1
[08:07:42.370] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.370] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.370] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:42.370] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.370] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.370] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.370] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:42.370] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560dda149628> 
[08:07:42.370] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.370] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.370] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:42.373] | : . ' , ; ` | : Old stack:
[08:07:42.373] | : . ' , ; ` | : List of 1
[08:07:42.373] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.373] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.373] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:42.373] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.373] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.373] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.373] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:42.373] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560dda149628> 
[08:07:42.373] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.373] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.373] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:42.376] | : . ' , ; ` | : Identical
[08:07:42.377] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:42.377] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:42.377] | : . ' , ; ` | List of future strategies:
[08:07:42.377] | : . ' , ; ` | 1. sequential:
[08:07:42.377] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:42.377] | : . ' , ; ` |    - tweaked: FALSE
[08:07:42.377] | : . ' , ; ` |    - call: plan(sequential)
[08:07:42.377] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:42.377] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:42.377] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:42.378] | : . ' , SequentialFuture started (and completed)
[08:07:42.378] | : . ' , signalConditions() ...
[08:07:42.378] | : . ' , ; include = ‘immediateCondition’
[08:07:42.378] | : . ' , ; exclude = 
[08:07:42.378] | : . ' , ; resignal = FALSE
[08:07:42.378] | : . ' , ; Number of conditions: 6
[08:07:42.378] | : . ' , ;  int 6
[08:07:42.379] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.379] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.379] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.379] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.379] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.380] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.380] | : . ' , signalConditions() ... done
[08:07:42.380] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:42.380] | : . Launching futures ... done
[08:07:42.380] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:42.380] | : Using SequentialFutureBackend ... done
[08:07:42.380] | run() for ‘Future’ (<unnamed-3>) ... done
[08:07:42.380] | signalConditions() ...
[08:07:42.380] | : include = ‘immediateCondition’
[08:07:42.381] | : exclude = 
[08:07:42.381] | : resignal = FALSE
[08:07:42.381] | : Number of conditions: 6
[08:07:42.381] | :  int 6
[08:07:42.381] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.383] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.383] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.383] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.384] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.384] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.384] | signalConditions() ... done
[08:07:42.384] | relay stdout ...
[08:07:42.384] | relay stdout ... done
[08:07:42.384] | check for misuse ...
[08:07:42.384] | check for misuse ... done
[08:07:42.384] | relay conditions ...
[08:07:42.384] | : Future state: ‘finished’
[08:07:42.385] | : signalConditions() ...
[08:07:42.385] | : . include = ‘condition’
[08:07:42.385] | : . exclude = ‘immediateCondition’
[08:07:42.385] | : . resignal = TRUE
[08:07:42.385] | : . Number of conditions: 6
[08:07:42.385] | : .  int 6
[08:07:42.386] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.386] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.349] | : . ' , attachPackages() ...
[08:07:42.386] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.386] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.349] | : . ' , ; packages: [n=1] ‘future’
[08:07:42.386] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.386] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.350] | : . ' , attachPackages() ... done
[08:07:42.386] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.386] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.350] | : . ' , attachPackages() ...
[08:07:42.387] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.387] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.350] | : . ' , ; packages: [n=0] 
[08:07:42.387] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.387] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.350] | : . ' , attachPackages() ... done
[08:07:42.387] | : signalConditions() ... done
[08:07:42.387] | relay conditions ... done
[08:07:42.387] value() for Future (<unnamed-3>) ... done

> print(y)
[1] 42

> stopifnot(y == 42)

> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE

> message("*** future() ... DONE")
*** future() ... DONE

> message("*** future() ...")
*** future() ...

> f <- future({
+     42
+ }, lazy = TRUE)
[08:07:42.388] future(..., label = NULL) ...
[08:07:42.388] | lazy: TRUE
[08:07:42.388] | stdout: TRUE
[08:07:42.388] | conditions: [n=1] ‘condition’
[08:07:42.388] | gc: FALSE
[08:07:42.389] | earlySignal: FALSE
[08:07:42.389] | getGlobalsAndPackages() ...
[08:07:42.389] | : Searching for globals ...
[08:07:42.392] | : . globals found: [1] ‘{’
[08:07:42.392] | : Searching for globals ... done
[08:07:42.392] | : Resolving globals: FALSE
[08:07:42.392] | : Search for packages associated with the globals ...
[08:07:42.393] | : . Packages associated with globals: [1] ‘base’
[08:07:42.393] | : . Packages: [1] ‘base’
[08:07:42.393] | : Search for packages associated with the globals ... done
[08:07:42.393] | : Packages after dropping 'base': [0] 
[08:07:42.393] | : globals: [0] 
[08:07:42.393] | : packages: [0] 
[08:07:42.393] | getGlobalsAndPackages() ... done
[08:07:42.394] future(..., label = NULL) ... done

> print(resolved(f))
[08:07:42.394] resolved() for Future (<unnamed-4>) ...
[08:07:42.394] | state: ‘created’
[08:07:42.394] | run: TRUE
[08:07:42.394] | run() ...
[08:07:42.394] | : run() for ‘Future’ (<unnamed-4>) ...
[08:07:42.394] | : . state: ‘created’
[08:07:42.394] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:42.395] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:42.395] | : . Using SequentialFutureBackend ...
[08:07:42.395] | : . ' Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:07:42.395] | : . ' Launching futures ...
[08:07:42.395] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:42.395] | : . ' , ; getFutureData() ...
[08:07:42.395] | : . ' , ; ` getFutureCore() ...
[08:07:42.395] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:07:42.396] | : . ' , ; ` getFutureCore() ... done
[08:07:42.396] | : . ' , ; ` getFutureCapture() ...
[08:07:42.396] | : . ' , ; ` getFutureCapture() ... done
[08:07:42.396] | : . ' , ; ` getFutureContext() ...
[08:07:42.396] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:42.396] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:07:42.396] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:42.396] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:07:42.396] | : . ' , ; ` getFutureContext() ... done
[08:07:42.397] | : . ' , ; getFutureData() ... done
[08:07:42.398] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:42.398] | : . ' , ; ` Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:42.398] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:42.398] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:42.399] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:42.399] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:42.399] | : . ' , ; ` | : New stack:
[08:07:42.399] | : . ' , ; ` | : List of 1
[08:07:42.399] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.399] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.399] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:42.399] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.399] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.399] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.399] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:42.399] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:42.402] | : . ' , ; ` | : Old stack:
[08:07:42.402] | : . ' , ; ` | : List of 1
[08:07:42.402] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.402] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.402] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:42.402] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.402] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.402] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.402] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:42.402] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560dda149628> 
[08:07:42.402] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.402] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.402] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:42.407] | : . ' , ; ` | : Not identical
[08:07:42.407] | : . ' , ; ` | : all.equal() for future ...
[08:07:42.408] | : . ' , ; ` | : . List of 2
[08:07:42.408] | : . ' , ; ` | : .  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.408] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.408] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:07:42.408] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.408] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.408] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.408] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:42.408] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.408] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.408] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:42.408] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.408] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.408] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.408] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:42.408] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560dda149628> 
[08:07:42.408] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.408] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.413] | : . ' , ; ` | : all.equal() for future ... done
[08:07:42.413] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:42.413] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:42.414] | : . ' , ; ` | List of future strategies:
[08:07:42.414] | : . ' , ; ` | 1. sequential:
[08:07:42.414] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:42.414] | : . ' , ; ` |    - tweaked: FALSE
[08:07:42.414] | : . ' , ; ` |    - call: plan(sequential)
[08:07:42.414] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:42.414] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:42.416] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:42.416] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:42.416] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:42.416] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:07:42.416] | : . ' , ; ` | : . New stack:
[08:07:42.416] | : . ' , ; ` | : . List of 1
[08:07:42.416] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.416] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.416] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:42.416] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.416] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.416] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.416] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:42.416] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560dda149628> 
[08:07:42.416] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.416] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.416] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:42.420] | : . ' , ; ` | : . Old stack:
[08:07:42.420] | : . ' , ; ` | : . List of 1
[08:07:42.420] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.420] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.420] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:42.420] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.420] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.420] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.420] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:42.420] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560dda149628> 
[08:07:42.420] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.420] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.420] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:42.423] | : . ' , ; ` | : . Identical
[08:07:42.423] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:07:42.423] | : . ' , ; ` | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:42.424] | : . ' , ; ` | : List of future strategies:
[08:07:42.424] | : . ' , ; ` | : 1. sequential:
[08:07:42.424] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:42.424] | : . ' , ; ` | :    - tweaked: FALSE
[08:07:42.424] | : . ' , ; ` | :    - call: plan(sequential)
[08:07:42.424] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:42.424] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:42.424] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:42.425] | : . ' , ; SequentialFuture started (and completed)
[08:07:42.425] | : . ' , ; signalConditions() ...
[08:07:42.425] | : . ' , ; ` include = ‘immediateCondition’
[08:07:42.425] | : . ' , ; ` exclude = 
[08:07:42.425] | : . ' , ; ` resignal = FALSE
[08:07:42.425] | : . ' , ; ` Number of conditions: 6
[08:07:42.425] | : . ' , ; `  int 6
[08:07:42.426] | : . ' , ; ` Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.426] | : . ' , ; ` Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.426] | : . ' , ; ` Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.426] | : . ' , ; ` Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.426] | : . ' , ; ` Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.426] | : . ' , ; ` Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.426] | : . ' , ; signalConditions() ... done
[08:07:42.426] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:42.427] | : . ' Launching futures ... done
[08:07:42.427] | : . ' Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:42.429] | : . Using SequentialFutureBackend ... done
[08:07:42.429] | : run() for ‘Future’ (<unnamed-4>) ... done
[08:07:42.429] | run() ... done
[08:07:42.429] | resolved() ...
[08:07:42.429] | : resolved() for SequentialFuture (<unnamed-4>) ...
[08:07:42.429] | : . state: ‘finished’
[08:07:42.429] | : . run: TRUE
[08:07:42.430] | : . result: ‘FutureResult’
[08:07:42.430] | : resolved() for SequentialFuture (<unnamed-4>) ... done
[08:07:42.430] | : resolved: TRUE
[08:07:42.430] | resolved() ... done
[08:07:42.430] resolved() for Future (<unnamed-4>) ... done
[1] TRUE

> y <- value(f)
[08:07:42.430] value() for SequentialFuture (<unnamed-4>) ...
[08:07:42.430] | signalConditions() ...
[08:07:42.430] | : include = ‘immediateCondition’
[08:07:42.431] | : exclude = 
[08:07:42.431] | : resignal = FALSE
[08:07:42.431] | : Number of conditions: 6
[08:07:42.431] | :  int 6
[08:07:42.431] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.431] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.432] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.432] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.432] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.432] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.432] | signalConditions() ... done
[08:07:42.432] | relay stdout ...
[08:07:42.432] | relay stdout ... done
[08:07:42.432] | check for misuse ...
[08:07:42.433] | check for misuse ... done
[08:07:42.433] | relay conditions ...
[08:07:42.433] | : Future state: ‘finished’
[08:07:42.433] | : signalConditions() ...
[08:07:42.433] | : . include = ‘condition’
[08:07:42.433] | : . exclude = ‘immediateCondition’
[08:07:42.433] | : . resignal = TRUE
[08:07:42.433] | : . Number of conditions: 6
[08:07:42.433] | : .  int 6
[08:07:42.434] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.434] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.397] | : . ' , ; attachPackages() ...
[08:07:42.434] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.434] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.397] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:42.434] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.434] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.397] | : . ' , ; attachPackages() ... done
[08:07:42.435] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.435] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.397] | : . ' , ; attachPackages() ...
[08:07:42.435] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.435] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.397] | : . ' , ; ` packages: [n=0] 
[08:07:42.435] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.435] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.398] | : . ' , ; attachPackages() ... done
[08:07:42.435] | : signalConditions() ... done
[08:07:42.436] | relay conditions ... done
[08:07:42.436] value() for SequentialFuture (<unnamed-4>) ... done

> print(y)
[1] 42

> stopifnot(y == 42)

> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...

> f <- future(42, gc = TRUE, lazy = TRUE)
[08:07:42.436] future(..., label = NULL) ...
[08:07:42.436] | lazy: TRUE
[08:07:42.436] | stdout: TRUE
[08:07:42.436] | conditions: [n=1] ‘condition’
[08:07:42.437] | gc: TRUE
[08:07:42.437] | earlySignal: FALSE
[08:07:42.437] | getGlobalsAndPackages() ...
[08:07:42.437] | : Searching for globals ...
[08:07:42.438] | : . globals found: [0] 
[08:07:42.438] | : Searching for globals ... done
[08:07:42.438] | : globals: [0] <none>
[08:07:42.439] | : packages: [0] <none>
[08:07:42.439] | getGlobalsAndPackages() ... done
[08:07:42.439] future(..., label = NULL) ... done

> print(f)
Future:
Label: <unnamed-5>
Expression:
[1] 42
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: TRUE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘created’
Resolved: FALSE
Unique identifier: c731915c7f0e75c5e7fd4d82cb25ea55-5
Owner process: c731915c7f0e75c5e7fd4d82cb25ea55
Class: ‘Future’, ‘environment’
Value: <not collected>
Conditions captured: <none>

> y <- value(f)
[08:07:42.440] value() for Future (<unnamed-5>) ...
[08:07:42.440] | run() for ‘Future’ (<unnamed-5>) ...
[08:07:42.440] | : state: ‘created’
[08:07:42.440] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:42.440] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:42.440] | : Using SequentialFutureBackend ...
[08:07:42.440] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:07:42.440] | : . Launching futures ...
[08:07:42.441] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:42.441] | : . ' , getFutureData() ...
[08:07:42.441] | : . ' , ; getFutureCore() ...
[08:07:42.441] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:42.441] | : . ' , ; getFutureCore() ... done
[08:07:42.441] | : . ' , ; getFutureCapture() ...
[08:07:42.441] | : . ' , ; getFutureCapture() ... done
[08:07:42.441] | : . ' , ; getFutureContext() ...
[08:07:42.441] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:42.442] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:42.442] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:42.442] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:42.442] | : . ' , ; getFutureContext() ... done
[08:07:42.442] | : . ' , getFutureData() ... done
[08:07:42.444] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:42.444] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:42.444] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:42.444] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:42.444] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:42.445] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:42.445] | : . ' , ; ` | New stack:
[08:07:42.445] | : . ' , ; ` | List of 1
[08:07:42.445] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.445] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.445] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:42.445] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.445] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.445] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.445] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:42.445] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:42.448] | : . ' , ; ` | Old stack:
[08:07:42.448] | : . ' , ; ` | List of 1
[08:07:42.448] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.448] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.448] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:42.448] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.448] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.448] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.448] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:42.448] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560dda149628> 
[08:07:42.448] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.448] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.448] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:42.454] | : . ' , ; ` | Not identical
[08:07:42.455] | : . ' , ; ` | all.equal() for future ...
[08:07:42.455] | : . ' , ; ` | : List of 2
[08:07:42.455] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.455] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.455] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:42.455] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.455] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.455] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.455] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:42.455] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.455] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.455] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:42.455] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.455] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.455] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.455] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:42.455] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560dda149628> 
[08:07:42.455] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.455] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.461] | : . ' , ; ` | all.equal() for future ... done
[08:07:42.461] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:42.461] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:42.461] | : . ' , ; ` List of future strategies:
[08:07:42.461] | : . ' , ; ` 1. sequential:
[08:07:42.461] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:42.461] | : . ' , ; `    - tweaked: FALSE
[08:07:42.461] | : . ' , ; `    - call: plan(sequential)
[08:07:42.462] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:42.462] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:42.464] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:42.464] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:42.464] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:42.464] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:42.465] | : . ' , ; ` | : New stack:
[08:07:42.465] | : . ' , ; ` | : List of 1
[08:07:42.465] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.465] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.465] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:42.465] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.465] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.465] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.465] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:42.465] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560dda149628> 
[08:07:42.465] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.465] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.465] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:42.468] | : . ' , ; ` | : Old stack:
[08:07:42.468] | : . ' , ; ` | : List of 1
[08:07:42.468] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:42.468] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:42.468] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:42.468] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.468] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.468] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.468] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:42.468] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x560dda149628> 
[08:07:42.468] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:42.468] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:42.468] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:42.472] | : . ' , ; ` | : Identical
[08:07:42.472] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:42.472] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:42.472] | : . ' , ; ` | List of future strategies:
[08:07:42.472] | : . ' , ; ` | 1. sequential:
[08:07:42.472] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:42.472] | : . ' , ; ` |    - tweaked: FALSE
[08:07:42.472] | : . ' , ; ` |    - call: plan(sequential)
[08:07:42.472] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:42.473] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:42.473] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:42.473] | : . ' , SequentialFuture started (and completed)
[08:07:42.473] | : . ' , signalConditions() ...
[08:07:42.473] | : . ' , ; include = ‘immediateCondition’
[08:07:42.473] | : . ' , ; exclude = 
[08:07:42.473] | : . ' , ; resignal = FALSE
[08:07:42.474] | : . ' , ; Number of conditions: 6
[08:07:42.474] | : . ' , ;  int 6
[08:07:42.474] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.474] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.474] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.474] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.475] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.475] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.475] | : . ' , signalConditions() ... done
[08:07:42.475] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:42.475] | : . Launching futures ... done
[08:07:42.475] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:42.475] | : Using SequentialFutureBackend ... done
[08:07:42.475] | run() for ‘Future’ (<unnamed-5>) ... done
[08:07:42.475] | signalConditions() ...
[08:07:42.476] | : include = ‘immediateCondition’
[08:07:42.478] | : exclude = 
[08:07:42.478] | : resignal = FALSE
[08:07:42.478] | : Number of conditions: 6
[08:07:42.478] | :  int 6
[08:07:42.478] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.479] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.479] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.479] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.479] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.479] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.479] | signalConditions() ... done
[08:07:42.479] | relay stdout ...
[08:07:42.479] | relay stdout ... done
[08:07:42.479] | check for misuse ...
[08:07:42.480] | check for misuse ... done
[08:07:42.480] | relay conditions ...
[08:07:42.480] | : Future state: ‘finished’
[08:07:42.480] | : signalConditions() ...
[08:07:42.480] | : . include = ‘condition’
[08:07:42.480] | : . exclude = ‘immediateCondition’
[08:07:42.480] | : . resignal = TRUE
[08:07:42.480] | : . Number of conditions: 6
[08:07:42.480] | : .  int 6
[08:07:42.481] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.481] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.442] | : . ' , attachPackages() ...
[08:07:42.481] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.481] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.443] | : . ' , ; packages: [n=1] ‘future’
[08:07:42.481] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.481] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.443] | : . ' , attachPackages() ... done
[08:07:42.482] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.482] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.443] | : . ' , attachPackages() ...
[08:07:42.482] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.482] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.443] | : . ' , ; packages: [n=0] 
[08:07:42.482] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:42.482] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:42.443] | : . ' , attachPackages() ... done
[08:07:42.482] | : signalConditions() ... done
[08:07:42.482] | relay conditions ... done
[08:07:42.483] value() for Future (<unnamed-5>) ... done

> print(y)
[1] 42

> stopifnot(y == 42)

> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE

> message("*** future() - exceptions ...")
*** future() - exceptions ...

> target <- list(name = "<unknown>", envir = new.env(), 
+     code = "Yo!", exists = TRUE)

> res <- tryCatch(get_future(target, mustExist = TRUE), 
+     error = identity)
[08:07:42.483] ERROR: Future (‘<unknown>’) not found in environment ‘<noname>’: ‘Yo!’

> stopifnot(inherits(res, "error"))

> message("*** future() - exceptions ... DONE")
*** future() - exceptions ... DONE

> message("*** future() ... DONE")
*** future() ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.3s, sys.self=0.007s, elapsed=0.3s, user.child=0.003s, sys.child=0.003s
Test ‘future’ ... success
> 
